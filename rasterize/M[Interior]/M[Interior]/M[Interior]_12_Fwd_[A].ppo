#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _962;
float _2916;
float _2917;
float _2918;
float _2919;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _285 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = cbMtdParam._m0[21u].w + _261;
    float _321 = cbMtdParam._m0[22u].x + _262;
    float _322 = cbMtdParam._m0[22u].y + _263;
    float _336 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_320, _321, _322), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _346 = (_342 * _336) + (((_285.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _347 = (_342 * _337) + (((_285.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _348 = _346 * cbMtdParam._m0[18u].z;
    float _349 = _347 * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    bool _367 = _345 > 0.0;
    float _369 = _367 ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = _350 + (-0.5);
    float _379 = _351 + (-0.5);
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_376 + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_379 + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _436 = _346 * cbMtdParam._m0[20u].z;
    float _437 = _347 * cbMtdParam._m0[20u].y;
    bool _438 = _436 > 0.0;
    float _443;
    if (_438)
    {
        _443 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _443 = frontier_phi_11_10_ladder;
    }
    bool _445 = _437 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _450 = frontier_phi_15_14_ladder;
    }
    float _453 = _367 ? (cbMtdParam._m0[16u].x / _345) : 5000.0;
    float _454 = isnan(_450) ? _443 : (isnan(_443) ? _450 : min(_443, _450));
    float _455 = isnan(_453) ? _454 : (isnan(_454) ? _453 : min(_454, _453));
    float _459 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _463 = ((_455 * _345) + _459) / _459;
    float _468 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _470 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_376 + (_455 * _436)) / _463) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_379 + (_455 * _437)) / _463) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _498;
    if (_438)
    {
        _498 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _498 = frontier_phi_19_18_ladder;
    }
    float _504;
    if (_445)
    {
        _504 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _504 = frontier_phi_23_22_ladder;
    }
    float _506 = isnan(_504) ? _498 : (isnan(_498) ? _504 : min(_498, _504));
    float _507 = isnan(_453) ? _506 : (isnan(_506) ? _453 : min(_506, _453));
    float _514 = ((_507 * _345) + _459) / _459;
    vec4 _535 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_376 + (_507 * _436)) / _514) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_379 + (_507 * _437)) / _514) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_486.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_486.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_486.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _2958 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2969 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _2980 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _570 = _261 * _569;
    float _571 = _262 * _569;
    float _572 = _263 * _569;
    vec4 _577 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _579 = _577.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _675 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _682 = (cbMatDynParam._m0[5u].x * _675) + cbMatDynParam._m0[5u].y;
        float _2991 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
        float _687 = (cbMatDynParam._m0[5u].z * _675) + cbMatDynParam._m0[5u].w;
        float _3002 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) - _683)) + _683) < ((_579 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = _605 + 9u;
    uint _608 = _607 + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3013 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
    float _3024 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    float _3035 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _631 = _628.x * TEXCOORD.z;
    float _632 = (-0.0) - _570;
    float _633 = (-0.0) - _571;
    float _634 = (-0.0) - _572;
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _749 = (cbModelParam._m0[37u].x * ((((fma(_664, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _751 = (cbModelParam._m0[37u].y * ((((fma(_664, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _752 = (((((fma(_664, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_749, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_749, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_749, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_749, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(0.0), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3061 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3072 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3083 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(0.0), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3094 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3105 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3116 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(0.0), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3149 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1033 = (cbModelParam._m0[38u].x * ((((fma(_664, cbModelParam._m0[30u].z, fma(_660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _656)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1034 = (cbModelParam._m0[38u].y * ((((fma(_664, cbModelParam._m0[31u].z, fma(_660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _656)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1035 = (((((fma(_664, cbModelParam._m0[32u].z, fma(_660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _656)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(0.0), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3190 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3201 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3212 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(0.0), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3245 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(0.0), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3278 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _962;
        _1241 = _962;
        _1242 = _962;
        _1243 = _962;
        _1244 = _962;
        _1245 = _962;
        _1246 = _962;
        _1247 = _962;
        _1248 = _962;
        _1249 = _962;
        _1250 = _962;
        _1251 = _962;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _974)) + _974;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _975)) + _975;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _976)) + _976;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _570 * (-0.5);
    float _1309 = _571 * (-0.5);
    float _1310 = _572 * (-0.5);
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_961, _965, _968, _971));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_963, _966, _969, _972));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_964, _967, _970, _973));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1375 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_664, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_664, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_664, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1438 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1441 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1467;
        if (_1435 > 0.0)
        {
            _1467 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1467 = frontier_phi_41_39_ladder;
        }
        float _1762;
        if (_1438 > 0.0)
        {
            _1762 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1762 = frontier_phi_50_46_ladder;
        }
        float _2073;
        if (_1441 > 0.0)
        {
            _2073 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2073 = frontier_phi_64_57_ladder;
        }
        float _2075 = isnan(_1762) ? _1467 : (isnan(_1467) ? _1762 : min(_1467, _1762));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1435) + _1424;
        float _2081 = (_2076 * _1438) + _1428;
        float _2082 = (_2076 * _1441) + _1432;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2083;
        float _2086 = _2083 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2082 > _2086) || ((_2082 < _2084) || ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 < _2084) || (_2080 > _2086))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_40_64_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_40_64_ladder_2;
        _1459 = frontier_phi_40_64_ladder_1;
        _1461 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1464 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_664, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_664, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_664, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1530 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1533 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1767;
        if (_1527 > 0.0)
        {
            _1767 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1767 = frontier_phi_52_48_ladder;
        }
        float _2099;
        if (_1530 > 0.0)
        {
            _2099 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2099 = frontier_phi_66_59_ladder;
        }
        float _2286;
        if (_1533 > 0.0)
        {
            _2286 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2286 = frontier_phi_84_77_ladder;
        }
        float _2288 = isnan(_2099) ? _1767 : (isnan(_1767) ? _2099 : min(_1767, _2099));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1527) + _1516;
        float _2294 = (_2289 * _1530) + _1520;
        float _2295 = (_2289 * _1533) + _1524;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_49_84_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_49_84_ladder_2;
        _1554 = frontier_phi_49_84_ladder_1;
        _1556 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1464);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = _631 * 0.01200000010430812835693359375;
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1457)) + _1457);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1459)) + _1459);
    float _1572 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1461)) + _1461);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    uvec4 _1591 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1593 = _1591.x * 14u;
    uint _1594 = _1593 + 13u;
    float _1599 = _631 + (-1.0);
    float _1602 = (cbLight._m0[_1594].x * _1599) + 1.0;
    float _1603 = (cbLight._m0[_1594].y * _1599) + 1.0;
    uint _1604 = _1593 + 5u;
    float _1610 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1614 = _1593 + 4u;
    float _1620 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1624 = _1593 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1593].xyz), vec3(0.0));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(0.0));
    float _3414 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3425 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1604].x * _1610) * _1645) + ((cbLight._m0[_1614].x * _1620) * _1643);
    float _1653 = ((_1610 * cbLight._m0[_1604].y) * _1645) + ((_1620 * cbLight._m0[_1614].y) * _1643);
    float _1654 = ((_1610 * cbLight._m0[_1604].z) * _1645) + ((_1620 * cbLight._m0[_1614].z) * _1643);
    uint _1655 = _1593 + 8u;
    float _1661 = cbLight._m0[_1593].x + _570;
    float _1662 = cbLight._m0[_1593].y + _571;
    float _1663 = cbLight._m0[_1593].z + _572;
    float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
    float _1671 = dot(vec3(0.0), vec3(cbLight._m0[_1593].xyz));
    float _3436 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1674 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _1675 = dot(vec3(0.0), vec3(_570, _571, _572));
    float _3447 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1678 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _1679 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1661 * _1667, _1662 * _1667, _1663 * _1667));
    float _3458 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1690 = (exp2(log2(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1696 = (0.5 / ((_1674 + 9.9999999392252902907785028219223e-09) + _1678)) * _1674;
    float _3469 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1698 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.31831014156341552734375;
    uint _1709 = _1593 + 9u;
    float _1715 = cbLight._m0[_1624].x + _570;
    float _1716 = cbLight._m0[_1624].y + _571;
    float _1717 = cbLight._m0[_1624].z + _572;
    float _1721 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
    float _1725 = dot(vec3(0.0), vec3(cbLight._m0[_1624].xyz));
    float _3480 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1715 * _1721, _1716 * _1721, _1717 * _1721));
    float _3491 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1742 = (0.5 / ((_1728 + 9.9999999392252902907785028219223e-09) + _1678)) * _1728;
    float _3502 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.31831014156341552734375;
    float _1754 = (((_1738 * cbLight._m0[_1709].x) * _1744) * _1610) + (((_1690 * cbLight._m0[_1655].x) * _1698) * _1620);
    float _1755 = (((_1738 * cbLight._m0[_1709].y) * _1744) * _1610) + (((_1690 * cbLight._m0[_1655].y) * _1698) * _1620);
    float _1756 = (((_1738 * cbLight._m0[_1709].z) * _1744) * _1610) + (((_1690 * cbLight._m0[_1655].z) * _1698) * _1620);
    float _1872;
    float _1874;
    float _1876;
    float _1878;
    float _1880;
    float _1882;
    if (_1591.y == 0u)
    {
        float _1812 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1813 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1812;
        float _1814 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1812;
        float _1815 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1812;
        uvec4 _1827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1828 = _1827.x;
        uint _1839 = uint((float(_1827.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _1828))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _1828)));
        float _1849 = (log2(_1815 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1850 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        uint _1853 = uint(isnan(14.0) ? _1850 : (isnan(_1850) ? 14.0 : min(_1850, 14.0)));
        uvec4 _1858 = texelFetch(g_lightClusterGridBuffer, int(((_1853 << 2u) + (_1839 << 6u)) >> 2u));
        uint _1859 = _1858.x;
        uint _1860 = _1827.z;
        float _1950;
        float _1952;
        float _1954;
        float _1956;
        float _1958;
        float _1960;
        if (((((1u << ((_1860 >> 4u) & 15u)) + 4294967295u) & _1859) == 0u) || ((_1860 & 240u) == 0u))
        {
            _1950 = 0.0;
            _1952 = 0.0;
            _1954 = 0.0;
            _1956 = 0.0;
            _1958 = 0.0;
            _1960 = 0.0;
        }
        else
        {
            float _1951;
            float _1953;
            float _1955;
            float _1957;
            float _1959;
            float _1961;
            float _2133 = 0.0;
            float _2134 = 0.0;
            float _2135 = 0.0;
            float _2136 = 0.0;
            float _2137 = 0.0;
            float _2138 = 0.0;
            uint _2139 = 0u;
            uint _2148;
            bool _2149;
            for (;;)
            {
                _2148 = texelFetch(g_lightClassification, int((((_1853 << 5u) + (_1839 << 9u)) + (_2139 << 2u)) >> 2u)).x;
                _2149 = _2148 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2149)
                {
                    frontier_phi_79_pred = _2138;
                    frontier_phi_79_pred_1 = _2137;
                    frontier_phi_79_pred_2 = _2136;
                    frontier_phi_79_pred_3 = _2135;
                    frontier_phi_79_pred_4 = _2134;
                    frontier_phi_79_pred_5 = _2133;
                }
                else
                {
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    uint _2335;
                    _2329 = _2133;
                    _2330 = _2134;
                    _2331 = _2135;
                    _2332 = _2136;
                    _2333 = _2137;
                    _2334 = _2138;
                    _2335 = _2148;
                    float _2230;
                    float _2231;
                    float _2232;
                    float _2233;
                    float _2234;
                    float _2235;
                    for (;;)
                    {
                        uint _2339 = uint(findLSB(_2335)) + (_2139 << 5u);
                        uint _2336 = (_2335 + 4294967295u) & _2335;
                        uint _2341 = _2339 * 48u;
                        vec4 _2355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2341)).x, texelFetch(g_PointLightRenderingBuffer, int(_2341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2341 + 3u)).x));
                        uint _2361 = (_2339 * 48u) + 4u;
                        vec4 _2374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2361)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2361 + 3u)).x));
                        uint _2380 = (_2339 * 48u) + 8u;
                        vec3 _2391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2380)).x, texelFetch(g_PointLightRenderingBuffer, int(_2380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2380 + 2u)).x));
                        float _2395 = _2355.x - _1813;
                        float _2396 = _2355.y - _1814;
                        float _2397 = _2355.z - _1815;
                        float _2398 = dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397));
                        float _2401 = inversesqrt(_2398);
                        float _2410 = 1.0 - (_2398 * _2355.w);
                        float _3523 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
                        float _2411 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
                        float _2412 = sqrt(_2398) * _2374.w;
                        float _2415 = 1.39999997615814208984375 / (_2412 + 1.39999997615814208984375);
                        float _2416 = _2415 * _2415;
                        float _2419 = ((1.0 - _2416) * dot(vec3(0.0), vec3(_2401 * _2395, _2401 * _2396, _2401 * _2397))) + _2416;
                        float _2422 = _2412 * _2412;
                        float _2426 = ((isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0))) * _2411) / ((_2422 * 0.699999988079071044921875) + 1.0);
                        float _2430 = (-0.0) - _1813;
                        float _2431 = (-0.0) - _1814;
                        float _2432 = (-0.0) - _1815;
                        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
                        float _2440 = dot(vec3(0.0), vec3(_2436 * _2430, _2436 * _2431, _2436 * _2432));
                        float _3539 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
                        float _3550 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
                        float _2444 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
                        float _2448 = (0.5 / (((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) + 9.9999999392252902907785028219223e-09) + _2444)) * _2444;
                        float _3561 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
                        float _2457 = (((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 3.1415927410125732421875) / ((_2422 * 2.1991131305694580078125) + 3.141590118408203125)) * _2411;
                        _2233 = (_2426 * _2374.x) + _2332;
                        _2234 = (_2426 * _2374.y) + _2333;
                        _2235 = (_2426 * _2374.z) + _2334;
                        _2230 = (_2457 * _2391.x) + _2329;
                        _2231 = (_2457 * _2391.y) + _2330;
                        _2232 = (_2457 * _2391.z) + _2331;
                        if (_2336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2329 = _2230;
                            _2330 = _2231;
                            _2331 = _2232;
                            _2332 = _2233;
                            _2333 = _2234;
                            _2334 = _2235;
                            _2335 = _2336;
                        }
                    }
                    frontier_phi_79_pred = _2235;
                    frontier_phi_79_pred_1 = _2234;
                    frontier_phi_79_pred_2 = _2233;
                    frontier_phi_79_pred_3 = _2232;
                    frontier_phi_79_pred_4 = _2231;
                    frontier_phi_79_pred_5 = _2230;
                }
                _1961 = frontier_phi_79_pred;
                _1959 = frontier_phi_79_pred_1;
                _1957 = frontier_phi_79_pred_2;
                _1955 = frontier_phi_79_pred_3;
                _1953 = frontier_phi_79_pred_4;
                _1951 = frontier_phi_79_pred_5;
                uint _2140 = _2139 + 1u;
                if (_2140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2133 = _1951;
                    _2134 = _1953;
                    _2135 = _1955;
                    _2136 = _1957;
                    _2137 = _1959;
                    _2138 = _1961;
                    _2139 = _2140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1950 = _1951;
            _1952 = _1953;
            _1954 = _1955;
            _1956 = _1957;
            _1958 = _1959;
            _1960 = _1961;
        }
        uvec4 _1964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1965 = _1964.z;
        uint _1967 = (_1965 >> 8u) & 15u;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        if (((4294967295u << _1967) & _1859) == 0u)
        {
            _2104 = _1950;
            _2106 = _1952;
            _2108 = _1954;
            _2110 = _1956;
            _2112 = _1958;
            _2114 = _1960;
        }
        else
        {
            float _2129 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1967 < ((_1965 >> 12u) & 15u))
            {
                float _2105;
                float _2107;
                float _2109;
                float _2111;
                float _2113;
                float _2115;
                float _2312 = _1950;
                float _2313 = _1952;
                float _2314 = _1954;
                float _2315 = _1956;
                float _2316 = _1958;
                float _2317 = _1960;
                uint _2318 = _1967;
                uint _2327;
                bool _2328;
                for (;;)
                {
                    _2327 = texelFetch(g_lightClassification, int((((_1853 << 5u) + (_1839 << 9u)) + (_2318 << 2u)) >> 2u)).x;
                    _2328 = _2327 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2328)
                    {
                        frontier_phi_93_pred = _2316;
                        frontier_phi_93_pred_1 = _2315;
                        frontier_phi_93_pred_2 = _2314;
                        frontier_phi_93_pred_3 = _2313;
                        frontier_phi_93_pred_4 = _2312;
                        frontier_phi_93_pred_5 = _2317;
                    }
                    else
                    {
                        float _2492;
                        float _2493;
                        float _2494;
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2505 = _2312;
                        float _2506 = _2313;
                        float _2507 = _2314;
                        float _2508 = _2315;
                        float _2509 = _2316;
                        float _2510 = _2317;
                        uint _2511 = _2327;
                        uint _2512;
                        vec4 _2537;
                        float _2538;
                        vec4 _2553;
                        vec3 _2565;
                        vec4 _2580;
                        vec4 _2595;
                        float _2641;
                        bool _2642;
                        for (;;)
                        {
                            uint _2522 = ((_2318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2511));
                            _2512 = (_2511 + 4294967295u) & _2511;
                            uint _2524 = _2522 * 40u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            _2538 = _2537.w;
                            uint _2540 = (_2522 * 40u) + 4u;
                            _2553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 3u)).x));
                            uint _2555 = (_2522 * 40u) + 8u;
                            _2565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x));
                            uint _2567 = (_2522 * 40u) + 16u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            uint _2582 = (_2522 * 40u) + 20u;
                            _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2597 = (_2522 * 40u) + 24u;
                            vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2616 = (_2522 * 40u) + 28u;
                            vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            _2641 = fma(_1815, _2629.z, fma(_1814, _2629.y, _2629.x * _1813)) + _2629.w;
                            _2642 = !((fma(_1815, _2610.z, fma(_1814, _2610.y, _2610.x * _1813)) + _2610.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2642)
                            {
                                float _2669 = _2537.x - _1813;
                                float _2670 = _2537.y - _1814;
                                float _2671 = _2537.z - _1815;
                                float _2672 = dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671));
                                float _2675 = inversesqrt(_2672);
                                float _2676 = _2675 * _2669;
                                float _2677 = _2675 * _2670;
                                float _2678 = _2675 * _2671;
                                float _2682 = 1.0 - (_2672 / (_2538 * _2538));
                                float _3572 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                                float _2683 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
                                float _2687 = sqrt(_2672) * _2553.w;
                                float _2689 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                                float _2690 = _2689 * _2689;
                                float _2691 = 1.0 - _2690;
                                float _2693 = (_2691 * dot(vec3(_2676, _2677, _2678), vec3(0.0))) + _2690;
                                float _2696 = _2687 * _2687;
                                float _2700 = (fma(_1815, _2580.z, fma(_1814, _2580.y, _2580.x * _1813)) + _2580.w) / _2641;
                                float _2701 = (fma(_1815, _2595.z, fma(_1814, _2595.y, _2595.x * _1813)) + _2595.w) / _2641;
                                float _2705 = 1.0 - dot(vec2(_2700, _2701), vec2(_2700, _2701));
                                float _3588 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                                float _2706 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                                float _2707 = _2706 * (((isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0))) * _2683) / ((_2696 * 0.699999988079071044921875) + 1.0));
                                float _2717 = dot(vec3(0.0), vec3((-0.0) - (_1813 * _2129), (-0.0) - (_1814 * _2129), (-0.0) - (_1815 * _2129)));
                                float _3599 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                                float _2725 = (_2691 * dot(vec3(0.0), vec3(_2676, _2677, _2678))) + _2690;
                                float _3610 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                                float _2726 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                                float _2730 = (0.5 / (((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) + 9.9999999392252902907785028219223e-09) + _2726)) * _2726;
                                float _3621 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                                float _2737 = (_2706 * _2683) * (((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 3.1415927410125732421875) / ((_2696 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2707 * _2553.z;
                                frontier_phi_99_pred_1 = _2707 * _2553.y;
                                frontier_phi_99_pred_2 = _2707 * _2553.x;
                                frontier_phi_99_pred_3 = _2737 * _2565.z;
                                frontier_phi_99_pred_4 = _2737 * _2565.y;
                                frontier_phi_99_pred_5 = _2737 * _2565.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2746 = frontier_phi_99_pred;
                            _2745 = frontier_phi_99_pred_1;
                            _2744 = frontier_phi_99_pred_2;
                            _2743 = frontier_phi_99_pred_3;
                            _2742 = frontier_phi_99_pred_4;
                            _2741 = frontier_phi_99_pred_5;
                            _2495 = _2744 + _2508;
                            _2496 = _2745 + _2509;
                            _2497 = _2746 + _2510;
                            _2492 = _2741 + _2505;
                            _2493 = _2742 + _2506;
                            _2494 = _2743 + _2507;
                            if (_2512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2505 = _2492;
                                _2506 = _2493;
                                _2507 = _2494;
                                _2508 = _2495;
                                _2509 = _2496;
                                _2510 = _2497;
                                _2511 = _2512;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2496;
                        frontier_phi_93_pred_1 = _2495;
                        frontier_phi_93_pred_2 = _2494;
                        frontier_phi_93_pred_3 = _2493;
                        frontier_phi_93_pred_4 = _2492;
                        frontier_phi_93_pred_5 = _2497;
                    }
                    _2113 = frontier_phi_93_pred;
                    _2111 = frontier_phi_93_pred_1;
                    _2109 = frontier_phi_93_pred_2;
                    _2107 = frontier_phi_93_pred_3;
                    _2105 = frontier_phi_93_pred_4;
                    _2115 = frontier_phi_93_pred_5;
                    uint _2319 = _2318 + 1u;
                    if (_2319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2312 = _2105;
                        _2313 = _2107;
                        _2314 = _2109;
                        _2315 = _2111;
                        _2316 = _2113;
                        _2317 = _2115;
                        _2318 = _2319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2115;
                frontier_phi_68_69_ladder_1 = _2113;
                frontier_phi_68_69_ladder_2 = _2111;
                frontier_phi_68_69_ladder_3 = _2109;
                frontier_phi_68_69_ladder_4 = _2105;
                frontier_phi_68_69_ladder_5 = _2107;
            }
            else
            {
                frontier_phi_68_69_ladder = _1960;
                frontier_phi_68_69_ladder_1 = _1958;
                frontier_phi_68_69_ladder_2 = _1956;
                frontier_phi_68_69_ladder_3 = _1954;
                frontier_phi_68_69_ladder_4 = _1950;
                frontier_phi_68_69_ladder_5 = _1952;
            }
            _2104 = frontier_phi_68_69_ladder_4;
            _2106 = frontier_phi_68_69_ladder_5;
            _2108 = frontier_phi_68_69_ladder_3;
            _2110 = frontier_phi_68_69_ladder_2;
            _2112 = frontier_phi_68_69_ladder_1;
            _2114 = frontier_phi_68_69_ladder;
        }
        float _2119 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _1872 = (_2119 * _2110) + _1652;
        _1874 = (_2119 * _2112) + _1653;
        _1876 = (_2119 * _2114) + _1654;
        _1878 = ((_2104 * 0.039999999105930328369140625) * _2119) + _1754;
        _1880 = ((_2106 * 0.039999999105930328369140625) * _2119) + _1755;
        _1882 = ((_2108 * 0.039999999105930328369140625) * _2119) + _1756;
    }
    else
    {
        _1872 = _1652;
        _1874 = _1653;
        _1876 = _1654;
        _1878 = _1754;
        _1880 = _1755;
        _1882 = _1756;
    }
    float _3637 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3648 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3659 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _1899 = ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1872 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _631))) + ((_1878 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _1900 = ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1874 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _631))) + ((_1880 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _1901 = ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1876 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _631))) + ((_1882 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _1902 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1904 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    uint _1905 = _605 + 6u;
    float _1913 = _591 / cbSceneParam._m0[86u].x;
    float _1914 = _592 / cbSceneParam._m0[86u].y;
    vec4 _1928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1930 = _1928.x;
    float _1931 = _1928.y;
    float _1932 = _1928.z;
    float _1933 = _1928.w;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _1975 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _1976 = _1975 / _565;
        float _1987 = _1976 * _261;
        float _1988 = _262 * _1976;
        float _1989 = (-0.0) - _1988;
        float _1990 = _1976 * _263;
        float _1992 = (cbSceneParam._m0[77u].w * _1989) / _1975;
        float _1993 = _1992 + cbSceneParam._m0[79u].w;
        float _1994 = cbSceneParam._m0[79u].w - _1988;
        float _2000 = sqrt(((_1987 * _1987) + (_1988 * _1988)) + (_1990 * _1990));
        float _2003 = (1.0 - (cbSceneParam._m0[77u].w / _1975)) * _2000;
        float _2009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2243;
        if (abs((_1989 - _1992) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2243 = ((((_1993 > 0.0) ? exp2(_2009 * _1993) : (2.0 - exp2(_2011 * _1993))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2003;
        }
        else
        {
            float _2162 = 1.0 / cbSceneParam._m0[80u].x;
            float _2163 = isnan(_1994) ? _1993 : (isnan(_1993) ? _1994 : max(_1993, _1994));
            float _2164 = isnan(_1994) ? _1993 : (isnan(_1993) ? _1994 : min(_1993, _1994));
            float _2173 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : min(_2163, 0.0));
            float _2174 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : min(_2164, 0.0));
            _2243 = ((abs(_2000 / _1989) * cbSceneParam._m0[80u].y) * ((((_2173 - _2174) * 2.0) - ((exp2(_2009 * (isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0)))) - exp2(_2009 * (isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))))) * _2162)) - ((exp2(_2011 * _2173) - exp2(_2011 * _2174)) * _2162))) + (_2003 * cbSceneParam._m0[80u].z);
        }
        vec4 _2245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1913, _1914, 1.0), 0.0);
        float _2254 = exp2((_2243 * (-1.44269502162933349609375)) * (1.0 - _2245.w));
        float _2255 = log2(_2254);
        float _2271 = log2(_1933);
        _2013 = (exp2(_2271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2255 * cbSceneParam._m0[78u].x)) * _2245.x) / cbSceneParam._m0[78u].x)) + _1930;
        _2015 = (exp2(_2271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2255 * cbSceneParam._m0[78u].y)) * _2245.y) / cbSceneParam._m0[78u].y)) + _1931;
        _2017 = (exp2(_2271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2255 * cbSceneParam._m0[78u].z)) * _2245.z) / cbSceneParam._m0[78u].z)) + _1932;
        _2019 = _2254 * _1933;
    }
    else
    {
        _2013 = _1930;
        _2015 = _1931;
        _2017 = _1932;
        _2019 = _1933;
    }
    bool _2281;
    vec4 _2029;
    vec4 _2052;
    float _2054;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    bool _2072;
    for (;;)
    {
        _2029 = cbMatDynParam._m0[0u];
        float _2031 = roundEven(_2029.y);
        bool _2032 = _2031 == 3.0;
        float _2034 = log2(_2019);
        float _2041 = exp2(_2034 * cbSceneParam._m0[78u].x) * _1902;
        float _2042 = exp2(_2034 * cbSceneParam._m0[78u].y) * _1903;
        float _2043 = exp2(_2034 * cbSceneParam._m0[78u].z) * _1904;
        float _2050 = _579 + (-0.5);
        _2052 = cbMtdParam._m0[1u];
        _2054 = _2052.y * _2050;
        float _2057 = (_2031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2058 = _2057 * (_2032 ? _2041 : (_2041 + (cbSceneParam._m0[72u].w * _2013)));
        _2059 = _2057 * (_2032 ? _2042 : (_2042 + (cbSceneParam._m0[72u].w * _2015)));
        _2060 = _2057 * (_2032 ? _2043 : (_2043 + (cbSceneParam._m0[72u].w * _2017)));
        _2061 = _2050 * 0.999000012874603271484375;
        _2072 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2072)
        {
            if ((cbInstanceData._m0[_605 + 7u].x + _2061) < 0.5)
            {
                _2281 = true;
                break;
            }
        }
        uint _2197 = _607 + uint(_2029.w);
        if ((cbInstanceData._m0[_2197].w < 1.0) && ((cbInstanceData._m0[_2197].w + _2061) < 0.5))
        {
            _2281 = true;
            break;
        }
        if ((_2054 + 1.0) < _2052.x)
        {
            _2281 = true;
            break;
        }
        _2281 = false;
        break;
    }
    float _2462;
    if (_2281)
    {
        discard_state = true;
        _2462 = 0.0;
    }
    else
    {
        _2462 = cbInstanceData._m0[_1905].w;
    }
    SV_Target.x = _2058;
    SV_Target.y = _2059;
    SV_Target.z = _2060;
    SV_Target.w = _2462;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1905].w;
    discard_exit();
}


