#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _801;
uint _2269;
uint _2270;
uint _2271;
uint _2493;
uint _2494;
uint _2495;
float _2751;
float _2752;
float _2753;
float _2754;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _566 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _571 = _265 * _570;
    float _572 = _266 * _570;
    float _573 = _267 * _570;
    vec4 _578 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _580 = _578.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _649 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _656 = (cbMatDynParam._m0[5u].x * _649) + cbMatDynParam._m0[5u].y;
        float _2793 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0));
        float _661 = (cbMatDynParam._m0[5u].z * _649) + cbMatDynParam._m0[5u].w;
        float _2804 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0))) - _657)) + _657) < ((_580 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _592 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _593 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_592 * cbSceneParam._m0[86u].x, _593 * cbSceneParam._m0[86u].y));
    float _605 = _602.x * TEXCOORD.z;
    float _606 = (-0.0) - _571;
    float _607 = (-0.0) - _572;
    float _608 = (-0.0) - _573;
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _800;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = (cbModelParam._m0[37u].x * ((((fma(_638, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _725 = (cbModelParam._m0[37u].y * ((((fma(_638, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _726 = (((((fma(_638, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_723, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_723, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_723, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_723, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        _800 = _763 * (_729.z + (-0.5));
        _802 = _763 * (_729.y + (-0.5));
        _803 = _763 * (_729.x + (-0.5));
        _804 = _773 * (_736.z + (-0.5));
        _805 = _773 * (_736.y + (-0.5));
        _806 = _773 * (_736.x + (-0.5));
        _807 = _783 * (_743.z + (-0.5));
        _808 = _783 * (_743.y + (-0.5));
        _809 = _783 * (_743.x + (-0.5));
        _810 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        _811 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        _812 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    }
    else
    {
        _800 = _801;
        _802 = _801;
        _803 = _801;
        _804 = _801;
        _805 = _801;
        _806 = _801;
        _807 = _801;
        _808 = _801;
        _809 = _801;
        _810 = _801;
        _811 = _801;
        _812 = _801;
    }
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _869 = (cbModelParam._m0[38u].x * ((((fma(_638, cbModelParam._m0[30u].z, fma(_634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _630)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _870 = (cbModelParam._m0[38u].y * ((((fma(_638, cbModelParam._m0[31u].z, fma(_634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _630)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _871 = (((((fma(_638, cbModelParam._m0[32u].z, fma(_634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _630)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_869, _870, _871), 0.0);
        float _906 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _916 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _926 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _936 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_894.x + (-0.5));
        float _938 = _936 * (_894.y + (-0.5));
        float _939 = _936 * (_894.z + (-0.5));
        _943 = _906 * (_873.z + (-0.5));
        _944 = _906 * (_873.y + (-0.5));
        _945 = _906 * (_873.x + (-0.5));
        _946 = _916 * (_880.z + (-0.5));
        _947 = _916 * (_880.y + (-0.5));
        _948 = _916 * (_880.x + (-0.5));
        _949 = _926 * (_887.z + (-0.5));
        _950 = _926 * (_887.y + (-0.5));
        _951 = _926 * (_887.x + (-0.5));
        _952 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        _953 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        _954 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    }
    else
    {
        _943 = _801;
        _944 = _801;
        _945 = _801;
        _946 = _801;
        _947 = _801;
        _948 = _801;
        _949 = _801;
        _950 = _801;
        _951 = _801;
        _952 = _801;
        _953 = _801;
        _954 = _801;
    }
    float _969 = _571 * (-0.5);
    float _970 = _572 * (-0.5);
    float _971 = _573 * (-0.5);
    float _972 = dot(vec4(_969, _970, _971, 1.0), vec4(_945, _948, _951, _954));
    float _975 = dot(vec4(_969, _970, _971, 1.0), vec4(_944, _947, _950, _953));
    float _978 = dot(vec4(_969, _970, _971, 1.0), vec4(_943, _946, _949, _952));
    float _1013;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _985 = dot(vec4(_969, _970, _971, 1.0), vec4(_800, _804, _807, _810));
        float _989 = dot(vec4(_969, _970, _971, 1.0), vec4(_802, _805, _808, _811));
        float _993 = dot(vec4(_969, _970, _971, 1.0), vec4(_803, _806, _809, _812));
        float _1000 = dot(vec4(cbModelParam._m0[39u]), vec4(_969, _970, _971, 1.0));
        _1013 = dot(vec3(isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)), isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)), isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1000) ? 0.0 : (isnan(0.0) ? _1000 : max(0.0, _1000))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1013 = 1.0;
    }
    float _1024;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1015 = dot(vec4(cbModelParam._m0[40u]), vec4(_969, _970, _971, 1.0));
        _1024 = dot(vec3(isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)), isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)), isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1015) ? 0.0 : (isnan(0.0) ? _1015 : max(0.0, _1015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1024 = 1.0;
    }
    float _1028 = (_1024 * cbModelParam._m0[1u].x) + (_1013 * (1.0 - cbModelParam._m0[1u].x));
    float _1034 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1117;
    float _1119;
    float _1121;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1084 = fma(_638, cbModelParam._m0[13u].z, fma(_634, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630)) + cbModelParam._m0[13u].w;
        float _1088 = fma(_638, cbModelParam._m0[14u].z, fma(_634, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630)) + cbModelParam._m0[14u].w;
        float _1092 = fma(_638, cbModelParam._m0[15u].z, fma(_634, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630)) + cbModelParam._m0[15u].w;
        float _1095 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1098 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1101 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1127;
        if (_1095 > 0.0)
        {
            _1127 = abs((1.0 - _1084) / _1095);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1095 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1084 + 1.0) / _1095);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1127 = frontier_phi_41_39_ladder;
        }
        float _1315;
        if (_1098 > 0.0)
        {
            _1315 = abs((1.0 - _1088) / _1098);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1098 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1088 + 1.0) / _1098);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1315 = frontier_phi_50_46_ladder;
        }
        float _1669;
        if (_1101 > 0.0)
        {
            _1669 = abs((1.0 - _1092) / _1101);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1101 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1092 + 1.0) / _1101);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _1669 = frontier_phi_62_57_ladder;
        }
        float _1671 = isnan(_1315) ? _1127 : (isnan(_1127) ? _1315 : min(_1127, _1315));
        float _1672 = isnan(_1669) ? _1671 : (isnan(_1671) ? _1669 : min(_1671, _1669));
        float _1676 = (_1672 * _1095) + _1084;
        float _1677 = (_1672 * _1098) + _1088;
        float _1678 = (_1672 * _1101) + _1092;
        float _1679 = _1672 * 9.9999997473787516355514526367188e-05;
        float _1681 = (-1.0) - _1679;
        float _1683 = _1679 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_1678 > _1683) || ((_1678 < _1681) || ((_1677 > _1683) || ((_1677 < _1681) || ((_1676 < _1681) || (_1676 > _1683))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1678, cbModelParam._m0[9u].z, fma(_1677, cbModelParam._m0[9u].y, _1676 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1678, cbModelParam._m0[10u].z, fma(_1677, cbModelParam._m0[10u].y, _1676 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1678, cbModelParam._m0[11u].z, fma(_1677, cbModelParam._m0[11u].y, _1676 * cbModelParam._m0[11u].x))), _1034);
            frontier_phi_40_62_ladder = _1911.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _1911.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _1911.x * cbModelParam._m0[1u].y;
        }
        _1117 = frontier_phi_40_62_ladder_2;
        _1119 = frontier_phi_40_62_ladder_1;
        _1121 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1105 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1034);
        _1117 = _1105.x * cbModelParam._m0[1u].y;
        _1119 = _1105.y * cbModelParam._m0[1u].y;
        _1121 = _1105.z * cbModelParam._m0[1u].y;
    }
    float _1124 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1212;
    float _1214;
    float _1216;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1176 = fma(_638, cbModelParam._m0[21u].z, fma(_634, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630)) + cbModelParam._m0[21u].w;
        float _1180 = fma(_638, cbModelParam._m0[22u].z, fma(_634, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630)) + cbModelParam._m0[22u].w;
        float _1184 = fma(_638, cbModelParam._m0[23u].z, fma(_634, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630)) + cbModelParam._m0[23u].w;
        float _1187 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1190 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1193 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1320;
        if (_1187 > 0.0)
        {
            _1320 = abs((1.0 - _1176) / _1187);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1187 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1176 + 1.0) / _1187);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1320 = frontier_phi_52_48_ladder;
        }
        float _1696;
        if (_1190 > 0.0)
        {
            _1696 = abs((1.0 - _1180) / _1190);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1190 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1180 + 1.0) / _1190);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _1696 = frontier_phi_64_59_ladder;
        }
        float _2036;
        if (_1193 > 0.0)
        {
            _2036 = abs((1.0 - _1184) / _1193);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1193 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1184 + 1.0) / _1193);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2036 = frontier_phi_76_71_ladder;
        }
        float _2038 = isnan(_1696) ? _1320 : (isnan(_1320) ? _1696 : min(_1320, _1696));
        float _2039 = isnan(_2036) ? _2038 : (isnan(_2038) ? _2036 : min(_2038, _2036));
        float _2043 = (_2039 * _1187) + _1176;
        float _2044 = (_2039 * _1190) + _1180;
        float _2045 = (_2039 * _1193) + _1184;
        float _2046 = _2039 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2046;
        float _2049 = _2046 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2045 > _2049) || ((_2045 < _2047) || ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 < _2047) || (_2043 > _2049))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2045, cbModelParam._m0[17u].z, fma(_2044, cbModelParam._m0[17u].y, _2043 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2045, cbModelParam._m0[18u].z, fma(_2044, cbModelParam._m0[18u].y, _2043 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2045, cbModelParam._m0[19u].z, fma(_2044, cbModelParam._m0[19u].y, _2043 * cbModelParam._m0[19u].x))), _1124);
            frontier_phi_49_76_ladder = _2167.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2167.y * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2167.x * cbModelParam._m0[1u].z;
        }
        _1212 = frontier_phi_49_76_ladder_2;
        _1214 = frontier_phi_49_76_ladder_1;
        _1216 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1196 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1124);
        _1212 = _1196.x * cbModelParam._m0[1u].z;
        _1214 = _1196.y * cbModelParam._m0[1u].z;
        _1216 = _1196.z * cbModelParam._m0[1u].z;
    }
    float _1228 = _605 * 0.01200000010430812835693359375;
    float _1230 = _1228 * ((cbModelParam._m0[1u].w * (_1212 - _1117)) + _1117);
    float _1231 = _1228 * ((cbModelParam._m0[1u].w * (_1214 - _1119)) + _1119);
    float _1232 = _1228 * ((cbModelParam._m0[1u].w * (_1216 - _1121)) + _1121);
    float _1253 = fma(_1232, cbSceneParam._m0[89u].z, fma(_1231, cbSceneParam._m0[89u].y, _1230 * cbSceneParam._m0[89u].x));
    float _1256 = fma(_1232, cbSceneParam._m0[90u].z, fma(_1231, cbSceneParam._m0[90u].y, _1230 * cbSceneParam._m0[90u].x));
    float _1259 = fma(_1232, cbSceneParam._m0[91u].z, fma(_1231, cbSceneParam._m0[91u].y, _1230 * cbSceneParam._m0[91u].x));
    float _1294 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1298 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1307 = _1294 / _1306;
    float _1308 = _1298 / _1306;
    float _1309 = _1302 / _1306;
    float _1457;
    float _1458;
    float _1459;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1336 = ((uint(_1309 > cbSceneParam._m0[59u].y) + uint(_1309 > cbSceneParam._m0[59u].x)) + uint(_1309 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1337 = _1336 + 43u;
        uint _1345 = _1336 + 44u;
        uint _1353 = _1336 + 45u;
        uint _1361 = _1336 + 46u;
        float _1372 = fma(_1306, cbSceneParam._m0[_1337].w, fma(_1302, cbSceneParam._m0[_1337].z, fma(_1298, cbSceneParam._m0[_1337].y, _1294 * cbSceneParam._m0[_1337].x)));
        float _1376 = fma(_1306, cbSceneParam._m0[_1345].w, fma(_1302, cbSceneParam._m0[_1345].z, fma(_1298, cbSceneParam._m0[_1345].y, _1294 * cbSceneParam._m0[_1345].x)));
        float _1384 = fma(_1306, cbSceneParam._m0[_1361].w, fma(_1302, cbSceneParam._m0[_1361].z, fma(_1298, cbSceneParam._m0[_1361].y, _1294 * cbSceneParam._m0[_1361].x)));
        float _1389 = cbSceneParam._m0[33u].z * _1384;
        float _1391 = cbSceneParam._m0[33u].w * _1384;
        float _1394 = fma(_1306, cbSceneParam._m0[_1353].w, fma(_1302, cbSceneParam._m0[_1353].z, fma(_1298, cbSceneParam._m0[_1353].y, _1294 * cbSceneParam._m0[_1353].x))) / _1384;
        float _1442 = (cbSceneParam._m0[33u].x - sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309))) * cbSceneParam._m0[33u].y;
        float _2930 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1450 = (isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1389 + _1372) / _1384, (_1391 + _1376) / _1384), _1394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1391 + _1372) / _1384, (_1376 - _1389) / _1384), _1394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1372 - _1389) / _1384, (_1376 - _1391) / _1384), _1394), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1372 - _1391) / _1384, (_1389 + _1376) / _1384), _1394), 0.0)).x), vec4(0.25)));
        _1457 = 1.0 - (_1450 * cbSceneParam._m0[34u].x);
        _1458 = 1.0 - (_1450 * cbSceneParam._m0[34u].y);
        _1459 = 1.0 - (_1450 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1457 = 1.0;
        _1458 = 1.0;
        _1459 = 1.0;
    }
    float _1523;
    float _1525;
    float _1527;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1511 = fma(_1306, cbSceneParam._m0[63u].w, fma(_1302, cbSceneParam._m0[63u].z, fma(_1298, cbSceneParam._m0[63u].y, _1294 * cbSceneParam._m0[63u].x)));
        float _1512 = fma(_1306, cbSceneParam._m0[60u].w, fma(_1302, cbSceneParam._m0[60u].z, fma(_1298, cbSceneParam._m0[60u].y, _1294 * cbSceneParam._m0[60u].x))) / _1511;
        float _1513 = fma(_1306, cbSceneParam._m0[61u].w, fma(_1302, cbSceneParam._m0[61u].z, fma(_1298, cbSceneParam._m0[61u].y, _1294 * cbSceneParam._m0[61u].x))) / _1511;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_1512 >= cbSceneParam._m0[64u].x) && (_1513 >= cbSceneParam._m0[64u].y)) && (_1512 <= cbSceneParam._m0[64u].z)) && (_1513 <= cbSceneParam._m0[64u].w))
        {
            float _1709 = fma(_1306, cbSceneParam._m0[62u].w, fma(_1302, cbSceneParam._m0[62u].z, fma(_1298, cbSceneParam._m0[62u].y, _1294 * cbSceneParam._m0[62u].x))) / _1511;
            float _1713 = isnan(cbSceneParam._m0[41u].w) ? _1709 : (isnan(_1709) ? cbSceneParam._m0[41u].w : max(_1709, cbSceneParam._m0[41u].w));
            float _1756 = (cbSceneParam._m0[33u].x - sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309))) * cbSceneParam._m0[33u].y;
            float _2946 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
            float _1763 = (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1512, cbSceneParam._m0[33u].w + _1513), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1512, _1513 - cbSceneParam._m0[33u].z), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1512 - cbSceneParam._m0[33u].z, _1513 - cbSceneParam._m0[33u].w), _1713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1512 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1513), _1713), 0.0)).x), vec4(0.25)));
            float _1767 = 1.0 - (_1763 * cbSceneParam._m0[34u].x);
            float _1768 = 1.0 - (_1763 * cbSceneParam._m0[34u].y);
            float _1769 = 1.0 - (_1763 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_1769) ? _1459 : (isnan(_1459) ? _1769 : min(_1459, _1769));
            frontier_phi_61_60_ladder_1 = isnan(_1768) ? _1458 : (isnan(_1458) ? _1768 : min(_1458, _1768));
            frontier_phi_61_60_ladder_2 = isnan(_1767) ? _1457 : (isnan(_1457) ? _1767 : min(_1457, _1767));
        }
        else
        {
            frontier_phi_61_60_ladder = _1459;
            frontier_phi_61_60_ladder_1 = _1458;
            frontier_phi_61_60_ladder_2 = _1457;
        }
        _1523 = frontier_phi_61_60_ladder_2;
        _1525 = frontier_phi_61_60_ladder_1;
        _1527 = frontier_phi_61_60_ladder;
    }
    else
    {
        _1523 = _1457;
        _1525 = _1458;
        _1527 = _1459;
    }
    uint _1529 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_1529 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1541 = _605 + (-1.0);
    float _1544 = (cbLight._m0[_1536].x * _1541) + 1.0;
    float _1545 = (cbLight._m0[_1536].y * _1541) + 1.0;
    uint _1546 = _1535 + 8u;
    float _1557 = cbLight._m0[_1535].x + _571;
    float _1558 = cbLight._m0[_1535].y + _572;
    float _1559 = cbLight._m0[_1535].z + _573;
    float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
    float _1567 = dot(vec3(0.0), vec3(cbLight._m0[_1535].xyz));
    float _2972 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1570 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
    float _1571 = dot(vec3(0.0), vec3(_571, _572, _573));
    float _2983 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1574 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
    float _1575 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1557 * _1563, _1558 * _1563, _1559 * _1563));
    float _2994 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1586 = (exp2(log2(1.0 - (isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1592 = (0.5 / ((_1570 + 9.9999999392252902907785028219223e-09) + _1574)) * _1570;
    float _3005 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1594 = (isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * 0.31831014156341552734375;
    float _1596 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1609 = _1535 + 9u;
    uint _1615 = _1535 | 1u;
    float _1621 = cbLight._m0[_1615].x + _571;
    float _1622 = cbLight._m0[_1615].y + _572;
    float _1623 = cbLight._m0[_1615].z + _573;
    float _1627 = inversesqrt(dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623)));
    float _1631 = dot(vec3(0.0), vec3(cbLight._m0[_1615].xyz));
    float _3021 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1634 = isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0));
    float _1635 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1621 * _1627, _1622 * _1627, _1623 * _1627));
    float _3032 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1644 = (exp2(log2(1.0 - (isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1648 = (0.5 / ((_1634 + 9.9999999392252902907785028219223e-09) + _1574)) * _1634;
    float _3043 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1650 = (isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0))) * 0.31831014156341552734375;
    float _1651 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    float _1661 = (((_1644 * cbLight._m0[_1609].x) * _1650) * _1651) + ((((cbLight._m0[_1546].x * _1523) * _1586) * _1594) * _1596);
    float _1662 = (((_1644 * cbLight._m0[_1609].y) * _1650) * _1651) + ((((cbLight._m0[_1546].y * _1525) * _1586) * _1594) * _1596);
    float _1663 = (((_1644 * cbLight._m0[_1609].z) * _1650) * _1651) + ((((cbLight._m0[_1546].z * _1527) * _1586) * _1594) * _1596);
    float _1826;
    float _1828;
    float _1830;
    if (_1533.y == 0u)
    {
        uvec4 _1781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1782 = _1781.x;
        uint _1793 = uint((float(_1781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _593) / _1782))) + floor(float(uint(cbSceneParam._m0[85u].x * _592) / _1782)));
        float _1803 = (log2(_1309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1804 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        uint _1807 = uint(isnan(14.0) ? _1804 : (isnan(_1804) ? 14.0 : min(_1804, 14.0)));
        uvec4 _1812 = texelFetch(g_lightClusterGridBuffer, int(((_1807 << 2u) + (_1793 << 6u)) >> 2u));
        uint _1813 = _1812.x;
        uint _1814 = _1781.z;
        float _1920;
        float _1922;
        float _1924;
        if (((((1u << ((_1814 >> 4u) & 15u)) + 4294967295u) & _1813) == 0u) || ((_1814 & 240u) == 0u))
        {
            _1920 = 0.0;
            _1922 = 0.0;
            _1924 = 0.0;
        }
        else
        {
            float _1921;
            float _1923;
            float _1925;
            float _2082 = 0.0;
            float _2083 = 0.0;
            float _2084 = 0.0;
            uint _2085 = 0u;
            uint _2094;
            bool _2095;
            for (;;)
            {
                _2094 = texelFetch(g_lightClassification, int((((_1807 << 5u) + (_1793 << 9u)) + (_2085 << 2u)) >> 2u)).x;
                _2095 = _2094 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                if (_2095)
                {
                    frontier_phi_87_pred = _2084;
                    frontier_phi_87_pred_1 = _2083;
                    frontier_phi_87_pred_2 = _2082;
                }
                else
                {
                    float _2239;
                    float _2240;
                    float _2241;
                    uint _2242;
                    _2239 = _2082;
                    _2240 = _2083;
                    _2241 = _2084;
                    _2242 = _2094;
                    float _2172;
                    float _2173;
                    float _2174;
                    for (;;)
                    {
                        uint _2246 = uint(findLSB(_2242)) + (_2085 << 5u);
                        uint _2243 = (_2242 + 4294967295u) & _2242;
                        uint _2248 = _2246 * 48u;
                        vec4 _2262 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2248)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2248 + 3u)).x));
                        uint _2279 = (_2246 * 48u) + 8u;
                        vec3 _2290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2279)).x, texelFetch(g_PointLightRenderingBuffer, int(_2279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2279 + 2u)).x));
                        float _2294 = _2262.x - _1307;
                        float _2295 = _2262.y - _1308;
                        float _2296 = _2262.z - _1309;
                        float _2297 = dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296));
                        float _2300 = inversesqrt(_2297);
                        float _2309 = 1.0 - (_2297 * _2262.w);
                        float _3069 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
                        float _2311 = sqrt(_2297) * uintBitsToFloat(uvec4(_2269, _2270, _2271, texelFetch(g_PointLightRenderingBuffer, int(((_2246 * 48u) + 4u) + 3u)).x)).w;
                        float _2314 = 1.39999997615814208984375 / (_2311 + 1.39999997615814208984375);
                        float _2315 = _2314 * _2314;
                        float _2318 = ((1.0 - _2315) * dot(vec3(0.0), vec3(_2300 * _2294, _2300 * _2295, _2300 * _2296))) + _2315;
                        float _2320 = (-0.0) - _1307;
                        float _2321 = (-0.0) - _1308;
                        float _2322 = (-0.0) - _1309;
                        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
                        float _2330 = dot(vec3(0.0), vec3(_2326 * _2320, _2326 * _2321, _2326 * _2322));
                        float _3080 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
                        float _3091 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
                        float _2334 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
                        float _2338 = (0.5 / (((isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) + 9.9999999392252902907785028219223e-09) + _2334)) * _2334;
                        float _3102 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
                        float _2347 = (((isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0))) * 3.1415927410125732421875) / (((_2311 * _2311) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0)));
                        _2172 = (_2347 * _2290.x) + _2239;
                        _2173 = (_2347 * _2290.y) + _2240;
                        _2174 = (_2347 * _2290.z) + _2241;
                        if (_2243 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2239 = _2172;
                            _2240 = _2173;
                            _2241 = _2174;
                            _2242 = _2243;
                        }
                    }
                    frontier_phi_87_pred = _2174;
                    frontier_phi_87_pred_1 = _2173;
                    frontier_phi_87_pred_2 = _2172;
                }
                _1925 = frontier_phi_87_pred;
                _1923 = frontier_phi_87_pred_1;
                _1921 = frontier_phi_87_pred_2;
                uint _2086 = _2085 + 1u;
                if (_2086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2082 = _1921;
                    _2083 = _1923;
                    _2084 = _1925;
                    _2085 = _2086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1920 = _1921;
            _1922 = _1923;
            _1924 = _1925;
        }
        uvec4 _1928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1929 = _1928.z;
        uint _1931 = (_1929 >> 8u) & 15u;
        float _2062;
        float _2064;
        float _2066;
        if (((4294967295u << _1931) & _1813) == 0u)
        {
            _2062 = _1920;
            _2064 = _1922;
            _2066 = _1924;
        }
        else
        {
            float _2078 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            if (_1931 < ((_1929 >> 12u) & 15u))
            {
                float _2063;
                float _2065;
                float _2067;
                float _2225 = _1920;
                float _2226 = _1922;
                float _2227 = _1924;
                uint _2228 = _1931;
                uint _2237;
                bool _2238;
                for (;;)
                {
                    _2237 = texelFetch(g_lightClassification, int((((_1807 << 5u) + (_1793 << 9u)) + (_2228 << 2u)) >> 2u)).x;
                    _2238 = _2237 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    if (_2238)
                    {
                        frontier_phi_98_pred = _2227;
                        frontier_phi_98_pred_1 = _2226;
                        frontier_phi_98_pred_2 = _2225;
                    }
                    else
                    {
                        float _2361;
                        float _2362;
                        float _2363;
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2371 = _2225;
                        float _2372 = _2226;
                        float _2373 = _2227;
                        uint _2374 = _2237;
                        uint _2375;
                        uint _2385;
                        vec4 _2400;
                        float _2401;
                        vec3 _2413;
                        vec4 _2428;
                        vec4 _2443;
                        float _2489;
                        bool _2490;
                        for (;;)
                        {
                            _2385 = ((_2228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2374));
                            _2375 = (_2374 + 4294967295u) & _2374;
                            uint _2387 = _2385 * 40u;
                            _2400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 3u)).x));
                            _2401 = _2400.w;
                            uint _2403 = (_2385 * 40u) + 8u;
                            _2413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2403 + 2u)).x));
                            uint _2415 = (_2385 * 40u) + 16u;
                            _2428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2415 + 3u)).x));
                            uint _2430 = (_2385 * 40u) + 20u;
                            _2443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 3u)).x));
                            uint _2445 = (_2385 * 40u) + 24u;
                            vec4 _2458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 3u)).x));
                            uint _2464 = (_2385 * 40u) + 28u;
                            vec4 _2477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 3u)).x));
                            _2489 = fma(_1309, _2477.z, fma(_1308, _2477.y, _2477.x * _1307)) + _2477.w;
                            _2490 = !((fma(_1309, _2458.z, fma(_1308, _2458.y, _2458.x * _1307)) + _2458.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            if (_2490)
                            {
                                float _2524 = _2400.x - _1307;
                                float _2525 = _2400.y - _1308;
                                float _2526 = _2400.z - _1309;
                                float _2527 = dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526));
                                float _2530 = inversesqrt(_2527);
                                float _2537 = 1.0 - (_2527 / (_2401 * _2401));
                                float _3113 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                                float _2539 = sqrt(_2527) * uintBitsToFloat(uvec4(_2493, _2494, _2495, texelFetch(g_SpotLightRenderingBuffer, int(((_2385 * 40u) + 4u) + 3u)).x)).w;
                                float _2541 = 1.39999997615814208984375 / (_2539 + 1.39999997615814208984375);
                                float _2542 = _2541 * _2541;
                                float _2545 = (fma(_1309, _2428.z, fma(_1308, _2428.y, _2428.x * _1307)) + _2428.w) / _2489;
                                float _2546 = (fma(_1309, _2443.z, fma(_1308, _2443.y, _2443.x * _1307)) + _2443.w) / _2489;
                                float _2550 = 1.0 - dot(vec2(_2545, _2546), vec2(_2545, _2546));
                                float _3124 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
                                float _2558 = dot(vec3(0.0), vec3((-0.0) - (_1307 * _2078), (-0.0) - (_1308 * _2078), (-0.0) - (_1309 * _2078)));
                                float _3135 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                                float _2566 = ((1.0 - _2542) * dot(vec3(0.0), vec3(_2530 * _2524, _2530 * _2525, _2530 * _2526))) + _2542;
                                float _3146 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                                float _2567 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
                                float _2571 = (0.5 / (((isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0))) + 9.9999999392252902907785028219223e-09) + _2567)) * _2567;
                                float _3157 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                                float _2578 = ((isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * (((isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * 3.1415927410125732421875) / (((_2539 * _2539) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _2578 * _2413.y;
                                frontier_phi_104_pred_1 = _2578 * _2413.x;
                                frontier_phi_104_pred_2 = _2578 * _2413.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                            }
                            _2583 = frontier_phi_104_pred;
                            _2582 = frontier_phi_104_pred_1;
                            _2584 = frontier_phi_104_pred_2;
                            _2361 = _2582 + _2371;
                            _2362 = _2583 + _2372;
                            _2363 = _2584 + _2373;
                            if (_2375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2371 = _2361;
                                _2372 = _2362;
                                _2373 = _2363;
                                _2374 = _2375;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _2363;
                        frontier_phi_98_pred_1 = _2362;
                        frontier_phi_98_pred_2 = _2361;
                    }
                    _2067 = frontier_phi_98_pred;
                    _2065 = frontier_phi_98_pred_1;
                    _2063 = frontier_phi_98_pred_2;
                    uint _2229 = _2228 + 1u;
                    if (_2229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2225 = _2063;
                        _2226 = _2065;
                        _2227 = _2067;
                        _2228 = _2229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2067;
                frontier_phi_78_79_ladder_1 = _2065;
                frontier_phi_78_79_ladder_2 = _2063;
            }
            else
            {
                frontier_phi_78_79_ladder = _1924;
                frontier_phi_78_79_ladder_1 = _1922;
                frontier_phi_78_79_ladder_2 = _1920;
            }
            _2062 = frontier_phi_78_79_ladder_2;
            _2064 = frontier_phi_78_79_ladder_1;
            _2066 = frontier_phi_78_79_ladder;
        }
        float _2071 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _1826 = ((_2062 * 0.039999999105930328369140625) * _2071) + _1661;
        _1828 = ((_2064 * 0.039999999105930328369140625) * _2071) + _1662;
        _1830 = ((_2066 * 0.039999999105930328369140625) * _2071) + _1663;
    }
    else
    {
        _1826 = _1661;
        _1828 = _1662;
        _1830 = _1663;
    }
    uint _1836 = _1529 + 9u;
    uint _1837 = _1836 + uint(cbMatDynParam._m0[0u].w);
    float _1852 = (cbInstanceData._m0[_1837].x * ((_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420)) + ((_1826 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _1028)) * cbPerFrame._m0[3u].x);
    float _1853 = (cbInstanceData._m0[_1837].y * ((_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421)) + ((_1828 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _1028)) * cbPerFrame._m0[3u].x);
    float _1854 = (cbInstanceData._m0[_1837].z * ((_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422)) + ((_1830 + ((isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))) * _1028)) * cbPerFrame._m0[3u].x);
    float _1855 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1856 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1857 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    uint _1858 = _1529 + 6u;
    float _1866 = _592 / cbSceneParam._m0[86u].x;
    float _1867 = _593 / cbSceneParam._m0[86u].y;
    vec4 _1881 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1866, _1867, (log2((isnan(cbSceneParam._m0[77u].w) ? _566 : (isnan(_566) ? cbSceneParam._m0[77u].w : min(_566, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1883 = _1881.x;
    float _1884 = _1881.y;
    float _1885 = _1881.z;
    float _1886 = _1881.w;
    float _1976;
    float _1978;
    float _1980;
    float _1982;
    if (_566 > cbSceneParam._m0[78u].w)
    {
        float _1939 = isnan(_566) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _566 : min(cbSceneParam._m0[80u].w, _566));
        float _1940 = _1939 / _566;
        float _1951 = _1940 * _265;
        float _1952 = _266 * _1940;
        float _1953 = (-0.0) - _1952;
        float _1954 = _1940 * _267;
        float _1956 = (cbSceneParam._m0[77u].w * _1953) / _1939;
        float _1957 = _1956 + cbSceneParam._m0[79u].w;
        float _1958 = cbSceneParam._m0[79u].w - _1952;
        float _1964 = sqrt(((_1951 * _1951) + (_1952 * _1952)) + (_1954 * _1954));
        float _1967 = (1.0 - (cbSceneParam._m0[77u].w / _1939)) * _1964;
        float _1972 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1974 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2182;
        if (abs((_1953 - _1956) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2182 = ((((_1957 > 0.0) ? exp2(_1972 * _1957) : (2.0 - exp2(_1974 * _1957))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1967;
        }
        else
        {
            float _2108 = 1.0 / cbSceneParam._m0[80u].x;
            float _2109 = isnan(_1958) ? _1957 : (isnan(_1957) ? _1958 : max(_1957, _1958));
            float _2110 = isnan(_1958) ? _1957 : (isnan(_1957) ? _1958 : min(_1957, _1958));
            float _2119 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : min(_2109, 0.0));
            float _2120 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : min(_2110, 0.0));
            _2182 = ((abs(_1964 / _1953) * cbSceneParam._m0[80u].y) * ((((_2119 - _2120) * 2.0) - ((exp2(_1972 * (isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0)))) - exp2(_1972 * (isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))))) * _2108)) - ((exp2(_1974 * _2119) - exp2(_1974 * _2120)) * _2108))) + (_1967 * cbSceneParam._m0[80u].z);
        }
        vec4 _2184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1866, _1867, 1.0), 0.0);
        float _2193 = exp2((_2182 * (-1.44269502162933349609375)) * (1.0 - _2184.w));
        float _2194 = log2(_2193);
        float _2210 = log2(_1886);
        _1976 = (exp2(_2210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].x)) * _2184.x) / cbSceneParam._m0[78u].x)) + _1883;
        _1978 = (exp2(_2210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].y)) * _2184.y) / cbSceneParam._m0[78u].y)) + _1884;
        _1980 = (exp2(_2210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].z)) * _2184.z) / cbSceneParam._m0[78u].z)) + _1885;
        _1982 = _2193 * _1886;
    }
    else
    {
        _1976 = _1883;
        _1978 = _1884;
        _1980 = _1885;
        _1982 = _1886;
    }
    bool _2220;
    vec4 _1992;
    vec4 _2015;
    float _2017;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    bool _2035;
    for (;;)
    {
        _1992 = cbMatDynParam._m0[0u];
        float _1994 = roundEven(_1992.y);
        bool _1995 = _1994 == 3.0;
        float _1997 = log2(_1982);
        float _2004 = exp2(_1997 * cbSceneParam._m0[78u].x) * _1855;
        float _2005 = exp2(_1997 * cbSceneParam._m0[78u].y) * _1856;
        float _2006 = exp2(_1997 * cbSceneParam._m0[78u].z) * _1857;
        float _2013 = _580 + (-0.5);
        _2015 = cbMtdParam._m0[1u];
        _2017 = _2015.y * _2013;
        float _2020 = (_1994 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2021 = _2020 * (_1995 ? _2004 : (_2004 + (cbSceneParam._m0[72u].w * _1976)));
        _2022 = _2020 * (_1995 ? _2005 : (_2005 + (cbSceneParam._m0[72u].w * _1978)));
        _2023 = _2020 * (_1995 ? _2006 : (_2006 + (cbSceneParam._m0[72u].w * _1980)));
        _2024 = _2013 * 0.999000012874603271484375;
        _2035 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2035)
        {
            if ((cbInstanceData._m0[_1529 + 7u].x + _2024) < 0.5)
            {
                _2220 = true;
                break;
            }
        }
        uint _2143 = _1836 + uint(_1992.w);
        if ((cbInstanceData._m0[_2143].w < 1.0) && ((cbInstanceData._m0[_2143].w + _2024) < 0.5))
        {
            _2220 = true;
            break;
        }
        if ((_2017 + 1.0) < _2015.x)
        {
            _2220 = true;
            break;
        }
        _2220 = false;
        break;
    }
    float _2352;
    if (_2220)
    {
        discard_state = true;
        _2352 = 0.0;
    }
    else
    {
        _2352 = cbInstanceData._m0[_1858].w;
    }
    SV_Target.x = _2021;
    SV_Target.y = _2022;
    SV_Target.z = _2023;
    SV_Target.w = _2352;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1858].w;
    discard_exit();
}


