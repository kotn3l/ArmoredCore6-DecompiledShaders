#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1046;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _287 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = cbMtdParam._m0[21u].w + _263;
    float _323 = cbMtdParam._m0[22u].x + _264;
    float _324 = cbMtdParam._m0[22u].y + _265;
    float _338 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _339 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _340 = (-0.0) - dot(vec3(_322, _323, _324), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _347 = _344 * _340;
    float _348 = (_344 * _338) + (((_287.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _349 = (_344 * _339) + (((_287.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _350 = _348 * cbMtdParam._m0[18u].z;
    float _351 = _349 * cbMtdParam._m0[18u].y;
    float _352 = fract(TEXCOORD.x);
    float _353 = fract(TEXCOORD.y);
    float _359;
    if (_350 > 0.0)
    {
        _359 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _359 = frontier_phi_3_2_ladder;
    }
    float _367;
    if (_351 > 0.0)
    {
        _367 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _367 = frontier_phi_7_6_ladder;
    }
    bool _369 = _347 > 0.0;
    float _371 = _369 ? (cbMtdParam._m0[15u].x / _347) : 5000.0;
    float _372 = isnan(_367) ? _359 : (isnan(_359) ? _367 : min(_359, _367));
    float _373 = isnan(_371) ? _372 : (isnan(_372) ? _371 : min(_372, _371));
    float _377 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = _352 + (-0.5);
    float _381 = _353 + (-0.5);
    float _384 = ((_373 * _347) + _377) / _377;
    vec4 _408 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_378 + (_373 * _350)) / _384) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_381 + (_373 * _351)) / _384) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _438 = _348 * cbMtdParam._m0[20u].z;
    float _439 = _349 * cbMtdParam._m0[20u].y;
    bool _440 = _438 > 0.0;
    float _445;
    if (_440)
    {
        _445 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _445 = frontier_phi_11_10_ladder;
    }
    bool _447 = _439 > 0.0;
    float _452;
    if (_447)
    {
        _452 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _452 = frontier_phi_15_14_ladder;
    }
    float _455 = _369 ? (cbMtdParam._m0[16u].x / _347) : 5000.0;
    float _456 = isnan(_452) ? _445 : (isnan(_445) ? _452 : min(_445, _452));
    float _457 = isnan(_455) ? _456 : (isnan(_456) ? _455 : min(_456, _455));
    float _461 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _465 = ((_457 * _347) + _461) / _461;
    float _470 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _472 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _488 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_378 + (_457 * _438)) / _465) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_381 + (_457 * _439)) / _465) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _500;
    if (_440)
    {
        _500 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _500 = frontier_phi_19_18_ladder;
    }
    float _506;
    if (_447)
    {
        _506 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _506 = frontier_phi_23_22_ladder;
    }
    float _508 = isnan(_506) ? _500 : (isnan(_500) ? _506 : min(_500, _506));
    float _509 = isnan(_455) ? _508 : (isnan(_508) ? _455 : min(_508, _455));
    float _516 = ((_509 * _347) + _461) / _461;
    vec4 _537 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_378 + (_509 * _438)) / _516) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_381 + (_509 * _439)) / _516) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_488.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_488.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_488.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _562 = _348 * cbMtdParam._m0[21u].x;
    float _563 = _349 * cbMtdParam._m0[20u].w;
    bool _564 = _562 > 0.0;
    float _569;
    if (_564)
    {
        _569 = (1.0 - _352) / _562;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _352) / _562;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _569 = frontier_phi_27_26_ladder;
    }
    bool _571 = _563 > 0.0;
    float _576;
    if (_571)
    {
        _576 = (1.0 - _353) / _563;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _353) / _563;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _576 = frontier_phi_31_30_ladder;
    }
    float _579 = _369 ? (cbMtdParam._m0[17u].z / _347) : 5000.0;
    float _580 = isnan(_576) ? _569 : (isnan(_569) ? _576 : min(_569, _576));
    float _581 = isnan(_579) ? _580 : (isnan(_580) ? _579 : min(_580, _579));
    float _585 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _589 = ((_581 * _347) + _585) / _585;
    float _594 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _596 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _613 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_378 + (_581 * _562)) / _589) + 0.5) + _594) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_381 + (_581 * _563)) / _589) + 0.5) + _596) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _625;
    if (_564)
    {
        _625 = (1.0 - _352) / _562;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _352) / _562;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _625 = frontier_phi_35_34_ladder;
    }
    float _631;
    if (_571)
    {
        _631 = (1.0 - _353) / _563;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _353) / _563;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _631 = frontier_phi_39_38_ladder;
    }
    float _633 = isnan(_631) ? _625 : (isnan(_625) ? _631 : min(_625, _631));
    float _634 = isnan(_579) ? _633 : (isnan(_633) ? _579 : min(_633, _579));
    float _641 = ((_634 * _347) + _585) / _585;
    vec4 _661 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_378 + (_634 * _562)) / _641) + 0.5) + _594) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_381 + (_634 * _563)) / _641) + 0.5) + _596) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _663 = _661.x;
    float _670 = (_663 * ((_613.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _671 = (_663 * ((_613.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _672 = (_663 * ((_613.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _3043 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3054 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3065 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _696 = _263 * _695;
    float _697 = _264 * _695;
    float _698 = _265 * _695;
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _718 = uint(roundEven(NORMAL.w)) * 13u;
    uint _721 = (_718 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _727 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0)))) * cbInstanceData._m0[_721].x;
    float _728 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0)))) * cbInstanceData._m0[_721].y;
    float _729 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0)))) * cbInstanceData._m0[_721].z;
    float _3076 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
    float _3087 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
    float _3098 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _744 = _741.x * TEXCOORD.z;
    float _745 = (-0.0) - _696;
    float _746 = (-0.0) - _697;
    float _747 = (-0.0) - _698;
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = (cbModelParam._m0[37u].x * ((((fma(_777, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _835 = (cbModelParam._m0[37u].y * ((((fma(_777, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _836 = (((((fma(_777, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(0.0), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3124 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3135 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3146 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(0.0), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3157 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3168 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3179 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(0.0), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3190 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3201 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3212 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = (cbModelParam._m0[38u].x * ((((fma(_777, cbModelParam._m0[30u].z, fma(_773, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _769)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1115 = (cbModelParam._m0[38u].y * ((((fma(_777, cbModelParam._m0[31u].z, fma(_773, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _769)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1116 = (((((fma(_777, cbModelParam._m0[32u].z, fma(_773, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _769)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1151 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1118.x + (-0.5));
        float _1153 = _1151 * (_1118.y + (-0.5));
        float _1154 = _1151 * (_1118.z + (-0.5));
        float _1161 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1125.x + (-0.5));
        float _1163 = _1161 * (_1125.y + (-0.5));
        float _1164 = _1161 * (_1125.z + (-0.5));
        float _1171 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1132.x + (-0.5));
        float _1173 = _1171 * (_1132.y + (-0.5));
        float _1174 = _1171 * (_1132.z + (-0.5));
        float _1181 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1139.x + (-0.5));
        float _1183 = _1181 * (_1139.y + (-0.5));
        float _1184 = _1181 * (_1139.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(0.0), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3275 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_1215 + 1.0))) + _1220) * _1185;
        float _1230 = _1153 * 0.5;
        float _1231 = _1163 * 0.5;
        float _1232 = _1173 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(0.0), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3286 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3297 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3308 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * (_1257 + 1.0))) + _1262) * _1186;
        float _1272 = _1154 * 0.5;
        float _1273 = _1164 * 0.5;
        float _1274 = _1174 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(0.0), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3341 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_1299 + 1.0))) + _1304) * _1187;
        _1321 = _1154;
        _1322 = _1153;
        _1323 = _1152;
        _1324 = _1164;
        _1325 = _1163;
        _1326 = _1162;
        _1327 = _1174;
        _1328 = _1173;
        _1329 = _1172;
        _1330 = _1187;
        _1331 = _1186;
        _1332 = _1185;
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1046;
        _1322 = _1046;
        _1323 = _1046;
        _1324 = _1046;
        _1325 = _1046;
        _1326 = _1046;
        _1327 = _1046;
        _1328 = _1046;
        _1329 = _1046;
        _1330 = _1046;
        _1331 = _1046;
        _1332 = _1046;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1058)) + _1058;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1059)) + _1059;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1060)) + _1060;
    float _1368 = fma(_1347, cbSceneParam._m0[89u].z, fma(_1346, cbSceneParam._m0[89u].y, _1345 * cbSceneParam._m0[89u].x));
    float _1371 = fma(_1347, cbSceneParam._m0[90u].z, fma(_1346, cbSceneParam._m0[90u].y, _1345 * cbSceneParam._m0[90u].x));
    float _1374 = fma(_1347, cbSceneParam._m0[91u].z, fma(_1346, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1345));
    float _1389 = _696 * (-0.5);
    float _1390 = _697 * (-0.5);
    float _1391 = _698 * (-0.5);
    float _1392 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1395 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1398 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1432;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1405 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1409 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1413 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1420 = dot(vec4(cbModelParam._m0[39u]), vec4(_1389, _1390, _1391, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1443;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1434 = dot(vec4(cbModelParam._m0[40u]), vec4(_1389, _1390, _1391, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1447 = (_1443 * cbModelParam._m0[1u].x) + (_1432 * (1.0 - cbModelParam._m0[1u].x));
    float _1456 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1503 = fma(_777, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769)) + cbModelParam._m0[13u].w;
        float _1507 = fma(_777, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769)) + cbModelParam._m0[14u].w;
        float _1511 = fma(_777, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769)) + cbModelParam._m0[15u].w;
        float _1514 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1517 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1520 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1546;
        if (_1514 > 0.0)
        {
            _1546 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1546 = frontier_phi_54_52_ladder;
        }
        float _1867;
        if (_1517 > 0.0)
        {
            _1867 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1867 = frontier_phi_63_59_ladder;
        }
        float _2169;
        if (_1520 > 0.0)
        {
            _2169 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2169 = frontier_phi_77_70_ladder;
        }
        float _2171 = isnan(_1867) ? _1546 : (isnan(_1546) ? _1867 : min(_1546, _1867));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1514) + _1503;
        float _2177 = (_2172 * _1517) + _1507;
        float _2178 = (_2172 * _1520) + _1511;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2179;
        float _2182 = _2179 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2178 > _2182) || ((_2178 < _2180) || ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 < _2180) || (_2176 > _2182))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1456);
            frontier_phi_53_77_ladder = _2301.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2301.z * cbModelParam._m0[1u].y;
        }
        _1536 = frontier_phi_53_77_ladder;
        _1538 = frontier_phi_53_77_ladder_1;
        _1540 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1456);
        _1536 = _1524.x * cbModelParam._m0[1u].y;
        _1538 = _1524.y * cbModelParam._m0[1u].y;
        _1540 = _1524.z * cbModelParam._m0[1u].y;
    }
    float _1543 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_777, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_777, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_777, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1609 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1612 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1872;
        if (_1606 > 0.0)
        {
            _1872 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1872 = frontier_phi_65_61_ladder;
        }
        float _2195;
        if (_1609 > 0.0)
        {
            _2195 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2195 = frontier_phi_79_72_ladder;
        }
        float _2361;
        if (_1612 > 0.0)
        {
            _2361 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2361 = frontier_phi_93_88_ladder;
        }
        float _2363 = isnan(_2195) ? _1872 : (isnan(_1872) ? _2195 : min(_1872, _2195));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1606) + _1595;
        float _2369 = (_2364 * _1609) + _1599;
        float _2370 = (_2364 * _1612) + _1603;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_62_93_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_62_93_ladder_2;
        _1633 = frontier_phi_62_93_ladder_1;
        _1635 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1543);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1647 = _744 * 0.01200000010430812835693359375;
    float _1649 = _1647 * ((cbModelParam._m0[1u].w * (_1631 - _1536)) + _1536);
    float _1650 = _1647 * ((cbModelParam._m0[1u].w * (_1633 - _1538)) + _1538);
    float _1651 = _1647 * ((cbModelParam._m0[1u].w * (_1635 - _1540)) + _1540);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    vec4 _1668 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_704, _705));
    float _1670 = _1668.w;
    float _1683 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1670);
    float _1684 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1670);
    float _1685 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1670);
    uvec4 _1690 = floatBitsToUint(cbInstanceData._m0[_718 + 5u]);
    uint _1692 = _1690.x * 14u;
    uint _1693 = _1692 + 13u;
    float _1698 = _744 + (-1.0);
    float _1701 = (cbLight._m0[_1693].x * _1698) + 1.0;
    float _1702 = (cbLight._m0[_1693].y * _1698) + 1.0;
    uint _1703 = _1692 + 5u;
    float _1709 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1713 = _1692 + 4u;
    float _1722 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1726 = _1692 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1692].xyz), vec3(0.0));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(0.0));
    float _3477 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _3488 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1703].x * _1709) * _1747) + (((cbLight._m0[_1713].x * _1683) * _1722) * _1745);
    float _1755 = ((_1709 * cbLight._m0[_1703].y) * _1747) + (((cbLight._m0[_1713].y * _1684) * _1722) * _1745);
    float _1756 = ((_1709 * cbLight._m0[_1703].z) * _1747) + (((cbLight._m0[_1713].z * _1685) * _1722) * _1745);
    uint _1757 = _1692 + 8u;
    float _1763 = cbLight._m0[_1692].x + _696;
    float _1764 = cbLight._m0[_1692].y + _697;
    float _1765 = cbLight._m0[_1692].z + _698;
    float _1769 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
    float _1773 = dot(vec3(0.0), vec3(cbLight._m0[_1692].xyz));
    float _3499 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _1777 = dot(vec3(0.0), vec3(_696, _697, _698));
    float _3510 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_1763 * _1769, _1764 * _1769, _1765 * _1769));
    float _3521 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1798 = (0.5 / ((_1776 + 9.9999999392252902907785028219223e-09) + _1780)) * _1776;
    float _3532 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1800 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
    uint _1814 = _1692 + 9u;
    float _1820 = cbLight._m0[_1726].x + _696;
    float _1821 = cbLight._m0[_1726].y + _697;
    float _1822 = cbLight._m0[_1726].z + _698;
    float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
    float _1830 = dot(vec3(0.0), vec3(cbLight._m0[_1726].xyz));
    float _3543 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1820 * _1826, _1821 * _1826, _1822 * _1826));
    float _3554 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = (0.5 / ((_1833 + 9.9999999392252902907785028219223e-09) + _1780)) * _1833;
    float _3565 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.31831014156341552734375;
    float _1859 = (((_1843 * cbLight._m0[_1814].x) * _1849) * _1709) + ((((cbLight._m0[_1757].x * _1683) * _1792) * _1800) * _1722);
    float _1860 = (((_1843 * cbLight._m0[_1814].y) * _1849) * _1709) + ((((cbLight._m0[_1757].y * _1684) * _1792) * _1800) * _1722);
    float _1861 = (((_1843 * cbLight._m0[_1814].z) * _1849) * _1709) + ((((cbLight._m0[_1757].z * _1685) * _1792) * _1800) * _1722);
    float _1977;
    float _1979;
    float _1981;
    float _1983;
    float _1985;
    float _1987;
    if (_1690.y == 0u)
    {
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1917;
        float _1919 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1917;
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1917;
        uvec4 _1932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1933 = _1932.x;
        uint _1944 = uint((float(_1932.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _1933))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _1933)));
        float _1954 = (log2(_1920 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1955 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        uint _1958 = uint(isnan(14.0) ? _1955 : (isnan(_1955) ? 14.0 : min(_1955, 14.0)));
        uvec4 _1963 = texelFetch(g_lightClusterGridBuffer, int(((_1958 << 2u) + (_1944 << 6u)) >> 2u));
        uint _1964 = _1963.x;
        uint _1965 = _1932.z;
        float _2055;
        float _2057;
        float _2059;
        float _2061;
        float _2063;
        float _2065;
        if (((((1u << ((_1965 >> 4u) & 15u)) + 4294967295u) & _1964) == 0u) || ((_1965 & 240u) == 0u))
        {
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
            _2061 = 0.0;
            _2063 = 0.0;
            _2065 = 0.0;
        }
        else
        {
            float _2056;
            float _2058;
            float _2060;
            float _2062;
            float _2064;
            float _2066;
            float _2229 = 0.0;
            float _2230 = 0.0;
            float _2231 = 0.0;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            uint _2235 = 0u;
            uint _2244;
            bool _2245;
            for (;;)
            {
                _2244 = texelFetch(g_lightClassification, int((((_1958 << 5u) + (_1944 << 9u)) + (_2235 << 2u)) >> 2u)).x;
                _2245 = _2244 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2245)
                {
                    frontier_phi_90_pred = _2234;
                    frontier_phi_90_pred_1 = _2229;
                    frontier_phi_90_pred_2 = _2230;
                    frontier_phi_90_pred_3 = _2231;
                    frontier_phi_90_pred_4 = _2232;
                    frontier_phi_90_pred_5 = _2233;
                }
                else
                {
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    uint _2410;
                    _2404 = _2229;
                    _2405 = _2230;
                    _2406 = _2231;
                    _2407 = _2232;
                    _2408 = _2233;
                    _2409 = _2234;
                    _2410 = _2244;
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    float _2315;
                    for (;;)
                    {
                        uint _2414 = uint(findLSB(_2410)) + (_2235 << 5u);
                        uint _2411 = (_2410 + 4294967295u) & _2410;
                        uint _2416 = _2414 * 48u;
                        vec4 _2430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2416)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2416 + 3u)).x));
                        uint _2436 = (_2414 * 48u) + 4u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2436)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2436 + 3u)).x));
                        uint _2455 = (_2414 * 48u) + 8u;
                        vec3 _2466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x));
                        float _2470 = _2430.x - _1918;
                        float _2471 = _2430.y - _1919;
                        float _2472 = _2430.z - _1920;
                        float _2473 = dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472));
                        float _2476 = inversesqrt(_2473);
                        float _2485 = 1.0 - (_2473 * _2430.w);
                        float _3586 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                        float _2486 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
                        float _2487 = sqrt(_2473) * _2449.w;
                        float _2490 = 1.39999997615814208984375 / (_2487 + 1.39999997615814208984375);
                        float _2491 = _2490 * _2490;
                        float _2494 = ((1.0 - _2491) * dot(vec3(0.0), vec3(_2476 * _2470, _2476 * _2471, _2476 * _2472))) + _2491;
                        float _2497 = _2487 * _2487;
                        float _2501 = ((isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))) * _2486) / ((_2497 * 0.699999988079071044921875) + 1.0);
                        float _2505 = (-0.0) - _1918;
                        float _2506 = (-0.0) - _1919;
                        float _2507 = (-0.0) - _1920;
                        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
                        float _2515 = dot(vec3(0.0), vec3(_2511 * _2505, _2511 * _2506, _2511 * _2507));
                        float _3602 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _3613 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
                        float _2519 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
                        float _2523 = (0.5 / (((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) + 9.9999999392252902907785028219223e-09) + _2519)) * _2519;
                        float _3624 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                        float _2532 = (((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 3.1415927410125732421875) / ((_2497 * 2.1991131305694580078125) + 3.141590118408203125)) * _2486;
                        _2313 = (_2501 * _2449.x) + _2407;
                        _2314 = (_2501 * _2449.y) + _2408;
                        _2315 = (_2501 * _2449.z) + _2409;
                        _2310 = (_2532 * _2466.x) + _2404;
                        _2311 = (_2532 * _2466.y) + _2405;
                        _2312 = (_2532 * _2466.z) + _2406;
                        if (_2411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2404 = _2310;
                            _2405 = _2311;
                            _2406 = _2312;
                            _2407 = _2313;
                            _2408 = _2314;
                            _2409 = _2315;
                            _2410 = _2411;
                        }
                    }
                    frontier_phi_90_pred = _2315;
                    frontier_phi_90_pred_1 = _2310;
                    frontier_phi_90_pred_2 = _2311;
                    frontier_phi_90_pred_3 = _2312;
                    frontier_phi_90_pred_4 = _2313;
                    frontier_phi_90_pred_5 = _2314;
                }
                _2066 = frontier_phi_90_pred;
                _2056 = frontier_phi_90_pred_1;
                _2058 = frontier_phi_90_pred_2;
                _2060 = frontier_phi_90_pred_3;
                _2062 = frontier_phi_90_pred_4;
                _2064 = frontier_phi_90_pred_5;
                uint _2236 = _2235 + 1u;
                if (_2236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2229 = _2056;
                    _2230 = _2058;
                    _2231 = _2060;
                    _2232 = _2062;
                    _2233 = _2064;
                    _2234 = _2066;
                    _2235 = _2236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
            _2061 = _2062;
            _2063 = _2064;
            _2065 = _2066;
        }
        uvec4 _2069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2070 = _2069.z;
        uint _2072 = (_2070 >> 8u) & 15u;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        float _2208;
        float _2210;
        if (((4294967295u << _2072) & _1964) == 0u)
        {
            _2200 = _2055;
            _2202 = _2057;
            _2204 = _2059;
            _2206 = _2061;
            _2208 = _2063;
            _2210 = _2065;
        }
        else
        {
            float _2225 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2072 < ((_2070 >> 12u) & 15u))
            {
                float _2201;
                float _2203;
                float _2205;
                float _2207;
                float _2209;
                float _2211;
                float _2387 = _2055;
                float _2388 = _2057;
                float _2389 = _2059;
                float _2390 = _2061;
                float _2391 = _2063;
                float _2392 = _2065;
                uint _2393 = _2072;
                uint _2402;
                bool _2403;
                for (;;)
                {
                    _2402 = texelFetch(g_lightClassification, int((((_1958 << 5u) + (_1944 << 9u)) + (_2393 << 2u)) >> 2u)).x;
                    _2403 = _2402 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2403)
                    {
                        frontier_phi_99_pred = _2390;
                        frontier_phi_99_pred_1 = _2389;
                        frontier_phi_99_pred_2 = _2388;
                        frontier_phi_99_pred_3 = _2387;
                        frontier_phi_99_pred_4 = _2392;
                        frontier_phi_99_pred_5 = _2391;
                    }
                    else
                    {
                        float _2558;
                        float _2559;
                        float _2560;
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2571 = _2387;
                        float _2572 = _2388;
                        float _2573 = _2389;
                        float _2574 = _2390;
                        float _2575 = _2391;
                        float _2576 = _2392;
                        uint _2577 = _2402;
                        uint _2578;
                        vec4 _2603;
                        float _2604;
                        vec4 _2619;
                        vec3 _2631;
                        vec4 _2646;
                        vec4 _2661;
                        float _2707;
                        bool _2708;
                        for (;;)
                        {
                            uint _2588 = ((_2393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2577));
                            _2578 = (_2577 + 4294967295u) & _2577;
                            uint _2590 = _2588 * 40u;
                            _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            _2604 = _2603.w;
                            uint _2606 = (_2588 * 40u) + 4u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            uint _2621 = (_2588 * 40u) + 8u;
                            _2631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x));
                            uint _2633 = (_2588 * 40u) + 16u;
                            _2646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2633 + 3u)).x));
                            uint _2648 = (_2588 * 40u) + 20u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            uint _2663 = (_2588 * 40u) + 24u;
                            vec4 _2676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 3u)).x));
                            uint _2682 = (_2588 * 40u) + 28u;
                            vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            _2707 = fma(_1920, _2695.z, fma(_1919, _2695.y, _2695.x * _1918)) + _2695.w;
                            _2708 = !((fma(_1920, _2676.z, fma(_1919, _2676.y, _2676.x * _1918)) + _2676.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2708)
                            {
                                float _2735 = _2603.x - _1918;
                                float _2736 = _2603.y - _1919;
                                float _2737 = _2603.z - _1920;
                                float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                                float _2741 = inversesqrt(_2738);
                                float _2742 = _2741 * _2735;
                                float _2743 = _2741 * _2736;
                                float _2744 = _2741 * _2737;
                                float _2748 = 1.0 - (_2738 / (_2604 * _2604));
                                float _3635 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                                float _2749 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
                                float _2753 = sqrt(_2738) * _2619.w;
                                float _2755 = 1.39999997615814208984375 / (_2753 + 1.39999997615814208984375);
                                float _2756 = _2755 * _2755;
                                float _2757 = 1.0 - _2756;
                                float _2759 = (_2757 * dot(vec3(_2742, _2743, _2744), vec3(0.0))) + _2756;
                                float _2762 = _2753 * _2753;
                                float _2766 = (fma(_1920, _2646.z, fma(_1919, _2646.y, _2646.x * _1918)) + _2646.w) / _2707;
                                float _2767 = (fma(_1920, _2661.z, fma(_1919, _2661.y, _2661.x * _1918)) + _2661.w) / _2707;
                                float _2771 = 1.0 - dot(vec2(_2766, _2767), vec2(_2766, _2767));
                                float _3651 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                                float _2772 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
                                float _2773 = _2772 * (((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2749) / ((_2762 * 0.699999988079071044921875) + 1.0));
                                float _2783 = dot(vec3(0.0), vec3((-0.0) - (_1918 * _2225), (-0.0) - (_1919 * _2225), (-0.0) - (_1920 * _2225)));
                                float _3662 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2791 = (_2757 * dot(vec3(0.0), vec3(_2742, _2743, _2744))) + _2756;
                                float _3673 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                                float _2792 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
                                float _2796 = (0.5 / (((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) + 9.9999999392252902907785028219223e-09) + _2792)) * _2792;
                                float _3684 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2803 = (_2772 * _2749) * (((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 3.1415927410125732421875) / ((_2762 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2773 * _2619.z;
                                frontier_phi_105_pred_1 = _2803 * _2631.x;
                                frontier_phi_105_pred_2 = _2803 * _2631.y;
                                frontier_phi_105_pred_3 = _2803 * _2631.z;
                                frontier_phi_105_pred_4 = _2773 * _2619.x;
                                frontier_phi_105_pred_5 = _2773 * _2619.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _2812 = frontier_phi_105_pred;
                            _2807 = frontier_phi_105_pred_1;
                            _2808 = frontier_phi_105_pred_2;
                            _2809 = frontier_phi_105_pred_3;
                            _2810 = frontier_phi_105_pred_4;
                            _2811 = frontier_phi_105_pred_5;
                            _2561 = _2810 + _2574;
                            _2562 = _2811 + _2575;
                            _2563 = _2812 + _2576;
                            _2558 = _2807 + _2571;
                            _2559 = _2808 + _2572;
                            _2560 = _2809 + _2573;
                            if (_2578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2578;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2561;
                        frontier_phi_99_pred_1 = _2560;
                        frontier_phi_99_pred_2 = _2559;
                        frontier_phi_99_pred_3 = _2558;
                        frontier_phi_99_pred_4 = _2563;
                        frontier_phi_99_pred_5 = _2562;
                    }
                    _2207 = frontier_phi_99_pred;
                    _2205 = frontier_phi_99_pred_1;
                    _2203 = frontier_phi_99_pred_2;
                    _2201 = frontier_phi_99_pred_3;
                    _2211 = frontier_phi_99_pred_4;
                    _2209 = frontier_phi_99_pred_5;
                    uint _2394 = _2393 + 1u;
                    if (_2394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2387 = _2201;
                        _2388 = _2203;
                        _2389 = _2205;
                        _2390 = _2207;
                        _2391 = _2209;
                        _2392 = _2211;
                        _2393 = _2394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2211;
                frontier_phi_81_82_ladder_1 = _2207;
                frontier_phi_81_82_ladder_2 = _2205;
                frontier_phi_81_82_ladder_3 = _2203;
                frontier_phi_81_82_ladder_4 = _2201;
                frontier_phi_81_82_ladder_5 = _2209;
            }
            else
            {
                frontier_phi_81_82_ladder = _2065;
                frontier_phi_81_82_ladder_1 = _2061;
                frontier_phi_81_82_ladder_2 = _2059;
                frontier_phi_81_82_ladder_3 = _2057;
                frontier_phi_81_82_ladder_4 = _2055;
                frontier_phi_81_82_ladder_5 = _2063;
            }
            _2200 = frontier_phi_81_82_ladder_4;
            _2202 = frontier_phi_81_82_ladder_3;
            _2204 = frontier_phi_81_82_ladder_2;
            _2206 = frontier_phi_81_82_ladder_1;
            _2208 = frontier_phi_81_82_ladder_5;
            _2210 = frontier_phi_81_82_ladder;
        }
        float _2215 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _1977 = (_2215 * _2206) + _1754;
        _1979 = (_2215 * _2208) + _1755;
        _1981 = (_2215 * _2210) + _1756;
        _1983 = ((_2200 * 0.039999999105930328369140625) * _2215) + _1859;
        _1985 = ((_2202 * 0.039999999105930328369140625) * _2215) + _1860;
        _1987 = ((_2204 * 0.039999999105930328369140625) * _2215) + _1861;
    }
    else
    {
        _1977 = _1754;
        _1979 = _1755;
        _1981 = _1756;
        _1983 = _1859;
        _1985 = _1860;
        _1987 = _1861;
    }
    float _3700 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3711 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3722 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2004 = ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1977 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _744))) + ((_1983 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    float _2005 = ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1979 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _744))) + ((_1985 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    float _2006 = ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1981 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _744))) + ((_1987 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1447)) * cbPerFrame._m0[3u].x);
    uint _2010 = _718 + 6u;
    float _2018 = _704 / cbSceneParam._m0[86u].x;
    float _2019 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2033 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2018, _2019, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2035 = _2033.x;
    float _2036 = _2033.y;
    float _2037 = _2033.z;
    float _2038 = _2033.w;
    float _2118;
    float _2120;
    float _2122;
    float _2124;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2080 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2081 = _2080 / _691;
        float _2092 = _2081 * _263;
        float _2093 = _264 * _2081;
        float _2094 = (-0.0) - _2093;
        float _2095 = _2081 * _265;
        float _2097 = (cbSceneParam._m0[77u].w * _2094) / _2080;
        float _2098 = _2097 + cbSceneParam._m0[79u].w;
        float _2099 = cbSceneParam._m0[79u].w - _2093;
        float _2105 = sqrt(((_2092 * _2092) + (_2093 * _2093)) + (_2095 * _2095));
        float _2108 = (1.0 - (cbSceneParam._m0[77u].w / _2080)) * _2105;
        float _2114 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2116 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2323;
        if (abs((_2094 - _2097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2323 = ((((_2098 > 0.0) ? exp2(_2114 * _2098) : (2.0 - exp2(_2116 * _2098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2108;
        }
        else
        {
            float _2258 = 1.0 / cbSceneParam._m0[80u].x;
            float _2259 = isnan(_2099) ? _2098 : (isnan(_2098) ? _2099 : max(_2098, _2099));
            float _2260 = isnan(_2099) ? _2098 : (isnan(_2098) ? _2099 : min(_2098, _2099));
            float _2269 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : min(_2259, 0.0));
            float _2270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : min(_2260, 0.0));
            _2323 = ((abs(_2105 / _2094) * cbSceneParam._m0[80u].y) * ((((_2269 - _2270) * 2.0) - ((exp2(_2114 * (isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0)))) - exp2(_2114 * (isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))))) * _2258)) - ((exp2(_2116 * _2269) - exp2(_2116 * _2270)) * _2258))) + (_2108 * cbSceneParam._m0[80u].z);
        }
        vec4 _2325 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2018, _2019, 1.0), 0.0);
        float _2334 = exp2((_2323 * (-1.44269502162933349609375)) * (1.0 - _2325.w));
        float _2335 = log2(_2334);
        float _2351 = log2(_2038);
        _2118 = (exp2(_2351 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].x)) * _2325.x) / cbSceneParam._m0[78u].x)) + _2035;
        _2120 = (exp2(_2351 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].y)) * _2325.y) / cbSceneParam._m0[78u].y)) + _2036;
        _2122 = (exp2(_2351 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2335 * cbSceneParam._m0[78u].z)) * _2325.z) / cbSceneParam._m0[78u].z)) + _2037;
        _2124 = _2334 * _2038;
    }
    else
    {
        _2118 = _2035;
        _2120 = _2036;
        _2122 = _2037;
        _2124 = _2038;
    }
    float _2136 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2137 = _2136 == 3.0;
    float _2139 = log2(_2124);
    float _2146 = exp2(_2139 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    float _2147 = exp2(_2139 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)));
    float _2148 = exp2(_2139 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)));
    float _2157 = (_2136 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2157 * (_2137 ? _2146 : (_2146 + (cbSceneParam._m0[72u].w * _2118)));
    SV_Target.y = _2157 * (_2137 ? _2147 : (_2147 + (cbSceneParam._m0[72u].w * _2120)));
    SV_Target.z = _2157 * (_2137 ? _2148 : (_2148 + (cbSceneParam._m0[72u].w * _2122)));
    SV_Target.w = cbInstanceData._m0[_2010].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2010].w;
}


