#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _343 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _379 = cbMtdParam._m0[21u].w + _265;
    float _380 = cbMtdParam._m0[22u].x + _266;
    float _381 = cbMtdParam._m0[22u].y + _267;
    float _395 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_194, _195, _196));
    float _396 = (-0.0) - dot(vec3(_379, _380, _381), vec3(_208, _209, _210));
    float _397 = (-0.0) - dot(vec3(_379, _380, _381), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _404 = _401 * _397;
    float _405 = (_401 * _395) + ((cbMtdParam._m0[19u].w * _283) * ((_343.x * 2.0) + (-1.0)));
    float _406 = (_401 * _396) + ((cbMtdParam._m0[20u].x * _283) * ((_343.y * 2.0) + (-1.0)));
    float _407 = _405 * cbMtdParam._m0[18u].z;
    float _408 = _406 * cbMtdParam._m0[18u].y;
    float _409 = fract(TEXCOORD.x);
    float _410 = fract(TEXCOORD.y);
    float _416;
    if (_407 > 0.0)
    {
        _416 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _416 = frontier_phi_3_2_ladder;
    }
    float _424;
    if (_408 > 0.0)
    {
        _424 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _424 = frontier_phi_7_6_ladder;
    }
    bool _426 = _404 > 0.0;
    float _428 = _426 ? (cbMtdParam._m0[15u].x / _404) : 5000.0;
    float _429 = isnan(_424) ? _416 : (isnan(_416) ? _424 : min(_416, _424));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _435 = _409 + (-0.5);
    float _438 = _410 + (-0.5);
    float _441 = ((_430 * _404) + _434) / _434;
    vec4 _465 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_435 + (_430 * _407)) / _441) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_438 + (_430 * _408)) / _441) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _478 = (_465.x * _283) * cbMtdParam._m0[9u].x;
    float _479 = (_465.y * _283) * cbMtdParam._m0[9u].y;
    float _480 = (_465.z * _283) * cbMtdParam._m0[9u].z;
    float _498 = _405 * cbMtdParam._m0[20u].z;
    float _499 = _406 * cbMtdParam._m0[20u].y;
    bool _500 = _498 > 0.0;
    float _505;
    if (_500)
    {
        _505 = (1.0 - _409) / _498;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _409) / _498;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _505 = frontier_phi_11_10_ladder;
    }
    bool _507 = _499 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _410) / _499;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _410) / _499;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _512 = frontier_phi_15_14_ladder;
    }
    float _515 = _426 ? (cbMtdParam._m0[16u].x / _404) : 5000.0;
    float _516 = isnan(_512) ? _505 : (isnan(_505) ? _512 : min(_505, _512));
    float _517 = isnan(_515) ? _516 : (isnan(_516) ? _515 : min(_516, _515));
    float _521 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _525 = ((_517 * _404) + _521) / _521;
    float _530 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _532 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _548 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_435 + (_517 * _498)) / _525) + 0.5) + _530) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_438 + (_517 * _499)) / _525) + 0.5) + _532) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _563;
    if (_500)
    {
        _563 = (1.0 - _409) / _498;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _409) / _498;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _563 = frontier_phi_19_18_ladder;
    }
    float _569;
    if (_507)
    {
        _569 = (1.0 - _410) / _499;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _410) / _499;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _569 = frontier_phi_23_22_ladder;
    }
    float _571 = isnan(_569) ? _563 : (isnan(_563) ? _569 : min(_563, _569));
    float _572 = isnan(_515) ? _571 : (isnan(_571) ? _515 : min(_571, _515));
    float _579 = ((_572 * _404) + _521) / _521;
    vec4 _600 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_435 + (_572 * _498)) / _579) + 0.5) + _530) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_438 + (_572 * _499)) / _579) + 0.5) + _532) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    vec4 _626 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _630 = _626.z;
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3277 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))));
    float _643 = fma(_640, _201, fma(_634, _208, _633 * _194));
    float _646 = fma(_640, _202, fma(_634, _209, _633 * _195));
    float _649 = fma(_640, _203, fma(_634, _210, _633 * _196));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3288 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _657 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3310 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3321 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _680 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _681 = _265 * _680;
    float _682 = _266 * _680;
    float _683 = _267 * _680;
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _713 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _716 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _729 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3332 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
    float _3343 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _755 = _752.x * TEXCOORD.z;
    float _756 = dot(vec3(_654, _655, _656), vec3(_681, _682, _683));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _654) - _681;
    float _764 = (_759 * _655) - _682;
    float _765 = (_759 * _656) - _683;
    float _769 = abs(dot(vec3(_681, _682, _683), vec3(_654, _655, _656)));
    float _3365 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_657);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _856 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _860 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _654;
        float _884 = _820 + _655;
        float _885 = _824 + _656;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_654, _655, _656), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3413 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_654, _655, _656), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3446 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_654, _655, _656), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3457 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3468 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3479 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1170 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1174 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1197 = _816 + _654;
        float _1198 = _820 + _655;
        float _1199 = _824 + _656;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_654, _655, _656), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3542 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_654, _655, _656), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3575 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_654, _655, _656), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3608 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _763 * 0.5;
    float _1504 = _764 * 0.5;
    float _1505 = _765 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _657);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1634 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1637 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1665 = frontier_phi_38_36_ladder;
        }
        float _2034;
        if (_1634 > 0.0)
        {
            _2034 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2034 = frontier_phi_47_43_ladder;
        }
        float _2350;
        if (_1637 > 0.0)
        {
            _2350 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2350 = frontier_phi_61_54_ladder;
        }
        float _2352 = isnan(_2034) ? _1665 : (isnan(_1665) ? _2034 : min(_1665, _2034));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1631) + _1620;
        float _2358 = (_2353 * _1634) + _1624;
        float _2359 = (_2353 * _1637) + _1628;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_37_61_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_37_61_ladder_2;
        _1655 = frontier_phi_37_61_ladder_1;
        _1657 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1572);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _657);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1728 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1731 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _2039;
        if (_1725 > 0.0)
        {
            _2039 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2039 = frontier_phi_49_45_ladder;
        }
        float _2376;
        if (_1728 > 0.0)
        {
            _2376 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2376 = frontier_phi_63_56_ladder;
        }
        float _2545;
        if (_1731 > 0.0)
        {
            _2545 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2545 = frontier_phi_77_72_ladder;
        }
        float _2547 = isnan(_2376) ? _2039 : (isnan(_2039) ? _2376 : min(_2039, _2376));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _1725) + _1714;
        float _2553 = (_2548 * _1728) + _1718;
        float _2554 = (_2548 * _1731) + _1722;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2555;
        float _2558 = _2555 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2554 > _2558) || ((_2554 < _2556) || ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 < _2556) || (_2552 > _2558))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2554, cbModelParam._m0[17u].z, fma(_2553, cbModelParam._m0[17u].y, _2552 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2554, cbModelParam._m0[18u].z, fma(_2553, cbModelParam._m0[18u].y, _2552 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2554, cbModelParam._m0[19u].z, fma(_2553, cbModelParam._m0[19u].y, _2552 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_46_77_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_46_77_ladder_2;
        _1752 = frontier_phi_46_77_ladder_1;
        _1754 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1662);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1766 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1767 = _1766 * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1768 = _1766 * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1769 = _1766 * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    vec4 _1786 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_689, _690));
    float _1788 = _1786.w;
    float _1800 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1788);
    float _1801 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1788);
    float _1802 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1788);
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1814 = _755 + (-1.0);
    float _1817 = (cbLight._m0[_1809].x * _1814) + 1.0;
    float _1818 = (cbLight._m0[_1809].y * _1814) + 1.0;
    uint _1819 = _1808 + 5u;
    float _1825 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1829 = _1808 + 4u;
    float _1838 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1842 = _1808 | 1u;
    float _1853 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_654, _655, _656));
    float _1856 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_654, _655, _656));
    float _3744 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _3755 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1861 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1863 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.3183098733425140380859375;
    float _1870 = ((cbLight._m0[_1819].x * _1825) * _1863) + (((cbLight._m0[_1829].x * _1800) * _1838) * _1861);
    float _1871 = ((_1825 * cbLight._m0[_1819].y) * _1863) + (((cbLight._m0[_1829].y * _1801) * _1838) * _1861);
    float _1872 = ((_1825 * cbLight._m0[_1819].z) * _1863) + (((cbLight._m0[_1829].z * _1802) * _1838) * _1861);
    uint _1874 = _1808 + 8u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _657) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1808].x + _681;
    float _1890 = cbLight._m0[_1808].y + _682;
    float _1891 = cbLight._m0[_1808].z + _683;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1808].xyz));
    float _3766 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1903 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1904 = dot(vec3(_654, _655, _656), vec3(_1896, _1897, _1898));
    float _3788 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1896, _1897, _1898));
    float _3799 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1888 * _1888;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1928 = 1.0 - _1888;
    float _1939 = (0.5 / (((_1903 * ((_1902 * _1928) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _1928) + _1888) * _1902))) * _1902;
    float _3810 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    uint _1955 = _1808 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _657) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1842].x + _681;
    float _1969 = cbLight._m0[_1842].y + _682;
    float _1970 = cbLight._m0[_1842].z + _683;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_1842].xyz));
    float _3821 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1982 = dot(vec3(_654, _655, _656), vec3(_1975, _1976, _1977));
    float _3832 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1975, _1976, _1977));
    float _3843 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1967;
    float _2014 = (0.5 / (((_1903 * ((_1981 * _2004) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2004) + _1967) * _1981))) * _1981;
    float _3854 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2026 = (((_2003 * cbLight._m0[_1955].x) * _2016) * _1825) + ((((cbLight._m0[_1874].x * _1800) * _1927) * _1941) * _1838);
    float _2027 = (((_2003 * cbLight._m0[_1955].y) * _2016) * _1825) + ((((cbLight._m0[_1874].y * _1801) * _1927) * _1941) * _1838);
    float _2028 = (((_2003 * cbLight._m0[_1955].z) * _2016) * _1825) + ((((cbLight._m0[_1874].z * _1802) * _1927) * _1941) * _1838);
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    if (_1806.y == 0u)
    {
        float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2083;
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2083;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2083;
        uvec4 _2098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2099 = _2098.x;
        uint _2110 = uint((float(_2098.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2099))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2099)));
        float _2120 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2121 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        uint _2124 = uint(isnan(14.0) ? _2121 : (isnan(_2121) ? 14.0 : min(_2121, 14.0)));
        uvec4 _2129 = texelFetch(g_lightClusterGridBuffer, int(((_2124 << 2u) + (_2110 << 6u)) >> 2u));
        uint _2130 = _2129.x;
        uint _2131 = _2098.z;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        if (((((1u << ((_2131 >> 4u) & 15u)) + 4294967295u) & _2130) == 0u) || ((_2131 & 240u) == 0u))
        {
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
        }
        else
        {
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            uint _2419 = 0u;
            uint _2428;
            bool _2429;
            for (;;)
            {
                _2428 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                _2429 = _2428 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2429)
                {
                    frontier_phi_74_pred = _2416;
                    frontier_phi_74_pred_1 = _2415;
                    frontier_phi_74_pred_2 = _2414;
                    frontier_phi_74_pred_3 = _2413;
                    frontier_phi_74_pred_4 = _2417;
                    frontier_phi_74_pred_5 = _2418;
                }
                else
                {
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    uint _2594;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2428;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    for (;;)
                    {
                        uint _2598 = uint(findLSB(_2594)) + (_2419 << 5u);
                        uint _2595 = (_2594 + 4294967295u) & _2594;
                        uint _2600 = _2598 * 48u;
                        vec4 _2614 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2600)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2600 + 3u)).x));
                        uint _2620 = (_2598 * 48u) + 4u;
                        vec4 _2633 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2639 = (_2598 * 48u) + 8u;
                        vec3 _2650 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x));
                        float _2654 = _2614.x - _2084;
                        float _2655 = _2614.y - _2085;
                        float _2656 = _2614.z - _2086;
                        float _2657 = dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656));
                        float _2660 = inversesqrt(_2657);
                        float _2661 = _2660 * _2654;
                        float _2662 = _2660 * _2655;
                        float _2663 = _2660 * _2656;
                        float _2664 = dot(vec3(_710, _713, _716), vec3(_2661, _2662, _2663));
                        float _2669 = 1.0 - (_2657 * _2614.w);
                        float _3875 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2671 = sqrt(_2657) * _2633.w;
                        float _2674 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                        float _2675 = _2674 * _2674;
                        float _2678 = ((1.0 - _2675) * _2664) + _2675;
                        float _2681 = _2671 * _2671;
                        float _2685 = ((isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))) * _2670) / ((_2681 * 0.699999988079071044921875) + 1.0);
                        float _2689 = (-0.0) - _2084;
                        float _2690 = (-0.0) - _2085;
                        float _2691 = (-0.0) - _2086;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2696 = _2695 * _2689;
                        float _2697 = _2695 * _2690;
                        float _2698 = _2695 * _2691;
                        float _2706 = exp2(log2(1.0 / ((_2681 * 3.5) + 5.0)) * 0.25);
                        float _2707 = 1.0 - _771;
                        float _2714 = sqrt(1.0 - ((1.0 - (_2707 * _2707)) * (1.0 - (_2706 * _2706))));
                        float _2715 = _2714 * _2714;
                        float _2716 = _2715 * _2715;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2727 = dot(vec3(_710, _713, _716), vec3(_2696, _2697, _2698));
                        float _3891 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2731 = dot(vec3(_710, _713, _716), vec3(_2723 * _2717, _2723 * _2718, _2723 * _2719));
                        float _3902 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                        float _2738 = ((_2734 * _2734) * (_2716 + (-1.0))) + 1.0;
                        float _2739 = _2674 * _2715;
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2664) + _2740;
                        float _3913 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                        float _2745 = 1.0 - _2715;
                        float _2755 = (0.5 / (((_2744 * ((_2730 * _2745) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2744 * _2745) + _2715) * _2730))) * _2744;
                        float _3924 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2766 = (((_2716 * 3.1415927410125732421875) * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) / ((_2738 * _2738) * ((_2681 * 2.1991131305694580078125) + 3.141590118408203125))) * _2670;
                        _2497 = (_2685 * _2633.x) + _2591;
                        _2498 = (_2685 * _2633.y) + _2592;
                        _2499 = (_2685 * _2633.z) + _2593;
                        _2494 = (_2766 * _2650.x) + _2588;
                        _2495 = (_2766 * _2650.y) + _2589;
                        _2496 = (_2766 * _2650.z) + _2590;
                        if (_2595 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2595;
                        }
                    }
                    frontier_phi_74_pred = _2497;
                    frontier_phi_74_pred_1 = _2496;
                    frontier_phi_74_pred_2 = _2495;
                    frontier_phi_74_pred_3 = _2494;
                    frontier_phi_74_pred_4 = _2498;
                    frontier_phi_74_pred_5 = _2499;
                }
                _2244 = frontier_phi_74_pred;
                _2242 = frontier_phi_74_pred_1;
                _2240 = frontier_phi_74_pred_2;
                _2238 = frontier_phi_74_pred_3;
                _2246 = frontier_phi_74_pred_4;
                _2248 = frontier_phi_74_pred_5;
                uint _2420 = _2419 + 1u;
                if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2413 = _2238;
                    _2414 = _2240;
                    _2415 = _2242;
                    _2416 = _2244;
                    _2417 = _2246;
                    _2418 = _2248;
                    _2419 = _2420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
        }
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.z;
        uint _2254 = (_2252 >> 8u) & 15u;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((4294967295u << _2254) & _2130) == 0u)
        {
            _2381 = _2237;
            _2383 = _2239;
            _2385 = _2241;
            _2387 = _2243;
            _2389 = _2245;
            _2391 = _2247;
        }
        else
        {
            float _2406 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _2407 = _2406 * _2084;
            float _2408 = _2406 * _2085;
            float _2409 = _2406 * _2086;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2254 < ((_2252 >> 12u) & 15u))
            {
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2571 = _2237;
                float _2572 = _2239;
                float _2573 = _2241;
                float _2574 = _2243;
                float _2575 = _2245;
                float _2576 = _2247;
                uint _2577 = _2254;
                uint _2586;
                bool _2587;
                for (;;)
                {
                    _2586 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2577 << 2u)) >> 2u)).x;
                    _2587 = _2586 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2587)
                    {
                        frontier_phi_83_pred = _2574;
                        frontier_phi_83_pred_1 = _2573;
                        frontier_phi_83_pred_2 = _2572;
                        frontier_phi_83_pred_3 = _2571;
                        frontier_phi_83_pred_4 = _2576;
                        frontier_phi_83_pred_5 = _2575;
                    }
                    else
                    {
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _2805 = _2571;
                        float _2806 = _2572;
                        float _2807 = _2573;
                        float _2808 = _2574;
                        float _2809 = _2575;
                        float _2810 = _2576;
                        uint _2811 = _2586;
                        uint _2812;
                        vec4 _2837;
                        float _2838;
                        vec4 _2853;
                        vec3 _2865;
                        vec4 _2880;
                        vec4 _2895;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2822 = ((_2577 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2811));
                            _2812 = (_2811 + 4294967295u) & _2811;
                            uint _2824 = _2822 * 40u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2838 = _2837.w;
                            uint _2840 = (_2822 * 40u) + 4u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2822 * 40u) + 8u;
                            _2865 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x));
                            uint _2867 = (_2822 * 40u) + 16u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2822 * 40u) + 20u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2822 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2822 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_2086, _2929.z, fma(_2085, _2929.y, _2929.x * _2084)) + _2929.w;
                            _2942 = !((fma(_2086, _2910.z, fma(_2085, _2910.y, _2910.x * _2084)) + _2910.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2837.x - _2084;
                                float _2970 = _2837.y - _2085;
                                float _2971 = _2837.z - _2086;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2838 * _2838));
                                float _3935 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                                float _2987 = sqrt(_2972) * _2853.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2993 = ((1.0 - _2990) * dot(vec3(_2976, _2977, _2978), vec3(_710, _713, _716))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_2086, _2880.z, fma(_2085, _2880.y, _2880.x * _2084)) + _2880.w) / _2941;
                                float _3001 = (fma(_2086, _2895.z, fma(_2085, _2895.y, _2895.x * _2084)) + _2895.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _3951 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3019 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                                float _3020 = 1.0 - _771;
                                float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                                float _3028 = _3027 * _3027;
                                float _3029 = _3028 * _3028;
                                float _3030 = _2976 - _2407;
                                float _3031 = _2977 - _2408;
                                float _3032 = _2978 - _2409;
                                float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                                float _3040 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2407, (-0.0) - _2408, (-0.0) - _2409));
                                float _3962 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _3044 = dot(vec3(_710, _713, _716), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                                float _3973 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                                float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                                float _3052 = _2989 * _3028;
                                float _3053 = _3052 * _3052;
                                float _3059 = ((1.0 - _3053) * dot(vec3(_710, _713, _716), vec3(_2976, _2977, _2978))) + _3053;
                                float _3984 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _3061 = 1.0 - _3028;
                                float _3071 = (0.5 / (((_3060 * ((_3043 * _3061) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3028) * _3043))) * _3060;
                                float _3995 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3081 = (_3006 * _2983) * (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) / ((_3051 * _3051) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3007 * _2853.x;
                                frontier_phi_89_pred_1 = _3081 * _2865.z;
                                frontier_phi_89_pred_2 = _3081 * _2865.y;
                                frontier_phi_89_pred_3 = _3081 * _2865.x;
                                frontier_phi_89_pred_4 = _3007 * _2853.z;
                                frontier_phi_89_pred_5 = _3007 * _2853.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3088 = frontier_phi_89_pred;
                            _3087 = frontier_phi_89_pred_1;
                            _3086 = frontier_phi_89_pred_2;
                            _3085 = frontier_phi_89_pred_3;
                            _3090 = frontier_phi_89_pred_4;
                            _3089 = frontier_phi_89_pred_5;
                            _2795 = _3088 + _2808;
                            _2796 = _3089 + _2809;
                            _2797 = _3090 + _2810;
                            _2792 = _3085 + _2805;
                            _2793 = _3086 + _2806;
                            _2794 = _3087 + _2807;
                            if (_2812 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2812;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2795;
                        frontier_phi_83_pred_1 = _2794;
                        frontier_phi_83_pred_2 = _2793;
                        frontier_phi_83_pred_3 = _2792;
                        frontier_phi_83_pred_4 = _2797;
                        frontier_phi_83_pred_5 = _2796;
                    }
                    _2388 = frontier_phi_83_pred;
                    _2386 = frontier_phi_83_pred_1;
                    _2384 = frontier_phi_83_pred_2;
                    _2382 = frontier_phi_83_pred_3;
                    _2392 = frontier_phi_83_pred_4;
                    _2390 = frontier_phi_83_pred_5;
                    uint _2578 = _2577 + 1u;
                    if (_2578 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2571 = _2382;
                        _2572 = _2384;
                        _2573 = _2386;
                        _2574 = _2388;
                        _2575 = _2390;
                        _2576 = _2392;
                        _2577 = _2578;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2392;
                frontier_phi_65_66_ladder_1 = _2390;
                frontier_phi_65_66_ladder_2 = _2386;
                frontier_phi_65_66_ladder_3 = _2384;
                frontier_phi_65_66_ladder_4 = _2388;
                frontier_phi_65_66_ladder_5 = _2382;
            }
            else
            {
                frontier_phi_65_66_ladder = _2247;
                frontier_phi_65_66_ladder_1 = _2245;
                frontier_phi_65_66_ladder_2 = _2241;
                frontier_phi_65_66_ladder_3 = _2239;
                frontier_phi_65_66_ladder_4 = _2243;
                frontier_phi_65_66_ladder_5 = _2237;
            }
            _2381 = frontier_phi_65_66_ladder_5;
            _2383 = frontier_phi_65_66_ladder_3;
            _2385 = frontier_phi_65_66_ladder_2;
            _2387 = frontier_phi_65_66_ladder_4;
            _2389 = frontier_phi_65_66_ladder_1;
            _2391 = frontier_phi_65_66_ladder;
        }
        float _2396 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2143 = (_2396 * _2387) + _1870;
        _2145 = (_2396 * _2389) + _1871;
        _2147 = (_2396 * _2391) + _1872;
        _2149 = ((_2381 * 0.039999999105930328369140625) * _2396) + _2026;
        _2151 = ((_2383 * 0.039999999105930328369140625) * _2396) + _2027;
        _2153 = ((_2385 * 0.039999999105930328369140625) * _2396) + _2028;
    }
    else
    {
        _2143 = _1870;
        _2145 = _1871;
        _2147 = _1872;
        _2149 = _2026;
        _2151 = _2027;
        _2153 = _2028;
    }
    uint _2159 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _4011 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4022 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4033 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2184 = (((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_2143 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _755))) + ((_2149 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2159].x * ((((((cbMtdParam._m0[10u].x * _283) * _548.x) - _478) * _283) * _602) + _478));
    float _2186 = ((cbInstanceData._m0[_2159].y * ((((((cbMtdParam._m0[10u].y * _283) * _548.y) - _479) * _283) * _602) + _479)) + ((_2151 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2145 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _755)));
    float _2188 = ((cbInstanceData._m0[_2159].z * ((((((cbMtdParam._m0[10u].z * _283) * _548.z) - _480) * _283) * _602) + _480)) + ((_2153 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2147 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _755)));
    uint _2192 = _729 + 6u;
    float _2200 = _689 / cbSceneParam._m0[86u].x;
    float _2201 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2215 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2217 = _2215.x;
    float _2218 = _2215.y;
    float _2219 = _2215.z;
    float _2220 = _2215.w;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2262 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2263 = _2262 / _676;
        float _2274 = _2263 * _265;
        float _2275 = _266 * _2263;
        float _2276 = (-0.0) - _2275;
        float _2277 = _2263 * _267;
        float _2279 = (cbSceneParam._m0[77u].w * _2276) / _2262;
        float _2280 = _2279 + cbSceneParam._m0[79u].w;
        float _2281 = cbSceneParam._m0[79u].w - _2275;
        float _2287 = sqrt(((_2274 * _2274) + (_2275 * _2275)) + (_2277 * _2277));
        float _2290 = (1.0 - (cbSceneParam._m0[77u].w / _2262)) * _2287;
        float _2296 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2298 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2507;
        if (abs((_2276 - _2279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2507 = ((((_2280 > 0.0) ? exp2(_2296 * _2280) : (2.0 - exp2(_2298 * _2280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2290;
        }
        else
        {
            float _2442 = 1.0 / cbSceneParam._m0[80u].x;
            float _2443 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : max(_2280, _2281));
            float _2444 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : min(_2280, _2281));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            float _2454 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : min(_2444, 0.0));
            _2507 = ((abs(_2287 / _2276) * cbSceneParam._m0[80u].y) * ((((_2453 - _2454) * 2.0) - ((exp2(_2296 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)))) - exp2(_2296 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))))) * _2442)) - ((exp2(_2298 * _2453) - exp2(_2298 * _2454)) * _2442))) + (_2290 * cbSceneParam._m0[80u].z);
        }
        vec4 _2509 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, 1.0), 0.0);
        float _2518 = exp2((_2507 * (-1.44269502162933349609375)) * (1.0 - _2509.w));
        float _2519 = log2(_2518);
        float _2535 = log2(_2220);
        _2300 = (exp2(_2535 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].x)) * _2509.x) / cbSceneParam._m0[78u].x)) + _2217;
        _2302 = (exp2(_2535 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].y)) * _2509.y) / cbSceneParam._m0[78u].y)) + _2218;
        _2304 = (exp2(_2535 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2519 * cbSceneParam._m0[78u].z)) * _2509.z) / cbSceneParam._m0[78u].z)) + _2219;
        _2306 = _2518 * _2220;
    }
    else
    {
        _2300 = _2217;
        _2302 = _2218;
        _2304 = _2219;
        _2306 = _2220;
    }
    float _2318 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2319 = _2318 == 3.0;
    float _2320 = log2(_2306);
    float _2327 = exp2(_2320 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0)));
    float _2328 = exp2(_2320 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)));
    float _2329 = exp2(_2320 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0)));
    float _2338 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2338 * (_2319 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.y = _2338 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.z = _2338 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.w = cbInstanceData._m0[_2192].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2192].w;
}


