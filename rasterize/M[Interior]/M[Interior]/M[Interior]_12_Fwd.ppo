#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _916;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _281 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _316 = cbMtdParam._m0[21u].w + _257;
    float _317 = cbMtdParam._m0[22u].x + _258;
    float _318 = cbMtdParam._m0[22u].y + _259;
    float _332 = (-0.0) - dot(vec3(_316, _317, _318), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _333 = (-0.0) - dot(vec3(_316, _317, _318), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _334 = (-0.0) - dot(vec3(_316, _317, _318), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _341 = _338 * _334;
    float _342 = (_338 * _332) + (((_281.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _343 = (_338 * _333) + (((_281.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _344 = _342 * cbMtdParam._m0[18u].z;
    float _345 = _343 * cbMtdParam._m0[18u].y;
    float _346 = fract(TEXCOORD.x);
    float _347 = fract(TEXCOORD.y);
    float _353;
    if (_344 > 0.0)
    {
        _353 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _353 = frontier_phi_3_2_ladder;
    }
    float _361;
    if (_345 > 0.0)
    {
        _361 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _361 = frontier_phi_7_6_ladder;
    }
    bool _363 = _341 > 0.0;
    float _365 = _363 ? (cbMtdParam._m0[15u].x / _341) : 5000.0;
    float _366 = isnan(_361) ? _353 : (isnan(_353) ? _361 : min(_353, _361));
    float _367 = isnan(_365) ? _366 : (isnan(_366) ? _365 : min(_366, _365));
    float _371 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _372 = _346 + (-0.5);
    float _375 = _347 + (-0.5);
    float _378 = ((_367 * _341) + _371) / _371;
    vec4 _402 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_372 + (_367 * _344)) / _378) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_375 + (_367 * _345)) / _378) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _432 = _342 * cbMtdParam._m0[20u].z;
    float _433 = _343 * cbMtdParam._m0[20u].y;
    bool _434 = _432 > 0.0;
    float _439;
    if (_434)
    {
        _439 = (1.0 - _346) / _432;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _346) / _432;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _439 = frontier_phi_11_10_ladder;
    }
    bool _441 = _433 > 0.0;
    float _446;
    if (_441)
    {
        _446 = (1.0 - _347) / _433;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _347) / _433;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _446 = frontier_phi_15_14_ladder;
    }
    float _449 = _363 ? (cbMtdParam._m0[16u].x / _341) : 5000.0;
    float _450 = isnan(_446) ? _439 : (isnan(_439) ? _446 : min(_439, _446));
    float _451 = isnan(_449) ? _450 : (isnan(_450) ? _449 : min(_450, _449));
    float _455 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _459 = ((_451 * _341) + _455) / _455;
    float _464 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _466 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _482 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_372 + (_451 * _432)) / _459) + 0.5) + _464) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_375 + (_451 * _433)) / _459) + 0.5) + _466) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _494;
    if (_434)
    {
        _494 = (1.0 - _346) / _432;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_432 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _346) / _432;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _494 = frontier_phi_19_18_ladder;
    }
    float _500;
    if (_441)
    {
        _500 = (1.0 - _347) / _433;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _347) / _433;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _500 = frontier_phi_23_22_ladder;
    }
    float _502 = isnan(_500) ? _494 : (isnan(_494) ? _500 : min(_494, _500));
    float _503 = isnan(_449) ? _502 : (isnan(_502) ? _449 : min(_502, _449));
    float _510 = ((_503 * _341) + _455) / _455;
    vec4 _531 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_372 + (_503 * _432)) / _510) + 0.5) + _464) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_375 + (_503 * _433)) / _510) + 0.5) + _466) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _533 = _531.x;
    float _540 = (_533 * ((_482.x * cbMtdParam._m0[10u].x) - _412)) + _412;
    float _541 = (_533 * ((_482.y * cbMtdParam._m0[10u].y) - _413)) + _413;
    float _542 = (_533 * ((_482.z * cbMtdParam._m0[10u].z) - _414)) + _414;
    float _2846 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2857 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2868 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _561 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _566 = _257 * _565;
    float _567 = _258 * _565;
    float _568 = _259 * _565;
    float _574 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _575 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _588 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = (_588 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * cbInstanceData._m0[_591].z;
    float _2879 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0));
    float _2890 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _575));
    float _614 = _611.x * TEXCOORD.z;
    float _615 = (-0.0) - _566;
    float _616 = (-0.0) - _567;
    float _617 = (-0.0) - _568;
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _915;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = (cbModelParam._m0[37u].x * ((((fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _705 = (cbModelParam._m0[37u].y * ((((fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _706 = (((((fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        float _743 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_709.x + (-0.5));
        float _745 = _743 * (_709.y + (-0.5));
        float _746 = _743 * (_709.z + (-0.5));
        float _753 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_716.x + (-0.5));
        float _755 = _753 * (_716.y + (-0.5));
        float _756 = _753 * (_716.z + (-0.5));
        float _763 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_723.x + (-0.5));
        float _765 = _763 * (_723.y + (-0.5));
        float _766 = _763 * (_723.z + (-0.5));
        float _773 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_730.x + (-0.5));
        float _775 = _773 * (_730.y + (-0.5));
        float _776 = _773 * (_730.z + (-0.5));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = _744 * 0.5;
        float _781 = _754 * 0.5;
        float _782 = _764 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _797 = (dot(vec3(0.0), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _2927 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _807 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _2938 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _2949 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * (_809 + 1.0))) + _814) * _777;
        float _824 = _745 * 0.5;
        float _825 = _755 * 0.5;
        float _826 = _765 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(0.0), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _2960 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _2971 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _2982 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (_851 + 1.0))) + _856) * _778;
        float _866 = _746 * 0.5;
        float _867 = _756 * 0.5;
        float _868 = _766 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(0.0), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _2993 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3004 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3015 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0))) * (_893 + 1.0))) + _898) * _779;
        _915 = _746;
        _917 = _745;
        _918 = _744;
        _919 = _756;
        _920 = _755;
        _921 = _754;
        _922 = _766;
        _923 = _765;
        _924 = _764;
        _925 = _779;
        _926 = _778;
        _927 = _777;
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
    }
    else
    {
        _915 = _916;
        _917 = _916;
        _918 = _916;
        _919 = _916;
        _920 = _916;
        _921 = _916;
        _922 = _916;
        _923 = _916;
        _924 = _916;
        _925 = _916;
        _926 = _916;
        _927 = _916;
        _928 = 0.0;
        _929 = 0.0;
        _930 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _984 = (cbModelParam._m0[38u].x * ((((fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _985 = (cbModelParam._m0[38u].y * ((((fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _986 = (((((fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(0.0), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3078 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(0.0), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3111 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(0.0), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3144 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _916;
        _1192 = _916;
        _1193 = _916;
        _1194 = _916;
        _1195 = _916;
        _1196 = _916;
        _1197 = _916;
        _1198 = _916;
        _1199 = _916;
        _1200 = _916;
        _1201 = _916;
        _1202 = _916;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _928)) + _928;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _929)) + _929;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _930)) + _930;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _566 * (-0.5);
    float _1260 = _567 * (-0.5);
    float _1261 = _568 * (-0.5);
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_915, _919, _922, _925));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_917, _920, _923, _926));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_918, _921, _924, _927));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1375 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1379 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1383 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1386 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1389 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1392 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1418;
        if (_1386 > 0.0)
        {
            _1418 = abs((1.0 - _1375) / _1386);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1375 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1418 = frontier_phi_38_36_ladder;
        }
        float _1714;
        if (_1389 > 0.0)
        {
            _1714 = abs((1.0 - _1379) / _1389);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1379 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1714 = frontier_phi_47_43_ladder;
        }
        float _2016;
        if (_1392 > 0.0)
        {
            _2016 = abs((1.0 - _1383) / _1392);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1383 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2016 = frontier_phi_61_54_ladder;
        }
        float _2018 = isnan(_1714) ? _1418 : (isnan(_1418) ? _1714 : min(_1418, _1714));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1386) + _1375;
        float _2024 = (_2019 * _1389) + _1379;
        float _2025 = (_2019 * _1392) + _1383;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2026;
        float _2029 = _2026 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2025 > _2029) || ((_2025 < _2027) || ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 < _2027) || (_2023 > _2029))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_37_61_ladder = _2148.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2148.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2148.x * cbModelParam._m0[1u].y;
        }
        _1408 = frontier_phi_37_61_ladder_2;
        _1410 = frontier_phi_37_61_ladder_1;
        _1412 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1326);
        _1408 = _1396.x * cbModelParam._m0[1u].y;
        _1410 = _1396.y * cbModelParam._m0[1u].y;
        _1412 = _1396.z * cbModelParam._m0[1u].y;
    }
    float _1415 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1467 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1471 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1475 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1478 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1481 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1484 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1719;
        if (_1478 > 0.0)
        {
            _1719 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1719 = frontier_phi_49_45_ladder;
        }
        float _2042;
        if (_1481 > 0.0)
        {
            _2042 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2042 = frontier_phi_63_56_ladder;
        }
        float _2208;
        if (_1484 > 0.0)
        {
            _2208 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2208 = frontier_phi_77_72_ladder;
        }
        float _2210 = isnan(_2042) ? _1719 : (isnan(_1719) ? _2042 : min(_1719, _2042));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1478) + _1467;
        float _2216 = (_2211 * _1481) + _1471;
        float _2217 = (_2211 * _1484) + _1475;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2218;
        float _2221 = _2218 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2217 > _2221) || ((_2217 < _2219) || ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 < _2219) || (_2215 > _2221))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2217, cbModelParam._m0[17u].z, fma(_2216, cbModelParam._m0[17u].y, _2215 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2217, cbModelParam._m0[18u].z, fma(_2216, cbModelParam._m0[18u].y, _2215 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2217, cbModelParam._m0[19u].z, fma(_2216, cbModelParam._m0[19u].y, _2215 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_46_77_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1503 = frontier_phi_46_77_ladder_2;
        _1505 = frontier_phi_46_77_ladder_1;
        _1507 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1415);
        _1503 = _1487.x * cbModelParam._m0[1u].z;
        _1505 = _1487.y * cbModelParam._m0[1u].z;
        _1507 = _1487.z * cbModelParam._m0[1u].z;
    }
    float _1519 = _614 * 0.01200000010430812835693359375;
    float _1521 = _1519 * ((cbModelParam._m0[1u].w * (_1503 - _1408)) + _1408);
    float _1522 = _1519 * ((cbModelParam._m0[1u].w * (_1505 - _1410)) + _1410);
    float _1523 = _1519 * ((cbModelParam._m0[1u].w * (_1507 - _1412)) + _1412);
    float _1526 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, _1521 * cbSceneParam._m0[91u].x));
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_588 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1551 = _614 + (-1.0);
    float _1554 = (cbLight._m0[_1546].x * _1551) + 1.0;
    float _1555 = (cbLight._m0[_1546].y * _1551) + 1.0;
    uint _1556 = _1545 + 5u;
    float _1562 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1566 = _1545 + 4u;
    float _1572 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1576 = _1545 | 1u;
    float _1587 = dot(vec3(cbLight._m0[_1545].xyz), vec3(0.0));
    float _1590 = dot(vec3(cbLight._m0[_1576].xyz), vec3(0.0));
    float _3280 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _3291 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1595 = (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * 0.3183098733425140380859375;
    float _1597 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.3183098733425140380859375;
    float _1604 = ((cbLight._m0[_1556].x * _1562) * _1597) + ((cbLight._m0[_1566].x * _1572) * _1595);
    float _1605 = ((_1562 * cbLight._m0[_1556].y) * _1597) + ((_1572 * cbLight._m0[_1566].y) * _1595);
    float _1606 = ((_1562 * cbLight._m0[_1556].z) * _1597) + ((_1572 * cbLight._m0[_1566].z) * _1595);
    uint _1607 = _1545 + 8u;
    float _1613 = cbLight._m0[_1545].x + _566;
    float _1614 = cbLight._m0[_1545].y + _567;
    float _1615 = cbLight._m0[_1545].z + _568;
    float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
    float _1623 = dot(vec3(0.0), vec3(cbLight._m0[_1545].xyz));
    float _3302 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1626 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _1627 = dot(vec3(0.0), vec3(_566, _567, _568));
    float _3313 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1630 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _1631 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1613 * _1619, _1614 * _1619, _1615 * _1619));
    float _3324 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1642 = (exp2(log2(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1648 = (0.5 / ((_1626 + 9.9999999392252902907785028219223e-09) + _1630)) * _1626;
    float _3335 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1650 = (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.31831014156341552734375;
    uint _1661 = _1545 + 9u;
    float _1667 = cbLight._m0[_1576].x + _566;
    float _1668 = cbLight._m0[_1576].y + _567;
    float _1669 = cbLight._m0[_1576].z + _568;
    float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
    float _1677 = dot(vec3(0.0), vec3(cbLight._m0[_1576].xyz));
    float _3346 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1680 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _1681 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1667 * _1673, _1668 * _1673, _1669 * _1673));
    float _3357 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1690 = (exp2(log2(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1694 = (0.5 / ((_1680 + 9.9999999392252902907785028219223e-09) + _1630)) * _1680;
    float _3368 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1696 = (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.31831014156341552734375;
    float _1706 = (((_1690 * cbLight._m0[_1661].x) * _1696) * _1562) + (((_1642 * cbLight._m0[_1607].x) * _1650) * _1572);
    float _1707 = (((_1690 * cbLight._m0[_1661].y) * _1696) * _1562) + (((_1642 * cbLight._m0[_1607].y) * _1650) * _1572);
    float _1708 = (((_1690 * cbLight._m0[_1661].z) * _1696) * _1562) + (((_1642 * cbLight._m0[_1607].z) * _1650) * _1572);
    float _1824;
    float _1826;
    float _1828;
    float _1830;
    float _1832;
    float _1834;
    if (_1543.y == 0u)
    {
        float _1764 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1764;
        float _1766 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1764;
        float _1767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1764;
        uvec4 _1779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1780 = _1779.x;
        uint _1791 = uint((float(_1779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _575) / _1780))) + floor(float(uint(cbSceneParam._m0[85u].x * _574) / _1780)));
        float _1801 = (log2(_1767 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1802 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        uint _1805 = uint(isnan(14.0) ? _1802 : (isnan(_1802) ? 14.0 : min(_1802, 14.0)));
        uvec4 _1810 = texelFetch(g_lightClusterGridBuffer, int(((_1805 << 2u) + (_1791 << 6u)) >> 2u));
        uint _1811 = _1810.x;
        uint _1812 = _1779.z;
        float _1902;
        float _1904;
        float _1906;
        float _1908;
        float _1910;
        float _1912;
        if (((((1u << ((_1812 >> 4u) & 15u)) + 4294967295u) & _1811) == 0u) || ((_1812 & 240u) == 0u))
        {
            _1902 = 0.0;
            _1904 = 0.0;
            _1906 = 0.0;
            _1908 = 0.0;
            _1910 = 0.0;
            _1912 = 0.0;
        }
        else
        {
            float _1903;
            float _1905;
            float _1907;
            float _1909;
            float _1911;
            float _1913;
            float _2076 = 0.0;
            float _2077 = 0.0;
            float _2078 = 0.0;
            float _2079 = 0.0;
            float _2080 = 0.0;
            float _2081 = 0.0;
            uint _2082 = 0u;
            uint _2091;
            bool _2092;
            for (;;)
            {
                _2091 = texelFetch(g_lightClassification, int((((_1805 << 5u) + (_1791 << 9u)) + (_2082 << 2u)) >> 2u)).x;
                _2092 = _2091 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2092)
                {
                    frontier_phi_74_pred = _2079;
                    frontier_phi_74_pred_1 = _2078;
                    frontier_phi_74_pred_2 = _2077;
                    frontier_phi_74_pred_3 = _2076;
                    frontier_phi_74_pred_4 = _2080;
                    frontier_phi_74_pred_5 = _2081;
                }
                else
                {
                    float _2251;
                    float _2252;
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    uint _2257;
                    _2251 = _2076;
                    _2252 = _2077;
                    _2253 = _2078;
                    _2254 = _2079;
                    _2255 = _2080;
                    _2256 = _2081;
                    _2257 = _2091;
                    float _2157;
                    float _2158;
                    float _2159;
                    float _2160;
                    float _2161;
                    float _2162;
                    for (;;)
                    {
                        uint _2261 = uint(findLSB(_2257)) + (_2082 << 5u);
                        uint _2258 = (_2257 + 4294967295u) & _2257;
                        uint _2263 = _2261 * 48u;
                        vec4 _2277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2263)).x, texelFetch(g_PointLightRenderingBuffer, int(_2263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2263 + 3u)).x));
                        uint _2283 = (_2261 * 48u) + 4u;
                        vec4 _2296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2283)).x, texelFetch(g_PointLightRenderingBuffer, int(_2283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2283 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2283 + 3u)).x));
                        uint _2302 = (_2261 * 48u) + 8u;
                        vec3 _2313 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2302)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2302 + 2u)).x));
                        float _2317 = _2277.x - _1765;
                        float _2318 = _2277.y - _1766;
                        float _2319 = _2277.z - _1767;
                        float _2320 = dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319));
                        float _2323 = inversesqrt(_2320);
                        float _2332 = 1.0 - (_2320 * _2277.w);
                        float _3389 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
                        float _2333 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
                        float _2334 = sqrt(_2320) * _2296.w;
                        float _2337 = 1.39999997615814208984375 / (_2334 + 1.39999997615814208984375);
                        float _2338 = _2337 * _2337;
                        float _2341 = ((1.0 - _2338) * dot(vec3(0.0), vec3(_2323 * _2317, _2323 * _2318, _2323 * _2319))) + _2338;
                        float _2344 = _2334 * _2334;
                        float _2348 = ((isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0))) * _2333) / ((_2344 * 0.699999988079071044921875) + 1.0);
                        float _2352 = (-0.0) - _1765;
                        float _2353 = (-0.0) - _1766;
                        float _2354 = (-0.0) - _1767;
                        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
                        float _2362 = dot(vec3(0.0), vec3(_2358 * _2352, _2358 * _2353, _2358 * _2354));
                        float _3405 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
                        float _3416 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
                        float _2366 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
                        float _2370 = (0.5 / (((isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) + 9.9999999392252902907785028219223e-09) + _2366)) * _2366;
                        float _3427 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
                        float _2379 = (((isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * 3.1415927410125732421875) / ((_2344 * 2.1991131305694580078125) + 3.141590118408203125)) * _2333;
                        _2160 = (_2348 * _2296.x) + _2254;
                        _2161 = (_2348 * _2296.y) + _2255;
                        _2162 = (_2348 * _2296.z) + _2256;
                        _2157 = (_2379 * _2313.x) + _2251;
                        _2158 = (_2379 * _2313.y) + _2252;
                        _2159 = (_2379 * _2313.z) + _2253;
                        if (_2258 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2251 = _2157;
                            _2252 = _2158;
                            _2253 = _2159;
                            _2254 = _2160;
                            _2255 = _2161;
                            _2256 = _2162;
                            _2257 = _2258;
                        }
                    }
                    frontier_phi_74_pred = _2160;
                    frontier_phi_74_pred_1 = _2159;
                    frontier_phi_74_pred_2 = _2158;
                    frontier_phi_74_pred_3 = _2157;
                    frontier_phi_74_pred_4 = _2161;
                    frontier_phi_74_pred_5 = _2162;
                }
                _1909 = frontier_phi_74_pred;
                _1907 = frontier_phi_74_pred_1;
                _1905 = frontier_phi_74_pred_2;
                _1903 = frontier_phi_74_pred_3;
                _1911 = frontier_phi_74_pred_4;
                _1913 = frontier_phi_74_pred_5;
                uint _2083 = _2082 + 1u;
                if (_2083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2076 = _1903;
                    _2077 = _1905;
                    _2078 = _1907;
                    _2079 = _1909;
                    _2080 = _1911;
                    _2081 = _1913;
                    _2082 = _2083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1902 = _1903;
            _1904 = _1905;
            _1906 = _1907;
            _1908 = _1909;
            _1910 = _1911;
            _1912 = _1913;
        }
        uvec4 _1916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1917 = _1916.z;
        uint _1919 = (_1917 >> 8u) & 15u;
        float _2047;
        float _2049;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        if (((4294967295u << _1919) & _1811) == 0u)
        {
            _2047 = _1902;
            _2049 = _1904;
            _2051 = _1906;
            _2053 = _1908;
            _2055 = _1910;
            _2057 = _1912;
        }
        else
        {
            float _2072 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_1919 < ((_1917 >> 12u) & 15u))
            {
                float _2048;
                float _2050;
                float _2052;
                float _2054;
                float _2056;
                float _2058;
                float _2234 = _1902;
                float _2235 = _1904;
                float _2236 = _1906;
                float _2237 = _1908;
                float _2238 = _1910;
                float _2239 = _1912;
                uint _2240 = _1919;
                uint _2249;
                bool _2250;
                for (;;)
                {
                    _2249 = texelFetch(g_lightClassification, int((((_1805 << 5u) + (_1791 << 9u)) + (_2240 << 2u)) >> 2u)).x;
                    _2250 = _2249 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2250)
                    {
                        frontier_phi_83_pred = _2237;
                        frontier_phi_83_pred_1 = _2236;
                        frontier_phi_83_pred_2 = _2235;
                        frontier_phi_83_pred_3 = _2234;
                        frontier_phi_83_pred_4 = _2239;
                        frontier_phi_83_pred_5 = _2238;
                    }
                    else
                    {
                        float _2405;
                        float _2406;
                        float _2407;
                        float _2408;
                        float _2409;
                        float _2410;
                        float _2654;
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2418 = _2234;
                        float _2419 = _2235;
                        float _2420 = _2236;
                        float _2421 = _2237;
                        float _2422 = _2238;
                        float _2423 = _2239;
                        uint _2424 = _2249;
                        uint _2425;
                        vec4 _2450;
                        float _2451;
                        vec4 _2466;
                        vec3 _2478;
                        vec4 _2493;
                        vec4 _2508;
                        float _2554;
                        bool _2555;
                        for (;;)
                        {
                            uint _2435 = ((_2240 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2424));
                            _2425 = (_2424 + 4294967295u) & _2424;
                            uint _2437 = _2435 * 40u;
                            _2450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 3u)).x));
                            _2451 = _2450.w;
                            uint _2453 = (_2435 * 40u) + 4u;
                            _2466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 3u)).x));
                            uint _2468 = (_2435 * 40u) + 8u;
                            _2478 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 2u)).x));
                            uint _2480 = (_2435 * 40u) + 16u;
                            _2493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 3u)).x));
                            uint _2495 = (_2435 * 40u) + 20u;
                            _2508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 3u)).x));
                            uint _2510 = (_2435 * 40u) + 24u;
                            vec4 _2523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 3u)).x));
                            uint _2529 = (_2435 * 40u) + 28u;
                            vec4 _2542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 3u)).x));
                            _2554 = fma(_1767, _2542.z, fma(_1766, _2542.y, _2542.x * _1765)) + _2542.w;
                            _2555 = !((fma(_1767, _2523.z, fma(_1766, _2523.y, _2523.x * _1765)) + _2523.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2555)
                            {
                                float _2582 = _2450.x - _1765;
                                float _2583 = _2450.y - _1766;
                                float _2584 = _2450.z - _1767;
                                float _2585 = dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584));
                                float _2588 = inversesqrt(_2585);
                                float _2589 = _2588 * _2582;
                                float _2590 = _2588 * _2583;
                                float _2591 = _2588 * _2584;
                                float _2595 = 1.0 - (_2585 / (_2451 * _2451));
                                float _3438 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                                float _2596 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
                                float _2600 = sqrt(_2585) * _2466.w;
                                float _2602 = 1.39999997615814208984375 / (_2600 + 1.39999997615814208984375);
                                float _2603 = _2602 * _2602;
                                float _2604 = 1.0 - _2603;
                                float _2606 = (_2604 * dot(vec3(_2589, _2590, _2591), vec3(0.0))) + _2603;
                                float _2609 = _2600 * _2600;
                                float _2613 = (fma(_1767, _2493.z, fma(_1766, _2493.y, _2493.x * _1765)) + _2493.w) / _2554;
                                float _2614 = (fma(_1767, _2508.z, fma(_1766, _2508.y, _2508.x * _1765)) + _2508.w) / _2554;
                                float _2618 = 1.0 - dot(vec2(_2613, _2614), vec2(_2613, _2614));
                                float _3454 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                                float _2619 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
                                float _2620 = _2619 * (((isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))) * _2596) / ((_2609 * 0.699999988079071044921875) + 1.0));
                                float _2630 = dot(vec3(0.0), vec3((-0.0) - (_1765 * _2072), (-0.0) - (_1766 * _2072), (-0.0) - (_1767 * _2072)));
                                float _3465 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
                                float _2638 = (_2604 * dot(vec3(0.0), vec3(_2589, _2590, _2591))) + _2603;
                                float _3476 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                                float _2639 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
                                float _2643 = (0.5 / (((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) + 9.9999999392252902907785028219223e-09) + _2639)) * _2639;
                                float _3487 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                                float _2650 = (_2619 * _2596) * (((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 3.1415927410125732421875) / ((_2609 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2620 * _2466.x;
                                frontier_phi_89_pred_1 = _2650 * _2478.z;
                                frontier_phi_89_pred_2 = _2650 * _2478.y;
                                frontier_phi_89_pred_3 = _2650 * _2478.x;
                                frontier_phi_89_pred_4 = _2620 * _2466.z;
                                frontier_phi_89_pred_5 = _2620 * _2466.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2657 = frontier_phi_89_pred;
                            _2656 = frontier_phi_89_pred_1;
                            _2655 = frontier_phi_89_pred_2;
                            _2654 = frontier_phi_89_pred_3;
                            _2659 = frontier_phi_89_pred_4;
                            _2658 = frontier_phi_89_pred_5;
                            _2408 = _2657 + _2421;
                            _2409 = _2658 + _2422;
                            _2410 = _2659 + _2423;
                            _2405 = _2654 + _2418;
                            _2406 = _2655 + _2419;
                            _2407 = _2656 + _2420;
                            if (_2425 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2418 = _2405;
                                _2419 = _2406;
                                _2420 = _2407;
                                _2421 = _2408;
                                _2422 = _2409;
                                _2423 = _2410;
                                _2424 = _2425;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2408;
                        frontier_phi_83_pred_1 = _2407;
                        frontier_phi_83_pred_2 = _2406;
                        frontier_phi_83_pred_3 = _2405;
                        frontier_phi_83_pred_4 = _2410;
                        frontier_phi_83_pred_5 = _2409;
                    }
                    _2054 = frontier_phi_83_pred;
                    _2052 = frontier_phi_83_pred_1;
                    _2050 = frontier_phi_83_pred_2;
                    _2048 = frontier_phi_83_pred_3;
                    _2058 = frontier_phi_83_pred_4;
                    _2056 = frontier_phi_83_pred_5;
                    uint _2241 = _2240 + 1u;
                    if (_2241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2234 = _2048;
                        _2235 = _2050;
                        _2236 = _2052;
                        _2237 = _2054;
                        _2238 = _2056;
                        _2239 = _2058;
                        _2240 = _2241;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2058;
                frontier_phi_65_66_ladder_1 = _2056;
                frontier_phi_65_66_ladder_2 = _2052;
                frontier_phi_65_66_ladder_3 = _2050;
                frontier_phi_65_66_ladder_4 = _2054;
                frontier_phi_65_66_ladder_5 = _2048;
            }
            else
            {
                frontier_phi_65_66_ladder = _1912;
                frontier_phi_65_66_ladder_1 = _1910;
                frontier_phi_65_66_ladder_2 = _1906;
                frontier_phi_65_66_ladder_3 = _1904;
                frontier_phi_65_66_ladder_4 = _1908;
                frontier_phi_65_66_ladder_5 = _1902;
            }
            _2047 = frontier_phi_65_66_ladder_5;
            _2049 = frontier_phi_65_66_ladder_3;
            _2051 = frontier_phi_65_66_ladder_2;
            _2053 = frontier_phi_65_66_ladder_4;
            _2055 = frontier_phi_65_66_ladder_1;
            _2057 = frontier_phi_65_66_ladder;
        }
        float _2062 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _1824 = (_2062 * _2053) + _1604;
        _1826 = (_2062 * _2055) + _1605;
        _1828 = (_2062 * _2057) + _1606;
        _1830 = ((_2047 * 0.039999999105930328369140625) * _2062) + _1706;
        _1832 = ((_2049 * 0.039999999105930328369140625) * _2062) + _1707;
        _1834 = ((_2051 * 0.039999999105930328369140625) * _2062) + _1708;
    }
    else
    {
        _1824 = _1604;
        _1826 = _1605;
        _1828 = _1606;
        _1830 = _1706;
        _1832 = _1707;
        _1834 = _1708;
    }
    float _3503 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3514 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3525 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1851 = ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1824 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _614))) + ((_1830 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _1852 = ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1826 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _614))) + ((_1832 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _1853 = ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1828 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _614))) + ((_1834 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    uint _1857 = _588 + 6u;
    float _1865 = _574 / cbSceneParam._m0[86u].x;
    float _1866 = _575 / cbSceneParam._m0[86u].y;
    vec4 _1880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1865, _1866, (log2((isnan(cbSceneParam._m0[77u].w) ? _561 : (isnan(_561) ? cbSceneParam._m0[77u].w : min(_561, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1882 = _1880.x;
    float _1883 = _1880.y;
    float _1884 = _1880.z;
    float _1885 = _1880.w;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_561 > cbSceneParam._m0[78u].w)
    {
        float _1927 = isnan(_561) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _561 : min(cbSceneParam._m0[80u].w, _561));
        float _1928 = _1927 / _561;
        float _1939 = _1928 * _257;
        float _1940 = _258 * _1928;
        float _1941 = (-0.0) - _1940;
        float _1942 = _1928 * _259;
        float _1944 = (cbSceneParam._m0[77u].w * _1941) / _1927;
        float _1945 = _1944 + cbSceneParam._m0[79u].w;
        float _1946 = cbSceneParam._m0[79u].w - _1940;
        float _1952 = sqrt(((_1939 * _1939) + (_1940 * _1940)) + (_1942 * _1942));
        float _1955 = (1.0 - (cbSceneParam._m0[77u].w / _1927)) * _1952;
        float _1961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2170;
        if (abs((_1941 - _1944) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2170 = ((((_1945 > 0.0) ? exp2(_1961 * _1945) : (2.0 - exp2(_1963 * _1945))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1955;
        }
        else
        {
            float _2105 = 1.0 / cbSceneParam._m0[80u].x;
            float _2106 = isnan(_1946) ? _1945 : (isnan(_1945) ? _1946 : max(_1945, _1946));
            float _2107 = isnan(_1946) ? _1945 : (isnan(_1945) ? _1946 : min(_1945, _1946));
            float _2116 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : min(_2106, 0.0));
            float _2117 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : min(_2107, 0.0));
            _2170 = ((abs(_1952 / _1941) * cbSceneParam._m0[80u].y) * ((((_2116 - _2117) * 2.0) - ((exp2(_1961 * (isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)))) - exp2(_1961 * (isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))))) * _2105)) - ((exp2(_1963 * _2116) - exp2(_1963 * _2117)) * _2105))) + (_1955 * cbSceneParam._m0[80u].z);
        }
        vec4 _2172 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1865, _1866, 1.0), 0.0);
        float _2181 = exp2((_2170 * (-1.44269502162933349609375)) * (1.0 - _2172.w));
        float _2182 = log2(_2181);
        float _2198 = log2(_1885);
        _1965 = (exp2(_2198 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2182 * cbSceneParam._m0[78u].x)) * _2172.x) / cbSceneParam._m0[78u].x)) + _1882;
        _1967 = (exp2(_2198 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2182 * cbSceneParam._m0[78u].y)) * _2172.y) / cbSceneParam._m0[78u].y)) + _1883;
        _1969 = (exp2(_2198 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2182 * cbSceneParam._m0[78u].z)) * _2172.z) / cbSceneParam._m0[78u].z)) + _1884;
        _1971 = _2181 * _1885;
    }
    else
    {
        _1965 = _1882;
        _1967 = _1883;
        _1969 = _1884;
        _1971 = _1885;
    }
    float _1983 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1984 = _1983 == 3.0;
    float _1986 = log2(_1971);
    float _1993 = exp2(_1986 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    float _1994 = exp2(_1986 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
    float _1995 = exp2(_1986 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    float _2004 = (_1983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2004 * (_1984 ? _1993 : (_1993 + (cbSceneParam._m0[72u].w * _1965)));
    SV_Target.y = _2004 * (_1984 ? _1994 : (_1994 + (cbSceneParam._m0[72u].w * _1967)));
    SV_Target.z = _2004 * (_1984 ? _1995 : (_1995 + (cbSceneParam._m0[72u].w * _1969)));
    SV_Target.w = cbInstanceData._m0[_1857].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1857].w;
}


