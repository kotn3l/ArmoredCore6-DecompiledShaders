#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _441;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _354 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _369 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _388 = cbMtdParam._m0[22u].z + _263;
    float _389 = cbMtdParam._m0[22u].w + _264;
    float _390 = cbMtdParam._m0[23u].x + _265;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_369 * _192, _369 * _193, _369 * _194));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _410 * _406;
    float _416 = ((cbMtdParam._m0[19u].y * _404) * _410) + (((_354.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _417 = ((cbMtdParam._m0[19u].z * _405) * _410) + (((_354.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _420 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _421 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _439;
    float _442;
    float _444;
    if (_416 > 0.0)
    {
        float _425 = (1.0 - _420) / _416;
        _439 = _425;
        _442 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_425 * _411)) * 0.16666667163372039794921875;
        _444 = (fract((_425 * _417) + _421) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_416 < 0.0)
        {
            float _440 = ((-0.0) - _420) / _416;
            frontier_phi_3_2_ladder = (fract(_440 * _411) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _440;
            frontier_phi_3_2_ladder_2 = (fract((_440 * _417) + _421) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _441;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _439 = frontier_phi_3_2_ladder_1;
        _442 = frontier_phi_3_2_ladder;
        _444 = frontier_phi_3_2_ladder_2;
    }
    float _470;
    float _472;
    float _474;
    if (_417 > 0.0)
    {
        float _457 = (1.0 - _421) / _417;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_457 < _439)
        {
            frontier_phi_8_5_ladder = (fract(_457 * _411) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_457 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _457;
        }
        else
        {
            frontier_phi_8_5_ladder = _444;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = _439;
        }
        _470 = frontier_phi_8_5_ladder_2;
        _472 = frontier_phi_8_5_ladder_1;
        _474 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_417 < 0.0)
        {
            float _471 = ((-0.0) - _421) / _417;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_471 < _439)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_471 * _411) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_471 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _471;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _444;
                frontier_phi_8_6_ladder_9_ladder_1 = _442;
                frontier_phi_8_6_ladder_9_ladder_2 = _439;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _444;
            frontier_phi_8_6_ladder_1 = _442;
            frontier_phi_8_6_ladder_2 = _439;
        }
        _470 = frontier_phi_8_6_ladder_2;
        _472 = frontier_phi_8_6_ladder_1;
        _474 = frontier_phi_8_6_ladder;
    }
    float _478 = (_411 > 0.0) ? (cbMtdParam._m0[16u].y / _411) : 5000.0;
    float _491;
    float _492;
    if (_478 < _470)
    {
        _491 = ((_420 + cbMtdParam._m0[16u].z) + (_478 * _416)) * 0.16666667163372039794921875;
        _492 = (((_478 * _417) + _421) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _491 = _472;
        _492 = _474;
    }
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_491, _492));
    vec4 _510 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _514 = _510.z;
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3396 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))));
    float _527 = fma(_524, _199, fma(_518, _206, _517 * _192));
    float _530 = fma(_524, _200, fma(_518, _207, _517 * _193));
    float _533 = fma(_524, _201, fma(_518, _208, _517 * _194));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    float _538 = _537 * _527;
    float _539 = _537 * _530;
    float _540 = _537 * _533;
    float _3407 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _541 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3429 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3440 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _565 = _263 * _564;
    float _566 = _264 * _564;
    float _567 = _265 * _564;
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _595 = fma(_540, cbSceneParam._m0[5u].z, fma(_539, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _538));
    float _598 = fma(_540, cbSceneParam._m0[6u].z, fma(_539, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _538));
    float _601 = fma(_540, cbSceneParam._m0[7u].z, fma(_539, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _538));
    uint _614 = uint(roundEven(NORMAL.w)) * 13u;
    uint _615 = _614 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3451 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _573, cbSceneParam._m0[86u].y * _574));
    float _639 = _636.x * TEXCOORD.z;
    float _640 = dot(vec3(_538, _539, _540), vec3(_565, _566, _567));
    float _643 = _640 * 2.0;
    float _647 = (_643 * _538) - _565;
    float _648 = (_643 * _539) - _566;
    float _649 = (_643 * _540) - _567;
    float _653 = abs(dot(vec3(_565, _566, _567), vec3(_538, _539, _540)));
    float _3484 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _655 = sqrt(_541);
    float _668 = exp2((_655 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_655 * 3.0));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _741 = fma(_708, cbModelParam._m0[26u].z, fma(_704, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _700));
        float _745 = fma(_708, cbModelParam._m0[27u].z, fma(_704, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _700));
        float _749 = fma(_708, cbModelParam._m0[28u].z, fma(_704, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _700));
        float _773 = _700 + _538;
        float _774 = _704 + _539;
        float _775 = _708 + _540;
        float _785 = fma(_775, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773)) - _741;
        float _786 = fma(_775, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773)) - _745;
        float _787 = fma(_775, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773)) - _749;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_741 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_745 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[34u].z) + ((((((_749 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _843 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_809.x + (-0.5));
        float _845 = _843 * (_809.y + (-0.5));
        float _846 = _843 * (_809.z + (-0.5));
        float _853 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_816.x + (-0.5));
        float _855 = _853 * (_816.y + (-0.5));
        float _856 = _853 * (_816.z + (-0.5));
        float _863 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_823.x + (-0.5));
        float _865 = _863 * (_823.y + (-0.5));
        float _866 = _863 * (_823.z + (-0.5));
        float _873 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_830.x + (-0.5));
        float _875 = _873 * (_830.y + (-0.5));
        float _876 = _873 * (_830.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _897 = (dot(vec3(_538, _539, _540), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _907 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3532 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_909 + 1.0))) + _914) * _877;
        float _924 = _845 * 0.5;
        float _925 = _855 * 0.5;
        float _926 = _865 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_538, _539, _540), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3565 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_951 + 1.0))) + _956) * _878;
        float _966 = _846 * 0.5;
        float _967 = _856 * 0.5;
        float _968 = _866 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_538, _539, _540), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3598 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_993 + 1.0))) + _998) * _879;
        _1015 = _846;
        _1016 = _845;
        _1017 = _844;
        _1018 = _856;
        _1019 = _855;
        _1020 = _854;
        _1021 = _866;
        _1022 = _865;
        _1023 = _864;
        _1024 = _879;
        _1025 = _878;
        _1026 = _877;
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _441;
        _1016 = _441;
        _1017 = _441;
        _1018 = _441;
        _1019 = _441;
        _1020 = _441;
        _1021 = _441;
        _1022 = _441;
        _1023 = _441;
        _1024 = _441;
        _1025 = _441;
        _1026 = _441;
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = fma(_708, cbModelParam._m0[30u].z, fma(_704, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _700));
        float _1059 = fma(_708, cbModelParam._m0[31u].z, fma(_704, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _700));
        float _1063 = fma(_708, cbModelParam._m0[32u].z, fma(_704, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _700));
        float _1086 = _700 + _538;
        float _1087 = _704 + _539;
        float _1088 = _708 + _540;
        float _1098 = fma(_1088, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1055 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1059 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[35u].z) + ((((((_1063 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_538, _539, _540), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3661 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_538, _539, _540), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3694 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_538, _539, _540), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3727 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _441;
        _1325 = _441;
        _1326 = _441;
        _1327 = _441;
        _1328 = _441;
        _1329 = _441;
        _1330 = _441;
        _1331 = _441;
        _1332 = _441;
        _1333 = _441;
        _1334 = _441;
        _1335 = _441;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1027)) + _1027;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1028)) + _1028;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1029)) + _1029;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _647 * 0.5;
    float _1393 = _648 * 0.5;
    float _1394 = _649 * 0.5;
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1017, _1020, _1023, _1026));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1460 : min(cbModelParam._m0[25u].z, _1460));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_708, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_708, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_708, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_649, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _647));
        float _1524 = fma(_649, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _647));
        float _1527 = fma(_649, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _647));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1555 = frontier_phi_26_24_ladder;
        }
        float _1725;
        if (_1524 > 0.0)
        {
            _1725 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1725 = frontier_phi_35_31_ladder;
        }
        float _2169;
        if (_1527 > 0.0)
        {
            _2169 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2169 = frontier_phi_47_42_ladder;
        }
        float _2171 = isnan(_1725) ? _1555 : (isnan(_1555) ? _1725 : min(_1555, _1725));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1521) + _1510;
        float _2177 = (_2172 * _1524) + _1514;
        float _2178 = (_2172 * _1527) + _1518;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_25_47_ladder = _2434.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2434.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2434.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_25_47_ladder_2;
        _1545 = frontier_phi_25_47_ladder_1;
        _1547 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_647, _648, _649), _1461);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1606 = fma(_708, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700)) + cbModelParam._m0[21u].w;
        float _1610 = fma(_708, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700)) + cbModelParam._m0[22u].w;
        float _1614 = fma(_708, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700)) + cbModelParam._m0[23u].w;
        float _1617 = fma(_649, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _647));
        float _1620 = fma(_649, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _647));
        float _1623 = fma(_649, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _647));
        float _1730;
        if (_1617 > 0.0)
        {
            _1730 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1730 = frontier_phi_37_33_ladder;
        }
        float _2196;
        if (_1620 > 0.0)
        {
            _2196 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2196 = frontier_phi_49_44_ladder;
        }
        float _2555;
        if (_1623 > 0.0)
        {
            _2555 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2555 = frontier_phi_61_56_ladder;
        }
        float _2557 = isnan(_2196) ? _1730 : (isnan(_1730) ? _2196 : min(_1730, _2196));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _1617) + _1606;
        float _2563 = (_2558 * _1620) + _1610;
        float _2564 = (_2558 * _1623) + _1614;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2565;
        float _2568 = _2565 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2564 > _2568) || ((_2564 < _2566) || ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 < _2566) || (_2562 > _2568))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2564, cbModelParam._m0[17u].z, fma(_2563, cbModelParam._m0[17u].y, _2562 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2564, cbModelParam._m0[18u].z, fma(_2563, cbModelParam._m0[18u].y, _2562 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2564, cbModelParam._m0[19u].z, fma(_2563, cbModelParam._m0[19u].y, _2562 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_34_61_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1642 = frontier_phi_34_61_ladder_2;
        _1644 = frontier_phi_34_61_ladder_1;
        _1646 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_647, _648, _649), _1552);
        _1642 = _1626.x * cbModelParam._m0[1u].z;
        _1644 = _1626.y * cbModelParam._m0[1u].z;
        _1646 = _1626.z * cbModelParam._m0[1u].z;
    }
    float _1658 = ((((1.0 - _668) * ((_655 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_668 * _655)) * _639;
    float _1659 = _1658 * ((cbModelParam._m0[1u].w * (_1642 - _1543)) + _1543);
    float _1660 = _1658 * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1661 = _1658 * ((cbModelParam._m0[1u].w * (_1646 - _1547)) + _1547);
    float _1664 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, _1659 * cbSceneParam._m0[91u].x));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1717 = _1704 / _1716;
    float _1718 = _1708 / _1716;
    float _1719 = _1712 / _1716;
    float _1866;
    float _1867;
    float _1868;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1746 = ((uint(_1719 > cbSceneParam._m0[59u].y) + uint(_1719 > cbSceneParam._m0[59u].x)) + uint(_1719 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1747 = _1746 + 43u;
        uint _1755 = _1746 + 44u;
        uint _1763 = _1746 + 45u;
        uint _1771 = _1746 + 46u;
        float _1782 = fma(_1716, cbSceneParam._m0[_1747].w, fma(_1712, cbSceneParam._m0[_1747].z, fma(_1708, cbSceneParam._m0[_1747].y, _1704 * cbSceneParam._m0[_1747].x)));
        float _1786 = fma(_1716, cbSceneParam._m0[_1755].w, fma(_1712, cbSceneParam._m0[_1755].z, fma(_1708, cbSceneParam._m0[_1755].y, _1704 * cbSceneParam._m0[_1755].x)));
        float _1794 = fma(_1716, cbSceneParam._m0[_1771].w, fma(_1712, cbSceneParam._m0[_1771].z, fma(_1708, cbSceneParam._m0[_1771].y, _1704 * cbSceneParam._m0[_1771].x)));
        float _1799 = cbSceneParam._m0[33u].z * _1794;
        float _1801 = cbSceneParam._m0[33u].w * _1794;
        float _1804 = fma(_1716, cbSceneParam._m0[_1763].w, fma(_1712, cbSceneParam._m0[_1763].z, fma(_1708, cbSceneParam._m0[_1763].y, _1704 * cbSceneParam._m0[_1763].x))) / _1794;
        float _1852 = (cbSceneParam._m0[33u].x - sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719))) * cbSceneParam._m0[33u].y;
        float _3853 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1859 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 + _1782) / _1794, (_1801 + _1786) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 + _1782) / _1794, (_1786 - _1799) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 - _1799) / _1794, (_1786 - _1801) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 - _1801) / _1794, (_1799 + _1786) / _1794), _1804), 0.0)).x), vec4(0.25)));
        _1866 = 1.0 - (_1859 * cbSceneParam._m0[34u].x);
        _1867 = 1.0 - (_1859 * cbSceneParam._m0[34u].y);
        _1868 = 1.0 - (_1859 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1866 = 1.0;
        _1867 = 1.0;
        _1868 = 1.0;
    }
    float _1932;
    float _1934;
    float _1936;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1920 = fma(_1716, cbSceneParam._m0[63u].w, fma(_1712, cbSceneParam._m0[63u].z, fma(_1708, cbSceneParam._m0[63u].y, _1704 * cbSceneParam._m0[63u].x)));
        float _1921 = fma(_1716, cbSceneParam._m0[60u].w, fma(_1712, cbSceneParam._m0[60u].z, fma(_1708, cbSceneParam._m0[60u].y, _1704 * cbSceneParam._m0[60u].x))) / _1920;
        float _1922 = fma(_1716, cbSceneParam._m0[61u].w, fma(_1712, cbSceneParam._m0[61u].z, fma(_1708, cbSceneParam._m0[61u].y, _1704 * cbSceneParam._m0[61u].x))) / _1920;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1921 >= cbSceneParam._m0[64u].x) && (_1922 >= cbSceneParam._m0[64u].y)) && (_1921 <= cbSceneParam._m0[64u].z)) && (_1922 <= cbSceneParam._m0[64u].w))
        {
            float _2209 = fma(_1716, cbSceneParam._m0[62u].w, fma(_1712, cbSceneParam._m0[62u].z, fma(_1708, cbSceneParam._m0[62u].y, _1704 * cbSceneParam._m0[62u].x))) / _1920;
            float _2213 = isnan(cbSceneParam._m0[41u].w) ? _2209 : (isnan(_2209) ? cbSceneParam._m0[41u].w : max(_2209, cbSceneParam._m0[41u].w));
            float _2256 = (cbSceneParam._m0[33u].x - sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719))) * cbSceneParam._m0[33u].y;
            float _3869 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
            float _2263 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1921, cbSceneParam._m0[33u].w + _1922), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1921, _1922 - cbSceneParam._m0[33u].z), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1921 - cbSceneParam._m0[33u].z, _1922 - cbSceneParam._m0[33u].w), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1921 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1922), _2213), 0.0)).x), vec4(0.25)));
            float _2267 = 1.0 - (_2263 * cbSceneParam._m0[34u].x);
            float _2268 = 1.0 - (_2263 * cbSceneParam._m0[34u].y);
            float _2269 = 1.0 - (_2263 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2269) ? _1868 : (isnan(_1868) ? _2269 : min(_1868, _2269));
            frontier_phi_46_45_ladder_1 = isnan(_2268) ? _1867 : (isnan(_1867) ? _2268 : min(_1867, _2268));
            frontier_phi_46_45_ladder_2 = isnan(_2267) ? _1866 : (isnan(_1866) ? _2267 : min(_1866, _2267));
        }
        else
        {
            frontier_phi_46_45_ladder = _1868;
            frontier_phi_46_45_ladder_1 = _1867;
            frontier_phi_46_45_ladder_2 = _1866;
        }
        _1932 = frontier_phi_46_45_ladder_2;
        _1934 = frontier_phi_46_45_ladder_1;
        _1936 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1932 = _1866;
        _1934 = _1867;
        _1936 = _1868;
    }
    uvec4 _1941 = floatBitsToUint(cbInstanceData._m0[_614 + 5u]);
    uint _1943 = _1941.x * 14u;
    uint _1944 = _1943 + 13u;
    float _1949 = _639 + (-1.0);
    float _1952 = (cbLight._m0[_1944].x * _1949) + 1.0;
    float _1953 = (cbLight._m0[_1944].y * _1949) + 1.0;
    uint _1954 = _1943 + 5u;
    float _1960 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
    uint _1964 = _1943 + 4u;
    float _1973 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
    uint _1977 = _1943 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_538, _539, _540));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_538, _539, _540));
    float _3905 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _3916 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1954].x * _1960) * _1998) + (((cbLight._m0[_1964].x * _1932) * _1973) * _1996);
    float _2006 = ((_1960 * cbLight._m0[_1954].y) * _1998) + (((cbLight._m0[_1964].y * _1934) * _1973) * _1996);
    float _2007 = ((_1960 * cbLight._m0[_1954].z) * _1998) + (((cbLight._m0[_1964].z * _1936) * _1973) * _1996);
    uint _2009 = _1943 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _541) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1943].x + _565;
    float _2025 = cbLight._m0[_1943].y + _566;
    float _2026 = cbLight._m0[_1943].z + _567;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1943].xyz));
    float _3927 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2038 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _2039 = dot(vec3(_538, _539, _540), vec3(_2031, _2032, _2033));
    float _3949 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2031, _2032, _2033));
    float _3960 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2023;
    float _2074 = (0.5 / (((_2038 * ((_2037 * _2063) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2063) + _2023) * _2037))) * _2037;
    float _3971 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2090 = _1943 + 9u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _541) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1977].x + _565;
    float _2104 = cbLight._m0[_1977].y + _566;
    float _2105 = cbLight._m0[_1977].z + _567;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1977].xyz));
    float _3982 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _2117 = dot(vec3(_538, _539, _540), vec3(_2110, _2111, _2112));
    float _3993 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2110, _2111, _2112));
    float _4004 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2102 * _2102;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2102;
    float _2149 = (0.5 / (((_2038 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2139) + _2102) * _2116))) * _2116;
    float _4015 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    float _2161 = (((_2138 * cbLight._m0[_2090].x) * _2151) * _1960) + ((((cbLight._m0[_2009].x * _1932) * _2062) * _2076) * _1973);
    float _2162 = (((_2138 * cbLight._m0[_2090].y) * _2151) * _1960) + ((((cbLight._m0[_2009].y * _1934) * _2062) * _2076) * _1973);
    float _2163 = (((_2138 * cbLight._m0[_2090].z) * _2151) * _1960) + ((((cbLight._m0[_2009].z * _1936) * _2062) * _2076) * _1973);
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_1941.y == 0u)
    {
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _2282)));
        float _2303 = (log2(_1719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
        }
        else
        {
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            uint _2619 = 0u;
            uint _2628;
            bool _2629;
            for (;;)
            {
                _2628 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                _2629 = _2628 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2629)
                {
                    frontier_phi_70_pred = _2616;
                    frontier_phi_70_pred_1 = _2618;
                    frontier_phi_70_pred_2 = _2617;
                    frontier_phi_70_pred_3 = _2615;
                    frontier_phi_70_pred_4 = _2614;
                    frontier_phi_70_pred_5 = _2613;
                }
                else
                {
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    uint _2764;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2628;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    for (;;)
                    {
                        uint _2768 = uint(findLSB(_2764)) + (_2619 << 5u);
                        uint _2765 = (_2764 + 4294967295u) & _2764;
                        uint _2770 = _2768 * 48u;
                        vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2790 = (_2768 * 48u) + 4u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2809 = (_2768 * 48u) + 8u;
                        vec3 _2820 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x));
                        float _2824 = _2784.x - _1717;
                        float _2825 = _2784.y - _1718;
                        float _2826 = _2784.z - _1719;
                        float _2827 = dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826));
                        float _2830 = inversesqrt(_2827);
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2834 = dot(vec3(_595, _598, _601), vec3(_2831, _2832, _2833));
                        float _2839 = 1.0 - (_2827 * _2784.w);
                        float _4036 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2841 = sqrt(_2827) * _2803.w;
                        float _2844 = 1.39999997615814208984375 / (_2841 + 1.39999997615814208984375);
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2834) + _2845;
                        float _2851 = _2841 * _2841;
                        float _2855 = ((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2840) / ((_2851 * 0.699999988079071044921875) + 1.0);
                        float _2859 = (-0.0) - _1717;
                        float _2860 = (-0.0) - _1718;
                        float _2861 = (-0.0) - _1719;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2875 = exp2(log2(1.0 / ((_2851 * 3.5) + 5.0)) * 0.25);
                        float _2876 = 1.0 - _655;
                        float _2883 = sqrt(1.0 - ((1.0 - (_2876 * _2876)) * (1.0 - (_2875 * _2875))));
                        float _2884 = _2883 * _2883;
                        float _2885 = _2884 * _2884;
                        float _2886 = _2866 + _2831;
                        float _2887 = _2867 + _2832;
                        float _2888 = _2868 + _2833;
                        float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
                        float _2896 = dot(vec3(_595, _598, _601), vec3(_2866, _2867, _2868));
                        float _4052 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2899 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2900 = dot(vec3(_595, _598, _601), vec3(_2892 * _2886, _2892 * _2887, _2892 * _2888));
                        float _4063 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2907 = ((_2903 * _2903) * (_2885 + (-1.0))) + 1.0;
                        float _2908 = _2844 * _2884;
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2834) + _2909;
                        float _4074 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2914 = 1.0 - _2884;
                        float _2924 = (0.5 / (((_2913 * ((_2899 * _2914) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2913 * _2914) + _2884) * _2899))) * _2913;
                        float _4085 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2935 = (((_2885 * 3.1415927410125732421875) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) / ((_2907 * _2907) * ((_2851 * 2.1991131305694580078125) + 3.141590118408203125))) * _2840;
                        _2693 = (_2855 * _2803.x) + _2761;
                        _2694 = (_2855 * _2803.y) + _2762;
                        _2695 = (_2855 * _2803.z) + _2763;
                        _2690 = (_2935 * _2820.x) + _2758;
                        _2691 = (_2935 * _2820.y) + _2759;
                        _2692 = (_2935 * _2820.z) + _2760;
                        if (_2765 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2765;
                        }
                    }
                    frontier_phi_70_pred = _2693;
                    frontier_phi_70_pred_1 = _2695;
                    frontier_phi_70_pred_2 = _2694;
                    frontier_phi_70_pred_3 = _2692;
                    frontier_phi_70_pred_4 = _2691;
                    frontier_phi_70_pred_5 = _2690;
                }
                _2450 = frontier_phi_70_pred;
                _2454 = frontier_phi_70_pred_1;
                _2452 = frontier_phi_70_pred_2;
                _2448 = frontier_phi_70_pred_3;
                _2446 = frontier_phi_70_pred_4;
                _2444 = frontier_phi_70_pred_5;
                uint _2620 = _2619 + 1u;
                if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2613 = _2444;
                    _2614 = _2446;
                    _2615 = _2448;
                    _2616 = _2450;
                    _2617 = _2452;
                    _2618 = _2454;
                    _2619 = _2620;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
        }
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.z;
        uint _2460 = (_2458 >> 8u) & 15u;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((4294967295u << _2460) & _2313) == 0u)
        {
            _2581 = _2443;
            _2583 = _2445;
            _2585 = _2447;
            _2587 = _2449;
            _2589 = _2451;
            _2591 = _2453;
        }
        else
        {
            float _2606 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
            float _2607 = _2606 * _1717;
            float _2608 = _2606 * _1718;
            float _2609 = _2606 * _1719;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2460 < ((_2458 >> 12u) & 15u))
            {
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2741 = _2443;
                float _2742 = _2445;
                float _2743 = _2447;
                float _2744 = _2449;
                float _2745 = _2451;
                float _2746 = _2453;
                uint _2747 = _2460;
                uint _2756;
                bool _2757;
                for (;;)
                {
                    _2756 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                    _2757 = _2756 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2757)
                    {
                        frontier_phi_76_pred = _2746;
                        frontier_phi_76_pred_1 = _2745;
                        frontier_phi_76_pred_2 = _2744;
                        frontier_phi_76_pred_3 = _2743;
                        frontier_phi_76_pred_4 = _2742;
                        frontier_phi_76_pred_5 = _2741;
                    }
                    else
                    {
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _2953 = _2741;
                        float _2954 = _2742;
                        float _2955 = _2743;
                        float _2956 = _2744;
                        float _2957 = _2745;
                        float _2958 = _2746;
                        uint _2959 = _2756;
                        uint _2960;
                        vec4 _2985;
                        float _2986;
                        vec4 _3001;
                        vec3 _3013;
                        vec4 _3028;
                        vec4 _3043;
                        float _3089;
                        bool _3090;
                        for (;;)
                        {
                            uint _2970 = ((_2747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2959));
                            _2960 = (_2959 + 4294967295u) & _2959;
                            uint _2972 = _2970 * 40u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2986 = _2985.w;
                            uint _2988 = (_2970 * 40u) + 4u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2970 * 40u) + 8u;
                            _3013 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x));
                            uint _3015 = (_2970 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2970 * 40u) + 20u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_2970 * 40u) + 24u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3064 = (_2970 * 40u) + 28u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3089 = fma(_1719, _3077.z, fma(_1718, _3077.y, _3077.x * _1717)) + _3077.w;
                            _3090 = !((fma(_1719, _3058.z, fma(_1718, _3058.y, _3058.x * _1717)) + _3058.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3090)
                            {
                                float _3117 = _2985.x - _1717;
                                float _3118 = _2985.y - _1718;
                                float _3119 = _2985.z - _1719;
                                float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                                float _3123 = inversesqrt(_3120);
                                float _3124 = _3123 * _3117;
                                float _3125 = _3123 * _3118;
                                float _3126 = _3123 * _3119;
                                float _3130 = 1.0 - (_3120 / (_2986 * _2986));
                                float _4096 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3135 = sqrt(_3120) * _3001.w;
                                float _3137 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                                float _3138 = _3137 * _3137;
                                float _3141 = ((1.0 - _3138) * dot(vec3(_3124, _3125, _3126), vec3(_595, _598, _601))) + _3138;
                                float _3144 = _3135 * _3135;
                                float _3148 = (fma(_1719, _3028.z, fma(_1718, _3028.y, _3028.x * _1717)) + _3028.w) / _3089;
                                float _3149 = (fma(_1719, _3043.z, fma(_1718, _3043.y, _3043.x * _1717)) + _3043.w) / _3089;
                                float _3153 = 1.0 - dot(vec2(_3148, _3149), vec2(_3148, _3149));
                                float _4112 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3155 = _3154 * (((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3131) / ((_3144 * 0.699999988079071044921875) + 1.0));
                                float _3167 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                                float _3168 = 1.0 - _655;
                                float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                                float _3176 = _3175 * _3175;
                                float _3177 = _3176 * _3176;
                                float _3178 = _3124 - _2607;
                                float _3179 = _3125 - _2608;
                                float _3180 = _3126 - _2609;
                                float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                                float _3188 = dot(vec3(_595, _598, _601), vec3((-0.0) - _2607, (-0.0) - _2608, (-0.0) - _2609));
                                float _4123 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3192 = dot(vec3(_595, _598, _601), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                                float _4134 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                                float _3200 = _3137 * _3176;
                                float _3201 = _3200 * _3200;
                                float _3207 = ((1.0 - _3201) * dot(vec3(_595, _598, _601), vec3(_3124, _3125, _3126))) + _3201;
                                float _4145 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3209 = 1.0 - _3176;
                                float _3219 = (0.5 / (((_3208 * ((_3191 * _3209) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3176) * _3191))) * _3208;
                                float _4156 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3229 = (_3154 * _3131) * (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_3199 * _3199) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3155 * _3001.z;
                                frontier_phi_82_pred_1 = _3155 * _3001.y;
                                frontier_phi_82_pred_2 = _3155 * _3001.x;
                                frontier_phi_82_pred_3 = _3229 * _3013.z;
                                frontier_phi_82_pred_4 = _3229 * _3013.y;
                                frontier_phi_82_pred_5 = _3229 * _3013.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3238 = frontier_phi_82_pred;
                            _3237 = frontier_phi_82_pred_1;
                            _3236 = frontier_phi_82_pred_2;
                            _3235 = frontier_phi_82_pred_3;
                            _3234 = frontier_phi_82_pred_4;
                            _3233 = frontier_phi_82_pred_5;
                            _2943 = _3236 + _2956;
                            _2944 = _3237 + _2957;
                            _2945 = _3238 + _2958;
                            _2940 = _3233 + _2953;
                            _2941 = _3234 + _2954;
                            _2942 = _3235 + _2955;
                            if (_2960 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2960;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2945;
                        frontier_phi_76_pred_1 = _2944;
                        frontier_phi_76_pred_2 = _2943;
                        frontier_phi_76_pred_3 = _2942;
                        frontier_phi_76_pred_4 = _2941;
                        frontier_phi_76_pred_5 = _2940;
                    }
                    _2592 = frontier_phi_76_pred;
                    _2590 = frontier_phi_76_pred_1;
                    _2588 = frontier_phi_76_pred_2;
                    _2586 = frontier_phi_76_pred_3;
                    _2584 = frontier_phi_76_pred_4;
                    _2582 = frontier_phi_76_pred_5;
                    uint _2748 = _2747 + 1u;
                    if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2741 = _2582;
                        _2742 = _2584;
                        _2743 = _2586;
                        _2744 = _2588;
                        _2745 = _2590;
                        _2746 = _2592;
                        _2747 = _2748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2590;
                frontier_phi_63_64_ladder_1 = _2592;
                frontier_phi_63_64_ladder_2 = _2588;
                frontier_phi_63_64_ladder_3 = _2586;
                frontier_phi_63_64_ladder_4 = _2584;
                frontier_phi_63_64_ladder_5 = _2582;
            }
            else
            {
                frontier_phi_63_64_ladder = _2451;
                frontier_phi_63_64_ladder_1 = _2453;
                frontier_phi_63_64_ladder_2 = _2449;
                frontier_phi_63_64_ladder_3 = _2447;
                frontier_phi_63_64_ladder_4 = _2445;
                frontier_phi_63_64_ladder_5 = _2443;
            }
            _2581 = frontier_phi_63_64_ladder_5;
            _2583 = frontier_phi_63_64_ladder_4;
            _2585 = frontier_phi_63_64_ladder_3;
            _2587 = frontier_phi_63_64_ladder_2;
            _2589 = frontier_phi_63_64_ladder;
            _2591 = frontier_phi_63_64_ladder_1;
        }
        float _2596 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
        _2326 = (_2596 * _2587) + _2005;
        _2328 = (_2596 * _2589) + _2006;
        _2330 = (_2596 * _2591) + _2007;
        _2332 = ((_2581 * 0.039999999105930328369140625) * _2596) + _2161;
        _2334 = ((_2583 * 0.039999999105930328369140625) * _2596) + _2162;
        _2336 = ((_2585 * 0.039999999105930328369140625) * _2596) + _2163;
    }
    else
    {
        _2326 = _2005;
        _2328 = _2006;
        _2330 = _2007;
        _2332 = _2161;
        _2334 = _2162;
        _2336 = _2163;
    }
    uint _2342 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _4172 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4183 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4194 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2373 = (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2326 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _639))) + ((_2332 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _281) * _494.x) * cbInstanceData._m0[_2342].x);
    float _2375 = ((((cbMtdParam._m0[13u].y * _281) * _494.y) * cbInstanceData._m0[_2342].y) + ((_2334 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2328 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _639)));
    float _2377 = ((((cbMtdParam._m0[13u].z * _281) * _494.z) * cbInstanceData._m0[_2342].z) + ((_2336 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2330 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _639)));
    uint _2381 = _614 + 6u;
    float _2389 = _573 / cbSceneParam._m0[86u].x;
    float _2390 = _574 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2468 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2469 = _2468 / _560;
        float _2480 = _2469 * _263;
        float _2481 = _264 * _2469;
        float _2482 = (-0.0) - _2481;
        float _2483 = _2469 * _265;
        float _2485 = (cbSceneParam._m0[77u].w * _2482) / _2468;
        float _2486 = _2485 + cbSceneParam._m0[79u].w;
        float _2487 = cbSceneParam._m0[79u].w - _2481;
        float _2493 = sqrt(((_2480 * _2480) + (_2481 * _2481)) + (_2483 * _2483));
        float _2496 = (1.0 - (cbSceneParam._m0[77u].w / _2468)) * _2493;
        float _2501 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2503 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2703;
        if (abs((_2482 - _2485) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2703 = ((((_2486 > 0.0) ? exp2(_2501 * _2486) : (2.0 - exp2(_2503 * _2486))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2496;
        }
        else
        {
            float _2642 = 1.0 / cbSceneParam._m0[80u].x;
            float _2643 = isnan(_2487) ? _2486 : (isnan(_2486) ? _2487 : max(_2486, _2487));
            float _2644 = isnan(_2487) ? _2486 : (isnan(_2486) ? _2487 : min(_2486, _2487));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            _2703 = ((abs(_2493 / _2482) * cbSceneParam._m0[80u].y) * ((((_2653 - _2654) * 2.0) - ((exp2(_2501 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)))) - exp2(_2501 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))))) * _2642)) - ((exp2(_2503 * _2653) - exp2(_2503 * _2654)) * _2642))) + (_2496 * cbSceneParam._m0[80u].z);
        }
        vec4 _2705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2714 = exp2((_2703 * (-1.44269502162933349609375)) * (1.0 - _2705.w));
        float _2715 = log2(_2714);
        float _2731 = log2(_2409);
        _2505 = (exp2(_2731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].x)) * _2705.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2507 = (exp2(_2731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].y)) * _2705.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2509 = (exp2(_2731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].z)) * _2705.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2511 = _2714 * _2409;
    }
    else
    {
        _2505 = _2406;
        _2507 = _2407;
        _2509 = _2408;
        _2511 = _2409;
    }
    float _2523 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2524 = _2523 == 3.0;
    float _2525 = log2(_2511);
    float _2532 = exp2(_2525 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0)));
    float _2533 = exp2(_2525 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0)));
    float _2534 = exp2(_2525 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0)));
    float _2543 = (_2523 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2543 * (_2524 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2505)));
    SV_Target.y = _2543 * (_2524 ? _2533 : (_2533 + (cbSceneParam._m0[72u].w * _2507)));
    SV_Target.z = _2543 * (_2524 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2509)));
    SV_Target.w = cbInstanceData._m0[_2381].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
}


