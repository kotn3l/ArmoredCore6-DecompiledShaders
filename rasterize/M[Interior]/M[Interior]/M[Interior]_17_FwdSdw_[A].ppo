#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _386;
float _3101;
float _3102;
float _3103;
float _3104;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _201 = _200 * TANGENT.x;
    float _202 = _200 * TANGENT.y;
    float _203 = _200 * TANGENT.z;
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _248);
    float _259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _248);
    float _260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _248);
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _311 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _318 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _330 = cbMtdParam._m0[22u].z + _258;
    float _331 = cbMtdParam._m0[22u].w + _259;
    float _332 = cbMtdParam._m0[23u].x + _260;
    float _349 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_311 * _190, _311 * _191, _311 * _192));
    float _350 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_318 * _201, _318 * _202, _318 * _203));
    float _351 = (-0.0) - dot(vec3(_330, _331, _332), vec3((-0.0) - (NORMAL.x * _196), (-0.0) - (NORMAL.y * _196), (-0.0) - (NORMAL.z * _196)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _361 = ((cbMtdParam._m0[19u].y * _349) * _355) + (((_295.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _362 = ((cbMtdParam._m0[19u].z * _350) * _355) + (((_295.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _365 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _366 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _384;
    float _387;
    float _389;
    if (_361 > 0.0)
    {
        float _370 = (1.0 - _365) / _361;
        _384 = _370;
        _387 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_370 * _356)) * 0.16666667163372039794921875;
        _389 = (fract((_370 * _362) + _366) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_361 < 0.0)
        {
            float _385 = ((-0.0) - _365) / _361;
            frontier_phi_3_2_ladder = (fract(_385 * _356) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _385;
            frontier_phi_3_2_ladder_2 = (fract((_385 * _362) + _366) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _386;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _384 = frontier_phi_3_2_ladder_1;
        _387 = frontier_phi_3_2_ladder;
        _389 = frontier_phi_3_2_ladder_2;
    }
    float _415;
    float _417;
    float _419;
    if (_362 > 0.0)
    {
        float _402 = (1.0 - _366) / _362;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_402 < _384)
        {
            frontier_phi_8_5_ladder = (fract(_402 * _356) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_402 * _361) + _365) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _402;
        }
        else
        {
            frontier_phi_8_5_ladder = _389;
            frontier_phi_8_5_ladder_1 = _387;
            frontier_phi_8_5_ladder_2 = _384;
        }
        _415 = frontier_phi_8_5_ladder_2;
        _417 = frontier_phi_8_5_ladder_1;
        _419 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_362 < 0.0)
        {
            float _416 = ((-0.0) - _366) / _362;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_416 < _384)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_416 * _356) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_416 * _361) + _365) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _416;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _389;
                frontier_phi_8_6_ladder_9_ladder_1 = _387;
                frontier_phi_8_6_ladder_9_ladder_2 = _384;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _389;
            frontier_phi_8_6_ladder_1 = _387;
            frontier_phi_8_6_ladder_2 = _384;
        }
        _415 = frontier_phi_8_6_ladder_2;
        _417 = frontier_phi_8_6_ladder_1;
        _419 = frontier_phi_8_6_ladder;
    }
    float _423 = (_356 > 0.0) ? (cbMtdParam._m0[16u].y / _356) : 5000.0;
    float _436;
    float _437;
    if (_423 < _415)
    {
        _436 = ((_365 + cbMtdParam._m0[16u].z) + (_423 * _361)) * 0.16666667163372039794921875;
        _437 = (((_423 * _362) + _366) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _436 = _417;
        _437 = _419;
    }
    vec4 _439 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_436, _437));
    float _444 = _439.x * cbMtdParam._m0[13u].x;
    float _445 = _439.y * cbMtdParam._m0[13u].y;
    float _446 = _439.z * cbMtdParam._m0[13u].z;
    float _3113 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3124 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3135 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _465 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _469 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _470 = _258 * _469;
    float _471 = _259 * _469;
    float _472 = _260 * _469;
    vec4 _477 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _479 = _477.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _580 = sqrt(((_258 * _258) + (_259 * _259)) + (_260 * _260));
        float _587 = (cbMatDynParam._m0[5u].x * _580) + cbMatDynParam._m0[5u].y;
        float _3146 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
        float _592 = (cbMatDynParam._m0[5u].z * _580) + cbMatDynParam._m0[5u].w;
        float _3157 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) - _588)) + _588) < ((_479 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _497 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _498 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _511 = uint(roundEven(NORMAL.w)) * 13u;
    uint _512 = _511 + 9u;
    uint _513 = _512 + uint(cbMatDynParam._m0[0u].w);
    float _519 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * cbInstanceData._m0[_513].x;
    float _520 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0)))) * cbInstanceData._m0[_513].y;
    float _521 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0)))) * cbInstanceData._m0[_513].z;
    float _3168 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _3179 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _523 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _3190 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    vec4 _533 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _497, cbSceneParam._m0[86u].y * _498));
    float _536 = _533.x * TEXCOORD.z;
    float _537 = (-0.0) - _470;
    float _538 = (-0.0) - _471;
    float _539 = (-0.0) - _472;
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _655 = (cbModelParam._m0[37u].x * ((((fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _657 = (cbModelParam._m0[37u].y * ((((fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _658 = (((((fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_655, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_655, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_655, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_655, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(0.0), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3216 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3227 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3238 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(0.0), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3271 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(0.0), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3304 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _868 = _697;
        _869 = _696;
        _870 = _708;
        _871 = _707;
        _872 = _706;
        _873 = _718;
        _874 = _717;
        _875 = _716;
        _876 = _731;
        _877 = _730;
        _878 = _729;
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _386;
        _868 = _386;
        _869 = _386;
        _870 = _386;
        _871 = _386;
        _872 = _386;
        _873 = _386;
        _874 = _386;
        _875 = _386;
        _876 = _386;
        _877 = _386;
        _878 = _386;
        _879 = 0.0;
        _880 = 0.0;
        _881 = 0.0;
    }
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _938 = (cbModelParam._m0[38u].x * ((((fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _939 = (cbModelParam._m0[38u].y * ((((fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _940 = (((((fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_942.x + (-0.5));
        float _977 = _975 * (_942.y + (-0.5));
        float _978 = _975 * (_942.z + (-0.5));
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_949.x + (-0.5));
        float _987 = _985 * (_949.y + (-0.5));
        float _988 = _985 * (_949.z + (-0.5));
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_956.x + (-0.5));
        float _997 = _995 * (_956.y + (-0.5));
        float _998 = _995 * (_956.z + (-0.5));
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(0.0), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3367 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_1039 + 1.0))) + _1044) * _1009;
        float _1054 = _977 * 0.5;
        float _1055 = _987 * 0.5;
        float _1056 = _997 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(0.0), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3400 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1081 + 1.0))) + _1086) * _1010;
        float _1096 = _978 * 0.5;
        float _1097 = _988 * 0.5;
        float _1098 = _998 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(0.0), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3433 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_1123 + 1.0))) + _1128) * _1011;
        _1145 = _978;
        _1146 = _977;
        _1147 = _976;
        _1148 = _988;
        _1149 = _987;
        _1150 = _986;
        _1151 = _998;
        _1152 = _997;
        _1153 = _996;
        _1154 = _1011;
        _1155 = _1010;
        _1156 = _1009;
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _386;
        _1146 = _386;
        _1147 = _386;
        _1148 = _386;
        _1149 = _386;
        _1150 = _386;
        _1151 = _386;
        _1152 = _386;
        _1153 = _386;
        _1154 = _386;
        _1155 = _386;
        _1156 = _386;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _879)) + _879;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _880)) + _880;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _881)) + _881;
    float _1192 = fma(_1171, cbSceneParam._m0[89u].z, fma(_1170, cbSceneParam._m0[89u].y, _1169 * cbSceneParam._m0[89u].x));
    float _1195 = fma(_1171, cbSceneParam._m0[90u].z, fma(_1170, cbSceneParam._m0[90u].y, _1169 * cbSceneParam._m0[90u].x));
    float _1198 = fma(_1171, cbSceneParam._m0[91u].z, fma(_1170, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1169));
    float _1213 = _470 * (-0.5);
    float _1214 = _471 * (-0.5);
    float _1215 = _472 * (-0.5);
    float _1216 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1219 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1222 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1256;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1229 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_867, _870, _873, _876));
        float _1233 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_868, _871, _874, _877));
        float _1237 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_869, _872, _875, _878));
        float _1244 = dot(vec4(cbModelParam._m0[39u]), vec4(_1213, _1214, _1215, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1267;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1258 = dot(vec4(cbModelParam._m0[40u]), vec4(_1213, _1214, _1215, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1271 = (_1267 * cbModelParam._m0[1u].x) + (_1256 * (1.0 - cbModelParam._m0[1u].x));
    float _1280 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1363;
    float _1365;
    float _1367;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1330 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1334 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1338 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1341 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1344 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1347 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1373;
        if (_1341 > 0.0)
        {
            _1373 = abs((1.0 - _1330) / _1341);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1330 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1373 = frontier_phi_29_27_ladder;
        }
        float _1545;
        if (_1344 > 0.0)
        {
            _1545 = abs((1.0 - _1334) / _1344);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1334 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1545 = frontier_phi_38_34_ladder;
        }
        float _1939;
        if (_1347 > 0.0)
        {
            _1939 = abs((1.0 - _1338) / _1347);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1338 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1939 = frontier_phi_50_45_ladder;
        }
        float _1941 = isnan(_1545) ? _1373 : (isnan(_1373) ? _1545 : min(_1373, _1545));
        float _1942 = isnan(_1939) ? _1941 : (isnan(_1941) ? _1939 : min(_1941, _1939));
        float _1946 = (_1942 * _1341) + _1330;
        float _1947 = (_1942 * _1344) + _1334;
        float _1948 = (_1942 * _1347) + _1338;
        float _1949 = _1942 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1949;
        float _1953 = _1949 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 > _1953) || ((_1947 < _1951) || ((_1946 < _1951) || (_1946 > _1953))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1948, cbModelParam._m0[9u].z, fma(_1947, cbModelParam._m0[9u].y, _1946 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1948, cbModelParam._m0[10u].z, fma(_1947, cbModelParam._m0[10u].y, _1946 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1948, cbModelParam._m0[11u].z, fma(_1947, cbModelParam._m0[11u].y, _1946 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_28_50_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1363 = frontier_phi_28_50_ladder_2;
        _1365 = frontier_phi_28_50_ladder_1;
        _1367 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1280);
        _1363 = _1351.x * cbModelParam._m0[1u].y;
        _1365 = _1351.y * cbModelParam._m0[1u].y;
        _1367 = _1351.z * cbModelParam._m0[1u].y;
    }
    float _1370 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1424 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1428 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1432 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1435 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1438 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1441 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1550;
        if (_1435 > 0.0)
        {
            _1550 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1550 = frontier_phi_40_36_ladder;
        }
        float _1966;
        if (_1438 > 0.0)
        {
            _1966 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1966 = frontier_phi_52_47_ladder;
        }
        float _2313;
        if (_1441 > 0.0)
        {
            _2313 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2313 = frontier_phi_64_59_ladder;
        }
        float _2315 = isnan(_1966) ? _1550 : (isnan(_1550) ? _1966 : min(_1550, _1966));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1435) + _1424;
        float _2321 = (_2316 * _1438) + _1428;
        float _2322 = (_2316 * _1441) + _1432;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1370);
            frontier_phi_37_64_ladder = _2456.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2456.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2456.x * cbModelParam._m0[1u].z;
        }
        _1460 = frontier_phi_37_64_ladder_2;
        _1462 = frontier_phi_37_64_ladder_1;
        _1464 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1370);
        _1460 = _1444.x * cbModelParam._m0[1u].z;
        _1462 = _1444.y * cbModelParam._m0[1u].z;
        _1464 = _1444.z * cbModelParam._m0[1u].z;
    }
    float _1476 = _536 * 0.01200000010430812835693359375;
    float _1478 = _1476 * ((cbModelParam._m0[1u].w * (_1460 - _1363)) + _1363);
    float _1479 = _1476 * ((cbModelParam._m0[1u].w * (_1462 - _1365)) + _1365);
    float _1480 = _1476 * ((cbModelParam._m0[1u].w * (_1464 - _1367)) + _1367);
    float _1483 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, _1478 * cbSceneParam._m0[91u].x));
    float _1524 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1528 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1532 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1536 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1537 = _1524 / _1536;
    float _1538 = _1528 / _1536;
    float _1539 = _1532 / _1536;
    float _1687;
    float _1688;
    float _1689;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1566 = ((uint(_1539 > cbSceneParam._m0[59u].y) + uint(_1539 > cbSceneParam._m0[59u].x)) + uint(_1539 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1567 = _1566 + 43u;
        uint _1575 = _1566 + 44u;
        uint _1583 = _1566 + 45u;
        uint _1591 = _1566 + 46u;
        float _1602 = fma(_1536, cbSceneParam._m0[_1567].w, fma(_1532, cbSceneParam._m0[_1567].z, fma(_1528, cbSceneParam._m0[_1567].y, _1524 * cbSceneParam._m0[_1567].x)));
        float _1606 = fma(_1536, cbSceneParam._m0[_1575].w, fma(_1532, cbSceneParam._m0[_1575].z, fma(_1528, cbSceneParam._m0[_1575].y, _1524 * cbSceneParam._m0[_1575].x)));
        float _1614 = fma(_1536, cbSceneParam._m0[_1591].w, fma(_1532, cbSceneParam._m0[_1591].z, fma(_1528, cbSceneParam._m0[_1591].y, _1524 * cbSceneParam._m0[_1591].x)));
        float _1619 = cbSceneParam._m0[33u].z * _1614;
        float _1621 = cbSceneParam._m0[33u].w * _1614;
        float _1624 = fma(_1536, cbSceneParam._m0[_1583].w, fma(_1532, cbSceneParam._m0[_1583].z, fma(_1528, cbSceneParam._m0[_1583].y, _1524 * cbSceneParam._m0[_1583].x))) / _1614;
        float _1672 = (cbSceneParam._m0[33u].x - sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539))) * cbSceneParam._m0[33u].y;
        float _3559 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1680 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1619 + _1602) / _1614, (_1621 + _1606) / _1614), _1624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 + _1602) / _1614, (_1606 - _1619) / _1614), _1624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1602 - _1619) / _1614, (_1606 - _1621) / _1614), _1624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1602 - _1621) / _1614, (_1619 + _1606) / _1614), _1624), 0.0)).x), vec4(0.25)));
        _1687 = 1.0 - (_1680 * cbSceneParam._m0[34u].x);
        _1688 = 1.0 - (_1680 * cbSceneParam._m0[34u].y);
        _1689 = 1.0 - (_1680 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1687 = 1.0;
        _1688 = 1.0;
        _1689 = 1.0;
    }
    float _1753;
    float _1755;
    float _1757;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1741 = fma(_1536, cbSceneParam._m0[63u].w, fma(_1532, cbSceneParam._m0[63u].z, fma(_1528, cbSceneParam._m0[63u].y, _1524 * cbSceneParam._m0[63u].x)));
        float _1742 = fma(_1536, cbSceneParam._m0[60u].w, fma(_1532, cbSceneParam._m0[60u].z, fma(_1528, cbSceneParam._m0[60u].y, _1524 * cbSceneParam._m0[60u].x))) / _1741;
        float _1743 = fma(_1536, cbSceneParam._m0[61u].w, fma(_1532, cbSceneParam._m0[61u].z, fma(_1528, cbSceneParam._m0[61u].y, _1524 * cbSceneParam._m0[61u].x))) / _1741;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1742 >= cbSceneParam._m0[64u].x) && (_1743 >= cbSceneParam._m0[64u].y)) && (_1742 <= cbSceneParam._m0[64u].z)) && (_1743 <= cbSceneParam._m0[64u].w))
        {
            float _1979 = fma(_1536, cbSceneParam._m0[62u].w, fma(_1532, cbSceneParam._m0[62u].z, fma(_1528, cbSceneParam._m0[62u].y, _1524 * cbSceneParam._m0[62u].x))) / _1741;
            float _1983 = isnan(cbSceneParam._m0[41u].w) ? _1979 : (isnan(_1979) ? cbSceneParam._m0[41u].w : max(_1979, cbSceneParam._m0[41u].w));
            float _2026 = (cbSceneParam._m0[33u].x - sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539))) * cbSceneParam._m0[33u].y;
            float _3575 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
            float _2033 = (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1742, cbSceneParam._m0[33u].w + _1743), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1742, _1743 - cbSceneParam._m0[33u].z), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1742 - cbSceneParam._m0[33u].z, _1743 - cbSceneParam._m0[33u].w), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1742 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1743), _1983), 0.0)).x), vec4(0.25)));
            float _2037 = 1.0 - (_2033 * cbSceneParam._m0[34u].x);
            float _2038 = 1.0 - (_2033 * cbSceneParam._m0[34u].y);
            float _2039 = 1.0 - (_2033 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2039) ? _1689 : (isnan(_1689) ? _2039 : min(_1689, _2039));
            frontier_phi_49_48_ladder_1 = isnan(_2038) ? _1688 : (isnan(_1688) ? _2038 : min(_1688, _2038));
            frontier_phi_49_48_ladder_2 = isnan(_2037) ? _1687 : (isnan(_1687) ? _2037 : min(_1687, _2037));
        }
        else
        {
            frontier_phi_49_48_ladder = _1689;
            frontier_phi_49_48_ladder_1 = _1688;
            frontier_phi_49_48_ladder_2 = _1687;
        }
        _1753 = frontier_phi_49_48_ladder_2;
        _1755 = frontier_phi_49_48_ladder_1;
        _1757 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1753 = _1687;
        _1755 = _1688;
        _1757 = _1689;
    }
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_511 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1770 = _536 + (-1.0);
    float _1773 = (cbLight._m0[_1765].x * _1770) + 1.0;
    float _1774 = (cbLight._m0[_1765].y * _1770) + 1.0;
    uint _1775 = _1764 + 5u;
    float _1781 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1785 = _1764 + 4u;
    float _1794 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1798 = _1764 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1764].xyz), vec3(0.0));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(0.0));
    float _3611 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _3622 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1775].x * _1781) * _1819) + (((cbLight._m0[_1785].x * _1753) * _1794) * _1817);
    float _1827 = ((_1781 * cbLight._m0[_1775].y) * _1819) + (((cbLight._m0[_1785].y * _1755) * _1794) * _1817);
    float _1828 = ((_1781 * cbLight._m0[_1775].z) * _1819) + (((cbLight._m0[_1785].z * _1757) * _1794) * _1817);
    uint _1829 = _1764 + 8u;
    float _1835 = cbLight._m0[_1764].x + _470;
    float _1836 = cbLight._m0[_1764].y + _471;
    float _1837 = cbLight._m0[_1764].z + _472;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1845 = dot(vec3(0.0), vec3(cbLight._m0[_1764].xyz));
    float _3633 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _1849 = dot(vec3(0.0), vec3(_470, _471, _472));
    float _3644 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1853 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1835 * _1841, _1836 * _1841, _1837 * _1841));
    float _3655 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1870 = (0.5 / ((_1848 + 9.9999999392252902907785028219223e-09) + _1852)) * _1848;
    float _3666 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1872 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
    uint _1886 = _1764 + 9u;
    float _1892 = cbLight._m0[_1798].x + _470;
    float _1893 = cbLight._m0[_1798].y + _471;
    float _1894 = cbLight._m0[_1798].z + _472;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1902 = dot(vec3(0.0), vec3(cbLight._m0[_1798].xyz));
    float _3677 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1892 * _1898, _1893 * _1898, _1894 * _1898));
    float _3688 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1915 = (exp2(log2(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = (0.5 / ((_1905 + 9.9999999392252902907785028219223e-09) + _1852)) * _1905;
    float _3699 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.31831014156341552734375;
    float _1931 = (((_1915 * cbLight._m0[_1886].x) * _1921) * _1781) + ((((cbLight._m0[_1829].x * _1753) * _1864) * _1872) * _1794);
    float _1932 = (((_1915 * cbLight._m0[_1886].y) * _1921) * _1781) + ((((cbLight._m0[_1829].y * _1755) * _1864) * _1872) * _1794);
    float _1933 = (((_1915 * cbLight._m0[_1886].z) * _1921) * _1781) + ((((cbLight._m0[_1829].z * _1757) * _1864) * _1872) * _1794);
    float _2096;
    float _2098;
    float _2100;
    float _2102;
    float _2104;
    float _2106;
    if (_1762.y == 0u)
    {
        uvec4 _2051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2052 = _2051.x;
        uint _2063 = uint((float(_2051.y) * floor(float(uint(cbSceneParam._m0[85u].y * _498) / _2052))) + floor(float(uint(cbSceneParam._m0[85u].x * _497) / _2052)));
        float _2073 = (log2(_1539 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2074 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        uint _2077 = uint(isnan(14.0) ? _2074 : (isnan(_2074) ? 14.0 : min(_2074, 14.0)));
        uvec4 _2082 = texelFetch(g_lightClusterGridBuffer, int(((_2077 << 2u) + (_2063 << 6u)) >> 2u));
        uint _2083 = _2082.x;
        uint _2084 = _2051.z;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        float _2201;
        if (((((1u << ((_2084 >> 4u) & 15u)) + 4294967295u) & _2083) == 0u) || ((_2084 & 240u) == 0u))
        {
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
            _2201 = 0.0;
        }
        else
        {
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2202;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            float _2373 = 0.0;
            uint _2374 = 0u;
            uint _2383;
            bool _2384;
            for (;;)
            {
                _2383 = texelFetch(g_lightClassification, int((((_2077 << 5u) + (_2063 << 9u)) + (_2374 << 2u)) >> 2u)).x;
                _2384 = _2383 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2384)
                {
                    frontier_phi_75_pred = _2371;
                    frontier_phi_75_pred_1 = _2373;
                    frontier_phi_75_pred_2 = _2372;
                    frontier_phi_75_pred_3 = _2370;
                    frontier_phi_75_pred_4 = _2369;
                    frontier_phi_75_pred_5 = _2368;
                }
                else
                {
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    uint _2540;
                    _2534 = _2368;
                    _2535 = _2369;
                    _2536 = _2370;
                    _2537 = _2371;
                    _2538 = _2372;
                    _2539 = _2373;
                    _2540 = _2383;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    for (;;)
                    {
                        uint _2544 = uint(findLSB(_2540)) + (_2374 << 5u);
                        uint _2541 = (_2540 + 4294967295u) & _2540;
                        uint _2546 = _2544 * 48u;
                        vec4 _2560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2546)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 3u)).x));
                        uint _2566 = (_2544 * 48u) + 4u;
                        vec4 _2579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 3u)).x));
                        uint _2585 = (_2544 * 48u) + 8u;
                        vec3 _2596 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2585)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 2u)).x));
                        float _2600 = _2560.x - _1537;
                        float _2601 = _2560.y - _1538;
                        float _2602 = _2560.z - _1539;
                        float _2603 = dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602));
                        float _2606 = inversesqrt(_2603);
                        float _2615 = 1.0 - (_2603 * _2560.w);
                        float _3720 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2616 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2617 = sqrt(_2603) * _2579.w;
                        float _2620 = 1.39999997615814208984375 / (_2617 + 1.39999997615814208984375);
                        float _2621 = _2620 * _2620;
                        float _2624 = ((1.0 - _2621) * dot(vec3(0.0), vec3(_2606 * _2600, _2606 * _2601, _2606 * _2602))) + _2621;
                        float _2627 = _2617 * _2617;
                        float _2631 = ((isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))) * _2616) / ((_2627 * 0.699999988079071044921875) + 1.0);
                        float _2635 = (-0.0) - _1537;
                        float _2636 = (-0.0) - _1538;
                        float _2637 = (-0.0) - _1539;
                        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
                        float _2645 = dot(vec3(0.0), vec3(_2641 * _2635, _2641 * _2636, _2641 * _2637));
                        float _3736 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _3747 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2649 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                        float _2653 = (0.5 / (((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) + 9.9999999392252902907785028219223e-09) + _2649)) * _2649;
                        float _3758 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2662 = (((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 3.1415927410125732421875) / ((_2627 * 2.1991131305694580078125) + 3.141590118408203125)) * _2616;
                        _2464 = (_2631 * _2579.x) + _2537;
                        _2465 = (_2631 * _2579.y) + _2538;
                        _2466 = (_2631 * _2579.z) + _2539;
                        _2461 = (_2662 * _2596.x) + _2534;
                        _2462 = (_2662 * _2596.y) + _2535;
                        _2463 = (_2662 * _2596.z) + _2536;
                        if (_2541 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2534 = _2461;
                            _2535 = _2462;
                            _2536 = _2463;
                            _2537 = _2464;
                            _2538 = _2465;
                            _2539 = _2466;
                            _2540 = _2541;
                        }
                    }
                    frontier_phi_75_pred = _2464;
                    frontier_phi_75_pred_1 = _2466;
                    frontier_phi_75_pred_2 = _2465;
                    frontier_phi_75_pred_3 = _2463;
                    frontier_phi_75_pred_4 = _2462;
                    frontier_phi_75_pred_5 = _2461;
                }
                _2198 = frontier_phi_75_pred;
                _2202 = frontier_phi_75_pred_1;
                _2200 = frontier_phi_75_pred_2;
                _2196 = frontier_phi_75_pred_3;
                _2194 = frontier_phi_75_pred_4;
                _2192 = frontier_phi_75_pred_5;
                uint _2375 = _2374 + 1u;
                if (_2375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2368 = _2192;
                    _2369 = _2194;
                    _2370 = _2196;
                    _2371 = _2198;
                    _2372 = _2200;
                    _2373 = _2202;
                    _2374 = _2375;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
            _2201 = _2202;
        }
        uvec4 _2205 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2206 = _2205.z;
        uint _2208 = (_2206 >> 8u) & 15u;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        if (((4294967295u << _2208) & _2083) == 0u)
        {
            _2339 = _2191;
            _2341 = _2193;
            _2343 = _2195;
            _2345 = _2197;
            _2347 = _2199;
            _2349 = _2201;
        }
        else
        {
            float _2364 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2208 < ((_2206 >> 12u) & 15u))
            {
                float _2340;
                float _2342;
                float _2344;
                float _2346;
                float _2348;
                float _2350;
                float _2517 = _2191;
                float _2518 = _2193;
                float _2519 = _2195;
                float _2520 = _2197;
                float _2521 = _2199;
                float _2522 = _2201;
                uint _2523 = _2208;
                uint _2532;
                bool _2533;
                for (;;)
                {
                    _2532 = texelFetch(g_lightClassification, int((((_2077 << 5u) + (_2063 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                    _2533 = _2532 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2533)
                    {
                        frontier_phi_86_pred = _2522;
                        frontier_phi_86_pred_1 = _2521;
                        frontier_phi_86_pred_2 = _2520;
                        frontier_phi_86_pred_3 = _2519;
                        frontier_phi_86_pred_4 = _2518;
                        frontier_phi_86_pred_5 = _2517;
                    }
                    else
                    {
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2680;
                        float _2681;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2689 = _2517;
                        float _2690 = _2518;
                        float _2691 = _2519;
                        float _2692 = _2520;
                        float _2693 = _2521;
                        float _2694 = _2522;
                        uint _2695 = _2532;
                        uint _2696;
                        vec4 _2721;
                        float _2722;
                        vec4 _2737;
                        vec3 _2749;
                        vec4 _2764;
                        vec4 _2779;
                        float _2825;
                        bool _2826;
                        for (;;)
                        {
                            uint _2706 = ((_2523 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2695));
                            _2696 = (_2695 + 4294967295u) & _2695;
                            uint _2708 = _2706 * 40u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            _2722 = _2721.w;
                            uint _2724 = (_2706 * 40u) + 4u;
                            _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2739 = (_2706 * 40u) + 8u;
                            _2749 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x));
                            uint _2751 = (_2706 * 40u) + 16u;
                            _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            uint _2766 = (_2706 * 40u) + 20u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2781 = (_2706 * 40u) + 24u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2800 = (_2706 * 40u) + 28u;
                            vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            _2825 = fma(_1539, _2813.z, fma(_1538, _2813.y, _2813.x * _1537)) + _2813.w;
                            _2826 = !((fma(_1539, _2794.z, fma(_1538, _2794.y, _2794.x * _1537)) + _2794.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_2826)
                            {
                                float _2853 = _2721.x - _1537;
                                float _2854 = _2721.y - _1538;
                                float _2855 = _2721.z - _1539;
                                float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                                float _2859 = inversesqrt(_2856);
                                float _2860 = _2859 * _2853;
                                float _2861 = _2859 * _2854;
                                float _2862 = _2859 * _2855;
                                float _2866 = 1.0 - (_2856 / (_2722 * _2722));
                                float _3769 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2867 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2871 = sqrt(_2856) * _2737.w;
                                float _2873 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                                float _2874 = _2873 * _2873;
                                float _2875 = 1.0 - _2874;
                                float _2877 = (_2875 * dot(vec3(_2860, _2861, _2862), vec3(0.0))) + _2874;
                                float _2880 = _2871 * _2871;
                                float _2884 = (fma(_1539, _2764.z, fma(_1538, _2764.y, _2764.x * _1537)) + _2764.w) / _2825;
                                float _2885 = (fma(_1539, _2779.z, fma(_1538, _2779.y, _2779.x * _1537)) + _2779.w) / _2825;
                                float _2889 = 1.0 - dot(vec2(_2884, _2885), vec2(_2884, _2885));
                                float _3785 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2890 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                                float _2891 = _2890 * (((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2867) / ((_2880 * 0.699999988079071044921875) + 1.0));
                                float _2901 = dot(vec3(0.0), vec3((-0.0) - (_1537 * _2364), (-0.0) - (_1538 * _2364), (-0.0) - (_1539 * _2364)));
                                float _3796 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2909 = (_2875 * dot(vec3(0.0), vec3(_2860, _2861, _2862))) + _2874;
                                float _3807 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                                float _2914 = (0.5 / (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) + 9.9999999392252902907785028219223e-09) + _2910)) * _2910;
                                float _3818 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2921 = (_2890 * _2867) * (((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 3.1415927410125732421875) / ((_2880 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2891 * _2737.z;
                                frontier_phi_92_pred_1 = _2891 * _2737.y;
                                frontier_phi_92_pred_2 = _2891 * _2737.x;
                                frontier_phi_92_pred_3 = _2921 * _2749.z;
                                frontier_phi_92_pred_4 = _2921 * _2749.y;
                                frontier_phi_92_pred_5 = _2921 * _2749.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _2930 = frontier_phi_92_pred;
                            _2929 = frontier_phi_92_pred_1;
                            _2928 = frontier_phi_92_pred_2;
                            _2927 = frontier_phi_92_pred_3;
                            _2926 = frontier_phi_92_pred_4;
                            _2925 = frontier_phi_92_pred_5;
                            _2679 = _2928 + _2692;
                            _2680 = _2929 + _2693;
                            _2681 = _2930 + _2694;
                            _2676 = _2925 + _2689;
                            _2677 = _2926 + _2690;
                            _2678 = _2927 + _2691;
                            if (_2696 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2678;
                                _2692 = _2679;
                                _2693 = _2680;
                                _2694 = _2681;
                                _2695 = _2696;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2681;
                        frontier_phi_86_pred_1 = _2680;
                        frontier_phi_86_pred_2 = _2679;
                        frontier_phi_86_pred_3 = _2678;
                        frontier_phi_86_pred_4 = _2677;
                        frontier_phi_86_pred_5 = _2676;
                    }
                    _2350 = frontier_phi_86_pred;
                    _2348 = frontier_phi_86_pred_1;
                    _2346 = frontier_phi_86_pred_2;
                    _2344 = frontier_phi_86_pred_3;
                    _2342 = frontier_phi_86_pred_4;
                    _2340 = frontier_phi_86_pred_5;
                    uint _2524 = _2523 + 1u;
                    if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2517 = _2340;
                        _2518 = _2342;
                        _2519 = _2344;
                        _2520 = _2346;
                        _2521 = _2348;
                        _2522 = _2350;
                        _2523 = _2524;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2346;
                frontier_phi_66_67_ladder_1 = _2350;
                frontier_phi_66_67_ladder_2 = _2348;
                frontier_phi_66_67_ladder_3 = _2344;
                frontier_phi_66_67_ladder_4 = _2342;
                frontier_phi_66_67_ladder_5 = _2340;
            }
            else
            {
                frontier_phi_66_67_ladder = _2197;
                frontier_phi_66_67_ladder_1 = _2201;
                frontier_phi_66_67_ladder_2 = _2199;
                frontier_phi_66_67_ladder_3 = _2195;
                frontier_phi_66_67_ladder_4 = _2193;
                frontier_phi_66_67_ladder_5 = _2191;
            }
            _2339 = frontier_phi_66_67_ladder_5;
            _2341 = frontier_phi_66_67_ladder_4;
            _2343 = frontier_phi_66_67_ladder_3;
            _2345 = frontier_phi_66_67_ladder;
            _2347 = frontier_phi_66_67_ladder_2;
            _2349 = frontier_phi_66_67_ladder_1;
        }
        float _2354 = isnan(1.0) ? _536 : (isnan(_536) ? 1.0 : min(_536, 1.0));
        _2096 = (_2354 * _2345) + _1826;
        _2098 = (_2354 * _2347) + _1827;
        _2100 = (_2354 * _2349) + _1828;
        _2102 = ((_2339 * 0.039999999105930328369140625) * _2354) + _1931;
        _2104 = ((_2341 * 0.039999999105930328369140625) * _2354) + _1932;
        _2106 = ((_2343 * 0.039999999105930328369140625) * _2354) + _1933;
    }
    else
    {
        _2096 = _1826;
        _2098 = _1827;
        _2100 = _1828;
        _2102 = _1931;
        _2104 = _1932;
        _2106 = _1933;
    }
    float _3834 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3845 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3856 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2123 = ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_2096 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _536))) + ((_2102 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1271)) * cbPerFrame._m0[3u].x);
    float _2124 = ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2098 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _536))) + ((_2104 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1271)) * cbPerFrame._m0[3u].x);
    float _2125 = ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_2100 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _536))) + ((_2106 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1271)) * cbPerFrame._m0[3u].x);
    float _2126 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    uint _2129 = _511 + 6u;
    float _2137 = _497 / cbSceneParam._m0[86u].x;
    float _2138 = _498 / cbSceneParam._m0[86u].y;
    vec4 _2152 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, (log2((isnan(cbSceneParam._m0[77u].w) ? _465 : (isnan(_465) ? cbSceneParam._m0[77u].w : min(_465, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2154 = _2152.x;
    float _2155 = _2152.y;
    float _2156 = _2152.z;
    float _2157 = _2152.w;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    if (_465 > cbSceneParam._m0[78u].w)
    {
        float _2216 = isnan(_465) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _465 : min(cbSceneParam._m0[80u].w, _465));
        float _2217 = _2216 / _465;
        float _2228 = _2217 * _258;
        float _2229 = _259 * _2217;
        float _2230 = (-0.0) - _2229;
        float _2231 = _2217 * _260;
        float _2233 = (cbSceneParam._m0[77u].w * _2230) / _2216;
        float _2234 = _2233 + cbSceneParam._m0[79u].w;
        float _2235 = cbSceneParam._m0[79u].w - _2229;
        float _2241 = sqrt(((_2228 * _2228) + (_2229 * _2229)) + (_2231 * _2231));
        float _2244 = (1.0 - (cbSceneParam._m0[77u].w / _2216)) * _2241;
        float _2249 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2251 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2474;
        if (abs((_2230 - _2233) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2474 = ((((_2234 > 0.0) ? exp2(_2249 * _2234) : (2.0 - exp2(_2251 * _2234))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2244;
        }
        else
        {
            float _2397 = 1.0 / cbSceneParam._m0[80u].x;
            float _2398 = isnan(_2235) ? _2234 : (isnan(_2234) ? _2235 : max(_2234, _2235));
            float _2399 = isnan(_2235) ? _2234 : (isnan(_2234) ? _2235 : min(_2234, _2235));
            float _2408 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : min(_2398, 0.0));
            float _2409 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : min(_2399, 0.0));
            _2474 = ((abs(_2241 / _2230) * cbSceneParam._m0[80u].y) * ((((_2408 - _2409) * 2.0) - ((exp2(_2249 * (isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0)))) - exp2(_2249 * (isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))))) * _2397)) - ((exp2(_2251 * _2408) - exp2(_2251 * _2409)) * _2397))) + (_2244 * cbSceneParam._m0[80u].z);
        }
        vec4 _2476 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, 1.0), 0.0);
        float _2485 = exp2((_2474 * (-1.44269502162933349609375)) * (1.0 - _2476.w));
        float _2486 = log2(_2485);
        float _2502 = log2(_2157);
        _2253 = (exp2(_2502 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].x)) * _2476.x) / cbSceneParam._m0[78u].x)) + _2154;
        _2255 = (exp2(_2502 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].y)) * _2476.y) / cbSceneParam._m0[78u].y)) + _2155;
        _2257 = (exp2(_2502 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2486 * cbSceneParam._m0[78u].z)) * _2476.z) / cbSceneParam._m0[78u].z)) + _2156;
        _2259 = _2485 * _2157;
    }
    else
    {
        _2253 = _2154;
        _2255 = _2155;
        _2257 = _2156;
        _2259 = _2157;
    }
    bool _2512;
    vec4 _2269;
    vec4 _2292;
    float _2294;
    float _2298;
    float _2299;
    float _2300;
    float _2301;
    bool _2312;
    for (;;)
    {
        _2269 = cbMatDynParam._m0[0u];
        float _2271 = roundEven(_2269.y);
        bool _2272 = _2271 == 3.0;
        float _2274 = log2(_2259);
        float _2281 = exp2(_2274 * cbSceneParam._m0[78u].x) * _2126;
        float _2282 = exp2(_2274 * cbSceneParam._m0[78u].y) * _2127;
        float _2283 = exp2(_2274 * cbSceneParam._m0[78u].z) * _2128;
        float _2290 = _479 + (-0.5);
        _2292 = cbMtdParam._m0[1u];
        _2294 = _2292.y * _2290;
        float _2297 = (_2271 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2298 = _2297 * (_2272 ? _2281 : (_2281 + (cbSceneParam._m0[72u].w * _2253)));
        _2299 = _2297 * (_2272 ? _2282 : (_2282 + (cbSceneParam._m0[72u].w * _2255)));
        _2300 = _2297 * (_2272 ? _2283 : (_2283 + (cbSceneParam._m0[72u].w * _2257)));
        _2301 = _2290 * 0.999000012874603271484375;
        _2312 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2312)
        {
            if ((cbInstanceData._m0[_511 + 7u].x + _2301) < 0.5)
            {
                _2512 = true;
                break;
            }
        }
        uint _2432 = _512 + uint(_2269.w);
        if ((cbInstanceData._m0[_2432].w < 1.0) && ((cbInstanceData._m0[_2432].w + _2301) < 0.5))
        {
            _2512 = true;
            break;
        }
        if ((_2294 + 1.0) < _2292.x)
        {
            _2512 = true;
            break;
        }
        _2512 = false;
        break;
    }
    float _2667;
    if (_2512)
    {
        discard_state = true;
        _2667 = 0.0;
    }
    else
    {
        _2667 = cbInstanceData._m0[_2129].w;
    }
    SV_Target.x = _2298;
    SV_Target.y = _2299;
    SV_Target.z = _2300;
    SV_Target.w = _2667;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2129].w;
    discard_exit();
}


