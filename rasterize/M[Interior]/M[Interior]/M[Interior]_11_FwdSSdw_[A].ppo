#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _833;
float _2789;
float _2790;
float _2791;
float _2792;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _315 = cbMtdParam._m0[21u].w + _256;
    float _316 = cbMtdParam._m0[22u].x + _257;
    float _317 = cbMtdParam._m0[22u].y + _258;
    float _334 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _335 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _336 = (-0.0) - dot(vec3(_315, _316, _317), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _340 = inversesqrt(dot(vec3(_334, _335, _336), vec3(_334, _335, _336)));
    float _343 = _340 * _336;
    float _346 = ((_340 * _334) + (((_280.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _347 = ((_340 * _335) + (((_280.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _348 = fract(TEXCOORD.x);
    float _349 = fract(TEXCOORD.y);
    float _355;
    if (_346 > 0.0)
    {
        _355 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _355 = frontier_phi_3_2_ladder;
    }
    float _363;
    if (_347 > 0.0)
    {
        _363 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _363 = frontier_phi_7_6_ladder;
    }
    float _367 = (_343 > 0.0) ? (cbMtdParam._m0[15u].x / _343) : 5000.0;
    float _368 = isnan(_363) ? _355 : (isnan(_355) ? _363 : min(_355, _363));
    float _369 = isnan(_367) ? _368 : (isnan(_368) ? _367 : min(_368, _367));
    float _373 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = ((_369 * _343) + _373) / _373;
    vec4 _404 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_348 + (-0.5)) + (_369 * _346)) / _380) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_349 + (-0.5)) + (_369 * _347)) / _380) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _414 = cbMtdParam._m0[9u].x * _404.x;
    float _415 = cbMtdParam._m0[9u].y * _404.y;
    float _416 = cbMtdParam._m0[9u].z * _404.z;
    float _2811 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _2822 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _2833 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _435 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _440 = _256 * _439;
    float _441 = _257 * _439;
    float _442 = _258 * _439;
    vec4 _447 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _449 = _447.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _546 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _553 = (cbMatDynParam._m0[5u].x * _546) + cbMatDynParam._m0[5u].y;
        float _2844 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _546) + cbMatDynParam._m0[5u].w;
        float _2855 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0))) - _554)) + _554) < ((_449 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _462 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _463 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _476 = uint(roundEven(NORMAL.w)) * 13u;
    uint _478 = _476 + 9u;
    uint _479 = _478 + uint(cbMatDynParam._m0[0u].w);
    float _485 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2811 : (isnan(_2811) ? 1.0 : min(_2811, 1.0)))) * cbInstanceData._m0[_479].x;
    float _486 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0)))) * cbInstanceData._m0[_479].y;
    float _487 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * cbInstanceData._m0[_479].z;
    float _2866 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
    float _2877 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0));
    float _2888 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0));
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _462, cbSceneParam._m0[86u].y * _463));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = (-0.0) - _440;
    float _504 = (-0.0) - _441;
    float _505 = (-0.0) - _442;
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _832;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = (cbModelParam._m0[37u].x * ((((fma(_535, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _622 = (cbModelParam._m0[37u].y * ((((fma(_535, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _623 = (((((fma(_535, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        float _660 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_626.x + (-0.5));
        float _662 = _660 * (_626.y + (-0.5));
        float _663 = _660 * (_626.z + (-0.5));
        float _670 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_633.x + (-0.5));
        float _672 = _670 * (_633.y + (-0.5));
        float _673 = _670 * (_633.z + (-0.5));
        float _680 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_640.x + (-0.5));
        float _682 = _680 * (_640.y + (-0.5));
        float _683 = _680 * (_640.z + (-0.5));
        float _690 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_647.x + (-0.5));
        float _692 = _690 * (_647.y + (-0.5));
        float _693 = _690 * (_647.z + (-0.5));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = _661 * 0.5;
        float _698 = _671 * 0.5;
        float _699 = _681 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _714 = (dot(vec3(0.0), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _2914 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _724 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _2925 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _2936 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0))) * (_726 + 1.0))) + _731) * _694;
        float _741 = _662 * 0.5;
        float _742 = _672 * 0.5;
        float _743 = _682 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(0.0), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _2947 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _2958 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _2969 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0))) * (_768 + 1.0))) + _773) * _695;
        float _783 = _663 * 0.5;
        float _784 = _673 * 0.5;
        float _785 = _683 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(0.0), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _2980 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _2991 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3002 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0))) * (_810 + 1.0))) + _815) * _696;
        _832 = _663;
        _834 = _662;
        _835 = _661;
        _836 = _673;
        _837 = _672;
        _838 = _671;
        _839 = _683;
        _840 = _682;
        _841 = _681;
        _842 = _696;
        _843 = _695;
        _844 = _694;
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
    }
    else
    {
        _832 = _833;
        _834 = _833;
        _835 = _833;
        _836 = _833;
        _837 = _833;
        _838 = _833;
        _839 = _833;
        _840 = _833;
        _841 = _833;
        _842 = _833;
        _843 = _833;
        _844 = _833;
        _845 = 0.0;
        _846 = 0.0;
        _847 = 0.0;
    }
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = (cbModelParam._m0[38u].x * ((((fma(_535, cbModelParam._m0[30u].z, fma(_531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _527)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _905 = (cbModelParam._m0[38u].y * ((((fma(_535, cbModelParam._m0[31u].z, fma(_531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _527)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _906 = (((((fma(_535, cbModelParam._m0[32u].z, fma(_531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _527)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _941 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_908.x + (-0.5));
        float _943 = _941 * (_908.y + (-0.5));
        float _944 = _941 * (_908.z + (-0.5));
        float _951 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_915.x + (-0.5));
        float _953 = _951 * (_915.y + (-0.5));
        float _954 = _951 * (_915.z + (-0.5));
        float _961 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_922.x + (-0.5));
        float _963 = _961 * (_922.y + (-0.5));
        float _964 = _961 * (_922.z + (-0.5));
        float _971 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_929.x + (-0.5));
        float _973 = _971 * (_929.y + (-0.5));
        float _974 = _971 * (_929.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(0.0), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3043 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3054 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3065 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0))) * (_1005 + 1.0))) + _1010) * _975;
        float _1020 = _943 * 0.5;
        float _1021 = _953 * 0.5;
        float _1022 = _963 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(0.0), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3076 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3087 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3098 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0))) * (_1047 + 1.0))) + _1052) * _976;
        float _1062 = _944 * 0.5;
        float _1063 = _954 * 0.5;
        float _1064 = _964 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(0.0), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3109 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3120 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3131 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (_1089 + 1.0))) + _1094) * _977;
        _1111 = _944;
        _1112 = _943;
        _1113 = _942;
        _1114 = _954;
        _1115 = _953;
        _1116 = _952;
        _1117 = _964;
        _1118 = _963;
        _1119 = _962;
        _1120 = _977;
        _1121 = _976;
        _1122 = _975;
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _833;
        _1112 = _833;
        _1113 = _833;
        _1114 = _833;
        _1115 = _833;
        _1116 = _833;
        _1117 = _833;
        _1118 = _833;
        _1119 = _833;
        _1120 = _833;
        _1121 = _833;
        _1122 = _833;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _845)) + _845;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _846)) + _846;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _847)) + _847;
    float _1158 = fma(_1137, cbSceneParam._m0[89u].z, fma(_1136, cbSceneParam._m0[89u].y, _1135 * cbSceneParam._m0[89u].x));
    float _1161 = fma(_1137, cbSceneParam._m0[90u].z, fma(_1136, cbSceneParam._m0[90u].y, _1135 * cbSceneParam._m0[90u].x));
    float _1164 = fma(_1137, cbSceneParam._m0[91u].z, fma(_1136, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1135));
    float _1179 = _440 * (-0.5);
    float _1180 = _441 * (-0.5);
    float _1181 = _442 * (-0.5);
    float _1182 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1185 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1188 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1222;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1195 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_832, _836, _839, _842));
        float _1199 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_834, _837, _840, _843));
        float _1203 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_835, _838, _841, _844));
        float _1210 = dot(vec4(cbModelParam._m0[39u]), vec4(_1179, _1180, _1181, 1.0));
        _1222 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1222 = 1.0;
    }
    float _1233;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1224 = dot(vec4(cbModelParam._m0[40u]), vec4(_1179, _1180, _1181, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1237 = (_1233 * cbModelParam._m0[1u].x) + (_1222 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_535, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_535, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_535, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_505, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503));
        float _1309 = fma(_505, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503));
        float _1312 = fma(_505, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503));
        float _1338;
        if (_1306 > 0.0)
        {
            _1338 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1338 = frontier_phi_25_23_ladder;
        }
        float _1658;
        if (_1309 > 0.0)
        {
            _1658 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1658 = frontier_phi_34_30_ladder;
        }
        float _1969;
        if (_1312 > 0.0)
        {
            _1969 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1969 = frontier_phi_48_41_ladder;
        }
        float _1971 = isnan(_1658) ? _1338 : (isnan(_1338) ? _1658 : min(_1338, _1658));
        float _1972 = isnan(_1969) ? _1971 : (isnan(_1971) ? _1969 : min(_1971, _1969));
        float _1976 = (_1972 * _1306) + _1295;
        float _1977 = (_1972 * _1309) + _1299;
        float _1978 = (_1972 * _1312) + _1303;
        float _1979 = _1972 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1979;
        float _1982 = _1979 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1978 > _1982) || ((_1978 < _1980) || ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 < _1980) || (_1976 > _1982))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1978, cbModelParam._m0[9u].z, fma(_1977, cbModelParam._m0[9u].y, _1976 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1978, cbModelParam._m0[10u].z, fma(_1977, cbModelParam._m0[10u].y, _1976 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1978, cbModelParam._m0[11u].z, fma(_1977, cbModelParam._m0[11u].y, _1976 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_24_48_ladder = _2117.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2117.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2117.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_24_48_ladder_2;
        _1330 = frontier_phi_24_48_ladder_1;
        _1332 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_503, _504, _505), _1246);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1335 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1387 = fma(_535, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527)) + cbModelParam._m0[21u].w;
        float _1391 = fma(_535, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527)) + cbModelParam._m0[22u].w;
        float _1395 = fma(_535, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527)) + cbModelParam._m0[23u].w;
        float _1398 = fma(_505, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503));
        float _1401 = fma(_505, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503));
        float _1404 = fma(_505, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503));
        float _1663;
        if (_1398 > 0.0)
        {
            _1663 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1663 = frontier_phi_36_32_ladder;
        }
        float _1995;
        if (_1401 > 0.0)
        {
            _1995 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1995 = frontier_phi_50_43_ladder;
        }
        float _2182;
        if (_1404 > 0.0)
        {
            _2182 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2182 = frontier_phi_68_61_ladder;
        }
        float _2184 = isnan(_1995) ? _1663 : (isnan(_1663) ? _1995 : min(_1663, _1995));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1398) + _1387;
        float _2190 = (_2185 * _1401) + _1391;
        float _2191 = (_2185 * _1404) + _1395;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2192;
        float _2195 = _2192 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2191 > _2195) || ((_2191 < _2193) || ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 < _2193) || (_2189 > _2195))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2191, cbModelParam._m0[17u].z, fma(_2190, cbModelParam._m0[17u].y, _2189 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2191, cbModelParam._m0[18u].z, fma(_2190, cbModelParam._m0[18u].y, _2189 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2191, cbModelParam._m0[19u].z, fma(_2190, cbModelParam._m0[19u].y, _2189 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_33_68_ladder = _2383.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2383.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2383.x * cbModelParam._m0[1u].z;
        }
        _1423 = frontier_phi_33_68_ladder_2;
        _1425 = frontier_phi_33_68_ladder;
        _1427 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_503, _504, _505), _1335);
        _1423 = _1407.x * cbModelParam._m0[1u].z;
        _1425 = _1407.y * cbModelParam._m0[1u].z;
        _1427 = _1407.z * cbModelParam._m0[1u].z;
    }
    float _1439 = _502 * 0.01200000010430812835693359375;
    float _1441 = _1439 * ((cbModelParam._m0[1u].w * (_1423 - _1328)) + _1328);
    float _1442 = _1439 * ((cbModelParam._m0[1u].w * (_1425 - _1330)) + _1330);
    float _1443 = _1439 * ((cbModelParam._m0[1u].w * (_1427 - _1332)) + _1332);
    float _1446 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, _1441 * cbSceneParam._m0[91u].x));
    vec4 _1460 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_462, _463));
    float _1462 = _1460.w;
    float _1475 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1462);
    float _1476 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1462);
    float _1477 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1462);
    uvec4 _1481 = floatBitsToUint(cbInstanceData._m0[_476 + 5u]);
    uint _1483 = _1481.x * 14u;
    uint _1484 = _1483 + 13u;
    float _1489 = _502 + (-1.0);
    float _1492 = (cbLight._m0[_1484].x * _1489) + 1.0;
    float _1493 = (cbLight._m0[_1484].y * _1489) + 1.0;
    uint _1494 = _1483 + 5u;
    float _1500 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
    uint _1504 = _1483 + 4u;
    float _1513 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
    uint _1517 = _1483 | 1u;
    float _1528 = dot(vec3(cbLight._m0[_1483].xyz), vec3(0.0));
    float _1531 = dot(vec3(cbLight._m0[_1517].xyz), vec3(0.0));
    float _3267 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _3278 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
    float _1536 = (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * 0.3183098733425140380859375;
    float _1538 = (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * 0.3183098733425140380859375;
    float _1545 = ((cbLight._m0[_1494].x * _1500) * _1538) + (((cbLight._m0[_1504].x * _1475) * _1513) * _1536);
    float _1546 = ((_1500 * cbLight._m0[_1494].y) * _1538) + (((cbLight._m0[_1504].y * _1476) * _1513) * _1536);
    float _1547 = ((_1500 * cbLight._m0[_1494].z) * _1538) + (((cbLight._m0[_1504].z * _1477) * _1513) * _1536);
    uint _1548 = _1483 + 8u;
    float _1554 = cbLight._m0[_1483].x + _440;
    float _1555 = cbLight._m0[_1483].y + _441;
    float _1556 = cbLight._m0[_1483].z + _442;
    float _1560 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
    float _1564 = dot(vec3(0.0), vec3(cbLight._m0[_1483].xyz));
    float _3289 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _1567 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _1568 = dot(vec3(0.0), vec3(_440, _441, _442));
    float _3300 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1571 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _1572 = dot(vec3(cbLight._m0[_1483].xyz), vec3(_1554 * _1560, _1555 * _1560, _1556 * _1560));
    float _3311 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1583 = (exp2(log2(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1589 = (0.5 / ((_1567 + 9.9999999392252902907785028219223e-09) + _1571)) * _1567;
    float _3322 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1591 = (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * 0.31831014156341552734375;
    uint _1605 = _1483 + 9u;
    float _1611 = cbLight._m0[_1517].x + _440;
    float _1612 = cbLight._m0[_1517].y + _441;
    float _1613 = cbLight._m0[_1517].z + _442;
    float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
    float _1621 = dot(vec3(0.0), vec3(cbLight._m0[_1517].xyz));
    float _3333 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _1625 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_1611 * _1617, _1612 * _1617, _1613 * _1617));
    float _3344 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1638 = (0.5 / ((_1624 + 9.9999999392252902907785028219223e-09) + _1571)) * _1624;
    float _3355 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1640 = (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.31831014156341552734375;
    float _1650 = (((_1634 * cbLight._m0[_1605].x) * _1640) * _1500) + ((((cbLight._m0[_1548].x * _1475) * _1583) * _1591) * _1513);
    float _1651 = (((_1634 * cbLight._m0[_1605].y) * _1640) * _1500) + ((((cbLight._m0[_1548].y * _1476) * _1583) * _1591) * _1513);
    float _1652 = (((_1634 * cbLight._m0[_1605].z) * _1640) * _1500) + ((((cbLight._m0[_1548].z * _1477) * _1583) * _1591) * _1513);
    float _1768;
    float _1770;
    float _1772;
    float _1774;
    float _1776;
    float _1778;
    if (_1481.y == 0u)
    {
        float _1708 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1708;
        float _1710 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1708;
        float _1711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1708;
        uvec4 _1723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1724 = _1723.x;
        uint _1735 = uint((float(_1723.y) * floor(float(uint(cbSceneParam._m0[85u].y * _463) / _1724))) + floor(float(uint(cbSceneParam._m0[85u].x * _462) / _1724)));
        float _1745 = (log2(_1711 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1746 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        uint _1749 = uint(isnan(14.0) ? _1746 : (isnan(_1746) ? 14.0 : min(_1746, 14.0)));
        uvec4 _1754 = texelFetch(g_lightClusterGridBuffer, int(((_1749 << 2u) + (_1735 << 6u)) >> 2u));
        uint _1755 = _1754.x;
        uint _1756 = _1723.z;
        float _1846;
        float _1848;
        float _1850;
        float _1852;
        float _1854;
        float _1856;
        if (((((1u << ((_1756 >> 4u) & 15u)) + 4294967295u) & _1755) == 0u) || ((_1756 & 240u) == 0u))
        {
            _1846 = 0.0;
            _1848 = 0.0;
            _1850 = 0.0;
            _1852 = 0.0;
            _1854 = 0.0;
            _1856 = 0.0;
        }
        else
        {
            float _1847;
            float _1849;
            float _1851;
            float _1853;
            float _1855;
            float _1857;
            float _2029 = 0.0;
            float _2030 = 0.0;
            float _2031 = 0.0;
            float _2032 = 0.0;
            float _2033 = 0.0;
            float _2034 = 0.0;
            uint _2035 = 0u;
            uint _2044;
            bool _2045;
            for (;;)
            {
                _2044 = texelFetch(g_lightClassification, int((((_1749 << 5u) + (_1735 << 9u)) + (_2035 << 2u)) >> 2u)).x;
                _2045 = _2044 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2045)
                {
                    frontier_phi_63_pred = _2031;
                    frontier_phi_63_pred_1 = _2034;
                    frontier_phi_63_pred_2 = _2033;
                    frontier_phi_63_pred_3 = _2032;
                    frontier_phi_63_pred_4 = _2030;
                    frontier_phi_63_pred_5 = _2029;
                }
                else
                {
                    float _2225;
                    float _2226;
                    float _2227;
                    float _2228;
                    float _2229;
                    float _2230;
                    uint _2231;
                    _2225 = _2029;
                    _2226 = _2030;
                    _2227 = _2031;
                    _2228 = _2032;
                    _2229 = _2033;
                    _2230 = _2034;
                    _2231 = _2044;
                    float _2126;
                    float _2127;
                    float _2128;
                    float _2129;
                    float _2130;
                    float _2131;
                    for (;;)
                    {
                        uint _2235 = uint(findLSB(_2231)) + (_2035 << 5u);
                        uint _2232 = (_2231 + 4294967295u) & _2231;
                        uint _2237 = _2235 * 48u;
                        vec4 _2251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2237)).x, texelFetch(g_PointLightRenderingBuffer, int(_2237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2237 + 3u)).x));
                        uint _2257 = (_2235 * 48u) + 4u;
                        vec4 _2270 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2257)).x, texelFetch(g_PointLightRenderingBuffer, int(_2257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2257 + 3u)).x));
                        uint _2276 = (_2235 * 48u) + 8u;
                        vec3 _2287 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2276)).x, texelFetch(g_PointLightRenderingBuffer, int(_2276 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2276 + 2u)).x));
                        float _2291 = _2251.x - _1709;
                        float _2292 = _2251.y - _1710;
                        float _2293 = _2251.z - _1711;
                        float _2294 = dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293));
                        float _2297 = inversesqrt(_2294);
                        float _2306 = 1.0 - (_2294 * _2251.w);
                        float _3376 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
                        float _2307 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
                        float _2308 = sqrt(_2294) * _2270.w;
                        float _2311 = 1.39999997615814208984375 / (_2308 + 1.39999997615814208984375);
                        float _2312 = _2311 * _2311;
                        float _2315 = ((1.0 - _2312) * dot(vec3(0.0), vec3(_2297 * _2291, _2297 * _2292, _2297 * _2293))) + _2312;
                        float _2318 = _2308 * _2308;
                        float _2322 = ((isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0))) * _2307) / ((_2318 * 0.699999988079071044921875) + 1.0);
                        float _2326 = (-0.0) - _1709;
                        float _2327 = (-0.0) - _1710;
                        float _2328 = (-0.0) - _1711;
                        float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
                        float _2336 = dot(vec3(0.0), vec3(_2332 * _2326, _2332 * _2327, _2332 * _2328));
                        float _3392 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
                        float _3403 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
                        float _2340 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
                        float _2344 = (0.5 / (((isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) + 9.9999999392252902907785028219223e-09) + _2340)) * _2340;
                        float _3414 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
                        float _2353 = (((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * 3.1415927410125732421875) / ((_2318 * 2.1991131305694580078125) + 3.141590118408203125)) * _2307;
                        _2129 = (_2322 * _2270.x) + _2228;
                        _2130 = (_2322 * _2270.y) + _2229;
                        _2131 = (_2322 * _2270.z) + _2230;
                        _2126 = (_2353 * _2287.x) + _2225;
                        _2127 = (_2353 * _2287.y) + _2226;
                        _2128 = (_2353 * _2287.z) + _2227;
                        if (_2232 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2225 = _2126;
                            _2226 = _2127;
                            _2227 = _2128;
                            _2228 = _2129;
                            _2229 = _2130;
                            _2230 = _2131;
                            _2231 = _2232;
                        }
                    }
                    frontier_phi_63_pred = _2128;
                    frontier_phi_63_pred_1 = _2131;
                    frontier_phi_63_pred_2 = _2130;
                    frontier_phi_63_pred_3 = _2129;
                    frontier_phi_63_pred_4 = _2127;
                    frontier_phi_63_pred_5 = _2126;
                }
                _1851 = frontier_phi_63_pred;
                _1857 = frontier_phi_63_pred_1;
                _1855 = frontier_phi_63_pred_2;
                _1853 = frontier_phi_63_pred_3;
                _1849 = frontier_phi_63_pred_4;
                _1847 = frontier_phi_63_pred_5;
                uint _2036 = _2035 + 1u;
                if (_2036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2029 = _1847;
                    _2030 = _1849;
                    _2031 = _1851;
                    _2032 = _1853;
                    _2033 = _1855;
                    _2034 = _1857;
                    _2035 = _2036;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1846 = _1847;
            _1848 = _1849;
            _1850 = _1851;
            _1852 = _1853;
            _1854 = _1855;
            _1856 = _1857;
        }
        uvec4 _1860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1861 = _1860.z;
        uint _1863 = (_1861 >> 8u) & 15u;
        float _2000;
        float _2002;
        float _2004;
        float _2006;
        float _2008;
        float _2010;
        if (((4294967295u << _1863) & _1755) == 0u)
        {
            _2000 = _1846;
            _2002 = _1848;
            _2004 = _1850;
            _2006 = _1852;
            _2008 = _1854;
            _2010 = _1856;
        }
        else
        {
            float _2025 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1863 < ((_1861 >> 12u) & 15u))
            {
                float _2001;
                float _2003;
                float _2005;
                float _2007;
                float _2009;
                float _2011;
                float _2208 = _1846;
                float _2209 = _1848;
                float _2210 = _1850;
                float _2211 = _1852;
                float _2212 = _1854;
                float _2213 = _1856;
                uint _2214 = _1863;
                uint _2223;
                bool _2224;
                for (;;)
                {
                    _2223 = texelFetch(g_lightClassification, int((((_1749 << 5u) + (_1735 << 9u)) + (_2214 << 2u)) >> 2u)).x;
                    _2224 = _2223 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2224)
                    {
                        frontier_phi_77_pred = _2213;
                        frontier_phi_77_pred_1 = _2212;
                        frontier_phi_77_pred_2 = _2211;
                        frontier_phi_77_pred_3 = _2210;
                        frontier_phi_77_pred_4 = _2209;
                        frontier_phi_77_pred_5 = _2208;
                    }
                    else
                    {
                        float _2388;
                        float _2389;
                        float _2390;
                        float _2391;
                        float _2392;
                        float _2393;
                        float _2638;
                        float _2639;
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2401 = _2208;
                        float _2402 = _2209;
                        float _2403 = _2210;
                        float _2404 = _2211;
                        float _2405 = _2212;
                        float _2406 = _2213;
                        uint _2407 = _2223;
                        uint _2408;
                        vec4 _2433;
                        float _2434;
                        vec4 _2449;
                        vec3 _2461;
                        vec4 _2477;
                        vec4 _2492;
                        float _2538;
                        bool _2539;
                        for (;;)
                        {
                            uint _2418 = ((_2214 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2407));
                            _2408 = (_2407 + 4294967295u) & _2407;
                            uint _2420 = _2418 * 40u;
                            _2433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 3u)).x));
                            _2434 = _2433.w;
                            uint _2436 = (_2418 * 40u) + 4u;
                            _2449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 3u)).x));
                            uint _2451 = (_2418 * 40u) + 8u;
                            _2461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2451 + 2u)).x));
                            uint _2464 = (_2418 * 40u) + 16u;
                            _2477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2464 + 3u)).x));
                            uint _2479 = (_2418 * 40u) + 20u;
                            _2492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 3u)).x));
                            uint _2494 = (_2418 * 40u) + 24u;
                            vec4 _2507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2494 + 3u)).x));
                            uint _2513 = (_2418 * 40u) + 28u;
                            vec4 _2526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 3u)).x));
                            _2538 = fma(_1711, _2526.z, fma(_1710, _2526.y, _2526.x * _1709)) + _2526.w;
                            _2539 = !((fma(_1711, _2507.z, fma(_1710, _2507.y, _2507.x * _1709)) + _2507.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2539)
                            {
                                float _2566 = _2433.x - _1709;
                                float _2567 = _2433.y - _1710;
                                float _2568 = _2433.z - _1711;
                                float _2569 = dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568));
                                float _2572 = inversesqrt(_2569);
                                float _2573 = _2572 * _2566;
                                float _2574 = _2572 * _2567;
                                float _2575 = _2572 * _2568;
                                float _2579 = 1.0 - (_2569 / (_2434 * _2434));
                                float _3425 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                                float _2580 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
                                float _2584 = sqrt(_2569) * _2449.w;
                                float _2586 = 1.39999997615814208984375 / (_2584 + 1.39999997615814208984375);
                                float _2587 = _2586 * _2586;
                                float _2588 = 1.0 - _2587;
                                float _2590 = (_2588 * dot(vec3(_2573, _2574, _2575), vec3(0.0))) + _2587;
                                float _2593 = _2584 * _2584;
                                float _2597 = (fma(_1711, _2477.z, fma(_1710, _2477.y, _2477.x * _1709)) + _2477.w) / _2538;
                                float _2598 = (fma(_1711, _2492.z, fma(_1710, _2492.y, _2492.x * _1709)) + _2492.w) / _2538;
                                float _2602 = 1.0 - dot(vec2(_2597, _2598), vec2(_2597, _2598));
                                float _3441 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                                float _2603 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
                                float _2604 = _2603 * (((isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))) * _2580) / ((_2593 * 0.699999988079071044921875) + 1.0));
                                float _2614 = dot(vec3(0.0), vec3((-0.0) - (_1709 * _2025), (-0.0) - (_1710 * _2025), (-0.0) - (_1711 * _2025)));
                                float _3452 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
                                float _2622 = (_2588 * dot(vec3(0.0), vec3(_2573, _2574, _2575))) + _2587;
                                float _3463 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                                float _2623 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
                                float _2627 = (0.5 / (((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) + 9.9999999392252902907785028219223e-09) + _2623)) * _2623;
                                float _3474 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                                float _2634 = (_2603 * _2580) * (((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 3.1415927410125732421875) / ((_2593 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2604 * _2449.x;
                                frontier_phi_83_pred_1 = _2604 * _2449.z;
                                frontier_phi_83_pred_2 = _2604 * _2449.y;
                                frontier_phi_83_pred_3 = _2634 * _2461.z;
                                frontier_phi_83_pred_4 = _2634 * _2461.y;
                                frontier_phi_83_pred_5 = _2634 * _2461.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2641 = frontier_phi_83_pred;
                            _2643 = frontier_phi_83_pred_1;
                            _2642 = frontier_phi_83_pred_2;
                            _2640 = frontier_phi_83_pred_3;
                            _2639 = frontier_phi_83_pred_4;
                            _2638 = frontier_phi_83_pred_5;
                            _2391 = _2641 + _2404;
                            _2392 = _2642 + _2405;
                            _2393 = _2643 + _2406;
                            _2388 = _2638 + _2401;
                            _2389 = _2639 + _2402;
                            _2390 = _2640 + _2403;
                            if (_2408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2401 = _2388;
                                _2402 = _2389;
                                _2403 = _2390;
                                _2404 = _2391;
                                _2405 = _2392;
                                _2406 = _2393;
                                _2407 = _2408;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2393;
                        frontier_phi_77_pred_1 = _2392;
                        frontier_phi_77_pred_2 = _2391;
                        frontier_phi_77_pred_3 = _2390;
                        frontier_phi_77_pred_4 = _2389;
                        frontier_phi_77_pred_5 = _2388;
                    }
                    _2011 = frontier_phi_77_pred;
                    _2009 = frontier_phi_77_pred_1;
                    _2007 = frontier_phi_77_pred_2;
                    _2005 = frontier_phi_77_pred_3;
                    _2003 = frontier_phi_77_pred_4;
                    _2001 = frontier_phi_77_pred_5;
                    uint _2215 = _2214 + 1u;
                    if (_2215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2208 = _2001;
                        _2209 = _2003;
                        _2210 = _2005;
                        _2211 = _2007;
                        _2212 = _2009;
                        _2213 = _2011;
                        _2214 = _2215;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2003;
                frontier_phi_52_53_ladder_1 = _2011;
                frontier_phi_52_53_ladder_2 = _2009;
                frontier_phi_52_53_ladder_3 = _2007;
                frontier_phi_52_53_ladder_4 = _2005;
                frontier_phi_52_53_ladder_5 = _2001;
            }
            else
            {
                frontier_phi_52_53_ladder = _1848;
                frontier_phi_52_53_ladder_1 = _1856;
                frontier_phi_52_53_ladder_2 = _1854;
                frontier_phi_52_53_ladder_3 = _1852;
                frontier_phi_52_53_ladder_4 = _1850;
                frontier_phi_52_53_ladder_5 = _1846;
            }
            _2000 = frontier_phi_52_53_ladder_5;
            _2002 = frontier_phi_52_53_ladder;
            _2004 = frontier_phi_52_53_ladder_4;
            _2006 = frontier_phi_52_53_ladder_3;
            _2008 = frontier_phi_52_53_ladder_2;
            _2010 = frontier_phi_52_53_ladder_1;
        }
        float _2015 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _1768 = (_2015 * _2006) + _1545;
        _1770 = (_2015 * _2008) + _1546;
        _1772 = (_2015 * _2010) + _1547;
        _1774 = ((_2000 * 0.039999999105930328369140625) * _2015) + _1650;
        _1776 = ((_2002 * 0.039999999105930328369140625) * _2015) + _1651;
        _1778 = ((_2004 * 0.039999999105930328369140625) * _2015) + _1652;
    }
    else
    {
        _1768 = _1545;
        _1770 = _1546;
        _1772 = _1547;
        _1774 = _1650;
        _1776 = _1651;
        _1778 = _1652;
    }
    float _3490 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3501 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3512 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _1795 = ((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1768 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _502))) + ((_1774 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _1796 = ((isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1770 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _502))) + ((_1776 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _1797 = ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1772 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _502))) + ((_1778 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    uint _1801 = _476 + 6u;
    float _1809 = _462 / cbSceneParam._m0[86u].x;
    float _1810 = _463 / cbSceneParam._m0[86u].y;
    vec4 _1824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1809, _1810, (log2((isnan(cbSceneParam._m0[77u].w) ? _435 : (isnan(_435) ? cbSceneParam._m0[77u].w : min(_435, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1826 = _1824.x;
    float _1827 = _1824.y;
    float _1828 = _1824.z;
    float _1829 = _1824.w;
    float _1909;
    float _1911;
    float _1913;
    float _1915;
    if (_435 > cbSceneParam._m0[78u].w)
    {
        float _1871 = isnan(_435) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _435 : min(cbSceneParam._m0[80u].w, _435));
        float _1872 = _1871 / _435;
        float _1883 = _1872 * _256;
        float _1884 = _257 * _1872;
        float _1885 = (-0.0) - _1884;
        float _1886 = _1872 * _258;
        float _1888 = (cbSceneParam._m0[77u].w * _1885) / _1871;
        float _1889 = _1888 + cbSceneParam._m0[79u].w;
        float _1890 = cbSceneParam._m0[79u].w - _1884;
        float _1896 = sqrt(((_1883 * _1883) + (_1884 * _1884)) + (_1886 * _1886));
        float _1899 = (1.0 - (cbSceneParam._m0[77u].w / _1871)) * _1896;
        float _1905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2139;
        if (abs((_1885 - _1888) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2139 = ((((_1889 > 0.0) ? exp2(_1905 * _1889) : (2.0 - exp2(_1907 * _1889))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1899;
        }
        else
        {
            float _2058 = 1.0 / cbSceneParam._m0[80u].x;
            float _2059 = isnan(_1890) ? _1889 : (isnan(_1889) ? _1890 : max(_1889, _1890));
            float _2060 = isnan(_1890) ? _1889 : (isnan(_1889) ? _1890 : min(_1889, _1890));
            float _2069 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : min(_2059, 0.0));
            float _2070 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : min(_2060, 0.0));
            _2139 = ((abs(_1896 / _1885) * cbSceneParam._m0[80u].y) * ((((_2069 - _2070) * 2.0) - ((exp2(_1905 * (isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)))) - exp2(_1905 * (isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))))) * _2058)) - ((exp2(_1907 * _2069) - exp2(_1907 * _2070)) * _2058))) + (_1899 * cbSceneParam._m0[80u].z);
        }
        vec4 _2141 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1809, _1810, 1.0), 0.0);
        float _2150 = exp2((_2139 * (-1.44269502162933349609375)) * (1.0 - _2141.w));
        float _2151 = log2(_2150);
        float _2167 = log2(_1829);
        _1909 = (exp2(_2167 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2151 * cbSceneParam._m0[78u].x)) * _2141.x) / cbSceneParam._m0[78u].x)) + _1826;
        _1911 = (exp2(_2167 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2151 * cbSceneParam._m0[78u].y)) * _2141.y) / cbSceneParam._m0[78u].y)) + _1827;
        _1913 = (exp2(_2167 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2151 * cbSceneParam._m0[78u].z)) * _2141.z) / cbSceneParam._m0[78u].z)) + _1828;
        _1915 = _2150 * _1829;
    }
    else
    {
        _1909 = _1826;
        _1911 = _1827;
        _1913 = _1828;
        _1915 = _1829;
    }
    bool _2177;
    vec4 _1925;
    vec4 _1948;
    float _1950;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    bool _1968;
    for (;;)
    {
        _1925 = cbMatDynParam._m0[0u];
        float _1927 = roundEven(_1925.y);
        bool _1928 = _1927 == 3.0;
        float _1930 = log2(_1915);
        float _1937 = exp2(_1930 * cbSceneParam._m0[78u].x) * _1798;
        float _1938 = exp2(_1930 * cbSceneParam._m0[78u].y) * _1799;
        float _1939 = exp2(_1930 * cbSceneParam._m0[78u].z) * _1800;
        float _1946 = _449 + (-0.5);
        _1948 = cbMtdParam._m0[1u];
        _1950 = _1948.y * _1946;
        float _1953 = (_1927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1954 = _1953 * (_1928 ? _1937 : (_1937 + (cbSceneParam._m0[72u].w * _1909)));
        _1955 = _1953 * (_1928 ? _1938 : (_1938 + (cbSceneParam._m0[72u].w * _1911)));
        _1956 = _1953 * (_1928 ? _1939 : (_1939 + (cbSceneParam._m0[72u].w * _1913)));
        _1957 = _1946 * 0.999000012874603271484375;
        _1968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1968)
        {
            if ((cbInstanceData._m0[_476 + 7u].x + _1957) < 0.5)
            {
                _2177 = true;
                break;
            }
        }
        uint _2093 = _478 + uint(_1925.w);
        if ((cbInstanceData._m0[_2093].w < 1.0) && ((cbInstanceData._m0[_2093].w + _1957) < 0.5))
        {
            _2177 = true;
            break;
        }
        if ((_1950 + 1.0) < _1948.x)
        {
            _2177 = true;
            break;
        }
        _2177 = false;
        break;
    }
    float _2358;
    if (_2177)
    {
        discard_state = true;
        _2358 = 0.0;
    }
    else
    {
        _2358 = cbInstanceData._m0[_1801].w;
    }
    SV_Target.x = _1954;
    SV_Target.y = _1955;
    SV_Target.z = _1956;
    SV_Target.w = _2358;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1801].w;
    discard_exit();
}


