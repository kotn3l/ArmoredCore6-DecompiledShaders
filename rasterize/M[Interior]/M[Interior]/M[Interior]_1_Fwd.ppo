#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _619;
uint _1762;
uint _1763;
uint _1764;
uint _1999;
uint _2000;
uint _2001;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    vec4 _274 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _309 = cbMtdParam._m0[21u].w + _250;
    float _310 = cbMtdParam._m0[22u].x + _251;
    float _311 = cbMtdParam._m0[22u].y + _252;
    float _328 = (-0.0) - dot(vec3(_309, _310, _311), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _329 = (-0.0) - dot(vec3(_309, _310, _311), vec3(_192 * TANGENT.x, _192 * TANGENT.y, _192 * TANGENT.z));
    float _330 = (-0.0) - dot(vec3(_309, _310, _311), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _334 = inversesqrt(dot(vec3(_328, _329, _330), vec3(_328, _329, _330)));
    float _337 = _334 * _330;
    float _340 = ((_334 * _328) + (((_274.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _341 = ((_334 * _329) + (((_274.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _342 = fract(TEXCOORD.x);
    float _343 = fract(TEXCOORD.y);
    float _349;
    if (_340 > 0.0)
    {
        _349 = (1.0 - _342) / _340;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_340 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _342) / _340;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _349 = frontier_phi_3_2_ladder;
    }
    float _357;
    if (_341 > 0.0)
    {
        _357 = (1.0 - _343) / _341;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_341 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _343) / _341;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _357 = frontier_phi_7_6_ladder;
    }
    float _361 = (_337 > 0.0) ? (cbMtdParam._m0[15u].x / _337) : 5000.0;
    float _362 = isnan(_357) ? _349 : (isnan(_349) ? _357 : min(_349, _357));
    float _363 = isnan(_361) ? _362 : (isnan(_362) ? _361 : min(_362, _361));
    float _367 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _374 = ((_363 * _337) + _367) / _367;
    vec4 _398 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_342 + (-0.5)) + (_363 * _340)) / _374) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_343 + (-0.5)) + (_363 * _341)) / _374) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _426 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _431 = _250 * _430;
    float _432 = _251 * _430;
    float _433 = _252 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_439 * cbSceneParam._m0[86u].x, _440 * cbSceneParam._m0[86u].y));
    float _452 = _449.x * TEXCOORD.z;
    float _453 = (-0.0) - _431;
    float _454 = (-0.0) - _432;
    float _455 = (-0.0) - _433;
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _618;
    float _620;
    float _621;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = (cbModelParam._m0[37u].x * ((((fma(_485, cbModelParam._m0[26u].z, fma(_481, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _543 = (cbModelParam._m0[37u].y * ((((fma(_485, cbModelParam._m0[27u].z, fma(_481, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _544 = (((((fma(_485, cbModelParam._m0[28u].z, fma(_481, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _591 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _601 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _611 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _611 * (_568.x + (-0.5));
        float _613 = _611 * (_568.y + (-0.5));
        float _614 = _611 * (_568.z + (-0.5));
        _618 = _581 * (_547.z + (-0.5));
        _620 = _581 * (_547.y + (-0.5));
        _621 = _581 * (_547.x + (-0.5));
        _622 = _591 * (_554.z + (-0.5));
        _623 = _591 * (_554.y + (-0.5));
        _624 = _591 * (_554.x + (-0.5));
        _625 = _601 * (_561.z + (-0.5));
        _626 = _601 * (_561.y + (-0.5));
        _627 = _601 * (_561.x + (-0.5));
        _628 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        _629 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        _630 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    }
    else
    {
        _618 = _619;
        _620 = _619;
        _621 = _619;
        _622 = _619;
        _623 = _619;
        _624 = _619;
        _625 = _619;
        _626 = _619;
        _627 = _619;
        _628 = _619;
        _629 = _619;
        _630 = _619;
    }
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _684 = (cbModelParam._m0[38u].x * ((((fma(_485, cbModelParam._m0[30u].z, fma(_481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _477)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _685 = (cbModelParam._m0[38u].y * ((((fma(_485, cbModelParam._m0[31u].z, fma(_481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _477)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _686 = (((((fma(_485, cbModelParam._m0[32u].z, fma(_481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _477)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _721 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _731 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _741 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _751 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_709.x + (-0.5));
        float _753 = _751 * (_709.y + (-0.5));
        float _754 = _751 * (_709.z + (-0.5));
        _758 = _721 * (_688.z + (-0.5));
        _759 = _721 * (_688.y + (-0.5));
        _760 = _721 * (_688.x + (-0.5));
        _761 = _731 * (_695.z + (-0.5));
        _762 = _731 * (_695.y + (-0.5));
        _763 = _731 * (_695.x + (-0.5));
        _764 = _741 * (_702.z + (-0.5));
        _765 = _741 * (_702.y + (-0.5));
        _766 = _741 * (_702.x + (-0.5));
        _767 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        _768 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        _769 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    }
    else
    {
        _758 = _619;
        _759 = _619;
        _760 = _619;
        _761 = _619;
        _762 = _619;
        _763 = _619;
        _764 = _619;
        _765 = _619;
        _766 = _619;
        _767 = _619;
        _768 = _619;
        _769 = _619;
    }
    float _784 = _431 * (-0.5);
    float _785 = _432 * (-0.5);
    float _786 = _433 * (-0.5);
    float _787 = dot(vec4(_784, _785, _786, 1.0), vec4(_760, _763, _766, _769));
    float _790 = dot(vec4(_784, _785, _786, 1.0), vec4(_759, _762, _765, _768));
    float _793 = dot(vec4(_784, _785, _786, 1.0), vec4(_758, _761, _764, _767));
    float _828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _800 = dot(vec4(_784, _785, _786, 1.0), vec4(_618, _622, _625, _628));
        float _804 = dot(vec4(_784, _785, _786, 1.0), vec4(_620, _623, _626, _629));
        float _808 = dot(vec4(_784, _785, _786, 1.0), vec4(_621, _624, _627, _630));
        float _815 = dot(vec4(cbModelParam._m0[39u]), vec4(_784, _785, _786, 1.0));
        _828 = dot(vec3(isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)), isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_815) ? 0.0 : (isnan(0.0) ? _815 : max(0.0, _815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _828 = 1.0;
    }
    float _839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _830 = dot(vec4(cbModelParam._m0[40u]), vec4(_784, _785, _786, 1.0));
        _839 = dot(vec3(isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)), isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)), isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_830) ? 0.0 : (isnan(0.0) ? _830 : max(0.0, _830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _839 = 1.0;
    }
    float _843 = (_839 * cbModelParam._m0[1u].x) + (_828 * (1.0 - cbModelParam._m0[1u].x));
    float _849 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _932;
    float _934;
    float _936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _899 = fma(_485, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477)) + cbModelParam._m0[13u].w;
        float _903 = fma(_485, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477)) + cbModelParam._m0[14u].w;
        float _907 = fma(_485, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477)) + cbModelParam._m0[15u].w;
        float _910 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _913 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _916 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _942;
        if (_910 > 0.0)
        {
            _942 = abs((1.0 - _899) / _910);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_910 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_899 + 1.0) / _910);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _942 = frontier_phi_22_20_ladder;
        }
        float _1219;
        if (_913 > 0.0)
        {
            _1219 = abs((1.0 - _903) / _913);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_913 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_903 + 1.0) / _913);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1219 = frontier_phi_31_27_ladder;
        }
        float _1515;
        if (_916 > 0.0)
        {
            _1515 = abs((1.0 - _907) / _916);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_916 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_907 + 1.0) / _916);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1515 = frontier_phi_45_38_ladder;
        }
        float _1517 = isnan(_1219) ? _942 : (isnan(_942) ? _1219 : min(_942, _1219));
        float _1518 = isnan(_1515) ? _1517 : (isnan(_1517) ? _1515 : min(_1517, _1515));
        float _1522 = (_1518 * _910) + _899;
        float _1523 = (_1518 * _913) + _903;
        float _1524 = (_1518 * _916) + _907;
        float _1525 = _1518 * 9.9999997473787516355514526367188e-05;
        float _1526 = (-1.0) - _1525;
        float _1528 = _1525 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1524 > _1528) || ((_1524 < _1526) || ((_1523 > _1528) || ((_1523 < _1526) || ((_1522 < _1526) || (_1522 > _1528))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1524, cbModelParam._m0[9u].z, fma(_1523, cbModelParam._m0[9u].y, _1522 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1524, cbModelParam._m0[10u].z, fma(_1523, cbModelParam._m0[10u].y, _1522 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1524, cbModelParam._m0[11u].z, fma(_1523, cbModelParam._m0[11u].y, _1522 * cbModelParam._m0[11u].x))), _849);
            frontier_phi_21_45_ladder = _1635.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1635.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1635.x * cbModelParam._m0[1u].y;
        }
        _932 = frontier_phi_21_45_ladder_2;
        _934 = frontier_phi_21_45_ladder_1;
        _936 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _849);
        _932 = _920.x * cbModelParam._m0[1u].y;
        _934 = _920.y * cbModelParam._m0[1u].y;
        _936 = _920.z * cbModelParam._m0[1u].y;
    }
    float _939 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1027;
    float _1029;
    float _1031;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _991 = fma(_485, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477)) + cbModelParam._m0[21u].w;
        float _995 = fma(_485, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477)) + cbModelParam._m0[22u].w;
        float _999 = fma(_485, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477)) + cbModelParam._m0[23u].w;
        float _1002 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1005 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1008 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1224;
        if (_1002 > 0.0)
        {
            _1224 = abs((1.0 - _991) / _1002);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1002 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_991 + 1.0) / _1002);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1224 = frontier_phi_33_29_ladder;
        }
        float _1541;
        if (_1005 > 0.0)
        {
            _1541 = abs((1.0 - _995) / _1005);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1005 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_995 + 1.0) / _1005);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1541 = frontier_phi_47_40_ladder;
        }
        float _1692;
        if (_1008 > 0.0)
        {
            _1692 = abs((1.0 - _999) / _1008);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1008 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_999 + 1.0) / _1008);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1692 = frontier_phi_61_56_ladder;
        }
        float _1694 = isnan(_1541) ? _1224 : (isnan(_1224) ? _1541 : min(_1224, _1541));
        float _1695 = isnan(_1692) ? _1694 : (isnan(_1694) ? _1692 : min(_1694, _1692));
        float _1699 = (_1695 * _1002) + _991;
        float _1700 = (_1695 * _1005) + _995;
        float _1701 = (_1695 * _1008) + _999;
        float _1702 = _1695 * 9.9999997473787516355514526367188e-05;
        float _1703 = (-1.0) - _1702;
        float _1705 = _1702 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1701 > _1705) || ((_1701 < _1703) || ((_1700 > _1705) || ((_1700 < _1703) || ((_1699 < _1703) || (_1699 > _1705))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1701, cbModelParam._m0[17u].z, fma(_1700, cbModelParam._m0[17u].y, _1699 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1701, cbModelParam._m0[18u].z, fma(_1700, cbModelParam._m0[18u].y, _1699 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1701, cbModelParam._m0[19u].z, fma(_1700, cbModelParam._m0[19u].y, _1699 * cbModelParam._m0[19u].x))), _939);
            frontier_phi_30_61_ladder = _1861.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1861.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1861.x * cbModelParam._m0[1u].z;
        }
        _1027 = frontier_phi_30_61_ladder_2;
        _1029 = frontier_phi_30_61_ladder;
        _1031 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _939);
        _1027 = _1011.x * cbModelParam._m0[1u].z;
        _1029 = _1011.y * cbModelParam._m0[1u].z;
        _1031 = _1011.z * cbModelParam._m0[1u].z;
    }
    float _1043 = _452 * 0.01200000010430812835693359375;
    float _1045 = _1043 * ((cbModelParam._m0[1u].w * (_1027 - _932)) + _932);
    float _1046 = _1043 * ((cbModelParam._m0[1u].w * (_1029 - _934)) + _934);
    float _1047 = _1043 * ((cbModelParam._m0[1u].w * (_1031 - _936)) + _936);
    float _1068 = fma(_1047, cbSceneParam._m0[89u].z, fma(_1046, cbSceneParam._m0[89u].y, _1045 * cbSceneParam._m0[89u].x));
    float _1071 = fma(_1047, cbSceneParam._m0[90u].z, fma(_1046, cbSceneParam._m0[90u].y, _1045 * cbSceneParam._m0[90u].x));
    float _1074 = fma(_1047, cbSceneParam._m0[91u].z, fma(_1046, cbSceneParam._m0[91u].y, _1045 * cbSceneParam._m0[91u].x));
    uint _1081 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1086 = floatBitsToUint(cbInstanceData._m0[_1081 + 5u]);
    uint _1088 = _1086.x * 14u;
    uint _1089 = _1088 + 13u;
    float _1094 = _452 + (-1.0);
    float _1097 = (cbLight._m0[_1089].x * _1094) + 1.0;
    float _1098 = (cbLight._m0[_1089].y * _1094) + 1.0;
    uint _1099 = _1088 + 8u;
    float _1110 = cbLight._m0[_1088].x + _431;
    float _1111 = cbLight._m0[_1088].y + _432;
    float _1112 = cbLight._m0[_1088].z + _433;
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1120 = dot(vec3(0.0), vec3(cbLight._m0[_1088].xyz));
    float _2336 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    float _1124 = dot(vec3(0.0), vec3(_431, _432, _433));
    float _2347 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    float _1128 = dot(vec3(cbLight._m0[_1088].xyz), vec3(_1110 * _1116, _1111 * _1116, _1112 * _1116));
    float _2358 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1139 = (exp2(log2(1.0 - (isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1145 = (0.5 / ((_1123 + 9.9999999392252902907785028219223e-09) + _1127)) * _1123;
    float _2369 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1147 = (isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0))) * 0.31831014156341552734375;
    float _1149 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
    uint _1159 = _1088 + 9u;
    uint _1165 = _1088 | 1u;
    float _1171 = cbLight._m0[_1165].x + _431;
    float _1172 = cbLight._m0[_1165].y + _432;
    float _1173 = cbLight._m0[_1165].z + _433;
    float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
    float _1181 = dot(vec3(0.0), vec3(cbLight._m0[_1165].xyz));
    float _2385 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
    float _1185 = dot(vec3(cbLight._m0[_1165].xyz), vec3(_1171 * _1177, _1172 * _1177, _1173 * _1177));
    float _2396 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1194 = (exp2(log2(1.0 - (isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1198 = (0.5 / ((_1184 + 9.9999999392252902907785028219223e-09) + _1127)) * _1184;
    float _2407 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1200 = (isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0))) * 0.31831014156341552734375;
    float _1201 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
    float _1211 = (((_1194 * cbLight._m0[_1159].x) * _1200) * _1201) + (((_1139 * cbLight._m0[_1099].x) * _1147) * _1149);
    float _1212 = (((_1194 * cbLight._m0[_1159].y) * _1200) * _1201) + (((_1139 * cbLight._m0[_1099].y) * _1147) * _1149);
    float _1213 = (((_1194 * cbLight._m0[_1159].z) * _1200) * _1201) + (((_1139 * cbLight._m0[_1099].z) * _1147) * _1149);
    float _1330;
    float _1332;
    float _1334;
    if (_1086.y == 0u)
    {
        float _1269 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1270 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1269;
        float _1271 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1269;
        float _1272 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1269;
        uvec4 _1284 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1285 = _1284.x;
        uint _1296 = uint((float(_1284.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _1285))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _1285)));
        float _1306 = (log2(_1272 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1307 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        uint _1310 = uint(isnan(14.0) ? _1307 : (isnan(_1307) ? 14.0 : min(_1307, 14.0)));
        uvec4 _1316 = texelFetch(g_lightClusterGridBuffer, int(((_1310 << 2u) + (_1296 << 6u)) >> 2u));
        uint _1317 = _1316.x;
        uint _1318 = _1284.z;
        float _1407;
        float _1409;
        float _1411;
        if (((((1u << ((_1318 >> 4u) & 15u)) + 4294967295u) & _1317) == 0u) || ((_1318 & 240u) == 0u))
        {
            _1407 = 0.0;
            _1409 = 0.0;
            _1411 = 0.0;
        }
        else
        {
            float _1408;
            float _1410;
            float _1412;
            float _1566 = 0.0;
            float _1567 = 0.0;
            float _1568 = 0.0;
            uint _1569 = 0u;
            uint _1578;
            bool _1579;
            for (;;)
            {
                _1578 = texelFetch(g_lightClassification, int((((_1310 << 5u) + (_1296 << 9u)) + (_1569 << 2u)) >> 2u)).x;
                _1579 = _1578 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1579)
                {
                    frontier_phi_58_pred = _1568;
                    frontier_phi_58_pred_1 = _1567;
                    frontier_phi_58_pred_2 = _1566;
                }
                else
                {
                    float _1732;
                    float _1733;
                    float _1734;
                    uint _1735;
                    _1732 = _1566;
                    _1733 = _1567;
                    _1734 = _1568;
                    _1735 = _1578;
                    float _1644;
                    float _1645;
                    float _1646;
                    for (;;)
                    {
                        uint _1739 = uint(findLSB(_1735)) + (_1569 << 5u);
                        uint _1736 = (_1735 + 4294967295u) & _1735;
                        uint _1741 = _1739 * 48u;
                        vec4 _1755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1741)).x, texelFetch(g_PointLightRenderingBuffer, int(_1741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1741 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1741 + 3u)).x));
                        uint _1772 = (_1739 * 48u) + 8u;
                        vec3 _1783 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1772)).x, texelFetch(g_PointLightRenderingBuffer, int(_1772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1772 + 2u)).x));
                        float _1787 = _1755.x - _1270;
                        float _1788 = _1755.y - _1271;
                        float _1789 = _1755.z - _1272;
                        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
                        float _1793 = inversesqrt(_1790);
                        float _1802 = 1.0 - (_1790 * _1755.w);
                        float _2433 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
                        float _1804 = sqrt(_1790) * uintBitsToFloat(uvec4(_1762, _1763, _1764, texelFetch(g_PointLightRenderingBuffer, int(((_1739 * 48u) + 4u) + 3u)).x)).w;
                        float _1807 = 1.39999997615814208984375 / (_1804 + 1.39999997615814208984375);
                        float _1808 = _1807 * _1807;
                        float _1811 = ((1.0 - _1808) * dot(vec3(0.0), vec3(_1793 * _1787, _1793 * _1788, _1793 * _1789))) + _1808;
                        float _1813 = (-0.0) - _1270;
                        float _1814 = (-0.0) - _1271;
                        float _1815 = (-0.0) - _1272;
                        float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
                        float _1823 = dot(vec3(0.0), vec3(_1819 * _1813, _1819 * _1814, _1819 * _1815));
                        float _2444 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
                        float _2455 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
                        float _1827 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
                        float _1831 = (0.5 / (((isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0))) + 9.9999999392252902907785028219223e-09) + _1827)) * _1827;
                        float _2466 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
                        float _1840 = (((isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0))) * 3.1415927410125732421875) / (((_1804 * _1804) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0)));
                        _1644 = (_1840 * _1783.x) + _1732;
                        _1645 = (_1840 * _1783.y) + _1733;
                        _1646 = (_1840 * _1783.z) + _1734;
                        if (_1736 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1732 = _1644;
                            _1733 = _1645;
                            _1734 = _1646;
                            _1735 = _1736;
                        }
                    }
                    frontier_phi_58_pred = _1646;
                    frontier_phi_58_pred_1 = _1645;
                    frontier_phi_58_pred_2 = _1644;
                }
                _1412 = frontier_phi_58_pred;
                _1410 = frontier_phi_58_pred_1;
                _1408 = frontier_phi_58_pred_2;
                uint _1570 = _1569 + 1u;
                if (_1570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1566 = _1408;
                    _1567 = _1410;
                    _1568 = _1412;
                    _1569 = _1570;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1407 = _1408;
            _1409 = _1410;
            _1411 = _1412;
        }
        uvec4 _1415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1416 = _1415.z;
        uint _1418 = (_1416 >> 8u) & 15u;
        float _1546;
        float _1548;
        float _1550;
        if (((4294967295u << _1418) & _1317) == 0u)
        {
            _1546 = _1407;
            _1548 = _1409;
            _1550 = _1411;
        }
        else
        {
            float _1562 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1418 < ((_1416 >> 12u) & 15u))
            {
                float _1547;
                float _1549;
                float _1551;
                float _1718 = _1407;
                float _1719 = _1409;
                float _1720 = _1411;
                uint _1721 = _1418;
                uint _1730;
                bool _1731;
                for (;;)
                {
                    _1730 = texelFetch(g_lightClassification, int((((_1310 << 5u) + (_1296 << 9u)) + (_1721 << 2u)) >> 2u)).x;
                    _1731 = _1730 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1731)
                    {
                        frontier_phi_67_pred = _1720;
                        frontier_phi_67_pred_1 = _1719;
                        frontier_phi_67_pred_2 = _1718;
                    }
                    else
                    {
                        float _1866;
                        float _1867;
                        float _1868;
                        float _2088;
                        float _2089;
                        float _2090;
                        float _1876 = _1718;
                        float _1877 = _1719;
                        float _1878 = _1720;
                        uint _1879 = _1730;
                        uint _1880;
                        uint _1890;
                        vec4 _1905;
                        float _1906;
                        vec3 _1918;
                        vec4 _1934;
                        vec4 _1949;
                        float _1995;
                        bool _1996;
                        for (;;)
                        {
                            _1890 = ((_1721 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1879));
                            _1880 = (_1879 + 4294967295u) & _1879;
                            uint _1892 = _1890 * 40u;
                            _1905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1892 + 3u)).x));
                            _1906 = _1905.w;
                            uint _1908 = (_1890 * 40u) + 8u;
                            _1918 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1908 + 2u)).x));
                            uint _1921 = (_1890 * 40u) + 16u;
                            _1934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1921 + 3u)).x));
                            uint _1936 = (_1890 * 40u) + 20u;
                            _1949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1936 + 3u)).x));
                            uint _1951 = (_1890 * 40u) + 24u;
                            vec4 _1964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1951 + 3u)).x));
                            uint _1970 = (_1890 * 40u) + 28u;
                            vec4 _1983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 3u)).x));
                            _1995 = fma(_1272, _1983.z, fma(_1271, _1983.y, _1983.x * _1270)) + _1983.w;
                            _1996 = !((fma(_1272, _1964.z, fma(_1271, _1964.y, _1964.x * _1270)) + _1964.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_1996)
                            {
                                float _2030 = _1905.x - _1270;
                                float _2031 = _1905.y - _1271;
                                float _2032 = _1905.z - _1272;
                                float _2033 = dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032));
                                float _2036 = inversesqrt(_2033);
                                float _2043 = 1.0 - (_2033 / (_1906 * _1906));
                                float _2477 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
                                float _2045 = sqrt(_2033) * uintBitsToFloat(uvec4(_1999, _2000, _2001, texelFetch(g_SpotLightRenderingBuffer, int(((_1890 * 40u) + 4u) + 3u)).x)).w;
                                float _2047 = 1.39999997615814208984375 / (_2045 + 1.39999997615814208984375);
                                float _2048 = _2047 * _2047;
                                float _2051 = (fma(_1272, _1934.z, fma(_1271, _1934.y, _1934.x * _1270)) + _1934.w) / _1995;
                                float _2052 = (fma(_1272, _1949.z, fma(_1271, _1949.y, _1949.x * _1270)) + _1949.w) / _1995;
                                float _2056 = 1.0 - dot(vec2(_2051, _2052), vec2(_2051, _2052));
                                float _2488 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
                                float _2064 = dot(vec3(0.0), vec3((-0.0) - (_1270 * _1562), (-0.0) - (_1271 * _1562), (-0.0) - (_1272 * _1562)));
                                float _2499 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
                                float _2072 = ((1.0 - _2048) * dot(vec3(0.0), vec3(_2036 * _2030, _2036 * _2031, _2036 * _2032))) + _2048;
                                float _2510 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
                                float _2073 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
                                float _2077 = (0.5 / (((isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0))) + 9.9999999392252902907785028219223e-09) + _2073)) * _2073;
                                float _2521 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
                                float _2084 = ((isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0))) * (isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0)))) * (((isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0))) * 3.1415927410125732421875) / (((_2045 * _2045) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2084 * _1918.z;
                                frontier_phi_73_pred_1 = _2084 * _1918.y;
                                frontier_phi_73_pred_2 = _2084 * _1918.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2090 = frontier_phi_73_pred;
                            _2089 = frontier_phi_73_pred_1;
                            _2088 = frontier_phi_73_pred_2;
                            _1866 = _2088 + _1876;
                            _1867 = _2089 + _1877;
                            _1868 = _2090 + _1878;
                            if (_1880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1876 = _1866;
                                _1877 = _1867;
                                _1878 = _1868;
                                _1879 = _1880;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1868;
                        frontier_phi_67_pred_1 = _1867;
                        frontier_phi_67_pred_2 = _1866;
                    }
                    _1551 = frontier_phi_67_pred;
                    _1549 = frontier_phi_67_pred_1;
                    _1547 = frontier_phi_67_pred_2;
                    uint _1722 = _1721 + 1u;
                    if (_1722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1718 = _1547;
                        _1719 = _1549;
                        _1720 = _1551;
                        _1721 = _1722;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1549;
                frontier_phi_49_50_ladder_1 = _1551;
                frontier_phi_49_50_ladder_2 = _1547;
            }
            else
            {
                frontier_phi_49_50_ladder = _1409;
                frontier_phi_49_50_ladder_1 = _1411;
                frontier_phi_49_50_ladder_2 = _1407;
            }
            _1546 = frontier_phi_49_50_ladder_2;
            _1548 = frontier_phi_49_50_ladder;
            _1550 = frontier_phi_49_50_ladder_1;
        }
        float _1555 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _1330 = ((_1546 * 0.039999999105930328369140625) * _1555) + _1211;
        _1332 = ((_1548 * 0.039999999105930328369140625) * _1555) + _1212;
        _1334 = ((_1550 * 0.039999999105930328369140625) * _1555) + _1213;
    }
    else
    {
        _1330 = _1211;
        _1332 = _1212;
        _1334 = _1213;
    }
    uint _1341 = (_1081 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1356 = ((cbMtdParam._m0[9u].x * _398.x) * cbInstanceData._m0[_1341].x) + ((_1330 + ((isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1357 = ((cbMtdParam._m0[9u].y * _398.y) * cbInstanceData._m0[_1341].y) + ((_1332 + ((isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1358 = ((cbMtdParam._m0[9u].z * _398.z) * cbInstanceData._m0[_1341].z) + ((_1334 + ((isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    uint _1362 = _1081 + 6u;
    float _1370 = _439 / cbSceneParam._m0[86u].x;
    float _1371 = _440 / cbSceneParam._m0[86u].y;
    vec4 _1385 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1370, _1371, (log2((isnan(cbSceneParam._m0[77u].w) ? _426 : (isnan(_426) ? cbSceneParam._m0[77u].w : min(_426, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1387 = _1385.x;
    float _1388 = _1385.y;
    float _1389 = _1385.z;
    float _1390 = _1385.w;
    float _1464;
    float _1466;
    float _1468;
    float _1470;
    if (_426 > cbSceneParam._m0[78u].w)
    {
        float _1426 = isnan(_426) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _426 : min(cbSceneParam._m0[80u].w, _426));
        float _1427 = _1426 / _426;
        float _1438 = _1427 * _250;
        float _1439 = _251 * _1427;
        float _1440 = (-0.0) - _1439;
        float _1441 = _1427 * _252;
        float _1443 = (cbSceneParam._m0[77u].w * _1440) / _1426;
        float _1444 = _1443 + cbSceneParam._m0[79u].w;
        float _1445 = cbSceneParam._m0[79u].w - _1439;
        float _1451 = sqrt(((_1438 * _1438) + (_1439 * _1439)) + (_1441 * _1441));
        float _1454 = (1.0 - (cbSceneParam._m0[77u].w / _1426)) * _1451;
        float _1460 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1462 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1654;
        if (abs((_1440 - _1443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1654 = ((((_1444 > 0.0) ? exp2(_1460 * _1444) : (2.0 - exp2(_1462 * _1444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1454;
        }
        else
        {
            float _1592 = 1.0 / cbSceneParam._m0[80u].x;
            float _1593 = isnan(_1445) ? _1444 : (isnan(_1444) ? _1445 : max(_1444, _1445));
            float _1594 = isnan(_1445) ? _1444 : (isnan(_1444) ? _1445 : min(_1444, _1445));
            float _1603 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : min(_1593, 0.0));
            float _1604 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : min(_1594, 0.0));
            _1654 = ((abs(_1451 / _1440) * cbSceneParam._m0[80u].y) * ((((_1603 - _1604) * 2.0) - ((exp2(_1460 * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)))) - exp2(_1460 * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))))) * _1592)) - ((exp2(_1462 * _1603) - exp2(_1462 * _1604)) * _1592))) + (_1454 * cbSceneParam._m0[80u].z);
        }
        vec4 _1656 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1370, _1371, 1.0), 0.0);
        float _1665 = exp2((_1654 * (-1.44269502162933349609375)) * (1.0 - _1656.w));
        float _1666 = log2(_1665);
        float _1682 = log2(_1390);
        _1464 = (exp2(_1682 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1666 * cbSceneParam._m0[78u].x)) * _1656.x) / cbSceneParam._m0[78u].x)) + _1387;
        _1466 = (exp2(_1682 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1666 * cbSceneParam._m0[78u].y)) * _1656.y) / cbSceneParam._m0[78u].y)) + _1388;
        _1468 = (exp2(_1682 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1666 * cbSceneParam._m0[78u].z)) * _1656.z) / cbSceneParam._m0[78u].z)) + _1389;
        _1470 = _1665 * _1390;
    }
    else
    {
        _1464 = _1387;
        _1466 = _1388;
        _1468 = _1389;
        _1470 = _1390;
    }
    float _1482 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1483 = _1482 == 3.0;
    float _1485 = log2(_1470);
    float _1492 = exp2(_1485 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    float _1493 = exp2(_1485 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    float _1494 = exp2(_1485 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    float _1503 = (_1482 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1503 * (_1483 ? _1492 : (_1492 + (cbSceneParam._m0[72u].w * _1464)));
    SV_Target.y = _1503 * (_1483 ? _1493 : (_1493 + (cbSceneParam._m0[72u].w * _1466)));
    SV_Target.z = _1503 * (_1483 ? _1494 : (_1494 + (cbSceneParam._m0[72u].w * _1468)));
    SV_Target.w = cbInstanceData._m0[_1362].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1362].w;
}


