#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _441;
float _3208;
float _3209;
float _3210;
float _3211;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _354 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _369 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _388 = cbMtdParam._m0[22u].z + _263;
    float _389 = cbMtdParam._m0[22u].w + _264;
    float _390 = cbMtdParam._m0[23u].x + _265;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_369 * _192, _369 * _193, _369 * _194));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _410 * _406;
    float _416 = ((cbMtdParam._m0[19u].y * _404) * _410) + (((_354.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _417 = ((cbMtdParam._m0[19u].z * _405) * _410) + (((_354.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _420 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _421 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _439;
    float _442;
    float _444;
    if (_416 > 0.0)
    {
        float _425 = (1.0 - _420) / _416;
        _439 = _425;
        _442 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_425 * _411)) * 0.16666667163372039794921875;
        _444 = (fract((_425 * _417) + _421) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_416 < 0.0)
        {
            float _440 = ((-0.0) - _420) / _416;
            frontier_phi_3_2_ladder = _440;
            frontier_phi_3_2_ladder_1 = (fract((_440 * _417) + _421) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_440 * _411) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _441;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _439 = frontier_phi_3_2_ladder;
        _442 = frontier_phi_3_2_ladder_2;
        _444 = frontier_phi_3_2_ladder_1;
    }
    float _470;
    float _472;
    float _474;
    if (_417 > 0.0)
    {
        float _457 = (1.0 - _421) / _417;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_457 < _439)
        {
            frontier_phi_8_5_ladder = (fract(_457 * _411) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_457 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _457;
        }
        else
        {
            frontier_phi_8_5_ladder = _444;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = _439;
        }
        _470 = frontier_phi_8_5_ladder_2;
        _472 = frontier_phi_8_5_ladder_1;
        _474 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_417 < 0.0)
        {
            float _471 = ((-0.0) - _421) / _417;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_471 < _439)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_471 * _411) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_471 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _471;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _444;
                frontier_phi_8_6_ladder_9_ladder_1 = _442;
                frontier_phi_8_6_ladder_9_ladder_2 = _439;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _444;
            frontier_phi_8_6_ladder_1 = _442;
            frontier_phi_8_6_ladder_2 = _439;
        }
        _470 = frontier_phi_8_6_ladder_2;
        _472 = frontier_phi_8_6_ladder_1;
        _474 = frontier_phi_8_6_ladder;
    }
    float _478 = (_411 > 0.0) ? (cbMtdParam._m0[16u].y / _411) : 5000.0;
    float _491;
    float _492;
    if (_478 < _470)
    {
        _491 = ((_420 + cbMtdParam._m0[16u].z) + (_478 * _416)) * 0.16666667163372039794921875;
        _492 = (((_478 * _417) + _421) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _491 = _472;
        _492 = _474;
    }
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_491, _492));
    vec4 _510 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _514 = _510.z;
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3220 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))));
    float _527 = fma(_524, _199, fma(_518, _206, _517 * _192));
    float _530 = fma(_524, _200, fma(_518, _207, _517 * _193));
    float _533 = fma(_524, _201, fma(_518, _208, _517 * _194));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    float _538 = _537 * _527;
    float _539 = _537 * _530;
    float _540 = _537 * _533;
    float _3231 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _541 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _3242 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3253 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3264 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _565 = _263 * _564;
    float _566 = _264 * _564;
    float _567 = _265 * _564;
    vec4 _572 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _574 = _572.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _737 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _743 = (cbMatDynParam._m0[5u].x * _737) + cbMatDynParam._m0[5u].y;
        float _3275 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _748 = (cbMatDynParam._m0[5u].z * _737) + cbMatDynParam._m0[5u].w;
        float _3286 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) - _744)) + _744) < ((_574 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _592 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _593 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _613 = fma(_540, cbSceneParam._m0[5u].z, fma(_539, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _538));
    float _616 = fma(_540, cbSceneParam._m0[6u].z, fma(_539, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _538));
    float _619 = fma(_540, cbSceneParam._m0[7u].z, fma(_539, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _538));
    uint _632 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = _632 + 9u;
    uint _634 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _640 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_634].x;
    float _641 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_634].y;
    float _642 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_634].z;
    float _3297 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    vec4 _654 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _592, cbSceneParam._m0[86u].y * _593));
    float _657 = _654.x * TEXCOORD.z;
    float _658 = dot(vec3(_538, _539, _540), vec3(_565, _566, _567));
    float _661 = _658 * 2.0;
    float _665 = (_661 * _538) - _565;
    float _666 = (_661 * _539) - _566;
    float _667 = (_661 * _540) - _567;
    float _671 = abs(dot(vec3(_565, _566, _567), vec3(_538, _539, _540)));
    float _3330 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _673 = sqrt(_541);
    float _686 = exp2((_673 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_673 * 3.0));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _782 = fma(_726, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _718));
        float _786 = fma(_726, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _718));
        float _790 = fma(_726, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _718));
        float _814 = _718 + _538;
        float _815 = _722 + _539;
        float _816 = _726 + _540;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _782;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _786;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _790;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_782 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_786 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_790 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_538, _539, _540), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3378 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_538, _539, _540), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3411 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_538, _539, _540), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3444 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1057 = _886;
        _1058 = _885;
        _1059 = _897;
        _1060 = _896;
        _1061 = _895;
        _1062 = _907;
        _1063 = _906;
        _1064 = _905;
        _1065 = _920;
        _1066 = _919;
        _1067 = _918;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _441;
        _1057 = _441;
        _1058 = _441;
        _1059 = _441;
        _1060 = _441;
        _1061 = _441;
        _1062 = _441;
        _1063 = _441;
        _1064 = _441;
        _1065 = _441;
        _1066 = _441;
        _1067 = _441;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_726, cbModelParam._m0[30u].z, fma(_722, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _718));
        float _1103 = fma(_726, cbModelParam._m0[31u].z, fma(_722, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _718));
        float _1107 = fma(_726, cbModelParam._m0[32u].z, fma(_722, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _718));
        float _1130 = _718 + _538;
        float _1131 = _722 + _539;
        float _1132 = _726 + _540;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_538, _539, _540), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3507 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_538, _539, _540), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3540 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_538, _539, _540), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3573 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _441;
        _1369 = _441;
        _1370 = _441;
        _1371 = _441;
        _1372 = _441;
        _1373 = _441;
        _1374 = _441;
        _1375 = _441;
        _1376 = _441;
        _1377 = _441;
        _1378 = _441;
        _1379 = _441;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1068)) + _1068;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _665 * 0.5;
    float _1437 = _666 * 0.5;
    float _1438 = _667 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_726, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_726, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_726, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_667, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _665));
        float _1568 = fma(_667, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _665));
        float _1571 = fma(_667, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _665));
        float _1599;
        if (_1565 > 0.0)
        {
            _1599 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1599 = frontier_phi_29_27_ladder;
        }
        float _1946;
        if (_1568 > 0.0)
        {
            _1946 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1946 = frontier_phi_38_34_ladder;
        }
        float _2276;
        if (_1571 > 0.0)
        {
            _2276 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2276 = frontier_phi_52_45_ladder;
        }
        float _2278 = isnan(_1946) ? _1599 : (isnan(_1599) ? _1946 : min(_1599, _1946));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1565) + _1554;
        float _2284 = (_2279 * _1568) + _1558;
        float _2285 = (_2279 * _1571) + _1562;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_28_52_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_28_52_ladder_2;
        _1589 = frontier_phi_28_52_ladder_1;
        _1591 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_665, _666, _667), _1505);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1595 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1596 = isnan(_1595) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1595 : min(cbModelParam._m0[25u].w, _1595));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1650 = fma(_726, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718)) + cbModelParam._m0[21u].w;
        float _1654 = fma(_726, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718)) + cbModelParam._m0[22u].w;
        float _1658 = fma(_726, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718)) + cbModelParam._m0[23u].w;
        float _1661 = fma(_667, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _665));
        float _1664 = fma(_667, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _665));
        float _1667 = fma(_667, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _665));
        float _1951;
        if (_1661 > 0.0)
        {
            _1951 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1951 = frontier_phi_40_36_ladder;
        }
        float _2302;
        if (_1664 > 0.0)
        {
            _2302 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2302 = frontier_phi_54_47_ladder;
        }
        float _2492;
        if (_1667 > 0.0)
        {
            _2492 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2492 = frontier_phi_72_65_ladder;
        }
        float _2494 = isnan(_2302) ? _1951 : (isnan(_1951) ? _2302 : min(_1951, _2302));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1661) + _1650;
        float _2500 = (_2495 * _1664) + _1654;
        float _2501 = (_2495 * _1667) + _1658;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_37_72_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1686 = frontier_phi_37_72_ladder_2;
        _1688 = frontier_phi_37_72_ladder_1;
        _1690 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_665, _666, _667), _1596);
        _1686 = _1670.x * cbModelParam._m0[1u].z;
        _1688 = _1670.y * cbModelParam._m0[1u].z;
        _1690 = _1670.z * cbModelParam._m0[1u].z;
    }
    float _1702 = ((((1.0 - _686) * ((_673 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_686 * _673)) * _657;
    float _1703 = _1702 * ((cbModelParam._m0[1u].w * (_1686 - _1587)) + _1587);
    float _1704 = _1702 * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1705 = _1702 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1708 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, _1703 * cbSceneParam._m0[91u].x));
    uvec4 _1724 = floatBitsToUint(cbInstanceData._m0[_632 + 5u]);
    uint _1726 = _1724.x * 14u;
    uint _1727 = _1726 + 13u;
    float _1732 = _657 + (-1.0);
    float _1735 = (cbLight._m0[_1727].x * _1732) + 1.0;
    float _1736 = (cbLight._m0[_1727].y * _1732) + 1.0;
    uint _1737 = _1726 + 5u;
    float _1743 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1747 = _1726 + 4u;
    float _1753 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1757 = _1726 | 1u;
    float _1768 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_538, _539, _540));
    float _1771 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_538, _539, _540));
    float _3709 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _3720 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1776 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1778 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1785 = ((cbLight._m0[_1737].x * _1743) * _1778) + ((cbLight._m0[_1747].x * _1753) * _1776);
    float _1786 = ((_1743 * cbLight._m0[_1737].y) * _1778) + ((_1753 * cbLight._m0[_1747].y) * _1776);
    float _1787 = ((_1743 * cbLight._m0[_1737].z) * _1778) + ((_1753 * cbLight._m0[_1747].z) * _1776);
    uint _1789 = _1726 + 8u;
    float _1802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _541) * 0.949999988079071044921875);
    float _1803 = _1802 * _1802;
    float _1804 = cbLight._m0[_1726].x + _565;
    float _1805 = cbLight._m0[_1726].y + _566;
    float _1806 = cbLight._m0[_1726].z + _567;
    float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
    float _1811 = _1810 * _1804;
    float _1812 = _1810 * _1805;
    float _1813 = _1810 * _1806;
    float _1814 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1726].xyz));
    float _3731 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _1818 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1819 = dot(vec3(_538, _539, _540), vec3(_1811, _1812, _1813));
    float _3753 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1811, _1812, _1813));
    float _3764 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1803 * _1803;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1843 = 1.0 - _1803;
    float _1854 = (0.5 / (((_1818 * ((_1817 * _1843) + _1803)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1843) + _1803) * _1817))) * _1817;
    float _3775 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    uint _1867 = _1726 + 9u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1757].w)) * _541) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1757].x + _565;
    float _1881 = cbLight._m0[_1757].y + _566;
    float _1882 = cbLight._m0[_1757].z + _567;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1757].xyz));
    float _3786 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1894 = dot(vec3(_538, _539, _540), vec3(_1887, _1888, _1889));
    float _3797 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1757].xyz), vec3(_1887, _1888, _1889));
    float _3808 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = _1879 * _1879;
    float _1906 = ((_1897 * _1897) * (_1902 + (-1.0))) + 1.0;
    float _1915 = (exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1916 = 1.0 - _1879;
    float _1926 = (0.5 / (((_1818 * ((_1893 * _1916) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1818 * _1916) + _1879) * _1893))) * _1893;
    float _3819 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1902 / ((_1906 * _1906) * 3.141590118408203125));
    float _1938 = (((_1915 * cbLight._m0[_1867].x) * _1928) * _1743) + (((_1842 * cbLight._m0[_1789].x) * _1856) * _1753);
    float _1939 = (((_1915 * cbLight._m0[_1867].y) * _1928) * _1743) + (((_1842 * cbLight._m0[_1789].y) * _1856) * _1753);
    float _1940 = (((_1915 * cbLight._m0[_1867].z) * _1928) * _1743) + (((_1842 * cbLight._m0[_1789].z) * _1856) * _1753);
    float _2055;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    if (_1724.y == 0u)
    {
        float _1995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1995;
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1995;
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1995;
        uvec4 _2010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2011 = _2010.x;
        uint _2022 = uint((float(_2010.y) * floor(float(uint(cbSceneParam._m0[85u].y * _593) / _2011))) + floor(float(uint(cbSceneParam._m0[85u].x * _592) / _2011)));
        float _2032 = (log2(_1998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2033 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        uint _2036 = uint(isnan(14.0) ? _2033 : (isnan(_2033) ? 14.0 : min(_2033, 14.0)));
        uvec4 _2041 = texelFetch(g_lightClusterGridBuffer, int(((_2036 << 2u) + (_2022 << 6u)) >> 2u));
        uint _2042 = _2041.x;
        uint _2043 = _2010.z;
        float _2155;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        if (((((1u << ((_2043 >> 4u) & 15u)) + 4294967295u) & _2042) == 0u) || ((_2043 & 240u) == 0u))
        {
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
            _2165 = 0.0;
        }
        else
        {
            float _2156;
            float _2158;
            float _2160;
            float _2162;
            float _2164;
            float _2166;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            float _2344 = 0.0;
            uint _2345 = 0u;
            uint _2354;
            bool _2355;
            for (;;)
            {
                _2354 = texelFetch(g_lightClassification, int((((_2036 << 5u) + (_2022 << 9u)) + (_2345 << 2u)) >> 2u)).x;
                _2355 = _2354 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2355)
                {
                    frontier_phi_67_pred = _2342;
                    frontier_phi_67_pred_1 = _2341;
                    frontier_phi_67_pred_2 = _2340;
                    frontier_phi_67_pred_3 = _2339;
                    frontier_phi_67_pred_4 = _2343;
                    frontier_phi_67_pred_5 = _2344;
                }
                else
                {
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    uint _2541;
                    _2535 = _2339;
                    _2536 = _2340;
                    _2537 = _2341;
                    _2538 = _2342;
                    _2539 = _2343;
                    _2540 = _2344;
                    _2541 = _2354;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    float _2441;
                    for (;;)
                    {
                        uint _2545 = uint(findLSB(_2541)) + (_2345 << 5u);
                        uint _2542 = (_2541 + 4294967295u) & _2541;
                        uint _2547 = _2545 * 48u;
                        vec4 _2561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2547)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 3u)).x));
                        uint _2567 = (_2545 * 48u) + 4u;
                        vec4 _2580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2586 = (_2545 * 48u) + 8u;
                        vec3 _2597 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x));
                        float _2601 = _2561.x - _1996;
                        float _2602 = _2561.y - _1997;
                        float _2603 = _2561.z - _1998;
                        float _2604 = dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603));
                        float _2607 = inversesqrt(_2604);
                        float _2608 = _2607 * _2601;
                        float _2609 = _2607 * _2602;
                        float _2610 = _2607 * _2603;
                        float _2611 = dot(vec3(_613, _616, _619), vec3(_2608, _2609, _2610));
                        float _2616 = 1.0 - (_2604 * _2561.w);
                        float _3840 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2617 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2618 = sqrt(_2604) * _2580.w;
                        float _2621 = 1.39999997615814208984375 / (_2618 + 1.39999997615814208984375);
                        float _2622 = _2621 * _2621;
                        float _2625 = ((1.0 - _2622) * _2611) + _2622;
                        float _2628 = _2618 * _2618;
                        float _2632 = ((isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))) * _2617) / ((_2628 * 0.699999988079071044921875) + 1.0);
                        float _2636 = (-0.0) - _1996;
                        float _2637 = (-0.0) - _1997;
                        float _2638 = (-0.0) - _1998;
                        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2653 = exp2(log2(1.0 / ((_2628 * 3.5) + 5.0)) * 0.25);
                        float _2654 = 1.0 - _673;
                        float _2661 = sqrt(1.0 - ((1.0 - (_2654 * _2654)) * (1.0 - (_2653 * _2653))));
                        float _2662 = _2661 * _2661;
                        float _2663 = _2662 * _2662;
                        float _2664 = _2643 + _2608;
                        float _2665 = _2644 + _2609;
                        float _2666 = _2645 + _2610;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2674 = dot(vec3(_613, _616, _619), vec3(_2643, _2644, _2645));
                        float _3856 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2677 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2678 = dot(vec3(_613, _616, _619), vec3(_2670 * _2664, _2670 * _2665, _2670 * _2666));
                        float _3867 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2681 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2685 = ((_2681 * _2681) * (_2663 + (-1.0))) + 1.0;
                        float _2686 = _2621 * _2662;
                        float _2687 = _2686 * _2686;
                        float _2690 = ((1.0 - _2687) * _2611) + _2687;
                        float _3878 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2691 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                        float _2692 = 1.0 - _2662;
                        float _2702 = (0.5 / (((_2691 * ((_2677 * _2692) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2692) + _2662) * _2677))) * _2691;
                        float _3889 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2713 = (((_2663 * 3.1415927410125732421875) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) / ((_2685 * _2685) * ((_2628 * 2.1991131305694580078125) + 3.141590118408203125))) * _2617;
                        _2439 = (_2632 * _2580.x) + _2538;
                        _2440 = (_2632 * _2580.y) + _2539;
                        _2441 = (_2632 * _2580.z) + _2540;
                        _2436 = (_2713 * _2597.x) + _2535;
                        _2437 = (_2713 * _2597.y) + _2536;
                        _2438 = (_2713 * _2597.z) + _2537;
                        if (_2542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2535 = _2436;
                            _2536 = _2437;
                            _2537 = _2438;
                            _2538 = _2439;
                            _2539 = _2440;
                            _2540 = _2441;
                            _2541 = _2542;
                        }
                    }
                    frontier_phi_67_pred = _2439;
                    frontier_phi_67_pred_1 = _2438;
                    frontier_phi_67_pred_2 = _2437;
                    frontier_phi_67_pred_3 = _2436;
                    frontier_phi_67_pred_4 = _2440;
                    frontier_phi_67_pred_5 = _2441;
                }
                _2162 = frontier_phi_67_pred;
                _2160 = frontier_phi_67_pred_1;
                _2158 = frontier_phi_67_pred_2;
                _2156 = frontier_phi_67_pred_3;
                _2164 = frontier_phi_67_pred_4;
                _2166 = frontier_phi_67_pred_5;
                uint _2346 = _2345 + 1u;
                if (_2346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2339 = _2156;
                    _2340 = _2158;
                    _2341 = _2160;
                    _2342 = _2162;
                    _2343 = _2164;
                    _2344 = _2166;
                    _2345 = _2346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
            _2165 = _2166;
        }
        uvec4 _2169 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2170 = _2169.z;
        uint _2172 = (_2170 >> 8u) & 15u;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((4294967295u << _2172) & _2042) == 0u)
        {
            _2307 = _2155;
            _2309 = _2157;
            _2311 = _2159;
            _2313 = _2161;
            _2315 = _2163;
            _2317 = _2165;
        }
        else
        {
            float _2332 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
            float _2333 = _2332 * _1996;
            float _2334 = _2332 * _1997;
            float _2335 = _2332 * _1998;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2172 < ((_2170 >> 12u) & 15u))
            {
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2518 = _2155;
                float _2519 = _2157;
                float _2520 = _2159;
                float _2521 = _2161;
                float _2522 = _2163;
                float _2523 = _2165;
                uint _2524 = _2172;
                uint _2533;
                bool _2534;
                for (;;)
                {
                    _2533 = texelFetch(g_lightClassification, int((((_2036 << 5u) + (_2022 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                    _2534 = _2533 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2534)
                    {
                        frontier_phi_81_pred = _2521;
                        frontier_phi_81_pred_1 = _2520;
                        frontier_phi_81_pred_2 = _2519;
                        frontier_phi_81_pred_3 = _2518;
                        frontier_phi_81_pred_4 = _2523;
                        frontier_phi_81_pred_5 = _2522;
                    }
                    else
                    {
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _2761 = _2518;
                        float _2762 = _2519;
                        float _2763 = _2520;
                        float _2764 = _2521;
                        float _2765 = _2522;
                        float _2766 = _2523;
                        uint _2767 = _2533;
                        uint _2768;
                        vec4 _2793;
                        float _2794;
                        vec4 _2809;
                        vec3 _2821;
                        vec4 _2836;
                        vec4 _2851;
                        float _2897;
                        bool _2898;
                        for (;;)
                        {
                            uint _2778 = ((_2524 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2767));
                            _2768 = (_2767 + 4294967295u) & _2767;
                            uint _2780 = _2778 * 40u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            _2794 = _2793.w;
                            uint _2796 = (_2778 * 40u) + 4u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2811 = (_2778 * 40u) + 8u;
                            _2821 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x));
                            uint _2823 = (_2778 * 40u) + 16u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2838 = (_2778 * 40u) + 20u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2778 * 40u) + 24u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2872 = (_2778 * 40u) + 28u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2897 = fma(_1998, _2885.z, fma(_1997, _2885.y, _2885.x * _1996)) + _2885.w;
                            _2898 = !((fma(_1998, _2866.z, fma(_1997, _2866.y, _2866.x * _1996)) + _2866.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2898)
                            {
                                float _2925 = _2793.x - _1996;
                                float _2926 = _2793.y - _1997;
                                float _2927 = _2793.z - _1998;
                                float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                                float _2931 = inversesqrt(_2928);
                                float _2932 = _2931 * _2925;
                                float _2933 = _2931 * _2926;
                                float _2934 = _2931 * _2927;
                                float _2938 = 1.0 - (_2928 / (_2794 * _2794));
                                float _3900 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2939 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2943 = sqrt(_2928) * _2809.w;
                                float _2945 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                                float _2946 = _2945 * _2945;
                                float _2949 = ((1.0 - _2946) * dot(vec3(_2932, _2933, _2934), vec3(_613, _616, _619))) + _2946;
                                float _2952 = _2943 * _2943;
                                float _2956 = (fma(_1998, _2836.z, fma(_1997, _2836.y, _2836.x * _1996)) + _2836.w) / _2897;
                                float _2957 = (fma(_1998, _2851.z, fma(_1997, _2851.y, _2851.x * _1996)) + _2851.w) / _2897;
                                float _2961 = 1.0 - dot(vec2(_2956, _2957), vec2(_2956, _2957));
                                float _3916 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2962 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2963 = _2962 * (((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2939) / ((_2952 * 0.699999988079071044921875) + 1.0));
                                float _2975 = exp2(log2(1.0 / ((_2952 * 3.5) + 5.0)) * 0.25);
                                float _2976 = 1.0 - _673;
                                float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                                float _2984 = _2983 * _2983;
                                float _2985 = _2984 * _2984;
                                float _2986 = _2932 - _2333;
                                float _2987 = _2933 - _2334;
                                float _2988 = _2934 - _2335;
                                float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                                float _2996 = dot(vec3(_613, _616, _619), vec3((-0.0) - _2333, (-0.0) - _2334, (-0.0) - _2335));
                                float _3927 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _3000 = dot(vec3(_613, _616, _619), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                                float _3938 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3003 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                                float _3008 = _2945 * _2984;
                                float _3009 = _3008 * _3008;
                                float _3015 = ((1.0 - _3009) * dot(vec3(_613, _616, _619), vec3(_2932, _2933, _2934))) + _3009;
                                float _3949 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                                float _3017 = 1.0 - _2984;
                                float _3027 = (0.5 / (((_3016 * ((_2999 * _3017) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2984) * _2999))) * _3016;
                                float _3960 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3037 = (_2962 * _2939) * (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_3007 * _3007) * ((_2952 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2963 * _2809.x;
                                frontier_phi_87_pred_1 = _3037 * _2821.z;
                                frontier_phi_87_pred_2 = _3037 * _2821.y;
                                frontier_phi_87_pred_3 = _3037 * _2821.x;
                                frontier_phi_87_pred_4 = _2963 * _2809.z;
                                frontier_phi_87_pred_5 = _2963 * _2809.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3044 = frontier_phi_87_pred;
                            _3043 = frontier_phi_87_pred_1;
                            _3042 = frontier_phi_87_pred_2;
                            _3041 = frontier_phi_87_pred_3;
                            _3046 = frontier_phi_87_pred_4;
                            _3045 = frontier_phi_87_pred_5;
                            _2751 = _3044 + _2764;
                            _2752 = _3045 + _2765;
                            _2753 = _3046 + _2766;
                            _2748 = _3041 + _2761;
                            _2749 = _3042 + _2762;
                            _2750 = _3043 + _2763;
                            if (_2768 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2768;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2751;
                        frontier_phi_81_pred_1 = _2750;
                        frontier_phi_81_pred_2 = _2749;
                        frontier_phi_81_pred_3 = _2748;
                        frontier_phi_81_pred_4 = _2753;
                        frontier_phi_81_pred_5 = _2752;
                    }
                    _2314 = frontier_phi_81_pred;
                    _2312 = frontier_phi_81_pred_1;
                    _2310 = frontier_phi_81_pred_2;
                    _2308 = frontier_phi_81_pred_3;
                    _2318 = frontier_phi_81_pred_4;
                    _2316 = frontier_phi_81_pred_5;
                    uint _2525 = _2524 + 1u;
                    if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2518 = _2308;
                        _2519 = _2310;
                        _2520 = _2312;
                        _2521 = _2314;
                        _2522 = _2316;
                        _2523 = _2318;
                        _2524 = _2525;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2318;
                frontier_phi_56_57_ladder_1 = _2316;
                frontier_phi_56_57_ladder_2 = _2314;
                frontier_phi_56_57_ladder_3 = _2310;
                frontier_phi_56_57_ladder_4 = _2308;
                frontier_phi_56_57_ladder_5 = _2312;
            }
            else
            {
                frontier_phi_56_57_ladder = _2165;
                frontier_phi_56_57_ladder_1 = _2163;
                frontier_phi_56_57_ladder_2 = _2161;
                frontier_phi_56_57_ladder_3 = _2157;
                frontier_phi_56_57_ladder_4 = _2155;
                frontier_phi_56_57_ladder_5 = _2159;
            }
            _2307 = frontier_phi_56_57_ladder_4;
            _2309 = frontier_phi_56_57_ladder_3;
            _2311 = frontier_phi_56_57_ladder_5;
            _2313 = frontier_phi_56_57_ladder_2;
            _2315 = frontier_phi_56_57_ladder_1;
            _2317 = frontier_phi_56_57_ladder;
        }
        float _2322 = isnan(1.0) ? _657 : (isnan(_657) ? 1.0 : min(_657, 1.0));
        _2055 = (_2322 * _2313) + _1785;
        _2057 = (_2322 * _2315) + _1786;
        _2059 = (_2322 * _2317) + _1787;
        _2061 = ((_2307 * 0.039999999105930328369140625) * _2322) + _1938;
        _2063 = ((_2309 * 0.039999999105930328369140625) * _2322) + _1939;
        _2065 = ((_2311 * 0.039999999105930328369140625) * _2322) + _1940;
    }
    else
    {
        _2055 = _1785;
        _2057 = _1786;
        _2059 = _1787;
        _2061 = _1938;
        _2063 = _1939;
        _2065 = _1940;
    }
    uint _2071 = _633 + uint(cbMatDynParam._m0[0u].w);
    float _3976 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3987 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3998 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2102 = (((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2055 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _657))) + ((_2061 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _281) * _494.x) * cbInstanceData._m0[_2071].x);
    float _2104 = ((((cbMtdParam._m0[13u].y * _281) * _494.y) * cbInstanceData._m0[_2071].y) + ((_2063 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2057 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _657)));
    float _2106 = ((((cbMtdParam._m0[13u].z * _281) * _494.z) * cbInstanceData._m0[_2071].z) + ((_2065 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2059 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _657)));
    float _2107 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2108 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2109 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    uint _2110 = _632 + 6u;
    float _2118 = _592 / cbSceneParam._m0[86u].x;
    float _2119 = _593 / cbSceneParam._m0[86u].y;
    vec4 _2133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2135 = _2133.x;
    float _2136 = _2133.y;
    float _2137 = _2133.z;
    float _2138 = _2133.w;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2180 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2181 = _2180 / _560;
        float _2192 = _2181 * _263;
        float _2193 = _264 * _2181;
        float _2194 = (-0.0) - _2193;
        float _2195 = _2181 * _265;
        float _2197 = (cbSceneParam._m0[77u].w * _2194) / _2180;
        float _2198 = _2197 + cbSceneParam._m0[79u].w;
        float _2199 = cbSceneParam._m0[79u].w - _2193;
        float _2205 = sqrt(((_2192 * _2192) + (_2193 * _2193)) + (_2195 * _2195));
        float _2208 = (1.0 - (cbSceneParam._m0[77u].w / _2180)) * _2205;
        float _2214 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2216 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2449;
        if (abs((_2194 - _2197) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2449 = ((((_2198 > 0.0) ? exp2(_2214 * _2198) : (2.0 - exp2(_2216 * _2198))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2208;
        }
        else
        {
            float _2368 = 1.0 / cbSceneParam._m0[80u].x;
            float _2369 = isnan(_2199) ? _2198 : (isnan(_2198) ? _2199 : max(_2198, _2199));
            float _2370 = isnan(_2199) ? _2198 : (isnan(_2198) ? _2199 : min(_2198, _2199));
            float _2379 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : min(_2369, 0.0));
            float _2380 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : min(_2370, 0.0));
            _2449 = ((abs(_2205 / _2194) * cbSceneParam._m0[80u].y) * ((((_2379 - _2380) * 2.0) - ((exp2(_2214 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0)))) - exp2(_2214 * (isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0))))) * _2368)) - ((exp2(_2216 * _2379) - exp2(_2216 * _2380)) * _2368))) + (_2208 * cbSceneParam._m0[80u].z);
        }
        vec4 _2451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, 1.0), 0.0);
        float _2460 = exp2((_2449 * (-1.44269502162933349609375)) * (1.0 - _2451.w));
        float _2461 = log2(_2460);
        float _2477 = log2(_2138);
        _2218 = (exp2(_2477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].x)) * _2451.x) / cbSceneParam._m0[78u].x)) + _2135;
        _2220 = (exp2(_2477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].y)) * _2451.y) / cbSceneParam._m0[78u].y)) + _2136;
        _2222 = (exp2(_2477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2461 * cbSceneParam._m0[78u].z)) * _2451.z) / cbSceneParam._m0[78u].z)) + _2137;
        _2224 = _2460 * _2138;
    }
    else
    {
        _2218 = _2135;
        _2220 = _2136;
        _2222 = _2137;
        _2224 = _2138;
    }
    bool _2487;
    vec4 _2234;
    vec4 _2256;
    float _2258;
    float _2262;
    float _2263;
    float _2264;
    float _2265;
    bool _2275;
    for (;;)
    {
        _2234 = cbMatDynParam._m0[0u];
        float _2236 = roundEven(_2234.y);
        bool _2237 = _2236 == 3.0;
        float _2238 = log2(_2224);
        float _2245 = exp2(_2238 * cbSceneParam._m0[78u].x) * _2107;
        float _2246 = exp2(_2238 * cbSceneParam._m0[78u].y) * _2108;
        float _2247 = exp2(_2238 * cbSceneParam._m0[78u].z) * _2109;
        float _2254 = _574 + (-0.5);
        _2256 = cbMtdParam._m0[1u];
        _2258 = _2256.y * _2254;
        float _2261 = (_2236 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2262 = _2261 * (_2237 ? _2245 : (_2245 + (cbSceneParam._m0[72u].w * _2218)));
        _2263 = _2261 * (_2237 ? _2246 : (_2246 + (cbSceneParam._m0[72u].w * _2220)));
        _2264 = _2261 * (_2237 ? _2247 : (_2247 + (cbSceneParam._m0[72u].w * _2222)));
        _2265 = _2254 * 0.999000012874603271484375;
        _2275 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2275)
        {
            if ((cbInstanceData._m0[_632 + 7u].x + _2265) < 0.5)
            {
                _2487 = true;
                break;
            }
        }
        uint _2403 = _633 + uint(_2234.w);
        if ((cbInstanceData._m0[_2403].w < 1.0) && ((cbInstanceData._m0[_2403].w + _2265) < 0.5))
        {
            _2487 = true;
            break;
        }
        if ((_2258 + 1.0) < _2256.x)
        {
            _2487 = true;
            break;
        }
        _2487 = false;
        break;
    }
    float _2718;
    if (_2487)
    {
        discard_state = true;
        _2718 = 0.0;
    }
    else
    {
        _2718 = cbInstanceData._m0[_2110].w;
    }
    SV_Target.x = _2262;
    SV_Target.y = _2263;
    SV_Target.z = _2264;
    SV_Target.w = _2718;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2110].w;
    discard_exit();
}


