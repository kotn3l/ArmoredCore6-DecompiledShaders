#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1302;
float _3476;
float _3477;
float _3478;
float _3479;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _349 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _385 = cbMtdParam._m0[21u].w + _271;
    float _386 = cbMtdParam._m0[22u].x + _272;
    float _387 = cbMtdParam._m0[22u].y + _273;
    float _401 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_200, _201, _202));
    float _402 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_214, _215, _216));
    float _403 = (-0.0) - dot(vec3(_385, _386, _387), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _407 * _403;
    float _411 = (_407 * _401) + ((cbMtdParam._m0[19u].w * _289) * ((_349.x * 2.0) + (-1.0)));
    float _412 = (_407 * _402) + ((cbMtdParam._m0[20u].x * _289) * ((_349.y * 2.0) + (-1.0)));
    float _413 = _411 * cbMtdParam._m0[18u].z;
    float _414 = _412 * cbMtdParam._m0[18u].y;
    float _415 = fract(TEXCOORD.x);
    float _416 = fract(TEXCOORD.y);
    float _422;
    if (_413 > 0.0)
    {
        _422 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _422 = frontier_phi_3_2_ladder;
    }
    float _430;
    if (_414 > 0.0)
    {
        _430 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _430 = frontier_phi_7_6_ladder;
    }
    bool _432 = _410 > 0.0;
    float _434 = _432 ? (cbMtdParam._m0[15u].x / _410) : 5000.0;
    float _435 = isnan(_430) ? _422 : (isnan(_422) ? _430 : min(_422, _430));
    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
    float _440 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = _415 + (-0.5);
    float _444 = _416 + (-0.5);
    float _447 = ((_436 * _410) + _440) / _440;
    vec4 _471 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_441 + (_436 * _413)) / _447) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_444 + (_436 * _414)) / _447) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _484 = (_471.x * _289) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _289) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _289) * cbMtdParam._m0[9u].z;
    float _504 = _411 * cbMtdParam._m0[20u].z;
    float _505 = _412 * cbMtdParam._m0[20u].y;
    bool _506 = _504 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _511 = frontier_phi_11_10_ladder;
    }
    bool _513 = _505 > 0.0;
    float _518;
    if (_513)
    {
        _518 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _518 = frontier_phi_15_14_ladder;
    }
    float _521 = _432 ? (cbMtdParam._m0[16u].x / _410) : 5000.0;
    float _522 = isnan(_518) ? _511 : (isnan(_511) ? _518 : min(_511, _518));
    float _523 = isnan(_521) ? _522 : (isnan(_522) ? _521 : min(_522, _521));
    float _527 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _531 = ((_523 * _410) + _527) / _527;
    float _536 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _538 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _554 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_441 + (_523 * _504)) / _531) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_444 + (_523 * _505)) / _531) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _569;
    if (_506)
    {
        _569 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _569 = frontier_phi_19_18_ladder;
    }
    float _575;
    if (_513)
    {
        _575 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _575 = frontier_phi_23_22_ladder;
    }
    float _577 = isnan(_575) ? _569 : (isnan(_569) ? _575 : min(_569, _575));
    float _578 = isnan(_521) ? _577 : (isnan(_577) ? _521 : min(_577, _521));
    float _585 = ((_578 * _410) + _527) / _527;
    vec4 _606 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_441 + (_578 * _504)) / _585) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_444 + (_578 * _505)) / _585) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _289) * _554.x) - _484) * _289) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _289) * _554.y) - _485) * _289) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _289) * _554.z) - _486) * _289) * _608) + _486;
    float _634 = _411 * cbMtdParam._m0[21u].x;
    float _635 = _412 * cbMtdParam._m0[20u].w;
    bool _636 = _634 > 0.0;
    float _641;
    if (_636)
    {
        _641 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _641 = frontier_phi_27_26_ladder;
    }
    bool _643 = _635 > 0.0;
    float _648;
    if (_643)
    {
        _648 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _648 = frontier_phi_31_30_ladder;
    }
    float _651 = _432 ? (cbMtdParam._m0[17u].z / _410) : 5000.0;
    float _652 = isnan(_648) ? _641 : (isnan(_641) ? _648 : min(_641, _648));
    float _653 = isnan(_651) ? _652 : (isnan(_652) ? _651 : min(_652, _651));
    float _657 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _661 = ((_653 * _410) + _657) / _657;
    float _666 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _668 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _685 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_441 + (_653 * _634)) / _661) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_444 + (_653 * _635)) / _661) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _700;
    if (_636)
    {
        _700 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _700 = frontier_phi_35_34_ladder;
    }
    float _706;
    if (_643)
    {
        _706 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _706 = frontier_phi_39_38_ladder;
    }
    float _708 = isnan(_706) ? _700 : (isnan(_700) ? _706 : min(_700, _706));
    float _709 = isnan(_651) ? _708 : (isnan(_708) ? _651 : min(_708, _651));
    float _716 = ((_709 * _410) + _657) / _657;
    vec4 _736 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_441 + (_709 * _634)) / _716) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_444 + (_709 * _635)) / _716) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _738 = _736.x;
    vec4 _762 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _766 = _762.z;
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3538 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    float _779 = fma(_776, _207, fma(_770, _214, _769 * _200));
    float _782 = fma(_776, _208, fma(_770, _215, _769 * _201));
    float _785 = fma(_776, _209, fma(_770, _216, _769 * _202));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3549 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _793 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3571 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3582 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _816 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _817 = _271 * _816;
    float _818 = _272 * _816;
    float _819 = _273 * _816;
    vec4 _824 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _826 = _824.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _983 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _989 = (cbMatDynParam._m0[5u].x * _983) + cbMatDynParam._m0[5u].y;
        float _3593 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _994 = (cbMatDynParam._m0[5u].z * _983) + cbMatDynParam._m0[5u].w;
        float _3604 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) - _990)) + _990) < ((_826 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _861 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _864 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _877 = uint(roundEven(NORMAL.w)) * 13u;
    uint _879 = _877 + 9u;
    uint _880 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _886 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_880].x;
    float _887 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_880].y;
    float _888 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_880].z;
    float _3615 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _903 = _900.x * TEXCOORD.z;
    float _904 = dot(vec3(_790, _791, _792), vec3(_817, _818, _819));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _790) - _817;
    float _912 = (_907 * _791) - _818;
    float _913 = (_907 * _792) - _819;
    float _917 = abs(dot(vec3(_817, _818, _819), vec3(_790, _791, _792)));
    float _3648 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_793);
    float _932 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1028 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1032 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1036 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1059 = _964 + _790;
        float _1060 = _968 + _791;
        float _1061 = _972 + _792;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1028 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1032 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1036 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_790, _791, _792), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3696 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_790, _791, _792), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3729 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_790, _791, _792), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3762 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1349 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1353 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1376 = _964 + _790;
        float _1377 = _968 + _791;
        float _1378 = _972 + _792;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_790, _791, _792), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3825 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_790, _791, _792), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _3858 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_790, _791, _792), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _3891 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = _1302;
        _1624 = _1302;
        _1625 = _1302;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1316)) + _1316;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _911 * 0.5;
    float _1683 = _912 * 0.5;
    float _1684 = _913 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1812 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1815 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1843 = frontier_phi_57_55_ladder;
        }
        float _2188;
        if (_1812 > 0.0)
        {
            _2188 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2188 = frontier_phi_66_62_ladder;
        }
        float _2512;
        if (_1815 > 0.0)
        {
            _2512 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2512 = frontier_phi_80_73_ladder;
        }
        float _2514 = isnan(_2188) ? _1843 : (isnan(_1843) ? _2188 : min(_1843, _2188));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1809) + _1798;
        float _2520 = (_2515 * _1812) + _1802;
        float _2521 = (_2515 * _1815) + _1806;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2521, cbModelParam._m0[9u].z, fma(_2520, cbModelParam._m0[9u].y, _2519 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2521, cbModelParam._m0[10u].z, fma(_2520, cbModelParam._m0[10u].y, _2519 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2521, cbModelParam._m0[11u].z, fma(_2520, cbModelParam._m0[11u].y, _2519 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_56_80_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_56_80_ladder_2;
        _1833 = frontier_phi_56_80_ladder_1;
        _1835 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1906 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1909 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _2193;
        if (_1903 > 0.0)
        {
            _2193 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2193 = frontier_phi_68_64_ladder;
        }
        float _2538;
        if (_1906 > 0.0)
        {
            _2538 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2538 = frontier_phi_82_75_ladder;
        }
        float _2728;
        if (_1909 > 0.0)
        {
            _2728 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2728 = frontier_phi_100_93_ladder;
        }
        float _2730 = isnan(_2538) ? _2193 : (isnan(_2193) ? _2538 : min(_2193, _2538));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _1903) + _1892;
        float _2736 = (_2731 * _1906) + _1896;
        float _2737 = (_2731 * _1909) + _1900;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_65_100_ladder = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2979.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2979.z * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_65_100_ladder_1;
        _1930 = frontier_phi_65_100_ladder;
        _1932 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1840);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1944 = ((((1.0 - _932) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_932 * _919)) * _903;
    float _1945 = _1944 * ((cbModelParam._m0[1u].w * (_1928 - _1831)) + _1831);
    float _1946 = _1944 * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1947 = _1944 * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    uvec4 _1966 = floatBitsToUint(cbInstanceData._m0[_877 + 5u]);
    uint _1968 = _1966.x * 14u;
    uint _1969 = _1968 + 13u;
    float _1974 = _903 + (-1.0);
    float _1977 = (cbLight._m0[_1969].x * _1974) + 1.0;
    float _1978 = (cbLight._m0[_1969].y * _1974) + 1.0;
    uint _1979 = _1968 + 5u;
    float _1985 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _1989 = _1968 + 4u;
    float _1995 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1999 = _1968 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_790, _791, _792));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_790, _791, _792));
    float _4027 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4038 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1979].x * _1985) * _2020) + ((cbLight._m0[_1989].x * _1995) * _2018);
    float _2028 = ((_1985 * cbLight._m0[_1979].y) * _2020) + ((_1995 * cbLight._m0[_1989].y) * _2018);
    float _2029 = ((_1985 * cbLight._m0[_1979].z) * _2020) + ((_1995 * cbLight._m0[_1989].z) * _2018);
    uint _2031 = _1968 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _793) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1968].x + _817;
    float _2047 = cbLight._m0[_1968].y + _818;
    float _2048 = cbLight._m0[_1968].z + _819;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_1968].xyz));
    float _4049 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2060 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2061 = dot(vec3(_790, _791, _792), vec3(_2053, _2054, _2055));
    float _4071 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2053, _2054, _2055));
    float _4082 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2045;
    float _2096 = (0.5 / (((_2060 * ((_2059 * _2085) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2085) + _2045) * _2059))) * _2059;
    float _4093 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2109 = _1968 + 9u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _793) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1999].x + _817;
    float _2123 = cbLight._m0[_1999].y + _818;
    float _2124 = cbLight._m0[_1999].z + _819;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_1999].xyz));
    float _4104 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2136 = dot(vec3(_790, _791, _792), vec3(_2129, _2130, _2131));
    float _4115 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2129, _2130, _2131));
    float _4126 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2121 * _2121;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2158 = 1.0 - _2121;
    float _2168 = (0.5 / (((_2060 * ((_2135 * _2158) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2158) + _2121) * _2135))) * _2135;
    float _4137 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    float _2180 = (((_2157 * cbLight._m0[_2109].x) * _2170) * _1985) + (((_2084 * cbLight._m0[_2031].x) * _2098) * _1995);
    float _2181 = (((_2157 * cbLight._m0[_2109].y) * _2170) * _1985) + (((_2084 * cbLight._m0[_2031].y) * _2098) * _1995);
    float _2182 = (((_2157 * cbLight._m0[_2109].z) * _2170) * _1985) + (((_2084 * cbLight._m0[_2031].z) * _2098) * _1995);
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1966.y == 0u)
    {
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2237;
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2237;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2237;
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.x;
        uint _2264 = uint((float(_2252.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2253))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2253)));
        float _2274 = (log2(_2240 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2275 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        uint _2278 = uint(isnan(14.0) ? _2275 : (isnan(_2275) ? 14.0 : min(_2275, 14.0)));
        uvec4 _2283 = texelFetch(g_lightClusterGridBuffer, int(((_2278 << 2u) + (_2264 << 6u)) >> 2u));
        uint _2284 = _2283.x;
        uint _2285 = _2252.z;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((((1u << ((_2285 >> 4u) & 15u)) + 4294967295u) & _2284) == 0u) || ((_2285 & 240u) == 0u))
        {
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
        }
        else
        {
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2591)
                {
                    frontier_phi_95_pred = _2576;
                    frontier_phi_95_pred_1 = _2575;
                    frontier_phi_95_pred_2 = _2577;
                    frontier_phi_95_pred_3 = _2580;
                    frontier_phi_95_pred_4 = _2579;
                    frontier_phi_95_pred_5 = _2578;
                }
                else
                {
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    uint _2777;
                    _2771 = _2575;
                    _2772 = _2576;
                    _2773 = _2577;
                    _2774 = _2578;
                    _2775 = _2579;
                    _2776 = _2580;
                    _2777 = _2590;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2781 = uint(findLSB(_2777)) + (_2581 << 5u);
                        uint _2778 = (_2777 + 4294967295u) & _2777;
                        uint _2783 = _2781 * 48u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2803 = (_2781 * 48u) + 4u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2822 = (_2781 * 48u) + 8u;
                        vec3 _2833 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x));
                        float _2837 = _2797.x - _2238;
                        float _2838 = _2797.y - _2239;
                        float _2839 = _2797.z - _2240;
                        float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                        float _2843 = inversesqrt(_2840);
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2847 = dot(vec3(_858, _861, _864), vec3(_2844, _2845, _2846));
                        float _2852 = 1.0 - (_2840 * _2797.w);
                        float _4158 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2854 = sqrt(_2840) * _2816.w;
                        float _2857 = 1.39999997615814208984375 / (_2854 + 1.39999997615814208984375);
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2847) + _2858;
                        float _2864 = _2854 * _2854;
                        float _2868 = ((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2853) / ((_2864 * 0.699999988079071044921875) + 1.0);
                        float _2872 = (-0.0) - _2238;
                        float _2873 = (-0.0) - _2239;
                        float _2874 = (-0.0) - _2240;
                        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2889 = exp2(log2(1.0 / ((_2864 * 3.5) + 5.0)) * 0.25);
                        float _2890 = 1.0 - _919;
                        float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                        float _2898 = _2897 * _2897;
                        float _2899 = _2898 * _2898;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2910 = dot(vec3(_858, _861, _864), vec3(_2879, _2880, _2881));
                        float _4174 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2914 = dot(vec3(_858, _861, _864), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                        float _4185 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                        float _2922 = _2857 * _2898;
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2847) + _2923;
                        float _4196 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2928 = 1.0 - _2898;
                        float _2938 = (0.5 / (((_2927 * ((_2913 * _2928) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2927 * _2928) + _2898) * _2913))) * _2927;
                        float _4207 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2949 = (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2921 * _2921) * ((_2864 * 2.1991131305694580078125) + 3.141590118408203125))) * _2853;
                        _2675 = (_2868 * _2816.x) + _2774;
                        _2676 = (_2868 * _2816.y) + _2775;
                        _2677 = (_2868 * _2816.z) + _2776;
                        _2672 = (_2949 * _2833.x) + _2771;
                        _2673 = (_2949 * _2833.y) + _2772;
                        _2674 = (_2949 * _2833.z) + _2773;
                        if (_2778 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2771 = _2672;
                            _2772 = _2673;
                            _2773 = _2674;
                            _2774 = _2675;
                            _2775 = _2676;
                            _2776 = _2677;
                            _2777 = _2778;
                        }
                    }
                    frontier_phi_95_pred = _2673;
                    frontier_phi_95_pred_1 = _2672;
                    frontier_phi_95_pred_2 = _2674;
                    frontier_phi_95_pred_3 = _2677;
                    frontier_phi_95_pred_4 = _2676;
                    frontier_phi_95_pred_5 = _2675;
                }
                _2394 = frontier_phi_95_pred;
                _2392 = frontier_phi_95_pred_1;
                _2396 = frontier_phi_95_pred_2;
                _2402 = frontier_phi_95_pred_3;
                _2400 = frontier_phi_95_pred_4;
                _2398 = frontier_phi_95_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2392;
                    _2576 = _2394;
                    _2577 = _2396;
                    _2578 = _2398;
                    _2579 = _2400;
                    _2580 = _2402;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
        }
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.z;
        uint _2408 = (_2406 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2408) & _2284) == 0u)
        {
            _2543 = _2391;
            _2545 = _2393;
            _2547 = _2395;
            _2549 = _2397;
            _2551 = _2399;
            _2553 = _2401;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
            float _2569 = _2568 * _2238;
            float _2570 = _2568 * _2239;
            float _2571 = _2568 * _2240;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2408 < ((_2406 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2754 = _2391;
                float _2755 = _2393;
                float _2756 = _2395;
                float _2757 = _2397;
                float _2758 = _2399;
                float _2759 = _2401;
                uint _2760 = _2408;
                uint _2769;
                bool _2770;
                for (;;)
                {
                    _2769 = texelFetch(g_lightClassification, int((((_2278 << 5u) + (_2264 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                    _2770 = _2769 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2770)
                    {
                        frontier_phi_109_pred = _2755;
                        frontier_phi_109_pred_1 = _2754;
                        frontier_phi_109_pred_2 = _2759;
                        frontier_phi_109_pred_3 = _2758;
                        frontier_phi_109_pred_4 = _2757;
                        frontier_phi_109_pred_5 = _2756;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _2997 = _2754;
                        float _2998 = _2755;
                        float _2999 = _2756;
                        float _3000 = _2757;
                        float _3001 = _2758;
                        float _3002 = _2759;
                        uint _3003 = _2769;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3072;
                        vec4 _3087;
                        float _3133;
                        bool _3134;
                        for (;;)
                        {
                            uint _3014 = ((_2760 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3059 = (_3014 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_3014 * 40u) + 20u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3014 * 40u) + 24u;
                            vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3108 = (_3014 * 40u) + 28u;
                            vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3133 = fma(_2240, _3121.z, fma(_2239, _3121.y, _3121.x * _2238)) + _3121.w;
                            _3134 = !((fma(_2240, _3102.z, fma(_2239, _3102.y, _3102.x * _2238)) + _3102.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3134)
                            {
                                float _3161 = _3029.x - _2238;
                                float _3162 = _3029.y - _2239;
                                float _3163 = _3029.z - _2240;
                                float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                                float _3167 = inversesqrt(_3164);
                                float _3168 = _3167 * _3161;
                                float _3169 = _3167 * _3162;
                                float _3170 = _3167 * _3163;
                                float _3174 = 1.0 - (_3164 / (_3030 * _3030));
                                float _4218 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3175 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3179 = sqrt(_3164) * _3045.w;
                                float _3181 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                                float _3182 = _3181 * _3181;
                                float _3185 = ((1.0 - _3182) * dot(vec3(_3168, _3169, _3170), vec3(_858, _861, _864))) + _3182;
                                float _3188 = _3179 * _3179;
                                float _3192 = (fma(_2240, _3072.z, fma(_2239, _3072.y, _3072.x * _2238)) + _3072.w) / _3133;
                                float _3193 = (fma(_2240, _3087.z, fma(_2239, _3087.y, _3087.x * _2238)) + _3087.w) / _3133;
                                float _3197 = 1.0 - dot(vec2(_3192, _3193), vec2(_3192, _3193));
                                float _4234 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3199 = _3198 * (((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3175) / ((_3188 * 0.699999988079071044921875) + 1.0));
                                float _3211 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                                float _3212 = 1.0 - _919;
                                float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                                float _3220 = _3219 * _3219;
                                float _3221 = _3220 * _3220;
                                float _3222 = _3168 - _2569;
                                float _3223 = _3169 - _2570;
                                float _3224 = _3170 - _2571;
                                float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                                float _3232 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4245 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3236 = dot(vec3(_858, _861, _864), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                                float _4256 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                                float _3244 = _3181 * _3220;
                                float _3245 = _3244 * _3244;
                                float _3251 = ((1.0 - _3245) * dot(vec3(_858, _861, _864), vec3(_3168, _3169, _3170))) + _3245;
                                float _4267 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3253 = 1.0 - _3220;
                                float _3263 = (0.5 / (((_3252 * ((_3235 * _3253) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3220) * _3235))) * _3252;
                                float _4278 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3273 = (_3198 * _3175) * (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3243 * _3243) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3199 * _3045.y;
                                frontier_phi_115_pred_1 = _3199 * _3045.x;
                                frontier_phi_115_pred_2 = _3273 * _3057.z;
                                frontier_phi_115_pred_3 = _3273 * _3057.y;
                                frontier_phi_115_pred_4 = _3273 * _3057.x;
                                frontier_phi_115_pred_5 = _3199 * _3045.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3281 = frontier_phi_115_pred;
                            _3280 = frontier_phi_115_pred_1;
                            _3279 = frontier_phi_115_pred_2;
                            _3278 = frontier_phi_115_pred_3;
                            _3277 = frontier_phi_115_pred_4;
                            _3282 = frontier_phi_115_pred_5;
                            _2987 = _3280 + _3000;
                            _2988 = _3281 + _3001;
                            _2989 = _3282 + _3002;
                            _2984 = _3277 + _2997;
                            _2985 = _3278 + _2998;
                            _2986 = _3279 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2985;
                        frontier_phi_109_pred_1 = _2984;
                        frontier_phi_109_pred_2 = _2989;
                        frontier_phi_109_pred_3 = _2988;
                        frontier_phi_109_pred_4 = _2987;
                        frontier_phi_109_pred_5 = _2986;
                    }
                    _2546 = frontier_phi_109_pred;
                    _2544 = frontier_phi_109_pred_1;
                    _2554 = frontier_phi_109_pred_2;
                    _2552 = frontier_phi_109_pred_3;
                    _2550 = frontier_phi_109_pred_4;
                    _2548 = frontier_phi_109_pred_5;
                    uint _2761 = _2760 + 1u;
                    if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2754 = _2544;
                        _2755 = _2546;
                        _2756 = _2548;
                        _2757 = _2550;
                        _2758 = _2552;
                        _2759 = _2554;
                        _2760 = _2761;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2544;
                frontier_phi_84_85_ladder_1 = _2548;
                frontier_phi_84_85_ladder_2 = _2554;
                frontier_phi_84_85_ladder_3 = _2552;
                frontier_phi_84_85_ladder_4 = _2550;
                frontier_phi_84_85_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_84_85_ladder = _2391;
                frontier_phi_84_85_ladder_1 = _2395;
                frontier_phi_84_85_ladder_2 = _2401;
                frontier_phi_84_85_ladder_3 = _2399;
                frontier_phi_84_85_ladder_4 = _2397;
                frontier_phi_84_85_ladder_5 = _2393;
            }
            _2543 = frontier_phi_84_85_ladder;
            _2545 = frontier_phi_84_85_ladder_5;
            _2547 = frontier_phi_84_85_ladder_1;
            _2549 = frontier_phi_84_85_ladder_4;
            _2551 = frontier_phi_84_85_ladder_3;
            _2553 = frontier_phi_84_85_ladder_2;
        }
        float _2558 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2297 = (_2558 * _2549) + _2027;
        _2299 = (_2558 * _2551) + _2028;
        _2301 = (_2558 * _2553) + _2029;
        _2303 = ((_2543 * 0.039999999105930328369140625) * _2558) + _2180;
        _2305 = ((_2545 * 0.039999999105930328369140625) * _2558) + _2181;
        _2307 = ((_2547 * 0.039999999105930328369140625) * _2558) + _2182;
    }
    else
    {
        _2297 = _2027;
        _2299 = _2028;
        _2301 = _2029;
        _2303 = _2180;
        _2305 = _2181;
        _2307 = _2182;
    }
    uint _2313 = _879 + uint(cbMatDynParam._m0[0u].w);
    float _4294 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4305 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4316 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2338 = (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2297 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _903))) + ((_2303 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2313].x * ((((((cbMtdParam._m0[14u].x * _289) * _685.x) - _618) * _289) * _738) + _618));
    float _2340 = ((cbInstanceData._m0[_2313].y * ((((((cbMtdParam._m0[14u].y * _289) * _685.y) - _619) * _289) * _738) + _619)) + ((_2305 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2299 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _903)));
    float _2342 = ((cbInstanceData._m0[_2313].z * ((((((cbMtdParam._m0[14u].z * _289) * _685.z) - _620) * _289) * _738) + _620)) + ((_2307 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2301 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _903)));
    float _2343 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2344 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    uint _2346 = _877 + 6u;
    float _2354 = _838 / cbSceneParam._m0[86u].x;
    float _2355 = _839 / cbSceneParam._m0[86u].y;
    vec4 _2369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2371 = _2369.x;
    float _2372 = _2369.y;
    float _2373 = _2369.z;
    float _2374 = _2369.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2416 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2417 = _2416 / _812;
        float _2428 = _2417 * _271;
        float _2429 = _272 * _2417;
        float _2430 = (-0.0) - _2429;
        float _2431 = _2417 * _273;
        float _2433 = (cbSceneParam._m0[77u].w * _2430) / _2416;
        float _2434 = _2433 + cbSceneParam._m0[79u].w;
        float _2435 = cbSceneParam._m0[79u].w - _2429;
        float _2441 = sqrt(((_2428 * _2428) + (_2429 * _2429)) + (_2431 * _2431));
        float _2444 = (1.0 - (cbSceneParam._m0[77u].w / _2416)) * _2441;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2430 - _2433) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2434 > 0.0) ? exp2(_2450 * _2434) : (2.0 - exp2(_2452 * _2434))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2444;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : max(_2434, _2435));
            float _2606 = isnan(_2435) ? _2434 : (isnan(_2434) ? _2435 : min(_2434, _2435));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2685 = ((abs(_2441 / _2430) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2452 * _2615) - exp2(_2452 * _2616)) * _2604))) + (_2444 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2374);
        _2454 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2371;
        _2456 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2372;
        _2458 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2373;
        _2460 = _2696 * _2374;
    }
    else
    {
        _2454 = _2371;
        _2456 = _2372;
        _2458 = _2373;
        _2460 = _2374;
    }
    bool _2723;
    vec4 _2470;
    vec4 _2492;
    float _2494;
    float _2498;
    float _2499;
    float _2500;
    float _2501;
    bool _2511;
    for (;;)
    {
        _2470 = cbMatDynParam._m0[0u];
        float _2472 = roundEven(_2470.y);
        bool _2473 = _2472 == 3.0;
        float _2474 = log2(_2460);
        float _2481 = exp2(_2474 * cbSceneParam._m0[78u].x) * _2343;
        float _2482 = exp2(_2474 * cbSceneParam._m0[78u].y) * _2344;
        float _2483 = exp2(_2474 * cbSceneParam._m0[78u].z) * _2345;
        float _2490 = _826 + (-0.5);
        _2492 = cbMtdParam._m0[1u];
        _2494 = _2492.y * _2490;
        float _2497 = (_2472 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2498 = _2497 * (_2473 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2454)));
        _2499 = _2497 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2456)));
        _2500 = _2497 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2458)));
        _2501 = _2490 * 0.999000012874603271484375;
        _2511 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2511)
        {
            if ((cbInstanceData._m0[_877 + 7u].x + _2501) < 0.5)
            {
                _2723 = true;
                break;
            }
        }
        uint _2639 = _879 + uint(_2470.w);
        if ((cbInstanceData._m0[_2639].w < 1.0) && ((cbInstanceData._m0[_2639].w + _2501) < 0.5))
        {
            _2723 = true;
            break;
        }
        if ((_2494 + 1.0) < _2492.x)
        {
            _2723 = true;
            break;
        }
        _2723 = false;
        break;
    }
    float _2954;
    if (_2723)
    {
        discard_state = true;
        _2954 = 0.0;
    }
    else
    {
        _2954 = cbInstanceData._m0[_2346].w;
    }
    SV_Target.x = _2498;
    SV_Target.y = _2499;
    SV_Target.z = _2500;
    SV_Target.w = _2954;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2346].w;
    discard_exit();
}


