#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _831;
float _2762;
float _2763;
float _2764;
float _2765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = cbMtdParam._m0[21u].w + _254;
    float _314 = cbMtdParam._m0[22u].x + _255;
    float _315 = cbMtdParam._m0[22u].y + _256;
    float _332 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _333 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _334 = (-0.0) - dot(vec3(_313, _314, _315), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _341 = _338 * _334;
    float _344 = ((_338 * _332) + (((_278.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _345 = ((_338 * _333) + (((_278.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _346 = fract(TEXCOORD.x);
    float _347 = fract(TEXCOORD.y);
    float _353;
    if (_344 > 0.0)
    {
        _353 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _353 = frontier_phi_3_2_ladder;
    }
    float _361;
    if (_345 > 0.0)
    {
        _361 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _361 = frontier_phi_7_6_ladder;
    }
    float _365 = (_341 > 0.0) ? (cbMtdParam._m0[15u].x / _341) : 5000.0;
    float _366 = isnan(_361) ? _353 : (isnan(_353) ? _361 : min(_353, _361));
    float _367 = isnan(_365) ? _366 : (isnan(_366) ? _365 : min(_366, _365));
    float _371 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = ((_367 * _341) + _371) / _371;
    vec4 _402 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_346 + (-0.5)) + (_367 * _344)) / _378) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_347 + (-0.5)) + (_367 * _345)) / _378) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _2784 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _2795 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2806 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _438 = _254 * _437;
    float _439 = _255 * _437;
    float _440 = _256 * _437;
    vec4 _445 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _447 = _445.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _544 = sqrt(((_254 * _254) + (_255 * _255)) + (_256 * _256));
        float _551 = (cbMatDynParam._m0[5u].x * _544) + cbMatDynParam._m0[5u].y;
        float _2817 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _552 = isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0));
        float _556 = (cbMatDynParam._m0[5u].z * _544) + cbMatDynParam._m0[5u].w;
        float _2828 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0))) - _552)) + _552) < ((_447 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _460 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _461 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _474 = uint(roundEven(NORMAL.w)) * 13u;
    uint _476 = _474 + 9u;
    uint _477 = _476 + uint(cbMatDynParam._m0[0u].w);
    float _483 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0)))) * cbInstanceData._m0[_477].x;
    float _484 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0)))) * cbInstanceData._m0[_477].y;
    float _485 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) * cbInstanceData._m0[_477].z;
    float _2839 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0));
    float _2850 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0));
    float _2861 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0));
    vec4 _497 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _460, cbSceneParam._m0[86u].y * _461));
    float _500 = _497.x * TEXCOORD.z;
    float _501 = (-0.0) - _438;
    float _502 = (-0.0) - _439;
    float _503 = (-0.0) - _440;
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _830;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = (cbModelParam._m0[37u].x * ((((fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _620 = (cbModelParam._m0[37u].y * ((((fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _621 = (((((fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        float _658 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_624.x + (-0.5));
        float _660 = _658 * (_624.y + (-0.5));
        float _661 = _658 * (_624.z + (-0.5));
        float _668 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_631.x + (-0.5));
        float _670 = _668 * (_631.y + (-0.5));
        float _671 = _668 * (_631.z + (-0.5));
        float _678 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_638.x + (-0.5));
        float _680 = _678 * (_638.y + (-0.5));
        float _681 = _678 * (_638.z + (-0.5));
        float _688 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_645.x + (-0.5));
        float _690 = _688 * (_645.y + (-0.5));
        float _691 = _688 * (_645.z + (-0.5));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = _659 * 0.5;
        float _696 = _669 * 0.5;
        float _697 = _679 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _712 = (dot(vec3(0.0), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _2887 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _722 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _2898 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _2909 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0))) * (_724 + 1.0))) + _729) * _692;
        float _739 = _660 * 0.5;
        float _740 = _670 * 0.5;
        float _741 = _680 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(0.0), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _2920 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _2931 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _2942 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0))) * (_766 + 1.0))) + _771) * _693;
        float _781 = _661 * 0.5;
        float _782 = _671 * 0.5;
        float _783 = _681 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(0.0), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _2953 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _2964 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _2975 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0))) * (_808 + 1.0))) + _813) * _694;
        _830 = _661;
        _832 = _660;
        _833 = _659;
        _834 = _671;
        _835 = _670;
        _836 = _669;
        _837 = _681;
        _838 = _680;
        _839 = _679;
        _840 = _694;
        _841 = _693;
        _842 = _692;
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
    }
    else
    {
        _830 = _831;
        _832 = _831;
        _833 = _831;
        _834 = _831;
        _835 = _831;
        _836 = _831;
        _837 = _831;
        _838 = _831;
        _839 = _831;
        _840 = _831;
        _841 = _831;
        _842 = _831;
        _843 = 0.0;
        _844 = 0.0;
        _845 = 0.0;
    }
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = (cbModelParam._m0[38u].x * ((((fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _903 = (cbModelParam._m0[38u].y * ((((fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _904 = (((((fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _939 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_906.x + (-0.5));
        float _941 = _939 * (_906.y + (-0.5));
        float _942 = _939 * (_906.z + (-0.5));
        float _949 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_913.x + (-0.5));
        float _951 = _949 * (_913.y + (-0.5));
        float _952 = _949 * (_913.z + (-0.5));
        float _959 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_920.x + (-0.5));
        float _961 = _959 * (_920.y + (-0.5));
        float _962 = _959 * (_920.z + (-0.5));
        float _969 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_927.x + (-0.5));
        float _971 = _969 * (_927.y + (-0.5));
        float _972 = _969 * (_927.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(0.0), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3016 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3027 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3038 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0))) * (_1003 + 1.0))) + _1008) * _973;
        float _1018 = _941 * 0.5;
        float _1019 = _951 * 0.5;
        float _1020 = _961 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(0.0), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3049 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3060 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3071 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0))) * (_1045 + 1.0))) + _1050) * _974;
        float _1060 = _942 * 0.5;
        float _1061 = _952 * 0.5;
        float _1062 = _962 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(0.0), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3082 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3093 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3104 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))) * (_1087 + 1.0))) + _1092) * _975;
        _1109 = _942;
        _1110 = _941;
        _1111 = _940;
        _1112 = _952;
        _1113 = _951;
        _1114 = _950;
        _1115 = _962;
        _1116 = _961;
        _1117 = _960;
        _1118 = _975;
        _1119 = _974;
        _1120 = _973;
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _831;
        _1110 = _831;
        _1111 = _831;
        _1112 = _831;
        _1113 = _831;
        _1114 = _831;
        _1115 = _831;
        _1116 = _831;
        _1117 = _831;
        _1118 = _831;
        _1119 = _831;
        _1120 = _831;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _843)) + _843;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _844)) + _844;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _845)) + _845;
    float _1156 = fma(_1135, cbSceneParam._m0[89u].z, fma(_1134, cbSceneParam._m0[89u].y, _1133 * cbSceneParam._m0[89u].x));
    float _1159 = fma(_1135, cbSceneParam._m0[90u].z, fma(_1134, cbSceneParam._m0[90u].y, _1133 * cbSceneParam._m0[90u].x));
    float _1162 = fma(_1135, cbSceneParam._m0[91u].z, fma(_1134, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1133));
    float _1177 = _438 * (-0.5);
    float _1178 = _439 * (-0.5);
    float _1179 = _440 * (-0.5);
    float _1180 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1183 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1186 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_830, _834, _837, _840));
        float _1197 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_832, _835, _838, _841));
        float _1201 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_833, _836, _839, _842));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1177, _1178, _1179, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1177, _1178, _1179, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1326;
    float _1328;
    float _1330;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1293 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1297 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1301 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1304 = fma(_503, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501));
        float _1307 = fma(_503, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501));
        float _1310 = fma(_503, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501));
        float _1336;
        if (_1304 > 0.0)
        {
            _1336 = abs((1.0 - _1293) / _1304);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1293 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1336 = frontier_phi_25_23_ladder;
        }
        float _1631;
        if (_1307 > 0.0)
        {
            _1631 = abs((1.0 - _1297) / _1307);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1297 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1631 = frontier_phi_34_30_ladder;
        }
        float _1942;
        if (_1310 > 0.0)
        {
            _1942 = abs((1.0 - _1301) / _1310);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1301 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1942 = frontier_phi_48_41_ladder;
        }
        float _1944 = isnan(_1631) ? _1336 : (isnan(_1336) ? _1631 : min(_1336, _1631));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1304) + _1293;
        float _1950 = (_1945 * _1307) + _1297;
        float _1951 = (_1945 * _1310) + _1301;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1952;
        float _1955 = _1952 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1951 > _1955) || ((_1951 < _1953) || ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 < _1953) || (_1949 > _1955))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1951, cbModelParam._m0[9u].z, fma(_1950, cbModelParam._m0[9u].y, _1949 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1951, cbModelParam._m0[10u].z, fma(_1950, cbModelParam._m0[10u].y, _1949 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1951, cbModelParam._m0[11u].z, fma(_1950, cbModelParam._m0[11u].y, _1949 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_24_48_ladder = _2090.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2090.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2090.x * cbModelParam._m0[1u].y;
        }
        _1326 = frontier_phi_24_48_ladder_2;
        _1328 = frontier_phi_24_48_ladder_1;
        _1330 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_501, _502, _503), _1244);
        _1326 = _1314.x * cbModelParam._m0[1u].y;
        _1328 = _1314.y * cbModelParam._m0[1u].y;
        _1330 = _1314.z * cbModelParam._m0[1u].y;
    }
    float _1333 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1385 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1389 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1393 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1396 = fma(_503, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501));
        float _1399 = fma(_503, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501));
        float _1402 = fma(_503, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501));
        float _1636;
        if (_1396 > 0.0)
        {
            _1636 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1636 = frontier_phi_36_32_ladder;
        }
        float _1968;
        if (_1399 > 0.0)
        {
            _1968 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1968 = frontier_phi_50_43_ladder;
        }
        float _2155;
        if (_1402 > 0.0)
        {
            _2155 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2155 = frontier_phi_68_61_ladder;
        }
        float _2157 = isnan(_1968) ? _1636 : (isnan(_1636) ? _1968 : min(_1636, _1968));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1396) + _1385;
        float _2163 = (_2158 * _1399) + _1389;
        float _2164 = (_2158 * _1402) + _1393;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2165;
        float _2168 = _2165 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2164 > _2168) || ((_2164 < _2166) || ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 < _2166) || (_2162 > _2168))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2164, cbModelParam._m0[17u].z, fma(_2163, cbModelParam._m0[17u].y, _2162 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2164, cbModelParam._m0[18u].z, fma(_2163, cbModelParam._m0[18u].y, _2162 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2164, cbModelParam._m0[19u].z, fma(_2163, cbModelParam._m0[19u].y, _2162 * cbModelParam._m0[19u].x))), _1333);
            frontier_phi_33_68_ladder = _2356.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2356.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2356.x * cbModelParam._m0[1u].z;
        }
        _1421 = frontier_phi_33_68_ladder_2;
        _1423 = frontier_phi_33_68_ladder;
        _1425 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_501, _502, _503), _1333);
        _1421 = _1405.x * cbModelParam._m0[1u].z;
        _1423 = _1405.y * cbModelParam._m0[1u].z;
        _1425 = _1405.z * cbModelParam._m0[1u].z;
    }
    float _1437 = _500 * 0.01200000010430812835693359375;
    float _1439 = _1437 * ((cbModelParam._m0[1u].w * (_1421 - _1326)) + _1326);
    float _1440 = _1437 * ((cbModelParam._m0[1u].w * (_1423 - _1328)) + _1328);
    float _1441 = _1437 * ((cbModelParam._m0[1u].w * (_1425 - _1330)) + _1330);
    float _1444 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, _1439 * cbSceneParam._m0[91u].x));
    uvec4 _1460 = floatBitsToUint(cbInstanceData._m0[_474 + 5u]);
    uint _1462 = _1460.x * 14u;
    uint _1463 = _1462 + 13u;
    float _1468 = _500 + (-1.0);
    float _1471 = (cbLight._m0[_1463].x * _1468) + 1.0;
    float _1472 = (cbLight._m0[_1463].y * _1468) + 1.0;
    uint _1473 = _1462 + 5u;
    float _1479 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
    uint _1483 = _1462 + 4u;
    float _1489 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
    uint _1493 = _1462 | 1u;
    float _1504 = dot(vec3(cbLight._m0[_1462].xyz), vec3(0.0));
    float _1507 = dot(vec3(cbLight._m0[_1493].xyz), vec3(0.0));
    float _3240 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _3251 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
    float _1512 = (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * 0.3183098733425140380859375;
    float _1514 = (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * 0.3183098733425140380859375;
    float _1521 = ((cbLight._m0[_1473].x * _1479) * _1514) + ((cbLight._m0[_1483].x * _1489) * _1512);
    float _1522 = ((_1479 * cbLight._m0[_1473].y) * _1514) + ((_1489 * cbLight._m0[_1483].y) * _1512);
    float _1523 = ((_1479 * cbLight._m0[_1473].z) * _1514) + ((_1489 * cbLight._m0[_1483].z) * _1512);
    uint _1524 = _1462 + 8u;
    float _1530 = cbLight._m0[_1462].x + _438;
    float _1531 = cbLight._m0[_1462].y + _439;
    float _1532 = cbLight._m0[_1462].z + _440;
    float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
    float _1540 = dot(vec3(0.0), vec3(cbLight._m0[_1462].xyz));
    float _3262 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1543 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _1544 = dot(vec3(0.0), vec3(_438, _439, _440));
    float _3273 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1547 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _1548 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1530 * _1536, _1531 * _1536, _1532 * _1536));
    float _3284 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
    float _1559 = (exp2(log2(1.0 - (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1565 = (0.5 / ((_1543 + 9.9999999392252902907785028219223e-09) + _1547)) * _1543;
    float _3295 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _1567 = (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * 0.31831014156341552734375;
    uint _1578 = _1462 + 9u;
    float _1584 = cbLight._m0[_1493].x + _438;
    float _1585 = cbLight._m0[_1493].y + _439;
    float _1586 = cbLight._m0[_1493].z + _440;
    float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
    float _1594 = dot(vec3(0.0), vec3(cbLight._m0[_1493].xyz));
    float _3306 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1597 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _1598 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_1584 * _1590, _1585 * _1590, _1586 * _1590));
    float _3317 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1607 = (exp2(log2(1.0 - (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1611 = (0.5 / ((_1597 + 9.9999999392252902907785028219223e-09) + _1547)) * _1597;
    float _3328 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1613 = (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * 0.31831014156341552734375;
    float _1623 = (((_1607 * cbLight._m0[_1578].x) * _1613) * _1479) + (((_1559 * cbLight._m0[_1524].x) * _1567) * _1489);
    float _1624 = (((_1607 * cbLight._m0[_1578].y) * _1613) * _1479) + (((_1559 * cbLight._m0[_1524].y) * _1567) * _1489);
    float _1625 = (((_1607 * cbLight._m0[_1578].z) * _1613) * _1479) + (((_1559 * cbLight._m0[_1524].z) * _1567) * _1489);
    float _1741;
    float _1743;
    float _1745;
    float _1747;
    float _1749;
    float _1751;
    if (_1460.y == 0u)
    {
        float _1681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1682 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1681;
        float _1683 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1681;
        float _1684 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1681;
        uvec4 _1696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1697 = _1696.x;
        uint _1708 = uint((float(_1696.y) * floor(float(uint(cbSceneParam._m0[85u].y * _461) / _1697))) + floor(float(uint(cbSceneParam._m0[85u].x * _460) / _1697)));
        float _1718 = (log2(_1684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1719 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        uint _1722 = uint(isnan(14.0) ? _1719 : (isnan(_1719) ? 14.0 : min(_1719, 14.0)));
        uvec4 _1727 = texelFetch(g_lightClusterGridBuffer, int(((_1722 << 2u) + (_1708 << 6u)) >> 2u));
        uint _1728 = _1727.x;
        uint _1729 = _1696.z;
        float _1819;
        float _1821;
        float _1823;
        float _1825;
        float _1827;
        float _1829;
        if (((((1u << ((_1729 >> 4u) & 15u)) + 4294967295u) & _1728) == 0u) || ((_1729 & 240u) == 0u))
        {
            _1819 = 0.0;
            _1821 = 0.0;
            _1823 = 0.0;
            _1825 = 0.0;
            _1827 = 0.0;
            _1829 = 0.0;
        }
        else
        {
            float _1820;
            float _1822;
            float _1824;
            float _1826;
            float _1828;
            float _1830;
            float _2002 = 0.0;
            float _2003 = 0.0;
            float _2004 = 0.0;
            float _2005 = 0.0;
            float _2006 = 0.0;
            float _2007 = 0.0;
            uint _2008 = 0u;
            uint _2017;
            bool _2018;
            for (;;)
            {
                _2017 = texelFetch(g_lightClassification, int((((_1722 << 5u) + (_1708 << 9u)) + (_2008 << 2u)) >> 2u)).x;
                _2018 = _2017 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2018)
                {
                    frontier_phi_63_pred = _2004;
                    frontier_phi_63_pred_1 = _2007;
                    frontier_phi_63_pred_2 = _2006;
                    frontier_phi_63_pred_3 = _2005;
                    frontier_phi_63_pred_4 = _2003;
                    frontier_phi_63_pred_5 = _2002;
                }
                else
                {
                    float _2198;
                    float _2199;
                    float _2200;
                    float _2201;
                    float _2202;
                    float _2203;
                    uint _2204;
                    _2198 = _2002;
                    _2199 = _2003;
                    _2200 = _2004;
                    _2201 = _2005;
                    _2202 = _2006;
                    _2203 = _2007;
                    _2204 = _2017;
                    float _2099;
                    float _2100;
                    float _2101;
                    float _2102;
                    float _2103;
                    float _2104;
                    for (;;)
                    {
                        uint _2208 = uint(findLSB(_2204)) + (_2008 << 5u);
                        uint _2205 = (_2204 + 4294967295u) & _2204;
                        uint _2210 = _2208 * 48u;
                        vec4 _2224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2210)).x, texelFetch(g_PointLightRenderingBuffer, int(_2210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2210 + 3u)).x));
                        uint _2230 = (_2208 * 48u) + 4u;
                        vec4 _2243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2230)).x, texelFetch(g_PointLightRenderingBuffer, int(_2230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2230 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2230 + 3u)).x));
                        uint _2249 = (_2208 * 48u) + 8u;
                        vec3 _2260 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2249)).x, texelFetch(g_PointLightRenderingBuffer, int(_2249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2249 + 2u)).x));
                        float _2264 = _2224.x - _1682;
                        float _2265 = _2224.y - _1683;
                        float _2266 = _2224.z - _1684;
                        float _2267 = dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266));
                        float _2270 = inversesqrt(_2267);
                        float _2279 = 1.0 - (_2267 * _2224.w);
                        float _3349 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
                        float _2280 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
                        float _2281 = sqrt(_2267) * _2243.w;
                        float _2284 = 1.39999997615814208984375 / (_2281 + 1.39999997615814208984375);
                        float _2285 = _2284 * _2284;
                        float _2288 = ((1.0 - _2285) * dot(vec3(0.0), vec3(_2270 * _2264, _2270 * _2265, _2270 * _2266))) + _2285;
                        float _2291 = _2281 * _2281;
                        float _2295 = ((isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))) * _2280) / ((_2291 * 0.699999988079071044921875) + 1.0);
                        float _2299 = (-0.0) - _1682;
                        float _2300 = (-0.0) - _1683;
                        float _2301 = (-0.0) - _1684;
                        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
                        float _2309 = dot(vec3(0.0), vec3(_2305 * _2299, _2305 * _2300, _2305 * _2301));
                        float _3365 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
                        float _3376 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
                        float _2313 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
                        float _2317 = (0.5 / (((isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) + 9.9999999392252902907785028219223e-09) + _2313)) * _2313;
                        float _3387 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
                        float _2326 = (((isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * 3.1415927410125732421875) / ((_2291 * 2.1991131305694580078125) + 3.141590118408203125)) * _2280;
                        _2102 = (_2295 * _2243.x) + _2201;
                        _2103 = (_2295 * _2243.y) + _2202;
                        _2104 = (_2295 * _2243.z) + _2203;
                        _2099 = (_2326 * _2260.x) + _2198;
                        _2100 = (_2326 * _2260.y) + _2199;
                        _2101 = (_2326 * _2260.z) + _2200;
                        if (_2205 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2198 = _2099;
                            _2199 = _2100;
                            _2200 = _2101;
                            _2201 = _2102;
                            _2202 = _2103;
                            _2203 = _2104;
                            _2204 = _2205;
                        }
                    }
                    frontier_phi_63_pred = _2101;
                    frontier_phi_63_pred_1 = _2104;
                    frontier_phi_63_pred_2 = _2103;
                    frontier_phi_63_pred_3 = _2102;
                    frontier_phi_63_pred_4 = _2100;
                    frontier_phi_63_pred_5 = _2099;
                }
                _1824 = frontier_phi_63_pred;
                _1830 = frontier_phi_63_pred_1;
                _1828 = frontier_phi_63_pred_2;
                _1826 = frontier_phi_63_pred_3;
                _1822 = frontier_phi_63_pred_4;
                _1820 = frontier_phi_63_pred_5;
                uint _2009 = _2008 + 1u;
                if (_2009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2002 = _1820;
                    _2003 = _1822;
                    _2004 = _1824;
                    _2005 = _1826;
                    _2006 = _1828;
                    _2007 = _1830;
                    _2008 = _2009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1819 = _1820;
            _1821 = _1822;
            _1823 = _1824;
            _1825 = _1826;
            _1827 = _1828;
            _1829 = _1830;
        }
        uvec4 _1833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1834 = _1833.z;
        uint _1836 = (_1834 >> 8u) & 15u;
        float _1973;
        float _1975;
        float _1977;
        float _1979;
        float _1981;
        float _1983;
        if (((4294967295u << _1836) & _1728) == 0u)
        {
            _1973 = _1819;
            _1975 = _1821;
            _1977 = _1823;
            _1979 = _1825;
            _1981 = _1827;
            _1983 = _1829;
        }
        else
        {
            float _1998 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1836 < ((_1834 >> 12u) & 15u))
            {
                float _1974;
                float _1976;
                float _1978;
                float _1980;
                float _1982;
                float _1984;
                float _2181 = _1819;
                float _2182 = _1821;
                float _2183 = _1823;
                float _2184 = _1825;
                float _2185 = _1827;
                float _2186 = _1829;
                uint _2187 = _1836;
                uint _2196;
                bool _2197;
                for (;;)
                {
                    _2196 = texelFetch(g_lightClassification, int((((_1722 << 5u) + (_1708 << 9u)) + (_2187 << 2u)) >> 2u)).x;
                    _2197 = _2196 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2197)
                    {
                        frontier_phi_77_pred = _2186;
                        frontier_phi_77_pred_1 = _2185;
                        frontier_phi_77_pred_2 = _2184;
                        frontier_phi_77_pred_3 = _2183;
                        frontier_phi_77_pred_4 = _2182;
                        frontier_phi_77_pred_5 = _2181;
                    }
                    else
                    {
                        float _2361;
                        float _2362;
                        float _2363;
                        float _2364;
                        float _2365;
                        float _2366;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2374 = _2181;
                        float _2375 = _2182;
                        float _2376 = _2183;
                        float _2377 = _2184;
                        float _2378 = _2185;
                        float _2379 = _2186;
                        uint _2380 = _2196;
                        uint _2381;
                        vec4 _2406;
                        float _2407;
                        vec4 _2422;
                        vec3 _2434;
                        vec4 _2450;
                        vec4 _2465;
                        float _2511;
                        bool _2512;
                        for (;;)
                        {
                            uint _2391 = ((_2187 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2380));
                            _2381 = (_2380 + 4294967295u) & _2380;
                            uint _2393 = _2391 * 40u;
                            _2406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2393 + 3u)).x));
                            _2407 = _2406.w;
                            uint _2409 = (_2391 * 40u) + 4u;
                            _2422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2409 + 3u)).x));
                            uint _2424 = (_2391 * 40u) + 8u;
                            _2434 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2424 + 2u)).x));
                            uint _2437 = (_2391 * 40u) + 16u;
                            _2450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2437 + 3u)).x));
                            uint _2452 = (_2391 * 40u) + 20u;
                            _2465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2452 + 3u)).x));
                            uint _2467 = (_2391 * 40u) + 24u;
                            vec4 _2480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2467 + 3u)).x));
                            uint _2486 = (_2391 * 40u) + 28u;
                            vec4 _2499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 3u)).x));
                            _2511 = fma(_1684, _2499.z, fma(_1683, _2499.y, _2499.x * _1682)) + _2499.w;
                            _2512 = !((fma(_1684, _2480.z, fma(_1683, _2480.y, _2480.x * _1682)) + _2480.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2512)
                            {
                                float _2539 = _2406.x - _1682;
                                float _2540 = _2406.y - _1683;
                                float _2541 = _2406.z - _1684;
                                float _2542 = dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541));
                                float _2545 = inversesqrt(_2542);
                                float _2546 = _2545 * _2539;
                                float _2547 = _2545 * _2540;
                                float _2548 = _2545 * _2541;
                                float _2552 = 1.0 - (_2542 / (_2407 * _2407));
                                float _3398 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                                float _2553 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
                                float _2557 = sqrt(_2542) * _2422.w;
                                float _2559 = 1.39999997615814208984375 / (_2557 + 1.39999997615814208984375);
                                float _2560 = _2559 * _2559;
                                float _2561 = 1.0 - _2560;
                                float _2563 = (_2561 * dot(vec3(_2546, _2547, _2548), vec3(0.0))) + _2560;
                                float _2566 = _2557 * _2557;
                                float _2570 = (fma(_1684, _2450.z, fma(_1683, _2450.y, _2450.x * _1682)) + _2450.w) / _2511;
                                float _2571 = (fma(_1684, _2465.z, fma(_1683, _2465.y, _2465.x * _1682)) + _2465.w) / _2511;
                                float _2575 = 1.0 - dot(vec2(_2570, _2571), vec2(_2570, _2571));
                                float _3414 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                                float _2576 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
                                float _2577 = _2576 * (((isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))) * _2553) / ((_2566 * 0.699999988079071044921875) + 1.0));
                                float _2587 = dot(vec3(0.0), vec3((-0.0) - (_1682 * _1998), (-0.0) - (_1683 * _1998), (-0.0) - (_1684 * _1998)));
                                float _3425 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                                float _2595 = (_2561 * dot(vec3(0.0), vec3(_2546, _2547, _2548))) + _2560;
                                float _3436 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                                float _2596 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
                                float _2600 = (0.5 / (((isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) + 9.9999999392252902907785028219223e-09) + _2596)) * _2596;
                                float _3447 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                                float _2607 = (_2576 * _2553) * (((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 3.1415927410125732421875) / ((_2566 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2577 * _2422.x;
                                frontier_phi_83_pred_1 = _2577 * _2422.z;
                                frontier_phi_83_pred_2 = _2577 * _2422.y;
                                frontier_phi_83_pred_3 = _2607 * _2434.z;
                                frontier_phi_83_pred_4 = _2607 * _2434.y;
                                frontier_phi_83_pred_5 = _2607 * _2434.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2614 = frontier_phi_83_pred;
                            _2616 = frontier_phi_83_pred_1;
                            _2615 = frontier_phi_83_pred_2;
                            _2613 = frontier_phi_83_pred_3;
                            _2612 = frontier_phi_83_pred_4;
                            _2611 = frontier_phi_83_pred_5;
                            _2364 = _2614 + _2377;
                            _2365 = _2615 + _2378;
                            _2366 = _2616 + _2379;
                            _2361 = _2611 + _2374;
                            _2362 = _2612 + _2375;
                            _2363 = _2613 + _2376;
                            if (_2381 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2374 = _2361;
                                _2375 = _2362;
                                _2376 = _2363;
                                _2377 = _2364;
                                _2378 = _2365;
                                _2379 = _2366;
                                _2380 = _2381;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2366;
                        frontier_phi_77_pred_1 = _2365;
                        frontier_phi_77_pred_2 = _2364;
                        frontier_phi_77_pred_3 = _2363;
                        frontier_phi_77_pred_4 = _2362;
                        frontier_phi_77_pred_5 = _2361;
                    }
                    _1984 = frontier_phi_77_pred;
                    _1982 = frontier_phi_77_pred_1;
                    _1980 = frontier_phi_77_pred_2;
                    _1978 = frontier_phi_77_pred_3;
                    _1976 = frontier_phi_77_pred_4;
                    _1974 = frontier_phi_77_pred_5;
                    uint _2188 = _2187 + 1u;
                    if (_2188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2181 = _1974;
                        _2182 = _1976;
                        _2183 = _1978;
                        _2184 = _1980;
                        _2185 = _1982;
                        _2186 = _1984;
                        _2187 = _2188;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1976;
                frontier_phi_52_53_ladder_1 = _1984;
                frontier_phi_52_53_ladder_2 = _1982;
                frontier_phi_52_53_ladder_3 = _1980;
                frontier_phi_52_53_ladder_4 = _1978;
                frontier_phi_52_53_ladder_5 = _1974;
            }
            else
            {
                frontier_phi_52_53_ladder = _1821;
                frontier_phi_52_53_ladder_1 = _1829;
                frontier_phi_52_53_ladder_2 = _1827;
                frontier_phi_52_53_ladder_3 = _1825;
                frontier_phi_52_53_ladder_4 = _1823;
                frontier_phi_52_53_ladder_5 = _1819;
            }
            _1973 = frontier_phi_52_53_ladder_5;
            _1975 = frontier_phi_52_53_ladder;
            _1977 = frontier_phi_52_53_ladder_4;
            _1979 = frontier_phi_52_53_ladder_3;
            _1981 = frontier_phi_52_53_ladder_2;
            _1983 = frontier_phi_52_53_ladder_1;
        }
        float _1988 = isnan(1.0) ? _500 : (isnan(_500) ? 1.0 : min(_500, 1.0));
        _1741 = (_1988 * _1979) + _1521;
        _1743 = (_1988 * _1981) + _1522;
        _1745 = (_1988 * _1983) + _1523;
        _1747 = ((_1973 * 0.039999999105930328369140625) * _1988) + _1623;
        _1749 = ((_1975 * 0.039999999105930328369140625) * _1988) + _1624;
        _1751 = ((_1977 * 0.039999999105930328369140625) * _1988) + _1625;
    }
    else
    {
        _1741 = _1521;
        _1743 = _1522;
        _1745 = _1523;
        _1747 = _1623;
        _1749 = _1624;
        _1751 = _1625;
    }
    float _3463 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3474 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3485 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1768 = ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1741 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _500))) + ((_1747 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1769 = ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_1743 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _500))) + ((_1749 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1770 = ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1745 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _500))) + ((_1751 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    uint _1774 = _474 + 6u;
    float _1782 = _460 / cbSceneParam._m0[86u].x;
    float _1783 = _461 / cbSceneParam._m0[86u].y;
    vec4 _1797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1782, _1783, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1799 = _1797.x;
    float _1800 = _1797.y;
    float _1801 = _1797.z;
    float _1802 = _1797.w;
    float _1882;
    float _1884;
    float _1886;
    float _1888;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _1844 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _1845 = _1844 / _433;
        float _1856 = _1845 * _254;
        float _1857 = _255 * _1845;
        float _1858 = (-0.0) - _1857;
        float _1859 = _1845 * _256;
        float _1861 = (cbSceneParam._m0[77u].w * _1858) / _1844;
        float _1862 = _1861 + cbSceneParam._m0[79u].w;
        float _1863 = cbSceneParam._m0[79u].w - _1857;
        float _1869 = sqrt(((_1856 * _1856) + (_1857 * _1857)) + (_1859 * _1859));
        float _1872 = (1.0 - (cbSceneParam._m0[77u].w / _1844)) * _1869;
        float _1878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2112;
        if (abs((_1858 - _1861) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2112 = ((((_1862 > 0.0) ? exp2(_1878 * _1862) : (2.0 - exp2(_1880 * _1862))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1872;
        }
        else
        {
            float _2031 = 1.0 / cbSceneParam._m0[80u].x;
            float _2032 = isnan(_1863) ? _1862 : (isnan(_1862) ? _1863 : max(_1862, _1863));
            float _2033 = isnan(_1863) ? _1862 : (isnan(_1862) ? _1863 : min(_1862, _1863));
            float _2042 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : min(_2032, 0.0));
            float _2043 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : min(_2033, 0.0));
            _2112 = ((abs(_1869 / _1858) * cbSceneParam._m0[80u].y) * ((((_2042 - _2043) * 2.0) - ((exp2(_1878 * (isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)))) - exp2(_1878 * (isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))))) * _2031)) - ((exp2(_1880 * _2042) - exp2(_1880 * _2043)) * _2031))) + (_1872 * cbSceneParam._m0[80u].z);
        }
        vec4 _2114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1782, _1783, 1.0), 0.0);
        float _2123 = exp2((_2112 * (-1.44269502162933349609375)) * (1.0 - _2114.w));
        float _2124 = log2(_2123);
        float _2140 = log2(_1802);
        _1882 = (exp2(_2140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2124 * cbSceneParam._m0[78u].x)) * _2114.x) / cbSceneParam._m0[78u].x)) + _1799;
        _1884 = (exp2(_2140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2124 * cbSceneParam._m0[78u].y)) * _2114.y) / cbSceneParam._m0[78u].y)) + _1800;
        _1886 = (exp2(_2140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2124 * cbSceneParam._m0[78u].z)) * _2114.z) / cbSceneParam._m0[78u].z)) + _1801;
        _1888 = _2123 * _1802;
    }
    else
    {
        _1882 = _1799;
        _1884 = _1800;
        _1886 = _1801;
        _1888 = _1802;
    }
    bool _2150;
    vec4 _1898;
    vec4 _1921;
    float _1923;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    bool _1941;
    for (;;)
    {
        _1898 = cbMatDynParam._m0[0u];
        float _1900 = roundEven(_1898.y);
        bool _1901 = _1900 == 3.0;
        float _1903 = log2(_1888);
        float _1910 = exp2(_1903 * cbSceneParam._m0[78u].x) * _1771;
        float _1911 = exp2(_1903 * cbSceneParam._m0[78u].y) * _1772;
        float _1912 = exp2(_1903 * cbSceneParam._m0[78u].z) * _1773;
        float _1919 = _447 + (-0.5);
        _1921 = cbMtdParam._m0[1u];
        _1923 = _1921.y * _1919;
        float _1926 = (_1900 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1927 = _1926 * (_1901 ? _1910 : (_1910 + (cbSceneParam._m0[72u].w * _1882)));
        _1928 = _1926 * (_1901 ? _1911 : (_1911 + (cbSceneParam._m0[72u].w * _1884)));
        _1929 = _1926 * (_1901 ? _1912 : (_1912 + (cbSceneParam._m0[72u].w * _1886)));
        _1930 = _1919 * 0.999000012874603271484375;
        _1941 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1941)
        {
            if ((cbInstanceData._m0[_474 + 7u].x + _1930) < 0.5)
            {
                _2150 = true;
                break;
            }
        }
        uint _2066 = _476 + uint(_1898.w);
        if ((cbInstanceData._m0[_2066].w < 1.0) && ((cbInstanceData._m0[_2066].w + _1930) < 0.5))
        {
            _2150 = true;
            break;
        }
        if ((_1923 + 1.0) < _1921.x)
        {
            _2150 = true;
            break;
        }
        _2150 = false;
        break;
    }
    float _2331;
    if (_2150)
    {
        discard_state = true;
        _2331 = 0.0;
    }
    else
    {
        _2331 = cbInstanceData._m0[_1774].w;
    }
    SV_Target.x = _1927;
    SV_Target.y = _1928;
    SV_Target.z = _1929;
    SV_Target.w = _2331;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1774].w;
    discard_exit();
}


