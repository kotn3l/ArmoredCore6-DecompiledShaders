#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _920;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _285 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = cbMtdParam._m0[21u].w + _261;
    float _321 = cbMtdParam._m0[22u].x + _262;
    float _322 = cbMtdParam._m0[22u].y + _263;
    float _336 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_320, _321, _322), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _346 = (_342 * _336) + (((_285.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _347 = (_342 * _337) + (((_285.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _348 = _346 * cbMtdParam._m0[18u].z;
    float _349 = _347 * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    bool _367 = _345 > 0.0;
    float _369 = _367 ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = _350 + (-0.5);
    float _379 = _351 + (-0.5);
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_376 + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_379 + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _436 = _346 * cbMtdParam._m0[20u].z;
    float _437 = _347 * cbMtdParam._m0[20u].y;
    bool _438 = _436 > 0.0;
    float _443;
    if (_438)
    {
        _443 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _443 = frontier_phi_11_10_ladder;
    }
    bool _445 = _437 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _450 = frontier_phi_15_14_ladder;
    }
    float _453 = _367 ? (cbMtdParam._m0[16u].x / _345) : 5000.0;
    float _454 = isnan(_450) ? _443 : (isnan(_443) ? _450 : min(_443, _450));
    float _455 = isnan(_453) ? _454 : (isnan(_454) ? _453 : min(_454, _453));
    float _459 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _463 = ((_455 * _345) + _459) / _459;
    float _468 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _470 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_376 + (_455 * _436)) / _463) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_379 + (_455 * _437)) / _463) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _498;
    if (_438)
    {
        _498 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _498 = frontier_phi_19_18_ladder;
    }
    float _504;
    if (_445)
    {
        _504 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _504 = frontier_phi_23_22_ladder;
    }
    float _506 = isnan(_504) ? _498 : (isnan(_498) ? _504 : min(_498, _504));
    float _507 = isnan(_453) ? _506 : (isnan(_506) ? _453 : min(_506, _453));
    float _514 = ((_507 * _345) + _459) / _459;
    vec4 _535 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_376 + (_507 * _436)) / _514) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_379 + (_507 * _437)) / _514) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_486.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_486.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_486.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _3135 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3146 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3157 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _570 = _261 * _569;
    float _571 = _262 * _569;
    float _572 = _263 * _569;
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = (_592 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3168 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _3179 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _3190 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _618 = _615.x * TEXCOORD.z;
    float _619 = (-0.0) - _570;
    float _620 = (-0.0) - _571;
    float _621 = (-0.0) - _572;
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = (cbModelParam._m0[37u].x * ((((fma(_651, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _709 = (cbModelParam._m0[37u].y * ((((fma(_651, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _710 = (((((fma(_651, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(0.0), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3216 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3227 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3238 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(0.0), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3271 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(0.0), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3304 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = (cbModelParam._m0[38u].x * ((((fma(_651, cbModelParam._m0[30u].z, fma(_647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _643)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _989 = (cbModelParam._m0[38u].y * ((((fma(_651, cbModelParam._m0[31u].z, fma(_647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _643)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _990 = (((((fma(_651, cbModelParam._m0[32u].z, fma(_647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _643)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(0.0), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3367 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(0.0), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3400 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(0.0), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3433 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _920;
        _1196 = _920;
        _1197 = _920;
        _1198 = _920;
        _1199 = _920;
        _1200 = _920;
        _1201 = _920;
        _1202 = _920;
        _1203 = _920;
        _1204 = _920;
        _1205 = _920;
        _1206 = _920;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _932)) + _932;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _933)) + _933;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _934)) + _934;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _570 * (-0.5);
    float _1264 = _571 * (-0.5);
    float _1265 = _572 * (-0.5);
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_919, _923, _926, _929));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_921, _924, _927, _930));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_922, _925, _928, _931));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1379 = fma(_651, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643)) + cbModelParam._m0[13u].w;
        float _1383 = fma(_651, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643)) + cbModelParam._m0[14u].w;
        float _1387 = fma(_651, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643)) + cbModelParam._m0[15u].w;
        float _1390 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1393 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1396 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1422;
        if (_1390 > 0.0)
        {
            _1422 = abs((1.0 - _1379) / _1390);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1379 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1422 = frontier_phi_38_36_ladder;
        }
        float _1592;
        if (_1393 > 0.0)
        {
            _1592 = abs((1.0 - _1383) / _1393);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1383 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1592 = frontier_phi_47_43_ladder;
        }
        float _1987;
        if (_1396 > 0.0)
        {
            _1987 = abs((1.0 - _1387) / _1396);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1387 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _1987 = frontier_phi_59_54_ladder;
        }
        float _1989 = isnan(_1592) ? _1422 : (isnan(_1422) ? _1592 : min(_1422, _1592));
        float _1990 = isnan(_1987) ? _1989 : (isnan(_1989) ? _1987 : min(_1989, _1987));
        float _1994 = (_1990 * _1390) + _1379;
        float _1995 = (_1990 * _1393) + _1383;
        float _1996 = (_1990 * _1396) + _1387;
        float _1997 = _1990 * 9.9999997473787516355514526367188e-05;
        float _1999 = (-1.0) - _1997;
        float _2001 = _1997 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_1996 > _2001) || ((_1996 < _1999) || ((_1995 > _2001) || ((_1995 < _1999) || ((_1994 < _1999) || (_1994 > _2001))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1996, cbModelParam._m0[9u].z, fma(_1995, cbModelParam._m0[9u].y, _1994 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1996, cbModelParam._m0[10u].z, fma(_1995, cbModelParam._m0[10u].y, _1994 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1996, cbModelParam._m0[11u].z, fma(_1995, cbModelParam._m0[11u].y, _1994 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_37_59_ladder = _2230.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2230.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2230.x * cbModelParam._m0[1u].y;
        }
        _1412 = frontier_phi_37_59_ladder_2;
        _1414 = frontier_phi_37_59_ladder_1;
        _1416 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1330);
        _1412 = _1400.x * cbModelParam._m0[1u].y;
        _1414 = _1400.y * cbModelParam._m0[1u].y;
        _1416 = _1400.z * cbModelParam._m0[1u].y;
    }
    float _1419 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1471 = fma(_651, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643)) + cbModelParam._m0[21u].w;
        float _1475 = fma(_651, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643)) + cbModelParam._m0[22u].w;
        float _1479 = fma(_651, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643)) + cbModelParam._m0[23u].w;
        float _1482 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1485 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1488 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1597;
        if (_1482 > 0.0)
        {
            _1597 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1597 = frontier_phi_49_45_ladder;
        }
        float _2014;
        if (_1485 > 0.0)
        {
            _2014 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2014 = frontier_phi_61_56_ladder;
        }
        float _2352;
        if (_1488 > 0.0)
        {
            _2352 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2352 = frontier_phi_73_68_ladder;
        }
        float _2354 = isnan(_2014) ? _1597 : (isnan(_1597) ? _2014 : min(_1597, _2014));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1482) + _1471;
        float _2360 = (_2355 * _1485) + _1475;
        float _2361 = (_2355 * _1488) + _1479;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2362;
        float _2365 = _2362 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2361 > _2365) || ((_2361 < _2363) || ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 < _2363) || (_2359 > _2365))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2361, cbModelParam._m0[17u].z, fma(_2360, cbModelParam._m0[17u].y, _2359 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2361, cbModelParam._m0[18u].z, fma(_2360, cbModelParam._m0[18u].y, _2359 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2361, cbModelParam._m0[19u].z, fma(_2360, cbModelParam._m0[19u].y, _2359 * cbModelParam._m0[19u].x))), _1419);
            frontier_phi_46_73_ladder = _2479.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2479.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2479.x * cbModelParam._m0[1u].z;
        }
        _1507 = frontier_phi_46_73_ladder_2;
        _1509 = frontier_phi_46_73_ladder_1;
        _1511 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1419);
        _1507 = _1491.x * cbModelParam._m0[1u].z;
        _1509 = _1491.y * cbModelParam._m0[1u].z;
        _1511 = _1491.z * cbModelParam._m0[1u].z;
    }
    float _1523 = _618 * 0.01200000010430812835693359375;
    float _1525 = _1523 * ((cbModelParam._m0[1u].w * (_1507 - _1412)) + _1412);
    float _1526 = _1523 * ((cbModelParam._m0[1u].w * (_1509 - _1414)) + _1414);
    float _1527 = _1523 * ((cbModelParam._m0[1u].w * (_1511 - _1416)) + _1416);
    float _1530 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, _1525 * cbSceneParam._m0[91u].x));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1575 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1579 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1583 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1584 = _1571 / _1583;
    float _1585 = _1575 / _1583;
    float _1586 = _1579 / _1583;
    float _1734;
    float _1735;
    float _1736;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1613 = ((uint(_1586 > cbSceneParam._m0[59u].y) + uint(_1586 > cbSceneParam._m0[59u].x)) + uint(_1586 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1614 = _1613 + 43u;
        uint _1622 = _1613 + 44u;
        uint _1630 = _1613 + 45u;
        uint _1638 = _1613 + 46u;
        float _1649 = fma(_1583, cbSceneParam._m0[_1614].w, fma(_1579, cbSceneParam._m0[_1614].z, fma(_1575, cbSceneParam._m0[_1614].y, _1571 * cbSceneParam._m0[_1614].x)));
        float _1653 = fma(_1583, cbSceneParam._m0[_1622].w, fma(_1579, cbSceneParam._m0[_1622].z, fma(_1575, cbSceneParam._m0[_1622].y, _1571 * cbSceneParam._m0[_1622].x)));
        float _1661 = fma(_1583, cbSceneParam._m0[_1638].w, fma(_1579, cbSceneParam._m0[_1638].z, fma(_1575, cbSceneParam._m0[_1638].y, _1571 * cbSceneParam._m0[_1638].x)));
        float _1666 = cbSceneParam._m0[33u].z * _1661;
        float _1668 = cbSceneParam._m0[33u].w * _1661;
        float _1671 = fma(_1583, cbSceneParam._m0[_1630].w, fma(_1579, cbSceneParam._m0[_1630].z, fma(_1575, cbSceneParam._m0[_1630].y, _1571 * cbSceneParam._m0[_1630].x))) / _1661;
        float _1719 = (cbSceneParam._m0[33u].x - sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586))) * cbSceneParam._m0[33u].y;
        float _3559 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1727 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 + _1649) / _1661, (_1668 + _1653) / _1661), _1671), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 + _1649) / _1661, (_1653 - _1666) / _1661), _1671), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1649 - _1666) / _1661, (_1653 - _1668) / _1661), _1671), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1649 - _1668) / _1661, (_1666 + _1653) / _1661), _1671), 0.0)).x), vec4(0.25)));
        _1734 = 1.0 - (_1727 * cbSceneParam._m0[34u].x);
        _1735 = 1.0 - (_1727 * cbSceneParam._m0[34u].y);
        _1736 = 1.0 - (_1727 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1734 = 1.0;
        _1735 = 1.0;
        _1736 = 1.0;
    }
    float _1800;
    float _1802;
    float _1804;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1788 = fma(_1583, cbSceneParam._m0[63u].w, fma(_1579, cbSceneParam._m0[63u].z, fma(_1575, cbSceneParam._m0[63u].y, _1571 * cbSceneParam._m0[63u].x)));
        float _1789 = fma(_1583, cbSceneParam._m0[60u].w, fma(_1579, cbSceneParam._m0[60u].z, fma(_1575, cbSceneParam._m0[60u].y, _1571 * cbSceneParam._m0[60u].x))) / _1788;
        float _1790 = fma(_1583, cbSceneParam._m0[61u].w, fma(_1579, cbSceneParam._m0[61u].z, fma(_1575, cbSceneParam._m0[61u].y, _1571 * cbSceneParam._m0[61u].x))) / _1788;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1789 >= cbSceneParam._m0[64u].x) && (_1790 >= cbSceneParam._m0[64u].y)) && (_1789 <= cbSceneParam._m0[64u].z)) && (_1790 <= cbSceneParam._m0[64u].w))
        {
            float _2027 = fma(_1583, cbSceneParam._m0[62u].w, fma(_1579, cbSceneParam._m0[62u].z, fma(_1575, cbSceneParam._m0[62u].y, _1571 * cbSceneParam._m0[62u].x))) / _1788;
            float _2031 = isnan(cbSceneParam._m0[41u].w) ? _2027 : (isnan(_2027) ? cbSceneParam._m0[41u].w : max(_2027, cbSceneParam._m0[41u].w));
            float _2074 = (cbSceneParam._m0[33u].x - sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586))) * cbSceneParam._m0[33u].y;
            float _3575 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
            float _2081 = (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1789, cbSceneParam._m0[33u].w + _1790), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1789, _1790 - cbSceneParam._m0[33u].z), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1789 - cbSceneParam._m0[33u].z, _1790 - cbSceneParam._m0[33u].w), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1789 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1790), _2031), 0.0)).x), vec4(0.25)));
            float _2085 = 1.0 - (_2081 * cbSceneParam._m0[34u].x);
            float _2086 = 1.0 - (_2081 * cbSceneParam._m0[34u].y);
            float _2087 = 1.0 - (_2081 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2087) ? _1736 : (isnan(_1736) ? _2087 : min(_1736, _2087));
            frontier_phi_58_57_ladder_1 = isnan(_2086) ? _1735 : (isnan(_1735) ? _2086 : min(_1735, _2086));
            frontier_phi_58_57_ladder_2 = isnan(_2085) ? _1734 : (isnan(_1734) ? _2085 : min(_1734, _2085));
        }
        else
        {
            frontier_phi_58_57_ladder = _1736;
            frontier_phi_58_57_ladder_1 = _1735;
            frontier_phi_58_57_ladder_2 = _1734;
        }
        _1800 = frontier_phi_58_57_ladder_2;
        _1802 = frontier_phi_58_57_ladder_1;
        _1804 = frontier_phi_58_57_ladder;
    }
    else
    {
        _1800 = _1734;
        _1802 = _1735;
        _1804 = _1736;
    }
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1818 = _618 + (-1.0);
    float _1821 = (cbLight._m0[_1813].x * _1818) + 1.0;
    float _1822 = (cbLight._m0[_1813].y * _1818) + 1.0;
    uint _1823 = _1812 + 5u;
    float _1829 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1833 = _1812 + 4u;
    float _1842 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1846 = _1812 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1812].xyz), vec3(0.0));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(0.0));
    float _3611 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3622 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1823].x * _1829) * _1867) + (((cbLight._m0[_1833].x * _1800) * _1842) * _1865);
    float _1875 = ((_1829 * cbLight._m0[_1823].y) * _1867) + (((cbLight._m0[_1833].y * _1802) * _1842) * _1865);
    float _1876 = ((_1829 * cbLight._m0[_1823].z) * _1867) + (((cbLight._m0[_1833].z * _1804) * _1842) * _1865);
    uint _1877 = _1812 + 8u;
    float _1883 = cbLight._m0[_1812].x + _570;
    float _1884 = cbLight._m0[_1812].y + _571;
    float _1885 = cbLight._m0[_1812].z + _572;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1893 = dot(vec3(0.0), vec3(cbLight._m0[_1812].xyz));
    float _3633 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _1897 = dot(vec3(0.0), vec3(_570, _571, _572));
    float _3644 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1883 * _1889, _1884 * _1889, _1885 * _1889));
    float _3655 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1918 = (0.5 / ((_1896 + 9.9999999392252902907785028219223e-09) + _1900)) * _1896;
    float _3666 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
    uint _1934 = _1812 + 9u;
    float _1940 = cbLight._m0[_1846].x + _570;
    float _1941 = cbLight._m0[_1846].y + _571;
    float _1942 = cbLight._m0[_1846].z + _572;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1950 = dot(vec3(0.0), vec3(cbLight._m0[_1846].xyz));
    float _3677 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1940 * _1946, _1941 * _1946, _1942 * _1946));
    float _3688 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = (0.5 / ((_1953 + 9.9999999392252902907785028219223e-09) + _1900)) * _1953;
    float _3699 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.31831014156341552734375;
    float _1979 = (((_1963 * cbLight._m0[_1934].x) * _1969) * _1829) + ((((cbLight._m0[_1877].x * _1800) * _1912) * _1920) * _1842);
    float _1980 = (((_1963 * cbLight._m0[_1934].y) * _1969) * _1829) + ((((cbLight._m0[_1877].y * _1802) * _1912) * _1920) * _1842);
    float _1981 = (((_1963 * cbLight._m0[_1934].z) * _1969) * _1829) + ((((cbLight._m0[_1877].z * _1804) * _1912) * _1920) * _1842);
    float _2144;
    float _2146;
    float _2148;
    float _2150;
    float _2152;
    float _2154;
    if (_1810.y == 0u)
    {
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2100)));
        float _2121 = (log2(_1586 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2130 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2131 = _2130.x;
        uint _2132 = _2099.z;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        if (((((1u << ((_2132 >> 4u) & 15u)) + 4294967295u) & _2131) == 0u) || ((_2132 & 240u) == 0u))
        {
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
        }
        else
        {
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            uint _2413 = 0u;
            uint _2422;
            bool _2423;
            for (;;)
            {
                _2422 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2413 << 2u)) >> 2u)).x;
                _2423 = _2422 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2423)
                {
                    frontier_phi_82_pred = _2407;
                    frontier_phi_82_pred_1 = _2412;
                    frontier_phi_82_pred_2 = _2411;
                    frontier_phi_82_pred_3 = _2410;
                    frontier_phi_82_pred_4 = _2409;
                    frontier_phi_82_pred_5 = _2408;
                }
                else
                {
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    uint _2558;
                    _2552 = _2407;
                    _2553 = _2408;
                    _2554 = _2409;
                    _2555 = _2410;
                    _2556 = _2411;
                    _2557 = _2412;
                    _2558 = _2422;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    for (;;)
                    {
                        uint _2562 = uint(findLSB(_2558)) + (_2413 << 5u);
                        uint _2559 = (_2558 + 4294967295u) & _2558;
                        uint _2564 = _2562 * 48u;
                        vec4 _2578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2564)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 3u)).x));
                        uint _2584 = (_2562 * 48u) + 4u;
                        vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 3u)).x));
                        uint _2603 = (_2562 * 48u) + 8u;
                        vec3 _2614 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x));
                        float _2618 = _2578.x - _1584;
                        float _2619 = _2578.y - _1585;
                        float _2620 = _2578.z - _1586;
                        float _2621 = dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620));
                        float _2624 = inversesqrt(_2621);
                        float _2633 = 1.0 - (_2621 * _2578.w);
                        float _3720 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2634 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2635 = sqrt(_2621) * _2597.w;
                        float _2638 = 1.39999997615814208984375 / (_2635 + 1.39999997615814208984375);
                        float _2639 = _2638 * _2638;
                        float _2642 = ((1.0 - _2639) * dot(vec3(0.0), vec3(_2624 * _2618, _2624 * _2619, _2624 * _2620))) + _2639;
                        float _2645 = _2635 * _2635;
                        float _2649 = ((isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0))) * _2634) / ((_2645 * 0.699999988079071044921875) + 1.0);
                        float _2653 = (-0.0) - _1584;
                        float _2654 = (-0.0) - _1585;
                        float _2655 = (-0.0) - _1586;
                        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
                        float _2663 = dot(vec3(0.0), vec3(_2659 * _2653, _2659 * _2654, _2659 * _2655));
                        float _3736 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
                        float _3747 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2667 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                        float _2671 = (0.5 / (((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) + 9.9999999392252902907785028219223e-09) + _2667)) * _2667;
                        float _3758 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2680 = (((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 3.1415927410125732421875) / ((_2645 * 2.1991131305694580078125) + 3.141590118408203125)) * _2634;
                        _2487 = (_2649 * _2597.x) + _2555;
                        _2488 = (_2649 * _2597.y) + _2556;
                        _2489 = (_2649 * _2597.z) + _2557;
                        _2484 = (_2680 * _2614.x) + _2552;
                        _2485 = (_2680 * _2614.y) + _2553;
                        _2486 = (_2680 * _2614.z) + _2554;
                        if (_2559 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2552 = _2484;
                            _2553 = _2485;
                            _2554 = _2486;
                            _2555 = _2487;
                            _2556 = _2488;
                            _2557 = _2489;
                            _2558 = _2559;
                        }
                    }
                    frontier_phi_82_pred = _2484;
                    frontier_phi_82_pred_1 = _2489;
                    frontier_phi_82_pred_2 = _2488;
                    frontier_phi_82_pred_3 = _2487;
                    frontier_phi_82_pred_4 = _2486;
                    frontier_phi_82_pred_5 = _2485;
                }
                _2240 = frontier_phi_82_pred;
                _2250 = frontier_phi_82_pred_1;
                _2248 = frontier_phi_82_pred_2;
                _2246 = frontier_phi_82_pred_3;
                _2244 = frontier_phi_82_pred_4;
                _2242 = frontier_phi_82_pred_5;
                uint _2414 = _2413 + 1u;
                if (_2414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2407 = _2240;
                    _2408 = _2242;
                    _2409 = _2244;
                    _2410 = _2246;
                    _2411 = _2248;
                    _2412 = _2250;
                    _2413 = _2414;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
        }
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.z;
        uint _2256 = (_2254 >> 8u) & 15u;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((4294967295u << _2256) & _2131) == 0u)
        {
            _2378 = _2239;
            _2380 = _2241;
            _2382 = _2243;
            _2384 = _2245;
            _2386 = _2247;
            _2388 = _2249;
        }
        else
        {
            float _2403 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2256 < ((_2254 >> 12u) & 15u))
            {
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2389;
                float _2535 = _2239;
                float _2536 = _2241;
                float _2537 = _2243;
                float _2538 = _2245;
                float _2539 = _2247;
                float _2540 = _2249;
                uint _2541 = _2256;
                uint _2550;
                bool _2551;
                for (;;)
                {
                    _2550 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2541 << 2u)) >> 2u)).x;
                    _2551 = _2550 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2551)
                    {
                        frontier_phi_88_pred = _2538;
                        frontier_phi_88_pred_1 = _2539;
                        frontier_phi_88_pred_2 = _2540;
                        frontier_phi_88_pred_3 = _2537;
                        frontier_phi_88_pred_4 = _2536;
                        frontier_phi_88_pred_5 = _2535;
                    }
                    else
                    {
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2698 = _2535;
                        float _2699 = _2536;
                        float _2700 = _2537;
                        float _2701 = _2538;
                        float _2702 = _2539;
                        float _2703 = _2540;
                        uint _2704 = _2550;
                        uint _2705;
                        vec4 _2730;
                        float _2731;
                        vec4 _2746;
                        vec3 _2758;
                        vec4 _2773;
                        vec4 _2788;
                        float _2834;
                        bool _2835;
                        for (;;)
                        {
                            uint _2715 = ((_2541 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2704));
                            _2705 = (_2704 + 4294967295u) & _2704;
                            uint _2717 = _2715 * 40u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            _2731 = _2730.w;
                            uint _2733 = (_2715 * 40u) + 4u;
                            _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2748 = (_2715 * 40u) + 8u;
                            _2758 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x));
                            uint _2760 = (_2715 * 40u) + 16u;
                            _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            uint _2775 = (_2715 * 40u) + 20u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2790 = (_2715 * 40u) + 24u;
                            vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2809 = (_2715 * 40u) + 28u;
                            vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            _2834 = fma(_1586, _2822.z, fma(_1585, _2822.y, _2822.x * _1584)) + _2822.w;
                            _2835 = !((fma(_1586, _2803.z, fma(_1585, _2803.y, _2803.x * _1584)) + _2803.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_2835)
                            {
                                float _2862 = _2730.x - _1584;
                                float _2863 = _2730.y - _1585;
                                float _2864 = _2730.z - _1586;
                                float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                                float _2868 = inversesqrt(_2865);
                                float _2869 = _2868 * _2862;
                                float _2870 = _2868 * _2863;
                                float _2871 = _2868 * _2864;
                                float _2875 = 1.0 - (_2865 / (_2731 * _2731));
                                float _3769 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                                float _2880 = sqrt(_2865) * _2746.w;
                                float _2882 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                                float _2883 = _2882 * _2882;
                                float _2884 = 1.0 - _2883;
                                float _2886 = (_2884 * dot(vec3(_2869, _2870, _2871), vec3(0.0))) + _2883;
                                float _2889 = _2880 * _2880;
                                float _2893 = (fma(_1586, _2773.z, fma(_1585, _2773.y, _2773.x * _1584)) + _2773.w) / _2834;
                                float _2894 = (fma(_1586, _2788.z, fma(_1585, _2788.y, _2788.x * _1584)) + _2788.w) / _2834;
                                float _2898 = 1.0 - dot(vec2(_2893, _2894), vec2(_2893, _2894));
                                float _3785 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                                float _2900 = _2899 * (((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2876) / ((_2889 * 0.699999988079071044921875) + 1.0));
                                float _2910 = dot(vec3(0.0), vec3((-0.0) - (_1584 * _2403), (-0.0) - (_1585 * _2403), (-0.0) - (_1586 * _2403)));
                                float _3796 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2918 = (_2884 * dot(vec3(0.0), vec3(_2869, _2870, _2871))) + _2883;
                                float _3807 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                                float _2919 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                                float _2923 = (0.5 / (((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) + 9.9999999392252902907785028219223e-09) + _2919)) * _2919;
                                float _3818 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                                float _2930 = (_2899 * _2876) * (((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 3.1415927410125732421875) / ((_2889 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _2930 * _2758.x;
                                frontier_phi_94_pred_1 = _2930 * _2758.y;
                                frontier_phi_94_pred_2 = _2900 * _2746.z;
                                frontier_phi_94_pred_3 = _2900 * _2746.y;
                                frontier_phi_94_pred_4 = _2900 * _2746.x;
                                frontier_phi_94_pred_5 = _2930 * _2758.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _2934 = frontier_phi_94_pred;
                            _2935 = frontier_phi_94_pred_1;
                            _2939 = frontier_phi_94_pred_2;
                            _2938 = frontier_phi_94_pred_3;
                            _2937 = frontier_phi_94_pred_4;
                            _2936 = frontier_phi_94_pred_5;
                            _2688 = _2937 + _2701;
                            _2689 = _2938 + _2702;
                            _2690 = _2939 + _2703;
                            _2685 = _2934 + _2698;
                            _2686 = _2935 + _2699;
                            _2687 = _2936 + _2700;
                            if (_2705 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2698 = _2685;
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2705;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2688;
                        frontier_phi_88_pred_1 = _2689;
                        frontier_phi_88_pred_2 = _2690;
                        frontier_phi_88_pred_3 = _2687;
                        frontier_phi_88_pred_4 = _2686;
                        frontier_phi_88_pred_5 = _2685;
                    }
                    _2385 = frontier_phi_88_pred;
                    _2387 = frontier_phi_88_pred_1;
                    _2389 = frontier_phi_88_pred_2;
                    _2383 = frontier_phi_88_pred_3;
                    _2381 = frontier_phi_88_pred_4;
                    _2379 = frontier_phi_88_pred_5;
                    uint _2542 = _2541 + 1u;
                    if (_2542 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2535 = _2379;
                        _2536 = _2381;
                        _2537 = _2383;
                        _2538 = _2385;
                        _2539 = _2387;
                        _2540 = _2389;
                        _2541 = _2542;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2387;
                frontier_phi_75_76_ladder_1 = _2389;
                frontier_phi_75_76_ladder_2 = _2385;
                frontier_phi_75_76_ladder_3 = _2383;
                frontier_phi_75_76_ladder_4 = _2381;
                frontier_phi_75_76_ladder_5 = _2379;
            }
            else
            {
                frontier_phi_75_76_ladder = _2247;
                frontier_phi_75_76_ladder_1 = _2249;
                frontier_phi_75_76_ladder_2 = _2245;
                frontier_phi_75_76_ladder_3 = _2243;
                frontier_phi_75_76_ladder_4 = _2241;
                frontier_phi_75_76_ladder_5 = _2239;
            }
            _2378 = frontier_phi_75_76_ladder_5;
            _2380 = frontier_phi_75_76_ladder_4;
            _2382 = frontier_phi_75_76_ladder_3;
            _2384 = frontier_phi_75_76_ladder_2;
            _2386 = frontier_phi_75_76_ladder;
            _2388 = frontier_phi_75_76_ladder_1;
        }
        float _2393 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2144 = (_2393 * _2384) + _1874;
        _2146 = (_2393 * _2386) + _1875;
        _2148 = (_2393 * _2388) + _1876;
        _2150 = ((_2378 * 0.039999999105930328369140625) * _2393) + _1979;
        _2152 = ((_2380 * 0.039999999105930328369140625) * _2393) + _1980;
        _2154 = ((_2382 * 0.039999999105930328369140625) * _2393) + _1981;
    }
    else
    {
        _2144 = _1874;
        _2146 = _1875;
        _2148 = _1876;
        _2150 = _1979;
        _2152 = _1980;
        _2154 = _1981;
    }
    float _3834 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3845 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3856 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2171 = ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_2144 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _618))) + ((_2150 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2172 = ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_2146 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _618))) + ((_2152 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2173 = ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_2148 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _618))) + ((_2154 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    uint _2177 = _592 + 6u;
    float _2185 = _578 / cbSceneParam._m0[86u].x;
    float _2186 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2200 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2202 = _2200.x;
    float _2203 = _2200.y;
    float _2204 = _2200.z;
    float _2205 = _2200.w;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _2264 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _2265 = _2264 / _565;
        float _2276 = _2265 * _261;
        float _2277 = _262 * _2265;
        float _2278 = (-0.0) - _2277;
        float _2279 = _2265 * _263;
        float _2281 = (cbSceneParam._m0[77u].w * _2278) / _2264;
        float _2282 = _2281 + cbSceneParam._m0[79u].w;
        float _2283 = cbSceneParam._m0[79u].w - _2277;
        float _2289 = sqrt(((_2276 * _2276) + (_2277 * _2277)) + (_2279 * _2279));
        float _2292 = (1.0 - (cbSceneParam._m0[77u].w / _2264)) * _2289;
        float _2297 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2299 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2497;
        if (abs((_2278 - _2281) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2497 = ((((_2282 > 0.0) ? exp2(_2297 * _2282) : (2.0 - exp2(_2299 * _2282))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2292;
        }
        else
        {
            float _2436 = 1.0 / cbSceneParam._m0[80u].x;
            float _2437 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : max(_2282, _2283));
            float _2438 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : min(_2282, _2283));
            float _2447 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : min(_2437, 0.0));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            _2497 = ((abs(_2289 / _2278) * cbSceneParam._m0[80u].y) * ((((_2447 - _2448) * 2.0) - ((exp2(_2297 * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0)))) - exp2(_2297 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0))))) * _2436)) - ((exp2(_2299 * _2447) - exp2(_2299 * _2448)) * _2436))) + (_2292 * cbSceneParam._m0[80u].z);
        }
        vec4 _2499 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2185, _2186, 1.0), 0.0);
        float _2508 = exp2((_2497 * (-1.44269502162933349609375)) * (1.0 - _2499.w));
        float _2509 = log2(_2508);
        float _2525 = log2(_2205);
        _2301 = (exp2(_2525 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].x)) * _2499.x) / cbSceneParam._m0[78u].x)) + _2202;
        _2303 = (exp2(_2525 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].y)) * _2499.y) / cbSceneParam._m0[78u].y)) + _2203;
        _2305 = (exp2(_2525 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2509 * cbSceneParam._m0[78u].z)) * _2499.z) / cbSceneParam._m0[78u].z)) + _2204;
        _2307 = _2508 * _2205;
    }
    else
    {
        _2301 = _2202;
        _2303 = _2203;
        _2305 = _2204;
        _2307 = _2205;
    }
    float _2319 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2320 = _2319 == 3.0;
    float _2322 = log2(_2307);
    float _2329 = exp2(_2322 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0)));
    float _2330 = exp2(_2322 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0)));
    float _2331 = exp2(_2322 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0)));
    float _2340 = (_2319 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2340 * (_2320 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.y = _2340 * (_2320 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.z = _2340 * (_2320 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.w = cbInstanceData._m0[_2177].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2177].w;
}


