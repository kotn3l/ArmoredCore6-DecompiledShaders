#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _378;
uint _1797;
uint _1798;
uint _1799;
uint _2033;
uint _2034;
uint _2035;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _182 = _181 * _174;
    float _183 = _181 * _175;
    float _184 = _181 * _176;
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _193 = _192 * TANGENT.x;
    float _194 = _192 * TANGENT.y;
    float _195 = _192 * TANGENT.z;
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    vec4 _287 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _303 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _310 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _322 = cbMtdParam._m0[22u].z + _250;
    float _323 = cbMtdParam._m0[22u].w + _251;
    float _324 = cbMtdParam._m0[23u].x + _252;
    float _341 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_303 * _182, _303 * _183, _303 * _184));
    float _342 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_310 * _193, _310 * _194, _310 * _195));
    float _343 = (-0.0) - dot(vec3(_322, _323, _324), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _347 * _343;
    float _353 = ((cbMtdParam._m0[19u].y * _341) * _347) + (((_287.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _354 = ((cbMtdParam._m0[19u].z * _342) * _347) + (((_287.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _357 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _358 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _376;
    float _379;
    float _381;
    if (_353 > 0.0)
    {
        float _362 = (1.0 - _357) / _353;
        _376 = _362;
        _379 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_362 * _348)) * 0.16666667163372039794921875;
        _381 = (fract((_362 * _354) + _358) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_353 < 0.0)
        {
            float _377 = ((-0.0) - _357) / _353;
            frontier_phi_3_2_ladder = (fract(_377 * _348) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _377;
            frontier_phi_3_2_ladder_2 = (fract((_377 * _354) + _358) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _378;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _376 = frontier_phi_3_2_ladder_1;
        _379 = frontier_phi_3_2_ladder;
        _381 = frontier_phi_3_2_ladder_2;
    }
    float _407;
    float _409;
    float _411;
    if (_354 > 0.0)
    {
        float _394 = (1.0 - _358) / _354;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_394 < _376)
        {
            frontier_phi_8_5_ladder = _394;
            frontier_phi_8_5_ladder_1 = (fract(_394 * _348) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_394 * _353) + _357) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _376;
            frontier_phi_8_5_ladder_1 = _381;
            frontier_phi_8_5_ladder_2 = _379;
        }
        _407 = frontier_phi_8_5_ladder;
        _409 = frontier_phi_8_5_ladder_2;
        _411 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_354 < 0.0)
        {
            float _408 = ((-0.0) - _358) / _354;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_408 < _376)
            {
                frontier_phi_8_6_ladder_9_ladder = _408;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_408 * _348) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_408 * _353) + _357) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _376;
                frontier_phi_8_6_ladder_9_ladder_1 = _381;
                frontier_phi_8_6_ladder_9_ladder_2 = _379;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _376;
            frontier_phi_8_6_ladder_1 = _381;
            frontier_phi_8_6_ladder_2 = _379;
        }
        _407 = frontier_phi_8_6_ladder;
        _409 = frontier_phi_8_6_ladder_2;
        _411 = frontier_phi_8_6_ladder_1;
    }
    float _415 = (_348 > 0.0) ? (cbMtdParam._m0[16u].y / _348) : 5000.0;
    float _428;
    float _429;
    if (_415 < _407)
    {
        _428 = ((_357 + cbMtdParam._m0[16u].z) + (_415 * _353)) * 0.16666667163372039794921875;
        _429 = (((_415 * _354) + _358) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _428 = _409;
        _429 = _411;
    }
    vec4 _431 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_428, _429));
    float _454 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _459 = _250 * _458;
    float _460 = _251 * _458;
    float _461 = _252 * _458;
    float _467 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _468 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_467 * cbSceneParam._m0[86u].x, _468 * cbSceneParam._m0[86u].y));
    float _480 = _477.x * TEXCOORD.z;
    float _481 = (-0.0) - _459;
    float _482 = (-0.0) - _460;
    float _483 = (-0.0) - _461;
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _652;
    float _653;
    float _654;
    float _655;
    float _656;
    float _657;
    float _658;
    float _659;
    float _660;
    float _661;
    float _662;
    float _663;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = (cbModelParam._m0[37u].x * ((((fma(_513, cbModelParam._m0[26u].z, fma(_509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _577 = (cbModelParam._m0[37u].y * ((((fma(_513, cbModelParam._m0[27u].z, fma(_509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _578 = (((((fma(_513, cbModelParam._m0[28u].z, fma(_509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        float _615 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _625 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _635 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _645 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_602.x + (-0.5));
        float _647 = _645 * (_602.y + (-0.5));
        float _648 = _645 * (_602.z + (-0.5));
        _652 = _615 * (_581.z + (-0.5));
        _653 = _615 * (_581.y + (-0.5));
        _654 = _615 * (_581.x + (-0.5));
        _655 = _625 * (_588.z + (-0.5));
        _656 = _625 * (_588.y + (-0.5));
        _657 = _625 * (_588.x + (-0.5));
        _658 = _635 * (_595.z + (-0.5));
        _659 = _635 * (_595.y + (-0.5));
        _660 = _635 * (_595.x + (-0.5));
        _661 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        _662 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        _663 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    }
    else
    {
        _652 = _378;
        _653 = _378;
        _654 = _378;
        _655 = _378;
        _656 = _378;
        _657 = _378;
        _658 = _378;
        _659 = _378;
        _660 = _378;
        _661 = _378;
        _662 = _378;
        _663 = _378;
    }
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _717 = (cbModelParam._m0[38u].x * ((((fma(_513, cbModelParam._m0[30u].z, fma(_509, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _505)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _718 = (cbModelParam._m0[38u].y * ((((fma(_513, cbModelParam._m0[31u].z, fma(_509, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _505)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _719 = (((((fma(_513, cbModelParam._m0[32u].z, fma(_509, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _505)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_717, _718, _719), 0.0);
        float _754 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _764 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _774 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _784 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_742.x + (-0.5));
        float _786 = _784 * (_742.y + (-0.5));
        float _787 = _784 * (_742.z + (-0.5));
        _791 = _754 * (_721.z + (-0.5));
        _792 = _754 * (_721.y + (-0.5));
        _793 = _754 * (_721.x + (-0.5));
        _794 = _764 * (_728.z + (-0.5));
        _795 = _764 * (_728.y + (-0.5));
        _796 = _764 * (_728.x + (-0.5));
        _797 = _774 * (_735.z + (-0.5));
        _798 = _774 * (_735.y + (-0.5));
        _799 = _774 * (_735.x + (-0.5));
        _800 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        _801 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        _802 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    }
    else
    {
        _791 = _378;
        _792 = _378;
        _793 = _378;
        _794 = _378;
        _795 = _378;
        _796 = _378;
        _797 = _378;
        _798 = _378;
        _799 = _378;
        _800 = _378;
        _801 = _378;
        _802 = _378;
    }
    float _817 = _459 * (-0.5);
    float _818 = _460 * (-0.5);
    float _819 = _461 * (-0.5);
    float _820 = dot(vec4(_817, _818, _819, 1.0), vec4(_793, _796, _799, _802));
    float _823 = dot(vec4(_817, _818, _819, 1.0), vec4(_792, _795, _798, _801));
    float _826 = dot(vec4(_817, _818, _819, 1.0), vec4(_791, _794, _797, _800));
    float _861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _833 = dot(vec4(_817, _818, _819, 1.0), vec4(_652, _655, _658, _661));
        float _837 = dot(vec4(_817, _818, _819, 1.0), vec4(_653, _656, _659, _662));
        float _841 = dot(vec4(_817, _818, _819, 1.0), vec4(_654, _657, _660, _663));
        float _848 = dot(vec4(cbModelParam._m0[39u]), vec4(_817, _818, _819, 1.0));
        _861 = dot(vec3(isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)), isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)), isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_848) ? 0.0 : (isnan(0.0) ? _848 : max(0.0, _848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _861 = 1.0;
    }
    float _872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _863 = dot(vec4(cbModelParam._m0[40u]), vec4(_817, _818, _819, 1.0));
        _872 = dot(vec3(isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)), isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)), isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_863) ? 0.0 : (isnan(0.0) ? _863 : max(0.0, _863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _872 = 1.0;
    }
    float _876 = (_872 * cbModelParam._m0[1u].x) + (_861 * (1.0 - cbModelParam._m0[1u].x));
    float _882 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _965;
    float _967;
    float _969;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _932 = fma(_513, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505)) + cbModelParam._m0[13u].w;
        float _936 = fma(_513, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505)) + cbModelParam._m0[14u].w;
        float _940 = fma(_513, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505)) + cbModelParam._m0[15u].w;
        float _943 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _946 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _949 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _975;
        if (_943 > 0.0)
        {
            _975 = abs((1.0 - _932) / _943);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_943 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_932 + 1.0) / _943);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _975 = frontier_phi_26_24_ladder;
        }
        float _1254;
        if (_946 > 0.0)
        {
            _1254 = abs((1.0 - _936) / _946);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_946 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_936 + 1.0) / _946);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1254 = frontier_phi_35_31_ladder;
        }
        float _1550;
        if (_949 > 0.0)
        {
            _1550 = abs((1.0 - _940) / _949);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_949 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_940 + 1.0) / _949);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1550 = frontier_phi_49_42_ladder;
        }
        float _1552 = isnan(_1254) ? _975 : (isnan(_975) ? _1254 : min(_975, _1254));
        float _1553 = isnan(_1550) ? _1552 : (isnan(_1552) ? _1550 : min(_1552, _1550));
        float _1557 = (_1553 * _943) + _932;
        float _1558 = (_1553 * _946) + _936;
        float _1559 = (_1553 * _949) + _940;
        float _1560 = _1553 * 9.9999997473787516355514526367188e-05;
        float _1561 = (-1.0) - _1560;
        float _1563 = _1560 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1559 > _1563) || ((_1559 < _1561) || ((_1558 > _1563) || ((_1558 < _1561) || ((_1557 < _1561) || (_1557 > _1563))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1559, cbModelParam._m0[9u].z, fma(_1558, cbModelParam._m0[9u].y, _1557 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1559, cbModelParam._m0[10u].z, fma(_1558, cbModelParam._m0[10u].y, _1557 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1559, cbModelParam._m0[11u].z, fma(_1558, cbModelParam._m0[11u].y, _1557 * cbModelParam._m0[11u].x))), _882);
            frontier_phi_25_49_ladder = _1670.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1670.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1670.x * cbModelParam._m0[1u].y;
        }
        _965 = frontier_phi_25_49_ladder_2;
        _967 = frontier_phi_25_49_ladder_1;
        _969 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _953 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _882);
        _965 = _953.x * cbModelParam._m0[1u].y;
        _967 = _953.y * cbModelParam._m0[1u].y;
        _969 = _953.z * cbModelParam._m0[1u].y;
    }
    float _972 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1062;
    float _1064;
    float _1066;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1026 = fma(_513, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505)) + cbModelParam._m0[21u].w;
        float _1030 = fma(_513, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505)) + cbModelParam._m0[22u].w;
        float _1034 = fma(_513, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505)) + cbModelParam._m0[23u].w;
        float _1037 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1040 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1043 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1259;
        if (_1037 > 0.0)
        {
            _1259 = abs((1.0 - _1026) / _1037);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1037 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1026 + 1.0) / _1037);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1259 = frontier_phi_37_33_ladder;
        }
        float _1576;
        if (_1040 > 0.0)
        {
            _1576 = abs((1.0 - _1030) / _1040);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1040 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1030 + 1.0) / _1040);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1576 = frontier_phi_51_44_ladder;
        }
        float _1727;
        if (_1043 > 0.0)
        {
            _1727 = abs((1.0 - _1034) / _1043);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1043 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1034 + 1.0) / _1043);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1727 = frontier_phi_65_60_ladder;
        }
        float _1729 = isnan(_1576) ? _1259 : (isnan(_1259) ? _1576 : min(_1259, _1576));
        float _1730 = isnan(_1727) ? _1729 : (isnan(_1729) ? _1727 : min(_1729, _1727));
        float _1734 = (_1730 * _1037) + _1026;
        float _1735 = (_1730 * _1040) + _1030;
        float _1736 = (_1730 * _1043) + _1034;
        float _1737 = _1730 * 9.9999997473787516355514526367188e-05;
        float _1738 = (-1.0) - _1737;
        float _1740 = _1737 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1736 > _1740) || ((_1736 < _1738) || ((_1735 > _1740) || ((_1735 < _1738) || ((_1734 < _1738) || (_1734 > _1740))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1736, cbModelParam._m0[17u].z, fma(_1735, cbModelParam._m0[17u].y, _1734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1736, cbModelParam._m0[18u].z, fma(_1735, cbModelParam._m0[18u].y, _1734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1736, cbModelParam._m0[19u].z, fma(_1735, cbModelParam._m0[19u].y, _1734 * cbModelParam._m0[19u].x))), _972);
            frontier_phi_34_65_ladder = _1896.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _1896.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _1896.x * cbModelParam._m0[1u].z;
        }
        _1062 = frontier_phi_34_65_ladder_2;
        _1064 = frontier_phi_34_65_ladder_1;
        _1066 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _972);
        _1062 = _1046.x * cbModelParam._m0[1u].z;
        _1064 = _1046.y * cbModelParam._m0[1u].z;
        _1066 = _1046.z * cbModelParam._m0[1u].z;
    }
    float _1078 = _480 * 0.01200000010430812835693359375;
    float _1080 = _1078 * ((cbModelParam._m0[1u].w * (_1062 - _965)) + _965);
    float _1081 = _1078 * ((cbModelParam._m0[1u].w * (_1064 - _967)) + _967);
    float _1082 = _1078 * ((cbModelParam._m0[1u].w * (_1066 - _969)) + _969);
    float _1103 = fma(_1082, cbSceneParam._m0[89u].z, fma(_1081, cbSceneParam._m0[89u].y, _1080 * cbSceneParam._m0[89u].x));
    float _1106 = fma(_1082, cbSceneParam._m0[90u].z, fma(_1081, cbSceneParam._m0[90u].y, _1080 * cbSceneParam._m0[90u].x));
    float _1109 = fma(_1082, cbSceneParam._m0[91u].z, fma(_1081, cbSceneParam._m0[91u].y, _1080 * cbSceneParam._m0[91u].x));
    uint _1116 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1121 = floatBitsToUint(cbInstanceData._m0[_1116 + 5u]);
    uint _1123 = _1121.x * 14u;
    uint _1124 = _1123 + 13u;
    float _1129 = _480 + (-1.0);
    float _1132 = (cbLight._m0[_1124].x * _1129) + 1.0;
    float _1133 = (cbLight._m0[_1124].y * _1129) + 1.0;
    uint _1134 = _1123 + 8u;
    float _1145 = cbLight._m0[_1123].x + _459;
    float _1146 = cbLight._m0[_1123].y + _460;
    float _1147 = cbLight._m0[_1123].z + _461;
    float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
    float _1155 = dot(vec3(0.0), vec3(cbLight._m0[_1123].xyz));
    float _2376 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    float _1159 = dot(vec3(0.0), vec3(_459, _460, _461));
    float _2387 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
    float _1163 = dot(vec3(cbLight._m0[_1123].xyz), vec3(_1145 * _1151, _1146 * _1151, _1147 * _1151));
    float _2398 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1174 = (exp2(log2(1.0 - (isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1180 = (0.5 / ((_1158 + 9.9999999392252902907785028219223e-09) + _1162)) * _1158;
    float _2409 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1182 = (isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0))) * 0.31831014156341552734375;
    float _1184 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
    uint _1194 = _1123 + 9u;
    uint _1200 = _1123 | 1u;
    float _1206 = cbLight._m0[_1200].x + _459;
    float _1207 = cbLight._m0[_1200].y + _460;
    float _1208 = cbLight._m0[_1200].z + _461;
    float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
    float _1216 = dot(vec3(0.0), vec3(cbLight._m0[_1200].xyz));
    float _2425 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    float _1220 = dot(vec3(cbLight._m0[_1200].xyz), vec3(_1206 * _1212, _1207 * _1212, _1208 * _1212));
    float _2436 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1229 = (exp2(log2(1.0 - (isnan(1.0) ? _2436 : (isnan(_2436) ? 1.0 : min(_2436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1233 = (0.5 / ((_1219 + 9.9999999392252902907785028219223e-09) + _1162)) * _1219;
    float _2447 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = (isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0))) * 0.31831014156341552734375;
    float _1236 = isnan(1.0) ? _1133 : (isnan(_1133) ? 1.0 : min(_1133, 1.0));
    float _1246 = (((_1229 * cbLight._m0[_1194].x) * _1235) * _1236) + (((_1174 * cbLight._m0[_1134].x) * _1182) * _1184);
    float _1247 = (((_1229 * cbLight._m0[_1194].y) * _1235) * _1236) + (((_1174 * cbLight._m0[_1134].y) * _1182) * _1184);
    float _1248 = (((_1229 * cbLight._m0[_1194].z) * _1235) * _1236) + (((_1174 * cbLight._m0[_1134].z) * _1182) * _1184);
    float _1365;
    float _1367;
    float _1369;
    if (_1121.y == 0u)
    {
        float _1304 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1305 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1304;
        float _1306 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1304;
        float _1307 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1304;
        uvec4 _1319 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1320 = _1319.x;
        uint _1331 = uint((float(_1319.y) * floor(float(uint(cbSceneParam._m0[85u].y * _468) / _1320))) + floor(float(uint(cbSceneParam._m0[85u].x * _467) / _1320)));
        float _1341 = (log2(_1307 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1342 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        uint _1345 = uint(isnan(14.0) ? _1342 : (isnan(_1342) ? 14.0 : min(_1342, 14.0)));
        uvec4 _1351 = texelFetch(g_lightClusterGridBuffer, int(((_1345 << 2u) + (_1331 << 6u)) >> 2u));
        uint _1352 = _1351.x;
        uint _1353 = _1319.z;
        float _1442;
        float _1444;
        float _1446;
        if (((((1u << ((_1353 >> 4u) & 15u)) + 4294967295u) & _1352) == 0u) || ((_1353 & 240u) == 0u))
        {
            _1442 = 0.0;
            _1444 = 0.0;
            _1446 = 0.0;
        }
        else
        {
            float _1443;
            float _1445;
            float _1447;
            float _1601 = 0.0;
            float _1602 = 0.0;
            float _1603 = 0.0;
            uint _1604 = 0u;
            uint _1613;
            bool _1614;
            for (;;)
            {
                _1613 = texelFetch(g_lightClassification, int((((_1345 << 5u) + (_1331 << 9u)) + (_1604 << 2u)) >> 2u)).x;
                _1614 = _1613 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1614)
                {
                    frontier_phi_62_pred = _1603;
                    frontier_phi_62_pred_1 = _1602;
                    frontier_phi_62_pred_2 = _1601;
                }
                else
                {
                    float _1767;
                    float _1768;
                    float _1769;
                    uint _1770;
                    _1767 = _1601;
                    _1768 = _1602;
                    _1769 = _1603;
                    _1770 = _1613;
                    float _1679;
                    float _1680;
                    float _1681;
                    for (;;)
                    {
                        uint _1774 = uint(findLSB(_1770)) + (_1604 << 5u);
                        uint _1771 = (_1770 + 4294967295u) & _1770;
                        uint _1776 = _1774 * 48u;
                        vec4 _1790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1776)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1776 + 3u)).x));
                        uint _1807 = (_1774 * 48u) + 8u;
                        vec3 _1818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1807)).x, texelFetch(g_PointLightRenderingBuffer, int(_1807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1807 + 2u)).x));
                        float _1822 = _1790.x - _1305;
                        float _1823 = _1790.y - _1306;
                        float _1824 = _1790.z - _1307;
                        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
                        float _1828 = inversesqrt(_1825);
                        float _1837 = 1.0 - (_1825 * _1790.w);
                        float _2473 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
                        float _1839 = sqrt(_1825) * uintBitsToFloat(uvec4(_1797, _1798, _1799, texelFetch(g_PointLightRenderingBuffer, int(((_1774 * 48u) + 4u) + 3u)).x)).w;
                        float _1842 = 1.39999997615814208984375 / (_1839 + 1.39999997615814208984375);
                        float _1843 = _1842 * _1842;
                        float _1846 = ((1.0 - _1843) * dot(vec3(0.0), vec3(_1828 * _1822, _1828 * _1823, _1828 * _1824))) + _1843;
                        float _1848 = (-0.0) - _1305;
                        float _1849 = (-0.0) - _1306;
                        float _1850 = (-0.0) - _1307;
                        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
                        float _1858 = dot(vec3(0.0), vec3(_1854 * _1848, _1854 * _1849, _1854 * _1850));
                        float _2484 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
                        float _2495 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
                        float _1862 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
                        float _1866 = (0.5 / (((isnan(1.0) ? _2484 : (isnan(_2484) ? 1.0 : min(_2484, 1.0))) + 9.9999999392252902907785028219223e-09) + _1862)) * _1862;
                        float _2506 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
                        float _1875 = (((isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0))) * 3.1415927410125732421875) / (((_1839 * _1839) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0)));
                        _1679 = (_1875 * _1818.x) + _1767;
                        _1680 = (_1875 * _1818.y) + _1768;
                        _1681 = (_1875 * _1818.z) + _1769;
                        if (_1771 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1767 = _1679;
                            _1768 = _1680;
                            _1769 = _1681;
                            _1770 = _1771;
                        }
                    }
                    frontier_phi_62_pred = _1681;
                    frontier_phi_62_pred_1 = _1680;
                    frontier_phi_62_pred_2 = _1679;
                }
                _1447 = frontier_phi_62_pred;
                _1445 = frontier_phi_62_pred_1;
                _1443 = frontier_phi_62_pred_2;
                uint _1605 = _1604 + 1u;
                if (_1605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1601 = _1443;
                    _1602 = _1445;
                    _1603 = _1447;
                    _1604 = _1605;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1442 = _1443;
            _1444 = _1445;
            _1446 = _1447;
        }
        uvec4 _1450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1451 = _1450.z;
        uint _1453 = (_1451 >> 8u) & 15u;
        float _1581;
        float _1583;
        float _1585;
        if (((4294967295u << _1453) & _1352) == 0u)
        {
            _1581 = _1442;
            _1583 = _1444;
            _1585 = _1446;
        }
        else
        {
            float _1597 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1453 < ((_1451 >> 12u) & 15u))
            {
                float _1582;
                float _1584;
                float _1586;
                float _1753 = _1442;
                float _1754 = _1444;
                float _1755 = _1446;
                uint _1756 = _1453;
                uint _1765;
                bool _1766;
                for (;;)
                {
                    _1765 = texelFetch(g_lightClassification, int((((_1345 << 5u) + (_1331 << 9u)) + (_1756 << 2u)) >> 2u)).x;
                    _1766 = _1765 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_1766)
                    {
                        frontier_phi_71_pred = _1755;
                        frontier_phi_71_pred_1 = _1754;
                        frontier_phi_71_pred_2 = _1753;
                    }
                    else
                    {
                        float _1901;
                        float _1902;
                        float _1903;
                        float _2122;
                        float _2123;
                        float _2124;
                        float _1911 = _1753;
                        float _1912 = _1754;
                        float _1913 = _1755;
                        uint _1914 = _1765;
                        uint _1915;
                        uint _1925;
                        vec4 _1940;
                        float _1941;
                        vec3 _1953;
                        vec4 _1968;
                        vec4 _1983;
                        float _2029;
                        bool _2030;
                        for (;;)
                        {
                            _1925 = ((_1756 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1914));
                            _1915 = (_1914 + 4294967295u) & _1914;
                            uint _1927 = _1925 * 40u;
                            _1940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1927 + 3u)).x));
                            _1941 = _1940.w;
                            uint _1943 = (_1925 * 40u) + 8u;
                            _1953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1943 + 2u)).x));
                            uint _1955 = (_1925 * 40u) + 16u;
                            _1968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1955 + 3u)).x));
                            uint _1970 = (_1925 * 40u) + 20u;
                            _1983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1970 + 3u)).x));
                            uint _1985 = (_1925 * 40u) + 24u;
                            vec4 _1998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1985 + 3u)).x));
                            uint _2004 = (_1925 * 40u) + 28u;
                            vec4 _2017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2004 + 3u)).x));
                            _2029 = fma(_1307, _2017.z, fma(_1306, _2017.y, _2017.x * _1305)) + _2017.w;
                            _2030 = !((fma(_1307, _1998.z, fma(_1306, _1998.y, _1998.x * _1305)) + _1998.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2030)
                            {
                                float _2064 = _1940.x - _1305;
                                float _2065 = _1940.y - _1306;
                                float _2066 = _1940.z - _1307;
                                float _2067 = dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066));
                                float _2070 = inversesqrt(_2067);
                                float _2077 = 1.0 - (_2067 / (_1941 * _1941));
                                float _2517 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
                                float _2079 = sqrt(_2067) * uintBitsToFloat(uvec4(_2033, _2034, _2035, texelFetch(g_SpotLightRenderingBuffer, int(((_1925 * 40u) + 4u) + 3u)).x)).w;
                                float _2081 = 1.39999997615814208984375 / (_2079 + 1.39999997615814208984375);
                                float _2082 = _2081 * _2081;
                                float _2085 = (fma(_1307, _1968.z, fma(_1306, _1968.y, _1968.x * _1305)) + _1968.w) / _2029;
                                float _2086 = (fma(_1307, _1983.z, fma(_1306, _1983.y, _1983.x * _1305)) + _1983.w) / _2029;
                                float _2090 = 1.0 - dot(vec2(_2085, _2086), vec2(_2085, _2086));
                                float _2528 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
                                float _2098 = dot(vec3(0.0), vec3((-0.0) - (_1305 * _1597), (-0.0) - (_1306 * _1597), (-0.0) - (_1307 * _1597)));
                                float _2539 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
                                float _2106 = ((1.0 - _2082) * dot(vec3(0.0), vec3(_2070 * _2064, _2070 * _2065, _2070 * _2066))) + _2082;
                                float _2550 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
                                float _2107 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
                                float _2111 = (0.5 / (((isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0))) + 9.9999999392252902907785028219223e-09) + _2107)) * _2107;
                                float _2561 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
                                float _2118 = ((isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0))) * (isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0)))) * (((isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0))) * 3.1415927410125732421875) / (((_2079 * _2079) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2118 * _1953.z;
                                frontier_phi_77_pred_1 = _2118 * _1953.x;
                                frontier_phi_77_pred_2 = _2118 * _1953.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2124 = frontier_phi_77_pred;
                            _2122 = frontier_phi_77_pred_1;
                            _2123 = frontier_phi_77_pred_2;
                            _1901 = _2122 + _1911;
                            _1902 = _2123 + _1912;
                            _1903 = _2124 + _1913;
                            if (_1915 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1911 = _1901;
                                _1912 = _1902;
                                _1913 = _1903;
                                _1914 = _1915;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _1903;
                        frontier_phi_71_pred_1 = _1902;
                        frontier_phi_71_pred_2 = _1901;
                    }
                    _1586 = frontier_phi_71_pred;
                    _1584 = frontier_phi_71_pred_1;
                    _1582 = frontier_phi_71_pred_2;
                    uint _1757 = _1756 + 1u;
                    if (_1757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1753 = _1582;
                        _1754 = _1584;
                        _1755 = _1586;
                        _1756 = _1757;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1584;
                frontier_phi_53_54_ladder_1 = _1582;
                frontier_phi_53_54_ladder_2 = _1586;
            }
            else
            {
                frontier_phi_53_54_ladder = _1444;
                frontier_phi_53_54_ladder_1 = _1442;
                frontier_phi_53_54_ladder_2 = _1446;
            }
            _1581 = frontier_phi_53_54_ladder_1;
            _1583 = frontier_phi_53_54_ladder;
            _1585 = frontier_phi_53_54_ladder_2;
        }
        float _1590 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _1365 = ((_1581 * 0.039999999105930328369140625) * _1590) + _1246;
        _1367 = ((_1583 * 0.039999999105930328369140625) * _1590) + _1247;
        _1369 = ((_1585 * 0.039999999105930328369140625) * _1590) + _1248;
    }
    else
    {
        _1365 = _1246;
        _1367 = _1247;
        _1369 = _1248;
    }
    uint _1376 = (_1116 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1391 = ((_431.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1376].x) + ((_1365 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _876)) * cbPerFrame._m0[3u].x);
    float _1392 = ((_431.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1376].y) + ((_1367 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _876)) * cbPerFrame._m0[3u].x);
    float _1393 = ((_431.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1376].z) + ((_1369 + ((isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))) * _876)) * cbPerFrame._m0[3u].x);
    uint _1397 = _1116 + 6u;
    float _1405 = _467 / cbSceneParam._m0[86u].x;
    float _1406 = _468 / cbSceneParam._m0[86u].y;
    vec4 _1420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1405, _1406, (log2((isnan(cbSceneParam._m0[77u].w) ? _454 : (isnan(_454) ? cbSceneParam._m0[77u].w : min(_454, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1422 = _1420.x;
    float _1423 = _1420.y;
    float _1424 = _1420.z;
    float _1425 = _1420.w;
    float _1499;
    float _1501;
    float _1503;
    float _1505;
    if (_454 > cbSceneParam._m0[78u].w)
    {
        float _1461 = isnan(_454) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _454 : min(cbSceneParam._m0[80u].w, _454));
        float _1462 = _1461 / _454;
        float _1473 = _1462 * _250;
        float _1474 = _251 * _1462;
        float _1475 = (-0.0) - _1474;
        float _1476 = _1462 * _252;
        float _1478 = (cbSceneParam._m0[77u].w * _1475) / _1461;
        float _1479 = _1478 + cbSceneParam._m0[79u].w;
        float _1480 = cbSceneParam._m0[79u].w - _1474;
        float _1486 = sqrt(((_1473 * _1473) + (_1474 * _1474)) + (_1476 * _1476));
        float _1489 = (1.0 - (cbSceneParam._m0[77u].w / _1461)) * _1486;
        float _1495 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1497 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1689;
        if (abs((_1475 - _1478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1689 = ((((_1479 > 0.0) ? exp2(_1495 * _1479) : (2.0 - exp2(_1497 * _1479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1489;
        }
        else
        {
            float _1627 = 1.0 / cbSceneParam._m0[80u].x;
            float _1628 = isnan(_1480) ? _1479 : (isnan(_1479) ? _1480 : max(_1479, _1480));
            float _1629 = isnan(_1480) ? _1479 : (isnan(_1479) ? _1480 : min(_1479, _1480));
            float _1638 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : min(_1628, 0.0));
            float _1639 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : min(_1629, 0.0));
            _1689 = ((abs(_1486 / _1475) * cbSceneParam._m0[80u].y) * ((((_1638 - _1639) * 2.0) - ((exp2(_1495 * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)))) - exp2(_1495 * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))))) * _1627)) - ((exp2(_1497 * _1638) - exp2(_1497 * _1639)) * _1627))) + (_1489 * cbSceneParam._m0[80u].z);
        }
        vec4 _1691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1405, _1406, 1.0), 0.0);
        float _1700 = exp2((_1689 * (-1.44269502162933349609375)) * (1.0 - _1691.w));
        float _1701 = log2(_1700);
        float _1717 = log2(_1425);
        _1499 = (exp2(_1717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1701 * cbSceneParam._m0[78u].x)) * _1691.x) / cbSceneParam._m0[78u].x)) + _1422;
        _1501 = (exp2(_1717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1701 * cbSceneParam._m0[78u].y)) * _1691.y) / cbSceneParam._m0[78u].y)) + _1423;
        _1503 = (exp2(_1717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1701 * cbSceneParam._m0[78u].z)) * _1691.z) / cbSceneParam._m0[78u].z)) + _1424;
        _1505 = _1700 * _1425;
    }
    else
    {
        _1499 = _1422;
        _1501 = _1423;
        _1503 = _1424;
        _1505 = _1425;
    }
    float _1517 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1518 = _1517 == 3.0;
    float _1520 = log2(_1505);
    float _1527 = exp2(_1520 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    float _1528 = exp2(_1520 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    float _1529 = exp2(_1520 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    float _1538 = (_1517 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1538 * (_1518 ? _1527 : (_1527 + (cbSceneParam._m0[72u].w * _1499)));
    SV_Target.y = _1538 * (_1518 ? _1528 : (_1528 + (cbSceneParam._m0[72u].w * _1501)));
    SV_Target.z = _1538 * (_1518 ? _1529 : (_1529 + (cbSceneParam._m0[72u].w * _1503)));
    SV_Target.w = cbInstanceData._m0[_1397].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1397].w;
}


