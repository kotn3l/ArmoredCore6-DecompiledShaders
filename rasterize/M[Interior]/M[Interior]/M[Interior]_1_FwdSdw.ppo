#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _623;
uint _2060;
uint _2061;
uint _2062;
uint _2276;
uint _2277;
uint _2278;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = cbMtdParam._m0[21u].w + _254;
    float _314 = cbMtdParam._m0[22u].x + _255;
    float _315 = cbMtdParam._m0[22u].y + _256;
    float _332 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _333 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _334 = (-0.0) - dot(vec3(_313, _314, _315), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _341 = _338 * _334;
    float _344 = ((_338 * _332) + (((_278.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _345 = ((_338 * _333) + (((_278.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _346 = fract(TEXCOORD.x);
    float _347 = fract(TEXCOORD.y);
    float _353;
    if (_344 > 0.0)
    {
        _353 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _353 = frontier_phi_3_2_ladder;
    }
    float _361;
    if (_345 > 0.0)
    {
        _361 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _361 = frontier_phi_7_6_ladder;
    }
    float _365 = (_341 > 0.0) ? (cbMtdParam._m0[15u].x / _341) : 5000.0;
    float _366 = isnan(_361) ? _353 : (isnan(_353) ? _361 : min(_353, _361));
    float _367 = isnan(_365) ? _366 : (isnan(_366) ? _365 : min(_366, _365));
    float _371 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = ((_367 * _341) + _371) / _371;
    vec4 _402 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_346 + (-0.5)) + (_367 * _344)) / _378) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_347 + (-0.5)) + (_367 * _345)) / _378) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _435 = _254 * _434;
    float _436 = _255 * _434;
    float _437 = _256 * _434;
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_443 * cbSceneParam._m0[86u].x, _444 * cbSceneParam._m0[86u].y));
    float _456 = _453.x * TEXCOORD.z;
    float _457 = (-0.0) - _435;
    float _458 = (-0.0) - _436;
    float _459 = (-0.0) - _437;
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _622;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    float _631;
    float _632;
    float _633;
    float _634;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _545 = (cbModelParam._m0[37u].x * ((((fma(_489, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _547 = (cbModelParam._m0[37u].y * ((((fma(_489, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _548 = (((((fma(_489, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        float _585 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _595 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _605 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _615 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_572.x + (-0.5));
        float _617 = _615 * (_572.y + (-0.5));
        float _618 = _615 * (_572.z + (-0.5));
        _622 = _585 * (_551.z + (-0.5));
        _624 = _585 * (_551.y + (-0.5));
        _625 = _585 * (_551.x + (-0.5));
        _626 = _595 * (_558.z + (-0.5));
        _627 = _595 * (_558.y + (-0.5));
        _628 = _595 * (_558.x + (-0.5));
        _629 = _605 * (_565.z + (-0.5));
        _630 = _605 * (_565.y + (-0.5));
        _631 = _605 * (_565.x + (-0.5));
        _632 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        _633 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        _634 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    }
    else
    {
        _622 = _623;
        _624 = _623;
        _625 = _623;
        _626 = _623;
        _627 = _623;
        _628 = _623;
        _629 = _623;
        _630 = _623;
        _631 = _623;
        _632 = _623;
        _633 = _623;
        _634 = _623;
    }
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _688 = (cbModelParam._m0[38u].x * ((((fma(_489, cbModelParam._m0[30u].z, fma(_485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _481)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _689 = (cbModelParam._m0[38u].y * ((((fma(_489, cbModelParam._m0[31u].z, fma(_485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _481)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _690 = (((((fma(_489, cbModelParam._m0[32u].z, fma(_485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _481)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _725 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _755 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_713.x + (-0.5));
        float _757 = _755 * (_713.y + (-0.5));
        float _758 = _755 * (_713.z + (-0.5));
        _762 = _725 * (_692.z + (-0.5));
        _763 = _725 * (_692.y + (-0.5));
        _764 = _725 * (_692.x + (-0.5));
        _765 = _735 * (_699.z + (-0.5));
        _766 = _735 * (_699.y + (-0.5));
        _767 = _735 * (_699.x + (-0.5));
        _768 = _745 * (_706.z + (-0.5));
        _769 = _745 * (_706.y + (-0.5));
        _770 = _745 * (_706.x + (-0.5));
        _771 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        _772 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        _773 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _762 = _623;
        _763 = _623;
        _764 = _623;
        _765 = _623;
        _766 = _623;
        _767 = _623;
        _768 = _623;
        _769 = _623;
        _770 = _623;
        _771 = _623;
        _772 = _623;
        _773 = _623;
    }
    float _788 = _435 * (-0.5);
    float _789 = _436 * (-0.5);
    float _790 = _437 * (-0.5);
    float _791 = dot(vec4(_788, _789, _790, 1.0), vec4(_764, _767, _770, _773));
    float _794 = dot(vec4(_788, _789, _790, 1.0), vec4(_763, _766, _769, _772));
    float _797 = dot(vec4(_788, _789, _790, 1.0), vec4(_762, _765, _768, _771));
    float _832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _804 = dot(vec4(_788, _789, _790, 1.0), vec4(_622, _626, _629, _632));
        float _808 = dot(vec4(_788, _789, _790, 1.0), vec4(_624, _627, _630, _633));
        float _812 = dot(vec4(_788, _789, _790, 1.0), vec4(_625, _628, _631, _634));
        float _819 = dot(vec4(cbModelParam._m0[39u]), vec4(_788, _789, _790, 1.0));
        _832 = dot(vec3(isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)), isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_819) ? 0.0 : (isnan(0.0) ? _819 : max(0.0, _819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _832 = 1.0;
    }
    float _843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _834 = dot(vec4(cbModelParam._m0[40u]), vec4(_788, _789, _790, 1.0));
        _843 = dot(vec3(isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)), isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)), isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_834) ? 0.0 : (isnan(0.0) ? _834 : max(0.0, _834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _843 = 1.0;
    }
    float _847 = (_843 * cbModelParam._m0[1u].x) + (_832 * (1.0 - cbModelParam._m0[1u].x));
    float _853 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _936;
    float _938;
    float _940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _903 = fma(_489, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481)) + cbModelParam._m0[13u].w;
        float _907 = fma(_489, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481)) + cbModelParam._m0[14u].w;
        float _911 = fma(_489, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481)) + cbModelParam._m0[15u].w;
        float _914 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _917 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _920 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _946;
        if (_914 > 0.0)
        {
            _946 = abs((1.0 - _903) / _914);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_914 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_903 + 1.0) / _914);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _946 = frontier_phi_22_20_ladder;
        }
        float _1134;
        if (_917 > 0.0)
        {
            _1134 = abs((1.0 - _907) / _917);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_917 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_907 + 1.0) / _917);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1134 = frontier_phi_31_27_ladder;
        }
        float _1489;
        if (_920 > 0.0)
        {
            _1489 = abs((1.0 - _911) / _920);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_920 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_911 + 1.0) / _920);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1489 = frontier_phi_43_38_ladder;
        }
        float _1491 = isnan(_1134) ? _946 : (isnan(_946) ? _1134 : min(_946, _1134));
        float _1492 = isnan(_1489) ? _1491 : (isnan(_1491) ? _1489 : min(_1491, _1489));
        float _1496 = (_1492 * _914) + _903;
        float _1497 = (_1492 * _917) + _907;
        float _1498 = (_1492 * _920) + _911;
        float _1499 = _1492 * 9.9999997473787516355514526367188e-05;
        float _1501 = (-1.0) - _1499;
        float _1503 = _1499 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1498 > _1503) || ((_1498 < _1501) || ((_1497 > _1503) || ((_1497 < _1501) || ((_1496 < _1501) || (_1496 > _1503))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1498, cbModelParam._m0[9u].z, fma(_1497, cbModelParam._m0[9u].y, _1496 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1498, cbModelParam._m0[10u].z, fma(_1497, cbModelParam._m0[10u].y, _1496 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1498, cbModelParam._m0[11u].z, fma(_1497, cbModelParam._m0[11u].y, _1496 * cbModelParam._m0[11u].x))), _853);
            frontier_phi_21_43_ladder = _1732.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _1732.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _1732.x * cbModelParam._m0[1u].y;
        }
        _936 = frontier_phi_21_43_ladder_2;
        _938 = frontier_phi_21_43_ladder;
        _940 = frontier_phi_21_43_ladder_1;
    }
    else
    {
        vec4 _924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _853);
        _936 = _924.x * cbModelParam._m0[1u].y;
        _938 = _924.y * cbModelParam._m0[1u].y;
        _940 = _924.z * cbModelParam._m0[1u].y;
    }
    float _943 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1031;
    float _1033;
    float _1035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _995 = fma(_489, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481)) + cbModelParam._m0[21u].w;
        float _999 = fma(_489, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481)) + cbModelParam._m0[22u].w;
        float _1003 = fma(_489, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481)) + cbModelParam._m0[23u].w;
        float _1006 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1009 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1012 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1139;
        if (_1006 > 0.0)
        {
            _1139 = abs((1.0 - _995) / _1006);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1006 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_995 + 1.0) / _1006);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1139 = frontier_phi_33_29_ladder;
        }
        float _1516;
        if (_1009 > 0.0)
        {
            _1516 = abs((1.0 - _999) / _1009);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1009 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_999 + 1.0) / _1009);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1516 = frontier_phi_45_40_ladder;
        }
        float _1848;
        if (_1012 > 0.0)
        {
            _1848 = abs((1.0 - _1003) / _1012);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1012 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1003 + 1.0) / _1012);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _1848 = frontier_phi_57_52_ladder;
        }
        float _1850 = isnan(_1516) ? _1139 : (isnan(_1139) ? _1516 : min(_1139, _1516));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1006) + _995;
        float _1856 = (_1851 * _1009) + _999;
        float _1857 = (_1851 * _1012) + _1003;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1859 = (-1.0) - _1858;
        float _1861 = _1858 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_1857 > _1861) || ((_1857 < _1859) || ((_1856 > _1861) || ((_1856 < _1859) || ((_1855 < _1859) || (_1855 > _1861))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1857, cbModelParam._m0[17u].z, fma(_1856, cbModelParam._m0[17u].y, _1855 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1857, cbModelParam._m0[18u].z, fma(_1856, cbModelParam._m0[18u].y, _1855 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1857, cbModelParam._m0[19u].z, fma(_1856, cbModelParam._m0[19u].y, _1855 * cbModelParam._m0[19u].x))), _943);
            frontier_phi_30_57_ladder = _1963.x * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _1963.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _1963.z * cbModelParam._m0[1u].z;
        }
        _1031 = frontier_phi_30_57_ladder;
        _1033 = frontier_phi_30_57_ladder_1;
        _1035 = frontier_phi_30_57_ladder_2;
    }
    else
    {
        vec4 _1015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _943);
        _1031 = _1015.x * cbModelParam._m0[1u].z;
        _1033 = _1015.y * cbModelParam._m0[1u].z;
        _1035 = _1015.z * cbModelParam._m0[1u].z;
    }
    float _1047 = _456 * 0.01200000010430812835693359375;
    float _1049 = _1047 * ((cbModelParam._m0[1u].w * (_1031 - _936)) + _936);
    float _1050 = _1047 * ((cbModelParam._m0[1u].w * (_1033 - _938)) + _938);
    float _1051 = _1047 * ((cbModelParam._m0[1u].w * (_1035 - _940)) + _940);
    float _1072 = fma(_1051, cbSceneParam._m0[89u].z, fma(_1050, cbSceneParam._m0[89u].y, _1049 * cbSceneParam._m0[89u].x));
    float _1075 = fma(_1051, cbSceneParam._m0[90u].z, fma(_1050, cbSceneParam._m0[90u].y, _1049 * cbSceneParam._m0[90u].x));
    float _1078 = fma(_1051, cbSceneParam._m0[91u].z, fma(_1050, cbSceneParam._m0[91u].y, _1049 * cbSceneParam._m0[91u].x));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1126 = _1113 / _1125;
    float _1127 = _1117 / _1125;
    float _1128 = _1121 / _1125;
    float _1276;
    float _1277;
    float _1278;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1155 = ((uint(_1128 > cbSceneParam._m0[59u].y) + uint(_1128 > cbSceneParam._m0[59u].x)) + uint(_1128 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1156 = _1155 + 43u;
        uint _1164 = _1155 + 44u;
        uint _1172 = _1155 + 45u;
        uint _1180 = _1155 + 46u;
        float _1191 = fma(_1125, cbSceneParam._m0[_1156].w, fma(_1121, cbSceneParam._m0[_1156].z, fma(_1117, cbSceneParam._m0[_1156].y, _1113 * cbSceneParam._m0[_1156].x)));
        float _1195 = fma(_1125, cbSceneParam._m0[_1164].w, fma(_1121, cbSceneParam._m0[_1164].z, fma(_1117, cbSceneParam._m0[_1164].y, _1113 * cbSceneParam._m0[_1164].x)));
        float _1203 = fma(_1125, cbSceneParam._m0[_1180].w, fma(_1121, cbSceneParam._m0[_1180].z, fma(_1117, cbSceneParam._m0[_1180].y, _1113 * cbSceneParam._m0[_1180].x)));
        float _1208 = cbSceneParam._m0[33u].z * _1203;
        float _1210 = cbSceneParam._m0[33u].w * _1203;
        float _1213 = fma(_1125, cbSceneParam._m0[_1172].w, fma(_1121, cbSceneParam._m0[_1172].z, fma(_1117, cbSceneParam._m0[_1172].y, _1113 * cbSceneParam._m0[_1172].x))) / _1203;
        float _1261 = (cbSceneParam._m0[33u].x - sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128))) * cbSceneParam._m0[33u].y;
        float _2622 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1269 = (isnan(1.0) ? _2622 : (isnan(_2622) ? 1.0 : min(_2622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1208 + _1191) / _1203, (_1210 + _1195) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1210 + _1191) / _1203, (_1195 - _1208) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1191 - _1208) / _1203, (_1195 - _1210) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1191 - _1210) / _1203, (_1208 + _1195) / _1203), _1213), 0.0)).x), vec4(0.25)));
        _1276 = 1.0 - (_1269 * cbSceneParam._m0[34u].x);
        _1277 = 1.0 - (_1269 * cbSceneParam._m0[34u].y);
        _1278 = 1.0 - (_1269 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1276 = 1.0;
        _1277 = 1.0;
        _1278 = 1.0;
    }
    float _1342;
    float _1344;
    float _1346;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1330 = fma(_1125, cbSceneParam._m0[63u].w, fma(_1121, cbSceneParam._m0[63u].z, fma(_1117, cbSceneParam._m0[63u].y, _1113 * cbSceneParam._m0[63u].x)));
        float _1331 = fma(_1125, cbSceneParam._m0[60u].w, fma(_1121, cbSceneParam._m0[60u].z, fma(_1117, cbSceneParam._m0[60u].y, _1113 * cbSceneParam._m0[60u].x))) / _1330;
        float _1332 = fma(_1125, cbSceneParam._m0[61u].w, fma(_1121, cbSceneParam._m0[61u].z, fma(_1117, cbSceneParam._m0[61u].y, _1113 * cbSceneParam._m0[61u].x))) / _1330;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1331 >= cbSceneParam._m0[64u].x) && (_1332 >= cbSceneParam._m0[64u].y)) && (_1331 <= cbSceneParam._m0[64u].z)) && (_1332 <= cbSceneParam._m0[64u].w))
        {
            float _1529 = fma(_1125, cbSceneParam._m0[62u].w, fma(_1121, cbSceneParam._m0[62u].z, fma(_1117, cbSceneParam._m0[62u].y, _1113 * cbSceneParam._m0[62u].x))) / _1330;
            float _1533 = isnan(cbSceneParam._m0[41u].w) ? _1529 : (isnan(_1529) ? cbSceneParam._m0[41u].w : max(_1529, cbSceneParam._m0[41u].w));
            float _1576 = (cbSceneParam._m0[33u].x - sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128))) * cbSceneParam._m0[33u].y;
            float _2638 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
            float _1583 = (isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1331, cbSceneParam._m0[33u].w + _1332), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1331, _1332 - cbSceneParam._m0[33u].z), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1331 - cbSceneParam._m0[33u].z, _1332 - cbSceneParam._m0[33u].w), _1533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1331 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1332), _1533), 0.0)).x), vec4(0.25)));
            float _1587 = 1.0 - (_1583 * cbSceneParam._m0[34u].x);
            float _1588 = 1.0 - (_1583 * cbSceneParam._m0[34u].y);
            float _1589 = 1.0 - (_1583 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1589) ? _1278 : (isnan(_1278) ? _1589 : min(_1278, _1589));
            frontier_phi_42_41_ladder_1 = isnan(_1588) ? _1277 : (isnan(_1277) ? _1588 : min(_1277, _1588));
            frontier_phi_42_41_ladder_2 = isnan(_1587) ? _1276 : (isnan(_1276) ? _1587 : min(_1276, _1587));
        }
        else
        {
            frontier_phi_42_41_ladder = _1278;
            frontier_phi_42_41_ladder_1 = _1277;
            frontier_phi_42_41_ladder_2 = _1276;
        }
        _1342 = frontier_phi_42_41_ladder_2;
        _1344 = frontier_phi_42_41_ladder_1;
        _1346 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1342 = _1276;
        _1344 = _1277;
        _1346 = _1278;
    }
    uint _1348 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1353 = floatBitsToUint(cbInstanceData._m0[_1348 + 5u]);
    uint _1355 = _1353.x * 14u;
    uint _1356 = _1355 + 13u;
    float _1361 = _456 + (-1.0);
    float _1364 = (cbLight._m0[_1356].x * _1361) + 1.0;
    float _1365 = (cbLight._m0[_1356].y * _1361) + 1.0;
    uint _1366 = _1355 + 8u;
    float _1377 = cbLight._m0[_1355].x + _435;
    float _1378 = cbLight._m0[_1355].y + _436;
    float _1379 = cbLight._m0[_1355].z + _437;
    float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
    float _1387 = dot(vec3(0.0), vec3(cbLight._m0[_1355].xyz));
    float _2664 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
    float _1390 = isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0));
    float _1391 = dot(vec3(0.0), vec3(_435, _436, _437));
    float _2675 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
    float _1394 = isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0));
    float _1395 = dot(vec3(cbLight._m0[_1355].xyz), vec3(_1377 * _1383, _1378 * _1383, _1379 * _1383));
    float _2686 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
    float _1406 = (exp2(log2(1.0 - (isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1412 = (0.5 / ((_1390 + 9.9999999392252902907785028219223e-09) + _1394)) * _1390;
    float _2697 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
    float _1414 = (isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) * 0.31831014156341552734375;
    float _1416 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
    uint _1429 = _1355 + 9u;
    uint _1435 = _1355 | 1u;
    float _1441 = cbLight._m0[_1435].x + _435;
    float _1442 = cbLight._m0[_1435].y + _436;
    float _1443 = cbLight._m0[_1435].z + _437;
    float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
    float _1451 = dot(vec3(0.0), vec3(cbLight._m0[_1435].xyz));
    float _2713 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1454 = isnan(1.0) ? _2713 : (isnan(_2713) ? 1.0 : min(_2713, 1.0));
    float _1455 = dot(vec3(cbLight._m0[_1435].xyz), vec3(_1441 * _1447, _1442 * _1447, _1443 * _1447));
    float _2724 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1464 = (exp2(log2(1.0 - (isnan(1.0) ? _2724 : (isnan(_2724) ? 1.0 : min(_2724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1468 = (0.5 / ((_1454 + 9.9999999392252902907785028219223e-09) + _1394)) * _1454;
    float _2735 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
    float _1470 = (isnan(1.0) ? _2735 : (isnan(_2735) ? 1.0 : min(_2735, 1.0))) * 0.31831014156341552734375;
    float _1471 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
    float _1481 = (((_1464 * cbLight._m0[_1429].x) * _1470) * _1471) + ((((cbLight._m0[_1366].x * _1342) * _1406) * _1414) * _1416);
    float _1482 = (((_1464 * cbLight._m0[_1429].y) * _1470) * _1471) + ((((cbLight._m0[_1366].y * _1344) * _1406) * _1414) * _1416);
    float _1483 = (((_1464 * cbLight._m0[_1429].z) * _1470) * _1471) + ((((cbLight._m0[_1366].z * _1346) * _1406) * _1414) * _1416);
    float _1647;
    float _1649;
    float _1651;
    if (_1353.y == 0u)
    {
        uvec4 _1601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1602 = _1601.x;
        uint _1613 = uint((float(_1601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _1602))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _1602)));
        float _1623 = (log2(_1128 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1624 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        uint _1627 = uint(isnan(14.0) ? _1624 : (isnan(_1624) ? 14.0 : min(_1624, 14.0)));
        uvec4 _1633 = texelFetch(g_lightClusterGridBuffer, int(((_1627 << 2u) + (_1613 << 6u)) >> 2u));
        uint _1634 = _1633.x;
        uint _1635 = _1601.z;
        float _1741;
        float _1743;
        float _1745;
        if (((((1u << ((_1635 >> 4u) & 15u)) + 4294967295u) & _1634) == 0u) || ((_1635 & 240u) == 0u))
        {
            _1741 = 0.0;
            _1743 = 0.0;
            _1745 = 0.0;
        }
        else
        {
            float _1742;
            float _1744;
            float _1746;
            float _1894 = 0.0;
            float _1895 = 0.0;
            float _1896 = 0.0;
            uint _1897 = 0u;
            uint _1906;
            bool _1907;
            for (;;)
            {
                _1906 = texelFetch(g_lightClassification, int((((_1627 << 5u) + (_1613 << 9u)) + (_1897 << 2u)) >> 2u)).x;
                _1907 = _1906 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                if (_1907)
                {
                    frontier_phi_66_pred = _1896;
                    frontier_phi_66_pred_1 = _1895;
                    frontier_phi_66_pred_2 = _1894;
                }
                else
                {
                    float _2030;
                    float _2031;
                    float _2032;
                    uint _2033;
                    _2030 = _1894;
                    _2031 = _1895;
                    _2032 = _1896;
                    _2033 = _1906;
                    float _1968;
                    float _1969;
                    float _1970;
                    for (;;)
                    {
                        uint _2037 = uint(findLSB(_2033)) + (_1897 << 5u);
                        uint _2034 = (_2033 + 4294967295u) & _2033;
                        uint _2039 = _2037 * 48u;
                        vec4 _2053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2039)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 3u)).x));
                        uint _2070 = (_2037 * 48u) + 8u;
                        vec3 _2081 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2070)).x, texelFetch(g_PointLightRenderingBuffer, int(_2070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2070 + 2u)).x));
                        float _2085 = _2053.x - _1126;
                        float _2086 = _2053.y - _1127;
                        float _2087 = _2053.z - _1128;
                        float _2088 = dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087));
                        float _2091 = inversesqrt(_2088);
                        float _2100 = 1.0 - (_2088 * _2053.w);
                        float _2761 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
                        float _2102 = sqrt(_2088) * uintBitsToFloat(uvec4(_2060, _2061, _2062, texelFetch(g_PointLightRenderingBuffer, int(((_2037 * 48u) + 4u) + 3u)).x)).w;
                        float _2105 = 1.39999997615814208984375 / (_2102 + 1.39999997615814208984375);
                        float _2106 = _2105 * _2105;
                        float _2109 = ((1.0 - _2106) * dot(vec3(0.0), vec3(_2091 * _2085, _2091 * _2086, _2091 * _2087))) + _2106;
                        float _2111 = (-0.0) - _1126;
                        float _2112 = (-0.0) - _1127;
                        float _2113 = (-0.0) - _1128;
                        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
                        float _2121 = dot(vec3(0.0), vec3(_2117 * _2111, _2117 * _2112, _2117 * _2113));
                        float _2772 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
                        float _2783 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
                        float _2125 = isnan(1.0) ? _2783 : (isnan(_2783) ? 1.0 : min(_2783, 1.0));
                        float _2129 = (0.5 / (((isnan(1.0) ? _2772 : (isnan(_2772) ? 1.0 : min(_2772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2125)) * _2125;
                        float _2794 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
                        float _2138 = (((isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0))) * 3.1415927410125732421875) / (((_2102 * _2102) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0)));
                        _1968 = (_2138 * _2081.x) + _2030;
                        _1969 = (_2138 * _2081.y) + _2031;
                        _1970 = (_2138 * _2081.z) + _2032;
                        if (_2034 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2030 = _1968;
                            _2031 = _1969;
                            _2032 = _1970;
                            _2033 = _2034;
                        }
                    }
                    frontier_phi_66_pred = _1970;
                    frontier_phi_66_pred_1 = _1969;
                    frontier_phi_66_pred_2 = _1968;
                }
                _1746 = frontier_phi_66_pred;
                _1744 = frontier_phi_66_pred_1;
                _1742 = frontier_phi_66_pred_2;
                uint _1898 = _1897 + 1u;
                if (_1898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1894 = _1742;
                    _1895 = _1744;
                    _1896 = _1746;
                    _1897 = _1898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1741 = _1742;
            _1743 = _1744;
            _1745 = _1746;
        }
        uvec4 _1749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1750 = _1749.z;
        uint _1752 = (_1750 >> 8u) & 15u;
        float _1874;
        float _1876;
        float _1878;
        if (((4294967295u << _1752) & _1634) == 0u)
        {
            _1874 = _1741;
            _1876 = _1743;
            _1878 = _1745;
        }
        else
        {
            float _1890 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            if (_1752 < ((_1750 >> 12u) & 15u))
            {
                float _1875;
                float _1877;
                float _1879;
                float _2016 = _1741;
                float _2017 = _1743;
                float _2018 = _1745;
                uint _2019 = _1752;
                uint _2028;
                bool _2029;
                for (;;)
                {
                    _2028 = texelFetch(g_lightClassification, int((((_1627 << 5u) + (_1613 << 9u)) + (_2019 << 2u)) >> 2u)).x;
                    _2029 = _2028 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    if (_2029)
                    {
                        frontier_phi_72_pred = _2018;
                        frontier_phi_72_pred_1 = _2017;
                        frontier_phi_72_pred_2 = _2016;
                    }
                    else
                    {
                        float _2143;
                        float _2144;
                        float _2145;
                        float _2365;
                        float _2366;
                        float _2367;
                        float _2153 = _2016;
                        float _2154 = _2017;
                        float _2155 = _2018;
                        uint _2156 = _2028;
                        uint _2157;
                        uint _2167;
                        vec4 _2182;
                        float _2183;
                        vec3 _2195;
                        vec4 _2211;
                        vec4 _2226;
                        float _2272;
                        bool _2273;
                        for (;;)
                        {
                            _2167 = ((_2019 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2156));
                            _2157 = (_2156 + 4294967295u) & _2156;
                            uint _2169 = _2167 * 40u;
                            _2182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 3u)).x));
                            _2183 = _2182.w;
                            uint _2185 = (_2167 * 40u) + 8u;
                            _2195 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 2u)).x));
                            uint _2198 = (_2167 * 40u) + 16u;
                            _2211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2198 + 3u)).x));
                            uint _2213 = (_2167 * 40u) + 20u;
                            _2226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2213 + 3u)).x));
                            uint _2228 = (_2167 * 40u) + 24u;
                            vec4 _2241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2228 + 3u)).x));
                            uint _2247 = (_2167 * 40u) + 28u;
                            vec4 _2260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 3u)).x));
                            _2272 = fma(_1128, _2260.z, fma(_1127, _2260.y, _2260.x * _1126)) + _2260.w;
                            _2273 = !((fma(_1128, _2241.z, fma(_1127, _2241.y, _2241.x * _1126)) + _2241.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            if (_2273)
                            {
                                float _2307 = _2182.x - _1126;
                                float _2308 = _2182.y - _1127;
                                float _2309 = _2182.z - _1128;
                                float _2310 = dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309));
                                float _2313 = inversesqrt(_2310);
                                float _2320 = 1.0 - (_2310 / (_2183 * _2183));
                                float _2805 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
                                float _2322 = sqrt(_2310) * uintBitsToFloat(uvec4(_2276, _2277, _2278, texelFetch(g_SpotLightRenderingBuffer, int(((_2167 * 40u) + 4u) + 3u)).x)).w;
                                float _2324 = 1.39999997615814208984375 / (_2322 + 1.39999997615814208984375);
                                float _2325 = _2324 * _2324;
                                float _2328 = (fma(_1128, _2211.z, fma(_1127, _2211.y, _2211.x * _1126)) + _2211.w) / _2272;
                                float _2329 = (fma(_1128, _2226.z, fma(_1127, _2226.y, _2226.x * _1126)) + _2226.w) / _2272;
                                float _2333 = 1.0 - dot(vec2(_2328, _2329), vec2(_2328, _2329));
                                float _2816 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
                                float _2341 = dot(vec3(0.0), vec3((-0.0) - (_1126 * _1890), (-0.0) - (_1127 * _1890), (-0.0) - (_1128 * _1890)));
                                float _2827 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
                                float _2349 = ((1.0 - _2325) * dot(vec3(0.0), vec3(_2313 * _2307, _2313 * _2308, _2313 * _2309))) + _2325;
                                float _2838 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
                                float _2350 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
                                float _2354 = (0.5 / (((isnan(1.0) ? _2827 : (isnan(_2827) ? 1.0 : min(_2827, 1.0))) + 9.9999999392252902907785028219223e-09) + _2350)) * _2350;
                                float _2849 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
                                float _2361 = ((isnan(1.0) ? _2816 : (isnan(_2816) ? 1.0 : min(_2816, 1.0))) * (isnan(1.0) ? _2805 : (isnan(_2805) ? 1.0 : min(_2805, 1.0)))) * (((isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0))) * 3.1415927410125732421875) / (((_2322 * _2322) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2361 * _2195.z;
                                frontier_phi_78_pred_1 = _2361 * _2195.y;
                                frontier_phi_78_pred_2 = _2361 * _2195.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                            }
                            _2367 = frontier_phi_78_pred;
                            _2366 = frontier_phi_78_pred_1;
                            _2365 = frontier_phi_78_pred_2;
                            _2143 = _2365 + _2153;
                            _2144 = _2366 + _2154;
                            _2145 = _2367 + _2155;
                            if (_2157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2153 = _2143;
                                _2154 = _2144;
                                _2155 = _2145;
                                _2156 = _2157;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2145;
                        frontier_phi_72_pred_1 = _2144;
                        frontier_phi_72_pred_2 = _2143;
                    }
                    _1879 = frontier_phi_72_pred;
                    _1877 = frontier_phi_72_pred_1;
                    _1875 = frontier_phi_72_pred_2;
                    uint _2020 = _2019 + 1u;
                    if (_2020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2016 = _1875;
                        _2017 = _1877;
                        _2018 = _1879;
                        _2019 = _2020;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _1879;
                frontier_phi_59_60_ladder_1 = _1877;
                frontier_phi_59_60_ladder_2 = _1875;
            }
            else
            {
                frontier_phi_59_60_ladder = _1745;
                frontier_phi_59_60_ladder_1 = _1743;
                frontier_phi_59_60_ladder_2 = _1741;
            }
            _1874 = frontier_phi_59_60_ladder_2;
            _1876 = frontier_phi_59_60_ladder_1;
            _1878 = frontier_phi_59_60_ladder;
        }
        float _1883 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _1647 = ((_1874 * 0.039999999105930328369140625) * _1883) + _1481;
        _1649 = ((_1876 * 0.039999999105930328369140625) * _1883) + _1482;
        _1651 = ((_1878 * 0.039999999105930328369140625) * _1883) + _1483;
    }
    else
    {
        _1647 = _1481;
        _1649 = _1482;
        _1651 = _1483;
    }
    uint _1658 = (_1348 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1673 = ((cbMtdParam._m0[9u].x * _402.x) * cbInstanceData._m0[_1658].x) + ((_1647 + ((isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    float _1674 = ((cbMtdParam._m0[9u].y * _402.y) * cbInstanceData._m0[_1658].y) + ((_1649 + ((isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    float _1675 = ((cbMtdParam._m0[9u].z * _402.z) * cbInstanceData._m0[_1658].z) + ((_1651 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    uint _1679 = _1348 + 6u;
    float _1687 = _443 / cbSceneParam._m0[86u].x;
    float _1688 = _444 / cbSceneParam._m0[86u].y;
    vec4 _1702 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1687, _1688, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1704 = _1702.x;
    float _1705 = _1702.y;
    float _1706 = _1702.z;
    float _1707 = _1702.w;
    float _1797;
    float _1799;
    float _1801;
    float _1803;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _1760 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _1761 = _1760 / _430;
        float _1772 = _1761 * _254;
        float _1773 = _255 * _1761;
        float _1774 = (-0.0) - _1773;
        float _1775 = _1761 * _256;
        float _1777 = (cbSceneParam._m0[77u].w * _1774) / _1760;
        float _1778 = _1777 + cbSceneParam._m0[79u].w;
        float _1779 = cbSceneParam._m0[79u].w - _1773;
        float _1785 = sqrt(((_1772 * _1772) + (_1773 * _1773)) + (_1775 * _1775));
        float _1788 = (1.0 - (cbSceneParam._m0[77u].w / _1760)) * _1785;
        float _1793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1978;
        if (abs((_1774 - _1777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1978 = ((((_1778 > 0.0) ? exp2(_1793 * _1778) : (2.0 - exp2(_1795 * _1778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1788;
        }
        else
        {
            float _1920 = 1.0 / cbSceneParam._m0[80u].x;
            float _1921 = isnan(_1779) ? _1778 : (isnan(_1778) ? _1779 : max(_1778, _1779));
            float _1922 = isnan(_1779) ? _1778 : (isnan(_1778) ? _1779 : min(_1778, _1779));
            float _1931 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : min(_1921, 0.0));
            float _1932 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : min(_1922, 0.0));
            _1978 = ((abs(_1785 / _1774) * cbSceneParam._m0[80u].y) * ((((_1931 - _1932) * 2.0) - ((exp2(_1793 * (isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)))) - exp2(_1793 * (isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))))) * _1920)) - ((exp2(_1795 * _1931) - exp2(_1795 * _1932)) * _1920))) + (_1788 * cbSceneParam._m0[80u].z);
        }
        vec4 _1980 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1687, _1688, 1.0), 0.0);
        float _1989 = exp2((_1978 * (-1.44269502162933349609375)) * (1.0 - _1980.w));
        float _1990 = log2(_1989);
        float _2006 = log2(_1707);
        _1797 = (exp2(_2006 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1990 * cbSceneParam._m0[78u].x)) * _1980.x) / cbSceneParam._m0[78u].x)) + _1704;
        _1799 = (exp2(_2006 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1990 * cbSceneParam._m0[78u].y)) * _1980.y) / cbSceneParam._m0[78u].y)) + _1705;
        _1801 = (exp2(_2006 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1990 * cbSceneParam._m0[78u].z)) * _1980.z) / cbSceneParam._m0[78u].z)) + _1706;
        _1803 = _1989 * _1707;
    }
    else
    {
        _1797 = _1704;
        _1799 = _1705;
        _1801 = _1706;
        _1803 = _1707;
    }
    float _1815 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1816 = _1815 == 3.0;
    float _1818 = log2(_1803);
    float _1825 = exp2(_1818 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    float _1826 = exp2(_1818 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
    float _1827 = exp2(_1818 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    float _1836 = (_1815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1836 * (_1816 ? _1825 : (_1825 + (cbSceneParam._m0[72u].w * _1797)));
    SV_Target.y = _1836 * (_1816 ? _1826 : (_1826 + (cbSceneParam._m0[72u].w * _1799)));
    SV_Target.z = _1836 * (_1816 ? _1827 : (_1827 + (cbSceneParam._m0[72u].w * _1801)));
    SV_Target.w = cbInstanceData._m0[_1679].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1679].w;
}


