#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _274 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _277 = _274.x;
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _277) + cbMtdParam._m0[12u].x) * _295.x;
    float _314 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _277) + cbMtdParam._m0[12u].y) * _295.y;
    float _316 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _277) + cbMtdParam._m0[12u].z) * _295.z;
    vec4 _350 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _365 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _372 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _384 = cbMtdParam._m0[22u].z + _259;
    float _385 = cbMtdParam._m0[22u].w + _260;
    float _386 = cbMtdParam._m0[23u].x + _261;
    float _400 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_365 * _188, _365 * _189, _365 * _190));
    float _401 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_372 * _202, _372 * _203, _372 * _204));
    float _402 = (-0.0) - dot(vec3(_384, _385, _386), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _406 * _402;
    float _412 = ((cbMtdParam._m0[19u].y * _400) * _406) + (((_350.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _413 = ((cbMtdParam._m0[19u].z * _401) * _406) + (((_350.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _416 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _417 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _435;
    float _438;
    float _440;
    if (_412 > 0.0)
    {
        float _421 = (1.0 - _416) / _412;
        _435 = _421;
        _438 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_421 * _407)) * 0.16666667163372039794921875;
        _440 = (fract((_421 * _413) + _417) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_412 < 0.0)
        {
            float _436 = ((-0.0) - _416) / _412;
            frontier_phi_3_2_ladder = (fract((_436 * _413) + _417) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _436;
            frontier_phi_3_2_ladder_2 = (fract(_436 * _407) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _437;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _435 = frontier_phi_3_2_ladder_1;
        _438 = frontier_phi_3_2_ladder_2;
        _440 = frontier_phi_3_2_ladder;
    }
    float _466;
    float _468;
    float _470;
    if (_413 > 0.0)
    {
        float _453 = (1.0 - _417) / _413;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_453 < _435)
        {
            frontier_phi_8_5_ladder = (fract((_453 * _412) + _416) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _453;
            frontier_phi_8_5_ladder_2 = (fract(_453 * _407) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _438;
            frontier_phi_8_5_ladder_1 = _435;
            frontier_phi_8_5_ladder_2 = _440;
        }
        _466 = frontier_phi_8_5_ladder_1;
        _468 = frontier_phi_8_5_ladder;
        _470 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_413 < 0.0)
        {
            float _467 = ((-0.0) - _417) / _413;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_467 < _435)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_467 * _412) + _416) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _467;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_467 * _407) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _438;
                frontier_phi_8_6_ladder_9_ladder_1 = _435;
                frontier_phi_8_6_ladder_9_ladder_2 = _440;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _438;
            frontier_phi_8_6_ladder_1 = _435;
            frontier_phi_8_6_ladder_2 = _440;
        }
        _466 = frontier_phi_8_6_ladder_1;
        _468 = frontier_phi_8_6_ladder;
        _470 = frontier_phi_8_6_ladder_2;
    }
    float _474 = (_407 > 0.0) ? (cbMtdParam._m0[16u].y / _407) : 5000.0;
    float _487;
    float _488;
    if (_474 < _466)
    {
        _487 = ((_416 + cbMtdParam._m0[16u].z) + (_474 * _412)) * 0.16666667163372039794921875;
        _488 = (((_474 * _413) + _417) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _487 = _468;
        _488 = _470;
    }
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_487, _488));
    float _501 = _277 * 0.1500000059604644775390625;
    float _509 = (_501 * (((cbMtdParam._m0[13u].x * _277) * _490.x) - _312)) + _312;
    float _510 = (_501 * (((cbMtdParam._m0[13u].y * _277) * _490.y) - _314)) + _314;
    float _511 = (_501 * (((cbMtdParam._m0[13u].z * _277) * _490.z) - _316)) + _316;
    vec4 _523 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _527 = _523.z;
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3104 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))));
    float _540 = fma(_537, _195, fma(_531, _202, _530 * _188));
    float _543 = fma(_537, _196, fma(_531, _203, _530 * _189));
    float _546 = fma(_537, _197, fma(_531, _204, _530 * _190));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3115 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _554 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
    float _3126 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3137 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3148 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _578 = _259 * _577;
    float _579 = _260 * _577;
    float _580 = _261 * _577;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _608 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _611 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _614 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _627 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = (_627 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3159 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
    float _3170 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    float _3181 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _652 = _649.x * TEXCOORD.z;
    float _653 = dot(vec3(_551, _552, _553), vec3(_578, _579, _580));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _551) - _578;
    float _661 = (_656 * _552) - _579;
    float _662 = (_656 * _553) - _580;
    float _666 = abs(dot(vec3(_578, _579, _580), vec3(_551, _552, _553)));
    float _3192 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_554);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713));
        float _758 = fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713));
        float _762 = fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713));
        float _786 = _713 + _551;
        float _787 = _717 + _552;
        float _788 = _721 + _553;
        float _798 = fma(_788, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786)) - _754;
        float _799 = fma(_788, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786)) - _758;
        float _800 = fma(_788, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786)) - _762;
        float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
        float _817 = ((_804 * _798) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_804 * _799) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_804 * _800) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_817, _818, _819), 0.0);
        float _856 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_822.x + (-0.5));
        float _858 = _856 * (_822.y + (-0.5));
        float _859 = _856 * (_822.z + (-0.5));
        float _866 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_829.x + (-0.5));
        float _868 = _866 * (_829.y + (-0.5));
        float _869 = _866 * (_829.z + (-0.5));
        float _876 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_836.x + (-0.5));
        float _878 = _876 * (_836.y + (-0.5));
        float _879 = _876 * (_836.z + (-0.5));
        float _886 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_843.x + (-0.5));
        float _888 = _886 * (_843.y + (-0.5));
        float _889 = _886 * (_843.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _910 = (dot(vec3(_551, _552, _553), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _920 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3240 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_922 + 1.0))) + _927) * _890;
        float _937 = _858 * 0.5;
        float _938 = _868 * 0.5;
        float _939 = _878 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_551, _552, _553), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3273 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_964 + 1.0))) + _969) * _891;
        float _979 = _859 * 0.5;
        float _980 = _869 * 0.5;
        float _981 = _879 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_551, _552, _553), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3306 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1006 + 1.0))) + _1011) * _892;
        _1028 = _859;
        _1029 = _858;
        _1030 = _857;
        _1031 = _869;
        _1032 = _868;
        _1033 = _867;
        _1034 = _879;
        _1035 = _878;
        _1036 = _877;
        _1037 = _892;
        _1038 = _891;
        _1039 = _890;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _437;
        _1029 = _437;
        _1030 = _437;
        _1031 = _437;
        _1032 = _437;
        _1033 = _437;
        _1034 = _437;
        _1035 = _437;
        _1036 = _437;
        _1037 = _437;
        _1038 = _437;
        _1039 = _437;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713));
        float _1072 = fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713));
        float _1076 = fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713));
        float _1099 = _713 + _551;
        float _1100 = _717 + _552;
        float _1101 = _721 + _553;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_551, _552, _553), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3369 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_551, _552, _553), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3402 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_551, _552, _553), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3435 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _437;
        _1338 = _437;
        _1339 = _437;
        _1340 = _437;
        _1341 = _437;
        _1342 = _437;
        _1343 = _437;
        _1344 = _437;
        _1345 = _437;
        _1346 = _437;
        _1347 = _437;
        _1348 = _437;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1041)) + _1041;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _660 * 0.5;
    float _1406 = _661 * 0.5;
    float _1407 = _662 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1537 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1540 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1568 = frontier_phi_26_24_ladder;
        }
        float _1915;
        if (_1537 > 0.0)
        {
            _1915 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1915 = frontier_phi_35_31_ladder;
        }
        float _2215;
        if (_1540 > 0.0)
        {
            _2215 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2215 = frontier_phi_49_42_ladder;
        }
        float _2217 = isnan(_1915) ? _1568 : (isnan(_1568) ? _1915 : min(_1568, _1915));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1534) + _1523;
        float _2223 = (_2218 * _1537) + _1527;
        float _2224 = (_2218 * _1540) + _1531;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_25_49_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_25_49_ladder_2;
        _1558 = frontier_phi_25_49_ladder_1;
        _1560 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1474);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1633 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1636 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1920;
        if (_1630 > 0.0)
        {
            _1920 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1920 = frontier_phi_37_33_ladder;
        }
        float _2241;
        if (_1633 > 0.0)
        {
            _2241 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2241 = frontier_phi_51_44_ladder;
        }
        float _2410;
        if (_1636 > 0.0)
        {
            _2410 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2410 = frontier_phi_65_60_ladder;
        }
        float _2412 = isnan(_2241) ? _1920 : (isnan(_1920) ? _2241 : min(_1920, _2241));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1630) + _1619;
        float _2418 = (_2413 * _1633) + _1623;
        float _2419 = (_2413 * _1636) + _1627;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_34_65_ladder = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2652.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2652.z * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_34_65_ladder_1;
        _1657 = frontier_phi_34_65_ladder;
        _1659 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1565);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1671 = ((((1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_681 * _668)) * _652;
    float _1672 = _1671 * ((cbModelParam._m0[1u].w * (_1655 - _1556)) + _1556);
    float _1673 = _1671 * ((cbModelParam._m0[1u].w * (_1657 - _1558)) + _1558);
    float _1674 = _1671 * ((cbModelParam._m0[1u].w * (_1659 - _1560)) + _1560);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    uvec4 _1693 = floatBitsToUint(cbInstanceData._m0[_627 + 5u]);
    uint _1695 = _1693.x * 14u;
    uint _1696 = _1695 + 13u;
    float _1701 = _652 + (-1.0);
    float _1704 = (cbLight._m0[_1696].x * _1701) + 1.0;
    float _1705 = (cbLight._m0[_1696].y * _1701) + 1.0;
    uint _1706 = _1695 + 5u;
    float _1712 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1716 = _1695 + 4u;
    float _1722 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1726 = _1695 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_551, _552, _553));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_551, _552, _553));
    float _3571 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _3582 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1706].x * _1712) * _1747) + ((cbLight._m0[_1716].x * _1722) * _1745);
    float _1755 = ((_1712 * cbLight._m0[_1706].y) * _1747) + ((_1722 * cbLight._m0[_1716].y) * _1745);
    float _1756 = ((_1712 * cbLight._m0[_1706].z) * _1747) + ((_1722 * cbLight._m0[_1716].z) * _1745);
    uint _1758 = _1695 + 8u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _554) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1695].x + _578;
    float _1774 = cbLight._m0[_1695].y + _579;
    float _1775 = cbLight._m0[_1695].z + _580;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1695].xyz));
    float _3593 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _1787 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _1788 = dot(vec3(_551, _552, _553), vec3(_1780, _1781, _1782));
    float _3615 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1780, _1781, _1782));
    float _3626 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1772 * _1772;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1811 = (exp2(log2(1.0 - (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1812 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1787 * ((_1786 * _1812) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _1812) + _1772) * _1786))) * _1786;
    float _3637 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    uint _1836 = _1695 + 9u;
    float _1847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _554) * 0.949999988079071044921875);
    float _1848 = _1847 * _1847;
    float _1849 = cbLight._m0[_1726].x + _578;
    float _1850 = cbLight._m0[_1726].y + _579;
    float _1851 = cbLight._m0[_1726].z + _580;
    float _1855 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
    float _1856 = _1855 * _1849;
    float _1857 = _1855 * _1850;
    float _1858 = _1855 * _1851;
    float _1859 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1726].xyz));
    float _3648 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _1863 = dot(vec3(_551, _552, _553), vec3(_1856, _1857, _1858));
    float _3659 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _1867 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1856, _1857, _1858));
    float _3670 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1871 = _1848 * _1848;
    float _1875 = ((_1866 * _1866) * (_1871 + (-1.0))) + 1.0;
    float _1884 = (exp2(log2(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1885 = 1.0 - _1848;
    float _1895 = (0.5 / (((_1787 * ((_1862 * _1885) + _1848)) + 9.9999999392252902907785028219223e-09) + (((_1787 * _1885) + _1848) * _1862))) * _1862;
    float _3681 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1871 / ((_1875 * _1875) * 3.141590118408203125));
    float _1907 = (((_1884 * cbLight._m0[_1836].x) * _1897) * _1712) + (((_1811 * cbLight._m0[_1758].x) * _1825) * _1722);
    float _1908 = (((_1884 * cbLight._m0[_1836].y) * _1897) * _1712) + (((_1811 * cbLight._m0[_1758].y) * _1825) * _1722);
    float _1909 = (((_1884 * cbLight._m0[_1836].z) * _1897) * _1712) + (((_1811 * cbLight._m0[_1758].z) * _1825) * _1722);
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    if (_1693.y == 0u)
    {
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1964;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1964;
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1964;
        uvec4 _1979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1980 = _1979.x;
        uint _1991 = uint((float(_1979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _1980))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _1980)));
        float _2001 = (log2(_1967 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2002 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        uint _2005 = uint(isnan(14.0) ? _2002 : (isnan(_2002) ? 14.0 : min(_2002, 14.0)));
        uvec4 _2010 = texelFetch(g_lightClusterGridBuffer, int(((_2005 << 2u) + (_1991 << 6u)) >> 2u));
        uint _2011 = _2010.x;
        uint _2012 = _1979.z;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        if (((((1u << ((_2012 >> 4u) & 15u)) + 4294967295u) & _2011) == 0u) || ((_2012 & 240u) == 0u))
        {
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
        }
        else
        {
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            uint _2284 = 0u;
            uint _2293;
            bool _2294;
            for (;;)
            {
                _2293 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2284 << 2u)) >> 2u)).x;
                _2294 = _2293 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2294)
                {
                    frontier_phi_62_pred = _2279;
                    frontier_phi_62_pred_1 = _2278;
                    frontier_phi_62_pred_2 = _2280;
                    frontier_phi_62_pred_3 = _2283;
                    frontier_phi_62_pred_4 = _2282;
                    frontier_phi_62_pred_5 = _2281;
                }
                else
                {
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    uint _2459;
                    _2453 = _2278;
                    _2454 = _2279;
                    _2455 = _2280;
                    _2456 = _2281;
                    _2457 = _2282;
                    _2458 = _2283;
                    _2459 = _2293;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    for (;;)
                    {
                        uint _2463 = uint(findLSB(_2459)) + (_2284 << 5u);
                        uint _2460 = (_2459 + 4294967295u) & _2459;
                        uint _2465 = _2463 * 48u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 3u)).x));
                        uint _2485 = (_2463 * 48u) + 4u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        uint _2504 = (_2463 * 48u) + 8u;
                        vec3 _2515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x));
                        float _2519 = _2479.x - _1965;
                        float _2520 = _2479.y - _1966;
                        float _2521 = _2479.z - _1967;
                        float _2522 = dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521));
                        float _2525 = inversesqrt(_2522);
                        float _2526 = _2525 * _2519;
                        float _2527 = _2525 * _2520;
                        float _2528 = _2525 * _2521;
                        float _2529 = dot(vec3(_608, _611, _614), vec3(_2526, _2527, _2528));
                        float _2534 = 1.0 - (_2522 * _2479.w);
                        float _3702 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _2535 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2536 = sqrt(_2522) * _2498.w;
                        float _2539 = 1.39999997615814208984375 / (_2536 + 1.39999997615814208984375);
                        float _2540 = _2539 * _2539;
                        float _2543 = ((1.0 - _2540) * _2529) + _2540;
                        float _2546 = _2536 * _2536;
                        float _2550 = ((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2535) / ((_2546 * 0.699999988079071044921875) + 1.0);
                        float _2554 = (-0.0) - _1965;
                        float _2555 = (-0.0) - _1966;
                        float _2556 = (-0.0) - _1967;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2561 = _2560 * _2554;
                        float _2562 = _2560 * _2555;
                        float _2563 = _2560 * _2556;
                        float _2571 = exp2(log2(1.0 / ((_2546 * 3.5) + 5.0)) * 0.25);
                        float _2572 = 1.0 - _668;
                        float _2579 = sqrt(1.0 - ((1.0 - (_2572 * _2572)) * (1.0 - (_2571 * _2571))));
                        float _2580 = _2579 * _2579;
                        float _2581 = _2580 * _2580;
                        float _2582 = _2561 + _2526;
                        float _2583 = _2562 + _2527;
                        float _2584 = _2563 + _2528;
                        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
                        float _2592 = dot(vec3(_608, _611, _614), vec3(_2561, _2562, _2563));
                        float _3718 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _2595 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
                        float _2596 = dot(vec3(_608, _611, _614), vec3(_2588 * _2582, _2588 * _2583, _2588 * _2584));
                        float _3729 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2599 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                        float _2603 = ((_2599 * _2599) * (_2581 + (-1.0))) + 1.0;
                        float _2604 = _2539 * _2580;
                        float _2605 = _2604 * _2604;
                        float _2608 = ((1.0 - _2605) * _2529) + _2605;
                        float _3740 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2609 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                        float _2610 = 1.0 - _2580;
                        float _2620 = (0.5 / (((_2609 * ((_2595 * _2610) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2610) + _2580) * _2595))) * _2609;
                        float _3751 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2631 = (((_2581 * 3.1415927410125732421875) * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) / ((_2603 * _2603) * ((_2546 * 2.1991131305694580078125) + 3.141590118408203125))) * _2535;
                        _2362 = (_2550 * _2498.x) + _2456;
                        _2363 = (_2550 * _2498.y) + _2457;
                        _2364 = (_2550 * _2498.z) + _2458;
                        _2359 = (_2631 * _2515.x) + _2453;
                        _2360 = (_2631 * _2515.y) + _2454;
                        _2361 = (_2631 * _2515.z) + _2455;
                        if (_2460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2453 = _2359;
                            _2454 = _2360;
                            _2455 = _2361;
                            _2456 = _2362;
                            _2457 = _2363;
                            _2458 = _2364;
                            _2459 = _2460;
                        }
                    }
                    frontier_phi_62_pred = _2360;
                    frontier_phi_62_pred_1 = _2359;
                    frontier_phi_62_pred_2 = _2361;
                    frontier_phi_62_pred_3 = _2364;
                    frontier_phi_62_pred_4 = _2363;
                    frontier_phi_62_pred_5 = _2362;
                }
                _2105 = frontier_phi_62_pred;
                _2103 = frontier_phi_62_pred_1;
                _2107 = frontier_phi_62_pred_2;
                _2113 = frontier_phi_62_pred_3;
                _2111 = frontier_phi_62_pred_4;
                _2109 = frontier_phi_62_pred_5;
                uint _2285 = _2284 + 1u;
                if (_2285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2278 = _2103;
                    _2279 = _2105;
                    _2280 = _2107;
                    _2281 = _2109;
                    _2282 = _2111;
                    _2283 = _2113;
                    _2284 = _2285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
        }
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.z;
        uint _2119 = (_2117 >> 8u) & 15u;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        float _2254;
        float _2256;
        if (((4294967295u << _2119) & _2011) == 0u)
        {
            _2246 = _2102;
            _2248 = _2104;
            _2250 = _2106;
            _2252 = _2108;
            _2254 = _2110;
            _2256 = _2112;
        }
        else
        {
            float _2271 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
            float _2272 = _2271 * _1965;
            float _2273 = _2271 * _1966;
            float _2274 = _2271 * _1967;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2119 < ((_2117 >> 12u) & 15u))
            {
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2255;
                float _2257;
                float _2436 = _2102;
                float _2437 = _2104;
                float _2438 = _2106;
                float _2439 = _2108;
                float _2440 = _2110;
                float _2441 = _2112;
                uint _2442 = _2119;
                uint _2451;
                bool _2452;
                for (;;)
                {
                    _2451 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                    _2452 = _2451 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2452)
                    {
                        frontier_phi_71_pred = _2437;
                        frontier_phi_71_pred_1 = _2436;
                        frontier_phi_71_pred_2 = _2441;
                        frontier_phi_71_pred_3 = _2440;
                        frontier_phi_71_pred_4 = _2439;
                        frontier_phi_71_pred_5 = _2438;
                    }
                    else
                    {
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2661;
                        float _2662;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2670 = _2436;
                        float _2671 = _2437;
                        float _2672 = _2438;
                        float _2673 = _2439;
                        float _2674 = _2440;
                        float _2675 = _2441;
                        uint _2676 = _2451;
                        uint _2677;
                        vec4 _2702;
                        float _2703;
                        vec4 _2718;
                        vec3 _2730;
                        vec4 _2745;
                        vec4 _2760;
                        float _2806;
                        bool _2807;
                        for (;;)
                        {
                            uint _2687 = ((_2442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2676));
                            _2677 = (_2676 + 4294967295u) & _2676;
                            uint _2689 = _2687 * 40u;
                            _2702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 3u)).x));
                            _2703 = _2702.w;
                            uint _2705 = (_2687 * 40u) + 4u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2720 = (_2687 * 40u) + 8u;
                            _2730 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x));
                            uint _2732 = (_2687 * 40u) + 16u;
                            _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            uint _2747 = (_2687 * 40u) + 20u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2687 * 40u) + 24u;
                            vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2781 = (_2687 * 40u) + 28u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2806 = fma(_1967, _2794.z, fma(_1966, _2794.y, _2794.x * _1965)) + _2794.w;
                            _2807 = !((fma(_1967, _2775.z, fma(_1966, _2775.y, _2775.x * _1965)) + _2775.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2807)
                            {
                                float _2834 = _2702.x - _1965;
                                float _2835 = _2702.y - _1966;
                                float _2836 = _2702.z - _1967;
                                float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                                float _2840 = inversesqrt(_2837);
                                float _2841 = _2840 * _2834;
                                float _2842 = _2840 * _2835;
                                float _2843 = _2840 * _2836;
                                float _2847 = 1.0 - (_2837 / (_2703 * _2703));
                                float _3762 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2848 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2852 = sqrt(_2837) * _2718.w;
                                float _2854 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                                float _2855 = _2854 * _2854;
                                float _2858 = ((1.0 - _2855) * dot(vec3(_2841, _2842, _2843), vec3(_608, _611, _614))) + _2855;
                                float _2861 = _2852 * _2852;
                                float _2865 = (fma(_1967, _2745.z, fma(_1966, _2745.y, _2745.x * _1965)) + _2745.w) / _2806;
                                float _2866 = (fma(_1967, _2760.z, fma(_1966, _2760.y, _2760.x * _1965)) + _2760.w) / _2806;
                                float _2870 = 1.0 - dot(vec2(_2865, _2866), vec2(_2865, _2866));
                                float _3778 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2871 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                                float _2872 = _2871 * (((isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))) * _2848) / ((_2861 * 0.699999988079071044921875) + 1.0));
                                float _2884 = exp2(log2(1.0 / ((_2861 * 3.5) + 5.0)) * 0.25);
                                float _2885 = 1.0 - _668;
                                float _2892 = sqrt(1.0 - ((1.0 - (_2885 * _2885)) * (1.0 - (_2884 * _2884))));
                                float _2893 = _2892 * _2892;
                                float _2894 = _2893 * _2893;
                                float _2895 = _2841 - _2272;
                                float _2896 = _2842 - _2273;
                                float _2897 = _2843 - _2274;
                                float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                                float _2905 = dot(vec3(_608, _611, _614), vec3((-0.0) - _2272, (-0.0) - _2273, (-0.0) - _2274));
                                float _3789 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2908 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2909 = dot(vec3(_608, _611, _614), vec3(_2901 * _2895, _2901 * _2896, _2901 * _2897));
                                float _3800 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2912 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                                float _2916 = ((_2912 * _2912) * (_2894 + (-1.0))) + 1.0;
                                float _2917 = _2854 * _2893;
                                float _2918 = _2917 * _2917;
                                float _2924 = ((1.0 - _2918) * dot(vec3(_608, _611, _614), vec3(_2841, _2842, _2843))) + _2918;
                                float _3811 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
                                float _2926 = 1.0 - _2893;
                                float _2936 = (0.5 / (((_2925 * ((_2908 * _2926) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2893) * _2908))) * _2925;
                                float _3822 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2946 = (_2871 * _2848) * (((_2894 * 3.1415927410125732421875) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) / ((_2916 * _2916) * ((_2861 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2946 * _2730.y;
                                frontier_phi_77_pred_1 = _2946 * _2730.x;
                                frontier_phi_77_pred_2 = _2872 * _2718.z;
                                frontier_phi_77_pred_3 = _2872 * _2718.y;
                                frontier_phi_77_pred_4 = _2872 * _2718.x;
                                frontier_phi_77_pred_5 = _2946 * _2730.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2951 = frontier_phi_77_pred;
                            _2950 = frontier_phi_77_pred_1;
                            _2955 = frontier_phi_77_pred_2;
                            _2954 = frontier_phi_77_pred_3;
                            _2953 = frontier_phi_77_pred_4;
                            _2952 = frontier_phi_77_pred_5;
                            _2660 = _2953 + _2673;
                            _2661 = _2954 + _2674;
                            _2662 = _2955 + _2675;
                            _2657 = _2950 + _2670;
                            _2658 = _2951 + _2671;
                            _2659 = _2952 + _2672;
                            if (_2677 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2677;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2658;
                        frontier_phi_71_pred_1 = _2657;
                        frontier_phi_71_pred_2 = _2662;
                        frontier_phi_71_pred_3 = _2661;
                        frontier_phi_71_pred_4 = _2660;
                        frontier_phi_71_pred_5 = _2659;
                    }
                    _2249 = frontier_phi_71_pred;
                    _2247 = frontier_phi_71_pred_1;
                    _2257 = frontier_phi_71_pred_2;
                    _2255 = frontier_phi_71_pred_3;
                    _2253 = frontier_phi_71_pred_4;
                    _2251 = frontier_phi_71_pred_5;
                    uint _2443 = _2442 + 1u;
                    if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2436 = _2247;
                        _2437 = _2249;
                        _2438 = _2251;
                        _2439 = _2253;
                        _2440 = _2255;
                        _2441 = _2257;
                        _2442 = _2443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2257;
                frontier_phi_53_54_ladder_1 = _2253;
                frontier_phi_53_54_ladder_2 = _2251;
                frontier_phi_53_54_ladder_3 = _2249;
                frontier_phi_53_54_ladder_4 = _2247;
                frontier_phi_53_54_ladder_5 = _2255;
            }
            else
            {
                frontier_phi_53_54_ladder = _2112;
                frontier_phi_53_54_ladder_1 = _2108;
                frontier_phi_53_54_ladder_2 = _2106;
                frontier_phi_53_54_ladder_3 = _2104;
                frontier_phi_53_54_ladder_4 = _2102;
                frontier_phi_53_54_ladder_5 = _2110;
            }
            _2246 = frontier_phi_53_54_ladder_4;
            _2248 = frontier_phi_53_54_ladder_3;
            _2250 = frontier_phi_53_54_ladder_2;
            _2252 = frontier_phi_53_54_ladder_1;
            _2254 = frontier_phi_53_54_ladder_5;
            _2256 = frontier_phi_53_54_ladder;
        }
        float _2261 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2024 = (_2261 * _2252) + _1754;
        _2026 = (_2261 * _2254) + _1755;
        _2028 = (_2261 * _2256) + _1756;
        _2030 = ((_2246 * 0.039999999105930328369140625) * _2261) + _1907;
        _2032 = ((_2248 * 0.039999999105930328369140625) * _2261) + _1908;
        _2034 = ((_2250 * 0.039999999105930328369140625) * _2261) + _1909;
    }
    else
    {
        _2024 = _1754;
        _2026 = _1755;
        _2028 = _1756;
        _2030 = _1907;
        _2032 = _1908;
        _2034 = _1909;
    }
    float _3838 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3849 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3860 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2051 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2024 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _652))) + ((_2030 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2052 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_2026 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _652))) + ((_2032 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2053 = ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_2028 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _652))) + ((_2034 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    uint _2057 = _627 + 6u;
    float _2065 = _586 / cbSceneParam._m0[86u].x;
    float _2066 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2082 = _2080.x;
    float _2083 = _2080.y;
    float _2084 = _2080.z;
    float _2085 = _2080.w;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2127 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2128 = _2127 / _573;
        float _2139 = _2128 * _259;
        float _2140 = _260 * _2128;
        float _2141 = (-0.0) - _2140;
        float _2142 = _2128 * _261;
        float _2144 = (cbSceneParam._m0[77u].w * _2141) / _2127;
        float _2145 = _2144 + cbSceneParam._m0[79u].w;
        float _2146 = cbSceneParam._m0[79u].w - _2140;
        float _2152 = sqrt(((_2139 * _2139) + (_2140 * _2140)) + (_2142 * _2142));
        float _2155 = (1.0 - (cbSceneParam._m0[77u].w / _2127)) * _2152;
        float _2161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2372;
        if (abs((_2141 - _2144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2372 = ((((_2145 > 0.0) ? exp2(_2161 * _2145) : (2.0 - exp2(_2163 * _2145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2155;
        }
        else
        {
            float _2307 = 1.0 / cbSceneParam._m0[80u].x;
            float _2308 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : max(_2145, _2146));
            float _2309 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : min(_2145, _2146));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            _2372 = ((abs(_2152 / _2141) * cbSceneParam._m0[80u].y) * ((((_2318 - _2319) * 2.0) - ((exp2(_2161 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)))) - exp2(_2161 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))))) * _2307)) - ((exp2(_2163 * _2318) - exp2(_2163 * _2319)) * _2307))) + (_2155 * cbSceneParam._m0[80u].z);
        }
        vec4 _2374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, 1.0), 0.0);
        float _2383 = exp2((_2372 * (-1.44269502162933349609375)) * (1.0 - _2374.w));
        float _2384 = log2(_2383);
        float _2400 = log2(_2085);
        _2165 = (exp2(_2400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].x)) * _2374.x) / cbSceneParam._m0[78u].x)) + _2082;
        _2167 = (exp2(_2400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].y)) * _2374.y) / cbSceneParam._m0[78u].y)) + _2083;
        _2169 = (exp2(_2400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].z)) * _2374.z) / cbSceneParam._m0[78u].z)) + _2084;
        _2171 = _2383 * _2085;
    }
    else
    {
        _2165 = _2082;
        _2167 = _2083;
        _2169 = _2084;
        _2171 = _2085;
    }
    float _2183 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2184 = _2183 == 3.0;
    float _2185 = log2(_2171);
    float _2192 = exp2(_2185 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2193 = exp2(_2185 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)));
    float _2194 = exp2(_2185 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    float _2203 = (_2183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2203 * (_2184 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2165)));
    SV_Target.y = _2203 * (_2184 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.z = _2203 * (_2184 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.w = cbInstanceData._m0[_2057].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2057].w;
}


