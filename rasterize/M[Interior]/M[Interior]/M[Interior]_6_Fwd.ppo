#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1257;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _345 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = cbMtdParam._m0[21u].w + _267;
    float _382 = cbMtdParam._m0[22u].x + _268;
    float _383 = cbMtdParam._m0[22u].y + _269;
    float _397 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_196, _197, _198));
    float _398 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_210, _211, _212));
    float _399 = (-0.0) - dot(vec3(_381, _382, _383), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _406 = _403 * _399;
    float _407 = (_403 * _397) + ((cbMtdParam._m0[19u].w * _285) * ((_345.x * 2.0) + (-1.0)));
    float _408 = (_403 * _398) + ((cbMtdParam._m0[20u].x * _285) * ((_345.y * 2.0) + (-1.0)));
    float _409 = _407 * cbMtdParam._m0[18u].z;
    float _410 = _408 * cbMtdParam._m0[18u].y;
    float _411 = fract(TEXCOORD.x);
    float _412 = fract(TEXCOORD.y);
    float _418;
    if (_409 > 0.0)
    {
        _418 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _418 = frontier_phi_3_2_ladder;
    }
    float _426;
    if (_410 > 0.0)
    {
        _426 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _426 = frontier_phi_7_6_ladder;
    }
    bool _428 = _406 > 0.0;
    float _430 = _428 ? (cbMtdParam._m0[15u].x / _406) : 5000.0;
    float _431 = isnan(_426) ? _418 : (isnan(_418) ? _426 : min(_418, _426));
    float _432 = isnan(_430) ? _431 : (isnan(_431) ? _430 : min(_431, _430));
    float _436 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _437 = _411 + (-0.5);
    float _440 = _412 + (-0.5);
    float _443 = ((_432 * _406) + _436) / _436;
    vec4 _467 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_437 + (_432 * _409)) / _443) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_440 + (_432 * _410)) / _443) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _480 = (_467.x * _285) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _285) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _285) * cbMtdParam._m0[9u].z;
    float _500 = _407 * cbMtdParam._m0[20u].z;
    float _501 = _408 * cbMtdParam._m0[20u].y;
    bool _502 = _500 > 0.0;
    float _507;
    if (_502)
    {
        _507 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _507 = frontier_phi_11_10_ladder;
    }
    bool _509 = _501 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _514 = frontier_phi_15_14_ladder;
    }
    float _517 = _428 ? (cbMtdParam._m0[16u].x / _406) : 5000.0;
    float _518 = isnan(_514) ? _507 : (isnan(_507) ? _514 : min(_507, _514));
    float _519 = isnan(_517) ? _518 : (isnan(_518) ? _517 : min(_518, _517));
    float _523 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _527 = ((_519 * _406) + _523) / _523;
    float _532 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _534 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _550 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_437 + (_519 * _500)) / _527) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_440 + (_519 * _501)) / _527) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _565;
    if (_502)
    {
        _565 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _565 = frontier_phi_19_18_ladder;
    }
    float _571;
    if (_509)
    {
        _571 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _571 = frontier_phi_23_22_ladder;
    }
    float _573 = isnan(_571) ? _565 : (isnan(_565) ? _571 : min(_565, _571));
    float _574 = isnan(_517) ? _573 : (isnan(_573) ? _517 : min(_573, _517));
    float _581 = ((_574 * _406) + _523) / _523;
    vec4 _602 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_437 + (_574 * _500)) / _581) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_440 + (_574 * _501)) / _581) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _614 = (((((cbMtdParam._m0[10u].x * _285) * _550.x) - _480) * _285) * _604) + _480;
    float _615 = (((((cbMtdParam._m0[10u].y * _285) * _550.y) - _481) * _285) * _604) + _481;
    float _616 = (((((cbMtdParam._m0[10u].z * _285) * _550.z) - _482) * _285) * _604) + _482;
    float _630 = _407 * cbMtdParam._m0[21u].x;
    float _631 = _408 * cbMtdParam._m0[20u].w;
    bool _632 = _630 > 0.0;
    float _637;
    if (_632)
    {
        _637 = (1.0 - _411) / _630;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_630 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _411) / _630;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _637 = frontier_phi_27_26_ladder;
    }
    bool _639 = _631 > 0.0;
    float _644;
    if (_639)
    {
        _644 = (1.0 - _412) / _631;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_631 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _412) / _631;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _644 = frontier_phi_31_30_ladder;
    }
    float _647 = _428 ? (cbMtdParam._m0[17u].z / _406) : 5000.0;
    float _648 = isnan(_644) ? _637 : (isnan(_637) ? _644 : min(_637, _644));
    float _649 = isnan(_647) ? _648 : (isnan(_648) ? _647 : min(_648, _647));
    float _653 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _657 = ((_649 * _406) + _653) / _653;
    float _662 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _664 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _681 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_437 + (_649 * _630)) / _657) + 0.5) + _662) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_440 + (_649 * _631)) / _657) + 0.5) + _664) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _696;
    if (_632)
    {
        _696 = (1.0 - _411) / _630;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_630 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _411) / _630;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _696 = frontier_phi_35_34_ladder;
    }
    float _702;
    if (_639)
    {
        _702 = (1.0 - _412) / _631;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_631 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _412) / _631;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _702 = frontier_phi_39_38_ladder;
    }
    float _704 = isnan(_702) ? _696 : (isnan(_696) ? _702 : min(_696, _702));
    float _705 = isnan(_647) ? _704 : (isnan(_704) ? _647 : min(_704, _647));
    float _712 = ((_705 * _406) + _653) / _653;
    vec4 _732 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_437 + (_705 * _630)) / _712) + 0.5) + _662) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_440 + (_705 * _631)) / _712) + 0.5) + _664) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _734 = _732.x;
    vec4 _758 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _762 = _758.z;
    float _765 = (_758.x * 2.0) + (-1.0);
    float _766 = (_758.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3427 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _772 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _775 = fma(_772, _203, fma(_766, _210, _765 * _196));
    float _778 = fma(_772, _204, fma(_766, _211, _765 * _197));
    float _781 = fma(_772, _205, fma(_766, _212, _765 * _198));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3438 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _789 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3460 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3471 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _812 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _813 = _267 * _812;
    float _814 = _268 * _812;
    float _815 = _269 * _812;
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _844 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _847 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _860 = uint(roundEven(NORMAL.w)) * 13u;
    uint _862 = _860 + 9u;
    uint _863 = _862 + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_863].z;
    float _3482 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _886 = _883.x * TEXCOORD.z;
    float _887 = dot(vec3(_786, _787, _788), vec3(_813, _814, _815));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _786) - _813;
    float _895 = (_890 * _787) - _814;
    float _896 = (_890 * _788) - _815;
    float _900 = abs(dot(vec3(_813, _814, _815), vec3(_786, _787, _788)));
    float _3515 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_789);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _987 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _991 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1014 = _947 + _786;
        float _1015 = _951 + _787;
        float _1016 = _955 + _788;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_786, _787, _788), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3563 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_786, _787, _788), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3596 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_786, _787, _788), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3629 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1301 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1305 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1328 = _947 + _786;
        float _1329 = _951 + _787;
        float _1330 = _955 + _788;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_786, _787, _788), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3692 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_786, _787, _788), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3725 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_786, _787, _788), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _3758 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1257;
        _1567 = _1257;
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _894 * 0.5;
    float _1635 = _895 * 0.5;
    float _1636 = _896 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1764 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1767 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1795 = frontier_phi_54_52_ladder;
        }
        float _2140;
        if (_1764 > 0.0)
        {
            _2140 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2140 = frontier_phi_63_59_ladder;
        }
        float _2456;
        if (_1767 > 0.0)
        {
            _2456 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2456 = frontier_phi_77_70_ladder;
        }
        float _2458 = isnan(_2140) ? _1795 : (isnan(_1795) ? _2140 : min(_1795, _2140));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1761) + _1750;
        float _2464 = (_2459 * _1764) + _1754;
        float _2465 = (_2459 * _1767) + _1758;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_53_77_ladder = _2591.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2591.z * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_53_77_ladder;
        _1785 = frontier_phi_53_77_ladder_1;
        _1787 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1858 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1861 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2145;
        if (_1855 > 0.0)
        {
            _2145 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2145 = frontier_phi_65_61_ladder;
        }
        float _2482;
        if (_1858 > 0.0)
        {
            _2482 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2482 = frontier_phi_79_72_ladder;
        }
        float _2651;
        if (_1861 > 0.0)
        {
            _2651 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2651 = frontier_phi_93_88_ladder;
        }
        float _2653 = isnan(_2482) ? _2145 : (isnan(_2145) ? _2482 : min(_2145, _2482));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _1855) + _1844;
        float _2659 = (_2654 * _1858) + _1848;
        float _2660 = (_2654 * _1861) + _1852;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_62_93_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_62_93_ladder_2;
        _1882 = frontier_phi_62_93_ladder_1;
        _1884 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1792);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_915 * _902)) * _886;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    uvec4 _1918 = floatBitsToUint(cbInstanceData._m0[_860 + 5u]);
    uint _1920 = _1918.x * 14u;
    uint _1921 = _1920 + 13u;
    float _1926 = _886 + (-1.0);
    float _1929 = (cbLight._m0[_1921].x * _1926) + 1.0;
    float _1930 = (cbLight._m0[_1921].y * _1926) + 1.0;
    uint _1931 = _1920 + 5u;
    float _1937 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1941 = _1920 + 4u;
    float _1947 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1951 = _1920 | 1u;
    float _1962 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_786, _787, _788));
    float _1965 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_786, _787, _788));
    float _3894 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _3905 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1970 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.3183098733425140380859375;
    float _1972 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1979 = ((cbLight._m0[_1931].x * _1937) * _1972) + ((cbLight._m0[_1941].x * _1947) * _1970);
    float _1980 = ((_1937 * cbLight._m0[_1931].y) * _1972) + ((_1947 * cbLight._m0[_1941].y) * _1970);
    float _1981 = ((_1937 * cbLight._m0[_1931].z) * _1972) + ((_1947 * cbLight._m0[_1941].z) * _1970);
    uint _1983 = _1920 + 8u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _789) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1920].x + _813;
    float _1999 = cbLight._m0[_1920].y + _814;
    float _2000 = cbLight._m0[_1920].z + _815;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_1920].xyz));
    float _3916 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2012 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _2013 = dot(vec3(_786, _787, _788), vec3(_2005, _2006, _2007));
    float _3938 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2005, _2006, _2007));
    float _3949 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1997 * _1997;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _1997;
    float _2048 = (0.5 / (((_2012 * ((_2011 * _2037) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2037) + _1997) * _2011))) * _2011;
    float _3960 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    uint _2061 = _1920 + 9u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _789) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1951].x + _813;
    float _2075 = cbLight._m0[_1951].y + _814;
    float _2076 = cbLight._m0[_1951].z + _815;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_1951].xyz));
    float _3971 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _2088 = dot(vec3(_786, _787, _788), vec3(_2081, _2082, _2083));
    float _3982 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2081, _2082, _2083));
    float _3993 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2073 * _2073;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2110 = 1.0 - _2073;
    float _2120 = (0.5 / (((_2012 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2110) + _2073) * _2087))) * _2087;
    float _4004 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    float _2132 = (((_2109 * cbLight._m0[_2061].x) * _2122) * _1937) + (((_2036 * cbLight._m0[_1983].x) * _2050) * _1947);
    float _2133 = (((_2109 * cbLight._m0[_2061].y) * _2122) * _1937) + (((_2036 * cbLight._m0[_1983].y) * _2050) * _1947);
    float _2134 = (((_2109 * cbLight._m0[_2061].z) * _2122) * _1937) + (((_2036 * cbLight._m0[_1983].z) * _2050) * _1947);
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    if (_1918.y == 0u)
    {
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2189;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2189;
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2189;
        uvec4 _2204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2205 = _2204.x;
        uint _2216 = uint((float(_2204.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _2205))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _2205)));
        float _2226 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2227 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        uint _2230 = uint(isnan(14.0) ? _2227 : (isnan(_2227) ? 14.0 : min(_2227, 14.0)));
        uvec4 _2235 = texelFetch(g_lightClusterGridBuffer, int(((_2230 << 2u) + (_2216 << 6u)) >> 2u));
        uint _2236 = _2235.x;
        uint _2237 = _2204.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2237 >> 4u) & 15u)) + 4294967295u) & _2236) == 0u) || ((_2237 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            uint _2525 = 0u;
            uint _2534;
            bool _2535;
            for (;;)
            {
                _2534 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                _2535 = _2534 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2535)
                {
                    frontier_phi_90_pred = _2524;
                    frontier_phi_90_pred_1 = _2519;
                    frontier_phi_90_pred_2 = _2520;
                    frontier_phi_90_pred_3 = _2521;
                    frontier_phi_90_pred_4 = _2522;
                    frontier_phi_90_pred_5 = _2523;
                }
                else
                {
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    uint _2700;
                    _2694 = _2519;
                    _2695 = _2520;
                    _2696 = _2521;
                    _2697 = _2522;
                    _2698 = _2523;
                    _2699 = _2524;
                    _2700 = _2534;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2704 = uint(findLSB(_2700)) + (_2525 << 5u);
                        uint _2701 = (_2700 + 4294967295u) & _2700;
                        uint _2706 = _2704 * 48u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2726 = (_2704 * 48u) + 4u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2745 = (_2704 * 48u) + 8u;
                        vec3 _2756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x));
                        float _2760 = _2720.x - _2190;
                        float _2761 = _2720.y - _2191;
                        float _2762 = _2720.z - _2192;
                        float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                        float _2766 = inversesqrt(_2763);
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2770 = dot(vec3(_841, _844, _847), vec3(_2767, _2768, _2769));
                        float _2775 = 1.0 - (_2763 * _2720.w);
                        float _4025 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2777 = sqrt(_2763) * _2739.w;
                        float _2780 = 1.39999997615814208984375 / (_2777 + 1.39999997615814208984375);
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2770) + _2781;
                        float _2787 = _2777 * _2777;
                        float _2791 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2776) / ((_2787 * 0.699999988079071044921875) + 1.0);
                        float _2795 = (-0.0) - _2190;
                        float _2796 = (-0.0) - _2191;
                        float _2797 = (-0.0) - _2192;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2812 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2813 = 1.0 - _902;
                        float _2820 = sqrt(1.0 - ((1.0 - (_2813 * _2813)) * (1.0 - (_2812 * _2812))));
                        float _2821 = _2820 * _2820;
                        float _2822 = _2821 * _2821;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2833 = dot(vec3(_841, _844, _847), vec3(_2802, _2803, _2804));
                        float _4041 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2837 = dot(vec3(_841, _844, _847), vec3(_2829 * _2823, _2829 * _2824, _2829 * _2825));
                        float _4052 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2844 = ((_2840 * _2840) * (_2822 + (-1.0))) + 1.0;
                        float _2845 = _2780 * _2821;
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2770) + _2846;
                        float _4063 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2851 = 1.0 - _2821;
                        float _2861 = (0.5 / (((_2850 * ((_2836 * _2851) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2850 * _2851) + _2821) * _2836))) * _2850;
                        float _4074 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2872 = (((_2822 * 3.1415927410125732421875) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) / ((_2844 * _2844) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2776;
                        _2603 = (_2791 * _2739.x) + _2697;
                        _2604 = (_2791 * _2739.y) + _2698;
                        _2605 = (_2791 * _2739.z) + _2699;
                        _2600 = (_2872 * _2756.x) + _2694;
                        _2601 = (_2872 * _2756.y) + _2695;
                        _2602 = (_2872 * _2756.z) + _2696;
                        if (_2701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2694 = _2600;
                            _2695 = _2601;
                            _2696 = _2602;
                            _2697 = _2603;
                            _2698 = _2604;
                            _2699 = _2605;
                            _2700 = _2701;
                        }
                    }
                    frontier_phi_90_pred = _2605;
                    frontier_phi_90_pred_1 = _2600;
                    frontier_phi_90_pred_2 = _2601;
                    frontier_phi_90_pred_3 = _2602;
                    frontier_phi_90_pred_4 = _2603;
                    frontier_phi_90_pred_5 = _2604;
                }
                _2354 = frontier_phi_90_pred;
                _2344 = frontier_phi_90_pred_1;
                _2346 = frontier_phi_90_pred_2;
                _2348 = frontier_phi_90_pred_3;
                _2350 = frontier_phi_90_pred_4;
                _2352 = frontier_phi_90_pred_5;
                uint _2526 = _2525 + 1u;
                if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2519 = _2344;
                    _2520 = _2346;
                    _2521 = _2348;
                    _2522 = _2350;
                    _2523 = _2352;
                    _2524 = _2354;
                    _2525 = _2526;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((4294967295u << _2360) & _2236) == 0u)
        {
            _2487 = _2343;
            _2489 = _2345;
            _2491 = _2347;
            _2493 = _2349;
            _2495 = _2351;
            _2497 = _2353;
        }
        else
        {
            float _2512 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _2513 = _2512 * _2190;
            float _2514 = _2512 * _2191;
            float _2515 = _2512 * _2192;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2677 = _2343;
                float _2678 = _2345;
                float _2679 = _2347;
                float _2680 = _2349;
                float _2681 = _2351;
                float _2682 = _2353;
                uint _2683 = _2360;
                uint _2692;
                bool _2693;
                for (;;)
                {
                    _2692 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                    _2693 = _2692 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2693)
                    {
                        frontier_phi_99_pred = _2680;
                        frontier_phi_99_pred_1 = _2679;
                        frontier_phi_99_pred_2 = _2678;
                        frontier_phi_99_pred_3 = _2677;
                        frontier_phi_99_pred_4 = _2682;
                        frontier_phi_99_pred_5 = _2681;
                    }
                    else
                    {
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _2911 = _2677;
                        float _2912 = _2678;
                        float _2913 = _2679;
                        float _2914 = _2680;
                        float _2915 = _2681;
                        float _2916 = _2682;
                        uint _2917 = _2692;
                        uint _2918;
                        vec4 _2943;
                        float _2944;
                        vec4 _2959;
                        vec3 _2971;
                        vec4 _2986;
                        vec4 _3001;
                        float _3047;
                        bool _3048;
                        for (;;)
                        {
                            uint _2928 = ((_2683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2917));
                            _2918 = (_2917 + 4294967295u) & _2917;
                            uint _2930 = _2928 * 40u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            _2944 = _2943.w;
                            uint _2946 = (_2928 * 40u) + 4u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2928 * 40u) + 8u;
                            _2971 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x));
                            uint _2973 = (_2928 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2928 * 40u) + 20u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2928 * 40u) + 24u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3022 = (_2928 * 40u) + 28u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3047 = fma(_2192, _3035.z, fma(_2191, _3035.y, _3035.x * _2190)) + _3035.w;
                            _3048 = !((fma(_2192, _3016.z, fma(_2191, _3016.y, _3016.x * _2190)) + _3016.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3048)
                            {
                                float _3075 = _2943.x - _2190;
                                float _3076 = _2943.y - _2191;
                                float _3077 = _2943.z - _2192;
                                float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                                float _3081 = inversesqrt(_3078);
                                float _3082 = _3081 * _3075;
                                float _3083 = _3081 * _3076;
                                float _3084 = _3081 * _3077;
                                float _3088 = 1.0 - (_3078 / (_2944 * _2944));
                                float _4085 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3093 = sqrt(_3078) * _2959.w;
                                float _3095 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                                float _3096 = _3095 * _3095;
                                float _3099 = ((1.0 - _3096) * dot(vec3(_3082, _3083, _3084), vec3(_841, _844, _847))) + _3096;
                                float _3102 = _3093 * _3093;
                                float _3106 = (fma(_2192, _2986.z, fma(_2191, _2986.y, _2986.x * _2190)) + _2986.w) / _3047;
                                float _3107 = (fma(_2192, _3001.z, fma(_2191, _3001.y, _3001.x * _2190)) + _3001.w) / _3047;
                                float _3111 = 1.0 - dot(vec2(_3106, _3107), vec2(_3106, _3107));
                                float _4101 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3113 = _3112 * (((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3089) / ((_3102 * 0.699999988079071044921875) + 1.0));
                                float _3125 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                                float _3126 = 1.0 - _902;
                                float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                                float _3134 = _3133 * _3133;
                                float _3135 = _3134 * _3134;
                                float _3136 = _3082 - _2513;
                                float _3137 = _3083 - _2514;
                                float _3138 = _3084 - _2515;
                                float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                                float _3146 = dot(vec3(_841, _844, _847), vec3((-0.0) - _2513, (-0.0) - _2514, (-0.0) - _2515));
                                float _4112 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3149 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3150 = dot(vec3(_841, _844, _847), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                                float _4123 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                                float _3158 = _3095 * _3134;
                                float _3159 = _3158 * _3158;
                                float _3165 = ((1.0 - _3159) * dot(vec3(_841, _844, _847), vec3(_3082, _3083, _3084))) + _3159;
                                float _4134 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3167 = 1.0 - _3134;
                                float _3177 = (0.5 / (((_3166 * ((_3149 * _3167) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3134) * _3149))) * _3166;
                                float _4145 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3187 = (_3112 * _3089) * (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_3157 * _3157) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3113 * _2959.z;
                                frontier_phi_105_pred_1 = _3187 * _2971.x;
                                frontier_phi_105_pred_2 = _3187 * _2971.y;
                                frontier_phi_105_pred_3 = _3187 * _2971.z;
                                frontier_phi_105_pred_4 = _3113 * _2959.x;
                                frontier_phi_105_pred_5 = _3113 * _2959.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3196 = frontier_phi_105_pred;
                            _3191 = frontier_phi_105_pred_1;
                            _3192 = frontier_phi_105_pred_2;
                            _3193 = frontier_phi_105_pred_3;
                            _3194 = frontier_phi_105_pred_4;
                            _3195 = frontier_phi_105_pred_5;
                            _2901 = _3194 + _2914;
                            _2902 = _3195 + _2915;
                            _2903 = _3196 + _2916;
                            _2898 = _3191 + _2911;
                            _2899 = _3192 + _2912;
                            _2900 = _3193 + _2913;
                            if (_2918 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2918;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2901;
                        frontier_phi_99_pred_1 = _2900;
                        frontier_phi_99_pred_2 = _2899;
                        frontier_phi_99_pred_3 = _2898;
                        frontier_phi_99_pred_4 = _2903;
                        frontier_phi_99_pred_5 = _2902;
                    }
                    _2494 = frontier_phi_99_pred;
                    _2492 = frontier_phi_99_pred_1;
                    _2490 = frontier_phi_99_pred_2;
                    _2488 = frontier_phi_99_pred_3;
                    _2498 = frontier_phi_99_pred_4;
                    _2496 = frontier_phi_99_pred_5;
                    uint _2684 = _2683 + 1u;
                    if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2677 = _2488;
                        _2678 = _2490;
                        _2679 = _2492;
                        _2680 = _2494;
                        _2681 = _2496;
                        _2682 = _2498;
                        _2683 = _2684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2498;
                frontier_phi_81_82_ladder_1 = _2494;
                frontier_phi_81_82_ladder_2 = _2492;
                frontier_phi_81_82_ladder_3 = _2490;
                frontier_phi_81_82_ladder_4 = _2488;
                frontier_phi_81_82_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_81_82_ladder = _2353;
                frontier_phi_81_82_ladder_1 = _2349;
                frontier_phi_81_82_ladder_2 = _2347;
                frontier_phi_81_82_ladder_3 = _2345;
                frontier_phi_81_82_ladder_4 = _2343;
                frontier_phi_81_82_ladder_5 = _2351;
            }
            _2487 = frontier_phi_81_82_ladder_4;
            _2489 = frontier_phi_81_82_ladder_3;
            _2491 = frontier_phi_81_82_ladder_2;
            _2493 = frontier_phi_81_82_ladder_1;
            _2495 = frontier_phi_81_82_ladder_5;
            _2497 = frontier_phi_81_82_ladder;
        }
        float _2502 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2249 = (_2502 * _2493) + _1979;
        _2251 = (_2502 * _2495) + _1980;
        _2253 = (_2502 * _2497) + _1981;
        _2255 = ((_2487 * 0.039999999105930328369140625) * _2502) + _2132;
        _2257 = ((_2489 * 0.039999999105930328369140625) * _2502) + _2133;
        _2259 = ((_2491 * 0.039999999105930328369140625) * _2502) + _2134;
    }
    else
    {
        _2249 = _1979;
        _2251 = _1980;
        _2253 = _1981;
        _2255 = _2132;
        _2257 = _2133;
        _2259 = _2134;
    }
    uint _2265 = _862 + uint(cbMatDynParam._m0[0u].w);
    float _4161 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4172 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4183 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2290 = (((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2249 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _886))) + ((_2255 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2265].x * ((((((cbMtdParam._m0[14u].x * _285) * _681.x) - _614) * _285) * _734) + _614));
    float _2292 = ((cbInstanceData._m0[_2265].y * ((((((cbMtdParam._m0[14u].y * _285) * _681.y) - _615) * _285) * _734) + _615)) + ((_2257 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2251 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _886)));
    float _2294 = ((cbInstanceData._m0[_2265].z * ((((((cbMtdParam._m0[14u].z * _285) * _681.z) - _616) * _285) * _734) + _616)) + ((_2259 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2253 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _886)));
    uint _2298 = _860 + 6u;
    float _2306 = _821 / cbSceneParam._m0[86u].x;
    float _2307 = _822 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2369 = _2368 / _808;
        float _2380 = _2369 * _267;
        float _2381 = _268 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2383 = _2369 * _269;
        float _2385 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2386 = _2385 + cbSceneParam._m0[79u].w;
        float _2387 = cbSceneParam._m0[79u].w - _2381;
        float _2393 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2383 * _2383));
        float _2396 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2393;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2382 - _2385) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2386 > 0.0) ? exp2(_2402 * _2386) : (2.0 - exp2(_2404 * _2386))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2396;
        }
        else
        {
            float _2548 = 1.0 / cbSceneParam._m0[80u].x;
            float _2549 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : max(_2386, _2387));
            float _2550 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : min(_2386, _2387));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            _2613 = ((abs(_2393 / _2382) * cbSceneParam._m0[80u].y) * ((((_2559 - _2560) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))))) * _2548)) - ((exp2(_2404 * _2559) - exp2(_2404 * _2560)) * _2548))) + (_2396 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2326);
        _2406 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2408 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2410 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2412 = _2624 * _2326;
    }
    else
    {
        _2406 = _2323;
        _2408 = _2324;
        _2410 = _2325;
        _2412 = _2326;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2433 = exp2(_2426 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0)));
    float _2434 = exp2(_2426 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)));
    float _2435 = exp2(_2426 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2298].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
}


