#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _441;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _354 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _369 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _376 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _388 = cbMtdParam._m0[22u].z + _263;
    float _389 = cbMtdParam._m0[22u].w + _264;
    float _390 = cbMtdParam._m0[23u].x + _265;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_369 * _192, _369 * _193, _369 * _194));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_376 * _206, _376 * _207, _376 * _208));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _411 = _410 * _406;
    float _416 = ((cbMtdParam._m0[19u].y * _404) * _410) + (((_354.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _417 = ((cbMtdParam._m0[19u].z * _405) * _410) + (((_354.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _420 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _421 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _439;
    float _442;
    float _444;
    if (_416 > 0.0)
    {
        float _425 = (1.0 - _420) / _416;
        _439 = _425;
        _442 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_425 * _411)) * 0.16666667163372039794921875;
        _444 = (fract((_425 * _417) + _421) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_416 < 0.0)
        {
            float _440 = ((-0.0) - _420) / _416;
            frontier_phi_3_2_ladder = (fract(_440 * _411) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _440;
            frontier_phi_3_2_ladder_2 = (fract((_440 * _417) + _421) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _441;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _439 = frontier_phi_3_2_ladder_1;
        _442 = frontier_phi_3_2_ladder;
        _444 = frontier_phi_3_2_ladder_2;
    }
    float _470;
    float _472;
    float _474;
    if (_417 > 0.0)
    {
        float _457 = (1.0 - _421) / _417;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_457 < _439)
        {
            frontier_phi_8_5_ladder = (fract(_457 * _411) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_457 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _457;
        }
        else
        {
            frontier_phi_8_5_ladder = _444;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = _439;
        }
        _470 = frontier_phi_8_5_ladder_2;
        _472 = frontier_phi_8_5_ladder_1;
        _474 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_417 < 0.0)
        {
            float _471 = ((-0.0) - _421) / _417;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_471 < _439)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_471 * _411) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_471 * _416) + _420) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _471;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _444;
                frontier_phi_8_6_ladder_9_ladder_1 = _442;
                frontier_phi_8_6_ladder_9_ladder_2 = _439;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _444;
            frontier_phi_8_6_ladder_1 = _442;
            frontier_phi_8_6_ladder_2 = _439;
        }
        _470 = frontier_phi_8_6_ladder_2;
        _472 = frontier_phi_8_6_ladder_1;
        _474 = frontier_phi_8_6_ladder;
    }
    float _478 = (_411 > 0.0) ? (cbMtdParam._m0[16u].y / _411) : 5000.0;
    float _491;
    float _492;
    if (_478 < _470)
    {
        _491 = ((_420 + cbMtdParam._m0[16u].z) + (_478 * _416)) * 0.16666667163372039794921875;
        _492 = (((_478 * _417) + _421) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _491 = _472;
        _492 = _474;
    }
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_491, _492));
    float _505 = _281 * 0.1500000059604644775390625;
    float _513 = (_505 * (((cbMtdParam._m0[13u].x * _281) * _494.x) - _316)) + _316;
    float _514 = (_505 * (((cbMtdParam._m0[13u].y * _281) * _494.y) - _318)) + _318;
    float _515 = (_505 * (((cbMtdParam._m0[13u].z * _281) * _494.z) - _320)) + _320;
    vec4 _527 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _531 = _527.z;
    float _534 = (_527.x * 2.0) + (-1.0);
    float _535 = (_527.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3391 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))));
    float _544 = fma(_541, _199, fma(_535, _206, _534 * _192));
    float _547 = fma(_541, _200, fma(_535, _207, _534 * _193));
    float _550 = fma(_541, _201, fma(_535, _208, _534 * _194));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3402 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _558 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3424 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3435 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _582 = _263 * _581;
    float _583 = _264 * _581;
    float _584 = _265 * _581;
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _612 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _615 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _618 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _631 = uint(roundEven(NORMAL.w)) * 13u;
    uint _633 = (_631 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3446 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _3468 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    vec4 _653 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _590, cbSceneParam._m0[86u].y * _591));
    float _656 = _653.x * TEXCOORD.z;
    float _657 = dot(vec3(_555, _556, _557), vec3(_582, _583, _584));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _555) - _582;
    float _665 = (_660 * _556) - _583;
    float _666 = (_660 * _557) - _584;
    float _670 = abs(dot(vec3(_582, _583, _584), vec3(_555, _556, _557)));
    float _3479 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(_558);
    float _685 = exp2((_672 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_725, cbModelParam._m0[26u].z, fma(_721, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717));
        float _762 = fma(_725, cbModelParam._m0[27u].z, fma(_721, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717));
        float _766 = fma(_725, cbModelParam._m0[28u].z, fma(_721, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717));
        float _790 = _717 + _555;
        float _791 = _721 + _556;
        float _792 = _725 + _557;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _758;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _762;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _766;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_555, _556, _557), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3527 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_555, _556, _557), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3560 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_555, _556, _557), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3593 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1033 = _862;
        _1034 = _861;
        _1035 = _873;
        _1036 = _872;
        _1037 = _871;
        _1038 = _883;
        _1039 = _882;
        _1040 = _881;
        _1041 = _896;
        _1042 = _895;
        _1043 = _894;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _441;
        _1033 = _441;
        _1034 = _441;
        _1035 = _441;
        _1036 = _441;
        _1037 = _441;
        _1038 = _441;
        _1039 = _441;
        _1040 = _441;
        _1041 = _441;
        _1042 = _441;
        _1043 = _441;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_725, cbModelParam._m0[30u].z, fma(_721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _717));
        float _1076 = fma(_725, cbModelParam._m0[31u].z, fma(_721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _717));
        float _1080 = fma(_725, cbModelParam._m0[32u].z, fma(_721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _717));
        float _1103 = _717 + _555;
        float _1104 = _721 + _556;
        float _1105 = _725 + _557;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_555, _556, _557), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3656 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_555, _556, _557), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3689 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_555, _556, _557), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3722 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _441;
        _1342 = _441;
        _1343 = _441;
        _1344 = _441;
        _1345 = _441;
        _1346 = _441;
        _1347 = _441;
        _1348 = _441;
        _1349 = _441;
        _1350 = _441;
        _1351 = _441;
        _1352 = _441;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1045)) + _1045;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _664 * 0.5;
    float _1410 = _665 * 0.5;
    float _1411 = _666 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_725, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_725, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_725, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1541 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1544 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1572 = frontier_phi_26_24_ladder;
        }
        float _1742;
        if (_1541 > 0.0)
        {
            _1742 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1742 = frontier_phi_35_31_ladder;
        }
        float _2186;
        if (_1544 > 0.0)
        {
            _2186 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2186 = frontier_phi_47_42_ladder;
        }
        float _2188 = isnan(_1742) ? _1572 : (isnan(_1572) ? _1742 : min(_1572, _1742));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1538) + _1527;
        float _2194 = (_2189 * _1541) + _1531;
        float _2195 = (_2189 * _1544) + _1535;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_25_47_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_25_47_ladder_2;
        _1562 = frontier_phi_25_47_ladder_1;
        _1564 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1478);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_725, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_725, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_725, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1637 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1640 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1747;
        if (_1634 > 0.0)
        {
            _1747 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1747 = frontier_phi_37_33_ladder;
        }
        float _2213;
        if (_1637 > 0.0)
        {
            _2213 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2213 = frontier_phi_49_44_ladder;
        }
        float _2550;
        if (_1640 > 0.0)
        {
            _2550 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2550 = frontier_phi_61_56_ladder;
        }
        float _2552 = isnan(_2213) ? _1747 : (isnan(_1747) ? _2213 : min(_1747, _2213));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1634) + _1623;
        float _2558 = (_2553 * _1637) + _1627;
        float _2559 = (_2553 * _1640) + _1631;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2560;
        float _2563 = _2560 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2559 > _2563) || ((_2559 < _2561) || ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 < _2561) || (_2557 > _2563))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2559, cbModelParam._m0[17u].z, fma(_2558, cbModelParam._m0[17u].y, _2557 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2559, cbModelParam._m0[18u].z, fma(_2558, cbModelParam._m0[18u].y, _2557 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2559, cbModelParam._m0[19u].z, fma(_2558, cbModelParam._m0[19u].y, _2557 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_34_61_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_34_61_ladder_2;
        _1661 = frontier_phi_34_61_ladder_1;
        _1663 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1569);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1675 = ((((1.0 - _685) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_685 * _672)) * _656;
    float _1676 = _1675 * ((cbModelParam._m0[1u].w * (_1659 - _1560)) + _1560);
    float _1677 = _1675 * ((cbModelParam._m0[1u].w * (_1661 - _1562)) + _1562);
    float _1678 = _1675 * ((cbModelParam._m0[1u].w * (_1663 - _1564)) + _1564);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1733 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1734 = _1721 / _1733;
    float _1735 = _1725 / _1733;
    float _1736 = _1729 / _1733;
    float _1883;
    float _1884;
    float _1885;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1763 = ((uint(_1736 > cbSceneParam._m0[59u].y) + uint(_1736 > cbSceneParam._m0[59u].x)) + uint(_1736 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1764 = _1763 + 43u;
        uint _1772 = _1763 + 44u;
        uint _1780 = _1763 + 45u;
        uint _1788 = _1763 + 46u;
        float _1799 = fma(_1733, cbSceneParam._m0[_1764].w, fma(_1729, cbSceneParam._m0[_1764].z, fma(_1725, cbSceneParam._m0[_1764].y, _1721 * cbSceneParam._m0[_1764].x)));
        float _1803 = fma(_1733, cbSceneParam._m0[_1772].w, fma(_1729, cbSceneParam._m0[_1772].z, fma(_1725, cbSceneParam._m0[_1772].y, _1721 * cbSceneParam._m0[_1772].x)));
        float _1811 = fma(_1733, cbSceneParam._m0[_1788].w, fma(_1729, cbSceneParam._m0[_1788].z, fma(_1725, cbSceneParam._m0[_1788].y, _1721 * cbSceneParam._m0[_1788].x)));
        float _1816 = cbSceneParam._m0[33u].z * _1811;
        float _1818 = cbSceneParam._m0[33u].w * _1811;
        float _1821 = fma(_1733, cbSceneParam._m0[_1780].w, fma(_1729, cbSceneParam._m0[_1780].z, fma(_1725, cbSceneParam._m0[_1780].y, _1721 * cbSceneParam._m0[_1780].x))) / _1811;
        float _1869 = (cbSceneParam._m0[33u].x - sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736))) * cbSceneParam._m0[33u].y;
        float _3848 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1876 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 + _1799) / _1811, (_1818 + _1803) / _1811), _1821), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1818 + _1799) / _1811, (_1803 - _1816) / _1811), _1821), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 - _1816) / _1811, (_1803 - _1818) / _1811), _1821), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 - _1818) / _1811, (_1816 + _1803) / _1811), _1821), 0.0)).x), vec4(0.25)));
        _1883 = 1.0 - (_1876 * cbSceneParam._m0[34u].x);
        _1884 = 1.0 - (_1876 * cbSceneParam._m0[34u].y);
        _1885 = 1.0 - (_1876 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1883 = 1.0;
        _1884 = 1.0;
        _1885 = 1.0;
    }
    float _1949;
    float _1951;
    float _1953;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1937 = fma(_1733, cbSceneParam._m0[63u].w, fma(_1729, cbSceneParam._m0[63u].z, fma(_1725, cbSceneParam._m0[63u].y, _1721 * cbSceneParam._m0[63u].x)));
        float _1938 = fma(_1733, cbSceneParam._m0[60u].w, fma(_1729, cbSceneParam._m0[60u].z, fma(_1725, cbSceneParam._m0[60u].y, _1721 * cbSceneParam._m0[60u].x))) / _1937;
        float _1939 = fma(_1733, cbSceneParam._m0[61u].w, fma(_1729, cbSceneParam._m0[61u].z, fma(_1725, cbSceneParam._m0[61u].y, _1721 * cbSceneParam._m0[61u].x))) / _1937;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1938 >= cbSceneParam._m0[64u].x) && (_1939 >= cbSceneParam._m0[64u].y)) && (_1938 <= cbSceneParam._m0[64u].z)) && (_1939 <= cbSceneParam._m0[64u].w))
        {
            float _2226 = fma(_1733, cbSceneParam._m0[62u].w, fma(_1729, cbSceneParam._m0[62u].z, fma(_1725, cbSceneParam._m0[62u].y, _1721 * cbSceneParam._m0[62u].x))) / _1937;
            float _2230 = isnan(cbSceneParam._m0[41u].w) ? _2226 : (isnan(_2226) ? cbSceneParam._m0[41u].w : max(_2226, cbSceneParam._m0[41u].w));
            float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736))) * cbSceneParam._m0[33u].y;
            float _3864 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
            float _2280 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1938, cbSceneParam._m0[33u].w + _1939), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1938, _1939 - cbSceneParam._m0[33u].z), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1938 - cbSceneParam._m0[33u].z, _1939 - cbSceneParam._m0[33u].w), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1938 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1939), _2230), 0.0)).x), vec4(0.25)));
            float _2284 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
            float _2285 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
            float _2286 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2286) ? _1885 : (isnan(_1885) ? _2286 : min(_1885, _2286));
            frontier_phi_46_45_ladder_1 = isnan(_2285) ? _1884 : (isnan(_1884) ? _2285 : min(_1884, _2285));
            frontier_phi_46_45_ladder_2 = isnan(_2284) ? _1883 : (isnan(_1883) ? _2284 : min(_1883, _2284));
        }
        else
        {
            frontier_phi_46_45_ladder = _1885;
            frontier_phi_46_45_ladder_1 = _1884;
            frontier_phi_46_45_ladder_2 = _1883;
        }
        _1949 = frontier_phi_46_45_ladder_2;
        _1951 = frontier_phi_46_45_ladder_1;
        _1953 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1949 = _1883;
        _1951 = _1884;
        _1953 = _1885;
    }
    uvec4 _1958 = floatBitsToUint(cbInstanceData._m0[_631 + 5u]);
    uint _1960 = _1958.x * 14u;
    uint _1961 = _1960 + 13u;
    float _1966 = _656 + (-1.0);
    float _1969 = (cbLight._m0[_1961].x * _1966) + 1.0;
    float _1970 = (cbLight._m0[_1961].y * _1966) + 1.0;
    uint _1971 = _1960 + 5u;
    float _1977 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1981 = _1960 + 4u;
    float _1990 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1994 = _1960 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_555, _556, _557));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_555, _556, _557));
    float _3900 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _3911 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1971].x * _1977) * _2015) + (((cbLight._m0[_1981].x * _1949) * _1990) * _2013);
    float _2023 = ((_1977 * cbLight._m0[_1971].y) * _2015) + (((cbLight._m0[_1981].y * _1951) * _1990) * _2013);
    float _2024 = ((_1977 * cbLight._m0[_1971].z) * _2015) + (((cbLight._m0[_1981].z * _1953) * _1990) * _2013);
    uint _2026 = _1960 + 8u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _558) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1960].x + _582;
    float _2042 = cbLight._m0[_1960].y + _583;
    float _2043 = cbLight._m0[_1960].z + _584;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1960].xyz));
    float _3922 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2055 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _2056 = dot(vec3(_555, _556, _557), vec3(_2048, _2049, _2050));
    float _3944 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2048, _2049, _2050));
    float _3955 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2040 * _2040;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2040;
    float _2091 = (0.5 / (((_2055 * ((_2054 * _2080) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2080) + _2040) * _2054))) * _2054;
    float _3966 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    uint _2107 = _1960 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _558) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1994].x + _582;
    float _2121 = cbLight._m0[_1994].y + _583;
    float _2122 = cbLight._m0[_1994].z + _584;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1994].xyz));
    float _3977 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _2134 = dot(vec3(_555, _556, _557), vec3(_2127, _2128, _2129));
    float _3988 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2127, _2128, _2129));
    float _3999 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2156 = 1.0 - _2119;
    float _2166 = (0.5 / (((_2055 * ((_2133 * _2156) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2156) + _2119) * _2133))) * _2133;
    float _4010 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2178 = (((_2155 * cbLight._m0[_2107].x) * _2168) * _1977) + ((((cbLight._m0[_2026].x * _1949) * _2079) * _2093) * _1990);
    float _2179 = (((_2155 * cbLight._m0[_2107].y) * _2168) * _1977) + ((((cbLight._m0[_2026].y * _1951) * _2079) * _2093) * _1990);
    float _2180 = (((_2155 * cbLight._m0[_2107].z) * _2168) * _1977) + ((((cbLight._m0[_2026].z * _1953) * _2079) * _2093) * _1990);
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_1958.y == 0u)
    {
        uvec4 _2298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2299 = _2298.x;
        uint _2310 = uint((float(_2298.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _2299))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _2299)));
        float _2320 = (log2(_1736 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2321 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        uint _2324 = uint(isnan(14.0) ? _2321 : (isnan(_2321) ? 14.0 : min(_2321, 14.0)));
        uvec4 _2329 = texelFetch(g_lightClusterGridBuffer, int(((_2324 << 2u) + (_2310 << 6u)) >> 2u));
        uint _2330 = _2329.x;
        uint _2331 = _2298.z;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((((1u << ((_2331 >> 4u) & 15u)) + 4294967295u) & _2330) == 0u) || ((_2331 & 240u) == 0u))
        {
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
        }
        else
        {
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            uint _2614 = 0u;
            uint _2623;
            bool _2624;
            for (;;)
            {
                _2623 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                _2624 = _2623 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2624)
                {
                    frontier_phi_70_pred = _2611;
                    frontier_phi_70_pred_1 = _2613;
                    frontier_phi_70_pred_2 = _2612;
                    frontier_phi_70_pred_3 = _2610;
                    frontier_phi_70_pred_4 = _2609;
                    frontier_phi_70_pred_5 = _2608;
                }
                else
                {
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    uint _2759;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2613;
                    _2759 = _2623;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    for (;;)
                    {
                        uint _2763 = uint(findLSB(_2759)) + (_2614 << 5u);
                        uint _2760 = (_2759 + 4294967295u) & _2759;
                        uint _2765 = _2763 * 48u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2785 = (_2763 * 48u) + 4u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2804 = (_2763 * 48u) + 8u;
                        vec3 _2815 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x));
                        float _2819 = _2779.x - _1734;
                        float _2820 = _2779.y - _1735;
                        float _2821 = _2779.z - _1736;
                        float _2822 = dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821));
                        float _2825 = inversesqrt(_2822);
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2829 = dot(vec3(_612, _615, _618), vec3(_2826, _2827, _2828));
                        float _2834 = 1.0 - (_2822 * _2779.w);
                        float _4031 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2836 = sqrt(_2822) * _2798.w;
                        float _2839 = 1.39999997615814208984375 / (_2836 + 1.39999997615814208984375);
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2829) + _2840;
                        float _2846 = _2836 * _2836;
                        float _2850 = ((isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))) * _2835) / ((_2846 * 0.699999988079071044921875) + 1.0);
                        float _2854 = (-0.0) - _1734;
                        float _2855 = (-0.0) - _1735;
                        float _2856 = (-0.0) - _1736;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2870 = exp2(log2(1.0 / ((_2846 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _672;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2861 + _2826;
                        float _2882 = _2862 + _2827;
                        float _2883 = _2863 + _2828;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_612, _615, _618), vec3(_2861, _2862, _2863));
                        float _4047 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2895 = dot(vec3(_612, _615, _618), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4058 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2839 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2829) + _2904;
                        float _4069 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4080 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) / ((_2902 * _2902) * ((_2846 * 2.1991131305694580078125) + 3.141590118408203125))) * _2835;
                        _2688 = (_2850 * _2798.x) + _2756;
                        _2689 = (_2850 * _2798.y) + _2757;
                        _2690 = (_2850 * _2798.z) + _2758;
                        _2685 = (_2930 * _2815.x) + _2753;
                        _2686 = (_2930 * _2815.y) + _2754;
                        _2687 = (_2930 * _2815.z) + _2755;
                        if (_2760 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2753 = _2685;
                            _2754 = _2686;
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2760;
                        }
                    }
                    frontier_phi_70_pred = _2688;
                    frontier_phi_70_pred_1 = _2690;
                    frontier_phi_70_pred_2 = _2689;
                    frontier_phi_70_pred_3 = _2687;
                    frontier_phi_70_pred_4 = _2686;
                    frontier_phi_70_pred_5 = _2685;
                }
                _2445 = frontier_phi_70_pred;
                _2449 = frontier_phi_70_pred_1;
                _2447 = frontier_phi_70_pred_2;
                _2443 = frontier_phi_70_pred_3;
                _2441 = frontier_phi_70_pred_4;
                _2439 = frontier_phi_70_pred_5;
                uint _2615 = _2614 + 1u;
                if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2608 = _2439;
                    _2609 = _2441;
                    _2610 = _2443;
                    _2611 = _2445;
                    _2612 = _2447;
                    _2613 = _2449;
                    _2614 = _2615;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
        }
        uvec4 _2452 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2453 = _2452.z;
        uint _2455 = (_2453 >> 8u) & 15u;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((4294967295u << _2455) & _2330) == 0u)
        {
            _2576 = _2438;
            _2578 = _2440;
            _2580 = _2442;
            _2582 = _2444;
            _2584 = _2446;
            _2586 = _2448;
        }
        else
        {
            float _2601 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
            float _2602 = _2601 * _1734;
            float _2603 = _2601 * _1735;
            float _2604 = _2601 * _1736;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2455 < ((_2453 >> 12u) & 15u))
            {
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2736 = _2438;
                float _2737 = _2440;
                float _2738 = _2442;
                float _2739 = _2444;
                float _2740 = _2446;
                float _2741 = _2448;
                uint _2742 = _2455;
                uint _2751;
                bool _2752;
                for (;;)
                {
                    _2751 = texelFetch(g_lightClassification, int((((_2324 << 5u) + (_2310 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                    _2752 = _2751 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2752)
                    {
                        frontier_phi_76_pred = _2741;
                        frontier_phi_76_pred_1 = _2740;
                        frontier_phi_76_pred_2 = _2739;
                        frontier_phi_76_pred_3 = _2738;
                        frontier_phi_76_pred_4 = _2737;
                        frontier_phi_76_pred_5 = _2736;
                    }
                    else
                    {
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _2948 = _2736;
                        float _2949 = _2737;
                        float _2950 = _2738;
                        float _2951 = _2739;
                        float _2952 = _2740;
                        float _2953 = _2741;
                        uint _2954 = _2751;
                        uint _2955;
                        vec4 _2980;
                        float _2981;
                        vec4 _2996;
                        vec3 _3008;
                        vec4 _3023;
                        vec4 _3038;
                        float _3084;
                        bool _3085;
                        for (;;)
                        {
                            uint _2965 = ((_2742 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2954));
                            _2955 = (_2954 + 4294967295u) & _2954;
                            uint _2967 = _2965 * 40u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            _2981 = _2980.w;
                            uint _2983 = (_2965 * 40u) + 4u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2965 * 40u) + 8u;
                            _3008 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x));
                            uint _3010 = (_2965 * 40u) + 16u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2965 * 40u) + 20u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            uint _3040 = (_2965 * 40u) + 24u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3059 = (_2965 * 40u) + 28u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3084 = fma(_1736, _3072.z, fma(_1735, _3072.y, _3072.x * _1734)) + _3072.w;
                            _3085 = !((fma(_1736, _3053.z, fma(_1735, _3053.y, _3053.x * _1734)) + _3053.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3085)
                            {
                                float _3112 = _2980.x - _1734;
                                float _3113 = _2980.y - _1735;
                                float _3114 = _2980.z - _1736;
                                float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                                float _3118 = inversesqrt(_3115);
                                float _3119 = _3118 * _3112;
                                float _3120 = _3118 * _3113;
                                float _3121 = _3118 * _3114;
                                float _3125 = 1.0 - (_3115 / (_2981 * _2981));
                                float _4091 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3130 = sqrt(_3115) * _2996.w;
                                float _3132 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                                float _3133 = _3132 * _3132;
                                float _3136 = ((1.0 - _3133) * dot(vec3(_3119, _3120, _3121), vec3(_612, _615, _618))) + _3133;
                                float _3139 = _3130 * _3130;
                                float _3143 = (fma(_1736, _3023.z, fma(_1735, _3023.y, _3023.x * _1734)) + _3023.w) / _3084;
                                float _3144 = (fma(_1736, _3038.z, fma(_1735, _3038.y, _3038.x * _1734)) + _3038.w) / _3084;
                                float _3148 = 1.0 - dot(vec2(_3143, _3144), vec2(_3143, _3144));
                                float _4107 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3150 = _3149 * (((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3126) / ((_3139 * 0.699999988079071044921875) + 1.0));
                                float _3162 = exp2(log2(1.0 / ((_3139 * 3.5) + 5.0)) * 0.25);
                                float _3163 = 1.0 - _672;
                                float _3170 = sqrt(1.0 - ((1.0 - (_3163 * _3163)) * (1.0 - (_3162 * _3162))));
                                float _3171 = _3170 * _3170;
                                float _3172 = _3171 * _3171;
                                float _3173 = _3119 - _2602;
                                float _3174 = _3120 - _2603;
                                float _3175 = _3121 - _2604;
                                float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                                float _3183 = dot(vec3(_612, _615, _618), vec3((-0.0) - _2602, (-0.0) - _2603, (-0.0) - _2604));
                                float _4118 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3186 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3187 = dot(vec3(_612, _615, _618), vec3(_3179 * _3173, _3179 * _3174, _3179 * _3175));
                                float _4129 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3190 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3194 = ((_3190 * _3190) * (_3172 + (-1.0))) + 1.0;
                                float _3195 = _3132 * _3171;
                                float _3196 = _3195 * _3195;
                                float _3202 = ((1.0 - _3196) * dot(vec3(_612, _615, _618), vec3(_3119, _3120, _3121))) + _3196;
                                float _4140 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3204 = 1.0 - _3171;
                                float _3214 = (0.5 / (((_3203 * ((_3186 * _3204) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_3203 * _3204) + _3171) * _3186))) * _3203;
                                float _4151 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3224 = (_3149 * _3126) * (((_3172 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_3194 * _3194) * ((_3139 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3150 * _2996.z;
                                frontier_phi_82_pred_1 = _3150 * _2996.y;
                                frontier_phi_82_pred_2 = _3150 * _2996.x;
                                frontier_phi_82_pred_3 = _3224 * _3008.z;
                                frontier_phi_82_pred_4 = _3224 * _3008.y;
                                frontier_phi_82_pred_5 = _3224 * _3008.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3233 = frontier_phi_82_pred;
                            _3232 = frontier_phi_82_pred_1;
                            _3231 = frontier_phi_82_pred_2;
                            _3230 = frontier_phi_82_pred_3;
                            _3229 = frontier_phi_82_pred_4;
                            _3228 = frontier_phi_82_pred_5;
                            _2938 = _3231 + _2951;
                            _2939 = _3232 + _2952;
                            _2940 = _3233 + _2953;
                            _2935 = _3228 + _2948;
                            _2936 = _3229 + _2949;
                            _2937 = _3230 + _2950;
                            if (_2955 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2955;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2940;
                        frontier_phi_76_pred_1 = _2939;
                        frontier_phi_76_pred_2 = _2938;
                        frontier_phi_76_pred_3 = _2937;
                        frontier_phi_76_pred_4 = _2936;
                        frontier_phi_76_pred_5 = _2935;
                    }
                    _2587 = frontier_phi_76_pred;
                    _2585 = frontier_phi_76_pred_1;
                    _2583 = frontier_phi_76_pred_2;
                    _2581 = frontier_phi_76_pred_3;
                    _2579 = frontier_phi_76_pred_4;
                    _2577 = frontier_phi_76_pred_5;
                    uint _2743 = _2742 + 1u;
                    if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2736 = _2577;
                        _2737 = _2579;
                        _2738 = _2581;
                        _2739 = _2583;
                        _2740 = _2585;
                        _2741 = _2587;
                        _2742 = _2743;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2585;
                frontier_phi_63_64_ladder_1 = _2587;
                frontier_phi_63_64_ladder_2 = _2583;
                frontier_phi_63_64_ladder_3 = _2581;
                frontier_phi_63_64_ladder_4 = _2579;
                frontier_phi_63_64_ladder_5 = _2577;
            }
            else
            {
                frontier_phi_63_64_ladder = _2446;
                frontier_phi_63_64_ladder_1 = _2448;
                frontier_phi_63_64_ladder_2 = _2444;
                frontier_phi_63_64_ladder_3 = _2442;
                frontier_phi_63_64_ladder_4 = _2440;
                frontier_phi_63_64_ladder_5 = _2438;
            }
            _2576 = frontier_phi_63_64_ladder_5;
            _2578 = frontier_phi_63_64_ladder_4;
            _2580 = frontier_phi_63_64_ladder_3;
            _2582 = frontier_phi_63_64_ladder_2;
            _2584 = frontier_phi_63_64_ladder;
            _2586 = frontier_phi_63_64_ladder_1;
        }
        float _2591 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2343 = (_2591 * _2582) + _2022;
        _2345 = (_2591 * _2584) + _2023;
        _2347 = (_2591 * _2586) + _2024;
        _2349 = ((_2576 * 0.039999999105930328369140625) * _2591) + _2178;
        _2351 = ((_2578 * 0.039999999105930328369140625) * _2591) + _2179;
        _2353 = ((_2580 * 0.039999999105930328369140625) * _2591) + _2180;
    }
    else
    {
        _2343 = _2022;
        _2345 = _2023;
        _2347 = _2024;
        _2349 = _2178;
        _2351 = _2179;
        _2353 = _2180;
    }
    float _4167 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4178 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4189 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _2370 = ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2343 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _656))) + ((_2349 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    float _2371 = ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2345 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _656))) + ((_2351 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    float _2372 = ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2347 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _656))) + ((_2353 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    uint _2376 = _631 + 6u;
    float _2384 = _590 / cbSceneParam._m0[86u].x;
    float _2385 = _591 / cbSceneParam._m0[86u].y;
    vec4 _2399 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2401 = _2399.x;
    float _2402 = _2399.y;
    float _2403 = _2399.z;
    float _2404 = _2399.w;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2463 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2464 = _2463 / _577;
        float _2475 = _2464 * _263;
        float _2476 = _264 * _2464;
        float _2477 = (-0.0) - _2476;
        float _2478 = _2464 * _265;
        float _2480 = (cbSceneParam._m0[77u].w * _2477) / _2463;
        float _2481 = _2480 + cbSceneParam._m0[79u].w;
        float _2482 = cbSceneParam._m0[79u].w - _2476;
        float _2488 = sqrt(((_2475 * _2475) + (_2476 * _2476)) + (_2478 * _2478));
        float _2491 = (1.0 - (cbSceneParam._m0[77u].w / _2463)) * _2488;
        float _2496 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2498 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2698;
        if (abs((_2477 - _2480) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2698 = ((((_2481 > 0.0) ? exp2(_2496 * _2481) : (2.0 - exp2(_2498 * _2481))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2491;
        }
        else
        {
            float _2637 = 1.0 / cbSceneParam._m0[80u].x;
            float _2638 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : max(_2481, _2482));
            float _2639 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : min(_2481, _2482));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            _2698 = ((abs(_2488 / _2477) * cbSceneParam._m0[80u].y) * ((((_2648 - _2649) * 2.0) - ((exp2(_2496 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)))) - exp2(_2496 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))))) * _2637)) - ((exp2(_2498 * _2648) - exp2(_2498 * _2649)) * _2637))) + (_2491 * cbSceneParam._m0[80u].z);
        }
        vec4 _2700 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2384, _2385, 1.0), 0.0);
        float _2709 = exp2((_2698 * (-1.44269502162933349609375)) * (1.0 - _2700.w));
        float _2710 = log2(_2709);
        float _2726 = log2(_2404);
        _2500 = (exp2(_2726 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].x)) * _2700.x) / cbSceneParam._m0[78u].x)) + _2401;
        _2502 = (exp2(_2726 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].y)) * _2700.y) / cbSceneParam._m0[78u].y)) + _2402;
        _2504 = (exp2(_2726 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].z)) * _2700.z) / cbSceneParam._m0[78u].z)) + _2403;
        _2506 = _2709 * _2404;
    }
    else
    {
        _2500 = _2401;
        _2502 = _2402;
        _2504 = _2403;
        _2506 = _2404;
    }
    float _2518 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2519 = _2518 == 3.0;
    float _2520 = log2(_2506);
    float _2527 = exp2(_2520 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0)));
    float _2528 = exp2(_2520 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0)));
    float _2529 = exp2(_2520 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0)));
    float _2538 = (_2518 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2538 * (_2519 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.y = _2538 * (_2519 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.z = _2538 * (_2519 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2504)));
    SV_Target.w = cbInstanceData._m0[_2376].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2376].w;
}


