#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1048;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _564 = _350 * cbMtdParam._m0[21u].x;
    float _565 = _351 * cbMtdParam._m0[20u].w;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _371 ? (cbMtdParam._m0[17u].z / _349) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _591 = ((_583 * _349) + _587) / _587;
    float _596 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _598 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _615 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_380 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_383 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _627;
    if (_566)
    {
        _627 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _627 = frontier_phi_35_34_ladder;
    }
    float _633;
    if (_573)
    {
        _633 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _633 = frontier_phi_39_38_ladder;
    }
    float _635 = isnan(_633) ? _627 : (isnan(_627) ? _633 : min(_627, _633));
    float _636 = isnan(_581) ? _635 : (isnan(_635) ? _581 : min(_635, _581));
    float _643 = ((_636 * _349) + _587) / _587;
    vec4 _663 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_380 + (_636 * _564)) / _643) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_383 + (_636 * _565)) / _643) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _665 = _663.x;
    float _672 = (_665 * ((_615.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _673 = (_665 * ((_615.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _674 = (_665 * ((_615.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _3305 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3316 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3327 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _698 = _265 * _697;
    float _699 = _266 * _697;
    float _700 = _267 * _697;
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _720 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_720 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3338 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _746 = _743.x * TEXCOORD.z;
    float _747 = (-0.0) - _698;
    float _748 = (-0.0) - _699;
    float _749 = (-0.0) - _700;
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1047;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = (cbModelParam._m0[37u].x * ((((fma(_779, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _837 = (cbModelParam._m0[37u].y * ((((fma(_779, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _838 = (((((fma(_779, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _837, _838), 0.0);
        float _875 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_841.x + (-0.5));
        float _877 = _875 * (_841.y + (-0.5));
        float _878 = _875 * (_841.z + (-0.5));
        float _885 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_848.x + (-0.5));
        float _887 = _885 * (_848.y + (-0.5));
        float _888 = _885 * (_848.z + (-0.5));
        float _895 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_855.x + (-0.5));
        float _897 = _895 * (_855.y + (-0.5));
        float _898 = _895 * (_855.z + (-0.5));
        float _905 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_862.x + (-0.5));
        float _907 = _905 * (_862.y + (-0.5));
        float _908 = _905 * (_862.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _929 = (dot(vec3(0.0), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _939 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3408 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_941 + 1.0))) + _946) * _909;
        float _956 = _877 * 0.5;
        float _957 = _887 * 0.5;
        float _958 = _897 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(0.0), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3441 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_983 + 1.0))) + _988) * _910;
        float _998 = _878 * 0.5;
        float _999 = _888 * 0.5;
        float _1000 = _898 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(0.0), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3474 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1025 + 1.0))) + _1030) * _911;
        _1047 = _878;
        _1049 = _877;
        _1050 = _876;
        _1051 = _888;
        _1052 = _887;
        _1053 = _886;
        _1054 = _898;
        _1055 = _897;
        _1056 = _896;
        _1057 = _911;
        _1058 = _910;
        _1059 = _909;
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _1048;
        _1049 = _1048;
        _1050 = _1048;
        _1051 = _1048;
        _1052 = _1048;
        _1053 = _1048;
        _1054 = _1048;
        _1055 = _1048;
        _1056 = _1048;
        _1057 = _1048;
        _1058 = _1048;
        _1059 = _1048;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = (cbModelParam._m0[38u].x * ((((fma(_779, cbModelParam._m0[30u].z, fma(_775, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _771)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1117 = (cbModelParam._m0[38u].y * ((((fma(_779, cbModelParam._m0[31u].z, fma(_775, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _771)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1118 = (((((fma(_779, cbModelParam._m0[32u].z, fma(_775, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _771)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1153 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1120.x + (-0.5));
        float _1155 = _1153 * (_1120.y + (-0.5));
        float _1156 = _1153 * (_1120.z + (-0.5));
        float _1163 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1127.x + (-0.5));
        float _1165 = _1163 * (_1127.y + (-0.5));
        float _1166 = _1163 * (_1127.z + (-0.5));
        float _1173 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1134.x + (-0.5));
        float _1175 = _1173 * (_1134.y + (-0.5));
        float _1176 = _1173 * (_1134.z + (-0.5));
        float _1183 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1141.x + (-0.5));
        float _1185 = _1183 * (_1141.y + (-0.5));
        float _1186 = _1183 * (_1141.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(0.0), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3537 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1217 + 1.0))) + _1222) * _1187;
        float _1232 = _1155 * 0.5;
        float _1233 = _1165 * 0.5;
        float _1234 = _1175 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(0.0), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3570 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1259 + 1.0))) + _1264) * _1188;
        float _1274 = _1156 * 0.5;
        float _1275 = _1166 * 0.5;
        float _1276 = _1176 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(0.0), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3603 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1301 + 1.0))) + _1306) * _1189;
        _1323 = _1156;
        _1324 = _1155;
        _1325 = _1154;
        _1326 = _1166;
        _1327 = _1165;
        _1328 = _1164;
        _1329 = _1176;
        _1330 = _1175;
        _1331 = _1174;
        _1332 = _1189;
        _1333 = _1188;
        _1334 = _1187;
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1048;
        _1324 = _1048;
        _1325 = _1048;
        _1326 = _1048;
        _1327 = _1048;
        _1328 = _1048;
        _1329 = _1048;
        _1330 = _1048;
        _1331 = _1048;
        _1332 = _1048;
        _1333 = _1048;
        _1334 = _1048;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1060)) + _1060;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1061)) + _1061;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1062)) + _1062;
    float _1370 = fma(_1349, cbSceneParam._m0[89u].z, fma(_1348, cbSceneParam._m0[89u].y, _1347 * cbSceneParam._m0[89u].x));
    float _1373 = fma(_1349, cbSceneParam._m0[90u].z, fma(_1348, cbSceneParam._m0[90u].y, _1347 * cbSceneParam._m0[90u].x));
    float _1376 = fma(_1349, cbSceneParam._m0[91u].z, fma(_1348, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1347));
    float _1391 = _698 * (-0.5);
    float _1392 = _699 * (-0.5);
    float _1393 = _700 * (-0.5);
    float _1394 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1397 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1400 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1434;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1407 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1047, _1051, _1054, _1057));
        float _1411 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1415 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1422 = dot(vec4(cbModelParam._m0[39u]), vec4(_1391, _1392, _1393, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1445;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1436 = dot(vec4(cbModelParam._m0[40u]), vec4(_1391, _1392, _1393, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1449 = (_1445 * cbModelParam._m0[1u].x) + (_1434 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1538;
    float _1540;
    float _1542;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1505 = fma(_779, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771)) + cbModelParam._m0[13u].w;
        float _1509 = fma(_779, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771)) + cbModelParam._m0[14u].w;
        float _1513 = fma(_779, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771)) + cbModelParam._m0[15u].w;
        float _1516 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1519 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1522 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1548;
        if (_1516 > 0.0)
        {
            _1548 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1548 = frontier_phi_54_52_ladder;
        }
        float _1718;
        if (_1519 > 0.0)
        {
            _1718 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1718 = frontier_phi_63_59_ladder;
        }
        float _2113;
        if (_1522 > 0.0)
        {
            _2113 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2113 = frontier_phi_75_70_ladder;
        }
        float _2115 = isnan(_1718) ? _1548 : (isnan(_1548) ? _1718 : min(_1548, _1718));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1516) + _1505;
        float _2121 = (_2116 * _1519) + _1509;
        float _2122 = (_2116 * _1522) + _1513;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1458);
            frontier_phi_53_75_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1538 = frontier_phi_53_75_ladder_2;
        _1540 = frontier_phi_53_75_ladder_1;
        _1542 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1458);
        _1538 = _1526.x * cbModelParam._m0[1u].y;
        _1540 = _1526.y * cbModelParam._m0[1u].y;
        _1542 = _1526.z * cbModelParam._m0[1u].y;
    }
    float _1545 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1597 = fma(_779, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771)) + cbModelParam._m0[21u].w;
        float _1601 = fma(_779, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771)) + cbModelParam._m0[22u].w;
        float _1605 = fma(_779, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771)) + cbModelParam._m0[23u].w;
        float _1608 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1611 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1614 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1723;
        if (_1608 > 0.0)
        {
            _1723 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1723 = frontier_phi_65_61_ladder;
        }
        float _2140;
        if (_1611 > 0.0)
        {
            _2140 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2140 = frontier_phi_77_72_ladder;
        }
        float _2478;
        if (_1614 > 0.0)
        {
            _2478 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2478 = frontier_phi_89_84_ladder;
        }
        float _2480 = isnan(_2140) ? _1723 : (isnan(_1723) ? _2140 : min(_1723, _2140));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1608) + _1597;
        float _2486 = (_2481 * _1611) + _1601;
        float _2487 = (_2481 * _1614) + _1605;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2488;
        float _2491 = _2488 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2487 > _2491) || ((_2487 < _2489) || ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 < _2489) || (_2485 > _2491))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2487, cbModelParam._m0[17u].z, fma(_2486, cbModelParam._m0[17u].y, _2485 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2487, cbModelParam._m0[18u].z, fma(_2486, cbModelParam._m0[18u].y, _2485 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2487, cbModelParam._m0[19u].z, fma(_2486, cbModelParam._m0[19u].y, _2485 * cbModelParam._m0[19u].x))), _1545);
            frontier_phi_62_89_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1633 = frontier_phi_62_89_ladder_2;
        _1635 = frontier_phi_62_89_ladder_1;
        _1637 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1545);
        _1633 = _1617.x * cbModelParam._m0[1u].z;
        _1635 = _1617.y * cbModelParam._m0[1u].z;
        _1637 = _1617.z * cbModelParam._m0[1u].z;
    }
    float _1649 = _746 * 0.01200000010430812835693359375;
    float _1651 = _1649 * ((cbModelParam._m0[1u].w * (_1633 - _1538)) + _1538);
    float _1652 = _1649 * ((cbModelParam._m0[1u].w * (_1635 - _1540)) + _1540);
    float _1653 = _1649 * ((cbModelParam._m0[1u].w * (_1637 - _1542)) + _1542);
    float _1656 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1710 = _1697 / _1709;
    float _1711 = _1701 / _1709;
    float _1712 = _1705 / _1709;
    float _1860;
    float _1861;
    float _1862;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1739 = ((uint(_1712 > cbSceneParam._m0[59u].y) + uint(_1712 > cbSceneParam._m0[59u].x)) + uint(_1712 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1740 = _1739 + 43u;
        uint _1748 = _1739 + 44u;
        uint _1756 = _1739 + 45u;
        uint _1764 = _1739 + 46u;
        float _1775 = fma(_1709, cbSceneParam._m0[_1740].w, fma(_1705, cbSceneParam._m0[_1740].z, fma(_1701, cbSceneParam._m0[_1740].y, _1697 * cbSceneParam._m0[_1740].x)));
        float _1779 = fma(_1709, cbSceneParam._m0[_1748].w, fma(_1705, cbSceneParam._m0[_1748].z, fma(_1701, cbSceneParam._m0[_1748].y, _1697 * cbSceneParam._m0[_1748].x)));
        float _1787 = fma(_1709, cbSceneParam._m0[_1764].w, fma(_1705, cbSceneParam._m0[_1764].z, fma(_1701, cbSceneParam._m0[_1764].y, _1697 * cbSceneParam._m0[_1764].x)));
        float _1792 = cbSceneParam._m0[33u].z * _1787;
        float _1794 = cbSceneParam._m0[33u].w * _1787;
        float _1797 = fma(_1709, cbSceneParam._m0[_1756].w, fma(_1705, cbSceneParam._m0[_1756].z, fma(_1701, cbSceneParam._m0[_1756].y, _1697 * cbSceneParam._m0[_1756].x))) / _1787;
        float _1845 = (cbSceneParam._m0[33u].x - sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712))) * cbSceneParam._m0[33u].y;
        float _3729 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1853 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 + _1775) / _1787, (_1794 + _1779) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 + _1775) / _1787, (_1779 - _1792) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 - _1792) / _1787, (_1779 - _1794) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 - _1794) / _1787, (_1792 + _1779) / _1787), _1797), 0.0)).x), vec4(0.25)));
        _1860 = 1.0 - (_1853 * cbSceneParam._m0[34u].x);
        _1861 = 1.0 - (_1853 * cbSceneParam._m0[34u].y);
        _1862 = 1.0 - (_1853 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1860 = 1.0;
        _1861 = 1.0;
        _1862 = 1.0;
    }
    float _1926;
    float _1928;
    float _1930;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1914 = fma(_1709, cbSceneParam._m0[63u].w, fma(_1705, cbSceneParam._m0[63u].z, fma(_1701, cbSceneParam._m0[63u].y, _1697 * cbSceneParam._m0[63u].x)));
        float _1915 = fma(_1709, cbSceneParam._m0[60u].w, fma(_1705, cbSceneParam._m0[60u].z, fma(_1701, cbSceneParam._m0[60u].y, _1697 * cbSceneParam._m0[60u].x))) / _1914;
        float _1916 = fma(_1709, cbSceneParam._m0[61u].w, fma(_1705, cbSceneParam._m0[61u].z, fma(_1701, cbSceneParam._m0[61u].y, _1697 * cbSceneParam._m0[61u].x))) / _1914;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1915 >= cbSceneParam._m0[64u].x) && (_1916 >= cbSceneParam._m0[64u].y)) && (_1915 <= cbSceneParam._m0[64u].z)) && (_1916 <= cbSceneParam._m0[64u].w))
        {
            float _2153 = fma(_1709, cbSceneParam._m0[62u].w, fma(_1705, cbSceneParam._m0[62u].z, fma(_1701, cbSceneParam._m0[62u].y, _1697 * cbSceneParam._m0[62u].x))) / _1914;
            float _2157 = isnan(cbSceneParam._m0[41u].w) ? _2153 : (isnan(_2153) ? cbSceneParam._m0[41u].w : max(_2153, cbSceneParam._m0[41u].w));
            float _2200 = (cbSceneParam._m0[33u].x - sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712))) * cbSceneParam._m0[33u].y;
            float _3745 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
            float _2207 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1915, cbSceneParam._m0[33u].w + _1916), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1915, _1916 - cbSceneParam._m0[33u].z), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].z, _1916 - cbSceneParam._m0[33u].w), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1915 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1916), _2157), 0.0)).x), vec4(0.25)));
            float _2211 = 1.0 - (_2207 * cbSceneParam._m0[34u].x);
            float _2212 = 1.0 - (_2207 * cbSceneParam._m0[34u].y);
            float _2213 = 1.0 - (_2207 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2211) ? _1860 : (isnan(_1860) ? _2211 : min(_1860, _2211));
            frontier_phi_74_73_ladder_1 = isnan(_2212) ? _1861 : (isnan(_1861) ? _2212 : min(_1861, _2212));
            frontier_phi_74_73_ladder_2 = isnan(_2213) ? _1862 : (isnan(_1862) ? _2213 : min(_1862, _2213));
        }
        else
        {
            frontier_phi_74_73_ladder = _1860;
            frontier_phi_74_73_ladder_1 = _1861;
            frontier_phi_74_73_ladder_2 = _1862;
        }
        _1926 = frontier_phi_74_73_ladder;
        _1928 = frontier_phi_74_73_ladder_1;
        _1930 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _1926 = _1860;
        _1928 = _1861;
        _1930 = _1862;
    }
    uvec4 _1936 = floatBitsToUint(cbInstanceData._m0[_720 + 5u]);
    uint _1938 = _1936.x * 14u;
    uint _1939 = _1938 + 13u;
    float _1944 = _746 + (-1.0);
    float _1947 = (cbLight._m0[_1939].x * _1944) + 1.0;
    float _1948 = (cbLight._m0[_1939].y * _1944) + 1.0;
    uint _1949 = _1938 + 5u;
    float _1955 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1959 = _1938 + 4u;
    float _1968 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1972 = _1938 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1938].xyz), vec3(0.0));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(0.0));
    float _3781 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _3792 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1949].x * _1955) * _1993) + (((cbLight._m0[_1959].x * _1926) * _1968) * _1991);
    float _2001 = ((_1955 * cbLight._m0[_1949].y) * _1993) + (((cbLight._m0[_1959].y * _1928) * _1968) * _1991);
    float _2002 = ((_1955 * cbLight._m0[_1949].z) * _1993) + (((cbLight._m0[_1959].z * _1930) * _1968) * _1991);
    uint _2003 = _1938 + 8u;
    float _2009 = cbLight._m0[_1938].x + _698;
    float _2010 = cbLight._m0[_1938].y + _699;
    float _2011 = cbLight._m0[_1938].z + _700;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2019 = dot(vec3(0.0), vec3(cbLight._m0[_1938].xyz));
    float _3803 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _2023 = dot(vec3(0.0), vec3(_698, _699, _700));
    float _3814 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1938].xyz), vec3(_2009 * _2015, _2010 * _2015, _2011 * _2015));
    float _3825 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2044 = (0.5 / ((_2022 + 9.9999999392252902907785028219223e-09) + _2026)) * _2022;
    float _3836 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.31831014156341552734375;
    uint _2060 = _1938 + 9u;
    float _2066 = cbLight._m0[_1972].x + _698;
    float _2067 = cbLight._m0[_1972].y + _699;
    float _2068 = cbLight._m0[_1972].z + _700;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2076 = dot(vec3(0.0), vec3(cbLight._m0[_1972].xyz));
    float _3847 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2066 * _2072, _2067 * _2072, _2068 * _2072));
    float _3858 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = (0.5 / ((_2079 + 9.9999999392252902907785028219223e-09) + _2026)) * _2079;
    float _3869 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.31831014156341552734375;
    float _2105 = (((_2089 * cbLight._m0[_2060].x) * _2095) * _1955) + ((((cbLight._m0[_2003].x * _1926) * _2038) * _2046) * _1968);
    float _2106 = (((_2089 * cbLight._m0[_2060].y) * _2095) * _1955) + ((((cbLight._m0[_2003].y * _1928) * _2038) * _2046) * _1968);
    float _2107 = (((_2089 * cbLight._m0[_2060].z) * _2095) * _1955) + ((((cbLight._m0[_2003].z * _1930) * _2038) * _2046) * _1968);
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_1936.y == 0u)
    {
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.x;
        uint _2237 = uint((float(_2225.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2226))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2226)));
        float _2247 = (log2(_1712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2248 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        uint _2251 = uint(isnan(14.0) ? _2248 : (isnan(_2248) ? 14.0 : min(_2248, 14.0)));
        uvec4 _2256 = texelFetch(g_lightClusterGridBuffer, int(((_2251 << 2u) + (_2237 << 6u)) >> 2u));
        uint _2257 = _2256.x;
        uint _2258 = _2225.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2258 >> 4u) & 15u)) + 4294967295u) & _2257) == 0u) || ((_2258 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            uint _2539 = 0u;
            uint _2548;
            bool _2549;
            for (;;)
            {
                _2548 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                _2549 = _2548 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2549)
                {
                    frontier_phi_98_pred = _2533;
                    frontier_phi_98_pred_1 = _2534;
                    frontier_phi_98_pred_2 = _2538;
                    frontier_phi_98_pred_3 = _2537;
                    frontier_phi_98_pred_4 = _2536;
                    frontier_phi_98_pred_5 = _2535;
                }
                else
                {
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    uint _2684;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2548;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    for (;;)
                    {
                        uint _2688 = uint(findLSB(_2684)) + (_2539 << 5u);
                        uint _2685 = (_2684 + 4294967295u) & _2684;
                        uint _2690 = _2688 * 48u;
                        vec4 _2704 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2690)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2690 + 3u)).x));
                        uint _2710 = (_2688 * 48u) + 4u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2729 = (_2688 * 48u) + 8u;
                        vec3 _2740 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x));
                        float _2744 = _2704.x - _1710;
                        float _2745 = _2704.y - _1711;
                        float _2746 = _2704.z - _1712;
                        float _2747 = dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746));
                        float _2750 = inversesqrt(_2747);
                        float _2759 = 1.0 - (_2747 * _2704.w);
                        float _3890 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                        float _2761 = sqrt(_2747) * _2723.w;
                        float _2764 = 1.39999997615814208984375 / (_2761 + 1.39999997615814208984375);
                        float _2765 = _2764 * _2764;
                        float _2768 = ((1.0 - _2765) * dot(vec3(0.0), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746))) + _2765;
                        float _2771 = _2761 * _2761;
                        float _2775 = ((isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))) * _2760) / ((_2771 * 0.699999988079071044921875) + 1.0);
                        float _2779 = (-0.0) - _1710;
                        float _2780 = (-0.0) - _1711;
                        float _2781 = (-0.0) - _1712;
                        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
                        float _2789 = dot(vec3(0.0), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781));
                        float _3906 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _3917 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2793 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                        float _2797 = (0.5 / (((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) + 9.9999999392252902907785028219223e-09) + _2793)) * _2793;
                        float _3928 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2806 = (((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 3.1415927410125732421875) / ((_2771 * 2.1991131305694580078125) + 3.141590118408203125)) * _2760;
                        _2613 = (_2775 * _2723.x) + _2681;
                        _2614 = (_2775 * _2723.y) + _2682;
                        _2615 = (_2775 * _2723.z) + _2683;
                        _2610 = (_2806 * _2740.x) + _2678;
                        _2611 = (_2806 * _2740.y) + _2679;
                        _2612 = (_2806 * _2740.z) + _2680;
                        if (_2685 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2685;
                        }
                    }
                    frontier_phi_98_pred = _2610;
                    frontier_phi_98_pred_1 = _2611;
                    frontier_phi_98_pred_2 = _2615;
                    frontier_phi_98_pred_3 = _2614;
                    frontier_phi_98_pred_4 = _2613;
                    frontier_phi_98_pred_5 = _2612;
                }
                _2366 = frontier_phi_98_pred;
                _2368 = frontier_phi_98_pred_1;
                _2376 = frontier_phi_98_pred_2;
                _2374 = frontier_phi_98_pred_3;
                _2372 = frontier_phi_98_pred_4;
                _2370 = frontier_phi_98_pred_5;
                uint _2540 = _2539 + 1u;
                if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2533 = _2366;
                    _2534 = _2368;
                    _2535 = _2370;
                    _2536 = _2372;
                    _2537 = _2374;
                    _2538 = _2376;
                    _2539 = _2540;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2382) & _2257) == 0u)
        {
            _2504 = _2365;
            _2506 = _2367;
            _2508 = _2369;
            _2510 = _2371;
            _2512 = _2373;
            _2514 = _2375;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2661 = _2365;
                float _2662 = _2367;
                float _2663 = _2369;
                float _2664 = _2371;
                float _2665 = _2373;
                float _2666 = _2375;
                uint _2667 = _2382;
                uint _2676;
                bool _2677;
                for (;;)
                {
                    _2676 = texelFetch(g_lightClassification, int((((_2251 << 5u) + (_2237 << 9u)) + (_2667 << 2u)) >> 2u)).x;
                    _2677 = _2676 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2677)
                    {
                        frontier_phi_104_pred = _2666;
                        frontier_phi_104_pred_1 = _2665;
                        frontier_phi_104_pred_2 = _2664;
                        frontier_phi_104_pred_3 = _2663;
                        frontier_phi_104_pred_4 = _2662;
                        frontier_phi_104_pred_5 = _2661;
                    }
                    else
                    {
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _2824 = _2661;
                        float _2825 = _2662;
                        float _2826 = _2663;
                        float _2827 = _2664;
                        float _2828 = _2665;
                        float _2829 = _2666;
                        uint _2830 = _2676;
                        uint _2831;
                        vec4 _2856;
                        float _2857;
                        vec4 _2872;
                        vec3 _2884;
                        vec4 _2899;
                        vec4 _2914;
                        float _2960;
                        bool _2961;
                        for (;;)
                        {
                            uint _2841 = ((_2667 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2830));
                            _2831 = (_2830 + 4294967295u) & _2830;
                            uint _2843 = _2841 * 40u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            _2857 = _2856.w;
                            uint _2859 = (_2841 * 40u) + 4u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2841 * 40u) + 8u;
                            _2884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x));
                            uint _2886 = (_2841 * 40u) + 16u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2841 * 40u) + 20u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2841 * 40u) + 24u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2935 = (_2841 * 40u) + 28u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            _2960 = fma(_1712, _2948.z, fma(_1711, _2948.y, _2948.x * _1710)) + _2948.w;
                            _2961 = !((fma(_1712, _2929.z, fma(_1711, _2929.y, _2929.x * _1710)) + _2929.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_2961)
                            {
                                float _2988 = _2856.x - _1710;
                                float _2989 = _2856.y - _1711;
                                float _2990 = _2856.z - _1712;
                                float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                                float _2994 = inversesqrt(_2991);
                                float _2995 = _2994 * _2988;
                                float _2996 = _2994 * _2989;
                                float _2997 = _2994 * _2990;
                                float _3001 = 1.0 - (_2991 / (_2857 * _2857));
                                float _3939 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                                float _3006 = sqrt(_2991) * _2872.w;
                                float _3008 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                                float _3009 = _3008 * _3008;
                                float _3010 = 1.0 - _3009;
                                float _3012 = (_3010 * dot(vec3(_2995, _2996, _2997), vec3(0.0))) + _3009;
                                float _3015 = _3006 * _3006;
                                float _3019 = (fma(_1712, _2899.z, fma(_1711, _2899.y, _2899.x * _1710)) + _2899.w) / _2960;
                                float _3020 = (fma(_1712, _2914.z, fma(_1711, _2914.y, _2914.x * _1710)) + _2914.w) / _2960;
                                float _3024 = 1.0 - dot(vec2(_3019, _3020), vec2(_3019, _3020));
                                float _3955 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                                float _3026 = _3025 * (((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3002) / ((_3015 * 0.699999988079071044921875) + 1.0));
                                float _3036 = dot(vec3(0.0), vec3((-0.0) - (_1710 * _2529), (-0.0) - (_1711 * _2529), (-0.0) - (_1712 * _2529)));
                                float _3966 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3044 = (_3010 * dot(vec3(0.0), vec3(_2995, _2996, _2997))) + _3009;
                                float _3977 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _3049 = (0.5 / (((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) + 9.9999999392252902907785028219223e-09) + _3045)) * _3045;
                                float _3988 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3056 = (_3025 * _3002) * (((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 3.1415927410125732421875) / ((_3015 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _3056 * _2884.z;
                                frontier_phi_110_pred_1 = _3026 * _2872.z;
                                frontier_phi_110_pred_2 = _3026 * _2872.y;
                                frontier_phi_110_pred_3 = _3026 * _2872.x;
                                frontier_phi_110_pred_4 = _3056 * _2884.y;
                                frontier_phi_110_pred_5 = _3056 * _2884.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3062 = frontier_phi_110_pred;
                            _3065 = frontier_phi_110_pred_1;
                            _3064 = frontier_phi_110_pred_2;
                            _3063 = frontier_phi_110_pred_3;
                            _3061 = frontier_phi_110_pred_4;
                            _3060 = frontier_phi_110_pred_5;
                            _2814 = _3063 + _2827;
                            _2815 = _3064 + _2828;
                            _2816 = _3065 + _2829;
                            _2811 = _3060 + _2824;
                            _2812 = _3061 + _2825;
                            _2813 = _3062 + _2826;
                            if (_2831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2831;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2816;
                        frontier_phi_104_pred_1 = _2815;
                        frontier_phi_104_pred_2 = _2814;
                        frontier_phi_104_pred_3 = _2813;
                        frontier_phi_104_pred_4 = _2812;
                        frontier_phi_104_pred_5 = _2811;
                    }
                    _2515 = frontier_phi_104_pred;
                    _2513 = frontier_phi_104_pred_1;
                    _2511 = frontier_phi_104_pred_2;
                    _2509 = frontier_phi_104_pred_3;
                    _2507 = frontier_phi_104_pred_4;
                    _2505 = frontier_phi_104_pred_5;
                    uint _2668 = _2667 + 1u;
                    if (_2668 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2661 = _2505;
                        _2662 = _2507;
                        _2663 = _2509;
                        _2664 = _2511;
                        _2665 = _2513;
                        _2666 = _2515;
                        _2667 = _2668;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2515;
                frontier_phi_91_92_ladder_1 = _2513;
                frontier_phi_91_92_ladder_2 = _2511;
                frontier_phi_91_92_ladder_3 = _2509;
                frontier_phi_91_92_ladder_4 = _2507;
                frontier_phi_91_92_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_91_92_ladder = _2375;
                frontier_phi_91_92_ladder_1 = _2373;
                frontier_phi_91_92_ladder_2 = _2371;
                frontier_phi_91_92_ladder_3 = _2369;
                frontier_phi_91_92_ladder_4 = _2367;
                frontier_phi_91_92_ladder_5 = _2365;
            }
            _2504 = frontier_phi_91_92_ladder_5;
            _2506 = frontier_phi_91_92_ladder_4;
            _2508 = frontier_phi_91_92_ladder_3;
            _2510 = frontier_phi_91_92_ladder_2;
            _2512 = frontier_phi_91_92_ladder_1;
            _2514 = frontier_phi_91_92_ladder;
        }
        float _2519 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2270 = (_2519 * _2510) + _2000;
        _2272 = (_2519 * _2512) + _2001;
        _2274 = (_2519 * _2514) + _2002;
        _2276 = ((_2504 * 0.039999999105930328369140625) * _2519) + _2105;
        _2278 = ((_2506 * 0.039999999105930328369140625) * _2519) + _2106;
        _2280 = ((_2508 * 0.039999999105930328369140625) * _2519) + _2107;
    }
    else
    {
        _2270 = _2000;
        _2272 = _2001;
        _2274 = _2002;
        _2276 = _2105;
        _2278 = _2106;
        _2280 = _2107;
    }
    float _4004 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4015 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4026 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _2297 = ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2270 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _746))) + ((_2276 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2272 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _746))) + ((_2278 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2274 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _746))) + ((_2280 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1449)) * cbPerFrame._m0[3u].x);
    uint _2303 = _720 + 6u;
    float _2311 = _706 / cbSceneParam._m0[86u].x;
    float _2312 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2326 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2328 = _2326.x;
    float _2329 = _2326.y;
    float _2330 = _2326.z;
    float _2331 = _2326.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2391 = _2390 / _693;
        float _2402 = _2391 * _265;
        float _2403 = _266 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2405 = _2391 * _267;
        float _2407 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2408 = _2407 + cbSceneParam._m0[79u].w;
        float _2409 = cbSceneParam._m0[79u].w - _2403;
        float _2415 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2405 * _2405));
        float _2418 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2415;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2623;
        if (abs((_2404 - _2407) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2623 = ((((_2408 > 0.0) ? exp2(_2423 * _2408) : (2.0 - exp2(_2425 * _2408))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2418;
        }
        else
        {
            float _2562 = 1.0 / cbSceneParam._m0[80u].x;
            float _2563 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : max(_2408, _2409));
            float _2564 = isnan(_2409) ? _2408 : (isnan(_2408) ? _2409 : min(_2408, _2409));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            float _2574 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : min(_2564, 0.0));
            _2623 = ((abs(_2415 / _2404) * cbSceneParam._m0[80u].y) * ((((_2573 - _2574) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))))) * _2562)) - ((exp2(_2425 * _2573) - exp2(_2425 * _2574)) * _2562))) + (_2418 * cbSceneParam._m0[80u].z);
        }
        vec4 _2625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2311, _2312, 1.0), 0.0);
        float _2634 = exp2((_2623 * (-1.44269502162933349609375)) * (1.0 - _2625.w));
        float _2635 = log2(_2634);
        float _2651 = log2(_2331);
        _2427 = (exp2(_2651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].x)) * _2625.x) / cbSceneParam._m0[78u].x)) + _2328;
        _2429 = (exp2(_2651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].y)) * _2625.y) / cbSceneParam._m0[78u].y)) + _2329;
        _2431 = (exp2(_2651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2635 * cbSceneParam._m0[78u].z)) * _2625.z) / cbSceneParam._m0[78u].z)) + _2330;
        _2433 = _2634 * _2331;
    }
    else
    {
        _2427 = _2328;
        _2429 = _2329;
        _2431 = _2330;
        _2433 = _2331;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2448 = log2(_2433);
    float _2455 = exp2(_2448 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2456 = exp2(_2448 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0)));
    float _2457 = exp2(_2448 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)));
    float _2466 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2466 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2466 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2466 * (_2446 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = cbInstanceData._m0[_2303].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2303].w;
}


