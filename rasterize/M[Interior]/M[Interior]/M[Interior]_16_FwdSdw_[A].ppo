#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3758;
float _3759;
float _3760;
float _3761;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _290 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _293 = _290.x;
    vec4 _311 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _293) + cbMtdParam._m0[12u].x) * _311.x;
    float _330 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _293) + cbMtdParam._m0[12u].y) * _311.y;
    float _332 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _293) + cbMtdParam._m0[12u].z) * _311.z;
    vec4 _353 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _389 = cbMtdParam._m0[21u].w + _275;
    float _390 = cbMtdParam._m0[22u].x + _276;
    float _391 = cbMtdParam._m0[22u].y + _277;
    float _405 = (-0.0) - dot(vec3(_389, _390, _391), vec3(_204, _205, _206));
    float _406 = (-0.0) - dot(vec3(_389, _390, _391), vec3(_218, _219, _220));
    float _407 = (-0.0) - dot(vec3(_389, _390, _391), vec3((-0.0) - _211, (-0.0) - _212, (-0.0) - _213));
    float _411 = inversesqrt(dot(vec3(_405, _406, _407), vec3(_405, _406, _407)));
    float _414 = _411 * _407;
    float _415 = (_411 * _405) + ((cbMtdParam._m0[19u].w * _293) * ((_353.x * 2.0) + (-1.0)));
    float _416 = (_411 * _406) + ((cbMtdParam._m0[20u].x * _293) * ((_353.y * 2.0) + (-1.0)));
    float _417 = _415 * cbMtdParam._m0[18u].z;
    float _418 = _416 * cbMtdParam._m0[18u].y;
    float _419 = fract(TEXCOORD.x);
    float _420 = fract(TEXCOORD.y);
    float _426;
    if (_417 > 0.0)
    {
        _426 = (1.0 - _419) / _417;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_417 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _419) / _417;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _426 = frontier_phi_3_2_ladder;
    }
    float _434;
    if (_418 > 0.0)
    {
        _434 = (1.0 - _420) / _418;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_418 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _420) / _418;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _434 = frontier_phi_7_6_ladder;
    }
    bool _436 = _414 > 0.0;
    float _438 = _436 ? (cbMtdParam._m0[15u].x / _414) : 5000.0;
    float _439 = isnan(_434) ? _426 : (isnan(_426) ? _434 : min(_426, _434));
    float _440 = isnan(_438) ? _439 : (isnan(_439) ? _438 : min(_439, _438));
    float _444 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _445 = _419 + (-0.5);
    float _448 = _420 + (-0.5);
    float _451 = ((_440 * _414) + _444) / _444;
    vec4 _475 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_445 + (_440 * _417)) / _451) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_448 + (_440 * _418)) / _451) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _488 = (_475.x * _293) * cbMtdParam._m0[9u].x;
    float _489 = (_475.y * _293) * cbMtdParam._m0[9u].y;
    float _490 = (_475.z * _293) * cbMtdParam._m0[9u].z;
    float _508 = _415 * cbMtdParam._m0[20u].z;
    float _509 = _416 * cbMtdParam._m0[20u].y;
    bool _510 = _508 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _419) / _508;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _419) / _508;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _515 = frontier_phi_11_10_ladder;
    }
    bool _517 = _509 > 0.0;
    float _522;
    if (_517)
    {
        _522 = (1.0 - _420) / _509;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _420) / _509;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _522 = frontier_phi_15_14_ladder;
    }
    float _525 = _436 ? (cbMtdParam._m0[16u].x / _414) : 5000.0;
    float _526 = isnan(_522) ? _515 : (isnan(_515) ? _522 : min(_515, _522));
    float _527 = isnan(_525) ? _526 : (isnan(_526) ? _525 : min(_526, _525));
    float _531 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _535 = ((_527 * _414) + _531) / _531;
    float _540 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _542 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _558 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_445 + (_527 * _508)) / _535) + 0.5) + _540) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_448 + (_527 * _509)) / _535) + 0.5) + _542) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _573;
    if (_510)
    {
        _573 = (1.0 - _419) / _508;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _419) / _508;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _573 = frontier_phi_19_18_ladder;
    }
    float _579;
    if (_517)
    {
        _579 = (1.0 - _420) / _509;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _420) / _509;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _579 = frontier_phi_23_22_ladder;
    }
    float _581 = isnan(_579) ? _573 : (isnan(_573) ? _579 : min(_573, _579));
    float _582 = isnan(_525) ? _581 : (isnan(_581) ? _525 : min(_581, _525));
    float _589 = ((_582 * _414) + _531) / _531;
    vec4 _610 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_445 + (_582 * _508)) / _589) + 0.5) + _540) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_448 + (_582 * _509)) / _589) + 0.5) + _542) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _612 = _610.x;
    float _622 = (((((cbMtdParam._m0[10u].x * _293) * _558.x) - _488) * _293) * _612) + _488;
    float _623 = (((((cbMtdParam._m0[10u].y * _293) * _558.y) - _489) * _293) * _612) + _489;
    float _624 = (((((cbMtdParam._m0[10u].z * _293) * _558.z) - _490) * _293) * _612) + _490;
    float _638 = _415 * cbMtdParam._m0[21u].x;
    float _639 = _416 * cbMtdParam._m0[20u].w;
    bool _640 = _638 > 0.0;
    float _645;
    if (_640)
    {
        _645 = (1.0 - _419) / _638;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _419) / _638;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _645 = frontier_phi_27_26_ladder;
    }
    bool _647 = _639 > 0.0;
    float _652;
    if (_647)
    {
        _652 = (1.0 - _420) / _639;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _420) / _639;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _652 = frontier_phi_31_30_ladder;
    }
    float _655 = _436 ? (cbMtdParam._m0[17u].z / _414) : 5000.0;
    float _656 = isnan(_652) ? _645 : (isnan(_645) ? _652 : min(_645, _652));
    float _657 = isnan(_655) ? _656 : (isnan(_656) ? _655 : min(_656, _655));
    float _661 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _665 = ((_657 * _414) + _661) / _661;
    float _670 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _672 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _689 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_445 + (_657 * _638)) / _665) + 0.5) + _670) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_448 + (_657 * _639)) / _665) + 0.5) + _672) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _704;
    if (_640)
    {
        _704 = (1.0 - _419) / _638;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _419) / _638;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _704 = frontier_phi_35_34_ladder;
    }
    float _710;
    if (_647)
    {
        _710 = (1.0 - _420) / _639;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _420) / _639;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _710 = frontier_phi_39_38_ladder;
    }
    float _712 = isnan(_710) ? _704 : (isnan(_704) ? _710 : min(_704, _710));
    float _713 = isnan(_655) ? _712 : (isnan(_712) ? _655 : min(_712, _655));
    float _720 = ((_713 * _414) + _661) / _661;
    vec4 _740 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_445 + (_713 * _638)) / _720) + 0.5) + _670) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_448 + (_713 * _639)) / _720) + 0.5) + _672) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _742 = _740.x;
    float _752 = _293 * 0.1500000059604644775390625;
    float _763 = (_752 * ((_622 - _328) + (((((cbMtdParam._m0[14u].x * _293) * _689.x) - _622) * _293) * _742))) + _328;
    float _764 = (_752 * ((_623 - _330) + (((((cbMtdParam._m0[14u].y * _293) * _689.y) - _623) * _293) * _742))) + _330;
    float _765 = (_752 * ((_624 - _332) + (((((cbMtdParam._m0[14u].z * _293) * _689.z) - _624) * _293) * _742))) + _332;
    vec4 _777 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _781 = _777.z;
    float _784 = (_777.x * 2.0) + (-1.0);
    float _785 = (_777.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3820 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    float _794 = fma(_791, _211, fma(_785, _218, _784 * _204));
    float _797 = fma(_791, _212, fma(_785, _219, _784 * _205));
    float _800 = fma(_791, _213, fma(_785, _220, _784 * _206));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3831 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _808 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3853 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3864 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _832 = _275 * _831;
    float _833 = _276 * _831;
    float _834 = _277 * _831;
    vec4 _839 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _841 = _839.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3875 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3886 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) - _1005)) + _1005) < ((_841 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _853 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _854 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _876 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _879 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _892 = uint(roundEven(NORMAL.w)) * 13u;
    uint _894 = _892 + 9u;
    uint _895 = _894 + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3897 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _853, cbSceneParam._m0[86u].y * _854));
    float _918 = _915.x * TEXCOORD.z;
    float _919 = dot(vec3(_805, _806, _807), vec3(_832, _833, _834));
    float _922 = _919 * 2.0;
    float _926 = (_922 * _805) - _832;
    float _927 = (_922 * _806) - _833;
    float _928 = (_922 * _807) - _834;
    float _932 = abs(dot(vec3(_832, _833, _834), vec3(_805, _806, _807)));
    float _3930 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _934 = sqrt(_808);
    float _947 = exp2((_934 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_934 * 3.0));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1047 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1051 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _805;
        float _1075 = _983 + _806;
        float _1076 = _987 + _807;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1043;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1047;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1051;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_805, _806, _807), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3978 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_805, _806, _807), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4011 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_805, _806, _807), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4044 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1364 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1368 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1391 = _979 + _805;
        float _1392 = _983 + _806;
        float _1393 = _987 + _807;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_805, _806, _807), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4107 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_805, _806, _807), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4140 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_805, _806, _807), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4173 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = _1317;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _926 * 0.5;
    float _1698 = _927 * 0.5;
    float _1699 = _928 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_928, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926));
        float _1827 = fma(_928, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926));
        float _1830 = fma(_928, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1858 = frontier_phi_57_55_ladder;
        }
        float _2026;
        if (_1827 > 0.0)
        {
            _2026 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2026 = frontier_phi_66_62_ladder;
        }
        float _2470;
        if (_1830 > 0.0)
        {
            _2470 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2470 = frontier_phi_78_73_ladder;
        }
        float _2472 = isnan(_2026) ? _1858 : (isnan(_1858) ? _2026 : min(_1858, _2026));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1824) + _1813;
        float _2478 = (_2473 * _1827) + _1817;
        float _2479 = (_2473 * _1830) + _1821;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2480;
        float _2484 = _2480 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 > _2484) || ((_2478 < _2482) || ((_2477 < _2482) || (_2477 > _2484))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2479, cbModelParam._m0[9u].z, fma(_2478, cbModelParam._m0[9u].y, _2477 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2479, cbModelParam._m0[10u].z, fma(_2478, cbModelParam._m0[10u].y, _2477 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2479, cbModelParam._m0[11u].z, fma(_2478, cbModelParam._m0[11u].y, _2477 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_56_78_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_56_78_ladder_2;
        _1848 = frontier_phi_56_78_ladder_1;
        _1850 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_926, _927, _928), _1766);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_928, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926));
        float _1921 = fma(_928, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926));
        float _1924 = fma(_928, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926));
        float _2031;
        if (_1918 > 0.0)
        {
            _2031 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2031 = frontier_phi_68_64_ladder;
        }
        float _2497;
        if (_1921 > 0.0)
        {
            _2497 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2497 = frontier_phi_80_75_ladder;
        }
        float _2842;
        if (_1924 > 0.0)
        {
            _2842 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2842 = frontier_phi_92_87_ladder;
        }
        float _2844 = isnan(_2497) ? _2031 : (isnan(_2031) ? _2497 : min(_2031, _2497));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _1918) + _1907;
        float _2850 = (_2845 * _1921) + _1911;
        float _2851 = (_2845 * _1924) + _1915;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_65_92_ladder = _2988.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2988.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2988.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_65_92_ladder_2;
        _1945 = frontier_phi_65_92_ladder_1;
        _1947 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_926, _927, _928), _1855);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1959 = ((((1.0 - _947) * ((_934 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_947 * _934)) * _918;
    float _1960 = _1959 * ((cbModelParam._m0[1u].w * (_1943 - _1846)) + _1846);
    float _1961 = _1959 * ((cbModelParam._m0[1u].w * (_1945 - _1848)) + _1848);
    float _1962 = _1959 * ((cbModelParam._m0[1u].w * (_1947 - _1850)) + _1850);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2018 = _2005 / _2017;
    float _2019 = _2009 / _2017;
    float _2020 = _2013 / _2017;
    float _2167;
    float _2168;
    float _2169;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2047 = ((uint(_2020 > cbSceneParam._m0[59u].y) + uint(_2020 > cbSceneParam._m0[59u].x)) + uint(_2020 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2048 = _2047 + 43u;
        uint _2056 = _2047 + 44u;
        uint _2064 = _2047 + 45u;
        uint _2072 = _2047 + 46u;
        float _2083 = fma(_2017, cbSceneParam._m0[_2048].w, fma(_2013, cbSceneParam._m0[_2048].z, fma(_2009, cbSceneParam._m0[_2048].y, _2005 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2017, cbSceneParam._m0[_2056].w, fma(_2013, cbSceneParam._m0[_2056].z, fma(_2009, cbSceneParam._m0[_2056].y, _2005 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2017, cbSceneParam._m0[_2072].w, fma(_2013, cbSceneParam._m0[_2072].z, fma(_2009, cbSceneParam._m0[_2072].y, _2005 * cbSceneParam._m0[_2072].x)));
        float _2100 = cbSceneParam._m0[33u].z * _2095;
        float _2102 = cbSceneParam._m0[33u].w * _2095;
        float _2105 = fma(_2017, cbSceneParam._m0[_2064].w, fma(_2013, cbSceneParam._m0[_2064].z, fma(_2009, cbSceneParam._m0[_2064].y, _2005 * cbSceneParam._m0[_2064].x))) / _2095;
        float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
        float _4299 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2160 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2083) / _2095, (_2102 + _2087) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2083) / _2095, (_2087 - _2100) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2100) / _2095, (_2087 - _2102) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2102) / _2095, (_2100 + _2087) / _2095), _2105), 0.0)).x), vec4(0.25)));
        _2167 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
        _2168 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
        _2169 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2167 = 1.0;
        _2168 = 1.0;
        _2169 = 1.0;
    }
    float _2233;
    float _2235;
    float _2237;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2221 = fma(_2017, cbSceneParam._m0[63u].w, fma(_2013, cbSceneParam._m0[63u].z, fma(_2009, cbSceneParam._m0[63u].y, _2005 * cbSceneParam._m0[63u].x)));
        float _2222 = fma(_2017, cbSceneParam._m0[60u].w, fma(_2013, cbSceneParam._m0[60u].z, fma(_2009, cbSceneParam._m0[60u].y, _2005 * cbSceneParam._m0[60u].x))) / _2221;
        float _2223 = fma(_2017, cbSceneParam._m0[61u].w, fma(_2013, cbSceneParam._m0[61u].z, fma(_2009, cbSceneParam._m0[61u].y, _2005 * cbSceneParam._m0[61u].x))) / _2221;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2222 >= cbSceneParam._m0[64u].x) && (_2223 >= cbSceneParam._m0[64u].y)) && (_2222 <= cbSceneParam._m0[64u].z)) && (_2223 <= cbSceneParam._m0[64u].w))
        {
            float _2510 = fma(_2017, cbSceneParam._m0[62u].w, fma(_2013, cbSceneParam._m0[62u].z, fma(_2009, cbSceneParam._m0[62u].y, _2005 * cbSceneParam._m0[62u].x))) / _2221;
            float _2514 = isnan(cbSceneParam._m0[41u].w) ? _2510 : (isnan(_2510) ? cbSceneParam._m0[41u].w : max(_2510, cbSceneParam._m0[41u].w));
            float _2557 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
            float _4315 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
            float _2564 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2222, cbSceneParam._m0[33u].w + _2223), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2222, _2223 - cbSceneParam._m0[33u].z), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].z, _2223 - cbSceneParam._m0[33u].w), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2223), _2514), 0.0)).x), vec4(0.25)));
            float _2568 = 1.0 - (_2564 * cbSceneParam._m0[34u].x);
            float _2569 = 1.0 - (_2564 * cbSceneParam._m0[34u].y);
            float _2570 = 1.0 - (_2564 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2570) ? _2169 : (isnan(_2169) ? _2570 : min(_2169, _2570));
            frontier_phi_77_76_ladder_1 = isnan(_2569) ? _2168 : (isnan(_2168) ? _2569 : min(_2168, _2569));
            frontier_phi_77_76_ladder_2 = isnan(_2568) ? _2167 : (isnan(_2167) ? _2568 : min(_2167, _2568));
        }
        else
        {
            frontier_phi_77_76_ladder = _2169;
            frontier_phi_77_76_ladder_1 = _2168;
            frontier_phi_77_76_ladder_2 = _2167;
        }
        _2233 = frontier_phi_77_76_ladder_2;
        _2235 = frontier_phi_77_76_ladder_1;
        _2237 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2233 = _2167;
        _2235 = _2168;
        _2237 = _2169;
    }
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_892 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2250 = _918 + (-1.0);
    float _2253 = (cbLight._m0[_2245].x * _2250) + 1.0;
    float _2254 = (cbLight._m0[_2245].y * _2250) + 1.0;
    uint _2255 = _2244 + 5u;
    float _2261 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2265 = _2244 + 4u;
    float _2274 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2278 = _2244 | 1u;
    float _2289 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_805, _806, _807));
    float _2292 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_805, _806, _807));
    float _4351 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _4362 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2299 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2306 = ((cbLight._m0[_2255].x * _2261) * _2299) + (((cbLight._m0[_2265].x * _2233) * _2274) * _2297);
    float _2307 = ((_2261 * cbLight._m0[_2255].y) * _2299) + (((cbLight._m0[_2265].y * _2235) * _2274) * _2297);
    float _2308 = ((_2261 * cbLight._m0[_2255].z) * _2299) + (((cbLight._m0[_2265].z * _2237) * _2274) * _2297);
    uint _2310 = _2244 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _808) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2244].x + _832;
    float _2326 = cbLight._m0[_2244].y + _833;
    float _2327 = cbLight._m0[_2244].z + _834;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2244].xyz));
    float _4373 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2339 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2340 = dot(vec3(_805, _806, _807), vec3(_2332, _2333, _2334));
    float _4395 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2332, _2333, _2334));
    float _4406 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2339 * ((_2338 * _2364) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2364) + _2324) * _2338))) * _2338;
    float _4417 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2391 = _2244 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _808) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2278].x + _832;
    float _2405 = cbLight._m0[_2278].y + _833;
    float _2406 = cbLight._m0[_2278].z + _834;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2278].xyz));
    float _4428 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2418 = dot(vec3(_805, _806, _807), vec3(_2411, _2412, _2413));
    float _4439 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2411, _2412, _2413));
    float _4450 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2403;
    float _2450 = (0.5 / (((_2339 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2440) + _2403) * _2417))) * _2417;
    float _4461 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2462 = (((_2439 * cbLight._m0[_2391].x) * _2452) * _2261) + ((((cbLight._m0[_2310].x * _2233) * _2363) * _2377) * _2274);
    float _2463 = (((_2439 * cbLight._m0[_2391].y) * _2452) * _2261) + ((((cbLight._m0[_2310].y * _2235) * _2363) * _2377) * _2274);
    float _2464 = (((_2439 * cbLight._m0[_2391].z) * _2452) * _2261) + ((((cbLight._m0[_2310].z * _2237) * _2363) * _2377) * _2274);
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_2242.y == 0u)
    {
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.x;
        uint _2594 = uint((float(_2582.y) * floor(float(uint(cbSceneParam._m0[85u].y * _854) / _2583))) + floor(float(uint(cbSceneParam._m0[85u].x * _853) / _2583)));
        float _2604 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2605 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        uint _2608 = uint(isnan(14.0) ? _2605 : (isnan(_2605) ? 14.0 : min(_2605, 14.0)));
        uvec4 _2613 = texelFetch(g_lightClusterGridBuffer, int(((_2608 << 2u) + (_2594 << 6u)) >> 2u));
        uint _2614 = _2613.x;
        uint _2615 = _2582.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2615 >> 4u) & 15u)) + 4294967295u) & _2614) == 0u) || ((_2615 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            uint _2906 = 0u;
            uint _2915;
            bool _2916;
            for (;;)
            {
                _2915 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                _2916 = _2915 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2916)
                {
                    frontier_phi_103_pred = _2901;
                    frontier_phi_103_pred_1 = _2905;
                    frontier_phi_103_pred_2 = _2904;
                    frontier_phi_103_pred_3 = _2903;
                    frontier_phi_103_pred_4 = _2902;
                    frontier_phi_103_pred_5 = _2900;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2900;
                    _3067 = _2901;
                    _3068 = _2902;
                    _3069 = _2903;
                    _3070 = _2904;
                    _3071 = _2905;
                    _3072 = _2915;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2906 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2018;
                        float _3133 = _3092.y - _2019;
                        float _3134 = _3092.z - _2020;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_873, _876, _879), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4482 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2018;
                        float _3168 = (-0.0) - _2019;
                        float _3169 = (-0.0) - _2020;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3183 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _934;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3174 + _3139;
                        float _3195 = _3175 + _3140;
                        float _3196 = _3176 + _3141;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_873, _876, _879), vec3(_3174, _3175, _3176));
                        float _4498 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3208 = dot(vec3(_873, _876, _879), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4509 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3152 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3142) + _3217;
                        float _4520 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4531 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3215 * _3215) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _2996 = (_3163 * _3111.x) + _3069;
                        _2997 = (_3163 * _3111.y) + _3070;
                        _2998 = (_3163 * _3111.z) + _3071;
                        _2993 = (_3243 * _3128.x) + _3066;
                        _2994 = (_3243 * _3128.y) + _3067;
                        _2995 = (_3243 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_103_pred = _2994;
                    frontier_phi_103_pred_1 = _2998;
                    frontier_phi_103_pred_2 = _2997;
                    frontier_phi_103_pred_3 = _2996;
                    frontier_phi_103_pred_4 = _2995;
                    frontier_phi_103_pred_5 = _2993;
                }
                _2725 = frontier_phi_103_pred;
                _2733 = frontier_phi_103_pred_1;
                _2731 = frontier_phi_103_pred_2;
                _2729 = frontier_phi_103_pred_3;
                _2727 = frontier_phi_103_pred_4;
                _2723 = frontier_phi_103_pred_5;
                uint _2907 = _2906 + 1u;
                if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2900 = _2723;
                    _2901 = _2725;
                    _2902 = _2727;
                    _2903 = _2729;
                    _2904 = _2731;
                    _2905 = _2733;
                    _2906 = _2907;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((4294967295u << _2739) & _2614) == 0u)
        {
            _2868 = _2722;
            _2870 = _2724;
            _2872 = _2726;
            _2874 = _2728;
            _2876 = _2730;
            _2878 = _2732;
        }
        else
        {
            float _2893 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float _2894 = _2893 * _2018;
            float _2895 = _2893 * _2019;
            float _2896 = _2893 * _2020;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _3049 = _2722;
                float _3050 = _2724;
                float _3051 = _2726;
                float _3052 = _2728;
                float _3053 = _2730;
                float _3054 = _2732;
                uint _3055 = _2739;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3065)
                    {
                        frontier_phi_114_pred = _3054;
                        frontier_phi_114_pred_1 = _3053;
                        frontier_phi_114_pred_2 = _3052;
                        frontier_phi_114_pred_3 = _3051;
                        frontier_phi_114_pred_4 = _3050;
                        frontier_phi_114_pred_5 = _3049;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3270 = _3049;
                        float _3271 = _3050;
                        float _3272 = _3051;
                        float _3273 = _3052;
                        float _3274 = _3053;
                        float _3275 = _3054;
                        uint _3276 = _3064;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3360;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3287 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3287 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3287 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3287 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2020, _3394.z, fma(_2019, _3394.y, _3394.x * _2018)) + _3394.w;
                            _3407 = !((fma(_2020, _3375.z, fma(_2019, _3375.y, _3375.x * _2018)) + _3375.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3302.x - _2018;
                                float _3435 = _3302.y - _2019;
                                float _3436 = _3302.z - _2020;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3303 * _3303));
                                float _4542 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3452 = sqrt(_3437) * _3318.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_873, _876, _879))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2020, _3345.z, fma(_2019, _3345.y, _3345.x * _2018)) + _3345.w) / _3406;
                                float _3466 = (fma(_2020, _3360.z, fma(_2019, _3360.y, _3360.x * _2018)) + _3360.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4558 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _934;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2894;
                                float _3496 = _3442 - _2895;
                                float _3497 = _3443 - _2896;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2894, (-0.0) - _2895, (-0.0) - _2896));
                                float _4569 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3509 = dot(vec3(_873, _876, _879), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4580 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_873, _876, _879), vec3(_3441, _3442, _3443))) + _3518;
                                float _4591 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4602 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3472 * _3318.z;
                                frontier_phi_120_pred_1 = _3472 * _3318.y;
                                frontier_phi_120_pred_2 = _3472 * _3318.x;
                                frontier_phi_120_pred_3 = _3546 * _3330.z;
                                frontier_phi_120_pred_4 = _3546 * _3330.y;
                                frontier_phi_120_pred_5 = _3546 * _3330.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3555 = frontier_phi_120_pred;
                            _3554 = frontier_phi_120_pred_1;
                            _3553 = frontier_phi_120_pred_2;
                            _3552 = frontier_phi_120_pred_3;
                            _3551 = frontier_phi_120_pred_4;
                            _3550 = frontier_phi_120_pred_5;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3262;
                        frontier_phi_114_pred_1 = _3261;
                        frontier_phi_114_pred_2 = _3260;
                        frontier_phi_114_pred_3 = _3259;
                        frontier_phi_114_pred_4 = _3258;
                        frontier_phi_114_pred_5 = _3257;
                    }
                    _2879 = frontier_phi_114_pred;
                    _2877 = frontier_phi_114_pred_1;
                    _2875 = frontier_phi_114_pred_2;
                    _2873 = frontier_phi_114_pred_3;
                    _2871 = frontier_phi_114_pred_4;
                    _2869 = frontier_phi_114_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2869;
                        _3050 = _2871;
                        _3051 = _2873;
                        _3052 = _2875;
                        _3053 = _2877;
                        _3054 = _2879;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2875;
                frontier_phi_94_95_ladder_1 = _2879;
                frontier_phi_94_95_ladder_2 = _2877;
                frontier_phi_94_95_ladder_3 = _2873;
                frontier_phi_94_95_ladder_4 = _2871;
                frontier_phi_94_95_ladder_5 = _2869;
            }
            else
            {
                frontier_phi_94_95_ladder = _2728;
                frontier_phi_94_95_ladder_1 = _2732;
                frontier_phi_94_95_ladder_2 = _2730;
                frontier_phi_94_95_ladder_3 = _2726;
                frontier_phi_94_95_ladder_4 = _2724;
                frontier_phi_94_95_ladder_5 = _2722;
            }
            _2868 = frontier_phi_94_95_ladder_5;
            _2870 = frontier_phi_94_95_ladder_4;
            _2872 = frontier_phi_94_95_ladder_3;
            _2874 = frontier_phi_94_95_ladder;
            _2876 = frontier_phi_94_95_ladder_2;
            _2878 = frontier_phi_94_95_ladder_1;
        }
        float _2883 = isnan(1.0) ? _918 : (isnan(_918) ? 1.0 : min(_918, 1.0));
        _2627 = (_2883 * _2874) + _2306;
        _2629 = (_2883 * _2876) + _2307;
        _2631 = (_2883 * _2878) + _2308;
        _2633 = ((_2868 * 0.039999999105930328369140625) * _2883) + _2462;
        _2635 = ((_2870 * 0.039999999105930328369140625) * _2883) + _2463;
        _2637 = ((_2872 * 0.039999999105930328369140625) * _2883) + _2464;
    }
    else
    {
        _2627 = _2306;
        _2629 = _2307;
        _2631 = _2308;
        _2633 = _2462;
        _2635 = _2463;
        _2637 = _2464;
    }
    float _4618 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4629 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4640 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2654 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2627 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _918))) + ((_2633 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2655 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2629 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _918))) + ((_2635 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2656 = ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2631 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _918))) + ((_2637 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2657 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    uint _2660 = _892 + 6u;
    float _2668 = _853 / cbSceneParam._m0[86u].x;
    float _2669 = _854 / cbSceneParam._m0[86u].y;
    vec4 _2683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2685 = _2683.x;
    float _2686 = _2683.y;
    float _2687 = _2683.z;
    float _2688 = _2683.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _2748 = _2747 / _827;
        float _2759 = _2748 * _275;
        float _2760 = _276 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _277;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2929 = 1.0 / cbSceneParam._m0[80u].x;
            float _2930 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2931 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            _3006 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2940 - _2941) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))))) * _2929)) - ((exp2(_2782 * _2940) - exp2(_2782 * _2941)) * _2929))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2688);
        _2784 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2685;
        _2786 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2686;
        _2788 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2687;
        _2790 = _3017 * _2688;
    }
    else
    {
        _2784 = _2685;
        _2786 = _2686;
        _2788 = _2687;
        _2790 = _2688;
    }
    bool _3044;
    vec4 _2800;
    vec4 _2822;
    float _2824;
    float _2828;
    float _2829;
    float _2830;
    float _2831;
    bool _2841;
    for (;;)
    {
        _2800 = cbMatDynParam._m0[0u];
        float _2802 = roundEven(_2800.y);
        bool _2803 = _2802 == 3.0;
        float _2804 = log2(_2790);
        float _2811 = exp2(_2804 * cbSceneParam._m0[78u].x) * _2657;
        float _2812 = exp2(_2804 * cbSceneParam._m0[78u].y) * _2658;
        float _2813 = exp2(_2804 * cbSceneParam._m0[78u].z) * _2659;
        float _2820 = _841 + (-0.5);
        _2822 = cbMtdParam._m0[1u];
        _2824 = _2822.y * _2820;
        float _2827 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2828 = _2827 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
        _2829 = _2827 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
        _2830 = _2827 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
        _2831 = _2820 * 0.999000012874603271484375;
        _2841 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2841)
        {
            if ((cbInstanceData._m0[_892 + 7u].x + _2831) < 0.5)
            {
                _3044 = true;
                break;
            }
        }
        uint _2964 = _894 + uint(_2800.w);
        if ((cbInstanceData._m0[_2964].w < 1.0) && ((cbInstanceData._m0[_2964].w + _2831) < 0.5))
        {
            _3044 = true;
            break;
        }
        if ((_2824 + 1.0) < _2822.x)
        {
            _3044 = true;
            break;
        }
        _3044 = false;
        break;
    }
    float _3248;
    if (_3044)
    {
        discard_state = true;
        _3248 = 0.0;
    }
    else
    {
        _3248 = cbInstanceData._m0[_2660].w;
    }
    SV_Target.x = _2828;
    SV_Target.y = _2829;
    SV_Target.z = _2830;
    SV_Target.w = _3248;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2660].w;
    discard_exit();
}


