#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1139;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _345 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = cbMtdParam._m0[21u].w + _267;
    float _382 = cbMtdParam._m0[22u].x + _268;
    float _383 = cbMtdParam._m0[22u].y + _269;
    float _397 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_196, _197, _198));
    float _398 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_210, _211, _212));
    float _399 = (-0.0) - dot(vec3(_381, _382, _383), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _406 = _403 * _399;
    float _407 = (_403 * _397) + ((cbMtdParam._m0[19u].w * _285) * ((_345.x * 2.0) + (-1.0)));
    float _408 = (_403 * _398) + ((cbMtdParam._m0[20u].x * _285) * ((_345.y * 2.0) + (-1.0)));
    float _409 = _407 * cbMtdParam._m0[18u].z;
    float _410 = _408 * cbMtdParam._m0[18u].y;
    float _411 = fract(TEXCOORD.x);
    float _412 = fract(TEXCOORD.y);
    float _418;
    if (_409 > 0.0)
    {
        _418 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _418 = frontier_phi_3_2_ladder;
    }
    float _426;
    if (_410 > 0.0)
    {
        _426 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _426 = frontier_phi_7_6_ladder;
    }
    bool _428 = _406 > 0.0;
    float _430 = _428 ? (cbMtdParam._m0[15u].x / _406) : 5000.0;
    float _431 = isnan(_426) ? _418 : (isnan(_418) ? _426 : min(_418, _426));
    float _432 = isnan(_430) ? _431 : (isnan(_431) ? _430 : min(_431, _430));
    float _436 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _437 = _411 + (-0.5);
    float _440 = _412 + (-0.5);
    float _443 = ((_432 * _406) + _436) / _436;
    vec4 _467 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_437 + (_432 * _409)) / _443) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_440 + (_432 * _410)) / _443) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _480 = (_467.x * _285) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _285) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _285) * cbMtdParam._m0[9u].z;
    float _500 = _407 * cbMtdParam._m0[20u].z;
    float _501 = _408 * cbMtdParam._m0[20u].y;
    bool _502 = _500 > 0.0;
    float _507;
    if (_502)
    {
        _507 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _507 = frontier_phi_11_10_ladder;
    }
    bool _509 = _501 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _514 = frontier_phi_15_14_ladder;
    }
    float _517 = _428 ? (cbMtdParam._m0[16u].x / _406) : 5000.0;
    float _518 = isnan(_514) ? _507 : (isnan(_507) ? _514 : min(_507, _514));
    float _519 = isnan(_517) ? _518 : (isnan(_518) ? _517 : min(_518, _517));
    float _523 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _527 = ((_519 * _406) + _523) / _523;
    float _532 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _534 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _550 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_437 + (_519 * _500)) / _527) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_440 + (_519 * _501)) / _527) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _565;
    if (_502)
    {
        _565 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _565 = frontier_phi_19_18_ladder;
    }
    float _571;
    if (_509)
    {
        _571 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _571 = frontier_phi_23_22_ladder;
    }
    float _573 = isnan(_571) ? _565 : (isnan(_565) ? _571 : min(_565, _571));
    float _574 = isnan(_517) ? _573 : (isnan(_573) ? _517 : min(_573, _517));
    float _581 = ((_574 * _406) + _523) / _523;
    vec4 _602 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_437 + (_574 * _500)) / _581) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_440 + (_574 * _501)) / _581) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _614 = _285 * 0.1500000059604644775390625;
    float _625 = (_614 * ((_480 - _320) + (((((cbMtdParam._m0[10u].x * _285) * _550.x) - _480) * _285) * _604))) + _320;
    float _626 = (_614 * ((_481 - _322) + (((((cbMtdParam._m0[10u].y * _285) * _550.y) - _481) * _285) * _604))) + _322;
    float _627 = (_614 * ((_482 - _324) + (((((cbMtdParam._m0[10u].z * _285) * _550.z) - _482) * _285) * _604))) + _324;
    vec4 _639 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _643 = _639.z;
    float _646 = (_639.x * 2.0) + (-1.0);
    float _647 = (_639.y * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _3533 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _656 = fma(_653, _203, fma(_647, _210, _646 * _196));
    float _659 = fma(_653, _204, fma(_647, _211, _646 * _197));
    float _662 = fma(_653, _205, fma(_647, _212, _646 * _198));
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    float _667 = _666 * _656;
    float _668 = _666 * _659;
    float _669 = _666 * _662;
    float _3544 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _670 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3566 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3577 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _694 = _267 * _693;
    float _695 = _268 * _693;
    float _696 = _269 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_669, cbSceneParam._m0[5u].z, fma(_668, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _667));
    float _726 = fma(_669, cbSceneParam._m0[6u].z, fma(_668, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _667));
    float _729 = fma(_669, cbSceneParam._m0[7u].z, fma(_668, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _667));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _745 = (_742 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3588 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _768 = _765.x * TEXCOORD.z;
    float _769 = dot(vec3(_667, _668, _669), vec3(_694, _695, _696));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _667) - _694;
    float _777 = (_772 * _668) - _695;
    float _778 = (_772 * _669) - _696;
    float _782 = abs(dot(vec3(_694, _695, _696), vec3(_667, _668, _669)));
    float _3621 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_670);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1138;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _869 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _873 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _896 = _829 + _667;
        float _897 = _833 + _668;
        float _898 = _837 + _669;
        float _908 = fma(_898, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896)) - _865;
        float _909 = fma(_898, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896)) - _869;
        float _910 = fma(_898, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896)) - _873;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _966 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_932.x + (-0.5));
        float _968 = _966 * (_932.y + (-0.5));
        float _969 = _966 * (_932.z + (-0.5));
        float _976 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_939.x + (-0.5));
        float _978 = _976 * (_939.y + (-0.5));
        float _979 = _976 * (_939.z + (-0.5));
        float _986 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_946.x + (-0.5));
        float _988 = _986 * (_946.y + (-0.5));
        float _989 = _986 * (_946.z + (-0.5));
        float _996 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_953.x + (-0.5));
        float _998 = _996 * (_953.y + (-0.5));
        float _999 = _996 * (_953.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1020 = (dot(vec3(_667, _668, _669), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1030 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3669 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1032 + 1.0))) + _1037) * _1000;
        float _1047 = _968 * 0.5;
        float _1048 = _978 * 0.5;
        float _1049 = _988 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_667, _668, _669), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3702 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1074 + 1.0))) + _1079) * _1001;
        float _1089 = _969 * 0.5;
        float _1090 = _979 * 0.5;
        float _1091 = _989 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_667, _668, _669), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3735 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1116 + 1.0))) + _1121) * _1002;
        _1138 = _969;
        _1140 = _968;
        _1141 = _967;
        _1142 = _979;
        _1143 = _978;
        _1144 = _977;
        _1145 = _989;
        _1146 = _988;
        _1147 = _987;
        _1148 = _1002;
        _1149 = _1001;
        _1150 = _1000;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _1139;
        _1140 = _1139;
        _1141 = _1139;
        _1142 = _1139;
        _1143 = _1139;
        _1144 = _1139;
        _1145 = _1139;
        _1146 = _1139;
        _1147 = _1139;
        _1148 = _1139;
        _1149 = _1139;
        _1150 = _1139;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1179 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1183 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1187 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1210 = _829 + _667;
        float _1211 = _833 + _668;
        float _1212 = _837 + _669;
        float _1222 = fma(_1212, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210)) - _1179;
        float _1223 = fma(_1212, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210)) - _1183;
        float _1224 = fma(_1212, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210)) - _1187;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1179 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1183 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[35u].z) + ((((((_1187 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1278 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1245.x + (-0.5));
        float _1280 = _1278 * (_1245.y + (-0.5));
        float _1281 = _1278 * (_1245.z + (-0.5));
        float _1288 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1252.x + (-0.5));
        float _1290 = _1288 * (_1252.y + (-0.5));
        float _1291 = _1288 * (_1252.z + (-0.5));
        float _1298 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1259.x + (-0.5));
        float _1300 = _1298 * (_1259.y + (-0.5));
        float _1301 = _1298 * (_1259.z + (-0.5));
        float _1308 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1266.x + (-0.5));
        float _1310 = _1308 * (_1266.y + (-0.5));
        float _1311 = _1308 * (_1266.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_667, _668, _669), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3798 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1342 + 1.0))) + _1347) * _1312;
        float _1357 = _1280 * 0.5;
        float _1358 = _1290 * 0.5;
        float _1359 = _1300 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_667, _668, _669), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3831 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1384 + 1.0))) + _1389) * _1313;
        float _1399 = _1281 * 0.5;
        float _1400 = _1291 * 0.5;
        float _1401 = _1301 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_667, _668, _669), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3864 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1426 + 1.0))) + _1431) * _1314;
        _1448 = _1281;
        _1449 = _1280;
        _1450 = _1279;
        _1451 = _1291;
        _1452 = _1290;
        _1453 = _1289;
        _1454 = _1301;
        _1455 = _1300;
        _1456 = _1299;
        _1457 = _1314;
        _1458 = _1313;
        _1459 = _1312;
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1139;
        _1449 = _1139;
        _1450 = _1139;
        _1451 = _1139;
        _1452 = _1139;
        _1453 = _1139;
        _1454 = _1139;
        _1455 = _1139;
        _1456 = _1139;
        _1457 = _1139;
        _1458 = _1139;
        _1459 = _1139;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1152)) + _1152;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1153)) + _1153;
    float _1495 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1472));
    float _1516 = _776 * 0.5;
    float _1517 = _777 * 0.5;
    float _1518 = _778 * 0.5;
    float _1519 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1522 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1525 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1559;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1532 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1138, _1142, _1145, _1148));
        float _1536 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1540 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1547 = dot(vec4(cbModelParam._m0[39u]), vec4(_1516, _1517, _1518, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1570;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1561 = dot(vec4(cbModelParam._m0[40u]), vec4(_1516, _1517, _1518, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1574 = (_1570 * cbModelParam._m0[1u].x) + (_1559 * (1.0 - cbModelParam._m0[1u].x));
    float _1584 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1584 : min(cbModelParam._m0[25u].z, _1584));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1633 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1637 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1641 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1644 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1647 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1650 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1678;
        if (_1644 > 0.0)
        {
            _1678 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1678 = frontier_phi_38_36_ladder;
        }
        float _1846;
        if (_1647 > 0.0)
        {
            _1846 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1846 = frontier_phi_47_43_ladder;
        }
        float _2290;
        if (_1650 > 0.0)
        {
            _2290 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2290 = frontier_phi_59_54_ladder;
        }
        float _2292 = isnan(_1846) ? _1678 : (isnan(_1678) ? _1846 : min(_1678, _1846));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1644) + _1633;
        float _2298 = (_2293 * _1647) + _1637;
        float _2299 = (_2293 * _1650) + _1641;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1585);
            frontier_phi_37_59_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1666 = frontier_phi_37_59_ladder_2;
        _1668 = frontier_phi_37_59_ladder_1;
        _1670 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1585);
        _1666 = _1654.x * cbModelParam._m0[1u].y;
        _1668 = _1654.y * cbModelParam._m0[1u].y;
        _1670 = _1654.z * cbModelParam._m0[1u].y;
    }
    float _1674 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1674 : min(cbModelParam._m0[25u].w, _1674));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1741 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1744 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _1851;
        if (_1738 > 0.0)
        {
            _1851 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1851 = frontier_phi_49_45_ladder;
        }
        float _2317;
        if (_1741 > 0.0)
        {
            _2317 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2317 = frontier_phi_61_56_ladder;
        }
        float _2654;
        if (_1744 > 0.0)
        {
            _2654 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2654 = frontier_phi_73_68_ladder;
        }
        float _2656 = isnan(_2317) ? _1851 : (isnan(_1851) ? _2317 : min(_1851, _2317));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1738) + _1727;
        float _2662 = (_2657 * _1741) + _1731;
        float _2663 = (_2657 * _1744) + _1735;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1675);
            frontier_phi_46_73_ladder = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_46_73_ladder_2;
        _1765 = frontier_phi_46_73_ladder_1;
        _1767 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1675);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1668)) + _1668);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1670)) + _1670);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1829 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1833 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1838 = _1825 / _1837;
    float _1839 = _1829 / _1837;
    float _1840 = _1833 / _1837;
    float _1987;
    float _1988;
    float _1989;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1867 = ((uint(_1840 > cbSceneParam._m0[59u].y) + uint(_1840 > cbSceneParam._m0[59u].x)) + uint(_1840 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1868 = _1867 + 43u;
        uint _1876 = _1867 + 44u;
        uint _1884 = _1867 + 45u;
        uint _1892 = _1867 + 46u;
        float _1903 = fma(_1837, cbSceneParam._m0[_1868].w, fma(_1833, cbSceneParam._m0[_1868].z, fma(_1829, cbSceneParam._m0[_1868].y, _1825 * cbSceneParam._m0[_1868].x)));
        float _1907 = fma(_1837, cbSceneParam._m0[_1876].w, fma(_1833, cbSceneParam._m0[_1876].z, fma(_1829, cbSceneParam._m0[_1876].y, _1825 * cbSceneParam._m0[_1876].x)));
        float _1915 = fma(_1837, cbSceneParam._m0[_1892].w, fma(_1833, cbSceneParam._m0[_1892].z, fma(_1829, cbSceneParam._m0[_1892].y, _1825 * cbSceneParam._m0[_1892].x)));
        float _1920 = cbSceneParam._m0[33u].z * _1915;
        float _1922 = cbSceneParam._m0[33u].w * _1915;
        float _1925 = fma(_1837, cbSceneParam._m0[_1884].w, fma(_1833, cbSceneParam._m0[_1884].z, fma(_1829, cbSceneParam._m0[_1884].y, _1825 * cbSceneParam._m0[_1884].x))) / _1915;
        float _1973 = (cbSceneParam._m0[33u].x - sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840))) * cbSceneParam._m0[33u].y;
        float _3990 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1980 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1920 + _1903) / _1915, (_1922 + _1907) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 + _1903) / _1915, (_1907 - _1920) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 - _1920) / _1915, (_1907 - _1922) / _1915), _1925), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 - _1922) / _1915, (_1920 + _1907) / _1915), _1925), 0.0)).x), vec4(0.25)));
        _1987 = 1.0 - (_1980 * cbSceneParam._m0[34u].x);
        _1988 = 1.0 - (_1980 * cbSceneParam._m0[34u].y);
        _1989 = 1.0 - (_1980 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1987 = 1.0;
        _1988 = 1.0;
        _1989 = 1.0;
    }
    float _2053;
    float _2055;
    float _2057;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2041 = fma(_1837, cbSceneParam._m0[63u].w, fma(_1833, cbSceneParam._m0[63u].z, fma(_1829, cbSceneParam._m0[63u].y, _1825 * cbSceneParam._m0[63u].x)));
        float _2042 = fma(_1837, cbSceneParam._m0[60u].w, fma(_1833, cbSceneParam._m0[60u].z, fma(_1829, cbSceneParam._m0[60u].y, _1825 * cbSceneParam._m0[60u].x))) / _2041;
        float _2043 = fma(_1837, cbSceneParam._m0[61u].w, fma(_1833, cbSceneParam._m0[61u].z, fma(_1829, cbSceneParam._m0[61u].y, _1825 * cbSceneParam._m0[61u].x))) / _2041;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2042 >= cbSceneParam._m0[64u].x) && (_2043 >= cbSceneParam._m0[64u].y)) && (_2042 <= cbSceneParam._m0[64u].z)) && (_2043 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1837, cbSceneParam._m0[62u].w, fma(_1833, cbSceneParam._m0[62u].z, fma(_1829, cbSceneParam._m0[62u].y, _1825 * cbSceneParam._m0[62u].x))) / _2041;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840))) * cbSceneParam._m0[33u].y;
            float _4006 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2042, cbSceneParam._m0[33u].w + _2043), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2042, _2043 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2042 - cbSceneParam._m0[33u].z, _2043 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2042 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2043), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2390) ? _1989 : (isnan(_1989) ? _2390 : min(_1989, _2390));
            frontier_phi_58_57_ladder_1 = isnan(_2389) ? _1988 : (isnan(_1988) ? _2389 : min(_1988, _2389));
            frontier_phi_58_57_ladder_2 = isnan(_2388) ? _1987 : (isnan(_1987) ? _2388 : min(_1987, _2388));
        }
        else
        {
            frontier_phi_58_57_ladder = _1989;
            frontier_phi_58_57_ladder_1 = _1988;
            frontier_phi_58_57_ladder_2 = _1987;
        }
        _2053 = frontier_phi_58_57_ladder_2;
        _2055 = frontier_phi_58_57_ladder_1;
        _2057 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2053 = _1987;
        _2055 = _1988;
        _2057 = _1989;
    }
    uvec4 _2062 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _2064 = _2062.x * 14u;
    uint _2065 = _2064 + 13u;
    float _2070 = _768 + (-1.0);
    float _2073 = (cbLight._m0[_2065].x * _2070) + 1.0;
    float _2074 = (cbLight._m0[_2065].y * _2070) + 1.0;
    uint _2075 = _2064 + 5u;
    float _2081 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2085 = _2064 + 4u;
    float _2094 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2098 = _2064 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_667, _668, _669));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_667, _668, _669));
    float _4042 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4053 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2053) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2055) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2057) * _2094) * _2117);
    uint _2130 = _2064 + 8u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _670) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_2064].x + _694;
    float _2146 = cbLight._m0[_2064].y + _695;
    float _2147 = cbLight._m0[_2064].z + _696;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2064].xyz));
    float _4064 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2159 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2160 = dot(vec3(_667, _668, _669), vec3(_2152, _2153, _2154));
    float _4086 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2152, _2153, _2154));
    float _4097 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2144 * _2144;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2144;
    float _2195 = (0.5 / (((_2159 * ((_2158 * _2184) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2184) + _2144) * _2158))) * _2158;
    float _4108 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    uint _2211 = _2064 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _670) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2098].x + _694;
    float _2225 = cbLight._m0[_2098].y + _695;
    float _2226 = cbLight._m0[_2098].z + _696;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2098].xyz));
    float _4119 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2238 = dot(vec3(_667, _668, _669), vec3(_2231, _2232, _2233));
    float _4130 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2231, _2232, _2233));
    float _4141 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2223;
    float _2270 = (0.5 / (((_2159 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2159 * _2260) + _2223) * _2237))) * _2237;
    float _4152 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2282 = (((_2259 * cbLight._m0[_2211].x) * _2272) * _2081) + ((((cbLight._m0[_2130].x * _2053) * _2183) * _2197) * _2094);
    float _2283 = (((_2259 * cbLight._m0[_2211].y) * _2272) * _2081) + ((((cbLight._m0[_2130].y * _2055) * _2183) * _2197) * _2094);
    float _2284 = (((_2259 * cbLight._m0[_2211].z) * _2272) * _2081) + ((((cbLight._m0[_2130].z * _2057) * _2183) * _2197) * _2094);
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_2062.y == 0u)
    {
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.x;
        uint _2414 = uint((float(_2402.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2403))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2403)));
        float _2424 = (log2(_1840 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2425 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        uint _2428 = uint(isnan(14.0) ? _2425 : (isnan(_2425) ? 14.0 : min(_2425, 14.0)));
        uvec4 _2433 = texelFetch(g_lightClusterGridBuffer, int(((_2428 << 2u) + (_2414 << 6u)) >> 2u));
        uint _2434 = _2433.x;
        uint _2435 = _2402.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2435 >> 4u) & 15u)) + 4294967295u) & _2434) == 0u) || ((_2435 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            uint _2718 = 0u;
            uint _2727;
            bool _2728;
            for (;;)
            {
                _2727 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2718 << 2u)) >> 2u)).x;
                _2728 = _2727 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2728)
                {
                    frontier_phi_82_pred = _2712;
                    frontier_phi_82_pred_1 = _2717;
                    frontier_phi_82_pred_2 = _2716;
                    frontier_phi_82_pred_3 = _2715;
                    frontier_phi_82_pred_4 = _2714;
                    frontier_phi_82_pred_5 = _2713;
                }
                else
                {
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    uint _2863;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2727;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2867 = uint(findLSB(_2863)) + (_2718 << 5u);
                        uint _2864 = (_2863 + 4294967295u) & _2863;
                        uint _2869 = _2867 * 48u;
                        vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2889 = (_2867 * 48u) + 4u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2908 = (_2867 * 48u) + 8u;
                        vec3 _2919 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x));
                        float _2923 = _2883.x - _1838;
                        float _2924 = _2883.y - _1839;
                        float _2925 = _2883.z - _1840;
                        float _2926 = dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925));
                        float _2929 = inversesqrt(_2926);
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2933 = dot(vec3(_723, _726, _729), vec3(_2930, _2931, _2932));
                        float _2938 = 1.0 - (_2926 * _2883.w);
                        float _4173 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2939 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2940 = sqrt(_2926) * _2902.w;
                        float _2943 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2933) + _2944;
                        float _2950 = _2940 * _2940;
                        float _2954 = ((isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0))) * _2939) / ((_2950 * 0.699999988079071044921875) + 1.0);
                        float _2958 = (-0.0) - _1838;
                        float _2959 = (-0.0) - _1839;
                        float _2960 = (-0.0) - _1840;
                        float _2964 = inversesqrt(dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960)));
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2974 = exp2(log2(1.0 / ((_2950 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _784;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2965 + _2930;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_723, _726, _729), vec3(_2965, _2966, _2967));
                        float _4189 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2999 = dot(vec3(_723, _726, _729), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4200 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2943 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2933) + _3008;
                        float _4211 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4222 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) / ((_3006 * _3006) * ((_2950 * 2.1991131305694580078125) + 3.141590118408203125))) * _2939;
                        _2792 = (_2954 * _2902.x) + _2860;
                        _2793 = (_2954 * _2902.y) + _2861;
                        _2794 = (_2954 * _2902.z) + _2862;
                        _2789 = (_3034 * _2919.x) + _2857;
                        _2790 = (_3034 * _2919.y) + _2858;
                        _2791 = (_3034 * _2919.z) + _2859;
                        if (_2864 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2864;
                        }
                    }
                    frontier_phi_82_pred = _2789;
                    frontier_phi_82_pred_1 = _2794;
                    frontier_phi_82_pred_2 = _2793;
                    frontier_phi_82_pred_3 = _2792;
                    frontier_phi_82_pred_4 = _2791;
                    frontier_phi_82_pred_5 = _2790;
                }
                _2543 = frontier_phi_82_pred;
                _2553 = frontier_phi_82_pred_1;
                _2551 = frontier_phi_82_pred_2;
                _2549 = frontier_phi_82_pred_3;
                _2547 = frontier_phi_82_pred_4;
                _2545 = frontier_phi_82_pred_5;
                uint _2719 = _2718 + 1u;
                if (_2719 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2712 = _2543;
                    _2713 = _2545;
                    _2714 = _2547;
                    _2715 = _2549;
                    _2716 = _2551;
                    _2717 = _2553;
                    _2718 = _2719;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((4294967295u << _2559) & _2434) == 0u)
        {
            _2680 = _2542;
            _2682 = _2544;
            _2684 = _2546;
            _2686 = _2548;
            _2688 = _2550;
            _2690 = _2552;
        }
        else
        {
            float _2705 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
            float _2706 = _2705 * _1838;
            float _2707 = _2705 * _1839;
            float _2708 = _2705 * _1840;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2840 = _2542;
                float _2841 = _2544;
                float _2842 = _2546;
                float _2843 = _2548;
                float _2844 = _2550;
                float _2845 = _2552;
                uint _2846 = _2559;
                uint _2855;
                bool _2856;
                for (;;)
                {
                    _2855 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2846 << 2u)) >> 2u)).x;
                    _2856 = _2855 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2856)
                    {
                        frontier_phi_88_pred = _2843;
                        frontier_phi_88_pred_1 = _2844;
                        frontier_phi_88_pred_2 = _2845;
                        frontier_phi_88_pred_3 = _2842;
                        frontier_phi_88_pred_4 = _2841;
                        frontier_phi_88_pred_5 = _2840;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3052 = _2840;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        uint _3058 = _2855;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3127;
                        vec4 _3142;
                        float _3188;
                        bool _3189;
                        for (;;)
                        {
                            uint _3069 = ((_2846 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3114 = (_3069 * 40u) + 16u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3069 * 40u) + 20u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3144 = (_3069 * 40u) + 24u;
                            vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3163 = (_3069 * 40u) + 28u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3188 = fma(_1840, _3176.z, fma(_1839, _3176.y, _3176.x * _1838)) + _3176.w;
                            _3189 = !((fma(_1840, _3157.z, fma(_1839, _3157.y, _3157.x * _1838)) + _3157.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3189)
                            {
                                float _3216 = _3084.x - _1838;
                                float _3217 = _3084.y - _1839;
                                float _3218 = _3084.z - _1840;
                                float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                                float _3222 = inversesqrt(_3219);
                                float _3223 = _3222 * _3216;
                                float _3224 = _3222 * _3217;
                                float _3225 = _3222 * _3218;
                                float _3229 = 1.0 - (_3219 / (_3085 * _3085));
                                float _4233 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3234 = sqrt(_3219) * _3100.w;
                                float _3236 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                                float _3237 = _3236 * _3236;
                                float _3240 = ((1.0 - _3237) * dot(vec3(_3223, _3224, _3225), vec3(_723, _726, _729))) + _3237;
                                float _3243 = _3234 * _3234;
                                float _3247 = (fma(_1840, _3127.z, fma(_1839, _3127.y, _3127.x * _1838)) + _3127.w) / _3188;
                                float _3248 = (fma(_1840, _3142.z, fma(_1839, _3142.y, _3142.x * _1838)) + _3142.w) / _3188;
                                float _3252 = 1.0 - dot(vec2(_3247, _3248), vec2(_3247, _3248));
                                float _4249 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3254 = _3253 * (((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3230) / ((_3243 * 0.699999988079071044921875) + 1.0));
                                float _3266 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                                float _3267 = 1.0 - _784;
                                float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                                float _3275 = _3274 * _3274;
                                float _3276 = _3275 * _3275;
                                float _3277 = _3223 - _2706;
                                float _3278 = _3224 - _2707;
                                float _3279 = _3225 - _2708;
                                float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                                float _3287 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2706, (-0.0) - _2707, (-0.0) - _2708));
                                float _4260 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3290 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3291 = dot(vec3(_723, _726, _729), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                                float _4271 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                                float _3299 = _3236 * _3275;
                                float _3300 = _3299 * _3299;
                                float _3306 = ((1.0 - _3300) * dot(vec3(_723, _726, _729), vec3(_3223, _3224, _3225))) + _3300;
                                float _4282 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3308 = 1.0 - _3275;
                                float _3318 = (0.5 / (((_3307 * ((_3290 * _3308) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3275) * _3290))) * _3307;
                                float _4293 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3328 = (_3253 * _3230) * (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_3298 * _3298) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3328 * _3112.x;
                                frontier_phi_94_pred_1 = _3328 * _3112.y;
                                frontier_phi_94_pred_2 = _3254 * _3100.z;
                                frontier_phi_94_pred_3 = _3254 * _3100.y;
                                frontier_phi_94_pred_4 = _3254 * _3100.x;
                                frontier_phi_94_pred_5 = _3328 * _3112.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_94_pred;
                            _3333 = frontier_phi_94_pred_1;
                            _3337 = frontier_phi_94_pred_2;
                            _3336 = frontier_phi_94_pred_3;
                            _3335 = frontier_phi_94_pred_4;
                            _3334 = frontier_phi_94_pred_5;
                            _3042 = _3335 + _3055;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3039 = _3332 + _3052;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3042;
                        frontier_phi_88_pred_1 = _3043;
                        frontier_phi_88_pred_2 = _3044;
                        frontier_phi_88_pred_3 = _3041;
                        frontier_phi_88_pred_4 = _3040;
                        frontier_phi_88_pred_5 = _3039;
                    }
                    _2687 = frontier_phi_88_pred;
                    _2689 = frontier_phi_88_pred_1;
                    _2691 = frontier_phi_88_pred_2;
                    _2685 = frontier_phi_88_pred_3;
                    _2683 = frontier_phi_88_pred_4;
                    _2681 = frontier_phi_88_pred_5;
                    uint _2847 = _2846 + 1u;
                    if (_2847 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2840 = _2681;
                        _2841 = _2683;
                        _2842 = _2685;
                        _2843 = _2687;
                        _2844 = _2689;
                        _2845 = _2691;
                        _2846 = _2847;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2689;
                frontier_phi_75_76_ladder_1 = _2691;
                frontier_phi_75_76_ladder_2 = _2687;
                frontier_phi_75_76_ladder_3 = _2685;
                frontier_phi_75_76_ladder_4 = _2683;
                frontier_phi_75_76_ladder_5 = _2681;
            }
            else
            {
                frontier_phi_75_76_ladder = _2550;
                frontier_phi_75_76_ladder_1 = _2552;
                frontier_phi_75_76_ladder_2 = _2548;
                frontier_phi_75_76_ladder_3 = _2546;
                frontier_phi_75_76_ladder_4 = _2544;
                frontier_phi_75_76_ladder_5 = _2542;
            }
            _2680 = frontier_phi_75_76_ladder_5;
            _2682 = frontier_phi_75_76_ladder_4;
            _2684 = frontier_phi_75_76_ladder_3;
            _2686 = frontier_phi_75_76_ladder_2;
            _2688 = frontier_phi_75_76_ladder;
            _2690 = frontier_phi_75_76_ladder_1;
        }
        float _2695 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2447 = (_2695 * _2686) + _2126;
        _2449 = (_2695 * _2688) + _2127;
        _2451 = (_2695 * _2690) + _2128;
        _2453 = ((_2680 * 0.039999999105930328369140625) * _2695) + _2282;
        _2455 = ((_2682 * 0.039999999105930328369140625) * _2695) + _2283;
        _2457 = ((_2684 * 0.039999999105930328369140625) * _2695) + _2284;
    }
    else
    {
        _2447 = _2126;
        _2449 = _2127;
        _2451 = _2128;
        _2453 = _2282;
        _2455 = _2283;
        _2457 = _2284;
    }
    float _4309 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4320 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4331 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2474 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2447 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _768))) + ((_2453 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2475 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2449 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _768))) + ((_2455 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2451 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _768))) + ((_2457 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    uint _2480 = _742 + 6u;
    float _2488 = _702 / cbSceneParam._m0[86u].x;
    float _2489 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2568 = _2567 / _689;
        float _2579 = _2568 * _267;
        float _2580 = _268 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2582 = _2568 * _269;
        float _2584 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2580;
        float _2592 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2581 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2741 = 1.0 / cbSceneParam._m0[80u].x;
            float _2742 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2743 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            _2802 = ((abs(_2592 / _2581) * cbSceneParam._m0[80u].y) * ((((_2752 - _2753) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))))) * _2741)) - ((exp2(_2602 * _2752) - exp2(_2602 * _2753)) * _2741))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2508);
        _2604 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2606 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2608 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2610 = _2813 * _2508;
    }
    else
    {
        _2604 = _2505;
        _2606 = _2506;
        _2608 = _2507;
        _2610 = _2508;
    }
    float _2622 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2623 = _2622 == 3.0;
    float _2624 = log2(_2610);
    float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)));
    float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)));
    float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)));
    float _2642 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2642 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.y = _2642 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.z = _2642 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.w = cbInstanceData._m0[_2480].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
}


