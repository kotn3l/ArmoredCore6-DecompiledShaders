#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1032;
float _3160;
float _3161;
float _3162;
float _3163;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _405 = ((_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _406 = ((_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    float _426 = (_402 > 0.0) ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_407 + (-0.5)) + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_408 + (-0.5)) + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _494 = _490.z;
    float _497 = (_490.x * 2.0) + (-1.0);
    float _498 = (_490.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3182 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _504 = sqrt(1.0 - (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))));
    float _507 = fma(_504, _199, fma(_498, _206, _497 * _192));
    float _510 = fma(_504, _200, fma(_498, _207, _497 * _193));
    float _513 = fma(_504, _201, fma(_498, _208, _497 * _194));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3193 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _521 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3215 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3226 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _545 = _263 * _544;
    float _546 = _264 * _544;
    float _547 = _265 * _544;
    vec4 _552 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _554 = _552.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _713 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _719 = (cbMatDynParam._m0[5u].x * _713) + cbMatDynParam._m0[5u].y;
        float _3237 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _724 = (cbMatDynParam._m0[5u].z * _713) + cbMatDynParam._m0[5u].w;
        float _3248 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) - _720)) + _720) < ((_554 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _591 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _594 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = _607 + 9u;
    uint _610 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3259 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = dot(vec3(_518, _519, _520), vec3(_545, _546, _547));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _518) - _545;
    float _642 = (_637 * _519) - _546;
    float _643 = (_637 * _520) - _547;
    float _647 = abs(dot(vec3(_545, _546, _547), vec3(_518, _519, _520)));
    float _3292 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_521);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1031;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _758 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _762 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _766 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _789 = _694 + _518;
        float _790 = _698 + _519;
        float _791 = _702 + _520;
        float _801 = fma(_791, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) - _758;
        float _802 = fma(_791, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) - _762;
        float _803 = fma(_791, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) - _766;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_758 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_762 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[34u].z) + ((((((_766 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _859 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_825.x + (-0.5));
        float _861 = _859 * (_825.y + (-0.5));
        float _862 = _859 * (_825.z + (-0.5));
        float _869 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_832.x + (-0.5));
        float _871 = _869 * (_832.y + (-0.5));
        float _872 = _869 * (_832.z + (-0.5));
        float _879 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_839.x + (-0.5));
        float _881 = _879 * (_839.y + (-0.5));
        float _882 = _879 * (_839.z + (-0.5));
        float _889 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_846.x + (-0.5));
        float _891 = _889 * (_846.y + (-0.5));
        float _892 = _889 * (_846.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _913 = (dot(vec3(_518, _519, _520), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _923 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3340 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_925 + 1.0))) + _930) * _893;
        float _940 = _861 * 0.5;
        float _941 = _871 * 0.5;
        float _942 = _881 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_518, _519, _520), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3373 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_967 + 1.0))) + _972) * _894;
        float _982 = _862 * 0.5;
        float _983 = _872 * 0.5;
        float _984 = _882 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_518, _519, _520), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3406 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_1009 + 1.0))) + _1014) * _895;
        _1031 = _862;
        _1033 = _861;
        _1034 = _860;
        _1035 = _872;
        _1036 = _871;
        _1037 = _870;
        _1038 = _882;
        _1039 = _881;
        _1040 = _880;
        _1041 = _895;
        _1042 = _894;
        _1043 = _893;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _1032;
        _1033 = _1032;
        _1034 = _1032;
        _1035 = _1032;
        _1036 = _1032;
        _1037 = _1032;
        _1038 = _1032;
        _1039 = _1032;
        _1040 = _1032;
        _1041 = _1032;
        _1042 = _1032;
        _1043 = _1032;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1075 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1079 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1083 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1106 = _694 + _518;
        float _1107 = _698 + _519;
        float _1108 = _702 + _520;
        float _1118 = fma(_1108, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106)) - _1075;
        float _1119 = fma(_1108, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106)) - _1079;
        float _1120 = fma(_1108, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106)) - _1083;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1075 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1079 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[35u].z) + ((((((_1083 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1174 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1141.x + (-0.5));
        float _1176 = _1174 * (_1141.y + (-0.5));
        float _1177 = _1174 * (_1141.z + (-0.5));
        float _1184 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1148.x + (-0.5));
        float _1186 = _1184 * (_1148.y + (-0.5));
        float _1187 = _1184 * (_1148.z + (-0.5));
        float _1194 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1155.x + (-0.5));
        float _1196 = _1194 * (_1155.y + (-0.5));
        float _1197 = _1194 * (_1155.z + (-0.5));
        float _1204 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1162.x + (-0.5));
        float _1206 = _1204 * (_1162.y + (-0.5));
        float _1207 = _1204 * (_1162.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_518, _519, _520), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3469 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1238 + 1.0))) + _1243) * _1208;
        float _1253 = _1176 * 0.5;
        float _1254 = _1186 * 0.5;
        float _1255 = _1196 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_518, _519, _520), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3502 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1280 + 1.0))) + _1285) * _1209;
        float _1295 = _1177 * 0.5;
        float _1296 = _1187 * 0.5;
        float _1297 = _1197 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_518, _519, _520), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3535 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1322 + 1.0))) + _1327) * _1210;
        _1344 = _1177;
        _1345 = _1176;
        _1346 = _1175;
        _1347 = _1187;
        _1348 = _1186;
        _1349 = _1185;
        _1350 = _1197;
        _1351 = _1196;
        _1352 = _1195;
        _1353 = _1210;
        _1354 = _1209;
        _1355 = _1208;
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1032;
        _1345 = _1032;
        _1346 = _1032;
        _1347 = _1032;
        _1348 = _1032;
        _1349 = _1032;
        _1350 = _1032;
        _1351 = _1032;
        _1352 = _1032;
        _1353 = _1032;
        _1354 = _1032;
        _1355 = _1032;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1368));
    float _1412 = _641 * 0.5;
    float _1413 = _642 * 0.5;
    float _1414 = _643 * 0.5;
    float _1415 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1418 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1421 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1031, _1035, _1038, _1041));
        float _1432 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1436 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1412, _1413, _1414, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1466;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1457 = dot(vec4(cbModelParam._m0[40u]), vec4(_1412, _1413, _1414, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1470 = (_1466 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1480 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1480 : min(cbModelParam._m0[25u].z, _1480));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1543 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1546 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_23_ladder;
        }
        float _1919;
        if (_1543 > 0.0)
        {
            _1919 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1919 = frontier_phi_34_30_ladder;
        }
        float _2243;
        if (_1546 > 0.0)
        {
            _2243 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2243 = frontier_phi_48_41_ladder;
        }
        float _2245 = isnan(_1919) ? _1574 : (isnan(_1574) ? _1919 : min(_1574, _1919));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1540) + _1529;
        float _2251 = (_2246 * _1543) + _1533;
        float _2252 = (_2246 * _1546) + _1537;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1481);
            frontier_phi_24_48_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_24_48_ladder_2;
        _1564 = frontier_phi_24_48_ladder_1;
        _1566 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1481);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1637 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1640 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1924;
        if (_1634 > 0.0)
        {
            _1924 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1924 = frontier_phi_36_32_ladder;
        }
        float _2269;
        if (_1637 > 0.0)
        {
            _2269 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2269 = frontier_phi_50_43_ladder;
        }
        float _2459;
        if (_1640 > 0.0)
        {
            _2459 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2459 = frontier_phi_68_61_ladder;
        }
        float _2461 = isnan(_2269) ? _1924 : (isnan(_1924) ? _2269 : min(_1924, _2269));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1634) + _1623;
        float _2467 = (_2462 * _1637) + _1627;
        float _2468 = (_2462 * _1640) + _1631;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_33_68_ladder = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_33_68_ladder_2;
        _1661 = frontier_phi_33_68_ladder;
        _1663 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1571);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1675 = ((((1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_662 * _649)) * _633;
    float _1676 = _1675 * ((cbModelParam._m0[1u].w * (_1659 - _1562)) + _1562);
    float _1677 = _1675 * ((cbModelParam._m0[1u].w * (_1661 - _1564)) + _1564);
    float _1678 = _1675 * ((cbModelParam._m0[1u].w * (_1663 - _1566)) + _1566);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    uvec4 _1697 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1699 = _1697.x * 14u;
    uint _1700 = _1699 + 13u;
    float _1705 = _633 + (-1.0);
    float _1708 = (cbLight._m0[_1700].x * _1705) + 1.0;
    float _1709 = (cbLight._m0[_1700].y * _1705) + 1.0;
    uint _1710 = _1699 + 5u;
    float _1716 = isnan(1.0) ? _1709 : (isnan(_1709) ? 1.0 : min(_1709, 1.0));
    uint _1720 = _1699 + 4u;
    float _1726 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1730 = _1699 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_518, _519, _520));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_518, _519, _520));
    float _3671 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3682 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1710].x * _1716) * _1751) + ((cbLight._m0[_1720].x * _1726) * _1749);
    float _1759 = ((_1716 * cbLight._m0[_1710].y) * _1751) + ((_1726 * cbLight._m0[_1720].y) * _1749);
    float _1760 = ((_1716 * cbLight._m0[_1710].z) * _1751) + ((_1726 * cbLight._m0[_1720].z) * _1749);
    uint _1762 = _1699 + 8u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _521) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1699].x + _545;
    float _1778 = cbLight._m0[_1699].y + _546;
    float _1779 = cbLight._m0[_1699].z + _547;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1699].xyz));
    float _3693 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1791 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1792 = dot(vec3(_518, _519, _520), vec3(_1784, _1785, _1786));
    float _3715 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1784, _1785, _1786));
    float _3726 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1776 * _1776;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1791 * ((_1790 * _1816) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1816) + _1776) * _1790))) * _1790;
    float _3737 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    uint _1840 = _1699 + 9u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _521) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1730].x + _545;
    float _1854 = cbLight._m0[_1730].y + _546;
    float _1855 = cbLight._m0[_1730].z + _547;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1730].xyz));
    float _3748 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _1867 = dot(vec3(_518, _519, _520), vec3(_1860, _1861, _1862));
    float _3759 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1860, _1861, _1862));
    float _3770 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1852 * _1852;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1888 = (exp2(log2(1.0 - (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1889 = 1.0 - _1852;
    float _1899 = (0.5 / (((_1791 * ((_1866 * _1889) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1889) + _1852) * _1866))) * _1866;
    float _3781 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    float _1911 = (((_1888 * cbLight._m0[_1840].x) * _1901) * _1716) + (((_1815 * cbLight._m0[_1762].x) * _1829) * _1726);
    float _1912 = (((_1888 * cbLight._m0[_1840].y) * _1901) * _1716) + (((_1815 * cbLight._m0[_1762].y) * _1829) * _1726);
    float _1913 = (((_1888 * cbLight._m0[_1840].z) * _1901) * _1716) + (((_1815 * cbLight._m0[_1762].z) * _1829) * _1726);
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    if (_1697.y == 0u)
    {
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1969 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1968;
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1968;
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1968;
        uvec4 _1983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1984 = _1983.x;
        uint _1995 = uint((float(_1983.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _1984))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _1984)));
        float _2005 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2006 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        uint _2009 = uint(isnan(14.0) ? _2006 : (isnan(_2006) ? 14.0 : min(_2006, 14.0)));
        uvec4 _2014 = texelFetch(g_lightClusterGridBuffer, int(((_2009 << 2u) + (_1995 << 6u)) >> 2u));
        uint _2015 = _2014.x;
        uint _2016 = _1983.z;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        if (((((1u << ((_2016 >> 4u) & 15u)) + 4294967295u) & _2015) == 0u) || ((_2016 & 240u) == 0u))
        {
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
        }
        else
        {
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            uint _2312 = 0u;
            uint _2321;
            bool _2322;
            for (;;)
            {
                _2321 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2312 << 2u)) >> 2u)).x;
                _2322 = _2321 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2322)
                {
                    frontier_phi_63_pred = _2308;
                    frontier_phi_63_pred_1 = _2311;
                    frontier_phi_63_pred_2 = _2310;
                    frontier_phi_63_pred_3 = _2309;
                    frontier_phi_63_pred_4 = _2307;
                    frontier_phi_63_pred_5 = _2306;
                }
                else
                {
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    uint _2508;
                    _2502 = _2306;
                    _2503 = _2307;
                    _2504 = _2308;
                    _2505 = _2309;
                    _2506 = _2310;
                    _2507 = _2311;
                    _2508 = _2321;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    for (;;)
                    {
                        uint _2512 = uint(findLSB(_2508)) + (_2312 << 5u);
                        uint _2509 = (_2508 + 4294967295u) & _2508;
                        uint _2514 = _2512 * 48u;
                        vec4 _2528 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 3u)).x));
                        uint _2534 = (_2512 * 48u) + 4u;
                        vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2534)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2534 + 3u)).x));
                        uint _2553 = (_2512 * 48u) + 8u;
                        vec3 _2564 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x));
                        float _2568 = _2528.x - _1969;
                        float _2569 = _2528.y - _1970;
                        float _2570 = _2528.z - _1971;
                        float _2571 = dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570));
                        float _2574 = inversesqrt(_2571);
                        float _2575 = _2574 * _2568;
                        float _2576 = _2574 * _2569;
                        float _2577 = _2574 * _2570;
                        float _2578 = dot(vec3(_588, _591, _594), vec3(_2575, _2576, _2577));
                        float _2583 = 1.0 - (_2571 * _2528.w);
                        float _3802 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
                        float _2584 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                        float _2585 = sqrt(_2571) * _2547.w;
                        float _2588 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                        float _2589 = _2588 * _2588;
                        float _2592 = ((1.0 - _2589) * _2578) + _2589;
                        float _2595 = _2585 * _2585;
                        float _2599 = ((isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))) * _2584) / ((_2595 * 0.699999988079071044921875) + 1.0);
                        float _2603 = (-0.0) - _1969;
                        float _2604 = (-0.0) - _1970;
                        float _2605 = (-0.0) - _1971;
                        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
                        float _2610 = _2609 * _2603;
                        float _2611 = _2609 * _2604;
                        float _2612 = _2609 * _2605;
                        float _2620 = exp2(log2(1.0 / ((_2595 * 3.5) + 5.0)) * 0.25);
                        float _2621 = 1.0 - _649;
                        float _2628 = sqrt(1.0 - ((1.0 - (_2621 * _2621)) * (1.0 - (_2620 * _2620))));
                        float _2629 = _2628 * _2628;
                        float _2630 = _2629 * _2629;
                        float _2631 = _2610 + _2575;
                        float _2632 = _2611 + _2576;
                        float _2633 = _2612 + _2577;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2641 = dot(vec3(_588, _591, _594), vec3(_2610, _2611, _2612));
                        float _3818 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2644 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
                        float _2645 = dot(vec3(_588, _591, _594), vec3(_2637 * _2631, _2637 * _2632, _2637 * _2633));
                        float _3829 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2648 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                        float _2652 = ((_2648 * _2648) * (_2630 + (-1.0))) + 1.0;
                        float _2653 = _2588 * _2629;
                        float _2654 = _2653 * _2653;
                        float _2657 = ((1.0 - _2654) * _2578) + _2654;
                        float _3840 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2659 = 1.0 - _2629;
                        float _2669 = (0.5 / (((_2658 * ((_2644 * _2659) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2659) + _2629) * _2644))) * _2658;
                        float _3851 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2680 = (((_2630 * 3.1415927410125732421875) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) / ((_2652 * _2652) * ((_2595 * 2.1991131305694580078125) + 3.141590118408203125))) * _2584;
                        _2406 = (_2599 * _2547.x) + _2505;
                        _2407 = (_2599 * _2547.y) + _2506;
                        _2408 = (_2599 * _2547.z) + _2507;
                        _2403 = (_2680 * _2564.x) + _2502;
                        _2404 = (_2680 * _2564.y) + _2503;
                        _2405 = (_2680 * _2564.z) + _2504;
                        if (_2509 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2502 = _2403;
                            _2503 = _2404;
                            _2504 = _2405;
                            _2505 = _2406;
                            _2506 = _2407;
                            _2507 = _2408;
                            _2508 = _2509;
                        }
                    }
                    frontier_phi_63_pred = _2405;
                    frontier_phi_63_pred_1 = _2408;
                    frontier_phi_63_pred_2 = _2407;
                    frontier_phi_63_pred_3 = _2406;
                    frontier_phi_63_pred_4 = _2404;
                    frontier_phi_63_pred_5 = _2403;
                }
                _2127 = frontier_phi_63_pred;
                _2133 = frontier_phi_63_pred_1;
                _2131 = frontier_phi_63_pred_2;
                _2129 = frontier_phi_63_pred_3;
                _2125 = frontier_phi_63_pred_4;
                _2123 = frontier_phi_63_pred_5;
                uint _2313 = _2312 + 1u;
                if (_2313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2306 = _2123;
                    _2307 = _2125;
                    _2308 = _2127;
                    _2309 = _2129;
                    _2310 = _2131;
                    _2311 = _2133;
                    _2312 = _2313;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
        }
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.z;
        uint _2139 = (_2137 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2139) & _2015) == 0u)
        {
            _2274 = _2122;
            _2276 = _2124;
            _2278 = _2126;
            _2280 = _2128;
            _2282 = _2130;
            _2284 = _2132;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float _2300 = _2299 * _1969;
            float _2301 = _2299 * _1970;
            float _2302 = _2299 * _1971;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2139 < ((_2137 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2485 = _2122;
                float _2486 = _2124;
                float _2487 = _2126;
                float _2488 = _2128;
                float _2489 = _2130;
                float _2490 = _2132;
                uint _2491 = _2139;
                uint _2500;
                bool _2501;
                for (;;)
                {
                    _2500 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2491 << 2u)) >> 2u)).x;
                    _2501 = _2500 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2501)
                    {
                        frontier_phi_77_pred = _2490;
                        frontier_phi_77_pred_1 = _2489;
                        frontier_phi_77_pred_2 = _2488;
                        frontier_phi_77_pred_3 = _2487;
                        frontier_phi_77_pred_4 = _2486;
                        frontier_phi_77_pred_5 = _2485;
                    }
                    else
                    {
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _2728 = _2485;
                        float _2729 = _2486;
                        float _2730 = _2487;
                        float _2731 = _2488;
                        float _2732 = _2489;
                        float _2733 = _2490;
                        uint _2734 = _2500;
                        uint _2735;
                        vec4 _2760;
                        float _2761;
                        vec4 _2776;
                        vec3 _2788;
                        vec4 _2804;
                        vec4 _2819;
                        float _2865;
                        bool _2866;
                        for (;;)
                        {
                            uint _2745 = ((_2491 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2734));
                            _2735 = (_2734 + 4294967295u) & _2734;
                            uint _2747 = _2745 * 40u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            _2761 = _2760.w;
                            uint _2763 = (_2745 * 40u) + 4u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2778 = (_2745 * 40u) + 8u;
                            _2788 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x));
                            uint _2791 = (_2745 * 40u) + 16u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2745 * 40u) + 20u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2821 = (_2745 * 40u) + 24u;
                            vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2840 = (_2745 * 40u) + 28u;
                            vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            _2865 = fma(_1971, _2853.z, fma(_1970, _2853.y, _2853.x * _1969)) + _2853.w;
                            _2866 = !((fma(_1971, _2834.z, fma(_1970, _2834.y, _2834.x * _1969)) + _2834.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2866)
                            {
                                float _2893 = _2760.x - _1969;
                                float _2894 = _2760.y - _1970;
                                float _2895 = _2760.z - _1971;
                                float _2896 = dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895));
                                float _2899 = inversesqrt(_2896);
                                float _2900 = _2899 * _2893;
                                float _2901 = _2899 * _2894;
                                float _2902 = _2899 * _2895;
                                float _2906 = 1.0 - (_2896 / (_2761 * _2761));
                                float _3862 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                                float _2911 = sqrt(_2896) * _2776.w;
                                float _2913 = 1.39999997615814208984375 / (_2911 + 1.39999997615814208984375);
                                float _2914 = _2913 * _2913;
                                float _2917 = ((1.0 - _2914) * dot(vec3(_2900, _2901, _2902), vec3(_588, _591, _594))) + _2914;
                                float _2920 = _2911 * _2911;
                                float _2924 = (fma(_1971, _2804.z, fma(_1970, _2804.y, _2804.x * _1969)) + _2804.w) / _2865;
                                float _2925 = (fma(_1971, _2819.z, fma(_1970, _2819.y, _2819.x * _1969)) + _2819.w) / _2865;
                                float _2929 = 1.0 - dot(vec2(_2924, _2925), vec2(_2924, _2925));
                                float _3878 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                                float _2931 = _2930 * (((isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))) * _2907) / ((_2920 * 0.699999988079071044921875) + 1.0));
                                float _2943 = exp2(log2(1.0 / ((_2920 * 3.5) + 5.0)) * 0.25);
                                float _2944 = 1.0 - _649;
                                float _2951 = sqrt(1.0 - ((1.0 - (_2944 * _2944)) * (1.0 - (_2943 * _2943))));
                                float _2952 = _2951 * _2951;
                                float _2953 = _2952 * _2952;
                                float _2954 = _2900 - _2300;
                                float _2955 = _2901 - _2301;
                                float _2956 = _2902 - _2302;
                                float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                                float _2964 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2300, (-0.0) - _2301, (-0.0) - _2302));
                                float _3889 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _2968 = dot(vec3(_588, _591, _594), vec3(_2960 * _2954, _2960 * _2955, _2960 * _2956));
                                float _3900 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2971 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2975 = ((_2971 * _2971) * (_2953 + (-1.0))) + 1.0;
                                float _2976 = _2913 * _2952;
                                float _2977 = _2976 * _2976;
                                float _2983 = ((1.0 - _2977) * dot(vec3(_588, _591, _594), vec3(_2900, _2901, _2902))) + _2977;
                                float _3911 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2985 = 1.0 - _2952;
                                float _2995 = (0.5 / (((_2984 * ((_2967 * _2985) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2984 * _2985) + _2952) * _2967))) * _2984;
                                float _3922 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _3005 = (_2930 * _2907) * (((_2953 * 3.1415927410125732421875) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) / ((_2975 * _2975) * ((_2920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2931 * _2776.x;
                                frontier_phi_83_pred_1 = _2931 * _2776.z;
                                frontier_phi_83_pred_2 = _2931 * _2776.y;
                                frontier_phi_83_pred_3 = _3005 * _2788.z;
                                frontier_phi_83_pred_4 = _3005 * _2788.y;
                                frontier_phi_83_pred_5 = _3005 * _2788.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3012 = frontier_phi_83_pred;
                            _3014 = frontier_phi_83_pred_1;
                            _3013 = frontier_phi_83_pred_2;
                            _3011 = frontier_phi_83_pred_3;
                            _3010 = frontier_phi_83_pred_4;
                            _3009 = frontier_phi_83_pred_5;
                            _2718 = _3012 + _2731;
                            _2719 = _3013 + _2732;
                            _2720 = _3014 + _2733;
                            _2715 = _3009 + _2728;
                            _2716 = _3010 + _2729;
                            _2717 = _3011 + _2730;
                            if (_2735 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2735;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2720;
                        frontier_phi_77_pred_1 = _2719;
                        frontier_phi_77_pred_2 = _2718;
                        frontier_phi_77_pred_3 = _2717;
                        frontier_phi_77_pred_4 = _2716;
                        frontier_phi_77_pred_5 = _2715;
                    }
                    _2285 = frontier_phi_77_pred;
                    _2283 = frontier_phi_77_pred_1;
                    _2281 = frontier_phi_77_pred_2;
                    _2279 = frontier_phi_77_pred_3;
                    _2277 = frontier_phi_77_pred_4;
                    _2275 = frontier_phi_77_pred_5;
                    uint _2492 = _2491 + 1u;
                    if (_2492 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2485 = _2275;
                        _2486 = _2277;
                        _2487 = _2279;
                        _2488 = _2281;
                        _2489 = _2283;
                        _2490 = _2285;
                        _2491 = _2492;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2277;
                frontier_phi_52_53_ladder_1 = _2285;
                frontier_phi_52_53_ladder_2 = _2283;
                frontier_phi_52_53_ladder_3 = _2281;
                frontier_phi_52_53_ladder_4 = _2279;
                frontier_phi_52_53_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_52_53_ladder = _2124;
                frontier_phi_52_53_ladder_1 = _2132;
                frontier_phi_52_53_ladder_2 = _2130;
                frontier_phi_52_53_ladder_3 = _2128;
                frontier_phi_52_53_ladder_4 = _2126;
                frontier_phi_52_53_ladder_5 = _2122;
            }
            _2274 = frontier_phi_52_53_ladder_5;
            _2276 = frontier_phi_52_53_ladder;
            _2278 = frontier_phi_52_53_ladder_4;
            _2280 = frontier_phi_52_53_ladder_3;
            _2282 = frontier_phi_52_53_ladder_2;
            _2284 = frontier_phi_52_53_ladder_1;
        }
        float _2289 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2028 = (_2289 * _2280) + _1758;
        _2030 = (_2289 * _2282) + _1759;
        _2032 = (_2289 * _2284) + _1760;
        _2034 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1911;
        _2036 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1912;
        _2038 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1913;
    }
    else
    {
        _2028 = _1758;
        _2030 = _1759;
        _2032 = _1760;
        _2034 = _1911;
        _2036 = _1912;
        _2038 = _1913;
    }
    uint _2044 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _3938 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3949 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3960 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2069 = (((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_2028 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _633))) + ((_2034 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + (((_463.x * _281) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2044].x);
    float _2071 = ((((_463.y * _281) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2044].y) + ((_2036 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2030 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _633)));
    float _2073 = ((((_463.z * _281) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2044].z) + ((_2038 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2032 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _633)));
    float _2074 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2075 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    uint _2077 = _607 + 6u;
    float _2085 = _567 / cbSceneParam._m0[86u].x;
    float _2086 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2100 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2102 = _2100.x;
    float _2103 = _2100.y;
    float _2104 = _2100.z;
    float _2105 = _2100.w;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2147 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2148 = _2147 / _540;
        float _2159 = _2148 * _263;
        float _2160 = _264 * _2148;
        float _2161 = (-0.0) - _2160;
        float _2162 = _2148 * _265;
        float _2164 = (cbSceneParam._m0[77u].w * _2161) / _2147;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2160;
        float _2172 = sqrt(((_2159 * _2159) + (_2160 * _2160)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2147)) * _2172;
        float _2181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2416;
        if (abs((_2161 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2416 = ((((_2165 > 0.0) ? exp2(_2181 * _2165) : (2.0 - exp2(_2183 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2335 = 1.0 / cbSceneParam._m0[80u].x;
            float _2336 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2337 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2346 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : min(_2336, 0.0));
            float _2347 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : min(_2337, 0.0));
            _2416 = ((abs(_2172 / _2161) * cbSceneParam._m0[80u].y) * ((((_2346 - _2347) * 2.0) - ((exp2(_2181 * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0)))) - exp2(_2181 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0))))) * _2335)) - ((exp2(_2183 * _2346) - exp2(_2183 * _2347)) * _2335))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2418 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, 1.0), 0.0);
        float _2427 = exp2((_2416 * (-1.44269502162933349609375)) * (1.0 - _2418.w));
        float _2428 = log2(_2427);
        float _2444 = log2(_2105);
        _2185 = (exp2(_2444 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].x)) * _2418.x) / cbSceneParam._m0[78u].x)) + _2102;
        _2187 = (exp2(_2444 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].y)) * _2418.y) / cbSceneParam._m0[78u].y)) + _2103;
        _2189 = (exp2(_2444 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2428 * cbSceneParam._m0[78u].z)) * _2418.z) / cbSceneParam._m0[78u].z)) + _2104;
        _2191 = _2427 * _2105;
    }
    else
    {
        _2185 = _2102;
        _2187 = _2103;
        _2189 = _2104;
        _2191 = _2105;
    }
    bool _2454;
    vec4 _2201;
    vec4 _2223;
    float _2225;
    float _2229;
    float _2230;
    float _2231;
    float _2232;
    bool _2242;
    for (;;)
    {
        _2201 = cbMatDynParam._m0[0u];
        float _2203 = roundEven(_2201.y);
        bool _2204 = _2203 == 3.0;
        float _2205 = log2(_2191);
        float _2212 = exp2(_2205 * cbSceneParam._m0[78u].x) * _2074;
        float _2213 = exp2(_2205 * cbSceneParam._m0[78u].y) * _2075;
        float _2214 = exp2(_2205 * cbSceneParam._m0[78u].z) * _2076;
        float _2221 = _554 + (-0.5);
        _2223 = cbMtdParam._m0[1u];
        _2225 = _2223.y * _2221;
        float _2228 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2229 = _2228 * (_2204 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
        _2230 = _2228 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
        _2231 = _2228 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2189)));
        _2232 = _2221 * 0.999000012874603271484375;
        _2242 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2242)
        {
            if ((cbInstanceData._m0[_607 + 7u].x + _2232) < 0.5)
            {
                _2454 = true;
                break;
            }
        }
        uint _2370 = _609 + uint(_2201.w);
        if ((cbInstanceData._m0[_2370].w < 1.0) && ((cbInstanceData._m0[_2370].w + _2232) < 0.5))
        {
            _2454 = true;
            break;
        }
        if ((_2225 + 1.0) < _2223.x)
        {
            _2454 = true;
            break;
        }
        _2454 = false;
        break;
    }
    float _2685;
    if (_2454)
    {
        discard_state = true;
        _2685 = 0.0;
    }
    else
    {
        _2685 = cbInstanceData._m0[_2077].w;
    }
    SV_Target.x = _2229;
    SV_Target.y = _2230;
    SV_Target.z = _2231;
    SV_Target.w = _2685;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2077].w;
    discard_exit();
}


