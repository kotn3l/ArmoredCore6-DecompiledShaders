#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _927;
uint _2121;
uint _2122;
uint _2123;
uint _2366;
uint _2367;
uint _2368;
float _2639;
float _2640;
float _2641;
float _2642;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _291 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _326 = cbMtdParam._m0[21u].w + _267;
    float _327 = cbMtdParam._m0[22u].x + _268;
    float _328 = cbMtdParam._m0[22u].y + _269;
    float _342 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _343 = (-0.0) - dot(vec3(_326, _327, _328), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _344 = (-0.0) - dot(vec3(_326, _327, _328), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _348 = inversesqrt(dot(vec3(_342, _343, _344), vec3(_342, _343, _344)));
    float _351 = _348 * _344;
    float _352 = (_348 * _342) + (((_291.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _353 = (_348 * _343) + (((_291.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _354 = _352 * cbMtdParam._m0[18u].z;
    float _355 = _353 * cbMtdParam._m0[18u].y;
    float _356 = fract(TEXCOORD.x);
    float _357 = fract(TEXCOORD.y);
    float _363;
    if (_354 > 0.0)
    {
        _363 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _363 = frontier_phi_3_2_ladder;
    }
    float _371;
    if (_355 > 0.0)
    {
        _371 = (1.0 - _357) / _355;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_355 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _357) / _355;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _371 = frontier_phi_7_6_ladder;
    }
    bool _373 = _351 > 0.0;
    float _375 = _373 ? (cbMtdParam._m0[15u].x / _351) : 5000.0;
    float _376 = isnan(_371) ? _363 : (isnan(_363) ? _371 : min(_363, _371));
    float _377 = isnan(_375) ? _376 : (isnan(_376) ? _375 : min(_376, _375));
    float _381 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _382 = _356 + (-0.5);
    float _385 = _357 + (-0.5);
    float _388 = ((_377 * _351) + _381) / _381;
    vec4 _412 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_382 + (_377 * _354)) / _388) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_385 + (_377 * _355)) / _388) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _422 = cbMtdParam._m0[9u].x * _412.x;
    float _423 = cbMtdParam._m0[9u].y * _412.y;
    float _424 = cbMtdParam._m0[9u].z * _412.z;
    float _442 = _352 * cbMtdParam._m0[20u].z;
    float _443 = _353 * cbMtdParam._m0[20u].y;
    bool _444 = _442 > 0.0;
    float _449;
    if (_444)
    {
        _449 = (1.0 - _356) / _442;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _356) / _442;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _449 = frontier_phi_11_10_ladder;
    }
    bool _451 = _443 > 0.0;
    float _456;
    if (_451)
    {
        _456 = (1.0 - _357) / _443;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _357) / _443;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _456 = frontier_phi_15_14_ladder;
    }
    float _459 = _373 ? (cbMtdParam._m0[16u].x / _351) : 5000.0;
    float _460 = isnan(_456) ? _449 : (isnan(_449) ? _456 : min(_449, _456));
    float _461 = isnan(_459) ? _460 : (isnan(_460) ? _459 : min(_460, _459));
    float _465 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _469 = ((_461 * _351) + _465) / _465;
    float _474 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _476 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _492 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_382 + (_461 * _442)) / _469) + 0.5) + _474) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_385 + (_461 * _443)) / _469) + 0.5) + _476) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _504;
    if (_444)
    {
        _504 = (1.0 - _356) / _442;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _356) / _442;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _504 = frontier_phi_19_18_ladder;
    }
    float _510;
    if (_451)
    {
        _510 = (1.0 - _357) / _443;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _357) / _443;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _510 = frontier_phi_23_22_ladder;
    }
    float _512 = isnan(_510) ? _504 : (isnan(_504) ? _510 : min(_504, _510));
    float _513 = isnan(_459) ? _512 : (isnan(_512) ? _459 : min(_512, _459));
    float _520 = ((_513 * _351) + _465) / _465;
    vec4 _541 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_382 + (_513 * _442)) / _520) + 0.5) + _474) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_385 + (_513 * _443)) / _520) + 0.5) + _476) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _550 = (_543 * ((_492.x * cbMtdParam._m0[10u].x) - _422)) + _422;
    float _551 = (_543 * ((_492.y * cbMtdParam._m0[10u].y) - _423)) + _423;
    float _552 = (_543 * ((_492.z * cbMtdParam._m0[10u].z) - _424)) + _424;
    float _566 = _352 * cbMtdParam._m0[21u].x;
    float _567 = _353 * cbMtdParam._m0[20u].w;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _356) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _356) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _357) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _357) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _373 ? (cbMtdParam._m0[17u].z / _351) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _593 = ((_585 * _351) + _589) / _589;
    float _598 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _600 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _617 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_382 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_385 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _629;
    if (_568)
    {
        _629 = (1.0 - _356) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _356) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _629 = frontier_phi_35_34_ladder;
    }
    float _635;
    if (_575)
    {
        _635 = (1.0 - _357) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _357) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _635 = frontier_phi_39_38_ladder;
    }
    float _637 = isnan(_635) ? _629 : (isnan(_629) ? _635 : min(_629, _635));
    float _638 = isnan(_583) ? _637 : (isnan(_637) ? _583 : min(_637, _583));
    float _645 = ((_638 * _351) + _589) / _589;
    vec4 _665 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_382 + (_638 * _566)) / _645) + 0.5) + _598) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_385 + (_638 * _567)) / _645) + 0.5) + _600) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _667 = _665.x;
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _697 = _267 * _696;
    float _698 = _268 * _696;
    float _699 = _269 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _782 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _2701 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _2701 : (isnan(_2701) ? 1.0 : min(_2701, 1.0));
        float _787 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _2712 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0))) - _783)) + _783) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _728 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_718 * cbSceneParam._m0[86u].x, _719 * cbSceneParam._m0[86u].y));
    float _731 = _728.x * TEXCOORD.z;
    float _732 = (-0.0) - _697;
    float _733 = (-0.0) - _698;
    float _734 = (-0.0) - _699;
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _926;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = (cbModelParam._m0[37u].x * ((((fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _851 = (cbModelParam._m0[37u].y * ((((fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _852 = (((((fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        _926 = _889 * (_855.z + (-0.5));
        _928 = _889 * (_855.y + (-0.5));
        _929 = _889 * (_855.x + (-0.5));
        _930 = _899 * (_862.z + (-0.5));
        _931 = _899 * (_862.y + (-0.5));
        _932 = _899 * (_862.x + (-0.5));
        _933 = _909 * (_869.z + (-0.5));
        _934 = _909 * (_869.y + (-0.5));
        _935 = _909 * (_869.x + (-0.5));
        _936 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        _937 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        _938 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    }
    else
    {
        _926 = _927;
        _928 = _927;
        _929 = _927;
        _930 = _927;
        _931 = _927;
        _932 = _927;
        _933 = _927;
        _934 = _927;
        _935 = _927;
        _936 = _927;
        _937 = _927;
        _938 = _927;
    }
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = (cbModelParam._m0[38u].x * ((((fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _996 = (cbModelParam._m0[38u].y * ((((fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _997 = (((((fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1032 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1020.x + (-0.5));
        float _1064 = _1062 * (_1020.y + (-0.5));
        float _1065 = _1062 * (_1020.z + (-0.5));
        _1069 = _1032 * (_999.z + (-0.5));
        _1070 = _1032 * (_999.y + (-0.5));
        _1071 = _1032 * (_999.x + (-0.5));
        _1072 = _1042 * (_1006.z + (-0.5));
        _1073 = _1042 * (_1006.y + (-0.5));
        _1074 = _1042 * (_1006.x + (-0.5));
        _1075 = _1052 * (_1013.z + (-0.5));
        _1076 = _1052 * (_1013.y + (-0.5));
        _1077 = _1052 * (_1013.x + (-0.5));
        _1078 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        _1079 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        _1080 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    }
    else
    {
        _1069 = _927;
        _1070 = _927;
        _1071 = _927;
        _1072 = _927;
        _1073 = _927;
        _1074 = _927;
        _1075 = _927;
        _1076 = _927;
        _1077 = _927;
        _1078 = _927;
        _1079 = _927;
        _1080 = _927;
    }
    float _1095 = _697 * (-0.5);
    float _1096 = _698 * (-0.5);
    float _1097 = _699 * (-0.5);
    float _1098 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1101 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1104 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1139;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1111 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_926, _930, _933, _936));
        float _1115 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_928, _931, _934, _937));
        float _1119 = dot(vec4(_1095, _1096, _1097, 1.0), vec4(_929, _932, _935, _938));
        float _1126 = dot(vec4(cbModelParam._m0[39u]), vec4(_1095, _1096, _1097, 1.0));
        _1139 = dot(vec3(isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)), isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1139 = 1.0;
    }
    float _1150;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1141 = dot(vec4(cbModelParam._m0[40u]), vec4(_1095, _1096, _1097, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1141) ? 0.0 : (isnan(0.0) ? _1141 : max(0.0, _1141))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1154 = (_1150 * cbModelParam._m0[1u].x) + (_1139 * (1.0 - cbModelParam._m0[1u].x));
    float _1160 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1241;
    float _1243;
    float _1245;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1208 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1212 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1216 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1219 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1222 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1225 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1251;
        if (_1219 > 0.0)
        {
            _1251 = abs((1.0 - _1208) / _1219);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1219 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1208 + 1.0) / _1219);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1251 = frontier_phi_57_55_ladder;
        }
        float _1549;
        if (_1222 > 0.0)
        {
            _1549 = abs((1.0 - _1212) / _1222);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1222 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1212 + 1.0) / _1222);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1549 = frontier_phi_66_62_ladder;
        }
        float _1853;
        if (_1225 > 0.0)
        {
            _1853 = abs((1.0 - _1216) / _1225);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1216 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _1853 = frontier_phi_80_73_ladder;
        }
        float _1855 = isnan(_1549) ? _1251 : (isnan(_1251) ? _1549 : min(_1251, _1549));
        float _1856 = isnan(_1853) ? _1855 : (isnan(_1855) ? _1853 : min(_1855, _1853));
        float _1860 = (_1856 * _1219) + _1208;
        float _1861 = (_1856 * _1222) + _1212;
        float _1862 = (_1856 * _1225) + _1216;
        float _1863 = _1856 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1863;
        float _1866 = _1863 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_1862 > _1866) || ((_1862 < _1864) || ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 < _1864) || (_1860 > _1866))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1862, cbModelParam._m0[9u].z, fma(_1861, cbModelParam._m0[9u].y, _1860 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1862, cbModelParam._m0[10u].z, fma(_1861, cbModelParam._m0[10u].y, _1860 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1862, cbModelParam._m0[11u].z, fma(_1861, cbModelParam._m0[11u].y, _1860 * cbModelParam._m0[11u].x))), _1160);
            frontier_phi_56_80_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1241 = frontier_phi_56_80_ladder_2;
        _1243 = frontier_phi_56_80_ladder_1;
        _1245 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1160);
        _1241 = _1229.x * cbModelParam._m0[1u].y;
        _1243 = _1229.y * cbModelParam._m0[1u].y;
        _1245 = _1229.z * cbModelParam._m0[1u].y;
    }
    float _1248 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1300 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1304 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1308 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1311 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1314 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1317 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1554;
        if (_1311 > 0.0)
        {
            _1554 = abs((1.0 - _1300) / _1311);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1300 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1554 = frontier_phi_68_64_ladder;
        }
        float _1879;
        if (_1314 > 0.0)
        {
            _1879 = abs((1.0 - _1304) / _1314);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1304 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _1879 = frontier_phi_82_75_ladder;
        }
        float _2051;
        if (_1317 > 0.0)
        {
            _2051 = abs((1.0 - _1308) / _1317);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1308 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2051 = frontier_phi_100_93_ladder;
        }
        float _2053 = isnan(_1879) ? _1554 : (isnan(_1554) ? _1879 : min(_1554, _1879));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1311) + _1300;
        float _2059 = (_2054 * _1314) + _1304;
        float _2060 = (_2054 * _1317) + _1308;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2060, cbModelParam._m0[17u].z, fma(_2059, cbModelParam._m0[17u].y, _2058 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2060, cbModelParam._m0[18u].z, fma(_2059, cbModelParam._m0[18u].y, _2058 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2060, cbModelParam._m0[19u].z, fma(_2059, cbModelParam._m0[19u].y, _2058 * cbModelParam._m0[19u].x))), _1248);
            frontier_phi_65_100_ladder = _2229.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2229.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2229.x * cbModelParam._m0[1u].z;
        }
        _1336 = frontier_phi_65_100_ladder_2;
        _1338 = frontier_phi_65_100_ladder_1;
        _1340 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1248);
        _1336 = _1320.x * cbModelParam._m0[1u].z;
        _1338 = _1320.y * cbModelParam._m0[1u].z;
        _1340 = _1320.z * cbModelParam._m0[1u].z;
    }
    float _1352 = _731 * 0.01200000010430812835693359375;
    float _1354 = _1352 * ((cbModelParam._m0[1u].w * (_1336 - _1241)) + _1241);
    float _1355 = _1352 * ((cbModelParam._m0[1u].w * (_1338 - _1243)) + _1243);
    float _1356 = _1352 * ((cbModelParam._m0[1u].w * (_1340 - _1245)) + _1245);
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, _1354 * cbSceneParam._m0[91u].x));
    vec4 _1391 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1393 = _1391.w;
    uint _1409 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1413 = floatBitsToUint(cbInstanceData._m0[_1409 + 5u]);
    uint _1415 = _1413.x * 14u;
    uint _1416 = _1415 + 13u;
    float _1421 = _731 + (-1.0);
    float _1424 = (cbLight._m0[_1416].x * _1421) + 1.0;
    float _1425 = (cbLight._m0[_1416].y * _1421) + 1.0;
    uint _1426 = _1415 + 8u;
    float _1437 = cbLight._m0[_1415].x + _697;
    float _1438 = cbLight._m0[_1415].y + _698;
    float _1439 = cbLight._m0[_1415].z + _699;
    float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
    float _1447 = dot(vec3(0.0), vec3(cbLight._m0[_1415].xyz));
    float _2838 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _1450 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
    float _1451 = dot(vec3(0.0), vec3(_697, _698, _699));
    float _2849 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1454 = isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0));
    float _1455 = dot(vec3(cbLight._m0[_1415].xyz), vec3(_1437 * _1443, _1438 * _1443, _1439 * _1443));
    float _2860 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
    float _1466 = (exp2(log2(1.0 - (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1472 = (0.5 / ((_1450 + 9.9999999392252902907785028219223e-09) + _1454)) * _1450;
    float _2871 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _1474 = (isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0))) * 0.31831014156341552734375;
    float _1476 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
    uint _1489 = _1415 + 9u;
    uint _1495 = _1415 | 1u;
    float _1501 = cbLight._m0[_1495].x + _697;
    float _1502 = cbLight._m0[_1495].y + _698;
    float _1503 = cbLight._m0[_1495].z + _699;
    float _1507 = inversesqrt(dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503)));
    float _1511 = dot(vec3(0.0), vec3(cbLight._m0[_1495].xyz));
    float _2887 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _1514 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    float _1515 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_1501 * _1507, _1502 * _1507, _1503 * _1507));
    float _2898 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _1524 = (exp2(log2(1.0 - (isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1528 = (0.5 / ((_1514 + 9.9999999392252902907785028219223e-09) + _1454)) * _1514;
    float _2909 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _1530 = (isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0))) * 0.31831014156341552734375;
    float _1531 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
    float _1541 = (((_1524 * cbLight._m0[_1489].x) * _1530) * _1531) + ((((cbLight._m0[_1426].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1393))) * _1466) * _1474) * _1476);
    float _1542 = (((_1524 * cbLight._m0[_1489].y) * _1530) * _1531) + ((((cbLight._m0[_1426].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1393))) * _1466) * _1474) * _1476);
    float _1543 = (((_1524 * cbLight._m0[_1489].z) * _1530) * _1531) + ((((cbLight._m0[_1426].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1393))) * _1466) * _1474) * _1476);
    float _1659;
    float _1661;
    float _1663;
    if (_1413.y == 0u)
    {
        float _1599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1599;
        float _1601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1599;
        float _1602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1599;
        uvec4 _1614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1615 = _1614.x;
        uint _1626 = uint((float(_1614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _1615))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _1615)));
        float _1636 = (log2(_1602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1637 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        uint _1640 = uint(isnan(14.0) ? _1637 : (isnan(_1637) ? 14.0 : min(_1637, 14.0)));
        uvec4 _1645 = texelFetch(g_lightClusterGridBuffer, int(((_1640 << 2u) + (_1626 << 6u)) >> 2u));
        uint _1646 = _1645.x;
        uint _1647 = _1614.z;
        float _1736;
        float _1738;
        float _1740;
        if (((((1u << ((_1647 >> 4u) & 15u)) + 4294967295u) & _1646) == 0u) || ((_1647 & 240u) == 0u))
        {
            _1736 = 0.0;
            _1738 = 0.0;
            _1740 = 0.0;
        }
        else
        {
            float _1737;
            float _1739;
            float _1741;
            float _1904 = 0.0;
            float _1905 = 0.0;
            float _1906 = 0.0;
            uint _1907 = 0u;
            uint _1916;
            bool _1917;
            for (;;)
            {
                _1916 = texelFetch(g_lightClassification, int((((_1640 << 5u) + (_1626 << 9u)) + (_1907 << 2u)) >> 2u)).x;
                _1917 = _1916 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_1917)
                {
                    frontier_phi_95_pred = _1906;
                    frontier_phi_95_pred_1 = _1905;
                    frontier_phi_95_pred_2 = _1904;
                }
                else
                {
                    float _2091;
                    float _2092;
                    float _2093;
                    uint _2094;
                    _2091 = _1904;
                    _2092 = _1905;
                    _2093 = _1906;
                    _2094 = _1916;
                    float _1998;
                    float _1999;
                    float _2000;
                    for (;;)
                    {
                        uint _2098 = uint(findLSB(_2094)) + (_1907 << 5u);
                        uint _2095 = (_2094 + 4294967295u) & _2094;
                        uint _2100 = _2098 * 48u;
                        vec4 _2114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2100)).x, texelFetch(g_PointLightRenderingBuffer, int(_2100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2100 + 3u)).x));
                        uint _2131 = (_2098 * 48u) + 8u;
                        vec3 _2142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2131)).x, texelFetch(g_PointLightRenderingBuffer, int(_2131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2131 + 2u)).x));
                        float _2146 = _2114.x - _1600;
                        float _2147 = _2114.y - _1601;
                        float _2148 = _2114.z - _1602;
                        float _2149 = dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148));
                        float _2152 = inversesqrt(_2149);
                        float _2161 = 1.0 - (_2149 * _2114.w);
                        float _2935 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
                        float _2163 = sqrt(_2149) * uintBitsToFloat(uvec4(_2121, _2122, _2123, texelFetch(g_PointLightRenderingBuffer, int(((_2098 * 48u) + 4u) + 3u)).x)).w;
                        float _2166 = 1.39999997615814208984375 / (_2163 + 1.39999997615814208984375);
                        float _2167 = _2166 * _2166;
                        float _2170 = ((1.0 - _2167) * dot(vec3(0.0), vec3(_2152 * _2146, _2152 * _2147, _2152 * _2148))) + _2167;
                        float _2172 = (-0.0) - _1600;
                        float _2173 = (-0.0) - _1601;
                        float _2174 = (-0.0) - _1602;
                        float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
                        float _2182 = dot(vec3(0.0), vec3(_2178 * _2172, _2178 * _2173, _2178 * _2174));
                        float _2946 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
                        float _2957 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
                        float _2186 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
                        float _2190 = (0.5 / (((isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) + 9.9999999392252902907785028219223e-09) + _2186)) * _2186;
                        float _2968 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
                        float _2199 = (((isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0))) * 3.1415927410125732421875) / (((_2163 * _2163) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)));
                        _1998 = (_2199 * _2142.x) + _2091;
                        _1999 = (_2199 * _2142.y) + _2092;
                        _2000 = (_2199 * _2142.z) + _2093;
                        if (_2095 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2091 = _1998;
                            _2092 = _1999;
                            _2093 = _2000;
                            _2094 = _2095;
                        }
                    }
                    frontier_phi_95_pred = _2000;
                    frontier_phi_95_pred_1 = _1999;
                    frontier_phi_95_pred_2 = _1998;
                }
                _1741 = frontier_phi_95_pred;
                _1739 = frontier_phi_95_pred_1;
                _1737 = frontier_phi_95_pred_2;
                uint _1908 = _1907 + 1u;
                if (_1908 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1904 = _1737;
                    _1905 = _1739;
                    _1906 = _1741;
                    _1907 = _1908;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1736 = _1737;
            _1738 = _1739;
            _1740 = _1741;
        }
        uvec4 _1744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1745 = _1744.z;
        uint _1747 = (_1745 >> 8u) & 15u;
        float _1884;
        float _1886;
        float _1888;
        if (((4294967295u << _1747) & _1646) == 0u)
        {
            _1884 = _1736;
            _1886 = _1738;
            _1888 = _1740;
        }
        else
        {
            float _1900 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1747 < ((_1745 >> 12u) & 15u))
            {
                float _1885;
                float _1887;
                float _1889;
                float _2077 = _1736;
                float _2078 = _1738;
                float _2079 = _1740;
                uint _2080 = _1747;
                uint _2089;
                bool _2090;
                for (;;)
                {
                    _2089 = texelFetch(g_lightClassification, int((((_1640 << 5u) + (_1626 << 9u)) + (_2080 << 2u)) >> 2u)).x;
                    _2090 = _2089 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2090)
                    {
                        frontier_phi_109_pred = _2079;
                        frontier_phi_109_pred_1 = _2078;
                        frontier_phi_109_pred_2 = _2077;
                    }
                    else
                    {
                        float _2234;
                        float _2235;
                        float _2236;
                        float _2455;
                        float _2456;
                        float _2457;
                        float _2244 = _2077;
                        float _2245 = _2078;
                        float _2246 = _2079;
                        uint _2247 = _2089;
                        uint _2248;
                        uint _2258;
                        vec4 _2273;
                        float _2274;
                        vec3 _2286;
                        vec4 _2301;
                        vec4 _2316;
                        float _2362;
                        bool _2363;
                        for (;;)
                        {
                            _2258 = ((_2080 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2247));
                            _2248 = (_2247 + 4294967295u) & _2247;
                            uint _2260 = _2258 * 40u;
                            _2273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2260 + 3u)).x));
                            _2274 = _2273.w;
                            uint _2276 = (_2258 * 40u) + 8u;
                            _2286 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2276 + 2u)).x));
                            uint _2288 = (_2258 * 40u) + 16u;
                            _2301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2288 + 3u)).x));
                            uint _2303 = (_2258 * 40u) + 20u;
                            _2316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2303 + 3u)).x));
                            uint _2318 = (_2258 * 40u) + 24u;
                            vec4 _2331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 3u)).x));
                            uint _2337 = (_2258 * 40u) + 28u;
                            vec4 _2350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2337 + 3u)).x));
                            _2362 = fma(_1602, _2350.z, fma(_1601, _2350.y, _2350.x * _1600)) + _2350.w;
                            _2363 = !((fma(_1602, _2331.z, fma(_1601, _2331.y, _2331.x * _1600)) + _2331.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2363)
                            {
                                float _2397 = _2273.x - _1600;
                                float _2398 = _2273.y - _1601;
                                float _2399 = _2273.z - _1602;
                                float _2400 = dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399));
                                float _2403 = inversesqrt(_2400);
                                float _2410 = 1.0 - (_2400 / (_2274 * _2274));
                                float _2979 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
                                float _2412 = sqrt(_2400) * uintBitsToFloat(uvec4(_2366, _2367, _2368, texelFetch(g_SpotLightRenderingBuffer, int(((_2258 * 40u) + 4u) + 3u)).x)).w;
                                float _2414 = 1.39999997615814208984375 / (_2412 + 1.39999997615814208984375);
                                float _2415 = _2414 * _2414;
                                float _2418 = (fma(_1602, _2301.z, fma(_1601, _2301.y, _2301.x * _1600)) + _2301.w) / _2362;
                                float _2419 = (fma(_1602, _2316.z, fma(_1601, _2316.y, _2316.x * _1600)) + _2316.w) / _2362;
                                float _2423 = 1.0 - dot(vec2(_2418, _2419), vec2(_2418, _2419));
                                float _2990 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
                                float _2431 = dot(vec3(0.0), vec3((-0.0) - (_1600 * _1900), (-0.0) - (_1601 * _1900), (-0.0) - (_1602 * _1900)));
                                float _3001 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
                                float _2439 = ((1.0 - _2415) * dot(vec3(0.0), vec3(_2403 * _2397, _2403 * _2398, _2403 * _2399))) + _2415;
                                float _3012 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
                                float _2440 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
                                float _2444 = (0.5 / (((isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0))) + 9.9999999392252902907785028219223e-09) + _2440)) * _2440;
                                float _3023 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                                float _2451 = ((isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0))) * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * (((isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * 3.1415927410125732421875) / (((_2412 * _2412) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2451 * _2286.y;
                                frontier_phi_115_pred_1 = _2451 * _2286.x;
                                frontier_phi_115_pred_2 = _2451 * _2286.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2456 = frontier_phi_115_pred;
                            _2455 = frontier_phi_115_pred_1;
                            _2457 = frontier_phi_115_pred_2;
                            _2234 = _2455 + _2244;
                            _2235 = _2456 + _2245;
                            _2236 = _2457 + _2246;
                            if (_2248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2244 = _2234;
                                _2245 = _2235;
                                _2246 = _2236;
                                _2247 = _2248;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2236;
                        frontier_phi_109_pred_1 = _2235;
                        frontier_phi_109_pred_2 = _2234;
                    }
                    _1889 = frontier_phi_109_pred;
                    _1887 = frontier_phi_109_pred_1;
                    _1885 = frontier_phi_109_pred_2;
                    uint _2081 = _2080 + 1u;
                    if (_2081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2077 = _1885;
                        _2078 = _1887;
                        _2079 = _1889;
                        _2080 = _2081;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _1889;
                frontier_phi_84_85_ladder_1 = _1887;
                frontier_phi_84_85_ladder_2 = _1885;
            }
            else
            {
                frontier_phi_84_85_ladder = _1740;
                frontier_phi_84_85_ladder_1 = _1738;
                frontier_phi_84_85_ladder_2 = _1736;
            }
            _1884 = frontier_phi_84_85_ladder_2;
            _1886 = frontier_phi_84_85_ladder_1;
            _1888 = frontier_phi_84_85_ladder;
        }
        float _1893 = isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0));
        _1659 = ((_1884 * 0.039999999105930328369140625) * _1893) + _1541;
        _1661 = ((_1886 * 0.039999999105930328369140625) * _1893) + _1542;
        _1663 = ((_1888 * 0.039999999105930328369140625) * _1893) + _1543;
    }
    else
    {
        _1659 = _1541;
        _1661 = _1542;
        _1663 = _1543;
    }
    uint _1669 = _1409 + 9u;
    uint _1670 = _1669 + uint(cbMatDynParam._m0[0u].w);
    float _1685 = (cbInstanceData._m0[_1670].x * ((_667 * ((_617.x * cbMtdParam._m0[14u].x) - _550)) + _550)) + ((_1659 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    float _1686 = (cbInstanceData._m0[_1670].y * ((_667 * ((_617.y * cbMtdParam._m0[14u].y) - _551)) + _551)) + ((_1661 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    float _1687 = (cbInstanceData._m0[_1670].z * ((_667 * ((_617.z * cbMtdParam._m0[14u].z) - _552)) + _552)) + ((_1663 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    uint _1691 = _1409 + 6u;
    float _1699 = _718 / cbSceneParam._m0[86u].x;
    float _1700 = _719 / cbSceneParam._m0[86u].y;
    vec4 _1714 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1699, _1700, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1716 = _1714.x;
    float _1717 = _1714.y;
    float _1718 = _1714.z;
    float _1719 = _1714.w;
    float _1793;
    float _1795;
    float _1797;
    float _1799;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _1755 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _1756 = _1755 / _692;
        float _1767 = _1756 * _267;
        float _1768 = _268 * _1756;
        float _1769 = (-0.0) - _1768;
        float _1770 = _1756 * _269;
        float _1772 = (cbSceneParam._m0[77u].w * _1769) / _1755;
        float _1773 = _1772 + cbSceneParam._m0[79u].w;
        float _1774 = cbSceneParam._m0[79u].w - _1768;
        float _1780 = sqrt(((_1767 * _1767) + (_1768 * _1768)) + (_1770 * _1770));
        float _1783 = (1.0 - (cbSceneParam._m0[77u].w / _1755)) * _1780;
        float _1789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2008;
        if (abs((_1769 - _1772) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2008 = ((((_1773 > 0.0) ? exp2(_1789 * _1773) : (2.0 - exp2(_1791 * _1773))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1783;
        }
        else
        {
            float _1930 = 1.0 / cbSceneParam._m0[80u].x;
            float _1931 = isnan(_1774) ? _1773 : (isnan(_1773) ? _1774 : max(_1773, _1774));
            float _1932 = isnan(_1774) ? _1773 : (isnan(_1773) ? _1774 : min(_1773, _1774));
            float _1941 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : min(_1931, 0.0));
            float _1942 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : min(_1932, 0.0));
            _2008 = ((abs(_1780 / _1769) * cbSceneParam._m0[80u].y) * ((((_1941 - _1942) * 2.0) - ((exp2(_1789 * (isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)))) - exp2(_1789 * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))))) * _1930)) - ((exp2(_1791 * _1941) - exp2(_1791 * _1942)) * _1930))) + (_1783 * cbSceneParam._m0[80u].z);
        }
        vec4 _2010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1699, _1700, 1.0), 0.0);
        float _2019 = exp2((_2008 * (-1.44269502162933349609375)) * (1.0 - _2010.w));
        float _2020 = log2(_2019);
        float _2036 = log2(_1719);
        _1793 = (exp2(_2036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].x)) * _2010.x) / cbSceneParam._m0[78u].x)) + _1716;
        _1795 = (exp2(_2036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].y)) * _2010.y) / cbSceneParam._m0[78u].y)) + _1717;
        _1797 = (exp2(_2036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].z)) * _2010.z) / cbSceneParam._m0[78u].z)) + _1718;
        _1799 = _2019 * _1719;
    }
    else
    {
        _1793 = _1716;
        _1795 = _1717;
        _1797 = _1718;
        _1799 = _1719;
    }
    bool _2046;
    vec4 _1809;
    vec4 _1832;
    float _1834;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    bool _1852;
    for (;;)
    {
        _1809 = cbMatDynParam._m0[0u];
        float _1811 = roundEven(_1809.y);
        bool _1812 = _1811 == 3.0;
        float _1814 = log2(_1799);
        float _1821 = exp2(_1814 * cbSceneParam._m0[78u].x) * _1688;
        float _1822 = exp2(_1814 * cbSceneParam._m0[78u].y) * _1689;
        float _1823 = exp2(_1814 * cbSceneParam._m0[78u].z) * _1690;
        float _1830 = _706 + (-0.5);
        _1832 = cbMtdParam._m0[1u];
        _1834 = _1832.y * _1830;
        float _1837 = (_1811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1838 = _1837 * (_1812 ? _1821 : (_1821 + (cbSceneParam._m0[72u].w * _1793)));
        _1839 = _1837 * (_1812 ? _1822 : (_1822 + (cbSceneParam._m0[72u].w * _1795)));
        _1840 = _1837 * (_1812 ? _1823 : (_1823 + (cbSceneParam._m0[72u].w * _1797)));
        _1841 = _1830 * 0.999000012874603271484375;
        _1852 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1852)
        {
            if ((cbInstanceData._m0[_1409 + 7u].x + _1841) < 0.5)
            {
                _2046 = true;
                break;
            }
        }
        uint _1965 = _1669 + uint(_1809.w);
        if ((cbInstanceData._m0[_1965].w < 1.0) && ((cbInstanceData._m0[_1965].w + _1841) < 0.5))
        {
            _2046 = true;
            break;
        }
        if ((_1834 + 1.0) < _1832.x)
        {
            _2046 = true;
            break;
        }
        _2046 = false;
        break;
    }
    float _2204;
    if (_2046)
    {
        discard_state = true;
        _2204 = 0.0;
    }
    else
    {
        _2204 = cbInstanceData._m0[_1691].w;
    }
    SV_Target.x = _1838;
    SV_Target.y = _1839;
    SV_Target.z = _1840;
    SV_Target.w = _2204;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1691].w;
    discard_exit();
}


