#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _883;
uint _2317;
uint _2318;
uint _2319;
uint _2532;
uint _2533;
uint _2534;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _564 = _350 * cbMtdParam._m0[21u].x;
    float _565 = _351 * cbMtdParam._m0[20u].w;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _371 ? (cbMtdParam._m0[17u].z / _349) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _591 = ((_583 * _349) + _587) / _587;
    float _596 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _598 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _615 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_380 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_383 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _627;
    if (_566)
    {
        _627 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _627 = frontier_phi_35_34_ladder;
    }
    float _633;
    if (_573)
    {
        _633 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _633 = frontier_phi_39_38_ladder;
    }
    float _635 = isnan(_633) ? _627 : (isnan(_627) ? _633 : min(_627, _633));
    float _636 = isnan(_581) ? _635 : (isnan(_635) ? _581 : min(_635, _581));
    float _643 = ((_636 * _349) + _587) / _587;
    vec4 _663 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_380 + (_636 * _564)) / _643) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_383 + (_636 * _565)) / _643) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _665 = _663.x;
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _695 = _265 * _694;
    float _696 = _266 * _694;
    float _697 = _267 * _694;
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _713 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_703 * cbSceneParam._m0[86u].x, _704 * cbSceneParam._m0[86u].y));
    float _716 = _713.x * TEXCOORD.z;
    float _717 = (-0.0) - _695;
    float _718 = (-0.0) - _696;
    float _719 = (-0.0) - _697;
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = (cbModelParam._m0[37u].x * ((((fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _807 = (cbModelParam._m0[37u].y * ((((fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _808 = (((((fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_805, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        _882 = _845 * (_811.z + (-0.5));
        _884 = _845 * (_811.y + (-0.5));
        _885 = _845 * (_811.x + (-0.5));
        _886 = _855 * (_818.z + (-0.5));
        _887 = _855 * (_818.y + (-0.5));
        _888 = _855 * (_818.x + (-0.5));
        _889 = _865 * (_825.z + (-0.5));
        _890 = _865 * (_825.y + (-0.5));
        _891 = _865 * (_825.x + (-0.5));
        _892 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        _893 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        _894 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
    }
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _948 = (cbModelParam._m0[38u].x * ((((fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _949 = (cbModelParam._m0[38u].y * ((((fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _950 = (((((fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        _1022 = _985 * (_952.z + (-0.5));
        _1023 = _985 * (_952.y + (-0.5));
        _1024 = _985 * (_952.x + (-0.5));
        _1025 = _995 * (_959.z + (-0.5));
        _1026 = _995 * (_959.y + (-0.5));
        _1027 = _995 * (_959.x + (-0.5));
        _1028 = _1005 * (_966.z + (-0.5));
        _1029 = _1005 * (_966.y + (-0.5));
        _1030 = _1005 * (_966.x + (-0.5));
        _1031 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        _1032 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        _1033 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    }
    else
    {
        _1022 = _883;
        _1023 = _883;
        _1024 = _883;
        _1025 = _883;
        _1026 = _883;
        _1027 = _883;
        _1028 = _883;
        _1029 = _883;
        _1030 = _883;
        _1031 = _883;
        _1032 = _883;
        _1033 = _883;
    }
    float _1048 = _695 * (-0.5);
    float _1049 = _696 * (-0.5);
    float _1050 = _697 * (-0.5);
    float _1051 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_1024, _1027, _1030, _1033));
    float _1054 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_1023, _1026, _1029, _1032));
    float _1057 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_1022, _1025, _1028, _1031));
    float _1092;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1064 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_882, _886, _889, _892));
        float _1068 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_884, _887, _890, _893));
        float _1072 = dot(vec4(_1048, _1049, _1050, 1.0), vec4(_885, _888, _891, _894));
        float _1079 = dot(vec4(cbModelParam._m0[39u]), vec4(_1048, _1049, _1050, 1.0));
        _1092 = dot(vec3(isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)), isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)), isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1079) ? 0.0 : (isnan(0.0) ? _1079 : max(0.0, _1079))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1092 = 1.0;
    }
    float _1103;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1094 = dot(vec4(cbModelParam._m0[40u]), vec4(_1048, _1049, _1050, 1.0));
        _1103 = dot(vec3(isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)), isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)), isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1094) ? 0.0 : (isnan(0.0) ? _1094 : max(0.0, _1094))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1103 = 1.0;
    }
    float _1107 = (_1103 * cbModelParam._m0[1u].x) + (_1092 * (1.0 - cbModelParam._m0[1u].x));
    float _1113 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1194;
    float _1196;
    float _1198;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1161 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1165 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1169 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1172 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1175 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1178 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1204;
        if (_1172 > 0.0)
        {
            _1204 = abs((1.0 - _1161) / _1172);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1172 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1161 + 1.0) / _1172);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1204 = frontier_phi_54_52_ladder;
        }
        float _1392;
        if (_1175 > 0.0)
        {
            _1392 = abs((1.0 - _1165) / _1175);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1175 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1165 + 1.0) / _1175);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1392 = frontier_phi_63_59_ladder;
        }
        float _1747;
        if (_1178 > 0.0)
        {
            _1747 = abs((1.0 - _1169) / _1178);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1178 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1169 + 1.0) / _1178);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _1747 = frontier_phi_75_70_ladder;
        }
        float _1749 = isnan(_1392) ? _1204 : (isnan(_1204) ? _1392 : min(_1204, _1392));
        float _1750 = isnan(_1747) ? _1749 : (isnan(_1749) ? _1747 : min(_1749, _1747));
        float _1754 = (_1750 * _1172) + _1161;
        float _1755 = (_1750 * _1175) + _1165;
        float _1756 = (_1750 * _1178) + _1169;
        float _1757 = _1750 * 9.9999997473787516355514526367188e-05;
        float _1759 = (-1.0) - _1757;
        float _1761 = _1757 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_1756 > _1761) || ((_1756 < _1759) || ((_1755 > _1761) || ((_1755 < _1759) || ((_1754 < _1759) || (_1754 > _1761))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1989 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1756, cbModelParam._m0[9u].z, fma(_1755, cbModelParam._m0[9u].y, _1754 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1756, cbModelParam._m0[10u].z, fma(_1755, cbModelParam._m0[10u].y, _1754 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1756, cbModelParam._m0[11u].z, fma(_1755, cbModelParam._m0[11u].y, _1754 * cbModelParam._m0[11u].x))), _1113);
            frontier_phi_53_75_ladder = _1989.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _1989.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _1989.x * cbModelParam._m0[1u].y;
        }
        _1194 = frontier_phi_53_75_ladder_2;
        _1196 = frontier_phi_53_75_ladder_1;
        _1198 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1113);
        _1194 = _1182.x * cbModelParam._m0[1u].y;
        _1196 = _1182.y * cbModelParam._m0[1u].y;
        _1198 = _1182.z * cbModelParam._m0[1u].y;
    }
    float _1201 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1289;
    float _1291;
    float _1293;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1253 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1257 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1261 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1264 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1267 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1270 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1397;
        if (_1264 > 0.0)
        {
            _1397 = abs((1.0 - _1253) / _1264);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1253 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1397 = frontier_phi_65_61_ladder;
        }
        float _1774;
        if (_1267 > 0.0)
        {
            _1774 = abs((1.0 - _1257) / _1267);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1257 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1774 = frontier_phi_77_72_ladder;
        }
        float _2105;
        if (_1270 > 0.0)
        {
            _2105 = abs((1.0 - _1261) / _1270);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1261 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2105 = frontier_phi_89_84_ladder;
        }
        float _2107 = isnan(_1774) ? _1397 : (isnan(_1397) ? _1774 : min(_1397, _1774));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1264) + _1253;
        float _2113 = (_2108 * _1267) + _1257;
        float _2114 = (_2108 * _1270) + _1261;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2115;
        float _2118 = _2115 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2114 > _2118) || ((_2114 < _2116) || ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 < _2116) || (_2112 > _2118))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2114, cbModelParam._m0[17u].z, fma(_2113, cbModelParam._m0[17u].y, _2112 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2114, cbModelParam._m0[18u].z, fma(_2113, cbModelParam._m0[18u].y, _2112 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2114, cbModelParam._m0[19u].z, fma(_2113, cbModelParam._m0[19u].y, _2112 * cbModelParam._m0[19u].x))), _1201);
            frontier_phi_62_89_ladder = _2220.x * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2220.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2220.z * cbModelParam._m0[1u].z;
        }
        _1289 = frontier_phi_62_89_ladder;
        _1291 = frontier_phi_62_89_ladder_1;
        _1293 = frontier_phi_62_89_ladder_2;
    }
    else
    {
        vec4 _1273 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1201);
        _1289 = _1273.x * cbModelParam._m0[1u].z;
        _1291 = _1273.y * cbModelParam._m0[1u].z;
        _1293 = _1273.z * cbModelParam._m0[1u].z;
    }
    float _1305 = _716 * 0.01200000010430812835693359375;
    float _1307 = _1305 * ((cbModelParam._m0[1u].w * (_1289 - _1194)) + _1194);
    float _1308 = _1305 * ((cbModelParam._m0[1u].w * (_1291 - _1196)) + _1196);
    float _1309 = _1305 * ((cbModelParam._m0[1u].w * (_1293 - _1198)) + _1198);
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, _1307 * cbSceneParam._m0[91u].x));
    float _1371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1375 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1379 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1383 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1384 = _1371 / _1383;
    float _1385 = _1375 / _1383;
    float _1386 = _1379 / _1383;
    float _1534;
    float _1535;
    float _1536;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1413 = ((uint(_1386 > cbSceneParam._m0[59u].y) + uint(_1386 > cbSceneParam._m0[59u].x)) + uint(_1386 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1414 = _1413 + 43u;
        uint _1422 = _1413 + 44u;
        uint _1430 = _1413 + 45u;
        uint _1438 = _1413 + 46u;
        float _1449 = fma(_1383, cbSceneParam._m0[_1414].w, fma(_1379, cbSceneParam._m0[_1414].z, fma(_1375, cbSceneParam._m0[_1414].y, _1371 * cbSceneParam._m0[_1414].x)));
        float _1453 = fma(_1383, cbSceneParam._m0[_1422].w, fma(_1379, cbSceneParam._m0[_1422].z, fma(_1375, cbSceneParam._m0[_1422].y, _1371 * cbSceneParam._m0[_1422].x)));
        float _1461 = fma(_1383, cbSceneParam._m0[_1438].w, fma(_1379, cbSceneParam._m0[_1438].z, fma(_1375, cbSceneParam._m0[_1438].y, _1371 * cbSceneParam._m0[_1438].x)));
        float _1466 = cbSceneParam._m0[33u].z * _1461;
        float _1468 = cbSceneParam._m0[33u].w * _1461;
        float _1471 = fma(_1383, cbSceneParam._m0[_1430].w, fma(_1379, cbSceneParam._m0[_1430].z, fma(_1375, cbSceneParam._m0[_1430].y, _1371 * cbSceneParam._m0[_1430].x))) / _1461;
        float _1519 = (cbSceneParam._m0[33u].x - sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386))) * cbSceneParam._m0[33u].y;
        float _2966 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1527 = (isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1466 + _1449) / _1461, (_1468 + _1453) / _1461), _1471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1468 + _1449) / _1461, (_1453 - _1466) / _1461), _1471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1449 - _1466) / _1461, (_1453 - _1468) / _1461), _1471), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1449 - _1468) / _1461, (_1466 + _1453) / _1461), _1471), 0.0)).x), vec4(0.25)));
        _1534 = 1.0 - (_1527 * cbSceneParam._m0[34u].x);
        _1535 = 1.0 - (_1527 * cbSceneParam._m0[34u].y);
        _1536 = 1.0 - (_1527 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1534 = 1.0;
        _1535 = 1.0;
        _1536 = 1.0;
    }
    float _1600;
    float _1602;
    float _1604;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1588 = fma(_1383, cbSceneParam._m0[63u].w, fma(_1379, cbSceneParam._m0[63u].z, fma(_1375, cbSceneParam._m0[63u].y, _1371 * cbSceneParam._m0[63u].x)));
        float _1589 = fma(_1383, cbSceneParam._m0[60u].w, fma(_1379, cbSceneParam._m0[60u].z, fma(_1375, cbSceneParam._m0[60u].y, _1371 * cbSceneParam._m0[60u].x))) / _1588;
        float _1590 = fma(_1383, cbSceneParam._m0[61u].w, fma(_1379, cbSceneParam._m0[61u].z, fma(_1375, cbSceneParam._m0[61u].y, _1371 * cbSceneParam._m0[61u].x))) / _1588;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1589 >= cbSceneParam._m0[64u].x) && (_1590 >= cbSceneParam._m0[64u].y)) && (_1589 <= cbSceneParam._m0[64u].z)) && (_1590 <= cbSceneParam._m0[64u].w))
        {
            float _1787 = fma(_1383, cbSceneParam._m0[62u].w, fma(_1379, cbSceneParam._m0[62u].z, fma(_1375, cbSceneParam._m0[62u].y, _1371 * cbSceneParam._m0[62u].x))) / _1588;
            float _1791 = isnan(cbSceneParam._m0[41u].w) ? _1787 : (isnan(_1787) ? cbSceneParam._m0[41u].w : max(_1787, cbSceneParam._m0[41u].w));
            float _1834 = (cbSceneParam._m0[33u].x - sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386))) * cbSceneParam._m0[33u].y;
            float _2982 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
            float _1841 = (isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1589, cbSceneParam._m0[33u].w + _1590), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1589, _1590 - cbSceneParam._m0[33u].z), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1589 - cbSceneParam._m0[33u].z, _1590 - cbSceneParam._m0[33u].w), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1589 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1590), _1791), 0.0)).x), vec4(0.25)));
            float _1845 = 1.0 - (_1841 * cbSceneParam._m0[34u].x);
            float _1846 = 1.0 - (_1841 * cbSceneParam._m0[34u].y);
            float _1847 = 1.0 - (_1841 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_1847) ? _1536 : (isnan(_1536) ? _1847 : min(_1536, _1847));
            frontier_phi_74_73_ladder_1 = isnan(_1846) ? _1535 : (isnan(_1535) ? _1846 : min(_1535, _1846));
            frontier_phi_74_73_ladder_2 = isnan(_1845) ? _1534 : (isnan(_1534) ? _1845 : min(_1534, _1845));
        }
        else
        {
            frontier_phi_74_73_ladder = _1536;
            frontier_phi_74_73_ladder_1 = _1535;
            frontier_phi_74_73_ladder_2 = _1534;
        }
        _1600 = frontier_phi_74_73_ladder_2;
        _1602 = frontier_phi_74_73_ladder_1;
        _1604 = frontier_phi_74_73_ladder;
    }
    else
    {
        _1600 = _1534;
        _1602 = _1535;
        _1604 = _1536;
    }
    uint _1606 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1611 = floatBitsToUint(cbInstanceData._m0[_1606 + 5u]);
    uint _1613 = _1611.x * 14u;
    uint _1614 = _1613 + 13u;
    float _1619 = _716 + (-1.0);
    float _1622 = (cbLight._m0[_1614].x * _1619) + 1.0;
    float _1623 = (cbLight._m0[_1614].y * _1619) + 1.0;
    uint _1624 = _1613 + 8u;
    float _1635 = cbLight._m0[_1613].x + _695;
    float _1636 = cbLight._m0[_1613].y + _696;
    float _1637 = cbLight._m0[_1613].z + _697;
    float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
    float _1645 = dot(vec3(0.0), vec3(cbLight._m0[_1613].xyz));
    float _3008 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1648 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _1649 = dot(vec3(0.0), vec3(_695, _696, _697));
    float _3019 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    float _1653 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1635 * _1641, _1636 * _1641, _1637 * _1641));
    float _3030 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1664 = (exp2(log2(1.0 - (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1670 = (0.5 / ((_1648 + 9.9999999392252902907785028219223e-09) + _1652)) * _1648;
    float _3041 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1672 = (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0))) * 0.31831014156341552734375;
    float _1674 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1687 = _1613 + 9u;
    uint _1693 = _1613 | 1u;
    float _1699 = cbLight._m0[_1693].x + _695;
    float _1700 = cbLight._m0[_1693].y + _696;
    float _1701 = cbLight._m0[_1693].z + _697;
    float _1705 = inversesqrt(dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701)));
    float _1709 = dot(vec3(0.0), vec3(cbLight._m0[_1693].xyz));
    float _3057 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1712 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
    float _1713 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1699 * _1705, _1700 * _1705, _1701 * _1705));
    float _3068 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1722 = (exp2(log2(1.0 - (isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1726 = (0.5 / ((_1712 + 9.9999999392252902907785028219223e-09) + _1652)) * _1712;
    float _3079 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1728 = (isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * 0.31831014156341552734375;
    float _1729 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    float _1739 = (((_1722 * cbLight._m0[_1687].x) * _1728) * _1729) + ((((cbLight._m0[_1624].x * _1600) * _1664) * _1672) * _1674);
    float _1740 = (((_1722 * cbLight._m0[_1687].y) * _1728) * _1729) + ((((cbLight._m0[_1624].y * _1602) * _1664) * _1672) * _1674);
    float _1741 = (((_1722 * cbLight._m0[_1687].z) * _1728) * _1729) + ((((cbLight._m0[_1624].z * _1604) * _1664) * _1672) * _1674);
    float _1904;
    float _1906;
    float _1908;
    if (_1611.y == 0u)
    {
        uvec4 _1859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1860 = _1859.x;
        uint _1871 = uint((float(_1859.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _1860))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _1860)));
        float _1881 = (log2(_1386 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1882 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        uint _1885 = uint(isnan(14.0) ? _1882 : (isnan(_1882) ? 14.0 : min(_1882, 14.0)));
        uvec4 _1890 = texelFetch(g_lightClusterGridBuffer, int(((_1885 << 2u) + (_1871 << 6u)) >> 2u));
        uint _1891 = _1890.x;
        uint _1892 = _1859.z;
        float _1998;
        float _2000;
        float _2002;
        if (((((1u << ((_1892 >> 4u) & 15u)) + 4294967295u) & _1891) == 0u) || ((_1892 & 240u) == 0u))
        {
            _1998 = 0.0;
            _2000 = 0.0;
            _2002 = 0.0;
        }
        else
        {
            float _1999;
            float _2001;
            float _2003;
            float _2151 = 0.0;
            float _2152 = 0.0;
            float _2153 = 0.0;
            uint _2154 = 0u;
            uint _2163;
            bool _2164;
            for (;;)
            {
                _2163 = texelFetch(g_lightClassification, int((((_1885 << 5u) + (_1871 << 9u)) + (_2154 << 2u)) >> 2u)).x;
                _2164 = _2163 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                if (_2164)
                {
                    frontier_phi_98_pred = _2153;
                    frontier_phi_98_pred_1 = _2152;
                    frontier_phi_98_pred_2 = _2151;
                }
                else
                {
                    float _2287;
                    float _2288;
                    float _2289;
                    uint _2290;
                    _2287 = _2151;
                    _2288 = _2152;
                    _2289 = _2153;
                    _2290 = _2163;
                    float _2225;
                    float _2226;
                    float _2227;
                    for (;;)
                    {
                        uint _2294 = uint(findLSB(_2290)) + (_2154 << 5u);
                        uint _2291 = (_2290 + 4294967295u) & _2290;
                        uint _2296 = _2294 * 48u;
                        vec4 _2310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2296)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2296 + 3u)).x));
                        uint _2327 = (_2294 * 48u) + 8u;
                        vec3 _2338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2327)).x, texelFetch(g_PointLightRenderingBuffer, int(_2327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2327 + 2u)).x));
                        float _2342 = _2310.x - _1384;
                        float _2343 = _2310.y - _1385;
                        float _2344 = _2310.z - _1386;
                        float _2345 = dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344));
                        float _2348 = inversesqrt(_2345);
                        float _2357 = 1.0 - (_2345 * _2310.w);
                        float _3105 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
                        float _2359 = sqrt(_2345) * uintBitsToFloat(uvec4(_2317, _2318, _2319, texelFetch(g_PointLightRenderingBuffer, int(((_2294 * 48u) + 4u) + 3u)).x)).w;
                        float _2362 = 1.39999997615814208984375 / (_2359 + 1.39999997615814208984375);
                        float _2363 = _2362 * _2362;
                        float _2366 = ((1.0 - _2363) * dot(vec3(0.0), vec3(_2348 * _2342, _2348 * _2343, _2348 * _2344))) + _2363;
                        float _2368 = (-0.0) - _1384;
                        float _2369 = (-0.0) - _1385;
                        float _2370 = (-0.0) - _1386;
                        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
                        float _2378 = dot(vec3(0.0), vec3(_2374 * _2368, _2374 * _2369, _2374 * _2370));
                        float _3116 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
                        float _3127 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
                        float _2382 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
                        float _2386 = (0.5 / (((isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) + 9.9999999392252902907785028219223e-09) + _2382)) * _2382;
                        float _3138 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
                        float _2395 = (((isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * 3.1415927410125732421875) / (((_2359 * _2359) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0)));
                        _2225 = (_2395 * _2338.x) + _2287;
                        _2226 = (_2395 * _2338.y) + _2288;
                        _2227 = (_2395 * _2338.z) + _2289;
                        if (_2291 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2287 = _2225;
                            _2288 = _2226;
                            _2289 = _2227;
                            _2290 = _2291;
                        }
                    }
                    frontier_phi_98_pred = _2227;
                    frontier_phi_98_pred_1 = _2226;
                    frontier_phi_98_pred_2 = _2225;
                }
                _2003 = frontier_phi_98_pred;
                _2001 = frontier_phi_98_pred_1;
                _1999 = frontier_phi_98_pred_2;
                uint _2155 = _2154 + 1u;
                if (_2155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2151 = _1999;
                    _2152 = _2001;
                    _2153 = _2003;
                    _2154 = _2155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1998 = _1999;
            _2000 = _2001;
            _2002 = _2003;
        }
        uvec4 _2006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2007 = _2006.z;
        uint _2009 = (_2007 >> 8u) & 15u;
        float _2131;
        float _2133;
        float _2135;
        if (((4294967295u << _2009) & _1891) == 0u)
        {
            _2131 = _1998;
            _2133 = _2000;
            _2135 = _2002;
        }
        else
        {
            float _2147 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            if (_2009 < ((_2007 >> 12u) & 15u))
            {
                float _2132;
                float _2134;
                float _2136;
                float _2273 = _1998;
                float _2274 = _2000;
                float _2275 = _2002;
                uint _2276 = _2009;
                uint _2285;
                bool _2286;
                for (;;)
                {
                    _2285 = texelFetch(g_lightClassification, int((((_1885 << 5u) + (_1871 << 9u)) + (_2276 << 2u)) >> 2u)).x;
                    _2286 = _2285 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    if (_2286)
                    {
                        frontier_phi_104_pred = _2275;
                        frontier_phi_104_pred_1 = _2274;
                        frontier_phi_104_pred_2 = _2273;
                    }
                    else
                    {
                        float _2400;
                        float _2401;
                        float _2402;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2410 = _2273;
                        float _2411 = _2274;
                        float _2412 = _2275;
                        uint _2413 = _2285;
                        uint _2414;
                        uint _2424;
                        vec4 _2439;
                        float _2440;
                        vec3 _2452;
                        vec4 _2467;
                        vec4 _2482;
                        float _2528;
                        bool _2529;
                        for (;;)
                        {
                            _2424 = ((_2276 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2413));
                            _2414 = (_2413 + 4294967295u) & _2413;
                            uint _2426 = _2424 * 40u;
                            _2439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 3u)).x));
                            _2440 = _2439.w;
                            uint _2442 = (_2424 * 40u) + 8u;
                            _2452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 2u)).x));
                            uint _2454 = (_2424 * 40u) + 16u;
                            _2467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 3u)).x));
                            uint _2469 = (_2424 * 40u) + 20u;
                            _2482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 3u)).x));
                            uint _2484 = (_2424 * 40u) + 24u;
                            vec4 _2497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 3u)).x));
                            uint _2503 = (_2424 * 40u) + 28u;
                            vec4 _2516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2503 + 3u)).x));
                            _2528 = fma(_1386, _2516.z, fma(_1385, _2516.y, _2516.x * _1384)) + _2516.w;
                            _2529 = !((fma(_1386, _2497.z, fma(_1385, _2497.y, _2497.x * _1384)) + _2497.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            if (_2529)
                            {
                                float _2563 = _2439.x - _1384;
                                float _2564 = _2439.y - _1385;
                                float _2565 = _2439.z - _1386;
                                float _2566 = dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565));
                                float _2569 = inversesqrt(_2566);
                                float _2576 = 1.0 - (_2566 / (_2440 * _2440));
                                float _3149 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                                float _2578 = sqrt(_2566) * uintBitsToFloat(uvec4(_2532, _2533, _2534, texelFetch(g_SpotLightRenderingBuffer, int(((_2424 * 40u) + 4u) + 3u)).x)).w;
                                float _2580 = 1.39999997615814208984375 / (_2578 + 1.39999997615814208984375);
                                float _2581 = _2580 * _2580;
                                float _2584 = (fma(_1386, _2467.z, fma(_1385, _2467.y, _2467.x * _1384)) + _2467.w) / _2528;
                                float _2585 = (fma(_1386, _2482.z, fma(_1385, _2482.y, _2482.x * _1384)) + _2482.w) / _2528;
                                float _2589 = 1.0 - dot(vec2(_2584, _2585), vec2(_2584, _2585));
                                float _3160 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                                float _2597 = dot(vec3(0.0), vec3((-0.0) - (_1384 * _2147), (-0.0) - (_1385 * _2147), (-0.0) - (_1386 * _2147)));
                                float _3171 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                                float _2605 = ((1.0 - _2581) * dot(vec3(0.0), vec3(_2569 * _2563, _2569 * _2564, _2569 * _2565))) + _2581;
                                float _3182 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                                float _2606 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
                                float _2610 = (0.5 / (((isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) + 9.9999999392252902907785028219223e-09) + _2606)) * _2606;
                                float _3193 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                                float _2617 = ((isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0)))) * (((isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * 3.1415927410125732421875) / (((_2578 * _2578) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _2617 * _2452.z;
                                frontier_phi_110_pred_1 = _2617 * _2452.y;
                                frontier_phi_110_pred_2 = _2617 * _2452.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                            }
                            _2623 = frontier_phi_110_pred;
                            _2622 = frontier_phi_110_pred_1;
                            _2621 = frontier_phi_110_pred_2;
                            _2400 = _2621 + _2410;
                            _2401 = _2622 + _2411;
                            _2402 = _2623 + _2412;
                            if (_2414 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2410 = _2400;
                                _2411 = _2401;
                                _2412 = _2402;
                                _2413 = _2414;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2402;
                        frontier_phi_104_pred_1 = _2401;
                        frontier_phi_104_pred_2 = _2400;
                    }
                    _2136 = frontier_phi_104_pred;
                    _2134 = frontier_phi_104_pred_1;
                    _2132 = frontier_phi_104_pred_2;
                    uint _2277 = _2276 + 1u;
                    if (_2277 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2273 = _2132;
                        _2274 = _2134;
                        _2275 = _2136;
                        _2276 = _2277;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2134;
                frontier_phi_91_92_ladder_1 = _2132;
                frontier_phi_91_92_ladder_2 = _2136;
            }
            else
            {
                frontier_phi_91_92_ladder = _2000;
                frontier_phi_91_92_ladder_1 = _1998;
                frontier_phi_91_92_ladder_2 = _2002;
            }
            _2131 = frontier_phi_91_92_ladder_1;
            _2133 = frontier_phi_91_92_ladder;
            _2135 = frontier_phi_91_92_ladder_2;
        }
        float _2140 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _1904 = ((_2131 * 0.039999999105930328369140625) * _2140) + _1739;
        _1906 = ((_2133 * 0.039999999105930328369140625) * _2140) + _1740;
        _1908 = ((_2135 * 0.039999999105930328369140625) * _2140) + _1741;
    }
    else
    {
        _1904 = _1739;
        _1906 = _1740;
        _1908 = _1741;
    }
    uint _1915 = (_1606 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1930 = (cbInstanceData._m0[_1915].x * ((_665 * ((_615.x * cbMtdParam._m0[14u].x) - _548)) + _548)) + ((_1904 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _1107)) * cbPerFrame._m0[3u].x);
    float _1931 = (cbInstanceData._m0[_1915].y * ((_665 * ((_615.y * cbMtdParam._m0[14u].y) - _549)) + _549)) + ((_1906 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _1107)) * cbPerFrame._m0[3u].x);
    float _1932 = (cbInstanceData._m0[_1915].z * ((_665 * ((_615.z * cbMtdParam._m0[14u].z) - _550)) + _550)) + ((_1908 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _1107)) * cbPerFrame._m0[3u].x);
    uint _1936 = _1606 + 6u;
    float _1944 = _703 / cbSceneParam._m0[86u].x;
    float _1945 = _704 / cbSceneParam._m0[86u].y;
    vec4 _1959 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1944, _1945, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1961 = _1959.x;
    float _1962 = _1959.y;
    float _1963 = _1959.z;
    float _1964 = _1959.w;
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2017 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2018 = _2017 / _690;
        float _2029 = _2018 * _265;
        float _2030 = _266 * _2018;
        float _2031 = (-0.0) - _2030;
        float _2032 = _2018 * _267;
        float _2034 = (cbSceneParam._m0[77u].w * _2031) / _2017;
        float _2035 = _2034 + cbSceneParam._m0[79u].w;
        float _2036 = cbSceneParam._m0[79u].w - _2030;
        float _2042 = sqrt(((_2029 * _2029) + (_2030 * _2030)) + (_2032 * _2032));
        float _2045 = (1.0 - (cbSceneParam._m0[77u].w / _2017)) * _2042;
        float _2050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2235;
        if (abs((_2031 - _2034) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2235 = ((((_2035 > 0.0) ? exp2(_2050 * _2035) : (2.0 - exp2(_2052 * _2035))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2045;
        }
        else
        {
            float _2177 = 1.0 / cbSceneParam._m0[80u].x;
            float _2178 = isnan(_2036) ? _2035 : (isnan(_2035) ? _2036 : max(_2035, _2036));
            float _2179 = isnan(_2036) ? _2035 : (isnan(_2035) ? _2036 : min(_2035, _2036));
            float _2188 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : min(_2178, 0.0));
            float _2189 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : min(_2179, 0.0));
            _2235 = ((abs(_2042 / _2031) * cbSceneParam._m0[80u].y) * ((((_2188 - _2189) * 2.0) - ((exp2(_2050 * (isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0)))) - exp2(_2050 * (isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))))) * _2177)) - ((exp2(_2052 * _2188) - exp2(_2052 * _2189)) * _2177))) + (_2045 * cbSceneParam._m0[80u].z);
        }
        vec4 _2237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1944, _1945, 1.0), 0.0);
        float _2246 = exp2((_2235 * (-1.44269502162933349609375)) * (1.0 - _2237.w));
        float _2247 = log2(_2246);
        float _2263 = log2(_1964);
        _2054 = (exp2(_2263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].x)) * _2237.x) / cbSceneParam._m0[78u].x)) + _1961;
        _2056 = (exp2(_2263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].y)) * _2237.y) / cbSceneParam._m0[78u].y)) + _1962;
        _2058 = (exp2(_2263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2247 * cbSceneParam._m0[78u].z)) * _2237.z) / cbSceneParam._m0[78u].z)) + _1963;
        _2060 = _2246 * _1964;
    }
    else
    {
        _2054 = _1961;
        _2056 = _1962;
        _2058 = _1963;
        _2060 = _1964;
    }
    float _2072 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2073 = _2072 == 3.0;
    float _2075 = log2(_2060);
    float _2082 = exp2(_2075 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)));
    float _2083 = exp2(_2075 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)));
    float _2084 = exp2(_2075 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)));
    float _2093 = (_2072 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2093 * (_2073 ? _2082 : (_2082 + (cbSceneParam._m0[72u].w * _2054)));
    SV_Target.y = _2093 * (_2073 ? _2083 : (_2083 + (cbSceneParam._m0[72u].w * _2056)));
    SV_Target.z = _2093 * (_2073 ? _2084 : (_2084 + (cbSceneParam._m0[72u].w * _2058)));
    SV_Target.w = cbInstanceData._m0[_1936].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1936].w;
}


