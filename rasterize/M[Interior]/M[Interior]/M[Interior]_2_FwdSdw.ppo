#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _755;
uint _2191;
uint _2192;
uint _2193;
uint _2406;
uint _2407;
uint _2408;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _285 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _320 = cbMtdParam._m0[21u].w + _261;
    float _321 = cbMtdParam._m0[22u].x + _262;
    float _322 = cbMtdParam._m0[22u].y + _263;
    float _336 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_320, _321, _322), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_320, _321, _322), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _346 = (_342 * _336) + (((_285.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _347 = (_342 * _337) + (((_285.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _348 = _346 * cbMtdParam._m0[18u].z;
    float _349 = _347 * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    bool _367 = _345 > 0.0;
    float _369 = _367 ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = _350 + (-0.5);
    float _379 = _351 + (-0.5);
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_376 + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_379 + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _436 = _346 * cbMtdParam._m0[20u].z;
    float _437 = _347 * cbMtdParam._m0[20u].y;
    bool _438 = _436 > 0.0;
    float _443;
    if (_438)
    {
        _443 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _443 = frontier_phi_11_10_ladder;
    }
    bool _445 = _437 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _450 = frontier_phi_15_14_ladder;
    }
    float _453 = _367 ? (cbMtdParam._m0[16u].x / _345) : 5000.0;
    float _454 = isnan(_450) ? _443 : (isnan(_443) ? _450 : min(_443, _450));
    float _455 = isnan(_453) ? _454 : (isnan(_454) ? _453 : min(_454, _453));
    float _459 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _463 = ((_455 * _345) + _459) / _459;
    float _468 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _470 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_376 + (_455 * _436)) / _463) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_379 + (_455 * _437)) / _463) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _498;
    if (_438)
    {
        _498 = (1.0 - _350) / _436;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _350) / _436;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _498 = frontier_phi_19_18_ladder;
    }
    float _504;
    if (_445)
    {
        _504 = (1.0 - _351) / _437;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _351) / _437;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _504 = frontier_phi_23_22_ladder;
    }
    float _506 = isnan(_504) ? _498 : (isnan(_498) ? _504 : min(_498, _504));
    float _507 = isnan(_453) ? _506 : (isnan(_506) ? _453 : min(_506, _453));
    float _514 = ((_507 * _345) + _459) / _459;
    vec4 _535 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_376 + (_507 * _436)) / _514) + 0.5) + _468) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_379 + (_507 * _437)) / _514) + 0.5) + _470) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _567 = _261 * _566;
    float _568 = _262 * _566;
    float _569 = _263 * _566;
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _585 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_575 * cbSceneParam._m0[86u].x, _576 * cbSceneParam._m0[86u].y));
    float _588 = _585.x * TEXCOORD.z;
    float _589 = (-0.0) - _567;
    float _590 = (-0.0) - _568;
    float _591 = (-0.0) - _569;
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = (cbModelParam._m0[37u].x * ((((fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _679 = (cbModelParam._m0[37u].y * ((((fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _680 = (((((fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        _754 = _717 * (_683.z + (-0.5));
        _756 = _717 * (_683.y + (-0.5));
        _757 = _717 * (_683.x + (-0.5));
        _758 = _727 * (_690.z + (-0.5));
        _759 = _727 * (_690.y + (-0.5));
        _760 = _727 * (_690.x + (-0.5));
        _761 = _737 * (_697.z + (-0.5));
        _762 = _737 * (_697.y + (-0.5));
        _763 = _737 * (_697.x + (-0.5));
        _764 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        _765 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        _766 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    }
    else
    {
        _754 = _755;
        _756 = _755;
        _757 = _755;
        _758 = _755;
        _759 = _755;
        _760 = _755;
        _761 = _755;
        _762 = _755;
        _763 = _755;
        _764 = _755;
        _765 = _755;
        _766 = _755;
    }
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = (cbModelParam._m0[38u].x * ((((fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _821 = (cbModelParam._m0[38u].y * ((((fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _822 = (((((fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _867 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _877 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _887 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_845.x + (-0.5));
        float _889 = _887 * (_845.y + (-0.5));
        float _890 = _887 * (_845.z + (-0.5));
        _894 = _857 * (_824.z + (-0.5));
        _895 = _857 * (_824.y + (-0.5));
        _896 = _857 * (_824.x + (-0.5));
        _897 = _867 * (_831.z + (-0.5));
        _898 = _867 * (_831.y + (-0.5));
        _899 = _867 * (_831.x + (-0.5));
        _900 = _877 * (_838.z + (-0.5));
        _901 = _877 * (_838.y + (-0.5));
        _902 = _877 * (_838.x + (-0.5));
        _903 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        _904 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        _905 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    }
    else
    {
        _894 = _755;
        _895 = _755;
        _896 = _755;
        _897 = _755;
        _898 = _755;
        _899 = _755;
        _900 = _755;
        _901 = _755;
        _902 = _755;
        _903 = _755;
        _904 = _755;
        _905 = _755;
    }
    float _920 = _567 * (-0.5);
    float _921 = _568 * (-0.5);
    float _922 = _569 * (-0.5);
    float _923 = dot(vec4(_920, _921, _922, 1.0), vec4(_896, _899, _902, _905));
    float _926 = dot(vec4(_920, _921, _922, 1.0), vec4(_895, _898, _901, _904));
    float _929 = dot(vec4(_920, _921, _922, 1.0), vec4(_894, _897, _900, _903));
    float _964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _936 = dot(vec4(_920, _921, _922, 1.0), vec4(_754, _758, _761, _764));
        float _940 = dot(vec4(_920, _921, _922, 1.0), vec4(_756, _759, _762, _765));
        float _944 = dot(vec4(_920, _921, _922, 1.0), vec4(_757, _760, _763, _766));
        float _951 = dot(vec4(cbModelParam._m0[39u]), vec4(_920, _921, _922, 1.0));
        _964 = dot(vec3(isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)), isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)), isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_951) ? 0.0 : (isnan(0.0) ? _951 : max(0.0, _951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _964 = 1.0;
    }
    float _975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _966 = dot(vec4(cbModelParam._m0[40u]), vec4(_920, _921, _922, 1.0));
        _975 = dot(vec3(isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)), isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)), isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_966) ? 0.0 : (isnan(0.0) ? _966 : max(0.0, _966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _975 = 1.0;
    }
    float _979 = (_975 * cbModelParam._m0[1u].x) + (_964 * (1.0 - cbModelParam._m0[1u].x));
    float _985 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1068;
    float _1070;
    float _1072;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1035 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1039 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1043 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1046 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1049 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1052 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1078;
        if (_1046 > 0.0)
        {
            _1078 = abs((1.0 - _1035) / _1046);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1046 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1035 + 1.0) / _1046);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1078 = frontier_phi_38_36_ladder;
        }
        float _1266;
        if (_1049 > 0.0)
        {
            _1266 = abs((1.0 - _1039) / _1049);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1049 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1039 + 1.0) / _1049);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1266 = frontier_phi_47_43_ladder;
        }
        float _1621;
        if (_1052 > 0.0)
        {
            _1621 = abs((1.0 - _1043) / _1052);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1052 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1043 + 1.0) / _1052);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _1621 = frontier_phi_59_54_ladder;
        }
        float _1623 = isnan(_1266) ? _1078 : (isnan(_1078) ? _1266 : min(_1078, _1266));
        float _1624 = isnan(_1621) ? _1623 : (isnan(_1623) ? _1621 : min(_1623, _1621));
        float _1628 = (_1624 * _1046) + _1035;
        float _1629 = (_1624 * _1049) + _1039;
        float _1630 = (_1624 * _1052) + _1043;
        float _1631 = _1624 * 9.9999997473787516355514526367188e-05;
        float _1633 = (-1.0) - _1631;
        float _1635 = _1631 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_1630 > _1635) || ((_1630 < _1633) || ((_1629 > _1635) || ((_1629 < _1633) || ((_1628 < _1633) || (_1628 > _1635))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1630, cbModelParam._m0[9u].z, fma(_1629, cbModelParam._m0[9u].y, _1628 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1630, cbModelParam._m0[10u].z, fma(_1629, cbModelParam._m0[10u].y, _1628 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1630, cbModelParam._m0[11u].z, fma(_1629, cbModelParam._m0[11u].y, _1628 * cbModelParam._m0[11u].x))), _985);
            frontier_phi_37_59_ladder = _1863.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _1863.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _1863.x * cbModelParam._m0[1u].y;
        }
        _1068 = frontier_phi_37_59_ladder_2;
        _1070 = frontier_phi_37_59_ladder_1;
        _1072 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _985);
        _1068 = _1056.x * cbModelParam._m0[1u].y;
        _1070 = _1056.y * cbModelParam._m0[1u].y;
        _1072 = _1056.z * cbModelParam._m0[1u].y;
    }
    float _1075 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1163;
    float _1165;
    float _1167;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1127 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1131 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1135 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1138 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1141 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1144 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1271;
        if (_1138 > 0.0)
        {
            _1271 = abs((1.0 - _1127) / _1138);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1138 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1127 + 1.0) / _1138);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1271 = frontier_phi_49_45_ladder;
        }
        float _1648;
        if (_1141 > 0.0)
        {
            _1648 = abs((1.0 - _1131) / _1141);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1141 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1131 + 1.0) / _1141);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1648 = frontier_phi_61_56_ladder;
        }
        float _1979;
        if (_1144 > 0.0)
        {
            _1979 = abs((1.0 - _1135) / _1144);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1144 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1135 + 1.0) / _1144);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _1979 = frontier_phi_73_68_ladder;
        }
        float _1981 = isnan(_1648) ? _1271 : (isnan(_1271) ? _1648 : min(_1271, _1648));
        float _1982 = isnan(_1979) ? _1981 : (isnan(_1981) ? _1979 : min(_1981, _1979));
        float _1986 = (_1982 * _1138) + _1127;
        float _1987 = (_1982 * _1141) + _1131;
        float _1988 = (_1982 * _1144) + _1135;
        float _1989 = _1982 * 9.9999997473787516355514526367188e-05;
        float _1990 = (-1.0) - _1989;
        float _1992 = _1989 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_1988 > _1992) || ((_1988 < _1990) || ((_1987 > _1992) || ((_1987 < _1990) || ((_1986 < _1990) || (_1986 > _1992))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1988, cbModelParam._m0[17u].z, fma(_1987, cbModelParam._m0[17u].y, _1986 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1988, cbModelParam._m0[18u].z, fma(_1987, cbModelParam._m0[18u].y, _1986 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1988, cbModelParam._m0[19u].z, fma(_1987, cbModelParam._m0[19u].y, _1986 * cbModelParam._m0[19u].x))), _1075);
            frontier_phi_46_73_ladder = _2094.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2094.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2094.x * cbModelParam._m0[1u].z;
        }
        _1163 = frontier_phi_46_73_ladder_2;
        _1165 = frontier_phi_46_73_ladder_1;
        _1167 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1075);
        _1163 = _1147.x * cbModelParam._m0[1u].z;
        _1165 = _1147.y * cbModelParam._m0[1u].z;
        _1167 = _1147.z * cbModelParam._m0[1u].z;
    }
    float _1179 = _588 * 0.01200000010430812835693359375;
    float _1181 = _1179 * ((cbModelParam._m0[1u].w * (_1163 - _1068)) + _1068);
    float _1182 = _1179 * ((cbModelParam._m0[1u].w * (_1165 - _1070)) + _1070);
    float _1183 = _1179 * ((cbModelParam._m0[1u].w * (_1167 - _1072)) + _1072);
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, _1181 * cbSceneParam._m0[91u].x));
    float _1245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1249 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1258 = _1245 / _1257;
    float _1259 = _1249 / _1257;
    float _1260 = _1253 / _1257;
    float _1408;
    float _1409;
    float _1410;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1287 = ((uint(_1260 > cbSceneParam._m0[59u].y) + uint(_1260 > cbSceneParam._m0[59u].x)) + uint(_1260 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1288 = _1287 + 43u;
        uint _1296 = _1287 + 44u;
        uint _1304 = _1287 + 45u;
        uint _1312 = _1287 + 46u;
        float _1323 = fma(_1257, cbSceneParam._m0[_1288].w, fma(_1253, cbSceneParam._m0[_1288].z, fma(_1249, cbSceneParam._m0[_1288].y, _1245 * cbSceneParam._m0[_1288].x)));
        float _1327 = fma(_1257, cbSceneParam._m0[_1296].w, fma(_1253, cbSceneParam._m0[_1296].z, fma(_1249, cbSceneParam._m0[_1296].y, _1245 * cbSceneParam._m0[_1296].x)));
        float _1335 = fma(_1257, cbSceneParam._m0[_1312].w, fma(_1253, cbSceneParam._m0[_1312].z, fma(_1249, cbSceneParam._m0[_1312].y, _1245 * cbSceneParam._m0[_1312].x)));
        float _1340 = cbSceneParam._m0[33u].z * _1335;
        float _1342 = cbSceneParam._m0[33u].w * _1335;
        float _1345 = fma(_1257, cbSceneParam._m0[_1304].w, fma(_1253, cbSceneParam._m0[_1304].z, fma(_1249, cbSceneParam._m0[_1304].y, _1245 * cbSceneParam._m0[_1304].x))) / _1335;
        float _1393 = (cbSceneParam._m0[33u].x - sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260))) * cbSceneParam._m0[33u].y;
        float _2796 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1401 = (isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1340 + _1323) / _1335, (_1342 + _1327) / _1335), _1345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1342 + _1323) / _1335, (_1327 - _1340) / _1335), _1345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1323 - _1340) / _1335, (_1327 - _1342) / _1335), _1345), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1323 - _1342) / _1335, (_1340 + _1327) / _1335), _1345), 0.0)).x), vec4(0.25)));
        _1408 = 1.0 - (_1401 * cbSceneParam._m0[34u].x);
        _1409 = 1.0 - (_1401 * cbSceneParam._m0[34u].y);
        _1410 = 1.0 - (_1401 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1408 = 1.0;
        _1409 = 1.0;
        _1410 = 1.0;
    }
    float _1474;
    float _1476;
    float _1478;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1462 = fma(_1257, cbSceneParam._m0[63u].w, fma(_1253, cbSceneParam._m0[63u].z, fma(_1249, cbSceneParam._m0[63u].y, _1245 * cbSceneParam._m0[63u].x)));
        float _1463 = fma(_1257, cbSceneParam._m0[60u].w, fma(_1253, cbSceneParam._m0[60u].z, fma(_1249, cbSceneParam._m0[60u].y, _1245 * cbSceneParam._m0[60u].x))) / _1462;
        float _1464 = fma(_1257, cbSceneParam._m0[61u].w, fma(_1253, cbSceneParam._m0[61u].z, fma(_1249, cbSceneParam._m0[61u].y, _1245 * cbSceneParam._m0[61u].x))) / _1462;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1463 >= cbSceneParam._m0[64u].x) && (_1464 >= cbSceneParam._m0[64u].y)) && (_1463 <= cbSceneParam._m0[64u].z)) && (_1464 <= cbSceneParam._m0[64u].w))
        {
            float _1661 = fma(_1257, cbSceneParam._m0[62u].w, fma(_1253, cbSceneParam._m0[62u].z, fma(_1249, cbSceneParam._m0[62u].y, _1245 * cbSceneParam._m0[62u].x))) / _1462;
            float _1665 = isnan(cbSceneParam._m0[41u].w) ? _1661 : (isnan(_1661) ? cbSceneParam._m0[41u].w : max(_1661, cbSceneParam._m0[41u].w));
            float _1708 = (cbSceneParam._m0[33u].x - sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260))) * cbSceneParam._m0[33u].y;
            float _2812 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
            float _1715 = (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1463, cbSceneParam._m0[33u].w + _1464), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1463, _1464 - cbSceneParam._m0[33u].z), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1463 - cbSceneParam._m0[33u].z, _1464 - cbSceneParam._m0[33u].w), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1463 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1464), _1665), 0.0)).x), vec4(0.25)));
            float _1719 = 1.0 - (_1715 * cbSceneParam._m0[34u].x);
            float _1720 = 1.0 - (_1715 * cbSceneParam._m0[34u].y);
            float _1721 = 1.0 - (_1715 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_1719) ? _1408 : (isnan(_1408) ? _1719 : min(_1408, _1719));
            frontier_phi_58_57_ladder_1 = isnan(_1720) ? _1409 : (isnan(_1409) ? _1720 : min(_1409, _1720));
            frontier_phi_58_57_ladder_2 = isnan(_1721) ? _1410 : (isnan(_1410) ? _1721 : min(_1410, _1721));
        }
        else
        {
            frontier_phi_58_57_ladder = _1408;
            frontier_phi_58_57_ladder_1 = _1409;
            frontier_phi_58_57_ladder_2 = _1410;
        }
        _1474 = frontier_phi_58_57_ladder;
        _1476 = frontier_phi_58_57_ladder_1;
        _1478 = frontier_phi_58_57_ladder_2;
    }
    else
    {
        _1474 = _1408;
        _1476 = _1409;
        _1478 = _1410;
    }
    uint _1480 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1485 = floatBitsToUint(cbInstanceData._m0[_1480 + 5u]);
    uint _1487 = _1485.x * 14u;
    uint _1488 = _1487 + 13u;
    float _1493 = _588 + (-1.0);
    float _1496 = (cbLight._m0[_1488].x * _1493) + 1.0;
    float _1497 = (cbLight._m0[_1488].y * _1493) + 1.0;
    uint _1498 = _1487 + 8u;
    float _1509 = cbLight._m0[_1487].x + _567;
    float _1510 = cbLight._m0[_1487].y + _568;
    float _1511 = cbLight._m0[_1487].z + _569;
    float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
    float _1519 = dot(vec3(0.0), vec3(cbLight._m0[_1487].xyz));
    float _2838 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _1522 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
    float _1523 = dot(vec3(0.0), vec3(_567, _568, _569));
    float _2849 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1526 = isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0));
    float _1527 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_1509 * _1515, _1510 * _1515, _1511 * _1515));
    float _2860 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1538 = (exp2(log2(1.0 - (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1544 = (0.5 / ((_1522 + 9.9999999392252902907785028219223e-09) + _1526)) * _1522;
    float _2871 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1546 = (isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0))) * 0.31831014156341552734375;
    float _1548 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
    uint _1561 = _1487 + 9u;
    uint _1567 = _1487 | 1u;
    float _1573 = cbLight._m0[_1567].x + _567;
    float _1574 = cbLight._m0[_1567].y + _568;
    float _1575 = cbLight._m0[_1567].z + _569;
    float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
    float _1583 = dot(vec3(0.0), vec3(cbLight._m0[_1567].xyz));
    float _2887 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1586 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    float _1587 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1573 * _1579, _1574 * _1579, _1575 * _1579));
    float _2898 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1596 = (exp2(log2(1.0 - (isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1600 = (0.5 / ((_1586 + 9.9999999392252902907785028219223e-09) + _1526)) * _1586;
    float _2909 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1602 = (isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0))) * 0.31831014156341552734375;
    float _1603 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
    float _1613 = (((_1596 * cbLight._m0[_1561].x) * _1602) * _1603) + ((((cbLight._m0[_1498].x * _1474) * _1538) * _1546) * _1548);
    float _1614 = (((_1596 * cbLight._m0[_1561].y) * _1602) * _1603) + ((((cbLight._m0[_1498].y * _1476) * _1538) * _1546) * _1548);
    float _1615 = (((_1596 * cbLight._m0[_1561].z) * _1602) * _1603) + ((((cbLight._m0[_1498].z * _1478) * _1538) * _1546) * _1548);
    float _1778;
    float _1780;
    float _1782;
    if (_1485.y == 0u)
    {
        uvec4 _1733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1734 = _1733.x;
        uint _1745 = uint((float(_1733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _1734))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _1734)));
        float _1755 = (log2(_1260 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1756 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        uint _1759 = uint(isnan(14.0) ? _1756 : (isnan(_1756) ? 14.0 : min(_1756, 14.0)));
        uvec4 _1764 = texelFetch(g_lightClusterGridBuffer, int(((_1759 << 2u) + (_1745 << 6u)) >> 2u));
        uint _1765 = _1764.x;
        uint _1766 = _1733.z;
        float _1872;
        float _1874;
        float _1876;
        if (((((1u << ((_1766 >> 4u) & 15u)) + 4294967295u) & _1765) == 0u) || ((_1766 & 240u) == 0u))
        {
            _1872 = 0.0;
            _1874 = 0.0;
            _1876 = 0.0;
        }
        else
        {
            float _1873;
            float _1875;
            float _1877;
            float _2025 = 0.0;
            float _2026 = 0.0;
            float _2027 = 0.0;
            uint _2028 = 0u;
            uint _2037;
            bool _2038;
            for (;;)
            {
                _2037 = texelFetch(g_lightClassification, int((((_1759 << 5u) + (_1745 << 9u)) + (_2028 << 2u)) >> 2u)).x;
                _2038 = _2037 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                if (_2038)
                {
                    frontier_phi_82_pred = _2027;
                    frontier_phi_82_pred_1 = _2026;
                    frontier_phi_82_pred_2 = _2025;
                }
                else
                {
                    float _2161;
                    float _2162;
                    float _2163;
                    uint _2164;
                    _2161 = _2025;
                    _2162 = _2026;
                    _2163 = _2027;
                    _2164 = _2037;
                    float _2099;
                    float _2100;
                    float _2101;
                    for (;;)
                    {
                        uint _2168 = uint(findLSB(_2164)) + (_2028 << 5u);
                        uint _2165 = (_2164 + 4294967295u) & _2164;
                        uint _2170 = _2168 * 48u;
                        vec4 _2184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2170)).x, texelFetch(g_PointLightRenderingBuffer, int(_2170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2170 + 3u)).x));
                        uint _2201 = (_2168 * 48u) + 8u;
                        vec3 _2212 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2201)).x, texelFetch(g_PointLightRenderingBuffer, int(_2201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2201 + 2u)).x));
                        float _2216 = _2184.x - _1258;
                        float _2217 = _2184.y - _1259;
                        float _2218 = _2184.z - _1260;
                        float _2219 = dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218));
                        float _2222 = inversesqrt(_2219);
                        float _2231 = 1.0 - (_2219 * _2184.w);
                        float _2935 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
                        float _2233 = sqrt(_2219) * uintBitsToFloat(uvec4(_2191, _2192, _2193, texelFetch(g_PointLightRenderingBuffer, int(((_2168 * 48u) + 4u) + 3u)).x)).w;
                        float _2236 = 1.39999997615814208984375 / (_2233 + 1.39999997615814208984375);
                        float _2237 = _2236 * _2236;
                        float _2240 = ((1.0 - _2237) * dot(vec3(0.0), vec3(_2222 * _2216, _2222 * _2217, _2222 * _2218))) + _2237;
                        float _2242 = (-0.0) - _1258;
                        float _2243 = (-0.0) - _1259;
                        float _2244 = (-0.0) - _1260;
                        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
                        float _2252 = dot(vec3(0.0), vec3(_2248 * _2242, _2248 * _2243, _2248 * _2244));
                        float _2946 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
                        float _2957 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
                        float _2256 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
                        float _2260 = (0.5 / (((isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) + 9.9999999392252902907785028219223e-09) + _2256)) * _2256;
                        float _2968 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
                        float _2269 = (((isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0))) * 3.1415927410125732421875) / (((_2233 * _2233) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)));
                        _2099 = (_2269 * _2212.x) + _2161;
                        _2100 = (_2269 * _2212.y) + _2162;
                        _2101 = (_2269 * _2212.z) + _2163;
                        if (_2165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2161 = _2099;
                            _2162 = _2100;
                            _2163 = _2101;
                            _2164 = _2165;
                        }
                    }
                    frontier_phi_82_pred = _2101;
                    frontier_phi_82_pred_1 = _2100;
                    frontier_phi_82_pred_2 = _2099;
                }
                _1877 = frontier_phi_82_pred;
                _1875 = frontier_phi_82_pred_1;
                _1873 = frontier_phi_82_pred_2;
                uint _2029 = _2028 + 1u;
                if (_2029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2025 = _1873;
                    _2026 = _1875;
                    _2027 = _1877;
                    _2028 = _2029;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1872 = _1873;
            _1874 = _1875;
            _1876 = _1877;
        }
        uvec4 _1880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1881 = _1880.z;
        uint _1883 = (_1881 >> 8u) & 15u;
        float _2005;
        float _2007;
        float _2009;
        if (((4294967295u << _1883) & _1765) == 0u)
        {
            _2005 = _1872;
            _2007 = _1874;
            _2009 = _1876;
        }
        else
        {
            float _2021 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            if (_1883 < ((_1881 >> 12u) & 15u))
            {
                float _2006;
                float _2008;
                float _2010;
                float _2147 = _1872;
                float _2148 = _1874;
                float _2149 = _1876;
                uint _2150 = _1883;
                uint _2159;
                bool _2160;
                for (;;)
                {
                    _2159 = texelFetch(g_lightClassification, int((((_1759 << 5u) + (_1745 << 9u)) + (_2150 << 2u)) >> 2u)).x;
                    _2160 = _2159 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    if (_2160)
                    {
                        frontier_phi_88_pred = _2149;
                        frontier_phi_88_pred_1 = _2148;
                        frontier_phi_88_pred_2 = _2147;
                    }
                    else
                    {
                        float _2274;
                        float _2275;
                        float _2276;
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2284 = _2147;
                        float _2285 = _2148;
                        float _2286 = _2149;
                        uint _2287 = _2159;
                        uint _2288;
                        uint _2298;
                        vec4 _2313;
                        float _2314;
                        vec3 _2326;
                        vec4 _2341;
                        vec4 _2356;
                        float _2402;
                        bool _2403;
                        for (;;)
                        {
                            _2298 = ((_2150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2287));
                            _2288 = (_2287 + 4294967295u) & _2287;
                            uint _2300 = _2298 * 40u;
                            _2313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2300 + 3u)).x));
                            _2314 = _2313.w;
                            uint _2316 = (_2298 * 40u) + 8u;
                            _2326 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2316 + 2u)).x));
                            uint _2328 = (_2298 * 40u) + 16u;
                            _2341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2328 + 3u)).x));
                            uint _2343 = (_2298 * 40u) + 20u;
                            _2356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 3u)).x));
                            uint _2358 = (_2298 * 40u) + 24u;
                            vec4 _2371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2358 + 3u)).x));
                            uint _2377 = (_2298 * 40u) + 28u;
                            vec4 _2390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 3u)).x));
                            _2402 = fma(_1260, _2390.z, fma(_1259, _2390.y, _2390.x * _1258)) + _2390.w;
                            _2403 = !((fma(_1260, _2371.z, fma(_1259, _2371.y, _2371.x * _1258)) + _2371.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            if (_2403)
                            {
                                float _2437 = _2313.x - _1258;
                                float _2438 = _2313.y - _1259;
                                float _2439 = _2313.z - _1260;
                                float _2440 = dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439));
                                float _2443 = inversesqrt(_2440);
                                float _2450 = 1.0 - (_2440 / (_2314 * _2314));
                                float _2979 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
                                float _2452 = sqrt(_2440) * uintBitsToFloat(uvec4(_2406, _2407, _2408, texelFetch(g_SpotLightRenderingBuffer, int(((_2298 * 40u) + 4u) + 3u)).x)).w;
                                float _2454 = 1.39999997615814208984375 / (_2452 + 1.39999997615814208984375);
                                float _2455 = _2454 * _2454;
                                float _2458 = (fma(_1260, _2341.z, fma(_1259, _2341.y, _2341.x * _1258)) + _2341.w) / _2402;
                                float _2459 = (fma(_1260, _2356.z, fma(_1259, _2356.y, _2356.x * _1258)) + _2356.w) / _2402;
                                float _2463 = 1.0 - dot(vec2(_2458, _2459), vec2(_2458, _2459));
                                float _2990 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
                                float _2471 = dot(vec3(0.0), vec3((-0.0) - (_1258 * _2021), (-0.0) - (_1259 * _2021), (-0.0) - (_1260 * _2021)));
                                float _3001 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                                float _2479 = ((1.0 - _2455) * dot(vec3(0.0), vec3(_2443 * _2437, _2443 * _2438, _2443 * _2439))) + _2455;
                                float _3012 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                                float _2480 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
                                float _2484 = (0.5 / (((isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0))) + 9.9999999392252902907785028219223e-09) + _2480)) * _2480;
                                float _3023 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                                float _2491 = ((isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0))) * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * (((isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * 3.1415927410125732421875) / (((_2452 * _2452) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _2491 * _2326.x;
                                frontier_phi_94_pred_1 = _2491 * _2326.z;
                                frontier_phi_94_pred_2 = _2491 * _2326.y;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                            }
                            _2495 = frontier_phi_94_pred;
                            _2497 = frontier_phi_94_pred_1;
                            _2496 = frontier_phi_94_pred_2;
                            _2274 = _2495 + _2284;
                            _2275 = _2496 + _2285;
                            _2276 = _2497 + _2286;
                            if (_2288 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2284 = _2274;
                                _2285 = _2275;
                                _2286 = _2276;
                                _2287 = _2288;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2276;
                        frontier_phi_88_pred_1 = _2275;
                        frontier_phi_88_pred_2 = _2274;
                    }
                    _2010 = frontier_phi_88_pred;
                    _2008 = frontier_phi_88_pred_1;
                    _2006 = frontier_phi_88_pred_2;
                    uint _2151 = _2150 + 1u;
                    if (_2151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2147 = _2006;
                        _2148 = _2008;
                        _2149 = _2010;
                        _2150 = _2151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2010;
                frontier_phi_75_76_ladder_1 = _2008;
                frontier_phi_75_76_ladder_2 = _2006;
            }
            else
            {
                frontier_phi_75_76_ladder = _1876;
                frontier_phi_75_76_ladder_1 = _1874;
                frontier_phi_75_76_ladder_2 = _1872;
            }
            _2005 = frontier_phi_75_76_ladder_2;
            _2007 = frontier_phi_75_76_ladder_1;
            _2009 = frontier_phi_75_76_ladder;
        }
        float _2014 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
        _1778 = ((_2005 * 0.039999999105930328369140625) * _2014) + _1613;
        _1780 = ((_2007 * 0.039999999105930328369140625) * _2014) + _1614;
        _1782 = ((_2009 * 0.039999999105930328369140625) * _2014) + _1615;
    }
    else
    {
        _1778 = _1613;
        _1780 = _1614;
        _1782 = _1615;
    }
    uint _1789 = (_1480 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1804 = (cbInstanceData._m0[_1789].x * ((_537 * ((_486.x * cbMtdParam._m0[10u].x) - _416)) + _416)) + ((_1778 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    float _1805 = (cbInstanceData._m0[_1789].y * ((_537 * ((_486.y * cbMtdParam._m0[10u].y) - _417)) + _417)) + ((_1780 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    float _1806 = (cbInstanceData._m0[_1789].z * ((_537 * ((_486.z * cbMtdParam._m0[10u].z) - _418)) + _418)) + ((_1782 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    uint _1810 = _1480 + 6u;
    float _1818 = _575 / cbSceneParam._m0[86u].x;
    float _1819 = _576 / cbSceneParam._m0[86u].y;
    vec4 _1833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1818, _1819, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1835 = _1833.x;
    float _1836 = _1833.y;
    float _1837 = _1833.z;
    float _1838 = _1833.w;
    float _1928;
    float _1930;
    float _1932;
    float _1934;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _1891 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _1892 = _1891 / _562;
        float _1903 = _1892 * _261;
        float _1904 = _262 * _1892;
        float _1905 = (-0.0) - _1904;
        float _1906 = _1892 * _263;
        float _1908 = (cbSceneParam._m0[77u].w * _1905) / _1891;
        float _1909 = _1908 + cbSceneParam._m0[79u].w;
        float _1910 = cbSceneParam._m0[79u].w - _1904;
        float _1916 = sqrt(((_1903 * _1903) + (_1904 * _1904)) + (_1906 * _1906));
        float _1919 = (1.0 - (cbSceneParam._m0[77u].w / _1891)) * _1916;
        float _1924 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1926 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2109;
        if (abs((_1905 - _1908) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2109 = ((((_1909 > 0.0) ? exp2(_1924 * _1909) : (2.0 - exp2(_1926 * _1909))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1919;
        }
        else
        {
            float _2051 = 1.0 / cbSceneParam._m0[80u].x;
            float _2052 = isnan(_1910) ? _1909 : (isnan(_1909) ? _1910 : max(_1909, _1910));
            float _2053 = isnan(_1910) ? _1909 : (isnan(_1909) ? _1910 : min(_1909, _1910));
            float _2062 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : min(_2052, 0.0));
            float _2063 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : min(_2053, 0.0));
            _2109 = ((abs(_1916 / _1905) * cbSceneParam._m0[80u].y) * ((((_2062 - _2063) * 2.0) - ((exp2(_1924 * (isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)))) - exp2(_1924 * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))))) * _2051)) - ((exp2(_1926 * _2062) - exp2(_1926 * _2063)) * _2051))) + (_1919 * cbSceneParam._m0[80u].z);
        }
        vec4 _2111 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1818, _1819, 1.0), 0.0);
        float _2120 = exp2((_2109 * (-1.44269502162933349609375)) * (1.0 - _2111.w));
        float _2121 = log2(_2120);
        float _2137 = log2(_1838);
        _1928 = (exp2(_2137 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2121 * cbSceneParam._m0[78u].x)) * _2111.x) / cbSceneParam._m0[78u].x)) + _1835;
        _1930 = (exp2(_2137 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2121 * cbSceneParam._m0[78u].y)) * _2111.y) / cbSceneParam._m0[78u].y)) + _1836;
        _1932 = (exp2(_2137 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2121 * cbSceneParam._m0[78u].z)) * _2111.z) / cbSceneParam._m0[78u].z)) + _1837;
        _1934 = _2120 * _1838;
    }
    else
    {
        _1928 = _1835;
        _1930 = _1836;
        _1932 = _1837;
        _1934 = _1838;
    }
    float _1946 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1947 = _1946 == 3.0;
    float _1949 = log2(_1934);
    float _1956 = exp2(_1949 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)));
    float _1957 = exp2(_1949 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    float _1958 = exp2(_1949 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    float _1967 = (_1946 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1967 * (_1947 ? _1956 : (_1956 + (cbSceneParam._m0[72u].w * _1928)));
    SV_Target.y = _1967 * (_1947 ? _1957 : (_1957 + (cbSceneParam._m0[72u].w * _1930)));
    SV_Target.z = _1967 * (_1947 ? _1958 : (_1958 + (cbSceneParam._m0[72u].w * _1932)));
    SV_Target.w = cbInstanceData._m0[_1810].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1810].w;
}


