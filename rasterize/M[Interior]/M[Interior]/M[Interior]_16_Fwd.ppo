#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1268;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _345 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _381 = cbMtdParam._m0[21u].w + _267;
    float _382 = cbMtdParam._m0[22u].x + _268;
    float _383 = cbMtdParam._m0[22u].y + _269;
    float _397 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_196, _197, _198));
    float _398 = (-0.0) - dot(vec3(_381, _382, _383), vec3(_210, _211, _212));
    float _399 = (-0.0) - dot(vec3(_381, _382, _383), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _406 = _403 * _399;
    float _407 = (_403 * _397) + ((cbMtdParam._m0[19u].w * _285) * ((_345.x * 2.0) + (-1.0)));
    float _408 = (_403 * _398) + ((cbMtdParam._m0[20u].x * _285) * ((_345.y * 2.0) + (-1.0)));
    float _409 = _407 * cbMtdParam._m0[18u].z;
    float _410 = _408 * cbMtdParam._m0[18u].y;
    float _411 = fract(TEXCOORD.x);
    float _412 = fract(TEXCOORD.y);
    float _418;
    if (_409 > 0.0)
    {
        _418 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _418 = frontier_phi_3_2_ladder;
    }
    float _426;
    if (_410 > 0.0)
    {
        _426 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _426 = frontier_phi_7_6_ladder;
    }
    bool _428 = _406 > 0.0;
    float _430 = _428 ? (cbMtdParam._m0[15u].x / _406) : 5000.0;
    float _431 = isnan(_426) ? _418 : (isnan(_418) ? _426 : min(_418, _426));
    float _432 = isnan(_430) ? _431 : (isnan(_431) ? _430 : min(_431, _430));
    float _436 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _437 = _411 + (-0.5);
    float _440 = _412 + (-0.5);
    float _443 = ((_432 * _406) + _436) / _436;
    vec4 _467 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_437 + (_432 * _409)) / _443) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_440 + (_432 * _410)) / _443) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _480 = (_467.x * _285) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _285) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _285) * cbMtdParam._m0[9u].z;
    float _500 = _407 * cbMtdParam._m0[20u].z;
    float _501 = _408 * cbMtdParam._m0[20u].y;
    bool _502 = _500 > 0.0;
    float _507;
    if (_502)
    {
        _507 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _507 = frontier_phi_11_10_ladder;
    }
    bool _509 = _501 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _514 = frontier_phi_15_14_ladder;
    }
    float _517 = _428 ? (cbMtdParam._m0[16u].x / _406) : 5000.0;
    float _518 = isnan(_514) ? _507 : (isnan(_507) ? _514 : min(_507, _514));
    float _519 = isnan(_517) ? _518 : (isnan(_518) ? _517 : min(_518, _517));
    float _523 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _527 = ((_519 * _406) + _523) / _523;
    float _532 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _534 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _550 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_437 + (_519 * _500)) / _527) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_440 + (_519 * _501)) / _527) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _565;
    if (_502)
    {
        _565 = (1.0 - _411) / _500;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _411) / _500;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _565 = frontier_phi_19_18_ladder;
    }
    float _571;
    if (_509)
    {
        _571 = (1.0 - _412) / _501;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _412) / _501;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _571 = frontier_phi_23_22_ladder;
    }
    float _573 = isnan(_571) ? _565 : (isnan(_565) ? _571 : min(_565, _571));
    float _574 = isnan(_517) ? _573 : (isnan(_573) ? _517 : min(_573, _517));
    float _581 = ((_574 * _406) + _523) / _523;
    vec4 _602 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_437 + (_574 * _500)) / _581) + 0.5) + _532) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_440 + (_574 * _501)) / _581) + 0.5) + _534) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _614 = (((((cbMtdParam._m0[10u].x * _285) * _550.x) - _480) * _285) * _604) + _480;
    float _615 = (((((cbMtdParam._m0[10u].y * _285) * _550.y) - _481) * _285) * _604) + _481;
    float _616 = (((((cbMtdParam._m0[10u].z * _285) * _550.z) - _482) * _285) * _604) + _482;
    float _630 = _407 * cbMtdParam._m0[21u].x;
    float _631 = _408 * cbMtdParam._m0[20u].w;
    bool _632 = _630 > 0.0;
    float _637;
    if (_632)
    {
        _637 = (1.0 - _411) / _630;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_630 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _411) / _630;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _637 = frontier_phi_27_26_ladder;
    }
    bool _639 = _631 > 0.0;
    float _644;
    if (_639)
    {
        _644 = (1.0 - _412) / _631;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_631 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _412) / _631;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _644 = frontier_phi_31_30_ladder;
    }
    float _647 = _428 ? (cbMtdParam._m0[17u].z / _406) : 5000.0;
    float _648 = isnan(_644) ? _637 : (isnan(_637) ? _644 : min(_637, _644));
    float _649 = isnan(_647) ? _648 : (isnan(_648) ? _647 : min(_648, _647));
    float _653 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _657 = ((_649 * _406) + _653) / _653;
    float _662 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _664 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _681 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_437 + (_649 * _630)) / _657) + 0.5) + _662) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_440 + (_649 * _631)) / _657) + 0.5) + _664) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _696;
    if (_632)
    {
        _696 = (1.0 - _411) / _630;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_630 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _411) / _630;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _696 = frontier_phi_35_34_ladder;
    }
    float _702;
    if (_639)
    {
        _702 = (1.0 - _412) / _631;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_631 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _412) / _631;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _702 = frontier_phi_39_38_ladder;
    }
    float _704 = isnan(_702) ? _696 : (isnan(_696) ? _702 : min(_696, _702));
    float _705 = isnan(_647) ? _704 : (isnan(_704) ? _647 : min(_704, _647));
    float _712 = ((_705 * _406) + _653) / _653;
    vec4 _732 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_437 + (_705 * _630)) / _712) + 0.5) + _662) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_440 + (_705 * _631)) / _712) + 0.5) + _664) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _734 = _732.x;
    float _744 = _285 * 0.1500000059604644775390625;
    float _755 = (_744 * ((_614 - _320) + (((((cbMtdParam._m0[14u].x * _285) * _681.x) - _614) * _285) * _734))) + _320;
    float _756 = (_744 * ((_615 - _322) + (((((cbMtdParam._m0[14u].y * _285) * _681.y) - _615) * _285) * _734))) + _322;
    float _757 = (_744 * ((_616 - _324) + (((((cbMtdParam._m0[14u].z * _285) * _681.z) - _616) * _285) * _734))) + _324;
    vec4 _769 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _773 = _769.z;
    float _776 = (_769.x * 2.0) + (-1.0);
    float _777 = (_769.y * 2.0) + (-1.0);
    float _778 = dot(vec2(_776, _777), vec2(_776, _777));
    float _3422 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _783 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _786 = fma(_783, _203, fma(_777, _210, _776 * _196));
    float _789 = fma(_783, _204, fma(_777, _211, _776 * _197));
    float _792 = fma(_783, _205, fma(_777, _212, _776 * _198));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _3433 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _800 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3455 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3466 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _824 = _267 * _823;
    float _825 = _268 * _823;
    float _826 = _269 * _823;
    float _832 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _833 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _852 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _855 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _858 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _871 = uint(roundEven(NORMAL.w)) * 13u;
    uint _874 = (_871 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_874].z;
    float _3477 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _832, cbSceneParam._m0[86u].y * _833));
    float _897 = _894.x * TEXCOORD.z;
    float _898 = dot(vec3(_797, _798, _799), vec3(_824, _825, _826));
    float _901 = _898 * 2.0;
    float _905 = (_901 * _797) - _824;
    float _906 = (_901 * _798) - _825;
    float _907 = (_901 * _799) - _826;
    float _911 = abs(dot(vec3(_824, _825, _826), vec3(_797, _798, _799)));
    float _3510 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _913 = sqrt(_800);
    float _926 = exp2((_913 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_913 * 3.0));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _994 = fma(_966, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958));
        float _998 = fma(_966, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958));
        float _1002 = fma(_966, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958));
        float _1025 = _958 + _797;
        float _1026 = _962 + _798;
        float _1027 = _966 + _799;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _994;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _998;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1002;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_994 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_998 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1002 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_797, _798, _799), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3558 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_797, _798, _799), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3591 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_797, _798, _799), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3624 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1308 = fma(_966, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _958));
        float _1312 = fma(_966, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _958));
        float _1316 = fma(_966, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _958));
        float _1339 = _958 + _797;
        float _1340 = _962 + _798;
        float _1341 = _966 + _799;
        float _1351 = fma(_1341, cbModelParam._m0[30u].z, fma(_1340, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339)) - _1308;
        float _1352 = fma(_1341, cbModelParam._m0[31u].z, fma(_1340, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339)) - _1312;
        float _1353 = fma(_1341, cbModelParam._m0[32u].z, fma(_1340, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339)) - _1316;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1308 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1312 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[35u].z) + ((((((_1316 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1407 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1374.x + (-0.5));
        float _1409 = _1407 * (_1374.y + (-0.5));
        float _1410 = _1407 * (_1374.z + (-0.5));
        float _1417 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1381.x + (-0.5));
        float _1419 = _1417 * (_1381.y + (-0.5));
        float _1420 = _1417 * (_1381.z + (-0.5));
        float _1427 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1388.x + (-0.5));
        float _1429 = _1427 * (_1388.y + (-0.5));
        float _1430 = _1427 * (_1388.z + (-0.5));
        float _1437 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1395.x + (-0.5));
        float _1439 = _1437 * (_1395.y + (-0.5));
        float _1440 = _1437 * (_1395.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_797, _798, _799), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3687 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1471 + 1.0))) + _1476) * _1441;
        float _1486 = _1409 * 0.5;
        float _1487 = _1419 * 0.5;
        float _1488 = _1429 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_797, _798, _799), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _3720 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1513 + 1.0))) + _1518) * _1442;
        float _1528 = _1410 * 0.5;
        float _1529 = _1420 * 0.5;
        float _1530 = _1430 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_797, _798, _799), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _3753 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1555 + 1.0))) + _1560) * _1443;
        _1577 = _1410;
        _1578 = _1409;
        _1579 = _1408;
        _1580 = _1420;
        _1581 = _1419;
        _1582 = _1418;
        _1583 = _1430;
        _1584 = _1429;
        _1585 = _1428;
        _1586 = _1443;
        _1587 = _1442;
        _1588 = _1441;
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1268;
        _1578 = _1268;
        _1579 = _1268;
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = _1268;
        _1588 = _1268;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1280)) + _1280;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1281)) + _1281;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1282)) + _1282;
    float _1624 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1601));
    float _1645 = _905 * 0.5;
    float _1646 = _906 * 0.5;
    float _1647 = _907 * 0.5;
    float _1648 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1651 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1654 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1688;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1661 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1665 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1669 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1676 = dot(vec4(cbModelParam._m0[39u]), vec4(_1645, _1646, _1647, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1699;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1690 = dot(vec4(cbModelParam._m0[40u]), vec4(_1645, _1646, _1647, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1703 = (_1699 * cbModelParam._m0[1u].x) + (_1688 * (1.0 - cbModelParam._m0[1u].x));
    float _1713 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1713 : min(cbModelParam._m0[25u].z, _1713));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_966, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_966, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_966, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_907, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905));
        float _1775 = fma(_907, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905));
        float _1778 = fma(_907, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1806 = frontier_phi_54_52_ladder;
        }
        float _2151;
        if (_1775 > 0.0)
        {
            _2151 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2151 = frontier_phi_63_59_ladder;
        }
        float _2451;
        if (_1778 > 0.0)
        {
            _2451 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2451 = frontier_phi_77_70_ladder;
        }
        float _2453 = isnan(_2151) ? _1806 : (isnan(_1806) ? _2151 : min(_1806, _2151));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1772) + _1761;
        float _2459 = (_2454 * _1775) + _1765;
        float _2460 = (_2454 * _1778) + _1769;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2461;
        float _2464 = _2461 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2460 > _2464) || ((_2460 < _2462) || ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 < _2462) || (_2458 > _2464))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1714);
            frontier_phi_53_77_ladder = _2586.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2586.z * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_53_77_ladder;
        _1796 = frontier_phi_53_77_ladder_1;
        _1798 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_905, _906, _907), _1714);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1855 = fma(_966, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958)) + cbModelParam._m0[21u].w;
        float _1859 = fma(_966, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958)) + cbModelParam._m0[22u].w;
        float _1863 = fma(_966, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958)) + cbModelParam._m0[23u].w;
        float _1866 = fma(_907, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905));
        float _1869 = fma(_907, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905));
        float _1872 = fma(_907, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905));
        float _2156;
        if (_1866 > 0.0)
        {
            _2156 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2156 = frontier_phi_65_61_ladder;
        }
        float _2477;
        if (_1869 > 0.0)
        {
            _2477 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2477 = frontier_phi_79_72_ladder;
        }
        float _2646;
        if (_1872 > 0.0)
        {
            _2646 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2646 = frontier_phi_93_88_ladder;
        }
        float _2648 = isnan(_2477) ? _2156 : (isnan(_2156) ? _2477 : min(_2156, _2477));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _1866) + _1855;
        float _2654 = (_2649 * _1869) + _1859;
        float _2655 = (_2649 * _1872) + _1863;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_62_93_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _1891 = frontier_phi_62_93_ladder_2;
        _1893 = frontier_phi_62_93_ladder_1;
        _1895 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_905, _906, _907), _1803);
        _1891 = _1875.x * cbModelParam._m0[1u].z;
        _1893 = _1875.y * cbModelParam._m0[1u].z;
        _1895 = _1875.z * cbModelParam._m0[1u].z;
    }
    float _1907 = ((((1.0 - _926) * ((_913 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_926 * _913)) * _897;
    float _1908 = _1907 * ((cbModelParam._m0[1u].w * (_1891 - _1794)) + _1794);
    float _1909 = _1907 * ((cbModelParam._m0[1u].w * (_1893 - _1796)) + _1796);
    float _1910 = _1907 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1913 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, _1908 * cbSceneParam._m0[91u].x));
    uvec4 _1929 = floatBitsToUint(cbInstanceData._m0[_871 + 5u]);
    uint _1931 = _1929.x * 14u;
    uint _1932 = _1931 + 13u;
    float _1937 = _897 + (-1.0);
    float _1940 = (cbLight._m0[_1932].x * _1937) + 1.0;
    float _1941 = (cbLight._m0[_1932].y * _1937) + 1.0;
    uint _1942 = _1931 + 5u;
    float _1948 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1952 = _1931 + 4u;
    float _1958 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1962 = _1931 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_797, _798, _799));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_797, _798, _799));
    float _3889 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _3900 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1942].x * _1948) * _1983) + ((cbLight._m0[_1952].x * _1958) * _1981);
    float _1991 = ((_1948 * cbLight._m0[_1942].y) * _1983) + ((_1958 * cbLight._m0[_1952].y) * _1981);
    float _1992 = ((_1948 * cbLight._m0[_1942].z) * _1983) + ((_1958 * cbLight._m0[_1952].z) * _1981);
    uint _1994 = _1931 + 8u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _800) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1931].x + _824;
    float _2010 = cbLight._m0[_1931].y + _825;
    float _2011 = cbLight._m0[_1931].z + _826;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_1931].xyz));
    float _3911 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _2023 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _2024 = dot(vec3(_797, _798, _799), vec3(_2016, _2017, _2018));
    float _3933 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2016, _2017, _2018));
    float _3944 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2008 * _2008;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2008;
    float _2059 = (0.5 / (((_2023 * ((_2022 * _2048) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2048) + _2008) * _2022))) * _2022;
    float _3955 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    uint _2072 = _1931 + 9u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _800) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1962].x + _824;
    float _2086 = cbLight._m0[_1962].y + _825;
    float _2087 = cbLight._m0[_1962].z + _826;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_1962].xyz));
    float _3966 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _2099 = dot(vec3(_797, _798, _799), vec3(_2092, _2093, _2094));
    float _3977 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2092, _2093, _2094));
    float _3988 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2084 * _2084;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2121 = 1.0 - _2084;
    float _2131 = (0.5 / (((_2023 * ((_2098 * _2121) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2121) + _2084) * _2098))) * _2098;
    float _3999 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    float _2143 = (((_2120 * cbLight._m0[_2072].x) * _2133) * _1948) + (((_2047 * cbLight._m0[_1994].x) * _2061) * _1958);
    float _2144 = (((_2120 * cbLight._m0[_2072].y) * _2133) * _1948) + (((_2047 * cbLight._m0[_1994].y) * _2061) * _1958);
    float _2145 = (((_2120 * cbLight._m0[_2072].z) * _2133) * _1948) + (((_2047 * cbLight._m0[_1994].z) * _2061) * _1958);
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1929.y == 0u)
    {
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2200;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2200;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2200;
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.x;
        uint _2227 = uint((float(_2215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _833) / _2216))) + floor(float(uint(cbSceneParam._m0[85u].x * _832) / _2216)));
        float _2237 = (log2(_2203 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2238 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        uint _2241 = uint(isnan(14.0) ? _2238 : (isnan(_2238) ? 14.0 : min(_2238, 14.0)));
        uvec4 _2246 = texelFetch(g_lightClusterGridBuffer, int(((_2241 << 2u) + (_2227 << 6u)) >> 2u));
        uint _2247 = _2246.x;
        uint _2248 = _2215.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2248 >> 4u) & 15u)) + 4294967295u) & _2247) == 0u) || ((_2248 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            uint _2520 = 0u;
            uint _2529;
            bool _2530;
            for (;;)
            {
                _2529 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                _2530 = _2529 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2530)
                {
                    frontier_phi_90_pred = _2519;
                    frontier_phi_90_pred_1 = _2514;
                    frontier_phi_90_pred_2 = _2515;
                    frontier_phi_90_pred_3 = _2516;
                    frontier_phi_90_pred_4 = _2517;
                    frontier_phi_90_pred_5 = _2518;
                }
                else
                {
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    uint _2695;
                    _2689 = _2514;
                    _2690 = _2515;
                    _2691 = _2516;
                    _2692 = _2517;
                    _2693 = _2518;
                    _2694 = _2519;
                    _2695 = _2529;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2699 = uint(findLSB(_2695)) + (_2520 << 5u);
                        uint _2696 = (_2695 + 4294967295u) & _2695;
                        uint _2701 = _2699 * 48u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2721 = (_2699 * 48u) + 4u;
                        vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2740 = (_2699 * 48u) + 8u;
                        vec3 _2751 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x));
                        float _2755 = _2715.x - _2201;
                        float _2756 = _2715.y - _2202;
                        float _2757 = _2715.z - _2203;
                        float _2758 = dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757));
                        float _2761 = inversesqrt(_2758);
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2765 = dot(vec3(_852, _855, _858), vec3(_2762, _2763, _2764));
                        float _2770 = 1.0 - (_2758 * _2715.w);
                        float _4020 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2772 = sqrt(_2758) * _2734.w;
                        float _2775 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                        float _2776 = _2775 * _2775;
                        float _2779 = ((1.0 - _2776) * _2765) + _2776;
                        float _2782 = _2772 * _2772;
                        float _2786 = ((isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))) * _2771) / ((_2782 * 0.699999988079071044921875) + 1.0);
                        float _2790 = (-0.0) - _2201;
                        float _2791 = (-0.0) - _2202;
                        float _2792 = (-0.0) - _2203;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2807 = exp2(log2(1.0 / ((_2782 * 3.5) + 5.0)) * 0.25);
                        float _2808 = 1.0 - _913;
                        float _2815 = sqrt(1.0 - ((1.0 - (_2808 * _2808)) * (1.0 - (_2807 * _2807))));
                        float _2816 = _2815 * _2815;
                        float _2817 = _2816 * _2816;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2828 = dot(vec3(_852, _855, _858), vec3(_2797, _2798, _2799));
                        float _4036 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2832 = dot(vec3(_852, _855, _858), vec3(_2824 * _2818, _2824 * _2819, _2824 * _2820));
                        float _4047 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2839 = ((_2835 * _2835) * (_2817 + (-1.0))) + 1.0;
                        float _2840 = _2775 * _2816;
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2765) + _2841;
                        float _4058 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2846 = 1.0 - _2816;
                        float _2856 = (0.5 / (((_2845 * ((_2831 * _2846) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2845 * _2846) + _2816) * _2831))) * _2845;
                        float _4069 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2867 = (((_2817 * 3.1415927410125732421875) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) / ((_2839 * _2839) * ((_2782 * 2.1991131305694580078125) + 3.141590118408203125))) * _2771;
                        _2598 = (_2786 * _2734.x) + _2692;
                        _2599 = (_2786 * _2734.y) + _2693;
                        _2600 = (_2786 * _2734.z) + _2694;
                        _2595 = (_2867 * _2751.x) + _2689;
                        _2596 = (_2867 * _2751.y) + _2690;
                        _2597 = (_2867 * _2751.z) + _2691;
                        if (_2696 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2689 = _2595;
                            _2690 = _2596;
                            _2691 = _2597;
                            _2692 = _2598;
                            _2693 = _2599;
                            _2694 = _2600;
                            _2695 = _2696;
                        }
                    }
                    frontier_phi_90_pred = _2600;
                    frontier_phi_90_pred_1 = _2595;
                    frontier_phi_90_pred_2 = _2596;
                    frontier_phi_90_pred_3 = _2597;
                    frontier_phi_90_pred_4 = _2598;
                    frontier_phi_90_pred_5 = _2599;
                }
                _2349 = frontier_phi_90_pred;
                _2339 = frontier_phi_90_pred_1;
                _2341 = frontier_phi_90_pred_2;
                _2343 = frontier_phi_90_pred_3;
                _2345 = frontier_phi_90_pred_4;
                _2347 = frontier_phi_90_pred_5;
                uint _2521 = _2520 + 1u;
                if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2514 = _2339;
                    _2515 = _2341;
                    _2516 = _2343;
                    _2517 = _2345;
                    _2518 = _2347;
                    _2519 = _2349;
                    _2520 = _2521;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.z;
        uint _2355 = (_2353 >> 8u) & 15u;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((4294967295u << _2355) & _2247) == 0u)
        {
            _2482 = _2338;
            _2484 = _2340;
            _2486 = _2342;
            _2488 = _2344;
            _2490 = _2346;
            _2492 = _2348;
        }
        else
        {
            float _2507 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
            float _2508 = _2507 * _2201;
            float _2509 = _2507 * _2202;
            float _2510 = _2507 * _2203;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2355 < ((_2353 >> 12u) & 15u))
            {
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2672 = _2338;
                float _2673 = _2340;
                float _2674 = _2342;
                float _2675 = _2344;
                float _2676 = _2346;
                float _2677 = _2348;
                uint _2678 = _2355;
                uint _2687;
                bool _2688;
                for (;;)
                {
                    _2687 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                    _2688 = _2687 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2688)
                    {
                        frontier_phi_99_pred = _2675;
                        frontier_phi_99_pred_1 = _2674;
                        frontier_phi_99_pred_2 = _2673;
                        frontier_phi_99_pred_3 = _2672;
                        frontier_phi_99_pred_4 = _2677;
                        frontier_phi_99_pred_5 = _2676;
                    }
                    else
                    {
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2906 = _2672;
                        float _2907 = _2673;
                        float _2908 = _2674;
                        float _2909 = _2675;
                        float _2910 = _2676;
                        float _2911 = _2677;
                        uint _2912 = _2687;
                        uint _2913;
                        vec4 _2938;
                        float _2939;
                        vec4 _2954;
                        vec3 _2966;
                        vec4 _2981;
                        vec4 _2996;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2923 = ((_2678 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2912));
                            _2913 = (_2912 + 4294967295u) & _2912;
                            uint _2925 = _2923 * 40u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.w;
                            uint _2941 = (_2923 * 40u) + 4u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2923 * 40u) + 8u;
                            _2966 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x));
                            uint _2968 = (_2923 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2923 * 40u) + 20u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2923 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2923 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_2203, _3030.z, fma(_2202, _3030.y, _3030.x * _2201)) + _3030.w;
                            _3043 = !((fma(_2203, _3011.z, fma(_2202, _3011.y, _3011.x * _2201)) + _3011.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2938.x - _2201;
                                float _3071 = _2938.y - _2202;
                                float _3072 = _2938.z - _2203;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2939 * _2939));
                                float _4080 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3088 = sqrt(_3073) * _2954.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_852, _855, _858))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_2203, _2981.z, fma(_2202, _2981.y, _2981.x * _2201)) + _2981.w) / _3042;
                                float _3102 = (fma(_2203, _2996.z, fma(_2202, _2996.y, _2996.x * _2201)) + _2996.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4096 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _913;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2508;
                                float _3132 = _3078 - _2509;
                                float _3133 = _3079 - _2510;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_852, _855, _858), vec3((-0.0) - _2508, (-0.0) - _2509, (-0.0) - _2510));
                                float _4107 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3145 = dot(vec3(_852, _855, _858), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4118 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_852, _855, _858), vec3(_3077, _3078, _3079))) + _3154;
                                float _4129 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4140 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3108 * _2954.z;
                                frontier_phi_105_pred_1 = _3182 * _2966.x;
                                frontier_phi_105_pred_2 = _3182 * _2966.y;
                                frontier_phi_105_pred_3 = _3182 * _2966.z;
                                frontier_phi_105_pred_4 = _3108 * _2954.x;
                                frontier_phi_105_pred_5 = _3108 * _2954.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_105_pred;
                            _3186 = frontier_phi_105_pred_1;
                            _3187 = frontier_phi_105_pred_2;
                            _3188 = frontier_phi_105_pred_3;
                            _3189 = frontier_phi_105_pred_4;
                            _3190 = frontier_phi_105_pred_5;
                            _2896 = _3189 + _2909;
                            _2897 = _3190 + _2910;
                            _2898 = _3191 + _2911;
                            _2893 = _3186 + _2906;
                            _2894 = _3187 + _2907;
                            _2895 = _3188 + _2908;
                            if (_2913 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2913;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2896;
                        frontier_phi_99_pred_1 = _2895;
                        frontier_phi_99_pred_2 = _2894;
                        frontier_phi_99_pred_3 = _2893;
                        frontier_phi_99_pred_4 = _2898;
                        frontier_phi_99_pred_5 = _2897;
                    }
                    _2489 = frontier_phi_99_pred;
                    _2487 = frontier_phi_99_pred_1;
                    _2485 = frontier_phi_99_pred_2;
                    _2483 = frontier_phi_99_pred_3;
                    _2493 = frontier_phi_99_pred_4;
                    _2491 = frontier_phi_99_pred_5;
                    uint _2679 = _2678 + 1u;
                    if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2672 = _2483;
                        _2673 = _2485;
                        _2674 = _2487;
                        _2675 = _2489;
                        _2676 = _2491;
                        _2677 = _2493;
                        _2678 = _2679;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2493;
                frontier_phi_81_82_ladder_1 = _2489;
                frontier_phi_81_82_ladder_2 = _2487;
                frontier_phi_81_82_ladder_3 = _2485;
                frontier_phi_81_82_ladder_4 = _2483;
                frontier_phi_81_82_ladder_5 = _2491;
            }
            else
            {
                frontier_phi_81_82_ladder = _2348;
                frontier_phi_81_82_ladder_1 = _2344;
                frontier_phi_81_82_ladder_2 = _2342;
                frontier_phi_81_82_ladder_3 = _2340;
                frontier_phi_81_82_ladder_4 = _2338;
                frontier_phi_81_82_ladder_5 = _2346;
            }
            _2482 = frontier_phi_81_82_ladder_4;
            _2484 = frontier_phi_81_82_ladder_3;
            _2486 = frontier_phi_81_82_ladder_2;
            _2488 = frontier_phi_81_82_ladder_1;
            _2490 = frontier_phi_81_82_ladder_5;
            _2492 = frontier_phi_81_82_ladder;
        }
        float _2497 = isnan(1.0) ? _897 : (isnan(_897) ? 1.0 : min(_897, 1.0));
        _2260 = (_2497 * _2488) + _1990;
        _2262 = (_2497 * _2490) + _1991;
        _2264 = (_2497 * _2492) + _1992;
        _2266 = ((_2482 * 0.039999999105930328369140625) * _2497) + _2143;
        _2268 = ((_2484 * 0.039999999105930328369140625) * _2497) + _2144;
        _2270 = ((_2486 * 0.039999999105930328369140625) * _2497) + _2145;
    }
    else
    {
        _2260 = _1990;
        _2262 = _1991;
        _2264 = _1992;
        _2266 = _2143;
        _2268 = _2144;
        _2270 = _2145;
    }
    float _4156 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4167 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4178 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2287 = ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2260 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _897))) + ((_2266 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2262 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _897))) + ((_2268 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2264 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _897))) + ((_2270 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    uint _2293 = _871 + 6u;
    float _2301 = _832 / cbSceneParam._m0[86u].x;
    float _2302 = _833 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _2363 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _2364 = _2363 / _819;
        float _2375 = _2364 * _267;
        float _2376 = _268 * _2364;
        float _2377 = (-0.0) - _2376;
        float _2378 = _2364 * _269;
        float _2380 = (cbSceneParam._m0[77u].w * _2377) / _2363;
        float _2381 = _2380 + cbSceneParam._m0[79u].w;
        float _2382 = cbSceneParam._m0[79u].w - _2376;
        float _2388 = sqrt(((_2375 * _2375) + (_2376 * _2376)) + (_2378 * _2378));
        float _2391 = (1.0 - (cbSceneParam._m0[77u].w / _2363)) * _2388;
        float _2397 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2399 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2608;
        if (abs((_2377 - _2380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2608 = ((((_2381 > 0.0) ? exp2(_2397 * _2381) : (2.0 - exp2(_2399 * _2381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2391;
        }
        else
        {
            float _2543 = 1.0 / cbSceneParam._m0[80u].x;
            float _2544 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : max(_2381, _2382));
            float _2545 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : min(_2381, _2382));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            _2608 = ((abs(_2388 / _2377) * cbSceneParam._m0[80u].y) * ((((_2554 - _2555) * 2.0) - ((exp2(_2397 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0)))) - exp2(_2397 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))))) * _2543)) - ((exp2(_2399 * _2554) - exp2(_2399 * _2555)) * _2543))) + (_2391 * cbSceneParam._m0[80u].z);
        }
        vec4 _2610 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2619 = exp2((_2608 * (-1.44269502162933349609375)) * (1.0 - _2610.w));
        float _2620 = log2(_2619);
        float _2636 = log2(_2321);
        _2401 = (exp2(_2636 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].x)) * _2610.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2403 = (exp2(_2636 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].y)) * _2610.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2405 = (exp2(_2636 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].z)) * _2610.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2407 = _2619 * _2321;
    }
    else
    {
        _2401 = _2318;
        _2403 = _2319;
        _2405 = _2320;
        _2407 = _2321;
    }
    float _2419 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2420 = _2419 == 3.0;
    float _2421 = log2(_2407);
    float _2428 = exp2(_2421 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0)));
    float _2429 = exp2(_2421 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2430 = exp2(_2421 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)));
    float _2439 = (_2419 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2439 * (_2420 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.y = _2439 * (_2420 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.z = _2439 * (_2420 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.w = cbInstanceData._m0[_2293].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
}


