#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3066;
float _3067;
float _3068;
float _3069;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _564 = _350 * cbMtdParam._m0[21u].x;
    float _565 = _351 * cbMtdParam._m0[20u].w;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _371 ? (cbMtdParam._m0[17u].z / _349) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _591 = ((_583 * _349) + _587) / _587;
    float _596 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _598 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _615 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_380 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_383 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _627;
    if (_566)
    {
        _627 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _627 = frontier_phi_35_34_ladder;
    }
    float _633;
    if (_573)
    {
        _633 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _633 = frontier_phi_39_38_ladder;
    }
    float _635 = isnan(_633) ? _627 : (isnan(_627) ? _633 : min(_627, _633));
    float _636 = isnan(_581) ? _635 : (isnan(_635) ? _581 : min(_635, _581));
    float _643 = ((_636 * _349) + _587) / _587;
    vec4 _663 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_380 + (_636 * _564)) / _643) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_383 + (_636 * _565)) / _643) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _665 = _663.x;
    float _672 = (_665 * ((_615.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _673 = (_665 * ((_615.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _674 = (_665 * ((_615.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _3128 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3139 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3150 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _698 = _265 * _697;
    float _699 = _266 * _697;
    float _700 = _267 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _803 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _810 = (cbMatDynParam._m0[5u].x * _803) + cbMatDynParam._m0[5u].y;
        float _3161 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _815 = (cbMatDynParam._m0[5u].z * _803) + cbMatDynParam._m0[5u].w;
        float _3172 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) - _811)) + _811) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _719 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _720 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _733 = uint(roundEven(NORMAL.w)) * 13u;
    uint _735 = _733 + 9u;
    uint _736 = _735 + uint(cbMatDynParam._m0[0u].w);
    float _742 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0)))) * cbInstanceData._m0[_736].x;
    float _743 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_736].y;
    float _744 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * cbInstanceData._m0[_736].z;
    float _3183 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    vec4 _756 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _719, cbSceneParam._m0[86u].y * _720));
    float _759 = _756.x * TEXCOORD.z;
    float _760 = (-0.0) - _698;
    float _761 = (-0.0) - _699;
    float _762 = (-0.0) - _700;
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = (cbModelParam._m0[37u].x * ((((fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _879 = (cbModelParam._m0[37u].y * ((((fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _880 = (((((fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(0.0), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3253 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(0.0), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3286 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(0.0), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3319 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = (cbModelParam._m0[38u].x * ((((fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1162 = (cbModelParam._m0[38u].y * ((((fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1163 = (((((fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(0.0), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3382 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(0.0), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3415 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(0.0), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3448 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1090;
        _1369 = _1090;
        _1370 = _1090;
        _1371 = _1090;
        _1372 = _1090;
        _1373 = _1090;
        _1374 = _1090;
        _1375 = _1090;
        _1376 = _1090;
        _1377 = _1090;
        _1378 = _1090;
        _1379 = _1090;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1102)) + _1102;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1103)) + _1103;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1104)) + _1104;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _698 * (-0.5);
    float _1437 = _699 * (-0.5);
    float _1438 = _700 * (-0.5);
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1503 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_762, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760));
        float _1564 = fma(_762, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760));
        float _1567 = fma(_762, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760));
        float _1593;
        if (_1561 > 0.0)
        {
            _1593 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1593 = frontier_phi_57_55_ladder;
        }
        float _1888;
        if (_1564 > 0.0)
        {
            _1888 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1888 = frontier_phi_66_62_ladder;
        }
        float _2199;
        if (_1567 > 0.0)
        {
            _2199 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2199 = frontier_phi_80_73_ladder;
        }
        float _2201 = isnan(_1888) ? _1593 : (isnan(_1593) ? _1888 : min(_1593, _1888));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1561) + _1550;
        float _2207 = (_2202 * _1564) + _1554;
        float _2208 = (_2202 * _1567) + _1558;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2209;
        float _2212 = _2209 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2208 > _2212) || ((_2208 < _2210) || ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 < _2210) || (_2206 > _2212))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_56_80_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_56_80_ladder_2;
        _1585 = frontier_phi_56_80_ladder_1;
        _1587 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_760, _761, _762), _1503);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1590 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_762, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760));
        float _1656 = fma(_762, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760));
        float _1659 = fma(_762, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760));
        float _1893;
        if (_1653 > 0.0)
        {
            _1893 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1893 = frontier_phi_68_64_ladder;
        }
        float _2225;
        if (_1656 > 0.0)
        {
            _2225 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2225 = frontier_phi_82_75_ladder;
        }
        float _2412;
        if (_1659 > 0.0)
        {
            _2412 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2412 = frontier_phi_100_93_ladder;
        }
        float _2414 = isnan(_2225) ? _1893 : (isnan(_1893) ? _2225 : min(_1893, _2225));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1653) + _1642;
        float _2420 = (_2415 * _1656) + _1646;
        float _2421 = (_2415 * _1659) + _1650;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_65_100_ladder = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2613.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2613.z * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_65_100_ladder_1;
        _1680 = frontier_phi_65_100_ladder;
        _1682 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_760, _761, _762), _1590);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1694 = _759 * 0.01200000010430812835693359375;
    float _1696 = _1694 * ((cbModelParam._m0[1u].w * (_1678 - _1583)) + _1583);
    float _1697 = _1694 * ((cbModelParam._m0[1u].w * (_1680 - _1585)) + _1585);
    float _1698 = _1694 * ((cbModelParam._m0[1u].w * (_1682 - _1587)) + _1587);
    float _1701 = fma(_1698, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1696 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1698, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1696 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1698, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1696 * cbSceneParam._m0[91u].x));
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_733 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1725 = _759 + (-1.0);
    float _1728 = (cbLight._m0[_1720].x * _1725) + 1.0;
    float _1729 = (cbLight._m0[_1720].y * _1725) + 1.0;
    uint _1730 = _1719 + 5u;
    float _1736 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
    uint _1740 = _1719 + 4u;
    float _1746 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
    uint _1750 = _1719 | 1u;
    float _1761 = dot(vec3(cbLight._m0[_1719].xyz), vec3(0.0));
    float _1764 = dot(vec3(cbLight._m0[_1750].xyz), vec3(0.0));
    float _3584 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _3595 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1769 = (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 0.3183098733425140380859375;
    float _1771 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.3183098733425140380859375;
    float _1778 = ((cbLight._m0[_1730].x * _1736) * _1771) + ((cbLight._m0[_1740].x * _1746) * _1769);
    float _1779 = ((_1736 * cbLight._m0[_1730].y) * _1771) + ((_1746 * cbLight._m0[_1740].y) * _1769);
    float _1780 = ((_1736 * cbLight._m0[_1730].z) * _1771) + ((_1746 * cbLight._m0[_1740].z) * _1769);
    uint _1781 = _1719 + 8u;
    float _1787 = cbLight._m0[_1719].x + _698;
    float _1788 = cbLight._m0[_1719].y + _699;
    float _1789 = cbLight._m0[_1719].z + _700;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1797 = dot(vec3(0.0), vec3(cbLight._m0[_1719].xyz));
    float _3606 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1801 = dot(vec3(0.0), vec3(_698, _699, _700));
    float _3617 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1787 * _1793, _1788 * _1793, _1789 * _1793));
    float _3628 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1822 = (0.5 / ((_1800 + 9.9999999392252902907785028219223e-09) + _1804)) * _1800;
    float _3639 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1824 = (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.31831014156341552734375;
    uint _1835 = _1719 + 9u;
    float _1841 = cbLight._m0[_1750].x + _698;
    float _1842 = cbLight._m0[_1750].y + _699;
    float _1843 = cbLight._m0[_1750].z + _700;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1851 = dot(vec3(0.0), vec3(cbLight._m0[_1750].xyz));
    float _3650 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1841 * _1847, _1842 * _1847, _1843 * _1847));
    float _3661 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1864 = (exp2(log2(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1868 = (0.5 / ((_1854 + 9.9999999392252902907785028219223e-09) + _1804)) * _1854;
    float _3672 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.31831014156341552734375;
    float _1880 = (((_1864 * cbLight._m0[_1835].x) * _1870) * _1736) + (((_1816 * cbLight._m0[_1781].x) * _1824) * _1746);
    float _1881 = (((_1864 * cbLight._m0[_1835].y) * _1870) * _1736) + (((_1816 * cbLight._m0[_1781].y) * _1824) * _1746);
    float _1882 = (((_1864 * cbLight._m0[_1835].z) * _1870) * _1736) + (((_1816 * cbLight._m0[_1781].z) * _1824) * _1746);
    float _1998;
    float _2000;
    float _2002;
    float _2004;
    float _2006;
    float _2008;
    if (_1717.y == 0u)
    {
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1938;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1938;
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1938;
        uvec4 _1953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1954 = _1953.x;
        uint _1965 = uint((float(_1953.y) * floor(float(uint(cbSceneParam._m0[85u].y * _720) / _1954))) + floor(float(uint(cbSceneParam._m0[85u].x * _719) / _1954)));
        float _1975 = (log2(_1941 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1976 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        uint _1979 = uint(isnan(14.0) ? _1976 : (isnan(_1976) ? 14.0 : min(_1976, 14.0)));
        uvec4 _1984 = texelFetch(g_lightClusterGridBuffer, int(((_1979 << 2u) + (_1965 << 6u)) >> 2u));
        uint _1985 = _1984.x;
        uint _1986 = _1953.z;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        if (((((1u << ((_1986 >> 4u) & 15u)) + 4294967295u) & _1985) == 0u) || ((_1986 & 240u) == 0u))
        {
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
        }
        else
        {
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            uint _2265 = 0u;
            uint _2274;
            bool _2275;
            for (;;)
            {
                _2274 = texelFetch(g_lightClassification, int((((_1979 << 5u) + (_1965 << 9u)) + (_2265 << 2u)) >> 2u)).x;
                _2275 = _2274 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2275)
                {
                    frontier_phi_95_pred = _2260;
                    frontier_phi_95_pred_1 = _2259;
                    frontier_phi_95_pred_2 = _2261;
                    frontier_phi_95_pred_3 = _2264;
                    frontier_phi_95_pred_4 = _2263;
                    frontier_phi_95_pred_5 = _2262;
                }
                else
                {
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    uint _2461;
                    _2455 = _2259;
                    _2456 = _2260;
                    _2457 = _2261;
                    _2458 = _2262;
                    _2459 = _2263;
                    _2460 = _2264;
                    _2461 = _2274;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    for (;;)
                    {
                        uint _2465 = uint(findLSB(_2461)) + (_2265 << 5u);
                        uint _2462 = (_2461 + 4294967295u) & _2461;
                        uint _2467 = _2465 * 48u;
                        vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2467)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 3u)).x));
                        uint _2487 = (_2465 * 48u) + 4u;
                        vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2487)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 3u)).x));
                        uint _2506 = (_2465 * 48u) + 8u;
                        vec3 _2517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x));
                        float _2521 = _2481.x - _1939;
                        float _2522 = _2481.y - _1940;
                        float _2523 = _2481.z - _1941;
                        float _2524 = dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523));
                        float _2527 = inversesqrt(_2524);
                        float _2536 = 1.0 - (_2524 * _2481.w);
                        float _3693 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _2537 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
                        float _2538 = sqrt(_2524) * _2500.w;
                        float _2541 = 1.39999997615814208984375 / (_2538 + 1.39999997615814208984375);
                        float _2542 = _2541 * _2541;
                        float _2545 = ((1.0 - _2542) * dot(vec3(0.0), vec3(_2527 * _2521, _2527 * _2522, _2527 * _2523))) + _2542;
                        float _2548 = _2538 * _2538;
                        float _2552 = ((isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))) * _2537) / ((_2548 * 0.699999988079071044921875) + 1.0);
                        float _2556 = (-0.0) - _1939;
                        float _2557 = (-0.0) - _1940;
                        float _2558 = (-0.0) - _1941;
                        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
                        float _2566 = dot(vec3(0.0), vec3(_2562 * _2556, _2562 * _2557, _2562 * _2558));
                        float _3709 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _3720 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                        float _2570 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
                        float _2574 = (0.5 / (((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) + 9.9999999392252902907785028219223e-09) + _2570)) * _2570;
                        float _3731 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                        float _2583 = (((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 3.1415927410125732421875) / ((_2548 * 2.1991131305694580078125) + 3.141590118408203125)) * _2537;
                        _2359 = (_2552 * _2500.x) + _2458;
                        _2360 = (_2552 * _2500.y) + _2459;
                        _2361 = (_2552 * _2500.z) + _2460;
                        _2356 = (_2583 * _2517.x) + _2455;
                        _2357 = (_2583 * _2517.y) + _2456;
                        _2358 = (_2583 * _2517.z) + _2457;
                        if (_2462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2455 = _2356;
                            _2456 = _2357;
                            _2457 = _2358;
                            _2458 = _2359;
                            _2459 = _2360;
                            _2460 = _2361;
                            _2461 = _2462;
                        }
                    }
                    frontier_phi_95_pred = _2357;
                    frontier_phi_95_pred_1 = _2356;
                    frontier_phi_95_pred_2 = _2358;
                    frontier_phi_95_pred_3 = _2361;
                    frontier_phi_95_pred_4 = _2360;
                    frontier_phi_95_pred_5 = _2359;
                }
                _2079 = frontier_phi_95_pred;
                _2077 = frontier_phi_95_pred_1;
                _2081 = frontier_phi_95_pred_2;
                _2087 = frontier_phi_95_pred_3;
                _2085 = frontier_phi_95_pred_4;
                _2083 = frontier_phi_95_pred_5;
                uint _2266 = _2265 + 1u;
                if (_2266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2259 = _2077;
                    _2260 = _2079;
                    _2261 = _2081;
                    _2262 = _2083;
                    _2263 = _2085;
                    _2264 = _2087;
                    _2265 = _2266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
        }
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.z;
        uint _2093 = (_2091 >> 8u) & 15u;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        if (((4294967295u << _2093) & _1985) == 0u)
        {
            _2230 = _2076;
            _2232 = _2078;
            _2234 = _2080;
            _2236 = _2082;
            _2238 = _2084;
            _2240 = _2086;
        }
        else
        {
            float _2255 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2093 < ((_2091 >> 12u) & 15u))
            {
                float _2231;
                float _2233;
                float _2235;
                float _2237;
                float _2239;
                float _2241;
                float _2438 = _2076;
                float _2439 = _2078;
                float _2440 = _2080;
                float _2441 = _2082;
                float _2442 = _2084;
                float _2443 = _2086;
                uint _2444 = _2093;
                uint _2453;
                bool _2454;
                for (;;)
                {
                    _2453 = texelFetch(g_lightClassification, int((((_1979 << 5u) + (_1965 << 9u)) + (_2444 << 2u)) >> 2u)).x;
                    _2454 = _2453 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2454)
                    {
                        frontier_phi_109_pred = _2439;
                        frontier_phi_109_pred_1 = _2438;
                        frontier_phi_109_pred_2 = _2443;
                        frontier_phi_109_pred_3 = _2442;
                        frontier_phi_109_pred_4 = _2441;
                        frontier_phi_109_pred_5 = _2440;
                    }
                    else
                    {
                        float _2618;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2631 = _2438;
                        float _2632 = _2439;
                        float _2633 = _2440;
                        float _2634 = _2441;
                        float _2635 = _2442;
                        float _2636 = _2443;
                        uint _2637 = _2453;
                        uint _2638;
                        vec4 _2663;
                        float _2664;
                        vec4 _2679;
                        vec3 _2691;
                        vec4 _2706;
                        vec4 _2721;
                        float _2767;
                        bool _2768;
                        for (;;)
                        {
                            uint _2648 = ((_2444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2637));
                            _2638 = (_2637 + 4294967295u) & _2637;
                            uint _2650 = _2648 * 40u;
                            _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            _2664 = _2663.w;
                            uint _2666 = (_2648 * 40u) + 4u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2681 = (_2648 * 40u) + 8u;
                            _2691 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2681 + 2u)).x));
                            uint _2693 = (_2648 * 40u) + 16u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2708 = (_2648 * 40u) + 20u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2723 = (_2648 * 40u) + 24u;
                            vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            uint _2742 = (_2648 * 40u) + 28u;
                            vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            _2767 = fma(_1941, _2755.z, fma(_1940, _2755.y, _2755.x * _1939)) + _2755.w;
                            _2768 = !((fma(_1941, _2736.z, fma(_1940, _2736.y, _2736.x * _1939)) + _2736.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2768)
                            {
                                float _2795 = _2663.x - _1939;
                                float _2796 = _2663.y - _1940;
                                float _2797 = _2663.z - _1941;
                                float _2798 = dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797));
                                float _2801 = inversesqrt(_2798);
                                float _2802 = _2801 * _2795;
                                float _2803 = _2801 * _2796;
                                float _2804 = _2801 * _2797;
                                float _2808 = 1.0 - (_2798 / (_2664 * _2664));
                                float _3742 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2809 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
                                float _2813 = sqrt(_2798) * _2679.w;
                                float _2815 = 1.39999997615814208984375 / (_2813 + 1.39999997615814208984375);
                                float _2816 = _2815 * _2815;
                                float _2817 = 1.0 - _2816;
                                float _2819 = (_2817 * dot(vec3(_2802, _2803, _2804), vec3(0.0))) + _2816;
                                float _2822 = _2813 * _2813;
                                float _2826 = (fma(_1941, _2706.z, fma(_1940, _2706.y, _2706.x * _1939)) + _2706.w) / _2767;
                                float _2827 = (fma(_1941, _2721.z, fma(_1940, _2721.y, _2721.x * _1939)) + _2721.w) / _2767;
                                float _2831 = 1.0 - dot(vec2(_2826, _2827), vec2(_2826, _2827));
                                float _3758 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2832 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                                float _2833 = _2832 * (((isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))) * _2809) / ((_2822 * 0.699999988079071044921875) + 1.0));
                                float _2843 = dot(vec3(0.0), vec3((-0.0) - (_1939 * _2255), (-0.0) - (_1940 * _2255), (-0.0) - (_1941 * _2255)));
                                float _3769 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                                float _2851 = (_2817 * dot(vec3(0.0), vec3(_2802, _2803, _2804))) + _2816;
                                float _3780 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2852 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
                                float _2856 = (0.5 / (((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) + 9.9999999392252902907785028219223e-09) + _2852)) * _2852;
                                float _3791 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2863 = (_2832 * _2809) * (((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 3.1415927410125732421875) / ((_2822 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2833 * _2679.y;
                                frontier_phi_115_pred_1 = _2833 * _2679.x;
                                frontier_phi_115_pred_2 = _2863 * _2691.z;
                                frontier_phi_115_pred_3 = _2863 * _2691.y;
                                frontier_phi_115_pred_4 = _2863 * _2691.x;
                                frontier_phi_115_pred_5 = _2833 * _2679.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2871 = frontier_phi_115_pred;
                            _2870 = frontier_phi_115_pred_1;
                            _2869 = frontier_phi_115_pred_2;
                            _2868 = frontier_phi_115_pred_3;
                            _2867 = frontier_phi_115_pred_4;
                            _2872 = frontier_phi_115_pred_5;
                            _2621 = _2870 + _2634;
                            _2622 = _2871 + _2635;
                            _2623 = _2872 + _2636;
                            _2618 = _2867 + _2631;
                            _2619 = _2868 + _2632;
                            _2620 = _2869 + _2633;
                            if (_2638 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2631 = _2618;
                                _2632 = _2619;
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2638;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2619;
                        frontier_phi_109_pred_1 = _2618;
                        frontier_phi_109_pred_2 = _2623;
                        frontier_phi_109_pred_3 = _2622;
                        frontier_phi_109_pred_4 = _2621;
                        frontier_phi_109_pred_5 = _2620;
                    }
                    _2233 = frontier_phi_109_pred;
                    _2231 = frontier_phi_109_pred_1;
                    _2241 = frontier_phi_109_pred_2;
                    _2239 = frontier_phi_109_pred_3;
                    _2237 = frontier_phi_109_pred_4;
                    _2235 = frontier_phi_109_pred_5;
                    uint _2445 = _2444 + 1u;
                    if (_2445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2438 = _2231;
                        _2439 = _2233;
                        _2440 = _2235;
                        _2441 = _2237;
                        _2442 = _2239;
                        _2443 = _2241;
                        _2444 = _2445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2231;
                frontier_phi_84_85_ladder_1 = _2235;
                frontier_phi_84_85_ladder_2 = _2241;
                frontier_phi_84_85_ladder_3 = _2239;
                frontier_phi_84_85_ladder_4 = _2237;
                frontier_phi_84_85_ladder_5 = _2233;
            }
            else
            {
                frontier_phi_84_85_ladder = _2076;
                frontier_phi_84_85_ladder_1 = _2080;
                frontier_phi_84_85_ladder_2 = _2086;
                frontier_phi_84_85_ladder_3 = _2084;
                frontier_phi_84_85_ladder_4 = _2082;
                frontier_phi_84_85_ladder_5 = _2078;
            }
            _2230 = frontier_phi_84_85_ladder;
            _2232 = frontier_phi_84_85_ladder_5;
            _2234 = frontier_phi_84_85_ladder_1;
            _2236 = frontier_phi_84_85_ladder_4;
            _2238 = frontier_phi_84_85_ladder_3;
            _2240 = frontier_phi_84_85_ladder_2;
        }
        float _2245 = isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0));
        _1998 = (_2245 * _2236) + _1778;
        _2000 = (_2245 * _2238) + _1779;
        _2002 = (_2245 * _2240) + _1780;
        _2004 = ((_2230 * 0.039999999105930328369140625) * _2245) + _1880;
        _2006 = ((_2232 * 0.039999999105930328369140625) * _2245) + _1881;
        _2008 = ((_2234 * 0.039999999105930328369140625) * _2245) + _1882;
    }
    else
    {
        _1998 = _1778;
        _2000 = _1779;
        _2002 = _1780;
        _2004 = _1880;
        _2006 = _1881;
        _2008 = _1882;
    }
    float _3807 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3818 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3829 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2025 = ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1998 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _759))) + ((_2004 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2026 = ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_2000 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _759))) + ((_2006 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2027 = ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_2002 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _759))) + ((_2008 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2028 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    uint _2031 = _733 + 6u;
    float _2039 = _719 / cbSceneParam._m0[86u].x;
    float _2040 = _720 / cbSceneParam._m0[86u].y;
    vec4 _2054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2056 = _2054.x;
    float _2057 = _2054.y;
    float _2058 = _2054.z;
    float _2059 = _2054.w;
    float _2139;
    float _2141;
    float _2143;
    float _2145;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2101 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2102 = _2101 / _693;
        float _2113 = _2102 * _265;
        float _2114 = _266 * _2102;
        float _2115 = (-0.0) - _2114;
        float _2116 = _2102 * _267;
        float _2118 = (cbSceneParam._m0[77u].w * _2115) / _2101;
        float _2119 = _2118 + cbSceneParam._m0[79u].w;
        float _2120 = cbSceneParam._m0[79u].w - _2114;
        float _2126 = sqrt(((_2113 * _2113) + (_2114 * _2114)) + (_2116 * _2116));
        float _2129 = (1.0 - (cbSceneParam._m0[77u].w / _2101)) * _2126;
        float _2135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2369;
        if (abs((_2115 - _2118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2369 = ((((_2119 > 0.0) ? exp2(_2135 * _2119) : (2.0 - exp2(_2137 * _2119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2129;
        }
        else
        {
            float _2288 = 1.0 / cbSceneParam._m0[80u].x;
            float _2289 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : max(_2119, _2120));
            float _2290 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : min(_2119, _2120));
            float _2299 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : min(_2289, 0.0));
            float _2300 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : min(_2290, 0.0));
            _2369 = ((abs(_2126 / _2115) * cbSceneParam._m0[80u].y) * ((((_2299 - _2300) * 2.0) - ((exp2(_2135 * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)))) - exp2(_2135 * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))))) * _2288)) - ((exp2(_2137 * _2299) - exp2(_2137 * _2300)) * _2288))) + (_2129 * cbSceneParam._m0[80u].z);
        }
        vec4 _2371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, 1.0), 0.0);
        float _2380 = exp2((_2369 * (-1.44269502162933349609375)) * (1.0 - _2371.w));
        float _2381 = log2(_2380);
        float _2397 = log2(_2059);
        _2139 = (exp2(_2397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].x)) * _2371.x) / cbSceneParam._m0[78u].x)) + _2056;
        _2141 = (exp2(_2397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].y)) * _2371.y) / cbSceneParam._m0[78u].y)) + _2057;
        _2143 = (exp2(_2397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2381 * cbSceneParam._m0[78u].z)) * _2371.z) / cbSceneParam._m0[78u].z)) + _2058;
        _2145 = _2380 * _2059;
    }
    else
    {
        _2139 = _2056;
        _2141 = _2057;
        _2143 = _2058;
        _2145 = _2059;
    }
    bool _2407;
    vec4 _2155;
    vec4 _2178;
    float _2180;
    float _2184;
    float _2185;
    float _2186;
    float _2187;
    bool _2198;
    for (;;)
    {
        _2155 = cbMatDynParam._m0[0u];
        float _2157 = roundEven(_2155.y);
        bool _2158 = _2157 == 3.0;
        float _2160 = log2(_2145);
        float _2167 = exp2(_2160 * cbSceneParam._m0[78u].x) * _2028;
        float _2168 = exp2(_2160 * cbSceneParam._m0[78u].y) * _2029;
        float _2169 = exp2(_2160 * cbSceneParam._m0[78u].z) * _2030;
        float _2176 = _707 + (-0.5);
        _2178 = cbMtdParam._m0[1u];
        _2180 = _2178.y * _2176;
        float _2183 = (_2157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2184 = _2183 * (_2158 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2139)));
        _2185 = _2183 * (_2158 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2141)));
        _2186 = _2183 * (_2158 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2143)));
        _2187 = _2176 * 0.999000012874603271484375;
        _2198 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2198)
        {
            if ((cbInstanceData._m0[_733 + 7u].x + _2187) < 0.5)
            {
                _2407 = true;
                break;
            }
        }
        uint _2323 = _735 + uint(_2155.w);
        if ((cbInstanceData._m0[_2323].w < 1.0) && ((cbInstanceData._m0[_2323].w + _2187) < 0.5))
        {
            _2407 = true;
            break;
        }
        if ((_2180 + 1.0) < _2178.x)
        {
            _2407 = true;
            break;
        }
        _2407 = false;
        break;
    }
    float _2588;
    if (_2407)
    {
        discard_state = true;
        _2588 = 0.0;
    }
    else
    {
        _2588 = cbInstanceData._m0[_2031].w;
    }
    SV_Target.x = _2184;
    SV_Target.y = _2185;
    SV_Target.z = _2186;
    SV_Target.w = _2588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2031].w;
    discard_exit();
}


