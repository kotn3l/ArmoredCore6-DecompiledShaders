#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _443;
float _3234;
float _3235;
float _3236;
float _3237;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _356 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _371 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _378 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _390 = cbMtdParam._m0[22u].z + _265;
    float _391 = cbMtdParam._m0[22u].w + _266;
    float _392 = cbMtdParam._m0[23u].x + _267;
    float _406 = (-0.0) - dot(vec3(_390, _391, _392), vec3(_371 * _194, _371 * _195, _371 * _196));
    float _407 = (-0.0) - dot(vec3(_390, _391, _392), vec3(_378 * _208, _378 * _209, _378 * _210));
    float _408 = (-0.0) - dot(vec3(_390, _391, _392), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _412 = inversesqrt(dot(vec3(_406, _407, _408), vec3(_406, _407, _408)));
    float _413 = _412 * _408;
    float _418 = ((cbMtdParam._m0[19u].y * _406) * _412) + (((_356.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _419 = ((cbMtdParam._m0[19u].z * _407) * _412) + (((_356.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _422 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _423 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _441;
    float _444;
    float _446;
    if (_418 > 0.0)
    {
        float _427 = (1.0 - _422) / _418;
        _441 = _427;
        _444 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_427 * _413)) * 0.16666667163372039794921875;
        _446 = (fract((_427 * _419) + _423) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_418 < 0.0)
        {
            float _442 = ((-0.0) - _422) / _418;
            frontier_phi_3_2_ladder = _442;
            frontier_phi_3_2_ladder_1 = (fract((_442 * _419) + _423) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_442 * _413) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _443;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _441 = frontier_phi_3_2_ladder;
        _444 = frontier_phi_3_2_ladder_2;
        _446 = frontier_phi_3_2_ladder_1;
    }
    float _472;
    float _474;
    float _476;
    if (_419 > 0.0)
    {
        float _459 = (1.0 - _423) / _419;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_459 < _441)
        {
            frontier_phi_8_5_ladder = (fract(_459 * _413) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_459 * _418) + _422) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _459;
        }
        else
        {
            frontier_phi_8_5_ladder = _446;
            frontier_phi_8_5_ladder_1 = _444;
            frontier_phi_8_5_ladder_2 = _441;
        }
        _472 = frontier_phi_8_5_ladder_2;
        _474 = frontier_phi_8_5_ladder_1;
        _476 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_419 < 0.0)
        {
            float _473 = ((-0.0) - _423) / _419;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_473 < _441)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_473 * _413) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_473 * _418) + _422) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _473;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _446;
                frontier_phi_8_6_ladder_9_ladder_1 = _444;
                frontier_phi_8_6_ladder_9_ladder_2 = _441;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _446;
            frontier_phi_8_6_ladder_1 = _444;
            frontier_phi_8_6_ladder_2 = _441;
        }
        _472 = frontier_phi_8_6_ladder_2;
        _474 = frontier_phi_8_6_ladder_1;
        _476 = frontier_phi_8_6_ladder;
    }
    float _480 = (_413 > 0.0) ? (cbMtdParam._m0[16u].y / _413) : 5000.0;
    float _493;
    float _494;
    if (_480 < _472)
    {
        _493 = ((_422 + cbMtdParam._m0[16u].z) + (_480 * _418)) * 0.16666667163372039794921875;
        _494 = (((_480 * _419) + _423) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _493 = _474;
        _494 = _476;
    }
    vec4 _496 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_493, _494));
    vec4 _512 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _516 = _512.z;
    float _519 = (_512.x * 2.0) + (-1.0);
    float _520 = (_512.y * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3246 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))));
    float _529 = fma(_526, _201, fma(_520, _208, _519 * _194));
    float _532 = fma(_526, _202, fma(_520, _209, _519 * _195));
    float _535 = fma(_526, _203, fma(_520, _210, _519 * _196));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    float _540 = _539 * _529;
    float _541 = _539 * _532;
    float _542 = _539 * _535;
    float _3257 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _543 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3279 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3290 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _567 = _265 * _566;
    float _568 = _266 * _566;
    float _569 = _267 * _566;
    vec4 _574 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _576 = _574.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _739 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _745 = (cbMatDynParam._m0[5u].x * _739) + cbMatDynParam._m0[5u].y;
        float _3301 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _750 = (cbMatDynParam._m0[5u].z * _739) + cbMatDynParam._m0[5u].w;
        float _3312 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) - _746)) + _746) < ((_576 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _594 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _595 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _615 = fma(_542, cbSceneParam._m0[5u].z, fma(_541, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _540));
    float _618 = fma(_542, cbSceneParam._m0[6u].z, fma(_541, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _540));
    float _621 = fma(_542, cbSceneParam._m0[7u].z, fma(_541, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _540));
    uint _634 = uint(roundEven(NORMAL.w)) * 13u;
    uint _635 = _634 + 9u;
    uint _636 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _642 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_636].x;
    float _643 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_636].y;
    float _644 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_636].z;
    float _3323 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _645 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    vec4 _656 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _594, cbSceneParam._m0[86u].y * _595));
    float _659 = _656.x * TEXCOORD.z;
    float _660 = dot(vec3(_540, _541, _542), vec3(_567, _568, _569));
    float _663 = _660 * 2.0;
    float _667 = (_663 * _540) - _567;
    float _668 = (_663 * _541) - _568;
    float _669 = (_663 * _542) - _569;
    float _673 = abs(dot(vec3(_567, _568, _569), vec3(_540, _541, _542)));
    float _3356 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _675 = sqrt(_543);
    float _688 = exp2((_675 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_675 * 3.0));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _784 = fma(_728, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720));
        float _788 = fma(_728, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720));
        float _792 = fma(_728, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720));
        float _816 = _720 + _540;
        float _817 = _724 + _541;
        float _818 = _728 + _542;
        float _828 = fma(_818, cbModelParam._m0[26u].z, fma(_817, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816)) - _784;
        float _829 = fma(_818, cbModelParam._m0[27u].z, fma(_817, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816)) - _788;
        float _830 = fma(_818, cbModelParam._m0[28u].z, fma(_817, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816)) - _792;
        float _834 = inversesqrt(dot(vec3(_828, _829, _830), vec3(_828, _829, _830)));
        float _847 = ((_834 * _828) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_784 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_834 * _829) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_788 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_834 * _830) / cbModelParam._m0[34u].z) + ((((((_792 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _848, _849), 0.0);
        float _886 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_852.x + (-0.5));
        float _888 = _886 * (_852.y + (-0.5));
        float _889 = _886 * (_852.z + (-0.5));
        float _896 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_859.x + (-0.5));
        float _898 = _896 * (_859.y + (-0.5));
        float _899 = _896 * (_859.z + (-0.5));
        float _906 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_866.x + (-0.5));
        float _908 = _906 * (_866.y + (-0.5));
        float _909 = _906 * (_866.z + (-0.5));
        float _916 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_873.x + (-0.5));
        float _918 = _916 * (_873.y + (-0.5));
        float _919 = _916 * (_873.z + (-0.5));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = _887 * 0.5;
        float _924 = _897 * 0.5;
        float _925 = _907 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _940 = (dot(vec3(_540, _541, _542), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _950 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3404 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_952 + 1.0))) + _957) * _920;
        float _967 = _888 * 0.5;
        float _968 = _898 * 0.5;
        float _969 = _908 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_540, _541, _542), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3437 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_994 + 1.0))) + _999) * _921;
        float _1009 = _889 * 0.5;
        float _1010 = _899 * 0.5;
        float _1011 = _909 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_540, _541, _542), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3470 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1036 + 1.0))) + _1041) * _922;
        _1058 = _889;
        _1059 = _888;
        _1060 = _887;
        _1061 = _899;
        _1062 = _898;
        _1063 = _897;
        _1064 = _909;
        _1065 = _908;
        _1066 = _907;
        _1067 = _922;
        _1068 = _921;
        _1069 = _920;
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _443;
        _1059 = _443;
        _1060 = _443;
        _1061 = _443;
        _1062 = _443;
        _1063 = _443;
        _1064 = _443;
        _1065 = _443;
        _1066 = _443;
        _1067 = _443;
        _1068 = _443;
        _1069 = _443;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_728, cbModelParam._m0[30u].z, fma(_724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _720));
        float _1105 = fma(_728, cbModelParam._m0[31u].z, fma(_724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _720));
        float _1109 = fma(_728, cbModelParam._m0[32u].z, fma(_724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _720));
        float _1132 = _720 + _540;
        float _1133 = _724 + _541;
        float _1134 = _728 + _542;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_540, _541, _542), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3533 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_540, _541, _542), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3566 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_540, _541, _542), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3599 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _443;
        _1371 = _443;
        _1372 = _443;
        _1373 = _443;
        _1374 = _443;
        _1375 = _443;
        _1376 = _443;
        _1377 = _443;
        _1378 = _443;
        _1379 = _443;
        _1380 = _443;
        _1381 = _443;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1072)) + _1072;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _667 * 0.5;
    float _1439 = _668 * 0.5;
    float _1440 = _669 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _543);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_728, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_728, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_728, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_669, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667));
        float _1570 = fma(_669, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667));
        float _1573 = fma(_669, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1601 = frontier_phi_29_27_ladder;
        }
        float _1972;
        if (_1570 > 0.0)
        {
            _1972 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1972 = frontier_phi_38_34_ladder;
        }
        float _2302;
        if (_1573 > 0.0)
        {
            _2302 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2302 = frontier_phi_52_45_ladder;
        }
        float _2304 = isnan(_1972) ? _1601 : (isnan(_1601) ? _1972 : min(_1601, _1972));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1567) + _1556;
        float _2310 = (_2305 * _1570) + _1560;
        float _2311 = (_2305 * _1573) + _1564;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_28_52_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_28_52_ladder_2;
        _1591 = frontier_phi_28_52_ladder_1;
        _1593 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_667, _668, _669), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _543);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_728, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_728, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_728, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_669, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667));
        float _1666 = fma(_669, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667));
        float _1669 = fma(_669, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667));
        float _1977;
        if (_1663 > 0.0)
        {
            _1977 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1977 = frontier_phi_40_36_ladder;
        }
        float _2328;
        if (_1666 > 0.0)
        {
            _2328 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2328 = frontier_phi_54_47_ladder;
        }
        float _2518;
        if (_1669 > 0.0)
        {
            _2518 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2518 = frontier_phi_72_65_ladder;
        }
        float _2520 = isnan(_2328) ? _1977 : (isnan(_1977) ? _2328 : min(_1977, _2328));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1663) + _1652;
        float _2526 = (_2521 * _1666) + _1656;
        float _2527 = (_2521 * _1669) + _1660;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_37_72_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_37_72_ladder_2;
        _1690 = frontier_phi_37_72_ladder_1;
        _1692 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_667, _668, _669), _1598);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1704 = ((((1.0 - _688) * ((_675 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_688 * _675)) * _659;
    float _1705 = _1704 * ((cbModelParam._m0[1u].w * (_1688 - _1589)) + _1589);
    float _1706 = _1704 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1707 = _1704 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1710 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    vec4 _1724 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_594, _595));
    float _1726 = _1724.w;
    float _1738 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1726);
    float _1739 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1726);
    float _1740 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1726);
    uvec4 _1744 = floatBitsToUint(cbInstanceData._m0[_634 + 5u]);
    uint _1746 = _1744.x * 14u;
    uint _1747 = _1746 + 13u;
    float _1752 = _659 + (-1.0);
    float _1755 = (cbLight._m0[_1747].x * _1752) + 1.0;
    float _1756 = (cbLight._m0[_1747].y * _1752) + 1.0;
    uint _1757 = _1746 + 5u;
    float _1763 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
    uint _1767 = _1746 + 4u;
    float _1776 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1780 = _1746 | 1u;
    float _1791 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_540, _541, _542));
    float _1794 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_540, _541, _542));
    float _3735 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _3746 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1799 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1801 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1808 = ((cbLight._m0[_1757].x * _1763) * _1801) + (((cbLight._m0[_1767].x * _1738) * _1776) * _1799);
    float _1809 = ((_1763 * cbLight._m0[_1757].y) * _1801) + (((cbLight._m0[_1767].y * _1739) * _1776) * _1799);
    float _1810 = ((_1763 * cbLight._m0[_1757].z) * _1801) + (((cbLight._m0[_1767].z * _1740) * _1776) * _1799);
    uint _1812 = _1746 + 8u;
    float _1825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _543) * 0.949999988079071044921875);
    float _1826 = _1825 * _1825;
    float _1827 = cbLight._m0[_1746].x + _567;
    float _1828 = cbLight._m0[_1746].y + _568;
    float _1829 = cbLight._m0[_1746].z + _569;
    float _1833 = inversesqrt(dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829)));
    float _1834 = _1833 * _1827;
    float _1835 = _1833 * _1828;
    float _1836 = _1833 * _1829;
    float _1837 = dot(vec3(_540, _541, _542), vec3(cbLight._m0[_1746].xyz));
    float _3757 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _1841 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _1842 = dot(vec3(_540, _541, _542), vec3(_1834, _1835, _1836));
    float _3779 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1846 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1834, _1835, _1836));
    float _3790 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1850 = _1826 * _1826;
    float _1854 = ((_1845 * _1845) * (_1850 + (-1.0))) + 1.0;
    float _1865 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1866 = 1.0 - _1826;
    float _1877 = (0.5 / (((_1841 * ((_1840 * _1866) + _1826)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1866) + _1826) * _1840))) * _1840;
    float _3801 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1850 / ((_1854 * _1854) * 3.141590118408203125));
    uint _1893 = _1746 + 9u;
    float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _543) * 0.949999988079071044921875);
    float _1905 = _1904 * _1904;
    float _1906 = cbLight._m0[_1780].x + _567;
    float _1907 = cbLight._m0[_1780].y + _568;
    float _1908 = cbLight._m0[_1780].z + _569;
    float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
    float _1913 = _1912 * _1906;
    float _1914 = _1912 * _1907;
    float _1915 = _1912 * _1908;
    float _1916 = dot(vec3(_540, _541, _542), vec3(cbLight._m0[_1780].xyz));
    float _3812 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1920 = dot(vec3(_540, _541, _542), vec3(_1913, _1914, _1915));
    float _3823 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1913, _1914, _1915));
    float _3834 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1905 * _1905;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1941 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1942 = 1.0 - _1905;
    float _1952 = (0.5 / (((_1841 * ((_1919 * _1942) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1841 * _1942) + _1905) * _1919))) * _1919;
    float _3845 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    float _1964 = (((_1941 * cbLight._m0[_1893].x) * _1954) * _1763) + ((((cbLight._m0[_1812].x * _1738) * _1865) * _1879) * _1776);
    float _1965 = (((_1941 * cbLight._m0[_1893].y) * _1954) * _1763) + ((((cbLight._m0[_1812].y * _1739) * _1865) * _1879) * _1776);
    float _1966 = (((_1941 * cbLight._m0[_1893].z) * _1954) * _1763) + ((((cbLight._m0[_1812].z * _1740) * _1865) * _1879) * _1776);
    float _2081;
    float _2083;
    float _2085;
    float _2087;
    float _2089;
    float _2091;
    if (_1744.y == 0u)
    {
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2021;
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2021;
        float _2024 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2021;
        uvec4 _2036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2037 = _2036.x;
        uint _2048 = uint((float(_2036.y) * floor(float(uint(cbSceneParam._m0[85u].y * _595) / _2037))) + floor(float(uint(cbSceneParam._m0[85u].x * _594) / _2037)));
        float _2058 = (log2(_2024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2059 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        uint _2062 = uint(isnan(14.0) ? _2059 : (isnan(_2059) ? 14.0 : min(_2059, 14.0)));
        uvec4 _2067 = texelFetch(g_lightClusterGridBuffer, int(((_2062 << 2u) + (_2048 << 6u)) >> 2u));
        uint _2068 = _2067.x;
        uint _2069 = _2036.z;
        float _2181;
        float _2183;
        float _2185;
        float _2187;
        float _2189;
        float _2191;
        if (((((1u << ((_2069 >> 4u) & 15u)) + 4294967295u) & _2068) == 0u) || ((_2069 & 240u) == 0u))
        {
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
            _2187 = 0.0;
            _2189 = 0.0;
            _2191 = 0.0;
        }
        else
        {
            float _2182;
            float _2184;
            float _2186;
            float _2188;
            float _2190;
            float _2192;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            uint _2371 = 0u;
            uint _2380;
            bool _2381;
            for (;;)
            {
                _2380 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2371 << 2u)) >> 2u)).x;
                _2381 = _2380 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2381)
                {
                    frontier_phi_67_pred = _2368;
                    frontier_phi_67_pred_1 = _2367;
                    frontier_phi_67_pred_2 = _2366;
                    frontier_phi_67_pred_3 = _2365;
                    frontier_phi_67_pred_4 = _2369;
                    frontier_phi_67_pred_5 = _2370;
                }
                else
                {
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    uint _2567;
                    _2561 = _2365;
                    _2562 = _2366;
                    _2563 = _2367;
                    _2564 = _2368;
                    _2565 = _2369;
                    _2566 = _2370;
                    _2567 = _2380;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    for (;;)
                    {
                        uint _2571 = uint(findLSB(_2567)) + (_2371 << 5u);
                        uint _2568 = (_2567 + 4294967295u) & _2567;
                        uint _2573 = _2571 * 48u;
                        vec4 _2587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2573)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 3u)).x));
                        uint _2593 = (_2571 * 48u) + 4u;
                        vec4 _2606 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2612 = (_2571 * 48u) + 8u;
                        vec3 _2623 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x));
                        float _2627 = _2587.x - _2022;
                        float _2628 = _2587.y - _2023;
                        float _2629 = _2587.z - _2024;
                        float _2630 = dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629));
                        float _2633 = inversesqrt(_2630);
                        float _2634 = _2633 * _2627;
                        float _2635 = _2633 * _2628;
                        float _2636 = _2633 * _2629;
                        float _2637 = dot(vec3(_615, _618, _621), vec3(_2634, _2635, _2636));
                        float _2642 = 1.0 - (_2630 * _2587.w);
                        float _3866 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2643 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2644 = sqrt(_2630) * _2606.w;
                        float _2647 = 1.39999997615814208984375 / (_2644 + 1.39999997615814208984375);
                        float _2648 = _2647 * _2647;
                        float _2651 = ((1.0 - _2648) * _2637) + _2648;
                        float _2654 = _2644 * _2644;
                        float _2658 = ((isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))) * _2643) / ((_2654 * 0.699999988079071044921875) + 1.0);
                        float _2662 = (-0.0) - _2022;
                        float _2663 = (-0.0) - _2023;
                        float _2664 = (-0.0) - _2024;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2679 = exp2(log2(1.0 / ((_2654 * 3.5) + 5.0)) * 0.25);
                        float _2680 = 1.0 - _675;
                        float _2687 = sqrt(1.0 - ((1.0 - (_2680 * _2680)) * (1.0 - (_2679 * _2679))));
                        float _2688 = _2687 * _2687;
                        float _2689 = _2688 * _2688;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2692 = _2671 + _2636;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2700 = dot(vec3(_615, _618, _621), vec3(_2669, _2670, _2671));
                        float _3882 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2704 = dot(vec3(_615, _618, _621), vec3(_2696 * _2690, _2696 * _2691, _2696 * _2692));
                        float _3893 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2707 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                        float _2711 = ((_2707 * _2707) * (_2689 + (-1.0))) + 1.0;
                        float _2712 = _2647 * _2688;
                        float _2713 = _2712 * _2712;
                        float _2716 = ((1.0 - _2713) * _2637) + _2713;
                        float _3904 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                        float _2718 = 1.0 - _2688;
                        float _2728 = (0.5 / (((_2717 * ((_2703 * _2718) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2718) + _2688) * _2703))) * _2717;
                        float _3915 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2739 = (((_2689 * 3.1415927410125732421875) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) / ((_2711 * _2711) * ((_2654 * 2.1991131305694580078125) + 3.141590118408203125))) * _2643;
                        _2465 = (_2658 * _2606.x) + _2564;
                        _2466 = (_2658 * _2606.y) + _2565;
                        _2467 = (_2658 * _2606.z) + _2566;
                        _2462 = (_2739 * _2623.x) + _2561;
                        _2463 = (_2739 * _2623.y) + _2562;
                        _2464 = (_2739 * _2623.z) + _2563;
                        if (_2568 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2561 = _2462;
                            _2562 = _2463;
                            _2563 = _2464;
                            _2564 = _2465;
                            _2565 = _2466;
                            _2566 = _2467;
                            _2567 = _2568;
                        }
                    }
                    frontier_phi_67_pred = _2465;
                    frontier_phi_67_pred_1 = _2464;
                    frontier_phi_67_pred_2 = _2463;
                    frontier_phi_67_pred_3 = _2462;
                    frontier_phi_67_pred_4 = _2466;
                    frontier_phi_67_pred_5 = _2467;
                }
                _2188 = frontier_phi_67_pred;
                _2186 = frontier_phi_67_pred_1;
                _2184 = frontier_phi_67_pred_2;
                _2182 = frontier_phi_67_pred_3;
                _2190 = frontier_phi_67_pred_4;
                _2192 = frontier_phi_67_pred_5;
                uint _2372 = _2371 + 1u;
                if (_2372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2365 = _2182;
                    _2366 = _2184;
                    _2367 = _2186;
                    _2368 = _2188;
                    _2369 = _2190;
                    _2370 = _2192;
                    _2371 = _2372;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
            _2187 = _2188;
            _2189 = _2190;
            _2191 = _2192;
        }
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.z;
        uint _2198 = (_2196 >> 8u) & 15u;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((4294967295u << _2198) & _2068) == 0u)
        {
            _2333 = _2181;
            _2335 = _2183;
            _2337 = _2185;
            _2339 = _2187;
            _2341 = _2189;
            _2343 = _2191;
        }
        else
        {
            float _2358 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
            float _2359 = _2358 * _2022;
            float _2360 = _2358 * _2023;
            float _2361 = _2358 * _2024;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2198 < ((_2196 >> 12u) & 15u))
            {
                float _2334;
                float _2336;
                float _2338;
                float _2340;
                float _2342;
                float _2344;
                float _2544 = _2181;
                float _2545 = _2183;
                float _2546 = _2185;
                float _2547 = _2187;
                float _2548 = _2189;
                float _2549 = _2191;
                uint _2550 = _2198;
                uint _2559;
                bool _2560;
                for (;;)
                {
                    _2559 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                    _2560 = _2559 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2560)
                    {
                        frontier_phi_81_pred = _2547;
                        frontier_phi_81_pred_1 = _2546;
                        frontier_phi_81_pred_2 = _2545;
                        frontier_phi_81_pred_3 = _2544;
                        frontier_phi_81_pred_4 = _2549;
                        frontier_phi_81_pred_5 = _2548;
                    }
                    else
                    {
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _2787 = _2544;
                        float _2788 = _2545;
                        float _2789 = _2546;
                        float _2790 = _2547;
                        float _2791 = _2548;
                        float _2792 = _2549;
                        uint _2793 = _2559;
                        uint _2794;
                        vec4 _2819;
                        float _2820;
                        vec4 _2835;
                        vec3 _2847;
                        vec4 _2862;
                        vec4 _2877;
                        float _2923;
                        bool _2924;
                        for (;;)
                        {
                            uint _2804 = ((_2550 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2793));
                            _2794 = (_2793 + 4294967295u) & _2793;
                            uint _2806 = _2804 * 40u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2820 = _2819.w;
                            uint _2822 = (_2804 * 40u) + 4u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2837 = (_2804 * 40u) + 8u;
                            _2847 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x));
                            uint _2849 = (_2804 * 40u) + 16u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2864 = (_2804 * 40u) + 20u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2879 = (_2804 * 40u) + 24u;
                            vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2898 = (_2804 * 40u) + 28u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2923 = fma(_2024, _2911.z, fma(_2023, _2911.y, _2911.x * _2022)) + _2911.w;
                            _2924 = !((fma(_2024, _2892.z, fma(_2023, _2892.y, _2892.x * _2022)) + _2892.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2924)
                            {
                                float _2951 = _2819.x - _2022;
                                float _2952 = _2819.y - _2023;
                                float _2953 = _2819.z - _2024;
                                float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                                float _2957 = inversesqrt(_2954);
                                float _2958 = _2957 * _2951;
                                float _2959 = _2957 * _2952;
                                float _2960 = _2957 * _2953;
                                float _2964 = 1.0 - (_2954 / (_2820 * _2820));
                                float _3926 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2965 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2969 = sqrt(_2954) * _2835.w;
                                float _2971 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                                float _2972 = _2971 * _2971;
                                float _2975 = ((1.0 - _2972) * dot(vec3(_2958, _2959, _2960), vec3(_615, _618, _621))) + _2972;
                                float _2978 = _2969 * _2969;
                                float _2982 = (fma(_2024, _2862.z, fma(_2023, _2862.y, _2862.x * _2022)) + _2862.w) / _2923;
                                float _2983 = (fma(_2024, _2877.z, fma(_2023, _2877.y, _2877.x * _2022)) + _2877.w) / _2923;
                                float _2987 = 1.0 - dot(vec2(_2982, _2983), vec2(_2982, _2983));
                                float _3942 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2989 = _2988 * (((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2965) / ((_2978 * 0.699999988079071044921875) + 1.0));
                                float _3001 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                                float _3002 = 1.0 - _675;
                                float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                                float _3010 = _3009 * _3009;
                                float _3011 = _3010 * _3010;
                                float _3012 = _2958 - _2359;
                                float _3013 = _2959 - _2360;
                                float _3014 = _2960 - _2361;
                                float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                                float _3022 = dot(vec3(_615, _618, _621), vec3((-0.0) - _2359, (-0.0) - _2360, (-0.0) - _2361));
                                float _3953 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _3026 = dot(vec3(_615, _618, _621), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                                float _3964 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3029 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                                float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                                float _3034 = _2971 * _3010;
                                float _3035 = _3034 * _3034;
                                float _3041 = ((1.0 - _3035) * dot(vec3(_615, _618, _621), vec3(_2958, _2959, _2960))) + _3035;
                                float _3975 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _3043 = 1.0 - _3010;
                                float _3053 = (0.5 / (((_3042 * ((_3025 * _3043) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3010) * _3025))) * _3042;
                                float _3986 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3063 = (_2988 * _2965) * (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_3033 * _3033) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2989 * _2835.x;
                                frontier_phi_87_pred_1 = _3063 * _2847.z;
                                frontier_phi_87_pred_2 = _3063 * _2847.y;
                                frontier_phi_87_pred_3 = _3063 * _2847.x;
                                frontier_phi_87_pred_4 = _2989 * _2835.z;
                                frontier_phi_87_pred_5 = _2989 * _2835.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3070 = frontier_phi_87_pred;
                            _3069 = frontier_phi_87_pred_1;
                            _3068 = frontier_phi_87_pred_2;
                            _3067 = frontier_phi_87_pred_3;
                            _3072 = frontier_phi_87_pred_4;
                            _3071 = frontier_phi_87_pred_5;
                            _2777 = _3070 + _2790;
                            _2778 = _3071 + _2791;
                            _2779 = _3072 + _2792;
                            _2774 = _3067 + _2787;
                            _2775 = _3068 + _2788;
                            _2776 = _3069 + _2789;
                            if (_2794 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2794;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2777;
                        frontier_phi_81_pred_1 = _2776;
                        frontier_phi_81_pred_2 = _2775;
                        frontier_phi_81_pred_3 = _2774;
                        frontier_phi_81_pred_4 = _2779;
                        frontier_phi_81_pred_5 = _2778;
                    }
                    _2340 = frontier_phi_81_pred;
                    _2338 = frontier_phi_81_pred_1;
                    _2336 = frontier_phi_81_pred_2;
                    _2334 = frontier_phi_81_pred_3;
                    _2344 = frontier_phi_81_pred_4;
                    _2342 = frontier_phi_81_pred_5;
                    uint _2551 = _2550 + 1u;
                    if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2544 = _2334;
                        _2545 = _2336;
                        _2546 = _2338;
                        _2547 = _2340;
                        _2548 = _2342;
                        _2549 = _2344;
                        _2550 = _2551;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2344;
                frontier_phi_56_57_ladder_1 = _2342;
                frontier_phi_56_57_ladder_2 = _2340;
                frontier_phi_56_57_ladder_3 = _2336;
                frontier_phi_56_57_ladder_4 = _2334;
                frontier_phi_56_57_ladder_5 = _2338;
            }
            else
            {
                frontier_phi_56_57_ladder = _2191;
                frontier_phi_56_57_ladder_1 = _2189;
                frontier_phi_56_57_ladder_2 = _2187;
                frontier_phi_56_57_ladder_3 = _2183;
                frontier_phi_56_57_ladder_4 = _2181;
                frontier_phi_56_57_ladder_5 = _2185;
            }
            _2333 = frontier_phi_56_57_ladder_4;
            _2335 = frontier_phi_56_57_ladder_3;
            _2337 = frontier_phi_56_57_ladder_5;
            _2339 = frontier_phi_56_57_ladder_2;
            _2341 = frontier_phi_56_57_ladder_1;
            _2343 = frontier_phi_56_57_ladder;
        }
        float _2348 = isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0));
        _2081 = (_2348 * _2339) + _1808;
        _2083 = (_2348 * _2341) + _1809;
        _2085 = (_2348 * _2343) + _1810;
        _2087 = ((_2333 * 0.039999999105930328369140625) * _2348) + _1964;
        _2089 = ((_2335 * 0.039999999105930328369140625) * _2348) + _1965;
        _2091 = ((_2337 * 0.039999999105930328369140625) * _2348) + _1966;
    }
    else
    {
        _2081 = _1808;
        _2083 = _1809;
        _2085 = _1810;
        _2087 = _1964;
        _2089 = _1965;
        _2091 = _1966;
    }
    uint _2097 = _635 + uint(cbMatDynParam._m0[0u].w);
    float _4002 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4013 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4024 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2128 = (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2081 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _659))) + ((_2087 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _283) * _496.x) * cbInstanceData._m0[_2097].x);
    float _2130 = ((((cbMtdParam._m0[13u].y * _283) * _496.y) * cbInstanceData._m0[_2097].y) + ((_2089 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2083 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _659)));
    float _2132 = ((((cbMtdParam._m0[13u].z * _283) * _496.z) * cbInstanceData._m0[_2097].z) + ((_2091 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2085 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _659)));
    float _2133 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2134 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    uint _2136 = _634 + 6u;
    float _2144 = _594 / cbSceneParam._m0[86u].x;
    float _2145 = _595 / cbSceneParam._m0[86u].y;
    vec4 _2159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2161 = _2159.x;
    float _2162 = _2159.y;
    float _2163 = _2159.z;
    float _2164 = _2159.w;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2206 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2207 = _2206 / _562;
        float _2218 = _2207 * _265;
        float _2219 = _266 * _2207;
        float _2220 = (-0.0) - _2219;
        float _2221 = _2207 * _267;
        float _2223 = (cbSceneParam._m0[77u].w * _2220) / _2206;
        float _2224 = _2223 + cbSceneParam._m0[79u].w;
        float _2225 = cbSceneParam._m0[79u].w - _2219;
        float _2231 = sqrt(((_2218 * _2218) + (_2219 * _2219)) + (_2221 * _2221));
        float _2234 = (1.0 - (cbSceneParam._m0[77u].w / _2206)) * _2231;
        float _2240 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2242 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2475;
        if (abs((_2220 - _2223) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2475 = ((((_2224 > 0.0) ? exp2(_2240 * _2224) : (2.0 - exp2(_2242 * _2224))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2234;
        }
        else
        {
            float _2394 = 1.0 / cbSceneParam._m0[80u].x;
            float _2395 = isnan(_2225) ? _2224 : (isnan(_2224) ? _2225 : max(_2224, _2225));
            float _2396 = isnan(_2225) ? _2224 : (isnan(_2224) ? _2225 : min(_2224, _2225));
            float _2405 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : min(_2395, 0.0));
            float _2406 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : min(_2396, 0.0));
            _2475 = ((abs(_2231 / _2220) * cbSceneParam._m0[80u].y) * ((((_2405 - _2406) * 2.0) - ((exp2(_2240 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)))) - exp2(_2240 * (isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))))) * _2394)) - ((exp2(_2242 * _2405) - exp2(_2242 * _2406)) * _2394))) + (_2234 * cbSceneParam._m0[80u].z);
        }
        vec4 _2477 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, 1.0), 0.0);
        float _2486 = exp2((_2475 * (-1.44269502162933349609375)) * (1.0 - _2477.w));
        float _2487 = log2(_2486);
        float _2503 = log2(_2164);
        _2244 = (exp2(_2503 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].x)) * _2477.x) / cbSceneParam._m0[78u].x)) + _2161;
        _2246 = (exp2(_2503 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].y)) * _2477.y) / cbSceneParam._m0[78u].y)) + _2162;
        _2248 = (exp2(_2503 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2487 * cbSceneParam._m0[78u].z)) * _2477.z) / cbSceneParam._m0[78u].z)) + _2163;
        _2250 = _2486 * _2164;
    }
    else
    {
        _2244 = _2161;
        _2246 = _2162;
        _2248 = _2163;
        _2250 = _2164;
    }
    bool _2513;
    vec4 _2260;
    vec4 _2282;
    float _2284;
    float _2288;
    float _2289;
    float _2290;
    float _2291;
    bool _2301;
    for (;;)
    {
        _2260 = cbMatDynParam._m0[0u];
        float _2262 = roundEven(_2260.y);
        bool _2263 = _2262 == 3.0;
        float _2264 = log2(_2250);
        float _2271 = exp2(_2264 * cbSceneParam._m0[78u].x) * _2133;
        float _2272 = exp2(_2264 * cbSceneParam._m0[78u].y) * _2134;
        float _2273 = exp2(_2264 * cbSceneParam._m0[78u].z) * _2135;
        float _2280 = _576 + (-0.5);
        _2282 = cbMtdParam._m0[1u];
        _2284 = _2282.y * _2280;
        float _2287 = (_2262 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2288 = _2287 * (_2263 ? _2271 : (_2271 + (cbSceneParam._m0[72u].w * _2244)));
        _2289 = _2287 * (_2263 ? _2272 : (_2272 + (cbSceneParam._m0[72u].w * _2246)));
        _2290 = _2287 * (_2263 ? _2273 : (_2273 + (cbSceneParam._m0[72u].w * _2248)));
        _2291 = _2280 * 0.999000012874603271484375;
        _2301 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2301)
        {
            if ((cbInstanceData._m0[_634 + 7u].x + _2291) < 0.5)
            {
                _2513 = true;
                break;
            }
        }
        uint _2429 = _635 + uint(_2260.w);
        if ((cbInstanceData._m0[_2429].w < 1.0) && ((cbInstanceData._m0[_2429].w + _2291) < 0.5))
        {
            _2513 = true;
            break;
        }
        if ((_2284 + 1.0) < _2282.x)
        {
            _2513 = true;
            break;
        }
        _2513 = false;
        break;
    }
    float _2744;
    if (_2513)
    {
        discard_state = true;
        _2744 = 0.0;
    }
    else
    {
        _2744 = cbInstanceData._m0[_2136].w;
    }
    SV_Target.x = _2288;
    SV_Target.y = _2289;
    SV_Target.z = _2290;
    SV_Target.w = _2744;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2136].w;
    discard_exit();
}


