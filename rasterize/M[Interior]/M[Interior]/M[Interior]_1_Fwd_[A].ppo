#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _666;
uint _1840;
uint _1841;
uint _1842;
uint _2086;
uint _2087;
uint _2088;
float _2311;
float _2312;
float _2313;
float _2314;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = cbMtdParam._m0[21u].w + _254;
    float _314 = cbMtdParam._m0[22u].x + _255;
    float _315 = cbMtdParam._m0[22u].y + _256;
    float _332 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _333 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _334 = (-0.0) - dot(vec3(_313, _314, _315), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _341 = _338 * _334;
    float _344 = ((_338 * _332) + (((_278.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _345 = ((_338 * _333) + (((_278.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _346 = fract(TEXCOORD.x);
    float _347 = fract(TEXCOORD.y);
    float _353;
    if (_344 > 0.0)
    {
        _353 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _353 = frontier_phi_3_2_ladder;
    }
    float _361;
    if (_345 > 0.0)
    {
        _361 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _361 = frontier_phi_7_6_ladder;
    }
    float _365 = (_341 > 0.0) ? (cbMtdParam._m0[15u].x / _341) : 5000.0;
    float _366 = isnan(_361) ? _353 : (isnan(_353) ? _361 : min(_353, _361));
    float _367 = isnan(_365) ? _366 : (isnan(_366) ? _365 : min(_366, _365));
    float _371 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = ((_367 * _341) + _371) / _371;
    vec4 _402 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_346 + (-0.5)) + (_367 * _344)) / _378) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_347 + (-0.5)) + (_367 * _345)) / _378) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _435 = _254 * _434;
    float _436 = _255 * _434;
    float _437 = _256 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _514 = sqrt(((_254 * _254) + (_255 * _255)) + (_256 * _256));
        float _521 = (cbMatDynParam._m0[5u].x * _514) + cbMatDynParam._m0[5u].y;
        float _2333 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
        float _522 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        float _526 = (cbMatDynParam._m0[5u].z * _514) + cbMatDynParam._m0[5u].w;
        float _2344 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0))) - _522)) + _522) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_457 * cbSceneParam._m0[86u].x, _458 * cbSceneParam._m0[86u].y));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = (-0.0) - _435;
    float _472 = (-0.0) - _436;
    float _473 = (-0.0) - _437;
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _665;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    float _676;
    float _677;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = (cbModelParam._m0[37u].x * ((((fma(_503, cbModelParam._m0[26u].z, fma(_499, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _590 = (cbModelParam._m0[37u].y * ((((fma(_503, cbModelParam._m0[27u].z, fma(_499, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _591 = (((((fma(_503, cbModelParam._m0[28u].z, fma(_499, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        _665 = _628 * (_594.z + (-0.5));
        _667 = _628 * (_594.y + (-0.5));
        _668 = _628 * (_594.x + (-0.5));
        _669 = _638 * (_601.z + (-0.5));
        _670 = _638 * (_601.y + (-0.5));
        _671 = _638 * (_601.x + (-0.5));
        _672 = _648 * (_608.z + (-0.5));
        _673 = _648 * (_608.y + (-0.5));
        _674 = _648 * (_608.x + (-0.5));
        _675 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        _676 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        _677 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    }
    else
    {
        _665 = _666;
        _667 = _666;
        _668 = _666;
        _669 = _666;
        _670 = _666;
        _671 = _666;
        _672 = _666;
        _673 = _666;
        _674 = _666;
        _675 = _666;
        _676 = _666;
        _677 = _666;
    }
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _734 = (cbModelParam._m0[38u].x * ((((fma(_503, cbModelParam._m0[30u].z, fma(_499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _495)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _735 = (cbModelParam._m0[38u].y * ((((fma(_503, cbModelParam._m0[31u].z, fma(_499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _495)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _736 = (((((fma(_503, cbModelParam._m0[32u].z, fma(_499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _495)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _771 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _781 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _791 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _801 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_759.x + (-0.5));
        float _803 = _801 * (_759.y + (-0.5));
        float _804 = _801 * (_759.z + (-0.5));
        _808 = _771 * (_738.z + (-0.5));
        _809 = _771 * (_738.y + (-0.5));
        _810 = _771 * (_738.x + (-0.5));
        _811 = _781 * (_745.z + (-0.5));
        _812 = _781 * (_745.y + (-0.5));
        _813 = _781 * (_745.x + (-0.5));
        _814 = _791 * (_752.z + (-0.5));
        _815 = _791 * (_752.y + (-0.5));
        _816 = _791 * (_752.x + (-0.5));
        _817 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        _818 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        _819 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    }
    else
    {
        _808 = _666;
        _809 = _666;
        _810 = _666;
        _811 = _666;
        _812 = _666;
        _813 = _666;
        _814 = _666;
        _815 = _666;
        _816 = _666;
        _817 = _666;
        _818 = _666;
        _819 = _666;
    }
    float _834 = _435 * (-0.5);
    float _835 = _436 * (-0.5);
    float _836 = _437 * (-0.5);
    float _837 = dot(vec4(_834, _835, _836, 1.0), vec4(_810, _813, _816, _819));
    float _840 = dot(vec4(_834, _835, _836, 1.0), vec4(_809, _812, _815, _818));
    float _843 = dot(vec4(_834, _835, _836, 1.0), vec4(_808, _811, _814, _817));
    float _878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _850 = dot(vec4(_834, _835, _836, 1.0), vec4(_665, _669, _672, _675));
        float _854 = dot(vec4(_834, _835, _836, 1.0), vec4(_667, _670, _673, _676));
        float _858 = dot(vec4(_834, _835, _836, 1.0), vec4(_668, _671, _674, _677));
        float _865 = dot(vec4(cbModelParam._m0[39u]), vec4(_834, _835, _836, 1.0));
        _878 = dot(vec3(isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)), isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)), isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_865) ? 0.0 : (isnan(0.0) ? _865 : max(0.0, _865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _878 = 1.0;
    }
    float _889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _880 = dot(vec4(cbModelParam._m0[40u]), vec4(_834, _835, _836, 1.0));
        _889 = dot(vec3(isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)), isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)), isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_880) ? 0.0 : (isnan(0.0) ? _880 : max(0.0, _880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _889 = 1.0;
    }
    float _893 = (_889 * cbModelParam._m0[1u].x) + (_878 * (1.0 - cbModelParam._m0[1u].x));
    float _899 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _982;
    float _984;
    float _986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _949 = fma(_503, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495)) + cbModelParam._m0[13u].w;
        float _953 = fma(_503, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495)) + cbModelParam._m0[14u].w;
        float _957 = fma(_503, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495)) + cbModelParam._m0[15u].w;
        float _960 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _963 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _966 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _992;
        if (_960 > 0.0)
        {
            _992 = abs((1.0 - _949) / _960);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_960 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_949 + 1.0) / _960);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _992 = frontier_phi_25_23_ladder;
        }
        float _1268;
        if (_963 > 0.0)
        {
            _1268 = abs((1.0 - _953) / _963);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_963 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_953 + 1.0) / _963);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1268 = frontier_phi_34_30_ladder;
        }
        float _1572;
        if (_966 > 0.0)
        {
            _1572 = abs((1.0 - _957) / _966);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_966 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_957 + 1.0) / _966);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1572 = frontier_phi_48_41_ladder;
        }
        float _1574 = isnan(_1268) ? _992 : (isnan(_992) ? _1268 : min(_992, _1268));
        float _1575 = isnan(_1572) ? _1574 : (isnan(_1574) ? _1572 : min(_1574, _1572));
        float _1579 = (_1575 * _960) + _949;
        float _1580 = (_1575 * _963) + _953;
        float _1581 = (_1575 * _966) + _957;
        float _1582 = _1575 * 9.9999997473787516355514526367188e-05;
        float _1583 = (-1.0) - _1582;
        float _1585 = _1582 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1581 > _1585) || ((_1581 < _1583) || ((_1580 > _1585) || ((_1580 < _1583) || ((_1579 < _1583) || (_1579 > _1585))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1708 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1581, cbModelParam._m0[9u].z, fma(_1580, cbModelParam._m0[9u].y, _1579 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1581, cbModelParam._m0[10u].z, fma(_1580, cbModelParam._m0[10u].y, _1579 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1581, cbModelParam._m0[11u].z, fma(_1580, cbModelParam._m0[11u].y, _1579 * cbModelParam._m0[11u].x))), _899);
            frontier_phi_24_48_ladder = _1708.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1708.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1708.x * cbModelParam._m0[1u].y;
        }
        _982 = frontier_phi_24_48_ladder_2;
        _984 = frontier_phi_24_48_ladder_1;
        _986 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _899);
        _982 = _970.x * cbModelParam._m0[1u].y;
        _984 = _970.y * cbModelParam._m0[1u].y;
        _986 = _970.z * cbModelParam._m0[1u].y;
    }
    float _989 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1077;
    float _1079;
    float _1081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1041 = fma(_503, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495)) + cbModelParam._m0[21u].w;
        float _1045 = fma(_503, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495)) + cbModelParam._m0[22u].w;
        float _1049 = fma(_503, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495)) + cbModelParam._m0[23u].w;
        float _1052 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1055 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1058 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1273;
        if (_1052 > 0.0)
        {
            _1273 = abs((1.0 - _1041) / _1052);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1052 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1041 + 1.0) / _1052);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1273 = frontier_phi_36_32_ladder;
        }
        float _1598;
        if (_1055 > 0.0)
        {
            _1598 = abs((1.0 - _1045) / _1055);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1055 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1045 + 1.0) / _1055);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1598 = frontier_phi_50_43_ladder;
        }
        float _1770;
        if (_1058 > 0.0)
        {
            _1770 = abs((1.0 - _1049) / _1058);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1058 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1049 + 1.0) / _1058);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1770 = frontier_phi_68_61_ladder;
        }
        float _1772 = isnan(_1598) ? _1273 : (isnan(_1273) ? _1598 : min(_1273, _1598));
        float _1773 = isnan(_1770) ? _1772 : (isnan(_1772) ? _1770 : min(_1772, _1770));
        float _1777 = (_1773 * _1052) + _1041;
        float _1778 = (_1773 * _1055) + _1045;
        float _1779 = (_1773 * _1058) + _1049;
        float _1780 = _1773 * 9.9999997473787516355514526367188e-05;
        float _1781 = (-1.0) - _1780;
        float _1783 = _1780 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1779 > _1783) || ((_1779 < _1781) || ((_1778 > _1783) || ((_1778 < _1781) || ((_1777 < _1781) || (_1777 > _1783))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1948 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1779, cbModelParam._m0[17u].z, fma(_1778, cbModelParam._m0[17u].y, _1777 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1779, cbModelParam._m0[18u].z, fma(_1778, cbModelParam._m0[18u].y, _1777 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1779, cbModelParam._m0[19u].z, fma(_1778, cbModelParam._m0[19u].y, _1777 * cbModelParam._m0[19u].x))), _989);
            frontier_phi_33_68_ladder = _1948.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1948.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1948.x * cbModelParam._m0[1u].z;
        }
        _1077 = frontier_phi_33_68_ladder_2;
        _1079 = frontier_phi_33_68_ladder_1;
        _1081 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _989);
        _1077 = _1061.x * cbModelParam._m0[1u].z;
        _1079 = _1061.y * cbModelParam._m0[1u].z;
        _1081 = _1061.z * cbModelParam._m0[1u].z;
    }
    float _1093 = _470 * 0.01200000010430812835693359375;
    float _1095 = _1093 * ((cbModelParam._m0[1u].w * (_1077 - _982)) + _982);
    float _1096 = _1093 * ((cbModelParam._m0[1u].w * (_1079 - _984)) + _984);
    float _1097 = _1093 * ((cbModelParam._m0[1u].w * (_1081 - _986)) + _986);
    float _1118 = fma(_1097, cbSceneParam._m0[89u].z, fma(_1096, cbSceneParam._m0[89u].y, _1095 * cbSceneParam._m0[89u].x));
    float _1121 = fma(_1097, cbSceneParam._m0[90u].z, fma(_1096, cbSceneParam._m0[90u].y, _1095 * cbSceneParam._m0[90u].x));
    float _1124 = fma(_1097, cbSceneParam._m0[91u].z, fma(_1096, cbSceneParam._m0[91u].y, _1095 * cbSceneParam._m0[91u].x));
    uint _1131 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1135 = floatBitsToUint(cbInstanceData._m0[_1131 + 5u]);
    uint _1137 = _1135.x * 14u;
    uint _1138 = _1137 + 13u;
    float _1143 = _470 + (-1.0);
    float _1146 = (cbLight._m0[_1138].x * _1143) + 1.0;
    float _1147 = (cbLight._m0[_1138].y * _1143) + 1.0;
    uint _1148 = _1137 + 8u;
    float _1159 = cbLight._m0[_1137].x + _435;
    float _1160 = cbLight._m0[_1137].y + _436;
    float _1161 = cbLight._m0[_1137].z + _437;
    float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
    float _1169 = dot(vec3(0.0), vec3(cbLight._m0[_1137].xyz));
    float _2470 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    float _1173 = dot(vec3(0.0), vec3(_435, _436, _437));
    float _2481 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
    float _1177 = dot(vec3(cbLight._m0[_1137].xyz), vec3(_1159 * _1165, _1160 * _1165, _1161 * _1165));
    float _2492 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1188 = (exp2(log2(1.0 - (isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1194 = (0.5 / ((_1172 + 9.9999999392252902907785028219223e-09) + _1176)) * _1172;
    float _2503 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1196 = (isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0))) * 0.31831014156341552734375;
    float _1198 = isnan(1.0) ? _1146 : (isnan(_1146) ? 1.0 : min(_1146, 1.0));
    uint _1208 = _1137 + 9u;
    uint _1214 = _1137 | 1u;
    float _1220 = cbLight._m0[_1214].x + _435;
    float _1221 = cbLight._m0[_1214].y + _436;
    float _1222 = cbLight._m0[_1214].z + _437;
    float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
    float _1230 = dot(vec3(0.0), vec3(cbLight._m0[_1214].xyz));
    float _2519 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1233 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
    float _1234 = dot(vec3(cbLight._m0[_1214].xyz), vec3(_1220 * _1226, _1221 * _1226, _1222 * _1226));
    float _2530 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _1243 = (exp2(log2(1.0 - (isnan(1.0) ? _2530 : (isnan(_2530) ? 1.0 : min(_2530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1247 = (0.5 / ((_1233 + 9.9999999392252902907785028219223e-09) + _1176)) * _1233;
    float _2541 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1249 = (isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0))) * 0.31831014156341552734375;
    float _1250 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
    float _1260 = (((_1243 * cbLight._m0[_1208].x) * _1249) * _1250) + (((_1188 * cbLight._m0[_1148].x) * _1196) * _1198);
    float _1261 = (((_1243 * cbLight._m0[_1208].y) * _1249) * _1250) + (((_1188 * cbLight._m0[_1148].y) * _1196) * _1198);
    float _1262 = (((_1243 * cbLight._m0[_1208].z) * _1249) * _1250) + (((_1188 * cbLight._m0[_1148].z) * _1196) * _1198);
    float _1378;
    float _1380;
    float _1382;
    if (_1135.y == 0u)
    {
        float _1318 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1319 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1318;
        float _1320 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1318;
        float _1321 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1318;
        uvec4 _1333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1334 = _1333.x;
        uint _1345 = uint((float(_1333.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _1334))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _1334)));
        float _1355 = (log2(_1321 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1356 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        uint _1359 = uint(isnan(14.0) ? _1356 : (isnan(_1356) ? 14.0 : min(_1356, 14.0)));
        uvec4 _1364 = texelFetch(g_lightClusterGridBuffer, int(((_1359 << 2u) + (_1345 << 6u)) >> 2u));
        uint _1365 = _1364.x;
        uint _1366 = _1333.z;
        float _1455;
        float _1457;
        float _1459;
        if (((((1u << ((_1366 >> 4u) & 15u)) + 4294967295u) & _1365) == 0u) || ((_1366 & 240u) == 0u))
        {
            _1455 = 0.0;
            _1457 = 0.0;
            _1459 = 0.0;
        }
        else
        {
            float _1456;
            float _1458;
            float _1460;
            float _1623 = 0.0;
            float _1624 = 0.0;
            float _1625 = 0.0;
            uint _1626 = 0u;
            uint _1635;
            bool _1636;
            for (;;)
            {
                _1635 = texelFetch(g_lightClassification, int((((_1359 << 5u) + (_1345 << 9u)) + (_1626 << 2u)) >> 2u)).x;
                _1636 = _1635 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1636)
                {
                    frontier_phi_63_pred = _1625;
                    frontier_phi_63_pred_1 = _1624;
                    frontier_phi_63_pred_2 = _1623;
                }
                else
                {
                    float _1810;
                    float _1811;
                    float _1812;
                    uint _1813;
                    _1810 = _1623;
                    _1811 = _1624;
                    _1812 = _1625;
                    _1813 = _1635;
                    float _1717;
                    float _1718;
                    float _1719;
                    for (;;)
                    {
                        uint _1817 = uint(findLSB(_1813)) + (_1626 << 5u);
                        uint _1814 = (_1813 + 4294967295u) & _1813;
                        uint _1819 = _1817 * 48u;
                        vec4 _1833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1819)).x, texelFetch(g_PointLightRenderingBuffer, int(_1819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1819 + 3u)).x));
                        uint _1850 = (_1817 * 48u) + 8u;
                        vec3 _1861 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1850)).x, texelFetch(g_PointLightRenderingBuffer, int(_1850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1850 + 2u)).x));
                        float _1865 = _1833.x - _1319;
                        float _1866 = _1833.y - _1320;
                        float _1867 = _1833.z - _1321;
                        float _1868 = dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867));
                        float _1871 = inversesqrt(_1868);
                        float _1880 = 1.0 - (_1868 * _1833.w);
                        float _2567 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
                        float _1882 = sqrt(_1868) * uintBitsToFloat(uvec4(_1840, _1841, _1842, texelFetch(g_PointLightRenderingBuffer, int(((_1817 * 48u) + 4u) + 3u)).x)).w;
                        float _1885 = 1.39999997615814208984375 / (_1882 + 1.39999997615814208984375);
                        float _1886 = _1885 * _1885;
                        float _1889 = ((1.0 - _1886) * dot(vec3(0.0), vec3(_1871 * _1865, _1871 * _1866, _1871 * _1867))) + _1886;
                        float _1891 = (-0.0) - _1319;
                        float _1892 = (-0.0) - _1320;
                        float _1893 = (-0.0) - _1321;
                        float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
                        float _1901 = dot(vec3(0.0), vec3(_1897 * _1891, _1897 * _1892, _1897 * _1893));
                        float _2578 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
                        float _2589 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
                        float _1905 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
                        float _1909 = (0.5 / (((isnan(1.0) ? _2578 : (isnan(_2578) ? 1.0 : min(_2578, 1.0))) + 9.9999999392252902907785028219223e-09) + _1905)) * _1905;
                        float _2600 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
                        float _1918 = (((isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0))) * 3.1415927410125732421875) / (((_1882 * _1882) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0)));
                        _1717 = (_1918 * _1861.x) + _1810;
                        _1718 = (_1918 * _1861.y) + _1811;
                        _1719 = (_1918 * _1861.z) + _1812;
                        if (_1814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1810 = _1717;
                            _1811 = _1718;
                            _1812 = _1719;
                            _1813 = _1814;
                        }
                    }
                    frontier_phi_63_pred = _1719;
                    frontier_phi_63_pred_1 = _1718;
                    frontier_phi_63_pred_2 = _1717;
                }
                _1460 = frontier_phi_63_pred;
                _1458 = frontier_phi_63_pred_1;
                _1456 = frontier_phi_63_pred_2;
                uint _1627 = _1626 + 1u;
                if (_1627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1623 = _1456;
                    _1624 = _1458;
                    _1625 = _1460;
                    _1626 = _1627;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1455 = _1456;
            _1457 = _1458;
            _1459 = _1460;
        }
        uvec4 _1463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1464 = _1463.z;
        uint _1466 = (_1464 >> 8u) & 15u;
        float _1603;
        float _1605;
        float _1607;
        if (((4294967295u << _1466) & _1365) == 0u)
        {
            _1603 = _1455;
            _1605 = _1457;
            _1607 = _1459;
        }
        else
        {
            float _1619 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1466 < ((_1464 >> 12u) & 15u))
            {
                float _1604;
                float _1606;
                float _1608;
                float _1796 = _1455;
                float _1797 = _1457;
                float _1798 = _1459;
                uint _1799 = _1466;
                uint _1808;
                bool _1809;
                for (;;)
                {
                    _1808 = texelFetch(g_lightClassification, int((((_1359 << 5u) + (_1345 << 9u)) + (_1799 << 2u)) >> 2u)).x;
                    _1809 = _1808 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1809)
                    {
                        frontier_phi_77_pred = _1797;
                        frontier_phi_77_pred_1 = _1796;
                        frontier_phi_77_pred_2 = _1798;
                    }
                    else
                    {
                        float _1953;
                        float _1954;
                        float _1955;
                        float _2175;
                        float _2176;
                        float _2177;
                        float _1963 = _1796;
                        float _1964 = _1797;
                        float _1965 = _1798;
                        uint _1966 = _1808;
                        uint _1967;
                        uint _1977;
                        vec4 _1992;
                        float _1993;
                        vec3 _2005;
                        vec4 _2021;
                        vec4 _2036;
                        float _2082;
                        bool _2083;
                        for (;;)
                        {
                            _1977 = ((_1799 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1966));
                            _1967 = (_1966 + 4294967295u) & _1966;
                            uint _1979 = _1977 * 40u;
                            _1992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1979 + 3u)).x));
                            _1993 = _1992.w;
                            uint _1995 = (_1977 * 40u) + 8u;
                            _2005 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 2u)).x));
                            uint _2008 = (_1977 * 40u) + 16u;
                            _2021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 3u)).x));
                            uint _2023 = (_1977 * 40u) + 20u;
                            _2036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2023 + 3u)).x));
                            uint _2038 = (_1977 * 40u) + 24u;
                            vec4 _2051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 3u)).x));
                            uint _2057 = (_1977 * 40u) + 28u;
                            vec4 _2070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2057 + 3u)).x));
                            _2082 = fma(_1321, _2070.z, fma(_1320, _2070.y, _2070.x * _1319)) + _2070.w;
                            _2083 = !((fma(_1321, _2051.z, fma(_1320, _2051.y, _2051.x * _1319)) + _2051.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2083)
                            {
                                float _2117 = _1992.x - _1319;
                                float _2118 = _1992.y - _1320;
                                float _2119 = _1992.z - _1321;
                                float _2120 = dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119));
                                float _2123 = inversesqrt(_2120);
                                float _2130 = 1.0 - (_2120 / (_1993 * _1993));
                                float _2611 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
                                float _2132 = sqrt(_2120) * uintBitsToFloat(uvec4(_2086, _2087, _2088, texelFetch(g_SpotLightRenderingBuffer, int(((_1977 * 40u) + 4u) + 3u)).x)).w;
                                float _2134 = 1.39999997615814208984375 / (_2132 + 1.39999997615814208984375);
                                float _2135 = _2134 * _2134;
                                float _2138 = (fma(_1321, _2021.z, fma(_1320, _2021.y, _2021.x * _1319)) + _2021.w) / _2082;
                                float _2139 = (fma(_1321, _2036.z, fma(_1320, _2036.y, _2036.x * _1319)) + _2036.w) / _2082;
                                float _2143 = 1.0 - dot(vec2(_2138, _2139), vec2(_2138, _2139));
                                float _2622 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
                                float _2151 = dot(vec3(0.0), vec3((-0.0) - (_1319 * _1619), (-0.0) - (_1320 * _1619), (-0.0) - (_1321 * _1619)));
                                float _2633 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
                                float _2159 = ((1.0 - _2135) * dot(vec3(0.0), vec3(_2123 * _2117, _2123 * _2118, _2123 * _2119))) + _2135;
                                float _2644 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
                                float _2160 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
                                float _2164 = (0.5 / (((isnan(1.0) ? _2633 : (isnan(_2633) ? 1.0 : min(_2633, 1.0))) + 9.9999999392252902907785028219223e-09) + _2160)) * _2160;
                                float _2655 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
                                float _2171 = ((isnan(1.0) ? _2622 : (isnan(_2622) ? 1.0 : min(_2622, 1.0))) * (isnan(1.0) ? _2611 : (isnan(_2611) ? 1.0 : min(_2611, 1.0)))) * (((isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0))) * 3.1415927410125732421875) / (((_2132 * _2132) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2171 * _2005.z;
                                frontier_phi_83_pred_1 = _2171 * _2005.y;
                                frontier_phi_83_pred_2 = _2171 * _2005.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2177 = frontier_phi_83_pred;
                            _2176 = frontier_phi_83_pred_1;
                            _2175 = frontier_phi_83_pred_2;
                            _1953 = _2175 + _1963;
                            _1954 = _2176 + _1964;
                            _1955 = _2177 + _1965;
                            if (_1967 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1963 = _1953;
                                _1964 = _1954;
                                _1965 = _1955;
                                _1966 = _1967;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1954;
                        frontier_phi_77_pred_1 = _1953;
                        frontier_phi_77_pred_2 = _1955;
                    }
                    _1606 = frontier_phi_77_pred;
                    _1604 = frontier_phi_77_pred_1;
                    _1608 = frontier_phi_77_pred_2;
                    uint _1800 = _1799 + 1u;
                    if (_1800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1796 = _1604;
                        _1797 = _1606;
                        _1798 = _1608;
                        _1799 = _1800;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1608;
                frontier_phi_52_53_ladder_1 = _1606;
                frontier_phi_52_53_ladder_2 = _1604;
            }
            else
            {
                frontier_phi_52_53_ladder = _1459;
                frontier_phi_52_53_ladder_1 = _1457;
                frontier_phi_52_53_ladder_2 = _1455;
            }
            _1603 = frontier_phi_52_53_ladder_2;
            _1605 = frontier_phi_52_53_ladder_1;
            _1607 = frontier_phi_52_53_ladder;
        }
        float _1612 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _1378 = ((_1603 * 0.039999999105930328369140625) * _1612) + _1260;
        _1380 = ((_1605 * 0.039999999105930328369140625) * _1612) + _1261;
        _1382 = ((_1607 * 0.039999999105930328369140625) * _1612) + _1262;
    }
    else
    {
        _1378 = _1260;
        _1380 = _1261;
        _1382 = _1262;
    }
    uint _1388 = _1131 + 9u;
    uint _1389 = _1388 + uint(cbMatDynParam._m0[0u].w);
    float _1404 = ((cbMtdParam._m0[9u].x * _402.x) * cbInstanceData._m0[_1389].x) + ((_1378 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1405 = ((cbMtdParam._m0[9u].y * _402.y) * cbInstanceData._m0[_1389].y) + ((_1380 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1406 = ((cbMtdParam._m0[9u].z * _402.z) * cbInstanceData._m0[_1389].z) + ((_1382 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
    float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    uint _1410 = _1131 + 6u;
    float _1418 = _457 / cbSceneParam._m0[86u].x;
    float _1419 = _458 / cbSceneParam._m0[86u].y;
    vec4 _1433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1418, _1419, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1435 = _1433.x;
    float _1436 = _1433.y;
    float _1437 = _1433.z;
    float _1438 = _1433.w;
    float _1512;
    float _1514;
    float _1516;
    float _1518;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _1474 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _1475 = _1474 / _430;
        float _1486 = _1475 * _254;
        float _1487 = _255 * _1475;
        float _1488 = (-0.0) - _1487;
        float _1489 = _1475 * _256;
        float _1491 = (cbSceneParam._m0[77u].w * _1488) / _1474;
        float _1492 = _1491 + cbSceneParam._m0[79u].w;
        float _1493 = cbSceneParam._m0[79u].w - _1487;
        float _1499 = sqrt(((_1486 * _1486) + (_1487 * _1487)) + (_1489 * _1489));
        float _1502 = (1.0 - (cbSceneParam._m0[77u].w / _1474)) * _1499;
        float _1508 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1510 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1727;
        if (abs((_1488 - _1491) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1727 = ((((_1492 > 0.0) ? exp2(_1508 * _1492) : (2.0 - exp2(_1510 * _1492))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1502;
        }
        else
        {
            float _1649 = 1.0 / cbSceneParam._m0[80u].x;
            float _1650 = isnan(_1493) ? _1492 : (isnan(_1492) ? _1493 : max(_1492, _1493));
            float _1651 = isnan(_1493) ? _1492 : (isnan(_1492) ? _1493 : min(_1492, _1493));
            float _1660 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : min(_1650, 0.0));
            float _1661 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : min(_1651, 0.0));
            _1727 = ((abs(_1499 / _1488) * cbSceneParam._m0[80u].y) * ((((_1660 - _1661) * 2.0) - ((exp2(_1508 * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)))) - exp2(_1508 * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))))) * _1649)) - ((exp2(_1510 * _1660) - exp2(_1510 * _1661)) * _1649))) + (_1502 * cbSceneParam._m0[80u].z);
        }
        vec4 _1729 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1418, _1419, 1.0), 0.0);
        float _1738 = exp2((_1727 * (-1.44269502162933349609375)) * (1.0 - _1729.w));
        float _1739 = log2(_1738);
        float _1755 = log2(_1438);
        _1512 = (exp2(_1755 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1739 * cbSceneParam._m0[78u].x)) * _1729.x) / cbSceneParam._m0[78u].x)) + _1435;
        _1514 = (exp2(_1755 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1739 * cbSceneParam._m0[78u].y)) * _1729.y) / cbSceneParam._m0[78u].y)) + _1436;
        _1516 = (exp2(_1755 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1739 * cbSceneParam._m0[78u].z)) * _1729.z) / cbSceneParam._m0[78u].z)) + _1437;
        _1518 = _1738 * _1438;
    }
    else
    {
        _1512 = _1435;
        _1514 = _1436;
        _1516 = _1437;
        _1518 = _1438;
    }
    bool _1765;
    vec4 _1528;
    vec4 _1551;
    float _1553;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    bool _1571;
    for (;;)
    {
        _1528 = cbMatDynParam._m0[0u];
        float _1530 = roundEven(_1528.y);
        bool _1531 = _1530 == 3.0;
        float _1533 = log2(_1518);
        float _1540 = exp2(_1533 * cbSceneParam._m0[78u].x) * _1407;
        float _1541 = exp2(_1533 * cbSceneParam._m0[78u].y) * _1408;
        float _1542 = exp2(_1533 * cbSceneParam._m0[78u].z) * _1409;
        float _1549 = _444 + (-0.5);
        _1551 = cbMtdParam._m0[1u];
        _1553 = _1551.y * _1549;
        float _1556 = (_1530 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1557 = _1556 * (_1531 ? _1540 : (_1540 + (cbSceneParam._m0[72u].w * _1512)));
        _1558 = _1556 * (_1531 ? _1541 : (_1541 + (cbSceneParam._m0[72u].w * _1514)));
        _1559 = _1556 * (_1531 ? _1542 : (_1542 + (cbSceneParam._m0[72u].w * _1516)));
        _1560 = _1549 * 0.999000012874603271484375;
        _1571 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1571)
        {
            if ((cbInstanceData._m0[_1131 + 7u].x + _1560) < 0.5)
            {
                _1765 = true;
                break;
            }
        }
        uint _1684 = _1388 + uint(_1528.w);
        if ((cbInstanceData._m0[_1684].w < 1.0) && ((cbInstanceData._m0[_1684].w + _1560) < 0.5))
        {
            _1765 = true;
            break;
        }
        if ((_1553 + 1.0) < _1551.x)
        {
            _1765 = true;
            break;
        }
        _1765 = false;
        break;
    }
    float _1923;
    if (_1765)
    {
        discard_state = true;
        _1923 = 0.0;
    }
    else
    {
        _1923 = cbInstanceData._m0[_1410].w;
    }
    SV_Target.x = _1557;
    SV_Target.y = _1558;
    SV_Target.z = _1559;
    SV_Target.w = _1923;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1410].w;
    discard_exit();
}


