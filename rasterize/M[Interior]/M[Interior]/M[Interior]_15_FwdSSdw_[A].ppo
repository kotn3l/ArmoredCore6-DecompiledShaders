#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3341;
float _3342;
float _3343;
float _3344;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _347 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _383 = cbMtdParam._m0[21u].w + _269;
    float _384 = cbMtdParam._m0[22u].x + _270;
    float _385 = cbMtdParam._m0[22u].y + _271;
    float _399 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_198, _199, _200));
    float _400 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_212, _213, _214));
    float _401 = (-0.0) - dot(vec3(_383, _384, _385), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _408 = _405 * _401;
    float _409 = (_405 * _399) + ((cbMtdParam._m0[19u].w * _287) * ((_347.x * 2.0) + (-1.0)));
    float _410 = (_405 * _400) + ((cbMtdParam._m0[20u].x * _287) * ((_347.y * 2.0) + (-1.0)));
    float _411 = _409 * cbMtdParam._m0[18u].z;
    float _412 = _410 * cbMtdParam._m0[18u].y;
    float _413 = fract(TEXCOORD.x);
    float _414 = fract(TEXCOORD.y);
    float _420;
    if (_411 > 0.0)
    {
        _420 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _420 = frontier_phi_3_2_ladder;
    }
    float _428;
    if (_412 > 0.0)
    {
        _428 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _428 = frontier_phi_7_6_ladder;
    }
    bool _430 = _408 > 0.0;
    float _432 = _430 ? (cbMtdParam._m0[15u].x / _408) : 5000.0;
    float _433 = isnan(_428) ? _420 : (isnan(_420) ? _428 : min(_420, _428));
    float _434 = isnan(_432) ? _433 : (isnan(_433) ? _432 : min(_433, _432));
    float _438 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = _413 + (-0.5);
    float _442 = _414 + (-0.5);
    float _445 = ((_434 * _408) + _438) / _438;
    vec4 _469 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_439 + (_434 * _411)) / _445) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_442 + (_434 * _412)) / _445) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _482 = (_469.x * _287) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _287) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _287) * cbMtdParam._m0[9u].z;
    float _502 = _409 * cbMtdParam._m0[20u].z;
    float _503 = _410 * cbMtdParam._m0[20u].y;
    bool _504 = _502 > 0.0;
    float _509;
    if (_504)
    {
        _509 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _509 = frontier_phi_11_10_ladder;
    }
    bool _511 = _503 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _516 = frontier_phi_15_14_ladder;
    }
    float _519 = _430 ? (cbMtdParam._m0[16u].x / _408) : 5000.0;
    float _520 = isnan(_516) ? _509 : (isnan(_509) ? _516 : min(_509, _516));
    float _521 = isnan(_519) ? _520 : (isnan(_520) ? _519 : min(_520, _519));
    float _525 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _529 = ((_521 * _408) + _525) / _525;
    float _534 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _536 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _552 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_439 + (_521 * _502)) / _529) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_442 + (_521 * _503)) / _529) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _567;
    if (_504)
    {
        _567 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _567 = frontier_phi_19_18_ladder;
    }
    float _573;
    if (_511)
    {
        _573 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _573 = frontier_phi_23_22_ladder;
    }
    float _575 = isnan(_573) ? _567 : (isnan(_567) ? _573 : min(_567, _573));
    float _576 = isnan(_519) ? _575 : (isnan(_575) ? _519 : min(_575, _519));
    float _583 = ((_576 * _408) + _525) / _525;
    vec4 _604 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_439 + (_576 * _502)) / _583) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_442 + (_576 * _503)) / _583) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _616 = _287 * 0.1500000059604644775390625;
    float _627 = (_616 * ((_482 - _322) + (((((cbMtdParam._m0[10u].x * _287) * _552.x) - _482) * _287) * _606))) + _322;
    float _628 = (_616 * ((_483 - _324) + (((((cbMtdParam._m0[10u].y * _287) * _552.y) - _483) * _287) * _606))) + _324;
    float _629 = (_616 * ((_484 - _326) + (((((cbMtdParam._m0[10u].z * _287) * _552.z) - _484) * _287) * _606))) + _326;
    vec4 _641 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _645 = _641.z;
    float _648 = (_641.x * 2.0) + (-1.0);
    float _649 = (_641.y * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3383 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _655 = sqrt(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))));
    float _658 = fma(_655, _205, fma(_649, _212, _648 * _198));
    float _661 = fma(_655, _206, fma(_649, _213, _648 * _199));
    float _664 = fma(_655, _207, fma(_649, _214, _648 * _200));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3394 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _672 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3416 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3427 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _696 = _269 * _695;
    float _697 = _270 * _695;
    float _698 = _271 * _695;
    vec4 _703 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _705 = _703.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3438 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3449 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) - _870)) + _870) < ((_705 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _741 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _744 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _757 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3460 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _717, cbSceneParam._m0[86u].y * _718));
    float _783 = _780.x * TEXCOORD.z;
    float _784 = dot(vec3(_669, _670, _671), vec3(_696, _697, _698));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _669) - _696;
    float _792 = (_787 * _670) - _697;
    float _793 = (_787 * _671) - _698;
    float _797 = abs(dot(vec3(_696, _697, _698), vec3(_669, _670, _671)));
    float _3493 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_672);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _912 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _916 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _939 = _844 + _669;
        float _940 = _848 + _670;
        float _941 = _852 + _671;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _908;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _912;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _916;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_669, _670, _671), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3541 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_669, _670, _671), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3574 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_669, _670, _671), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3607 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1229 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1233 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1256 = _844 + _669;
        float _1257 = _848 + _670;
        float _1258 = _852 + _671;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_669, _670, _671), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3670 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_669, _670, _671), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3703 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_669, _670, _671), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3736 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = _1182;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _791 * 0.5;
    float _1563 = _792 * 0.5;
    float _1564 = _793 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1693 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1696 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1724 = frontier_phi_41_39_ladder;
        }
        float _2093;
        if (_1693 > 0.0)
        {
            _2093 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2093 = frontier_phi_50_46_ladder;
        }
        float _2401;
        if (_1696 > 0.0)
        {
            _2401 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2401 = frontier_phi_64_57_ladder;
        }
        float _2403 = isnan(_2093) ? _1724 : (isnan(_1724) ? _2093 : min(_1724, _2093));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1690) + _1679;
        float _2409 = (_2404 * _1693) + _1683;
        float _2410 = (_2404 * _1696) + _1687;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2411;
        float _2414 = _2411 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2410 > _2414) || ((_2410 < _2412) || ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 < _2412) || (_2408 > _2414))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_40_64_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_40_64_ladder_2;
        _1714 = frontier_phi_40_64_ladder_1;
        _1716 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1631);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1787 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1790 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _2098;
        if (_1784 > 0.0)
        {
            _2098 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2098 = frontier_phi_52_48_ladder;
        }
        float _2427;
        if (_1787 > 0.0)
        {
            _2427 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2427 = frontier_phi_66_59_ladder;
        }
        float _2617;
        if (_1790 > 0.0)
        {
            _2617 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2617 = frontier_phi_84_77_ladder;
        }
        float _2619 = isnan(_2427) ? _2098 : (isnan(_2098) ? _2427 : min(_2098, _2427));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1784) + _1773;
        float _2625 = (_2620 * _1787) + _1777;
        float _2626 = (_2620 * _1790) + _1781;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_49_84_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_49_84_ladder_2;
        _1811 = frontier_phi_49_84_ladder_1;
        _1813 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1721);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1712)) + _1712);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1714)) + _1714);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1716)) + _1716);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    vec4 _1845 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_717, _718));
    float _1847 = _1845.w;
    float _1859 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1847);
    float _1860 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1847);
    float _1861 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1847);
    uvec4 _1865 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1867 = _1865.x * 14u;
    uint _1868 = _1867 + 13u;
    float _1873 = _783 + (-1.0);
    float _1876 = (cbLight._m0[_1868].x * _1873) + 1.0;
    float _1877 = (cbLight._m0[_1868].y * _1873) + 1.0;
    uint _1878 = _1867 + 5u;
    float _1884 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1888 = _1867 + 4u;
    float _1897 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1901 = _1867 | 1u;
    float _1912 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_669, _670, _671));
    float _1915 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_669, _670, _671));
    float _3872 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _3883 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1920 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1922 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.3183098733425140380859375;
    float _1929 = ((cbLight._m0[_1878].x * _1884) * _1922) + (((cbLight._m0[_1888].x * _1859) * _1897) * _1920);
    float _1930 = ((_1884 * cbLight._m0[_1878].y) * _1922) + (((cbLight._m0[_1888].y * _1860) * _1897) * _1920);
    float _1931 = ((_1884 * cbLight._m0[_1878].z) * _1922) + (((cbLight._m0[_1888].z * _1861) * _1897) * _1920);
    uint _1933 = _1867 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _672) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1867].x + _696;
    float _1949 = cbLight._m0[_1867].y + _697;
    float _1950 = cbLight._m0[_1867].z + _698;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1867].xyz));
    float _3894 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1962 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1963 = dot(vec3(_669, _670, _671), vec3(_1955, _1956, _1957));
    float _3916 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_1955, _1956, _1957));
    float _3927 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1962 * ((_1961 * _1987) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1987) + _1947) * _1961))) * _1961;
    float _3938 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2014 = _1867 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _672) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1901].x + _696;
    float _2028 = cbLight._m0[_1901].y + _697;
    float _2029 = cbLight._m0[_1901].z + _698;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1901].xyz));
    float _3949 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _2041 = dot(vec3(_669, _670, _671), vec3(_2034, _2035, _2036));
    float _3960 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2034, _2035, _2036));
    float _3971 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2026;
    float _2073 = (0.5 / (((_1962 * ((_2040 * _2063) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2063) + _2026) * _2040))) * _2040;
    float _3982 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2085 = (((_2062 * cbLight._m0[_2014].x) * _2075) * _1884) + ((((cbLight._m0[_1933].x * _1859) * _1986) * _2000) * _1897);
    float _2086 = (((_2062 * cbLight._m0[_2014].y) * _2075) * _1884) + ((((cbLight._m0[_1933].y * _1860) * _1986) * _2000) * _1897);
    float _2087 = (((_2062 * cbLight._m0[_2014].z) * _2075) * _1884) + ((((cbLight._m0[_1933].z * _1861) * _1986) * _2000) * _1897);
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_1865.y == 0u)
    {
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2142;
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2142;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2142;
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.x;
        uint _2169 = uint((float(_2157.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _2158))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _2158)));
        float _2179 = (log2(_2145 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2180 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        uint _2183 = uint(isnan(14.0) ? _2180 : (isnan(_2180) ? 14.0 : min(_2180, 14.0)));
        uvec4 _2188 = texelFetch(g_lightClusterGridBuffer, int(((_2183 << 2u) + (_2169 << 6u)) >> 2u));
        uint _2189 = _2188.x;
        uint _2190 = _2157.z;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((((1u << ((_2190 >> 4u) & 15u)) + 4294967295u) & _2189) == 0u) || ((_2190 & 240u) == 0u))
        {
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
        }
        else
        {
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            uint _2470 = 0u;
            uint _2479;
            bool _2480;
            for (;;)
            {
                _2479 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                _2480 = _2479 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2480)
                {
                    frontier_phi_79_pred = _2469;
                    frontier_phi_79_pred_1 = _2468;
                    frontier_phi_79_pred_2 = _2467;
                    frontier_phi_79_pred_3 = _2466;
                    frontier_phi_79_pred_4 = _2465;
                    frontier_phi_79_pred_5 = _2464;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2464;
                    _2661 = _2465;
                    _2662 = _2466;
                    _2663 = _2467;
                    _2664 = _2468;
                    _2665 = _2469;
                    _2666 = _2479;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2470 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _2143;
                        float _2727 = _2686.y - _2144;
                        float _2728 = _2686.z - _2145;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2736 = dot(vec3(_738, _741, _744), vec3(_2733, _2734, _2735));
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _4003 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2736) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _2143;
                        float _2762 = (-0.0) - _2144;
                        float _2763 = (-0.0) - _2145;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2778 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                        float _2779 = 1.0 - _799;
                        float _2786 = sqrt(1.0 - ((1.0 - (_2779 * _2779)) * (1.0 - (_2778 * _2778))));
                        float _2787 = _2786 * _2786;
                        float _2788 = _2787 * _2787;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2799 = dot(vec3(_738, _741, _744), vec3(_2768, _2769, _2770));
                        float _4019 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2803 = dot(vec3(_738, _741, _744), vec3(_2795 * _2789, _2795 * _2790, _2795 * _2791));
                        float _4030 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2810 = ((_2806 * _2806) * (_2788 + (-1.0))) + 1.0;
                        float _2811 = _2746 * _2787;
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2736) + _2812;
                        float _4041 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2817 = 1.0 - _2787;
                        float _2827 = (0.5 / (((_2816 * ((_2802 * _2817) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2816 * _2817) + _2787) * _2802))) * _2816;
                        float _4052 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2838 = (((_2788 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_2810 * _2810) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125))) * _2742;
                        _2564 = (_2757 * _2705.x) + _2663;
                        _2565 = (_2757 * _2705.y) + _2664;
                        _2566 = (_2757 * _2705.z) + _2665;
                        _2561 = (_2838 * _2722.x) + _2660;
                        _2562 = (_2838 * _2722.y) + _2661;
                        _2563 = (_2838 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2561;
                            _2661 = _2562;
                            _2662 = _2563;
                            _2663 = _2564;
                            _2664 = _2565;
                            _2665 = _2566;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_79_pred = _2566;
                    frontier_phi_79_pred_1 = _2565;
                    frontier_phi_79_pred_2 = _2564;
                    frontier_phi_79_pred_3 = _2563;
                    frontier_phi_79_pred_4 = _2562;
                    frontier_phi_79_pred_5 = _2561;
                }
                _2291 = frontier_phi_79_pred;
                _2289 = frontier_phi_79_pred_1;
                _2287 = frontier_phi_79_pred_2;
                _2285 = frontier_phi_79_pred_3;
                _2283 = frontier_phi_79_pred_4;
                _2281 = frontier_phi_79_pred_5;
                uint _2471 = _2470 + 1u;
                if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2464 = _2281;
                    _2465 = _2283;
                    _2466 = _2285;
                    _2467 = _2287;
                    _2468 = _2289;
                    _2469 = _2291;
                    _2470 = _2471;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
        }
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.z;
        uint _2297 = (_2295 >> 8u) & 15u;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        if (((4294967295u << _2297) & _2189) == 0u)
        {
            _2432 = _2280;
            _2434 = _2282;
            _2436 = _2284;
            _2438 = _2286;
            _2440 = _2288;
            _2442 = _2290;
        }
        else
        {
            float _2457 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
            float _2458 = _2457 * _2143;
            float _2459 = _2457 * _2144;
            float _2460 = _2457 * _2145;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2297 < ((_2295 >> 12u) & 15u))
            {
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2643 = _2280;
                float _2644 = _2282;
                float _2645 = _2284;
                float _2646 = _2286;
                float _2647 = _2288;
                float _2648 = _2290;
                uint _2649 = _2297;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2659)
                    {
                        frontier_phi_93_pred = _2647;
                        frontier_phi_93_pred_1 = _2646;
                        frontier_phi_93_pred_2 = _2645;
                        frontier_phi_93_pred_3 = _2644;
                        frontier_phi_93_pred_4 = _2643;
                        frontier_phi_93_pred_5 = _2648;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _2886 = _2643;
                        float _2887 = _2644;
                        float _2888 = _2645;
                        float _2889 = _2646;
                        float _2890 = _2647;
                        float _2891 = _2648;
                        uint _2892 = _2658;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2961;
                        vec4 _2976;
                        float _3022;
                        bool _3023;
                        for (;;)
                        {
                            uint _2903 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2948 = (_2903 * 40u) + 16u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2963 = (_2903 * 40u) + 20u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2978 = (_2903 * 40u) + 24u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2997 = (_2903 * 40u) + 28u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            _3022 = fma(_2145, _3010.z, fma(_2144, _3010.y, _3010.x * _2143)) + _3010.w;
                            _3023 = !((fma(_2145, _2991.z, fma(_2144, _2991.y, _2991.x * _2143)) + _2991.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3023)
                            {
                                float _3050 = _2918.x - _2143;
                                float _3051 = _2918.y - _2144;
                                float _3052 = _2918.z - _2145;
                                float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                                float _3056 = inversesqrt(_3053);
                                float _3057 = _3056 * _3050;
                                float _3058 = _3056 * _3051;
                                float _3059 = _3056 * _3052;
                                float _3063 = 1.0 - (_3053 / (_2919 * _2919));
                                float _4063 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                                float _3068 = sqrt(_3053) * _2934.w;
                                float _3070 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                                float _3071 = _3070 * _3070;
                                float _3074 = ((1.0 - _3071) * dot(vec3(_3057, _3058, _3059), vec3(_738, _741, _744))) + _3071;
                                float _3077 = _3068 * _3068;
                                float _3081 = (fma(_2145, _2961.z, fma(_2144, _2961.y, _2961.x * _2143)) + _2961.w) / _3022;
                                float _3082 = (fma(_2145, _2976.z, fma(_2144, _2976.y, _2976.x * _2143)) + _2976.w) / _3022;
                                float _3086 = 1.0 - dot(vec2(_3081, _3082), vec2(_3081, _3082));
                                float _4079 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3088 = _3087 * (((isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))) * _3064) / ((_3077 * 0.699999988079071044921875) + 1.0));
                                float _3100 = exp2(log2(1.0 / ((_3077 * 3.5) + 5.0)) * 0.25);
                                float _3101 = 1.0 - _799;
                                float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                                float _3109 = _3108 * _3108;
                                float _3110 = _3109 * _3109;
                                float _3111 = _3057 - _2458;
                                float _3112 = _3058 - _2459;
                                float _3113 = _3059 - _2460;
                                float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                                float _3121 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2458, (-0.0) - _2459, (-0.0) - _2460));
                                float _4090 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3125 = dot(vec3(_738, _741, _744), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                                float _4101 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                                float _3133 = _3070 * _3109;
                                float _3134 = _3133 * _3133;
                                float _3140 = ((1.0 - _3134) * dot(vec3(_738, _741, _744), vec3(_3057, _3058, _3059))) + _3134;
                                float _4112 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3142 = 1.0 - _3109;
                                float _3152 = (0.5 / (((_3141 * ((_3124 * _3142) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3109) * _3124))) * _3141;
                                float _4123 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3162 = (_3087 * _3064) * (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_3132 * _3132) * ((_3077 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3088 * _2934.z;
                                frontier_phi_99_pred_1 = _3088 * _2934.y;
                                frontier_phi_99_pred_2 = _3088 * _2934.x;
                                frontier_phi_99_pred_3 = _3162 * _2946.z;
                                frontier_phi_99_pred_4 = _3162 * _2946.y;
                                frontier_phi_99_pred_5 = _3162 * _2946.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3171 = frontier_phi_99_pred;
                            _3170 = frontier_phi_99_pred_1;
                            _3169 = frontier_phi_99_pred_2;
                            _3168 = frontier_phi_99_pred_3;
                            _3167 = frontier_phi_99_pred_4;
                            _3166 = frontier_phi_99_pred_5;
                            _2876 = _3169 + _2889;
                            _2877 = _3170 + _2890;
                            _2878 = _3171 + _2891;
                            _2873 = _3166 + _2886;
                            _2874 = _3167 + _2887;
                            _2875 = _3168 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2877;
                        frontier_phi_93_pred_1 = _2876;
                        frontier_phi_93_pred_2 = _2875;
                        frontier_phi_93_pred_3 = _2874;
                        frontier_phi_93_pred_4 = _2873;
                        frontier_phi_93_pred_5 = _2878;
                    }
                    _2441 = frontier_phi_93_pred;
                    _2439 = frontier_phi_93_pred_1;
                    _2437 = frontier_phi_93_pred_2;
                    _2435 = frontier_phi_93_pred_3;
                    _2433 = frontier_phi_93_pred_4;
                    _2443 = frontier_phi_93_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2433;
                        _2644 = _2435;
                        _2645 = _2437;
                        _2646 = _2439;
                        _2647 = _2441;
                        _2648 = _2443;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2443;
                frontier_phi_68_69_ladder_1 = _2441;
                frontier_phi_68_69_ladder_2 = _2439;
                frontier_phi_68_69_ladder_3 = _2437;
                frontier_phi_68_69_ladder_4 = _2433;
                frontier_phi_68_69_ladder_5 = _2435;
            }
            else
            {
                frontier_phi_68_69_ladder = _2290;
                frontier_phi_68_69_ladder_1 = _2288;
                frontier_phi_68_69_ladder_2 = _2286;
                frontier_phi_68_69_ladder_3 = _2284;
                frontier_phi_68_69_ladder_4 = _2280;
                frontier_phi_68_69_ladder_5 = _2282;
            }
            _2432 = frontier_phi_68_69_ladder_4;
            _2434 = frontier_phi_68_69_ladder_5;
            _2436 = frontier_phi_68_69_ladder_3;
            _2438 = frontier_phi_68_69_ladder_2;
            _2440 = frontier_phi_68_69_ladder_1;
            _2442 = frontier_phi_68_69_ladder;
        }
        float _2447 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2202 = (_2447 * _2438) + _1929;
        _2204 = (_2447 * _2440) + _1930;
        _2206 = (_2447 * _2442) + _1931;
        _2208 = ((_2432 * 0.039999999105930328369140625) * _2447) + _2085;
        _2210 = ((_2434 * 0.039999999105930328369140625) * _2447) + _2086;
        _2212 = ((_2436 * 0.039999999105930328369140625) * _2447) + _2087;
    }
    else
    {
        _2202 = _1929;
        _2204 = _1930;
        _2206 = _1931;
        _2208 = _2085;
        _2210 = _2086;
        _2212 = _2087;
    }
    float _4139 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4150 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4161 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2229 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2202 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _783))) + ((_2208 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2230 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2204 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _783))) + ((_2210 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2231 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2206 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _783))) + ((_2212 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2232 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    uint _2235 = _757 + 6u;
    float _2243 = _717 / cbSceneParam._m0[86u].x;
    float _2244 = _718 / cbSceneParam._m0[86u].y;
    vec4 _2258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2260 = _2258.x;
    float _2261 = _2258.y;
    float _2262 = _2258.z;
    float _2263 = _2258.w;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2305 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2306 = _2305 / _691;
        float _2317 = _2306 * _269;
        float _2318 = _270 * _2306;
        float _2319 = (-0.0) - _2318;
        float _2320 = _2306 * _271;
        float _2322 = (cbSceneParam._m0[77u].w * _2319) / _2305;
        float _2323 = _2322 + cbSceneParam._m0[79u].w;
        float _2324 = cbSceneParam._m0[79u].w - _2318;
        float _2330 = sqrt(((_2317 * _2317) + (_2318 * _2318)) + (_2320 * _2320));
        float _2333 = (1.0 - (cbSceneParam._m0[77u].w / _2305)) * _2330;
        float _2339 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2341 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2574;
        if (abs((_2319 - _2322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2574 = ((((_2323 > 0.0) ? exp2(_2339 * _2323) : (2.0 - exp2(_2341 * _2323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2333;
        }
        else
        {
            float _2493 = 1.0 / cbSceneParam._m0[80u].x;
            float _2494 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : max(_2323, _2324));
            float _2495 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : min(_2323, _2324));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            _2574 = ((abs(_2330 / _2319) * cbSceneParam._m0[80u].y) * ((((_2504 - _2505) * 2.0) - ((exp2(_2339 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0)))) - exp2(_2339 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))))) * _2493)) - ((exp2(_2341 * _2504) - exp2(_2341 * _2505)) * _2493))) + (_2333 * cbSceneParam._m0[80u].z);
        }
        vec4 _2576 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, 1.0), 0.0);
        float _2585 = exp2((_2574 * (-1.44269502162933349609375)) * (1.0 - _2576.w));
        float _2586 = log2(_2585);
        float _2602 = log2(_2263);
        _2343 = (exp2(_2602 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].x)) * _2576.x) / cbSceneParam._m0[78u].x)) + _2260;
        _2345 = (exp2(_2602 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].y)) * _2576.y) / cbSceneParam._m0[78u].y)) + _2261;
        _2347 = (exp2(_2602 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].z)) * _2576.z) / cbSceneParam._m0[78u].z)) + _2262;
        _2349 = _2585 * _2263;
    }
    else
    {
        _2343 = _2260;
        _2345 = _2261;
        _2347 = _2262;
        _2349 = _2263;
    }
    bool _2612;
    vec4 _2359;
    vec4 _2381;
    float _2383;
    float _2387;
    float _2388;
    float _2389;
    float _2390;
    bool _2400;
    for (;;)
    {
        _2359 = cbMatDynParam._m0[0u];
        float _2361 = roundEven(_2359.y);
        bool _2362 = _2361 == 3.0;
        float _2363 = log2(_2349);
        float _2370 = exp2(_2363 * cbSceneParam._m0[78u].x) * _2232;
        float _2371 = exp2(_2363 * cbSceneParam._m0[78u].y) * _2233;
        float _2372 = exp2(_2363 * cbSceneParam._m0[78u].z) * _2234;
        float _2379 = _705 + (-0.5);
        _2381 = cbMtdParam._m0[1u];
        _2383 = _2381.y * _2379;
        float _2386 = (_2361 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2387 = _2386 * (_2362 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2343)));
        _2388 = _2386 * (_2362 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2345)));
        _2389 = _2386 * (_2362 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2347)));
        _2390 = _2379 * 0.999000012874603271484375;
        _2400 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2400)
        {
            if ((cbInstanceData._m0[_757 + 7u].x + _2390) < 0.5)
            {
                _2612 = true;
                break;
            }
        }
        uint _2528 = _759 + uint(_2359.w);
        if ((cbInstanceData._m0[_2528].w < 1.0) && ((cbInstanceData._m0[_2528].w + _2390) < 0.5))
        {
            _2612 = true;
            break;
        }
        if ((_2383 + 1.0) < _2381.x)
        {
            _2612 = true;
            break;
        }
        _2612 = false;
        break;
    }
    float _2843;
    if (_2612)
    {
        discard_state = true;
        _2843 = 0.0;
    }
    else
    {
        _2843 = cbInstanceData._m0[_2235].w;
    }
    SV_Target.x = _2387;
    SV_Target.y = _2388;
    SV_Target.z = _2389;
    SV_Target.w = _2843;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2235].w;
    discard_exit();
}


