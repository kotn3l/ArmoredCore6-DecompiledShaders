#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1135;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _403 = (_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)));
    float _404 = (_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)));
    float _405 = _403 * cbMtdParam._m0[18u].z;
    float _406 = _404 * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    bool _424 = _402 > 0.0;
    float _426 = _424 ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _433 = _407 + (-0.5);
    float _436 = _408 + (-0.5);
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_433 + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_436 + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _476 = (_463.x * _281) * cbMtdParam._m0[9u].x;
    float _477 = (_463.y * _281) * cbMtdParam._m0[9u].y;
    float _478 = (_463.z * _281) * cbMtdParam._m0[9u].z;
    float _496 = _403 * cbMtdParam._m0[20u].z;
    float _497 = _404 * cbMtdParam._m0[20u].y;
    bool _498 = _496 > 0.0;
    float _503;
    if (_498)
    {
        _503 = (1.0 - _407) / _496;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _407) / _496;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _503 = frontier_phi_11_10_ladder;
    }
    bool _505 = _497 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _408) / _497;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _408) / _497;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _510 = frontier_phi_15_14_ladder;
    }
    float _513 = _424 ? (cbMtdParam._m0[16u].x / _402) : 5000.0;
    float _514 = isnan(_510) ? _503 : (isnan(_503) ? _510 : min(_503, _510));
    float _515 = isnan(_513) ? _514 : (isnan(_514) ? _513 : min(_514, _513));
    float _519 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _523 = ((_515 * _402) + _519) / _519;
    float _528 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _530 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _546 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_433 + (_515 * _496)) / _523) + 0.5) + _528) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_436 + (_515 * _497)) / _523) + 0.5) + _530) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _561;
    if (_498)
    {
        _561 = (1.0 - _407) / _496;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _407) / _496;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _561 = frontier_phi_19_18_ladder;
    }
    float _567;
    if (_505)
    {
        _567 = (1.0 - _408) / _497;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _408) / _497;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _567 = frontier_phi_23_22_ladder;
    }
    float _569 = isnan(_567) ? _561 : (isnan(_561) ? _567 : min(_561, _567));
    float _570 = isnan(_513) ? _569 : (isnan(_569) ? _513 : min(_569, _513));
    float _577 = ((_570 * _402) + _519) / _519;
    vec4 _598 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_433 + (_570 * _496)) / _577) + 0.5) + _528) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_436 + (_570 * _497)) / _577) + 0.5) + _530) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _600 = _598.x;
    float _610 = _281 * 0.1500000059604644775390625;
    float _621 = (_610 * ((_476 - _316) + (((((cbMtdParam._m0[10u].x * _281) * _546.x) - _476) * _281) * _600))) + _316;
    float _622 = (_610 * ((_477 - _318) + (((((cbMtdParam._m0[10u].y * _281) * _546.y) - _477) * _281) * _600))) + _318;
    float _623 = (_610 * ((_478 - _320) + (((((cbMtdParam._m0[10u].z * _281) * _546.z) - _478) * _281) * _600))) + _320;
    vec4 _635 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _639 = _635.z;
    float _642 = (_635.x * 2.0) + (-1.0);
    float _643 = (_635.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3246 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))));
    float _652 = fma(_649, _199, fma(_643, _206, _642 * _192));
    float _655 = fma(_649, _200, fma(_643, _207, _642 * _193));
    float _658 = fma(_649, _201, fma(_643, _208, _642 * _194));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3257 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _666 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3279 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3290 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _685 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _689 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _690 = _263 * _689;
    float _691 = _264 * _689;
    float _692 = _265 * _689;
    float _698 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _699 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _722 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _725 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _741 = (_738 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3301 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _698, cbSceneParam._m0[86u].y * _699));
    float _764 = _761.x * TEXCOORD.z;
    float _765 = dot(vec3(_663, _664, _665), vec3(_690, _691, _692));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _663) - _690;
    float _773 = (_768 * _664) - _691;
    float _774 = (_768 * _665) - _692;
    float _778 = abs(dot(vec3(_690, _691, _692), vec3(_663, _664, _665)));
    float _3334 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_666);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1134;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _865 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _869 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _892 = _825 + _663;
        float _893 = _829 + _664;
        float _894 = _833 + _665;
        float _904 = fma(_894, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892)) - _861;
        float _905 = fma(_894, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892)) - _865;
        float _906 = fma(_894, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892)) - _869;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _962 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_928.x + (-0.5));
        float _964 = _962 * (_928.y + (-0.5));
        float _965 = _962 * (_928.z + (-0.5));
        float _972 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_935.x + (-0.5));
        float _974 = _972 * (_935.y + (-0.5));
        float _975 = _972 * (_935.z + (-0.5));
        float _982 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_942.x + (-0.5));
        float _984 = _982 * (_942.y + (-0.5));
        float _985 = _982 * (_942.z + (-0.5));
        float _992 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_949.x + (-0.5));
        float _994 = _992 * (_949.y + (-0.5));
        float _995 = _992 * (_949.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1016 = (dot(vec3(_663, _664, _665), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1026 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3382 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1028 + 1.0))) + _1033) * _996;
        float _1043 = _964 * 0.5;
        float _1044 = _974 * 0.5;
        float _1045 = _984 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_663, _664, _665), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3415 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1070 + 1.0))) + _1075) * _997;
        float _1085 = _965 * 0.5;
        float _1086 = _975 * 0.5;
        float _1087 = _985 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_663, _664, _665), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3448 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1112 + 1.0))) + _1117) * _998;
        _1134 = _965;
        _1136 = _964;
        _1137 = _963;
        _1138 = _975;
        _1139 = _974;
        _1140 = _973;
        _1141 = _985;
        _1142 = _984;
        _1143 = _983;
        _1144 = _998;
        _1145 = _997;
        _1146 = _996;
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
    }
    else
    {
        _1134 = _1135;
        _1136 = _1135;
        _1137 = _1135;
        _1138 = _1135;
        _1139 = _1135;
        _1140 = _1135;
        _1141 = _1135;
        _1142 = _1135;
        _1143 = _1135;
        _1144 = _1135;
        _1145 = _1135;
        _1146 = _1135;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1179 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1183 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1206 = _825 + _663;
        float _1207 = _829 + _664;
        float _1208 = _833 + _665;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_663, _664, _665), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3511 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_663, _664, _665), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3544 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_663, _664, _665), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3577 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1135;
        _1445 = _1135;
        _1446 = _1135;
        _1447 = _1135;
        _1448 = _1135;
        _1449 = _1135;
        _1450 = _1135;
        _1451 = _1135;
        _1452 = _1135;
        _1453 = _1135;
        _1454 = _1135;
        _1455 = _1135;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _772 * 0.5;
    float _1513 = _773 * 0.5;
    float _1514 = _774 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1134, _1138, _1141, _1144));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1643 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1646 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1674 = frontier_phi_38_36_ladder;
        }
        float _2019;
        if (_1643 > 0.0)
        {
            _2019 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2019 = frontier_phi_47_43_ladder;
        }
        float _2319;
        if (_1646 > 0.0)
        {
            _2319 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2319 = frontier_phi_61_54_ladder;
        }
        float _2321 = isnan(_2019) ? _1674 : (isnan(_1674) ? _2019 : min(_1674, _2019));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1640) + _1629;
        float _2327 = (_2322 * _1643) + _1633;
        float _2328 = (_2322 * _1646) + _1637;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_37_61_ladder = _2454.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2454.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_37_61_ladder_2;
        _1664 = frontier_phi_37_61_ladder_1;
        _1666 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1581);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1737 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1740 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _2024;
        if (_1734 > 0.0)
        {
            _2024 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2024 = frontier_phi_49_45_ladder;
        }
        float _2345;
        if (_1737 > 0.0)
        {
            _2345 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2345 = frontier_phi_63_56_ladder;
        }
        float _2514;
        if (_1740 > 0.0)
        {
            _2514 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2514 = frontier_phi_77_72_ladder;
        }
        float _2516 = isnan(_2345) ? _2024 : (isnan(_2024) ? _2345 : min(_2024, _2345));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1734) + _1723;
        float _2522 = (_2517 * _1737) + _1727;
        float _2523 = (_2517 * _1740) + _1731;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_46_77_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_46_77_ladder_2;
        _1761 = frontier_phi_46_77_ladder_1;
        _1763 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1671);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_793 * _780)) * _764;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1662)) + _1662);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1664)) + _1664);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1666)) + _1666);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    uvec4 _1797 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1799 = _1797.x * 14u;
    uint _1800 = _1799 + 13u;
    float _1805 = _764 + (-1.0);
    float _1808 = (cbLight._m0[_1800].x * _1805) + 1.0;
    float _1809 = (cbLight._m0[_1800].y * _1805) + 1.0;
    uint _1810 = _1799 + 5u;
    float _1816 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1820 = _1799 + 4u;
    float _1826 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1830 = _1799 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_663, _664, _665));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_663, _664, _665));
    float _3713 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _3724 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1810].x * _1816) * _1851) + ((cbLight._m0[_1820].x * _1826) * _1849);
    float _1859 = ((_1816 * cbLight._m0[_1810].y) * _1851) + ((_1826 * cbLight._m0[_1820].y) * _1849);
    float _1860 = ((_1816 * cbLight._m0[_1810].z) * _1851) + ((_1826 * cbLight._m0[_1820].z) * _1849);
    uint _1862 = _1799 + 8u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _666) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1799].x + _690;
    float _1878 = cbLight._m0[_1799].y + _691;
    float _1879 = cbLight._m0[_1799].z + _692;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1799].xyz));
    float _3735 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1891 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1892 = dot(vec3(_663, _664, _665), vec3(_1884, _1885, _1886));
    float _3757 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1884, _1885, _1886));
    float _3768 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1876 * _1876;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1915 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1916 = 1.0 - _1876;
    float _1927 = (0.5 / (((_1891 * ((_1890 * _1916) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1916) + _1876) * _1890))) * _1890;
    float _3779 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    uint _1940 = _1799 + 9u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _666) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1830].x + _690;
    float _1954 = cbLight._m0[_1830].y + _691;
    float _1955 = cbLight._m0[_1830].z + _692;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1830].xyz));
    float _3790 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1967 = dot(vec3(_663, _664, _665), vec3(_1960, _1961, _1962));
    float _3801 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1960, _1961, _1962));
    float _3812 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1952 * _1952;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = 1.0 - _1952;
    float _1999 = (0.5 / (((_1891 * ((_1966 * _1989) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1989) + _1952) * _1966))) * _1966;
    float _3823 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    float _2011 = (((_1988 * cbLight._m0[_1940].x) * _2001) * _1816) + (((_1915 * cbLight._m0[_1862].x) * _1929) * _1826);
    float _2012 = (((_1988 * cbLight._m0[_1940].y) * _2001) * _1816) + (((_1915 * cbLight._m0[_1862].y) * _1929) * _1826);
    float _2013 = (((_1988 * cbLight._m0[_1940].z) * _2001) * _1816) + (((_1915 * cbLight._m0[_1862].z) * _1929) * _1826);
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_1797.y == 0u)
    {
        float _2068 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2069 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2068;
        float _2070 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2068;
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2068;
        uvec4 _2083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2084 = _2083.x;
        uint _2095 = uint((float(_2083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _699) / _2084))) + floor(float(uint(cbSceneParam._m0[85u].x * _698) / _2084)));
        float _2105 = (log2(_2071 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2106 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        uint _2109 = uint(isnan(14.0) ? _2106 : (isnan(_2106) ? 14.0 : min(_2106, 14.0)));
        uvec4 _2114 = texelFetch(g_lightClusterGridBuffer, int(((_2109 << 2u) + (_2095 << 6u)) >> 2u));
        uint _2115 = _2114.x;
        uint _2116 = _2083.z;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((((1u << ((_2116 >> 4u) & 15u)) + 4294967295u) & _2115) == 0u) || ((_2116 & 240u) == 0u))
        {
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
        }
        else
        {
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            uint _2388 = 0u;
            uint _2397;
            bool _2398;
            for (;;)
            {
                _2397 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2388 << 2u)) >> 2u)).x;
                _2398 = _2397 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2398)
                {
                    frontier_phi_74_pred = _2385;
                    frontier_phi_74_pred_1 = _2384;
                    frontier_phi_74_pred_2 = _2383;
                    frontier_phi_74_pred_3 = _2382;
                    frontier_phi_74_pred_4 = _2386;
                    frontier_phi_74_pred_5 = _2387;
                }
                else
                {
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    uint _2563;
                    _2557 = _2382;
                    _2558 = _2383;
                    _2559 = _2384;
                    _2560 = _2385;
                    _2561 = _2386;
                    _2562 = _2387;
                    _2563 = _2397;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    for (;;)
                    {
                        uint _2567 = uint(findLSB(_2563)) + (_2388 << 5u);
                        uint _2564 = (_2563 + 4294967295u) & _2563;
                        uint _2569 = _2567 * 48u;
                        vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 3u)).x));
                        uint _2589 = (_2567 * 48u) + 4u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 3u)).x));
                        uint _2608 = (_2567 * 48u) + 8u;
                        vec3 _2619 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x));
                        float _2623 = _2583.x - _2069;
                        float _2624 = _2583.y - _2070;
                        float _2625 = _2583.z - _2071;
                        float _2626 = dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625));
                        float _2629 = inversesqrt(_2626);
                        float _2630 = _2629 * _2623;
                        float _2631 = _2629 * _2624;
                        float _2632 = _2629 * _2625;
                        float _2633 = dot(vec3(_719, _722, _725), vec3(_2630, _2631, _2632));
                        float _2638 = 1.0 - (_2626 * _2583.w);
                        float _3844 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2639 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2640 = sqrt(_2626) * _2602.w;
                        float _2643 = 1.39999997615814208984375 / (_2640 + 1.39999997615814208984375);
                        float _2644 = _2643 * _2643;
                        float _2647 = ((1.0 - _2644) * _2633) + _2644;
                        float _2650 = _2640 * _2640;
                        float _2654 = ((isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))) * _2639) / ((_2650 * 0.699999988079071044921875) + 1.0);
                        float _2658 = (-0.0) - _2069;
                        float _2659 = (-0.0) - _2070;
                        float _2660 = (-0.0) - _2071;
                        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2675 = exp2(log2(1.0 / ((_2650 * 3.5) + 5.0)) * 0.25);
                        float _2676 = 1.0 - _780;
                        float _2683 = sqrt(1.0 - ((1.0 - (_2676 * _2676)) * (1.0 - (_2675 * _2675))));
                        float _2684 = _2683 * _2683;
                        float _2685 = _2684 * _2684;
                        float _2686 = _2665 + _2630;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
                        float _2696 = dot(vec3(_719, _722, _725), vec3(_2665, _2666, _2667));
                        float _3860 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2699 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                        float _2700 = dot(vec3(_719, _722, _725), vec3(_2692 * _2686, _2692 * _2687, _2692 * _2688));
                        float _3871 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2707 = ((_2703 * _2703) * (_2685 + (-1.0))) + 1.0;
                        float _2708 = _2643 * _2684;
                        float _2709 = _2708 * _2708;
                        float _2712 = ((1.0 - _2709) * _2633) + _2709;
                        float _3882 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2713 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2714 = 1.0 - _2684;
                        float _2724 = (0.5 / (((_2713 * ((_2699 * _2714) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2714) + _2684) * _2699))) * _2713;
                        float _3893 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2735 = (((_2685 * 3.1415927410125732421875) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) / ((_2707 * _2707) * ((_2650 * 2.1991131305694580078125) + 3.141590118408203125))) * _2639;
                        _2466 = (_2654 * _2602.x) + _2560;
                        _2467 = (_2654 * _2602.y) + _2561;
                        _2468 = (_2654 * _2602.z) + _2562;
                        _2463 = (_2735 * _2619.x) + _2557;
                        _2464 = (_2735 * _2619.y) + _2558;
                        _2465 = (_2735 * _2619.z) + _2559;
                        if (_2564 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2557 = _2463;
                            _2558 = _2464;
                            _2559 = _2465;
                            _2560 = _2466;
                            _2561 = _2467;
                            _2562 = _2468;
                            _2563 = _2564;
                        }
                    }
                    frontier_phi_74_pred = _2466;
                    frontier_phi_74_pred_1 = _2465;
                    frontier_phi_74_pred_2 = _2464;
                    frontier_phi_74_pred_3 = _2463;
                    frontier_phi_74_pred_4 = _2467;
                    frontier_phi_74_pred_5 = _2468;
                }
                _2213 = frontier_phi_74_pred;
                _2211 = frontier_phi_74_pred_1;
                _2209 = frontier_phi_74_pred_2;
                _2207 = frontier_phi_74_pred_3;
                _2215 = frontier_phi_74_pred_4;
                _2217 = frontier_phi_74_pred_5;
                uint _2389 = _2388 + 1u;
                if (_2389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2382 = _2207;
                    _2383 = _2209;
                    _2384 = _2211;
                    _2385 = _2213;
                    _2386 = _2215;
                    _2387 = _2217;
                    _2388 = _2389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
        }
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.z;
        uint _2223 = (_2221 >> 8u) & 15u;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((4294967295u << _2223) & _2115) == 0u)
        {
            _2350 = _2206;
            _2352 = _2208;
            _2354 = _2210;
            _2356 = _2212;
            _2358 = _2214;
            _2360 = _2216;
        }
        else
        {
            float _2375 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
            float _2376 = _2375 * _2069;
            float _2377 = _2375 * _2070;
            float _2378 = _2375 * _2071;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2223 < ((_2221 >> 12u) & 15u))
            {
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2540 = _2206;
                float _2541 = _2208;
                float _2542 = _2210;
                float _2543 = _2212;
                float _2544 = _2214;
                float _2545 = _2216;
                uint _2546 = _2223;
                uint _2555;
                bool _2556;
                for (;;)
                {
                    _2555 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                    _2556 = _2555 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2556)
                    {
                        frontier_phi_83_pred = _2543;
                        frontier_phi_83_pred_1 = _2542;
                        frontier_phi_83_pred_2 = _2541;
                        frontier_phi_83_pred_3 = _2540;
                        frontier_phi_83_pred_4 = _2545;
                        frontier_phi_83_pred_5 = _2544;
                    }
                    else
                    {
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _2774 = _2540;
                        float _2775 = _2541;
                        float _2776 = _2542;
                        float _2777 = _2543;
                        float _2778 = _2544;
                        float _2779 = _2545;
                        uint _2780 = _2555;
                        uint _2781;
                        vec4 _2806;
                        float _2807;
                        vec4 _2822;
                        vec3 _2834;
                        vec4 _2849;
                        vec4 _2864;
                        float _2910;
                        bool _2911;
                        for (;;)
                        {
                            uint _2791 = ((_2546 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2780));
                            _2781 = (_2780 + 4294967295u) & _2780;
                            uint _2793 = _2791 * 40u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2807 = _2806.w;
                            uint _2809 = (_2791 * 40u) + 4u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2824 = (_2791 * 40u) + 8u;
                            _2834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x));
                            uint _2836 = (_2791 * 40u) + 16u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2791 * 40u) + 20u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2866 = (_2791 * 40u) + 24u;
                            vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2885 = (_2791 * 40u) + 28u;
                            vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2910 = fma(_2071, _2898.z, fma(_2070, _2898.y, _2898.x * _2069)) + _2898.w;
                            _2911 = !((fma(_2071, _2879.z, fma(_2070, _2879.y, _2879.x * _2069)) + _2879.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2911)
                            {
                                float _2938 = _2806.x - _2069;
                                float _2939 = _2806.y - _2070;
                                float _2940 = _2806.z - _2071;
                                float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                                float _2944 = inversesqrt(_2941);
                                float _2945 = _2944 * _2938;
                                float _2946 = _2944 * _2939;
                                float _2947 = _2944 * _2940;
                                float _2951 = 1.0 - (_2941 / (_2807 * _2807));
                                float _3904 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2952 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2956 = sqrt(_2941) * _2822.w;
                                float _2958 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                                float _2959 = _2958 * _2958;
                                float _2962 = ((1.0 - _2959) * dot(vec3(_2945, _2946, _2947), vec3(_719, _722, _725))) + _2959;
                                float _2965 = _2956 * _2956;
                                float _2969 = (fma(_2071, _2849.z, fma(_2070, _2849.y, _2849.x * _2069)) + _2849.w) / _2910;
                                float _2970 = (fma(_2071, _2864.z, fma(_2070, _2864.y, _2864.x * _2069)) + _2864.w) / _2910;
                                float _2974 = 1.0 - dot(vec2(_2969, _2970), vec2(_2969, _2970));
                                float _3920 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                                float _2976 = _2975 * (((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2952) / ((_2965 * 0.699999988079071044921875) + 1.0));
                                float _2988 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                                float _2989 = 1.0 - _780;
                                float _2996 = sqrt(1.0 - ((1.0 - (_2989 * _2989)) * (1.0 - (_2988 * _2988))));
                                float _2997 = _2996 * _2996;
                                float _2998 = _2997 * _2997;
                                float _2999 = _2945 - _2376;
                                float _3000 = _2946 - _2377;
                                float _3001 = _2947 - _2378;
                                float _3005 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
                                float _3009 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2376, (-0.0) - _2377, (-0.0) - _2378));
                                float _3931 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3012 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _3013 = dot(vec3(_719, _722, _725), vec3(_3005 * _2999, _3005 * _3000, _3005 * _3001));
                                float _3942 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3016 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _3020 = ((_3016 * _3016) * (_2998 + (-1.0))) + 1.0;
                                float _3021 = _2958 * _2997;
                                float _3022 = _3021 * _3021;
                                float _3028 = ((1.0 - _3022) * dot(vec3(_719, _722, _725), vec3(_2945, _2946, _2947))) + _3022;
                                float _3953 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _3030 = 1.0 - _2997;
                                float _3040 = (0.5 / (((_3029 * ((_3012 * _3030) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _2997) * _3012))) * _3029;
                                float _3964 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3050 = (_2975 * _2952) * (((_2998 * 3.1415927410125732421875) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) / ((_3020 * _3020) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2976 * _2822.x;
                                frontier_phi_89_pred_1 = _3050 * _2834.z;
                                frontier_phi_89_pred_2 = _3050 * _2834.y;
                                frontier_phi_89_pred_3 = _3050 * _2834.x;
                                frontier_phi_89_pred_4 = _2976 * _2822.z;
                                frontier_phi_89_pred_5 = _2976 * _2822.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3057 = frontier_phi_89_pred;
                            _3056 = frontier_phi_89_pred_1;
                            _3055 = frontier_phi_89_pred_2;
                            _3054 = frontier_phi_89_pred_3;
                            _3059 = frontier_phi_89_pred_4;
                            _3058 = frontier_phi_89_pred_5;
                            _2764 = _3057 + _2777;
                            _2765 = _3058 + _2778;
                            _2766 = _3059 + _2779;
                            _2761 = _3054 + _2774;
                            _2762 = _3055 + _2775;
                            _2763 = _3056 + _2776;
                            if (_2781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2781;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2764;
                        frontier_phi_83_pred_1 = _2763;
                        frontier_phi_83_pred_2 = _2762;
                        frontier_phi_83_pred_3 = _2761;
                        frontier_phi_83_pred_4 = _2766;
                        frontier_phi_83_pred_5 = _2765;
                    }
                    _2357 = frontier_phi_83_pred;
                    _2355 = frontier_phi_83_pred_1;
                    _2353 = frontier_phi_83_pred_2;
                    _2351 = frontier_phi_83_pred_3;
                    _2361 = frontier_phi_83_pred_4;
                    _2359 = frontier_phi_83_pred_5;
                    uint _2547 = _2546 + 1u;
                    if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2540 = _2351;
                        _2541 = _2353;
                        _2542 = _2355;
                        _2543 = _2357;
                        _2544 = _2359;
                        _2545 = _2361;
                        _2546 = _2547;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2361;
                frontier_phi_65_66_ladder_1 = _2359;
                frontier_phi_65_66_ladder_2 = _2355;
                frontier_phi_65_66_ladder_3 = _2353;
                frontier_phi_65_66_ladder_4 = _2357;
                frontier_phi_65_66_ladder_5 = _2351;
            }
            else
            {
                frontier_phi_65_66_ladder = _2216;
                frontier_phi_65_66_ladder_1 = _2214;
                frontier_phi_65_66_ladder_2 = _2210;
                frontier_phi_65_66_ladder_3 = _2208;
                frontier_phi_65_66_ladder_4 = _2212;
                frontier_phi_65_66_ladder_5 = _2206;
            }
            _2350 = frontier_phi_65_66_ladder_5;
            _2352 = frontier_phi_65_66_ladder_3;
            _2354 = frontier_phi_65_66_ladder_2;
            _2356 = frontier_phi_65_66_ladder_4;
            _2358 = frontier_phi_65_66_ladder_1;
            _2360 = frontier_phi_65_66_ladder;
        }
        float _2365 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2128 = (_2365 * _2356) + _1858;
        _2130 = (_2365 * _2358) + _1859;
        _2132 = (_2365 * _2360) + _1860;
        _2134 = ((_2350 * 0.039999999105930328369140625) * _2365) + _2011;
        _2136 = ((_2352 * 0.039999999105930328369140625) * _2365) + _2012;
        _2138 = ((_2354 * 0.039999999105930328369140625) * _2365) + _2013;
    }
    else
    {
        _2128 = _1858;
        _2130 = _1859;
        _2132 = _1860;
        _2134 = _2011;
        _2136 = _2012;
        _2138 = _2013;
    }
    float _3980 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3991 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4002 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2155 = ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2128 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _764))) + ((_2134 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2156 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2130 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _764))) + ((_2136 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2157 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2132 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _764))) + ((_2138 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    uint _2161 = _738 + 6u;
    float _2169 = _698 / cbSceneParam._m0[86u].x;
    float _2170 = _699 / cbSceneParam._m0[86u].y;
    vec4 _2184 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, (log2((isnan(cbSceneParam._m0[77u].w) ? _685 : (isnan(_685) ? cbSceneParam._m0[77u].w : min(_685, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2186 = _2184.x;
    float _2187 = _2184.y;
    float _2188 = _2184.z;
    float _2189 = _2184.w;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_685 > cbSceneParam._m0[78u].w)
    {
        float _2231 = isnan(_685) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _685 : min(cbSceneParam._m0[80u].w, _685));
        float _2232 = _2231 / _685;
        float _2243 = _2232 * _263;
        float _2244 = _264 * _2232;
        float _2245 = (-0.0) - _2244;
        float _2246 = _2232 * _265;
        float _2248 = (cbSceneParam._m0[77u].w * _2245) / _2231;
        float _2249 = _2248 + cbSceneParam._m0[79u].w;
        float _2250 = cbSceneParam._m0[79u].w - _2244;
        float _2256 = sqrt(((_2243 * _2243) + (_2244 * _2244)) + (_2246 * _2246));
        float _2259 = (1.0 - (cbSceneParam._m0[77u].w / _2231)) * _2256;
        float _2265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2476;
        if (abs((_2245 - _2248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2476 = ((((_2249 > 0.0) ? exp2(_2265 * _2249) : (2.0 - exp2(_2267 * _2249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2259;
        }
        else
        {
            float _2411 = 1.0 / cbSceneParam._m0[80u].x;
            float _2412 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : max(_2249, _2250));
            float _2413 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : min(_2249, _2250));
            float _2422 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : min(_2412, 0.0));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            _2476 = ((abs(_2256 / _2245) * cbSceneParam._m0[80u].y) * ((((_2422 - _2423) * 2.0) - ((exp2(_2265 * (isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0)))) - exp2(_2265 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))))) * _2411)) - ((exp2(_2267 * _2422) - exp2(_2267 * _2423)) * _2411))) + (_2259 * cbSceneParam._m0[80u].z);
        }
        vec4 _2478 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, 1.0), 0.0);
        float _2487 = exp2((_2476 * (-1.44269502162933349609375)) * (1.0 - _2478.w));
        float _2488 = log2(_2487);
        float _2504 = log2(_2189);
        _2269 = (exp2(_2504 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].x)) * _2478.x) / cbSceneParam._m0[78u].x)) + _2186;
        _2271 = (exp2(_2504 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].y)) * _2478.y) / cbSceneParam._m0[78u].y)) + _2187;
        _2273 = (exp2(_2504 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].z)) * _2478.z) / cbSceneParam._m0[78u].z)) + _2188;
        _2275 = _2487 * _2189;
    }
    else
    {
        _2269 = _2186;
        _2271 = _2187;
        _2273 = _2188;
        _2275 = _2189;
    }
    float _2287 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2288 = _2287 == 3.0;
    float _2289 = log2(_2275);
    float _2296 = exp2(_2289 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)));
    float _2297 = exp2(_2289 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0)));
    float _2298 = exp2(_2289 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0)));
    float _2307 = (_2287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2307 * (_2288 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2269)));
    SV_Target.y = _2307 * (_2288 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2271)));
    SV_Target.z = _2307 * (_2288 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2273)));
    SV_Target.w = cbInstanceData._m0[_2161].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2161].w;
}


