#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _788;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _313 = cbMtdParam._m0[21u].w + _254;
    float _314 = cbMtdParam._m0[22u].x + _255;
    float _315 = cbMtdParam._m0[22u].y + _256;
    float _332 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _333 = (-0.0) - dot(vec3(_313, _314, _315), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _334 = (-0.0) - dot(vec3(_313, _314, _315), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _338 = inversesqrt(dot(vec3(_332, _333, _334), vec3(_332, _333, _334)));
    float _341 = _338 * _334;
    float _344 = ((_338 * _332) + (((_278.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _345 = ((_338 * _333) + (((_278.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _346 = fract(TEXCOORD.x);
    float _347 = fract(TEXCOORD.y);
    float _353;
    if (_344 > 0.0)
    {
        _353 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _353 = frontier_phi_3_2_ladder;
    }
    float _361;
    if (_345 > 0.0)
    {
        _361 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _361 = frontier_phi_7_6_ladder;
    }
    float _365 = (_341 > 0.0) ? (cbMtdParam._m0[15u].x / _341) : 5000.0;
    float _366 = isnan(_361) ? _353 : (isnan(_353) ? _361 : min(_353, _361));
    float _367 = isnan(_365) ? _366 : (isnan(_366) ? _365 : min(_366, _365));
    float _371 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = ((_367 * _341) + _371) / _371;
    vec4 _402 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_346 + (-0.5)) + (_367 * _344)) / _378) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_347 + (-0.5)) + (_367 * _345)) / _378) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _2961 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _2972 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2983 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _438 = _254 * _437;
    float _439 = _255 * _437;
    float _440 = _256 * _437;
    float _446 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _447 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = (_460 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_463].z;
    float _2994 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
    float _3005 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    float _3016 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _446, cbSceneParam._m0[86u].y * _447));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = (-0.0) - _438;
    float _488 = (-0.0) - _439;
    float _489 = (-0.0) - _440;
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _787;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = (cbModelParam._m0[37u].x * ((((fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _577 = (cbModelParam._m0[37u].y * ((((fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _578 = (((((fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        float _615 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_581.x + (-0.5));
        float _617 = _615 * (_581.y + (-0.5));
        float _618 = _615 * (_581.z + (-0.5));
        float _625 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_588.x + (-0.5));
        float _627 = _625 * (_588.y + (-0.5));
        float _628 = _625 * (_588.z + (-0.5));
        float _635 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_595.x + (-0.5));
        float _637 = _635 * (_595.y + (-0.5));
        float _638 = _635 * (_595.z + (-0.5));
        float _645 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_602.x + (-0.5));
        float _647 = _645 * (_602.y + (-0.5));
        float _648 = _645 * (_602.z + (-0.5));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _652 = _616 * 0.5;
        float _653 = _626 * 0.5;
        float _654 = _636 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _669 = (dot(vec3(0.0), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _3042 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _679 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _3053 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3064 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_681 + 1.0))) + _686) * _649;
        float _696 = _617 * 0.5;
        float _697 = _627 * 0.5;
        float _698 = _637 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(0.0), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3075 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3086 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3097 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) * (_723 + 1.0))) + _728) * _650;
        float _738 = _618 * 0.5;
        float _739 = _628 * 0.5;
        float _740 = _638 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _754 = (dot(vec3(0.0), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3108 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _763 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_651 + 9.9999997473787516355514526367188e-06);
        float _3119 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3130 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) * (_765 + 1.0))) + _770) * _651;
        _787 = _618;
        _789 = _617;
        _790 = _616;
        _791 = _628;
        _792 = _627;
        _793 = _626;
        _794 = _638;
        _795 = _637;
        _796 = _636;
        _797 = _651;
        _798 = _650;
        _799 = _649;
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
        _802 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
    }
    else
    {
        _787 = _788;
        _789 = _788;
        _790 = _788;
        _791 = _788;
        _792 = _788;
        _793 = _788;
        _794 = _788;
        _795 = _788;
        _796 = _788;
        _797 = _788;
        _798 = _788;
        _799 = _788;
        _800 = 0.0;
        _801 = 0.0;
        _802 = 0.0;
    }
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _856 = (cbModelParam._m0[38u].x * ((((fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _857 = (cbModelParam._m0[38u].y * ((((fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _858 = (((((fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_860.x + (-0.5));
        float _895 = _893 * (_860.y + (-0.5));
        float _896 = _893 * (_860.z + (-0.5));
        float _903 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_867.x + (-0.5));
        float _905 = _903 * (_867.y + (-0.5));
        float _906 = _903 * (_867.z + (-0.5));
        float _913 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_874.x + (-0.5));
        float _915 = _913 * (_874.y + (-0.5));
        float _916 = _913 * (_874.z + (-0.5));
        float _923 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_881.x + (-0.5));
        float _925 = _923 * (_881.y + (-0.5));
        float _926 = _923 * (_881.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(0.0), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3171 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3182 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3193 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_957 + 1.0))) + _962) * _927;
        float _972 = _895 * 0.5;
        float _973 = _905 * 0.5;
        float _974 = _915 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(0.0), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3204 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3215 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3226 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0))) * (_999 + 1.0))) + _1004) * _928;
        float _1014 = _896 * 0.5;
        float _1015 = _906 * 0.5;
        float _1016 = _916 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(0.0), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3237 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3248 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3259 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * (_1041 + 1.0))) + _1046) * _929;
        _1063 = _896;
        _1064 = _895;
        _1065 = _894;
        _1066 = _906;
        _1067 = _905;
        _1068 = _904;
        _1069 = _916;
        _1070 = _915;
        _1071 = _914;
        _1072 = _929;
        _1073 = _928;
        _1074 = _927;
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _788;
        _1064 = _788;
        _1065 = _788;
        _1066 = _788;
        _1067 = _788;
        _1068 = _788;
        _1069 = _788;
        _1070 = _788;
        _1071 = _788;
        _1072 = _788;
        _1073 = _788;
        _1074 = _788;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _800)) + _800;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _801)) + _801;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _802)) + _802;
    float _1110 = fma(_1089, cbSceneParam._m0[89u].z, fma(_1088, cbSceneParam._m0[89u].y, _1087 * cbSceneParam._m0[89u].x));
    float _1113 = fma(_1089, cbSceneParam._m0[90u].z, fma(_1088, cbSceneParam._m0[90u].y, _1087 * cbSceneParam._m0[90u].x));
    float _1116 = fma(_1089, cbSceneParam._m0[91u].z, fma(_1088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1087));
    float _1131 = _438 * (-0.5);
    float _1132 = _439 * (-0.5);
    float _1133 = _440 * (-0.5);
    float _1134 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1137 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1140 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1174;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1147 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_787, _791, _794, _797));
        float _1151 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_789, _792, _795, _798));
        float _1155 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_790, _793, _796, _799));
        float _1162 = dot(vec4(cbModelParam._m0[39u]), vec4(_1131, _1132, _1133, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1185;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1176 = dot(vec4(cbModelParam._m0[40u]), vec4(_1131, _1132, _1133, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1189 = (_1185 * cbModelParam._m0[1u].x) + (_1174 * (1.0 - cbModelParam._m0[1u].x));
    float _1198 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1280;
    float _1282;
    float _1284;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1247 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1251 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1255 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1258 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1261 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1264 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1290;
        if (_1258 > 0.0)
        {
            _1290 = abs((1.0 - _1247) / _1258);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1247 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1290 = frontier_phi_22_20_ladder;
        }
        float _1460;
        if (_1261 > 0.0)
        {
            _1460 = abs((1.0 - _1251) / _1261);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1251 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1460 = frontier_phi_31_27_ladder;
        }
        float _1855;
        if (_1264 > 0.0)
        {
            _1855 = abs((1.0 - _1255) / _1264);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1255 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1855 = frontier_phi_43_38_ladder;
        }
        float _1857 = isnan(_1460) ? _1290 : (isnan(_1290) ? _1460 : min(_1290, _1460));
        float _1858 = isnan(_1855) ? _1857 : (isnan(_1857) ? _1855 : min(_1857, _1855));
        float _1862 = (_1858 * _1258) + _1247;
        float _1863 = (_1858 * _1261) + _1251;
        float _1864 = (_1858 * _1264) + _1255;
        float _1865 = _1858 * 9.9999997473787516355514526367188e-05;
        float _1867 = (-1.0) - _1865;
        float _1869 = _1865 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1864 > _1869) || ((_1864 < _1867) || ((_1863 > _1869) || ((_1863 < _1867) || ((_1862 < _1867) || (_1862 > _1869))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1864, cbModelParam._m0[9u].z, fma(_1863, cbModelParam._m0[9u].y, _1862 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1864, cbModelParam._m0[10u].z, fma(_1863, cbModelParam._m0[10u].y, _1862 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1864, cbModelParam._m0[11u].z, fma(_1863, cbModelParam._m0[11u].y, _1862 * cbModelParam._m0[11u].x))), _1198);
            frontier_phi_21_43_ladder = _2099.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2099.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2099.z * cbModelParam._m0[1u].y;
        }
        _1280 = frontier_phi_21_43_ladder_1;
        _1282 = frontier_phi_21_43_ladder;
        _1284 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1198);
        _1280 = _1268.x * cbModelParam._m0[1u].y;
        _1282 = _1268.y * cbModelParam._m0[1u].y;
        _1284 = _1268.z * cbModelParam._m0[1u].y;
    }
    float _1287 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1339 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1343 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1347 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1350 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1353 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1356 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1465;
        if (_1350 > 0.0)
        {
            _1465 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1465 = frontier_phi_33_29_ladder;
        }
        float _1882;
        if (_1353 > 0.0)
        {
            _1882 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1882 = frontier_phi_45_40_ladder;
        }
        float _2221;
        if (_1356 > 0.0)
        {
            _2221 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2221 = frontier_phi_57_52_ladder;
        }
        float _2223 = isnan(_1882) ? _1465 : (isnan(_1465) ? _1882 : min(_1465, _1882));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1350) + _1339;
        float _2229 = (_2224 * _1353) + _1343;
        float _2230 = (_2224 * _1356) + _1347;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1287);
            frontier_phi_30_57_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1375 = frontier_phi_30_57_ladder_2;
        _1377 = frontier_phi_30_57_ladder_1;
        _1379 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1287);
        _1375 = _1359.x * cbModelParam._m0[1u].z;
        _1377 = _1359.y * cbModelParam._m0[1u].z;
        _1379 = _1359.z * cbModelParam._m0[1u].z;
    }
    float _1391 = _486 * 0.01200000010430812835693359375;
    float _1393 = _1391 * ((cbModelParam._m0[1u].w * (_1375 - _1280)) + _1280);
    float _1394 = _1391 * ((cbModelParam._m0[1u].w * (_1377 - _1282)) + _1282);
    float _1395 = _1391 * ((cbModelParam._m0[1u].w * (_1379 - _1284)) + _1284);
    float _1398 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, _1393 * cbSceneParam._m0[91u].x));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1452 = _1439 / _1451;
    float _1453 = _1443 / _1451;
    float _1454 = _1447 / _1451;
    float _1602;
    float _1603;
    float _1604;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1481 = ((uint(_1454 > cbSceneParam._m0[59u].y) + uint(_1454 > cbSceneParam._m0[59u].x)) + uint(_1454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1482 = _1481 + 43u;
        uint _1490 = _1481 + 44u;
        uint _1498 = _1481 + 45u;
        uint _1506 = _1481 + 46u;
        float _1517 = fma(_1451, cbSceneParam._m0[_1482].w, fma(_1447, cbSceneParam._m0[_1482].z, fma(_1443, cbSceneParam._m0[_1482].y, _1439 * cbSceneParam._m0[_1482].x)));
        float _1521 = fma(_1451, cbSceneParam._m0[_1490].w, fma(_1447, cbSceneParam._m0[_1490].z, fma(_1443, cbSceneParam._m0[_1490].y, _1439 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1451, cbSceneParam._m0[_1506].w, fma(_1447, cbSceneParam._m0[_1506].z, fma(_1443, cbSceneParam._m0[_1506].y, _1439 * cbSceneParam._m0[_1506].x)));
        float _1534 = cbSceneParam._m0[33u].z * _1529;
        float _1536 = cbSceneParam._m0[33u].w * _1529;
        float _1539 = fma(_1451, cbSceneParam._m0[_1498].w, fma(_1447, cbSceneParam._m0[_1498].z, fma(_1443, cbSceneParam._m0[_1498].y, _1439 * cbSceneParam._m0[_1498].x))) / _1529;
        float _1587 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
        float _3385 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1595 = (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 + _1517) / _1529, (_1536 + _1521) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1536 + _1517) / _1529, (_1521 - _1534) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1534) / _1529, (_1521 - _1536) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1536) / _1529, (_1534 + _1521) / _1529), _1539), 0.0)).x), vec4(0.25)));
        _1602 = 1.0 - (_1595 * cbSceneParam._m0[34u].x);
        _1603 = 1.0 - (_1595 * cbSceneParam._m0[34u].y);
        _1604 = 1.0 - (_1595 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1602 = 1.0;
        _1603 = 1.0;
        _1604 = 1.0;
    }
    float _1668;
    float _1670;
    float _1672;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1656 = fma(_1451, cbSceneParam._m0[63u].w, fma(_1447, cbSceneParam._m0[63u].z, fma(_1443, cbSceneParam._m0[63u].y, _1439 * cbSceneParam._m0[63u].x)));
        float _1657 = fma(_1451, cbSceneParam._m0[60u].w, fma(_1447, cbSceneParam._m0[60u].z, fma(_1443, cbSceneParam._m0[60u].y, _1439 * cbSceneParam._m0[60u].x))) / _1656;
        float _1658 = fma(_1451, cbSceneParam._m0[61u].w, fma(_1447, cbSceneParam._m0[61u].z, fma(_1443, cbSceneParam._m0[61u].y, _1439 * cbSceneParam._m0[61u].x))) / _1656;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1657 >= cbSceneParam._m0[64u].x) && (_1658 >= cbSceneParam._m0[64u].y)) && (_1657 <= cbSceneParam._m0[64u].z)) && (_1658 <= cbSceneParam._m0[64u].w))
        {
            float _1895 = fma(_1451, cbSceneParam._m0[62u].w, fma(_1447, cbSceneParam._m0[62u].z, fma(_1443, cbSceneParam._m0[62u].y, _1439 * cbSceneParam._m0[62u].x))) / _1656;
            float _1899 = isnan(cbSceneParam._m0[41u].w) ? _1895 : (isnan(_1895) ? cbSceneParam._m0[41u].w : max(_1895, cbSceneParam._m0[41u].w));
            float _1942 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
            float _3401 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
            float _1949 = (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1657, cbSceneParam._m0[33u].w + _1658), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1657, _1658 - cbSceneParam._m0[33u].z), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1657 - cbSceneParam._m0[33u].z, _1658 - cbSceneParam._m0[33u].w), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1657 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1658), _1899), 0.0)).x), vec4(0.25)));
            float _1953 = 1.0 - (_1949 * cbSceneParam._m0[34u].x);
            float _1954 = 1.0 - (_1949 * cbSceneParam._m0[34u].y);
            float _1955 = 1.0 - (_1949 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1954) ? _1603 : (isnan(_1603) ? _1954 : min(_1603, _1954));
            frontier_phi_42_41_ladder_1 = isnan(_1953) ? _1602 : (isnan(_1602) ? _1953 : min(_1602, _1953));
            frontier_phi_42_41_ladder_2 = isnan(_1955) ? _1604 : (isnan(_1604) ? _1955 : min(_1604, _1955));
        }
        else
        {
            frontier_phi_42_41_ladder = _1603;
            frontier_phi_42_41_ladder_1 = _1602;
            frontier_phi_42_41_ladder_2 = _1604;
        }
        _1668 = frontier_phi_42_41_ladder_1;
        _1670 = frontier_phi_42_41_ladder;
        _1672 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1668 = _1602;
        _1670 = _1603;
        _1672 = _1604;
    }
    uvec4 _1678 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1680 = _1678.x * 14u;
    uint _1681 = _1680 + 13u;
    float _1686 = _486 + (-1.0);
    float _1689 = (cbLight._m0[_1681].x * _1686) + 1.0;
    float _1690 = (cbLight._m0[_1681].y * _1686) + 1.0;
    uint _1691 = _1680 + 5u;
    float _1697 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1701 = _1680 + 4u;
    float _1710 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
    uint _1714 = _1680 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1680].xyz), vec3(0.0));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(0.0));
    float _3437 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3448 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1691].x * _1697) * _1735) + (((cbLight._m0[_1701].x * _1668) * _1710) * _1733);
    float _1743 = ((_1697 * cbLight._m0[_1691].y) * _1735) + (((cbLight._m0[_1701].y * _1670) * _1710) * _1733);
    float _1744 = ((_1697 * cbLight._m0[_1691].z) * _1735) + (((cbLight._m0[_1701].z * _1672) * _1710) * _1733);
    uint _1745 = _1680 + 8u;
    float _1751 = cbLight._m0[_1680].x + _438;
    float _1752 = cbLight._m0[_1680].y + _439;
    float _1753 = cbLight._m0[_1680].z + _440;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1761 = dot(vec3(0.0), vec3(cbLight._m0[_1680].xyz));
    float _3459 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _1765 = dot(vec3(0.0), vec3(_438, _439, _440));
    float _3470 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1751 * _1757, _1752 * _1757, _1753 * _1757));
    float _3481 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1786 = (0.5 / ((_1764 + 9.9999999392252902907785028219223e-09) + _1768)) * _1764;
    float _3492 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1788 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.31831014156341552734375;
    uint _1802 = _1680 + 9u;
    float _1808 = cbLight._m0[_1714].x + _438;
    float _1809 = cbLight._m0[_1714].y + _439;
    float _1810 = cbLight._m0[_1714].z + _440;
    float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
    float _1818 = dot(vec3(0.0), vec3(cbLight._m0[_1714].xyz));
    float _3503 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1808 * _1814, _1809 * _1814, _1810 * _1814));
    float _3514 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1835 = (0.5 / ((_1821 + 9.9999999392252902907785028219223e-09) + _1768)) * _1821;
    float _3525 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.31831014156341552734375;
    float _1847 = (((_1831 * cbLight._m0[_1802].x) * _1837) * _1697) + ((((cbLight._m0[_1745].x * _1668) * _1780) * _1788) * _1710);
    float _1848 = (((_1831 * cbLight._m0[_1802].y) * _1837) * _1697) + ((((cbLight._m0[_1745].y * _1670) * _1780) * _1788) * _1710);
    float _1849 = (((_1831 * cbLight._m0[_1802].z) * _1837) * _1697) + ((((cbLight._m0[_1745].z * _1672) * _1780) * _1788) * _1710);
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    if (_1678.y == 0u)
    {
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _447) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _446) / _1968)));
        float _1989 = (log2(_1454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1999 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _2000 = _1999.x;
        uint _2001 = _1967.z;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        if (((((1u << ((_2001 >> 4u) & 15u)) + 4294967295u) & _2000) == 0u) || ((_2001 & 240u) == 0u))
        {
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
        }
        else
        {
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            uint _2282 = 0u;
            uint _2291;
            bool _2292;
            for (;;)
            {
                _2291 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2282 << 2u)) >> 2u)).x;
                _2292 = _2291 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2292)
                {
                    frontier_phi_66_pred = _2277;
                    frontier_phi_66_pred_1 = _2276;
                    frontier_phi_66_pred_2 = _2278;
                    frontier_phi_66_pred_3 = _2281;
                    frontier_phi_66_pred_4 = _2280;
                    frontier_phi_66_pred_5 = _2279;
                }
                else
                {
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    uint _2427;
                    _2421 = _2276;
                    _2422 = _2277;
                    _2423 = _2278;
                    _2424 = _2279;
                    _2425 = _2280;
                    _2426 = _2281;
                    _2427 = _2291;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    for (;;)
                    {
                        uint _2431 = uint(findLSB(_2427)) + (_2282 << 5u);
                        uint _2428 = (_2427 + 4294967295u) & _2427;
                        uint _2433 = _2431 * 48u;
                        vec4 _2447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2433)).x, texelFetch(g_PointLightRenderingBuffer, int(_2433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2433 + 3u)).x));
                        uint _2453 = (_2431 * 48u) + 4u;
                        vec4 _2466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2453)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2453 + 3u)).x));
                        uint _2472 = (_2431 * 48u) + 8u;
                        vec3 _2483 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2472)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 2u)).x));
                        float _2487 = _2447.x - _1452;
                        float _2488 = _2447.y - _1453;
                        float _2489 = _2447.z - _1454;
                        float _2490 = dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489));
                        float _2493 = inversesqrt(_2490);
                        float _2502 = 1.0 - (_2490 * _2447.w);
                        float _3546 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
                        float _2503 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
                        float _2504 = sqrt(_2490) * _2466.w;
                        float _2507 = 1.39999997615814208984375 / (_2504 + 1.39999997615814208984375);
                        float _2508 = _2507 * _2507;
                        float _2511 = ((1.0 - _2508) * dot(vec3(0.0), vec3(_2493 * _2487, _2493 * _2488, _2493 * _2489))) + _2508;
                        float _2514 = _2504 * _2504;
                        float _2518 = ((isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0))) * _2503) / ((_2514 * 0.699999988079071044921875) + 1.0);
                        float _2522 = (-0.0) - _1452;
                        float _2523 = (-0.0) - _1453;
                        float _2524 = (-0.0) - _1454;
                        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
                        float _2532 = dot(vec3(0.0), vec3(_2528 * _2522, _2528 * _2523, _2528 * _2524));
                        float _3562 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
                        float _3573 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
                        float _2536 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                        float _2540 = (0.5 / (((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) + 9.9999999392252902907785028219223e-09) + _2536)) * _2536;
                        float _3584 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
                        float _2549 = (((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * 3.1415927410125732421875) / ((_2514 * 2.1991131305694580078125) + 3.141590118408203125)) * _2503;
                        _2356 = (_2518 * _2466.x) + _2424;
                        _2357 = (_2518 * _2466.y) + _2425;
                        _2358 = (_2518 * _2466.z) + _2426;
                        _2353 = (_2549 * _2483.x) + _2421;
                        _2354 = (_2549 * _2483.y) + _2422;
                        _2355 = (_2549 * _2483.z) + _2423;
                        if (_2428 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2421 = _2353;
                            _2422 = _2354;
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2358;
                            _2427 = _2428;
                        }
                    }
                    frontier_phi_66_pred = _2354;
                    frontier_phi_66_pred_1 = _2353;
                    frontier_phi_66_pred_2 = _2355;
                    frontier_phi_66_pred_3 = _2358;
                    frontier_phi_66_pred_4 = _2357;
                    frontier_phi_66_pred_5 = _2356;
                }
                _2111 = frontier_phi_66_pred;
                _2109 = frontier_phi_66_pred_1;
                _2113 = frontier_phi_66_pred_2;
                _2119 = frontier_phi_66_pred_3;
                _2117 = frontier_phi_66_pred_4;
                _2115 = frontier_phi_66_pred_5;
                uint _2283 = _2282 + 1u;
                if (_2283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2276 = _2109;
                    _2277 = _2111;
                    _2278 = _2113;
                    _2279 = _2115;
                    _2280 = _2117;
                    _2281 = _2119;
                    _2282 = _2283;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
        }
        uvec4 _2122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2123 = _2122.z;
        uint _2125 = (_2123 >> 8u) & 15u;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        if (((4294967295u << _2125) & _2000) == 0u)
        {
            _2247 = _2108;
            _2249 = _2110;
            _2251 = _2112;
            _2253 = _2114;
            _2255 = _2116;
            _2257 = _2118;
        }
        else
        {
            float _2272 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2125 < ((_2123 >> 12u) & 15u))
            {
                float _2248;
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2404 = _2108;
                float _2405 = _2110;
                float _2406 = _2112;
                float _2407 = _2114;
                float _2408 = _2116;
                float _2409 = _2118;
                uint _2410 = _2125;
                uint _2419;
                bool _2420;
                for (;;)
                {
                    _2419 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2410 << 2u)) >> 2u)).x;
                    _2420 = _2419 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2420)
                    {
                        frontier_phi_72_pred = _2405;
                        frontier_phi_72_pred_1 = _2404;
                        frontier_phi_72_pred_2 = _2409;
                        frontier_phi_72_pred_3 = _2408;
                        frontier_phi_72_pred_4 = _2407;
                        frontier_phi_72_pred_5 = _2406;
                    }
                    else
                    {
                        float _2554;
                        float _2555;
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2559;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2567 = _2404;
                        float _2568 = _2405;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        float _2572 = _2409;
                        uint _2573 = _2419;
                        uint _2574;
                        vec4 _2599;
                        float _2600;
                        vec4 _2615;
                        vec3 _2627;
                        vec4 _2643;
                        vec4 _2658;
                        float _2704;
                        bool _2705;
                        for (;;)
                        {
                            uint _2584 = ((_2410 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2573));
                            _2574 = (_2573 + 4294967295u) & _2573;
                            uint _2586 = _2584 * 40u;
                            _2599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 3u)).x));
                            _2600 = _2599.w;
                            uint _2602 = (_2584 * 40u) + 4u;
                            _2615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 3u)).x));
                            uint _2617 = (_2584 * 40u) + 8u;
                            _2627 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 2u)).x));
                            uint _2630 = (_2584 * 40u) + 16u;
                            _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            uint _2645 = (_2584 * 40u) + 20u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            uint _2660 = (_2584 * 40u) + 24u;
                            vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            uint _2679 = (_2584 * 40u) + 28u;
                            vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            _2704 = fma(_1454, _2692.z, fma(_1453, _2692.y, _2692.x * _1452)) + _2692.w;
                            _2705 = !((fma(_1454, _2673.z, fma(_1453, _2673.y, _2673.x * _1452)) + _2673.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2705)
                            {
                                float _2732 = _2599.x - _1452;
                                float _2733 = _2599.y - _1453;
                                float _2734 = _2599.z - _1454;
                                float _2735 = dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734));
                                float _2738 = inversesqrt(_2735);
                                float _2739 = _2738 * _2732;
                                float _2740 = _2738 * _2733;
                                float _2741 = _2738 * _2734;
                                float _2745 = 1.0 - (_2735 / (_2600 * _2600));
                                float _3595 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2746 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                                float _2750 = sqrt(_2735) * _2615.w;
                                float _2752 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                                float _2753 = _2752 * _2752;
                                float _2754 = 1.0 - _2753;
                                float _2756 = (_2754 * dot(vec3(_2739, _2740, _2741), vec3(0.0))) + _2753;
                                float _2759 = _2750 * _2750;
                                float _2763 = (fma(_1454, _2643.z, fma(_1453, _2643.y, _2643.x * _1452)) + _2643.w) / _2704;
                                float _2764 = (fma(_1454, _2658.z, fma(_1453, _2658.y, _2658.x * _1452)) + _2658.w) / _2704;
                                float _2768 = 1.0 - dot(vec2(_2763, _2764), vec2(_2763, _2764));
                                float _3611 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2769 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2770 = _2769 * (((isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))) * _2746) / ((_2759 * 0.699999988079071044921875) + 1.0));
                                float _2780 = dot(vec3(0.0), vec3((-0.0) - (_1452 * _2272), (-0.0) - (_1453 * _2272), (-0.0) - (_1454 * _2272)));
                                float _3622 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                                float _2788 = (_2754 * dot(vec3(0.0), vec3(_2739, _2740, _2741))) + _2753;
                                float _3633 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2789 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
                                float _2793 = (0.5 / (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) + 9.9999999392252902907785028219223e-09) + _2789)) * _2789;
                                float _3644 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                                float _2800 = (_2769 * _2746) * (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 3.1415927410125732421875) / ((_2759 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2800 * _2627.y;
                                frontier_phi_78_pred_1 = _2800 * _2627.x;
                                frontier_phi_78_pred_2 = _2770 * _2615.z;
                                frontier_phi_78_pred_3 = _2770 * _2615.y;
                                frontier_phi_78_pred_4 = _2770 * _2615.x;
                                frontier_phi_78_pred_5 = _2800 * _2627.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2805 = frontier_phi_78_pred;
                            _2804 = frontier_phi_78_pred_1;
                            _2809 = frontier_phi_78_pred_2;
                            _2808 = frontier_phi_78_pred_3;
                            _2807 = frontier_phi_78_pred_4;
                            _2806 = frontier_phi_78_pred_5;
                            _2557 = _2807 + _2570;
                            _2558 = _2808 + _2571;
                            _2559 = _2809 + _2572;
                            _2554 = _2804 + _2567;
                            _2555 = _2805 + _2568;
                            _2556 = _2806 + _2569;
                            if (_2574 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2567 = _2554;
                                _2568 = _2555;
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2574;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2555;
                        frontier_phi_72_pred_1 = _2554;
                        frontier_phi_72_pred_2 = _2559;
                        frontier_phi_72_pred_3 = _2558;
                        frontier_phi_72_pred_4 = _2557;
                        frontier_phi_72_pred_5 = _2556;
                    }
                    _2250 = frontier_phi_72_pred;
                    _2248 = frontier_phi_72_pred_1;
                    _2258 = frontier_phi_72_pred_2;
                    _2256 = frontier_phi_72_pred_3;
                    _2254 = frontier_phi_72_pred_4;
                    _2252 = frontier_phi_72_pred_5;
                    uint _2411 = _2410 + 1u;
                    if (_2411 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2404 = _2248;
                        _2405 = _2250;
                        _2406 = _2252;
                        _2407 = _2254;
                        _2408 = _2256;
                        _2409 = _2258;
                        _2410 = _2411;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2258;
                frontier_phi_59_60_ladder_1 = _2254;
                frontier_phi_59_60_ladder_2 = _2252;
                frontier_phi_59_60_ladder_3 = _2250;
                frontier_phi_59_60_ladder_4 = _2248;
                frontier_phi_59_60_ladder_5 = _2256;
            }
            else
            {
                frontier_phi_59_60_ladder = _2118;
                frontier_phi_59_60_ladder_1 = _2114;
                frontier_phi_59_60_ladder_2 = _2112;
                frontier_phi_59_60_ladder_3 = _2110;
                frontier_phi_59_60_ladder_4 = _2108;
                frontier_phi_59_60_ladder_5 = _2116;
            }
            _2247 = frontier_phi_59_60_ladder_4;
            _2249 = frontier_phi_59_60_ladder_3;
            _2251 = frontier_phi_59_60_ladder_2;
            _2253 = frontier_phi_59_60_ladder_1;
            _2255 = frontier_phi_59_60_ladder_5;
            _2257 = frontier_phi_59_60_ladder;
        }
        float _2262 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2013 = (_2262 * _2253) + _1742;
        _2015 = (_2262 * _2255) + _1743;
        _2017 = (_2262 * _2257) + _1744;
        _2019 = ((_2247 * 0.039999999105930328369140625) * _2262) + _1847;
        _2021 = ((_2249 * 0.039999999105930328369140625) * _2262) + _1848;
        _2023 = ((_2251 * 0.039999999105930328369140625) * _2262) + _1849;
    }
    else
    {
        _2013 = _1742;
        _2015 = _1743;
        _2017 = _1744;
        _2019 = _1847;
        _2021 = _1848;
        _2023 = _1849;
    }
    float _3660 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3671 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3682 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2040 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_2013 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _486))) + ((_2019 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2041 = ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_2015 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _486))) + ((_2021 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2042 = ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_2017 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _486))) + ((_2023 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    uint _2046 = _460 + 6u;
    float _2054 = _446 / cbSceneParam._m0[86u].x;
    float _2055 = _447 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2133 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2134 = _2133 / _433;
        float _2145 = _2134 * _254;
        float _2146 = _255 * _2134;
        float _2147 = (-0.0) - _2146;
        float _2148 = _2134 * _256;
        float _2150 = (cbSceneParam._m0[77u].w * _2147) / _2133;
        float _2151 = _2150 + cbSceneParam._m0[79u].w;
        float _2152 = cbSceneParam._m0[79u].w - _2146;
        float _2158 = sqrt(((_2145 * _2145) + (_2146 * _2146)) + (_2148 * _2148));
        float _2161 = (1.0 - (cbSceneParam._m0[77u].w / _2133)) * _2158;
        float _2166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2366;
        if (abs((_2147 - _2150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2366 = ((((_2151 > 0.0) ? exp2(_2166 * _2151) : (2.0 - exp2(_2168 * _2151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2161;
        }
        else
        {
            float _2305 = 1.0 / cbSceneParam._m0[80u].x;
            float _2306 = isnan(_2152) ? _2151 : (isnan(_2151) ? _2152 : max(_2151, _2152));
            float _2307 = isnan(_2152) ? _2151 : (isnan(_2151) ? _2152 : min(_2151, _2152));
            float _2316 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : min(_2306, 0.0));
            float _2317 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : min(_2307, 0.0));
            _2366 = ((abs(_2158 / _2147) * cbSceneParam._m0[80u].y) * ((((_2316 - _2317) * 2.0) - ((exp2(_2166 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)))) - exp2(_2166 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))))) * _2305)) - ((exp2(_2168 * _2316) - exp2(_2168 * _2317)) * _2305))) + (_2161 * cbSceneParam._m0[80u].z);
        }
        vec4 _2368 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2377 = exp2((_2366 * (-1.44269502162933349609375)) * (1.0 - _2368.w));
        float _2378 = log2(_2377);
        float _2394 = log2(_2074);
        _2170 = (exp2(_2394 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].x)) * _2368.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2172 = (exp2(_2394 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].y)) * _2368.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2174 = (exp2(_2394 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].z)) * _2368.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2176 = _2377 * _2074;
    }
    else
    {
        _2170 = _2071;
        _2172 = _2072;
        _2174 = _2073;
        _2176 = _2074;
    }
    float _2188 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2189 = _2188 == 3.0;
    float _2191 = log2(_2176);
    float _2198 = exp2(_2191 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2199 = exp2(_2191 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)));
    float _2200 = exp2(_2191 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2209 = (_2188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2209 * (_2189 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2170)));
    SV_Target.y = _2209 * (_2189 ? _2199 : (_2199 + (cbSceneParam._m0[72u].w * _2172)));
    SV_Target.z = _2209 * (_2189 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.w = cbInstanceData._m0[_2046].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2046].w;
}


