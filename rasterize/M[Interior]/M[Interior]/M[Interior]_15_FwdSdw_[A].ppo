#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1184;
float _3602;
float _3603;
float _3604;
float _3605;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _349 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _385 = cbMtdParam._m0[21u].w + _271;
    float _386 = cbMtdParam._m0[22u].x + _272;
    float _387 = cbMtdParam._m0[22u].y + _273;
    float _401 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_200, _201, _202));
    float _402 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_214, _215, _216));
    float _403 = (-0.0) - dot(vec3(_385, _386, _387), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _407 * _403;
    float _411 = (_407 * _401) + ((cbMtdParam._m0[19u].w * _289) * ((_349.x * 2.0) + (-1.0)));
    float _412 = (_407 * _402) + ((cbMtdParam._m0[20u].x * _289) * ((_349.y * 2.0) + (-1.0)));
    float _413 = _411 * cbMtdParam._m0[18u].z;
    float _414 = _412 * cbMtdParam._m0[18u].y;
    float _415 = fract(TEXCOORD.x);
    float _416 = fract(TEXCOORD.y);
    float _422;
    if (_413 > 0.0)
    {
        _422 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _422 = frontier_phi_3_2_ladder;
    }
    float _430;
    if (_414 > 0.0)
    {
        _430 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _430 = frontier_phi_7_6_ladder;
    }
    bool _432 = _410 > 0.0;
    float _434 = _432 ? (cbMtdParam._m0[15u].x / _410) : 5000.0;
    float _435 = isnan(_430) ? _422 : (isnan(_422) ? _430 : min(_422, _430));
    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
    float _440 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = _415 + (-0.5);
    float _444 = _416 + (-0.5);
    float _447 = ((_436 * _410) + _440) / _440;
    vec4 _471 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_441 + (_436 * _413)) / _447) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_444 + (_436 * _414)) / _447) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _484 = (_471.x * _289) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _289) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _289) * cbMtdParam._m0[9u].z;
    float _504 = _411 * cbMtdParam._m0[20u].z;
    float _505 = _412 * cbMtdParam._m0[20u].y;
    bool _506 = _504 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _511 = frontier_phi_11_10_ladder;
    }
    bool _513 = _505 > 0.0;
    float _518;
    if (_513)
    {
        _518 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _518 = frontier_phi_15_14_ladder;
    }
    float _521 = _432 ? (cbMtdParam._m0[16u].x / _410) : 5000.0;
    float _522 = isnan(_518) ? _511 : (isnan(_511) ? _518 : min(_511, _518));
    float _523 = isnan(_521) ? _522 : (isnan(_522) ? _521 : min(_522, _521));
    float _527 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _531 = ((_523 * _410) + _527) / _527;
    float _536 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _538 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _554 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_441 + (_523 * _504)) / _531) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_444 + (_523 * _505)) / _531) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _569;
    if (_506)
    {
        _569 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _569 = frontier_phi_19_18_ladder;
    }
    float _575;
    if (_513)
    {
        _575 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _575 = frontier_phi_23_22_ladder;
    }
    float _577 = isnan(_575) ? _569 : (isnan(_569) ? _575 : min(_569, _575));
    float _578 = isnan(_521) ? _577 : (isnan(_577) ? _521 : min(_577, _521));
    float _585 = ((_578 * _410) + _527) / _527;
    vec4 _606 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_441 + (_578 * _504)) / _585) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_444 + (_578 * _505)) / _585) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _618 = _289 * 0.1500000059604644775390625;
    float _629 = (_618 * ((_484 - _324) + (((((cbMtdParam._m0[10u].x * _289) * _554.x) - _484) * _289) * _608))) + _324;
    float _630 = (_618 * ((_485 - _326) + (((((cbMtdParam._m0[10u].y * _289) * _554.y) - _485) * _289) * _608))) + _326;
    float _631 = (_618 * ((_486 - _328) + (((((cbMtdParam._m0[10u].z * _289) * _554.z) - _486) * _289) * _608))) + _328;
    vec4 _643 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _647 = _643.z;
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3644 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _657 = sqrt(1.0 - (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))));
    float _660 = fma(_657, _207, fma(_651, _214, _650 * _200));
    float _663 = fma(_657, _208, fma(_651, _215, _650 * _201));
    float _666 = fma(_657, _209, fma(_651, _216, _650 * _202));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3655 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _674 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3677 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3688 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _698 = _271 * _697;
    float _699 = _272 * _697;
    float _700 = _273 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _865 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _871 = (cbMatDynParam._m0[5u].x * _865) + cbMatDynParam._m0[5u].y;
        float _3699 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _876 = (cbMatDynParam._m0[5u].z * _865) + cbMatDynParam._m0[5u].w;
        float _3710 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) - _872)) + _872) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _719 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _720 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _743 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _746 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _759 = uint(roundEven(NORMAL.w)) * 13u;
    uint _761 = _759 + 9u;
    uint _762 = _761 + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3721 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    vec4 _782 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _719, cbSceneParam._m0[86u].y * _720));
    float _785 = _782.x * TEXCOORD.z;
    float _786 = dot(vec3(_671, _672, _673), vec3(_698, _699, _700));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _671) - _698;
    float _794 = (_789 * _672) - _699;
    float _795 = (_789 * _673) - _700;
    float _799 = abs(dot(vec3(_698, _699, _700), vec3(_671, _672, _673)));
    float _3754 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_674);
    float _814 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _914 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _918 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _941 = _846 + _671;
        float _942 = _850 + _672;
        float _943 = _854 + _673;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _910;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _914;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _918;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_671, _672, _673), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3802 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_671, _672, _673), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3835 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_671, _672, _673), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3868 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1231 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1235 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1258 = _846 + _671;
        float _1259 = _850 + _672;
        float _1260 = _854 + _673;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_671, _672, _673), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3931 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_671, _672, _673), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3964 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_671, _672, _673), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3997 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = _1184;
        _1505 = _1184;
        _1506 = _1184;
        _1507 = _1184;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1197)) + _1197;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1198)) + _1198;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _793 * 0.5;
    float _1565 = _794 * 0.5;
    float _1566 = _795 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1695 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1698 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1726 = frontier_phi_41_39_ladder;
        }
        float _1894;
        if (_1695 > 0.0)
        {
            _1894 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1894 = frontier_phi_50_46_ladder;
        }
        float _2338;
        if (_1698 > 0.0)
        {
            _2338 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2338 = frontier_phi_62_57_ladder;
        }
        float _2340 = isnan(_1894) ? _1726 : (isnan(_1726) ? _1894 : min(_1726, _1894));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1692) + _1681;
        float _2346 = (_2341 * _1695) + _1685;
        float _2347 = (_2341 * _1698) + _1689;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_40_62_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_40_62_ladder_2;
        _1716 = frontier_phi_40_62_ladder_1;
        _1718 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1633);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1775 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1779 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1783 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1786 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1789 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1792 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _1899;
        if (_1786 > 0.0)
        {
            _1899 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1899 = frontier_phi_52_48_ladder;
        }
        float _2365;
        if (_1789 > 0.0)
        {
            _2365 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2365 = frontier_phi_64_59_ladder;
        }
        float _2710;
        if (_1792 > 0.0)
        {
            _2710 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2710 = frontier_phi_76_71_ladder;
        }
        float _2712 = isnan(_2365) ? _1899 : (isnan(_1899) ? _2365 : min(_1899, _2365));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1786) + _1775;
        float _2718 = (_2713 * _1789) + _1779;
        float _2719 = (_2713 * _1792) + _1783;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_49_76_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2856.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2856.y * cbModelParam._m0[1u].z;
        }
        _1811 = frontier_phi_49_76_ladder_1;
        _1813 = frontier_phi_49_76_ladder_2;
        _1815 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1723);
        _1811 = _1795.x * cbModelParam._m0[1u].z;
        _1813 = _1795.y * cbModelParam._m0[1u].z;
        _1815 = _1795.z * cbModelParam._m0[1u].z;
    }
    float _1827 = ((((1.0 - _814) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_814 * _801)) * _785;
    float _1828 = _1827 * ((cbModelParam._m0[1u].w * (_1811 - _1714)) + _1714);
    float _1829 = _1827 * ((cbModelParam._m0[1u].w * (_1813 - _1716)) + _1716);
    float _1830 = _1827 * ((cbModelParam._m0[1u].w * (_1815 - _1718)) + _1718);
    float _1833 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, _1828 * cbSceneParam._m0[91u].x));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1886 = _1873 / _1885;
    float _1887 = _1877 / _1885;
    float _1888 = _1881 / _1885;
    float _2035;
    float _2036;
    float _2037;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1915 = ((uint(_1888 > cbSceneParam._m0[59u].y) + uint(_1888 > cbSceneParam._m0[59u].x)) + uint(_1888 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1916 = _1915 + 43u;
        uint _1924 = _1915 + 44u;
        uint _1932 = _1915 + 45u;
        uint _1940 = _1915 + 46u;
        float _1951 = fma(_1885, cbSceneParam._m0[_1916].w, fma(_1881, cbSceneParam._m0[_1916].z, fma(_1877, cbSceneParam._m0[_1916].y, _1873 * cbSceneParam._m0[_1916].x)));
        float _1955 = fma(_1885, cbSceneParam._m0[_1924].w, fma(_1881, cbSceneParam._m0[_1924].z, fma(_1877, cbSceneParam._m0[_1924].y, _1873 * cbSceneParam._m0[_1924].x)));
        float _1963 = fma(_1885, cbSceneParam._m0[_1940].w, fma(_1881, cbSceneParam._m0[_1940].z, fma(_1877, cbSceneParam._m0[_1940].y, _1873 * cbSceneParam._m0[_1940].x)));
        float _1968 = cbSceneParam._m0[33u].z * _1963;
        float _1970 = cbSceneParam._m0[33u].w * _1963;
        float _1973 = fma(_1885, cbSceneParam._m0[_1932].w, fma(_1881, cbSceneParam._m0[_1932].z, fma(_1877, cbSceneParam._m0[_1932].y, _1873 * cbSceneParam._m0[_1932].x))) / _1963;
        float _2021 = (cbSceneParam._m0[33u].x - sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888))) * cbSceneParam._m0[33u].y;
        float _4123 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2028 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1951) / _1963, (_1970 + _1955) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 + _1951) / _1963, (_1955 - _1968) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 - _1968) / _1963, (_1955 - _1970) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 - _1970) / _1963, (_1968 + _1955) / _1963), _1973), 0.0)).x), vec4(0.25)));
        _2035 = 1.0 - (_2028 * cbSceneParam._m0[34u].x);
        _2036 = 1.0 - (_2028 * cbSceneParam._m0[34u].y);
        _2037 = 1.0 - (_2028 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2035 = 1.0;
        _2036 = 1.0;
        _2037 = 1.0;
    }
    float _2101;
    float _2103;
    float _2105;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2089 = fma(_1885, cbSceneParam._m0[63u].w, fma(_1881, cbSceneParam._m0[63u].z, fma(_1877, cbSceneParam._m0[63u].y, _1873 * cbSceneParam._m0[63u].x)));
        float _2090 = fma(_1885, cbSceneParam._m0[60u].w, fma(_1881, cbSceneParam._m0[60u].z, fma(_1877, cbSceneParam._m0[60u].y, _1873 * cbSceneParam._m0[60u].x))) / _2089;
        float _2091 = fma(_1885, cbSceneParam._m0[61u].w, fma(_1881, cbSceneParam._m0[61u].z, fma(_1877, cbSceneParam._m0[61u].y, _1873 * cbSceneParam._m0[61u].x))) / _2089;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2090 >= cbSceneParam._m0[64u].x) && (_2091 >= cbSceneParam._m0[64u].y)) && (_2090 <= cbSceneParam._m0[64u].z)) && (_2091 <= cbSceneParam._m0[64u].w))
        {
            float _2378 = fma(_1885, cbSceneParam._m0[62u].w, fma(_1881, cbSceneParam._m0[62u].z, fma(_1877, cbSceneParam._m0[62u].y, _1873 * cbSceneParam._m0[62u].x))) / _2089;
            float _2382 = isnan(cbSceneParam._m0[41u].w) ? _2378 : (isnan(_2378) ? cbSceneParam._m0[41u].w : max(_2378, cbSceneParam._m0[41u].w));
            float _2425 = (cbSceneParam._m0[33u].x - sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888))) * cbSceneParam._m0[33u].y;
            float _4139 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
            float _2432 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2090, cbSceneParam._m0[33u].w + _2091), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2090, _2091 - cbSceneParam._m0[33u].z), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2090 - cbSceneParam._m0[33u].z, _2091 - cbSceneParam._m0[33u].w), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2090 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2091), _2382), 0.0)).x), vec4(0.25)));
            float _2436 = 1.0 - (_2432 * cbSceneParam._m0[34u].x);
            float _2437 = 1.0 - (_2432 * cbSceneParam._m0[34u].y);
            float _2438 = 1.0 - (_2432 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2438) ? _2037 : (isnan(_2037) ? _2438 : min(_2037, _2438));
            frontier_phi_61_60_ladder_1 = isnan(_2437) ? _2036 : (isnan(_2036) ? _2437 : min(_2036, _2437));
            frontier_phi_61_60_ladder_2 = isnan(_2436) ? _2035 : (isnan(_2035) ? _2436 : min(_2035, _2436));
        }
        else
        {
            frontier_phi_61_60_ladder = _2037;
            frontier_phi_61_60_ladder_1 = _2036;
            frontier_phi_61_60_ladder_2 = _2035;
        }
        _2101 = frontier_phi_61_60_ladder_2;
        _2103 = frontier_phi_61_60_ladder_1;
        _2105 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2101 = _2035;
        _2103 = _2036;
        _2105 = _2037;
    }
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_759 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2118 = _785 + (-1.0);
    float _2121 = (cbLight._m0[_2113].x * _2118) + 1.0;
    float _2122 = (cbLight._m0[_2113].y * _2118) + 1.0;
    uint _2123 = _2112 + 5u;
    float _2129 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2133 = _2112 + 4u;
    float _2142 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2146 = _2112 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_671, _672, _673));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_671, _672, _673));
    float _4175 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4186 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2101) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2103) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2105) * _2142) * _2165);
    uint _2178 = _2112 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _674) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2112].x + _698;
    float _2194 = cbLight._m0[_2112].y + _699;
    float _2195 = cbLight._m0[_2112].z + _700;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2112].xyz));
    float _4197 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2207 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2208 = dot(vec3(_671, _672, _673), vec3(_2200, _2201, _2202));
    float _4219 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2200, _2201, _2202));
    float _4230 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2207 * ((_2206 * _2232) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2232) + _2192) * _2206))) * _2206;
    float _4241 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2259 = _2112 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _674) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2146].x + _698;
    float _2273 = cbLight._m0[_2146].y + _699;
    float _2274 = cbLight._m0[_2146].z + _700;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2146].xyz));
    float _4252 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2286 = dot(vec3(_671, _672, _673), vec3(_2279, _2280, _2281));
    float _4263 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2279, _2280, _2281));
    float _4274 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2308 = 1.0 - _2271;
    float _2318 = (0.5 / (((_2207 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2308) + _2271) * _2285))) * _2285;
    float _4285 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2330 = (((_2307 * cbLight._m0[_2259].x) * _2320) * _2129) + ((((cbLight._m0[_2178].x * _2101) * _2231) * _2245) * _2142);
    float _2331 = (((_2307 * cbLight._m0[_2259].y) * _2320) * _2129) + ((((cbLight._m0[_2178].y * _2103) * _2231) * _2245) * _2142);
    float _2332 = (((_2307 * cbLight._m0[_2259].z) * _2320) * _2129) + ((((cbLight._m0[_2178].z * _2105) * _2231) * _2245) * _2142);
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_2110.y == 0u)
    {
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.x;
        uint _2462 = uint((float(_2450.y) * floor(float(uint(cbSceneParam._m0[85u].y * _720) / _2451))) + floor(float(uint(cbSceneParam._m0[85u].x * _719) / _2451)));
        float _2472 = (log2(_1888 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2473 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        uint _2476 = uint(isnan(14.0) ? _2473 : (isnan(_2473) ? 14.0 : min(_2473, 14.0)));
        uvec4 _2481 = texelFetch(g_lightClusterGridBuffer, int(((_2476 << 2u) + (_2462 << 6u)) >> 2u));
        uint _2482 = _2481.x;
        uint _2483 = _2450.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2483 >> 4u) & 15u)) + 4294967295u) & _2482) == 0u) || ((_2483 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            uint _2774 = 0u;
            uint _2783;
            bool _2784;
            for (;;)
            {
                _2783 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                _2784 = _2783 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2784)
                {
                    frontier_phi_87_pred = _2768;
                    frontier_phi_87_pred_1 = _2773;
                    frontier_phi_87_pred_2 = _2772;
                    frontier_phi_87_pred_3 = _2771;
                    frontier_phi_87_pred_4 = _2770;
                    frontier_phi_87_pred_5 = _2769;
                }
                else
                {
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    uint _2940;
                    _2934 = _2768;
                    _2935 = _2769;
                    _2936 = _2770;
                    _2937 = _2771;
                    _2938 = _2772;
                    _2939 = _2773;
                    _2940 = _2783;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    for (;;)
                    {
                        uint _2944 = uint(findLSB(_2940)) + (_2774 << 5u);
                        uint _2941 = (_2940 + 4294967295u) & _2940;
                        uint _2946 = _2944 * 48u;
                        vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2966 = (_2944 * 48u) + 4u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2985 = (_2944 * 48u) + 8u;
                        vec3 _2996 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x));
                        float _3000 = _2960.x - _1886;
                        float _3001 = _2960.y - _1887;
                        float _3002 = _2960.z - _1888;
                        float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                        float _3006 = inversesqrt(_3003);
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3010 = dot(vec3(_740, _743, _746), vec3(_3007, _3008, _3009));
                        float _3015 = 1.0 - (_3003 * _2960.w);
                        float _4306 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3017 = sqrt(_3003) * _2979.w;
                        float _3020 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _3010) + _3021;
                        float _3027 = _3017 * _3017;
                        float _3031 = ((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3016) / ((_3027 * 0.699999988079071044921875) + 1.0);
                        float _3035 = (-0.0) - _1886;
                        float _3036 = (-0.0) - _1887;
                        float _3037 = (-0.0) - _1888;
                        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                        float _3042 = _3041 * _3035;
                        float _3043 = _3041 * _3036;
                        float _3044 = _3041 * _3037;
                        float _3051 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _801;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3042 + _3007;
                        float _3063 = _3043 + _3008;
                        float _3064 = _3044 + _3009;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_740, _743, _746), vec3(_3042, _3043, _3044));
                        float _4322 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3076 = dot(vec3(_740, _743, _746), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4333 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3020 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3010) + _3085;
                        float _4344 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4355 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3083 * _3083) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125))) * _3016;
                        _2864 = (_3031 * _2979.x) + _2937;
                        _2865 = (_3031 * _2979.y) + _2938;
                        _2866 = (_3031 * _2979.z) + _2939;
                        _2861 = (_3111 * _2996.x) + _2934;
                        _2862 = (_3111 * _2996.y) + _2935;
                        _2863 = (_3111 * _2996.z) + _2936;
                        if (_2941 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2941;
                        }
                    }
                    frontier_phi_87_pred = _2861;
                    frontier_phi_87_pred_1 = _2866;
                    frontier_phi_87_pred_2 = _2865;
                    frontier_phi_87_pred_3 = _2864;
                    frontier_phi_87_pred_4 = _2863;
                    frontier_phi_87_pred_5 = _2862;
                }
                _2591 = frontier_phi_87_pred;
                _2601 = frontier_phi_87_pred_1;
                _2599 = frontier_phi_87_pred_2;
                _2597 = frontier_phi_87_pred_3;
                _2595 = frontier_phi_87_pred_4;
                _2593 = frontier_phi_87_pred_5;
                uint _2775 = _2774 + 1u;
                if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2768 = _2591;
                    _2769 = _2593;
                    _2770 = _2595;
                    _2771 = _2597;
                    _2772 = _2599;
                    _2773 = _2601;
                    _2774 = _2775;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((4294967295u << _2607) & _2482) == 0u)
        {
            _2736 = _2590;
            _2738 = _2592;
            _2740 = _2594;
            _2742 = _2596;
            _2744 = _2598;
            _2746 = _2600;
        }
        else
        {
            float _2761 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
            float _2762 = _2761 * _1886;
            float _2763 = _2761 * _1887;
            float _2764 = _2761 * _1888;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2917 = _2590;
                float _2918 = _2592;
                float _2919 = _2594;
                float _2920 = _2596;
                float _2921 = _2598;
                float _2922 = _2600;
                uint _2923 = _2607;
                uint _2932;
                bool _2933;
                for (;;)
                {
                    _2932 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                    _2933 = _2932 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2933)
                    {
                        frontier_phi_98_pred = _2922;
                        frontier_phi_98_pred_1 = _2921;
                        frontier_phi_98_pred_2 = _2920;
                        frontier_phi_98_pred_3 = _2919;
                        frontier_phi_98_pred_4 = _2918;
                        frontier_phi_98_pred_5 = _2917;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        float _3140 = _2919;
                        float _3141 = _2920;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        uint _3144 = _2932;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3213;
                        vec4 _3228;
                        float _3274;
                        bool _3275;
                        for (;;)
                        {
                            uint _3155 = ((_2923 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3200 = (_3155 * 40u) + 16u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3215 = (_3155 * 40u) + 20u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3230 = (_3155 * 40u) + 24u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3249 = (_3155 * 40u) + 28u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3274 = fma(_1888, _3262.z, fma(_1887, _3262.y, _3262.x * _1886)) + _3262.w;
                            _3275 = !((fma(_1888, _3243.z, fma(_1887, _3243.y, _3243.x * _1886)) + _3243.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3275)
                            {
                                float _3302 = _3170.x - _1886;
                                float _3303 = _3170.y - _1887;
                                float _3304 = _3170.z - _1888;
                                float _3305 = dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304));
                                float _3308 = inversesqrt(_3305);
                                float _3309 = _3308 * _3302;
                                float _3310 = _3308 * _3303;
                                float _3311 = _3308 * _3304;
                                float _3315 = 1.0 - (_3305 / (_3171 * _3171));
                                float _4366 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3320 = sqrt(_3305) * _3186.w;
                                float _3322 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                                float _3323 = _3322 * _3322;
                                float _3326 = ((1.0 - _3323) * dot(vec3(_3309, _3310, _3311), vec3(_740, _743, _746))) + _3323;
                                float _3329 = _3320 * _3320;
                                float _3333 = (fma(_1888, _3213.z, fma(_1887, _3213.y, _3213.x * _1886)) + _3213.w) / _3274;
                                float _3334 = (fma(_1888, _3228.z, fma(_1887, _3228.y, _3228.x * _1886)) + _3228.w) / _3274;
                                float _3338 = 1.0 - dot(vec2(_3333, _3334), vec2(_3333, _3334));
                                float _4382 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3340 = _3339 * (((isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))) * _3316) / ((_3329 * 0.699999988079071044921875) + 1.0));
                                float _3352 = exp2(log2(1.0 / ((_3329 * 3.5) + 5.0)) * 0.25);
                                float _3353 = 1.0 - _801;
                                float _3360 = sqrt(1.0 - ((1.0 - (_3353 * _3353)) * (1.0 - (_3352 * _3352))));
                                float _3361 = _3360 * _3360;
                                float _3362 = _3361 * _3361;
                                float _3363 = _3309 - _2762;
                                float _3364 = _3310 - _2763;
                                float _3365 = _3311 - _2764;
                                float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                                float _3373 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2762, (-0.0) - _2763, (-0.0) - _2764));
                                float _4393 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3377 = dot(vec3(_740, _743, _746), vec3(_3369 * _3363, _3369 * _3364, _3369 * _3365));
                                float _4404 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3384 = ((_3380 * _3380) * (_3362 + (-1.0))) + 1.0;
                                float _3385 = _3322 * _3361;
                                float _3386 = _3385 * _3385;
                                float _3392 = ((1.0 - _3386) * dot(vec3(_740, _743, _746), vec3(_3309, _3310, _3311))) + _3386;
                                float _4415 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3394 = 1.0 - _3361;
                                float _3404 = (0.5 / (((_3393 * ((_3376 * _3394) + _3361)) + 9.9999999392252902907785028219223e-09) + (((_3393 * _3394) + _3361) * _3376))) * _3393;
                                float _4426 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3414 = (_3339 * _3316) * (((_3362 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3384 * _3384) * ((_3329 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3340 * _3186.y;
                                frontier_phi_104_pred_1 = _3340 * _3186.x;
                                frontier_phi_104_pred_2 = _3414 * _3198.z;
                                frontier_phi_104_pred_3 = _3414 * _3198.y;
                                frontier_phi_104_pred_4 = _3414 * _3198.x;
                                frontier_phi_104_pred_5 = _3340 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3422 = frontier_phi_104_pred;
                            _3421 = frontier_phi_104_pred_1;
                            _3420 = frontier_phi_104_pred_2;
                            _3419 = frontier_phi_104_pred_3;
                            _3418 = frontier_phi_104_pred_4;
                            _3423 = frontier_phi_104_pred_5;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3130;
                        frontier_phi_98_pred_1 = _3129;
                        frontier_phi_98_pred_2 = _3128;
                        frontier_phi_98_pred_3 = _3127;
                        frontier_phi_98_pred_4 = _3126;
                        frontier_phi_98_pred_5 = _3125;
                    }
                    _2747 = frontier_phi_98_pred;
                    _2745 = frontier_phi_98_pred_1;
                    _2743 = frontier_phi_98_pred_2;
                    _2741 = frontier_phi_98_pred_3;
                    _2739 = frontier_phi_98_pred_4;
                    _2737 = frontier_phi_98_pred_5;
                    uint _2924 = _2923 + 1u;
                    if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2917 = _2737;
                        _2918 = _2739;
                        _2919 = _2741;
                        _2920 = _2743;
                        _2921 = _2745;
                        _2922 = _2747;
                        _2923 = _2924;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2741;
                frontier_phi_78_79_ladder_1 = _2747;
                frontier_phi_78_79_ladder_2 = _2745;
                frontier_phi_78_79_ladder_3 = _2743;
                frontier_phi_78_79_ladder_4 = _2739;
                frontier_phi_78_79_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_78_79_ladder = _2594;
                frontier_phi_78_79_ladder_1 = _2600;
                frontier_phi_78_79_ladder_2 = _2598;
                frontier_phi_78_79_ladder_3 = _2596;
                frontier_phi_78_79_ladder_4 = _2592;
                frontier_phi_78_79_ladder_5 = _2590;
            }
            _2736 = frontier_phi_78_79_ladder_5;
            _2738 = frontier_phi_78_79_ladder_4;
            _2740 = frontier_phi_78_79_ladder;
            _2742 = frontier_phi_78_79_ladder_3;
            _2744 = frontier_phi_78_79_ladder_2;
            _2746 = frontier_phi_78_79_ladder_1;
        }
        float _2751 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2495 = (_2751 * _2742) + _2174;
        _2497 = (_2751 * _2744) + _2175;
        _2499 = (_2751 * _2746) + _2176;
        _2501 = ((_2736 * 0.039999999105930328369140625) * _2751) + _2330;
        _2503 = ((_2738 * 0.039999999105930328369140625) * _2751) + _2331;
        _2505 = ((_2740 * 0.039999999105930328369140625) * _2751) + _2332;
    }
    else
    {
        _2495 = _2174;
        _2497 = _2175;
        _2499 = _2176;
        _2501 = _2330;
        _2503 = _2331;
        _2505 = _2332;
    }
    float _4442 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4453 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4464 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _2522 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2495 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _785))) + ((_2501 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2523 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2497 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _785))) + ((_2503 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2499 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _785))) + ((_2505 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1622)) * cbPerFrame._m0[3u].x);
    float _2525 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    uint _2528 = _759 + 6u;
    float _2536 = _719 / cbSceneParam._m0[86u].x;
    float _2537 = _720 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2616 = _2615 / _693;
        float _2627 = _2616 * _271;
        float _2628 = _272 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _273;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2874;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2874 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2797 = 1.0 / cbSceneParam._m0[80u].x;
            float _2798 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2799 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            _2874 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2808 - _2809) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))))) * _2797)) - ((exp2(_2650 * _2808) - exp2(_2650 * _2809)) * _2797))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2876 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2885 = exp2((_2874 * (-1.44269502162933349609375)) * (1.0 - _2876.w));
        float _2886 = log2(_2885);
        float _2902 = log2(_2556);
        _2652 = (exp2(_2902 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].x)) * _2876.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2654 = (exp2(_2902 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].y)) * _2876.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2656 = (exp2(_2902 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2886 * cbSceneParam._m0[78u].z)) * _2876.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2658 = _2885 * _2556;
    }
    else
    {
        _2652 = _2553;
        _2654 = _2554;
        _2656 = _2555;
        _2658 = _2556;
    }
    bool _2912;
    vec4 _2668;
    vec4 _2690;
    float _2692;
    float _2696;
    float _2697;
    float _2698;
    float _2699;
    bool _2709;
    for (;;)
    {
        _2668 = cbMatDynParam._m0[0u];
        float _2670 = roundEven(_2668.y);
        bool _2671 = _2670 == 3.0;
        float _2672 = log2(_2658);
        float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * _2525;
        float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * _2526;
        float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * _2527;
        float _2688 = _707 + (-0.5);
        _2690 = cbMtdParam._m0[1u];
        _2692 = _2690.y * _2688;
        float _2695 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2696 = _2695 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
        _2697 = _2695 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
        _2698 = _2695 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
        _2699 = _2688 * 0.999000012874603271484375;
        _2709 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2709)
        {
            if ((cbInstanceData._m0[_759 + 7u].x + _2699) < 0.5)
            {
                _2912 = true;
                break;
            }
        }
        uint _2832 = _761 + uint(_2668.w);
        if ((cbInstanceData._m0[_2832].w < 1.0) && ((cbInstanceData._m0[_2832].w + _2699) < 0.5))
        {
            _2912 = true;
            break;
        }
        if ((_2692 + 1.0) < _2690.x)
        {
            _2912 = true;
            break;
        }
        _2912 = false;
        break;
    }
    float _3116;
    if (_2912)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = cbInstanceData._m0[_2528].w;
    }
    SV_Target.x = _2696;
    SV_Target.y = _2697;
    SV_Target.z = _2698;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
    discard_exit();
}


