#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _966;
float _3205;
float _3206;
float _3207;
float _3208;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _3247 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3258 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3269 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _569 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _573 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _574 = _265 * _573;
    float _575 = _266 * _573;
    float _576 = _267 * _573;
    vec4 _581 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _583 = _581.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _679 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _686 = (cbMatDynParam._m0[5u].x * _679) + cbMatDynParam._m0[5u].y;
        float _3280 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _691 = (cbMatDynParam._m0[5u].z * _679) + cbMatDynParam._m0[5u].w;
        float _3291 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) - _687)) + _687) < ((_583 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _609 = uint(roundEven(NORMAL.w)) * 13u;
    uint _611 = _609 + 9u;
    uint _612 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3302 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = (-0.0) - _574;
    float _637 = (-0.0) - _575;
    float _638 = (-0.0) - _576;
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _753 = (cbModelParam._m0[37u].x * ((((fma(_668, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _755 = (cbModelParam._m0[37u].y * ((((fma(_668, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _756 = (((((fma(_668, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_753, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_753, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_753, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_753, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(0.0), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3350 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3361 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3372 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(0.0), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3383 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3394 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3405 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(0.0), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3438 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = (cbModelParam._m0[38u].x * ((((fma(_668, cbModelParam._m0[30u].z, fma(_664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _660)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1038 = (cbModelParam._m0[38u].y * ((((fma(_668, cbModelParam._m0[31u].z, fma(_664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _660)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1039 = (((((fma(_668, cbModelParam._m0[32u].z, fma(_664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _660)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(0.0), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3501 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(0.0), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3534 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(0.0), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3567 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _966;
        _1245 = _966;
        _1246 = _966;
        _1247 = _966;
        _1248 = _966;
        _1249 = _966;
        _1250 = _966;
        _1251 = _966;
        _1252 = _966;
        _1253 = _966;
        _1254 = _966;
        _1255 = _966;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _978)) + _978;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _979)) + _979;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _980)) + _980;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _574 * (-0.5);
    float _1313 = _575 * (-0.5);
    float _1314 = _576 * (-0.5);
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_965, _969, _972, _975));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_967, _970, _973, _976));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_968, _971, _974, _977));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1428 = fma(_668, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660)) + cbModelParam._m0[13u].w;
        float _1432 = fma(_668, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660)) + cbModelParam._m0[14u].w;
        float _1436 = fma(_668, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660)) + cbModelParam._m0[15u].w;
        float _1439 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1442 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1445 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1471;
        if (_1439 > 0.0)
        {
            _1471 = abs((1.0 - _1428) / _1439);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1428 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1471 = frontier_phi_41_39_ladder;
        }
        float _1641;
        if (_1442 > 0.0)
        {
            _1641 = abs((1.0 - _1432) / _1442);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1432 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1641 = frontier_phi_50_46_ladder;
        }
        float _2035;
        if (_1445 > 0.0)
        {
            _2035 = abs((1.0 - _1436) / _1445);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1436 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2035 = frontier_phi_62_57_ladder;
        }
        float _2037 = isnan(_1641) ? _1471 : (isnan(_1471) ? _1641 : min(_1471, _1641));
        float _2038 = isnan(_2035) ? _2037 : (isnan(_2037) ? _2035 : min(_2037, _2035));
        float _2042 = (_2038 * _1439) + _1428;
        float _2043 = (_2038 * _1442) + _1432;
        float _2044 = (_2038 * _1445) + _1436;
        float _2045 = _2038 * 9.9999997473787516355514526367188e-05;
        float _2047 = (-1.0) - _2045;
        float _2049 = _2045 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2044 > _2049) || ((_2044 < _2047) || ((_2043 > _2049) || ((_2043 < _2047) || ((_2042 < _2047) || (_2042 > _2049))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2044, cbModelParam._m0[9u].z, fma(_2043, cbModelParam._m0[9u].y, _2042 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2044, cbModelParam._m0[10u].z, fma(_2043, cbModelParam._m0[10u].y, _2042 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2044, cbModelParam._m0[11u].z, fma(_2043, cbModelParam._m0[11u].y, _2042 * cbModelParam._m0[11u].x))), _1379);
            frontier_phi_40_62_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1461 = frontier_phi_40_62_ladder_2;
        _1463 = frontier_phi_40_62_ladder_1;
        _1465 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1379);
        _1461 = _1449.x * cbModelParam._m0[1u].y;
        _1463 = _1449.y * cbModelParam._m0[1u].y;
        _1465 = _1449.z * cbModelParam._m0[1u].y;
    }
    float _1468 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1520 = fma(_668, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660)) + cbModelParam._m0[21u].w;
        float _1524 = fma(_668, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660)) + cbModelParam._m0[22u].w;
        float _1528 = fma(_668, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660)) + cbModelParam._m0[23u].w;
        float _1531 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1534 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1537 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1646;
        if (_1531 > 0.0)
        {
            _1646 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1646 = frontier_phi_52_48_ladder;
        }
        float _2062;
        if (_1534 > 0.0)
        {
            _2062 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2062 = frontier_phi_64_59_ladder;
        }
        float _2409;
        if (_1537 > 0.0)
        {
            _2409 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2409 = frontier_phi_76_71_ladder;
        }
        float _2411 = isnan(_2062) ? _1646 : (isnan(_1646) ? _2062 : min(_1646, _2062));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1531) + _1520;
        float _2417 = (_2412 * _1534) + _1524;
        float _2418 = (_2412 * _1537) + _1528;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_49_76_ladder = _2552.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2552.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2552.y * cbModelParam._m0[1u].z;
        }
        _1556 = frontier_phi_49_76_ladder_1;
        _1558 = frontier_phi_49_76_ladder_2;
        _1560 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1468);
        _1556 = _1540.x * cbModelParam._m0[1u].z;
        _1558 = _1540.y * cbModelParam._m0[1u].z;
        _1560 = _1540.z * cbModelParam._m0[1u].z;
    }
    float _1572 = _635 * 0.01200000010430812835693359375;
    float _1574 = _1572 * ((cbModelParam._m0[1u].w * (_1556 - _1461)) + _1461);
    float _1575 = _1572 * ((cbModelParam._m0[1u].w * (_1558 - _1463)) + _1463);
    float _1576 = _1572 * ((cbModelParam._m0[1u].w * (_1560 - _1465)) + _1465);
    float _1579 = fma(_1576, cbSceneParam._m0[89u].z, fma(_1575, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1576, cbSceneParam._m0[90u].z, fma(_1575, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1576, cbSceneParam._m0[91u].z, fma(_1575, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    float _1620 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1624 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1633 = _1620 / _1632;
    float _1634 = _1624 / _1632;
    float _1635 = _1628 / _1632;
    float _1783;
    float _1784;
    float _1785;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1662 = ((uint(_1635 > cbSceneParam._m0[59u].y) + uint(_1635 > cbSceneParam._m0[59u].x)) + uint(_1635 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1663 = _1662 + 43u;
        uint _1671 = _1662 + 44u;
        uint _1679 = _1662 + 45u;
        uint _1687 = _1662 + 46u;
        float _1698 = fma(_1632, cbSceneParam._m0[_1663].w, fma(_1628, cbSceneParam._m0[_1663].z, fma(_1624, cbSceneParam._m0[_1663].y, _1620 * cbSceneParam._m0[_1663].x)));
        float _1702 = fma(_1632, cbSceneParam._m0[_1671].w, fma(_1628, cbSceneParam._m0[_1671].z, fma(_1624, cbSceneParam._m0[_1671].y, _1620 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1632, cbSceneParam._m0[_1687].w, fma(_1628, cbSceneParam._m0[_1687].z, fma(_1624, cbSceneParam._m0[_1687].y, _1620 * cbSceneParam._m0[_1687].x)));
        float _1715 = cbSceneParam._m0[33u].z * _1710;
        float _1717 = cbSceneParam._m0[33u].w * _1710;
        float _1720 = fma(_1632, cbSceneParam._m0[_1679].w, fma(_1628, cbSceneParam._m0[_1679].z, fma(_1624, cbSceneParam._m0[_1679].y, _1620 * cbSceneParam._m0[_1679].x))) / _1710;
        float _1768 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
        float _3693 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1776 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1715 + _1698) / _1710, (_1717 + _1702) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1717 + _1698) / _1710, (_1702 - _1715) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1715) / _1710, (_1702 - _1717) / _1710), _1720), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 - _1717) / _1710, (_1715 + _1702) / _1710), _1720), 0.0)).x), vec4(0.25)));
        _1783 = 1.0 - (_1776 * cbSceneParam._m0[34u].x);
        _1784 = 1.0 - (_1776 * cbSceneParam._m0[34u].y);
        _1785 = 1.0 - (_1776 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1783 = 1.0;
        _1784 = 1.0;
        _1785 = 1.0;
    }
    float _1849;
    float _1851;
    float _1853;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1837 = fma(_1632, cbSceneParam._m0[63u].w, fma(_1628, cbSceneParam._m0[63u].z, fma(_1624, cbSceneParam._m0[63u].y, _1620 * cbSceneParam._m0[63u].x)));
        float _1838 = fma(_1632, cbSceneParam._m0[60u].w, fma(_1628, cbSceneParam._m0[60u].z, fma(_1624, cbSceneParam._m0[60u].y, _1620 * cbSceneParam._m0[60u].x))) / _1837;
        float _1839 = fma(_1632, cbSceneParam._m0[61u].w, fma(_1628, cbSceneParam._m0[61u].z, fma(_1624, cbSceneParam._m0[61u].y, _1620 * cbSceneParam._m0[61u].x))) / _1837;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_1838 >= cbSceneParam._m0[64u].x) && (_1839 >= cbSceneParam._m0[64u].y)) && (_1838 <= cbSceneParam._m0[64u].z)) && (_1839 <= cbSceneParam._m0[64u].w))
        {
            float _2075 = fma(_1632, cbSceneParam._m0[62u].w, fma(_1628, cbSceneParam._m0[62u].z, fma(_1624, cbSceneParam._m0[62u].y, _1620 * cbSceneParam._m0[62u].x))) / _1837;
            float _2079 = isnan(cbSceneParam._m0[41u].w) ? _2075 : (isnan(_2075) ? cbSceneParam._m0[41u].w : max(_2075, cbSceneParam._m0[41u].w));
            float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635))) * cbSceneParam._m0[33u].y;
            float _3709 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
            float _2129 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1838, cbSceneParam._m0[33u].w + _1839), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1838, _1839 - cbSceneParam._m0[33u].z), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].z, _1839 - cbSceneParam._m0[33u].w), _2079), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1838 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1839), _2079), 0.0)).x), vec4(0.25)));
            float _2133 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
            float _2134 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
            float _2135 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2135) ? _1785 : (isnan(_1785) ? _2135 : min(_1785, _2135));
            frontier_phi_61_60_ladder_1 = isnan(_2134) ? _1784 : (isnan(_1784) ? _2134 : min(_1784, _2134));
            frontier_phi_61_60_ladder_2 = isnan(_2133) ? _1783 : (isnan(_1783) ? _2133 : min(_1783, _2133));
        }
        else
        {
            frontier_phi_61_60_ladder = _1785;
            frontier_phi_61_60_ladder_1 = _1784;
            frontier_phi_61_60_ladder_2 = _1783;
        }
        _1849 = frontier_phi_61_60_ladder_2;
        _1851 = frontier_phi_61_60_ladder_1;
        _1853 = frontier_phi_61_60_ladder;
    }
    else
    {
        _1849 = _1783;
        _1851 = _1784;
        _1853 = _1785;
    }
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_609 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1866 = _635 + (-1.0);
    float _1869 = (cbLight._m0[_1861].x * _1866) + 1.0;
    float _1870 = (cbLight._m0[_1861].y * _1866) + 1.0;
    uint _1871 = _1860 + 5u;
    float _1877 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1881 = _1860 + 4u;
    float _1890 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1894 = _1860 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1860].xyz), vec3(0.0));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(0.0));
    float _3745 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _3756 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1871].x * _1877) * _1915) + (((cbLight._m0[_1881].x * _1849) * _1890) * _1913);
    float _1923 = ((_1877 * cbLight._m0[_1871].y) * _1915) + (((cbLight._m0[_1881].y * _1851) * _1890) * _1913);
    float _1924 = ((_1877 * cbLight._m0[_1871].z) * _1915) + (((cbLight._m0[_1881].z * _1853) * _1890) * _1913);
    uint _1925 = _1860 + 8u;
    float _1931 = cbLight._m0[_1860].x + _574;
    float _1932 = cbLight._m0[_1860].y + _575;
    float _1933 = cbLight._m0[_1860].z + _576;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1941 = dot(vec3(0.0), vec3(cbLight._m0[_1860].xyz));
    float _3767 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1945 = dot(vec3(0.0), vec3(_574, _575, _576));
    float _3778 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_1931 * _1937, _1932 * _1937, _1933 * _1937));
    float _3789 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = (0.5 / ((_1944 + 9.9999999392252902907785028219223e-09) + _1948)) * _1944;
    float _3800 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.31831014156341552734375;
    uint _1982 = _1860 + 9u;
    float _1988 = cbLight._m0[_1894].x + _574;
    float _1989 = cbLight._m0[_1894].y + _575;
    float _1990 = cbLight._m0[_1894].z + _576;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1998 = dot(vec3(0.0), vec3(cbLight._m0[_1894].xyz));
    float _3811 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_1988 * _1994, _1989 * _1994, _1990 * _1994));
    float _3822 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2011 = (exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2015 = (0.5 / ((_2001 + 9.9999999392252902907785028219223e-09) + _1948)) * _2001;
    float _3833 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.31831014156341552734375;
    float _2027 = (((_2011 * cbLight._m0[_1982].x) * _2017) * _1877) + ((((cbLight._m0[_1925].x * _1849) * _1960) * _1968) * _1890);
    float _2028 = (((_2011 * cbLight._m0[_1982].y) * _2017) * _1877) + ((((cbLight._m0[_1925].y * _1851) * _1960) * _1968) * _1890);
    float _2029 = (((_2011 * cbLight._m0[_1982].z) * _2017) * _1877) + ((((cbLight._m0[_1925].z * _1853) * _1960) * _1968) * _1890);
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1858.y == 0u)
    {
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.x;
        uint _2159 = uint((float(_2147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2148))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2148)));
        float _2169 = (log2(_1635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2170 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        uint _2173 = uint(isnan(14.0) ? _2170 : (isnan(_2170) ? 14.0 : min(_2170, 14.0)));
        uvec4 _2178 = texelFetch(g_lightClusterGridBuffer, int(((_2173 << 2u) + (_2159 << 6u)) >> 2u));
        uint _2179 = _2178.x;
        uint _2180 = _2147.z;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        if (((((1u << ((_2180 >> 4u) & 15u)) + 4294967295u) & _2179) == 0u) || ((_2180 & 240u) == 0u))
        {
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
        }
        else
        {
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            uint _2470 = 0u;
            uint _2479;
            bool _2480;
            for (;;)
            {
                _2479 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                _2480 = _2479 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2480)
                {
                    frontier_phi_87_pred = _2464;
                    frontier_phi_87_pred_1 = _2469;
                    frontier_phi_87_pred_2 = _2468;
                    frontier_phi_87_pred_3 = _2467;
                    frontier_phi_87_pred_4 = _2466;
                    frontier_phi_87_pred_5 = _2465;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2464;
                    _2631 = _2465;
                    _2632 = _2466;
                    _2633 = _2467;
                    _2634 = _2468;
                    _2635 = _2469;
                    _2636 = _2479;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2470 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _1633;
                        float _2697 = _2656.y - _1634;
                        float _2698 = _2656.z - _1635;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _3854 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * dot(vec3(0.0), vec3(_2702 * _2696, _2702 * _2697, _2702 * _2698))) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _1633;
                        float _2732 = (-0.0) - _1634;
                        float _2733 = (-0.0) - _1635;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2741 = dot(vec3(0.0), vec3(_2737 * _2731, _2737 * _2732, _2737 * _2733));
                        float _3870 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _3881 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2745 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2749 = (0.5 / (((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) + 9.9999999392252902907785028219223e-09) + _2745)) * _2745;
                        float _3892 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2758 = (((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 3.1415927410125732421875) / ((_2723 * 2.1991131305694580078125) + 3.141590118408203125)) * _2712;
                        _2560 = (_2727 * _2675.x) + _2633;
                        _2561 = (_2727 * _2675.y) + _2634;
                        _2562 = (_2727 * _2675.z) + _2635;
                        _2557 = (_2758 * _2692.x) + _2630;
                        _2558 = (_2758 * _2692.y) + _2631;
                        _2559 = (_2758 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_87_pred = _2557;
                    frontier_phi_87_pred_1 = _2562;
                    frontier_phi_87_pred_2 = _2561;
                    frontier_phi_87_pred_3 = _2560;
                    frontier_phi_87_pred_4 = _2559;
                    frontier_phi_87_pred_5 = _2558;
                }
                _2288 = frontier_phi_87_pred;
                _2298 = frontier_phi_87_pred_1;
                _2296 = frontier_phi_87_pred_2;
                _2294 = frontier_phi_87_pred_3;
                _2292 = frontier_phi_87_pred_4;
                _2290 = frontier_phi_87_pred_5;
                uint _2471 = _2470 + 1u;
                if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2464 = _2288;
                    _2465 = _2290;
                    _2466 = _2292;
                    _2467 = _2294;
                    _2468 = _2296;
                    _2469 = _2298;
                    _2470 = _2471;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
        }
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.z;
        uint _2304 = (_2302 >> 8u) & 15u;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((4294967295u << _2304) & _2179) == 0u)
        {
            _2435 = _2287;
            _2437 = _2289;
            _2439 = _2291;
            _2441 = _2293;
            _2443 = _2295;
            _2445 = _2297;
        }
        else
        {
            float _2460 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2304 < ((_2302 >> 12u) & 15u))
            {
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2613 = _2287;
                float _2614 = _2289;
                float _2615 = _2291;
                float _2616 = _2293;
                float _2617 = _2295;
                float _2618 = _2297;
                uint _2619 = _2304;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2629)
                    {
                        frontier_phi_98_pred = _2618;
                        frontier_phi_98_pred_1 = _2617;
                        frontier_phi_98_pred_2 = _2616;
                        frontier_phi_98_pred_3 = _2615;
                        frontier_phi_98_pred_4 = _2614;
                        frontier_phi_98_pred_5 = _2613;
                    }
                    else
                    {
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _2785 = _2613;
                        float _2786 = _2614;
                        float _2787 = _2615;
                        float _2788 = _2616;
                        float _2789 = _2617;
                        float _2790 = _2618;
                        uint _2791 = _2628;
                        uint _2792;
                        vec4 _2817;
                        float _2818;
                        vec4 _2833;
                        vec3 _2845;
                        vec4 _2860;
                        vec4 _2875;
                        float _2921;
                        bool _2922;
                        for (;;)
                        {
                            uint _2802 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2791));
                            _2792 = (_2791 + 4294967295u) & _2791;
                            uint _2804 = _2802 * 40u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            _2818 = _2817.w;
                            uint _2820 = (_2802 * 40u) + 4u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2835 = (_2802 * 40u) + 8u;
                            _2845 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x));
                            uint _2847 = (_2802 * 40u) + 16u;
                            _2860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2847 + 3u)).x));
                            uint _2862 = (_2802 * 40u) + 20u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2802 * 40u) + 24u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2896 = (_2802 * 40u) + 28u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2921 = fma(_1635, _2909.z, fma(_1634, _2909.y, _2909.x * _1633)) + _2909.w;
                            _2922 = !((fma(_1635, _2890.z, fma(_1634, _2890.y, _2890.x * _1633)) + _2890.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_2922)
                            {
                                float _2949 = _2817.x - _1633;
                                float _2950 = _2817.y - _1634;
                                float _2951 = _2817.z - _1635;
                                float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                                float _2955 = inversesqrt(_2952);
                                float _2956 = _2955 * _2949;
                                float _2957 = _2955 * _2950;
                                float _2958 = _2955 * _2951;
                                float _2962 = 1.0 - (_2952 / (_2818 * _2818));
                                float _3903 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2967 = sqrt(_2952) * _2833.w;
                                float _2969 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                                float _2970 = _2969 * _2969;
                                float _2971 = 1.0 - _2970;
                                float _2973 = (_2971 * dot(vec3(_2956, _2957, _2958), vec3(0.0))) + _2970;
                                float _2976 = _2967 * _2967;
                                float _2980 = (fma(_1635, _2860.z, fma(_1634, _2860.y, _2860.x * _1633)) + _2860.w) / _2921;
                                float _2981 = (fma(_1635, _2875.z, fma(_1634, _2875.y, _2875.x * _1633)) + _2875.w) / _2921;
                                float _2985 = 1.0 - dot(vec2(_2980, _2981), vec2(_2980, _2981));
                                float _3919 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                                float _2987 = _2986 * (((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2963) / ((_2976 * 0.699999988079071044921875) + 1.0));
                                float _2997 = dot(vec3(0.0), vec3((-0.0) - (_1633 * _2460), (-0.0) - (_1634 * _2460), (-0.0) - (_1635 * _2460)));
                                float _3930 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3005 = (_2971 * dot(vec3(0.0), vec3(_2956, _2957, _2958))) + _2970;
                                float _3941 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3010 = (0.5 / (((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) + 9.9999999392252902907785028219223e-09) + _3006)) * _3006;
                                float _3952 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3017 = (_2986 * _2963) * (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 3.1415927410125732421875) / ((_2976 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _2987 * _2833.y;
                                frontier_phi_104_pred_1 = _2987 * _2833.x;
                                frontier_phi_104_pred_2 = _3017 * _2845.z;
                                frontier_phi_104_pred_3 = _3017 * _2845.y;
                                frontier_phi_104_pred_4 = _3017 * _2845.x;
                                frontier_phi_104_pred_5 = _2987 * _2833.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3025 = frontier_phi_104_pred;
                            _3024 = frontier_phi_104_pred_1;
                            _3023 = frontier_phi_104_pred_2;
                            _3022 = frontier_phi_104_pred_3;
                            _3021 = frontier_phi_104_pred_4;
                            _3026 = frontier_phi_104_pred_5;
                            _2775 = _3024 + _2788;
                            _2776 = _3025 + _2789;
                            _2777 = _3026 + _2790;
                            _2772 = _3021 + _2785;
                            _2773 = _3022 + _2786;
                            _2774 = _3023 + _2787;
                            if (_2792 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2792;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _2777;
                        frontier_phi_98_pred_1 = _2776;
                        frontier_phi_98_pred_2 = _2775;
                        frontier_phi_98_pred_3 = _2774;
                        frontier_phi_98_pred_4 = _2773;
                        frontier_phi_98_pred_5 = _2772;
                    }
                    _2446 = frontier_phi_98_pred;
                    _2444 = frontier_phi_98_pred_1;
                    _2442 = frontier_phi_98_pred_2;
                    _2440 = frontier_phi_98_pred_3;
                    _2438 = frontier_phi_98_pred_4;
                    _2436 = frontier_phi_98_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2436;
                        _2614 = _2438;
                        _2615 = _2440;
                        _2616 = _2442;
                        _2617 = _2444;
                        _2618 = _2446;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2440;
                frontier_phi_78_79_ladder_1 = _2446;
                frontier_phi_78_79_ladder_2 = _2444;
                frontier_phi_78_79_ladder_3 = _2442;
                frontier_phi_78_79_ladder_4 = _2438;
                frontier_phi_78_79_ladder_5 = _2436;
            }
            else
            {
                frontier_phi_78_79_ladder = _2291;
                frontier_phi_78_79_ladder_1 = _2297;
                frontier_phi_78_79_ladder_2 = _2295;
                frontier_phi_78_79_ladder_3 = _2293;
                frontier_phi_78_79_ladder_4 = _2289;
                frontier_phi_78_79_ladder_5 = _2287;
            }
            _2435 = frontier_phi_78_79_ladder_5;
            _2437 = frontier_phi_78_79_ladder_4;
            _2439 = frontier_phi_78_79_ladder;
            _2441 = frontier_phi_78_79_ladder_3;
            _2443 = frontier_phi_78_79_ladder_2;
            _2445 = frontier_phi_78_79_ladder_1;
        }
        float _2450 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2192 = (_2450 * _2441) + _1922;
        _2194 = (_2450 * _2443) + _1923;
        _2196 = (_2450 * _2445) + _1924;
        _2198 = ((_2435 * 0.039999999105930328369140625) * _2450) + _2027;
        _2200 = ((_2437 * 0.039999999105930328369140625) * _2450) + _2028;
        _2202 = ((_2439 * 0.039999999105930328369140625) * _2450) + _2029;
    }
    else
    {
        _2192 = _1922;
        _2194 = _1923;
        _2196 = _1924;
        _2198 = _2027;
        _2200 = _2028;
        _2202 = _2029;
    }
    float _3968 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3979 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3990 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2219 = ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2192 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _635))) + ((_2198 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2220 = ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2194 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _635))) + ((_2200 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2221 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2196 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _635))) + ((_2202 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1370)) * cbPerFrame._m0[3u].x);
    float _2222 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2224 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    uint _2225 = _609 + 6u;
    float _2233 = _595 / cbSceneParam._m0[86u].x;
    float _2234 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2248 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, (log2((isnan(cbSceneParam._m0[77u].w) ? _569 : (isnan(_569) ? cbSceneParam._m0[77u].w : min(_569, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2250 = _2248.x;
    float _2251 = _2248.y;
    float _2252 = _2248.z;
    float _2253 = _2248.w;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_569 > cbSceneParam._m0[78u].w)
    {
        float _2312 = isnan(_569) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _569 : min(cbSceneParam._m0[80u].w, _569));
        float _2313 = _2312 / _569;
        float _2324 = _2313 * _265;
        float _2325 = _266 * _2313;
        float _2326 = (-0.0) - _2325;
        float _2327 = _2313 * _267;
        float _2329 = (cbSceneParam._m0[77u].w * _2326) / _2312;
        float _2330 = _2329 + cbSceneParam._m0[79u].w;
        float _2331 = cbSceneParam._m0[79u].w - _2325;
        float _2337 = sqrt(((_2324 * _2324) + (_2325 * _2325)) + (_2327 * _2327));
        float _2340 = (1.0 - (cbSceneParam._m0[77u].w / _2312)) * _2337;
        float _2345 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2347 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2570;
        if (abs((_2326 - _2329) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2570 = ((((_2330 > 0.0) ? exp2(_2345 * _2330) : (2.0 - exp2(_2347 * _2330))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2340;
        }
        else
        {
            float _2493 = 1.0 / cbSceneParam._m0[80u].x;
            float _2494 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : max(_2330, _2331));
            float _2495 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : min(_2330, _2331));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            _2570 = ((abs(_2337 / _2326) * cbSceneParam._m0[80u].y) * ((((_2504 - _2505) * 2.0) - ((exp2(_2345 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0)))) - exp2(_2345 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0))))) * _2493)) - ((exp2(_2347 * _2504) - exp2(_2347 * _2505)) * _2493))) + (_2340 * cbSceneParam._m0[80u].z);
        }
        vec4 _2572 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2233, _2234, 1.0), 0.0);
        float _2581 = exp2((_2570 * (-1.44269502162933349609375)) * (1.0 - _2572.w));
        float _2582 = log2(_2581);
        float _2598 = log2(_2253);
        _2349 = (exp2(_2598 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].x)) * _2572.x) / cbSceneParam._m0[78u].x)) + _2250;
        _2351 = (exp2(_2598 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].y)) * _2572.y) / cbSceneParam._m0[78u].y)) + _2251;
        _2353 = (exp2(_2598 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2582 * cbSceneParam._m0[78u].z)) * _2572.z) / cbSceneParam._m0[78u].z)) + _2252;
        _2355 = _2581 * _2253;
    }
    else
    {
        _2349 = _2250;
        _2351 = _2251;
        _2353 = _2252;
        _2355 = _2253;
    }
    bool _2608;
    vec4 _2365;
    vec4 _2388;
    float _2390;
    float _2394;
    float _2395;
    float _2396;
    float _2397;
    bool _2408;
    for (;;)
    {
        _2365 = cbMatDynParam._m0[0u];
        float _2367 = roundEven(_2365.y);
        bool _2368 = _2367 == 3.0;
        float _2370 = log2(_2355);
        float _2377 = exp2(_2370 * cbSceneParam._m0[78u].x) * _2222;
        float _2378 = exp2(_2370 * cbSceneParam._m0[78u].y) * _2223;
        float _2379 = exp2(_2370 * cbSceneParam._m0[78u].z) * _2224;
        float _2386 = _583 + (-0.5);
        _2388 = cbMtdParam._m0[1u];
        _2390 = _2388.y * _2386;
        float _2393 = (_2367 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2394 = _2393 * (_2368 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2349)));
        _2395 = _2393 * (_2368 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2351)));
        _2396 = _2393 * (_2368 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2353)));
        _2397 = _2386 * 0.999000012874603271484375;
        _2408 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2408)
        {
            if ((cbInstanceData._m0[_609 + 7u].x + _2397) < 0.5)
            {
                _2608 = true;
                break;
            }
        }
        uint _2528 = _611 + uint(_2365.w);
        if ((cbInstanceData._m0[_2528].w < 1.0) && ((cbInstanceData._m0[_2528].w + _2397) < 0.5))
        {
            _2608 = true;
            break;
        }
        if ((_2390 + 1.0) < _2388.x)
        {
            _2608 = true;
            break;
        }
        _2608 = false;
        break;
    }
    float _2763;
    if (_2608)
    {
        discard_state = true;
        _2763 = 0.0;
    }
    else
    {
        _2763 = cbInstanceData._m0[_2225].w;
    }
    SV_Target.x = _2394;
    SV_Target.y = _2395;
    SV_Target.z = _2396;
    SV_Target.w = _2763;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2225].w;
    discard_exit();
}


