#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _621;
uint _1786;
uint _1787;
uint _1788;
uint _2023;
uint _2024;
uint _2025;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    vec4 _276 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _311 = cbMtdParam._m0[21u].w + _252;
    float _312 = cbMtdParam._m0[22u].x + _253;
    float _313 = cbMtdParam._m0[22u].y + _254;
    float _330 = (-0.0) - dot(vec3(_311, _312, _313), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _331 = (-0.0) - dot(vec3(_311, _312, _313), vec3(_194 * TANGENT.x, _194 * TANGENT.y, _194 * TANGENT.z));
    float _332 = (-0.0) - dot(vec3(_311, _312, _313), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _336 = inversesqrt(dot(vec3(_330, _331, _332), vec3(_330, _331, _332)));
    float _339 = _336 * _332;
    float _342 = ((_336 * _330) + (((_276.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _343 = ((_336 * _331) + (((_276.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _344 = fract(TEXCOORD.x);
    float _345 = fract(TEXCOORD.y);
    float _351;
    if (_342 > 0.0)
    {
        _351 = (1.0 - _344) / _342;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_342 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _344) / _342;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _351 = frontier_phi_3_2_ladder;
    }
    float _359;
    if (_343 > 0.0)
    {
        _359 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _359 = frontier_phi_7_6_ladder;
    }
    float _363 = (_339 > 0.0) ? (cbMtdParam._m0[15u].x / _339) : 5000.0;
    float _364 = isnan(_359) ? _351 : (isnan(_351) ? _359 : min(_351, _359));
    float _365 = isnan(_363) ? _364 : (isnan(_364) ? _363 : min(_364, _363));
    float _369 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = ((_365 * _339) + _369) / _369;
    vec4 _400 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_344 + (-0.5)) + (_365 * _342)) / _376) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_345 + (-0.5)) + (_365 * _343)) / _376) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _428 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _433 = _252 * _432;
    float _434 = _253 * _432;
    float _435 = _254 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_441 * cbSceneParam._m0[86u].x, _442 * cbSceneParam._m0[86u].y));
    float _454 = _451.x * TEXCOORD.z;
    float _455 = (-0.0) - _433;
    float _456 = (-0.0) - _434;
    float _457 = (-0.0) - _435;
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _620;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    float _631;
    float _632;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _543 = (cbModelParam._m0[37u].x * ((((fma(_487, cbModelParam._m0[26u].z, fma(_483, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _479)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _545 = (cbModelParam._m0[37u].y * ((((fma(_487, cbModelParam._m0[27u].z, fma(_483, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _479)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _546 = (((((fma(_487, cbModelParam._m0[28u].z, fma(_483, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _479)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        float _583 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _593 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _603 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _613 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_570.x + (-0.5));
        float _615 = _613 * (_570.y + (-0.5));
        float _616 = _613 * (_570.z + (-0.5));
        _620 = _583 * (_549.z + (-0.5));
        _622 = _583 * (_549.y + (-0.5));
        _623 = _583 * (_549.x + (-0.5));
        _624 = _593 * (_556.z + (-0.5));
        _625 = _593 * (_556.y + (-0.5));
        _626 = _593 * (_556.x + (-0.5));
        _627 = _603 * (_563.z + (-0.5));
        _628 = _603 * (_563.y + (-0.5));
        _629 = _603 * (_563.x + (-0.5));
        _630 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        _631 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        _632 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    }
    else
    {
        _620 = _621;
        _622 = _621;
        _623 = _621;
        _624 = _621;
        _625 = _621;
        _626 = _621;
        _627 = _621;
        _628 = _621;
        _629 = _621;
        _630 = _621;
        _631 = _621;
        _632 = _621;
    }
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _686 = (cbModelParam._m0[38u].x * ((((fma(_487, cbModelParam._m0[30u].z, fma(_483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _479)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _687 = (cbModelParam._m0[38u].y * ((((fma(_487, cbModelParam._m0[31u].z, fma(_483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _479)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _688 = (((((fma(_487, cbModelParam._m0[32u].z, fma(_483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _479)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _723 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _743 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _753 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_711.x + (-0.5));
        float _755 = _753 * (_711.y + (-0.5));
        float _756 = _753 * (_711.z + (-0.5));
        _760 = _723 * (_690.z + (-0.5));
        _761 = _723 * (_690.y + (-0.5));
        _762 = _723 * (_690.x + (-0.5));
        _763 = _733 * (_697.z + (-0.5));
        _764 = _733 * (_697.y + (-0.5));
        _765 = _733 * (_697.x + (-0.5));
        _766 = _743 * (_704.z + (-0.5));
        _767 = _743 * (_704.y + (-0.5));
        _768 = _743 * (_704.x + (-0.5));
        _769 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        _770 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        _771 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    }
    else
    {
        _760 = _621;
        _761 = _621;
        _762 = _621;
        _763 = _621;
        _764 = _621;
        _765 = _621;
        _766 = _621;
        _767 = _621;
        _768 = _621;
        _769 = _621;
        _770 = _621;
        _771 = _621;
    }
    float _786 = _433 * (-0.5);
    float _787 = _434 * (-0.5);
    float _788 = _435 * (-0.5);
    float _789 = dot(vec4(_786, _787, _788, 1.0), vec4(_762, _765, _768, _771));
    float _792 = dot(vec4(_786, _787, _788, 1.0), vec4(_761, _764, _767, _770));
    float _795 = dot(vec4(_786, _787, _788, 1.0), vec4(_760, _763, _766, _769));
    float _830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _802 = dot(vec4(_786, _787, _788, 1.0), vec4(_620, _624, _627, _630));
        float _806 = dot(vec4(_786, _787, _788, 1.0), vec4(_622, _625, _628, _631));
        float _810 = dot(vec4(_786, _787, _788, 1.0), vec4(_623, _626, _629, _632));
        float _817 = dot(vec4(cbModelParam._m0[39u]), vec4(_786, _787, _788, 1.0));
        _830 = dot(vec3(isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)), isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)), isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_817) ? 0.0 : (isnan(0.0) ? _817 : max(0.0, _817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _830 = 1.0;
    }
    float _841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _832 = dot(vec4(cbModelParam._m0[40u]), vec4(_786, _787, _788, 1.0));
        _841 = dot(vec3(isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)), isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)), isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_832) ? 0.0 : (isnan(0.0) ? _832 : max(0.0, _832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _841 = 1.0;
    }
    float _845 = (_841 * cbModelParam._m0[1u].x) + (_830 * (1.0 - cbModelParam._m0[1u].x));
    float _851 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _934;
    float _936;
    float _938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _901 = fma(_487, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479)) + cbModelParam._m0[13u].w;
        float _905 = fma(_487, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479)) + cbModelParam._m0[14u].w;
        float _909 = fma(_487, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479)) + cbModelParam._m0[15u].w;
        float _912 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _915 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _918 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _944;
        if (_912 > 0.0)
        {
            _944 = abs((1.0 - _901) / _912);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_912 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_901 + 1.0) / _912);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _944 = frontier_phi_22_20_ladder;
        }
        float _1243;
        if (_915 > 0.0)
        {
            _1243 = abs((1.0 - _905) / _915);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_915 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_905 + 1.0) / _915);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1243 = frontier_phi_31_27_ladder;
        }
        float _1539;
        if (_918 > 0.0)
        {
            _1539 = abs((1.0 - _909) / _918);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_918 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_909 + 1.0) / _918);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1539 = frontier_phi_45_38_ladder;
        }
        float _1541 = isnan(_1243) ? _944 : (isnan(_944) ? _1243 : min(_944, _1243));
        float _1542 = isnan(_1539) ? _1541 : (isnan(_1541) ? _1539 : min(_1541, _1539));
        float _1546 = (_1542 * _912) + _901;
        float _1547 = (_1542 * _915) + _905;
        float _1548 = (_1542 * _918) + _909;
        float _1549 = _1542 * 9.9999997473787516355514526367188e-05;
        float _1550 = (-1.0) - _1549;
        float _1552 = _1549 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1548 > _1552) || ((_1548 < _1550) || ((_1547 > _1552) || ((_1547 < _1550) || ((_1546 < _1550) || (_1546 > _1552))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1548, cbModelParam._m0[9u].z, fma(_1547, cbModelParam._m0[9u].y, _1546 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1548, cbModelParam._m0[10u].z, fma(_1547, cbModelParam._m0[10u].y, _1546 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1548, cbModelParam._m0[11u].z, fma(_1547, cbModelParam._m0[11u].y, _1546 * cbModelParam._m0[11u].x))), _851);
            frontier_phi_21_45_ladder = _1659.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1659.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1659.x * cbModelParam._m0[1u].y;
        }
        _934 = frontier_phi_21_45_ladder_2;
        _936 = frontier_phi_21_45_ladder_1;
        _938 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _851);
        _934 = _922.x * cbModelParam._m0[1u].y;
        _936 = _922.y * cbModelParam._m0[1u].y;
        _938 = _922.z * cbModelParam._m0[1u].y;
    }
    float _941 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1029;
    float _1031;
    float _1033;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _993 = fma(_487, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479)) + cbModelParam._m0[21u].w;
        float _997 = fma(_487, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479)) + cbModelParam._m0[22u].w;
        float _1001 = fma(_487, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479)) + cbModelParam._m0[23u].w;
        float _1004 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1007 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1010 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1248;
        if (_1004 > 0.0)
        {
            _1248 = abs((1.0 - _993) / _1004);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1004 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_993 + 1.0) / _1004);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1248 = frontier_phi_33_29_ladder;
        }
        float _1565;
        if (_1007 > 0.0)
        {
            _1565 = abs((1.0 - _997) / _1007);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1007 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_997 + 1.0) / _1007);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1565 = frontier_phi_47_40_ladder;
        }
        float _1716;
        if (_1010 > 0.0)
        {
            _1716 = abs((1.0 - _1001) / _1010);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1010 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1001 + 1.0) / _1010);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1716 = frontier_phi_61_56_ladder;
        }
        float _1718 = isnan(_1565) ? _1248 : (isnan(_1248) ? _1565 : min(_1248, _1565));
        float _1719 = isnan(_1716) ? _1718 : (isnan(_1718) ? _1716 : min(_1718, _1716));
        float _1723 = (_1719 * _1004) + _993;
        float _1724 = (_1719 * _1007) + _997;
        float _1725 = (_1719 * _1010) + _1001;
        float _1726 = _1719 * 9.9999997473787516355514526367188e-05;
        float _1727 = (-1.0) - _1726;
        float _1729 = _1726 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1725 > _1729) || ((_1725 < _1727) || ((_1724 > _1729) || ((_1724 < _1727) || ((_1723 < _1727) || (_1723 > _1729))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1725, cbModelParam._m0[17u].z, fma(_1724, cbModelParam._m0[17u].y, _1723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1725, cbModelParam._m0[18u].z, fma(_1724, cbModelParam._m0[18u].y, _1723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1725, cbModelParam._m0[19u].z, fma(_1724, cbModelParam._m0[19u].y, _1723 * cbModelParam._m0[19u].x))), _941);
            frontier_phi_30_61_ladder = _1885.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1885.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1885.x * cbModelParam._m0[1u].z;
        }
        _1029 = frontier_phi_30_61_ladder_2;
        _1031 = frontier_phi_30_61_ladder;
        _1033 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _941);
        _1029 = _1013.x * cbModelParam._m0[1u].z;
        _1031 = _1013.y * cbModelParam._m0[1u].z;
        _1033 = _1013.z * cbModelParam._m0[1u].z;
    }
    float _1045 = _454 * 0.01200000010430812835693359375;
    float _1047 = _1045 * ((cbModelParam._m0[1u].w * (_1029 - _934)) + _934);
    float _1048 = _1045 * ((cbModelParam._m0[1u].w * (_1031 - _936)) + _936);
    float _1049 = _1045 * ((cbModelParam._m0[1u].w * (_1033 - _938)) + _938);
    float _1070 = fma(_1049, cbSceneParam._m0[89u].z, fma(_1048, cbSceneParam._m0[89u].y, _1047 * cbSceneParam._m0[89u].x));
    float _1073 = fma(_1049, cbSceneParam._m0[90u].z, fma(_1048, cbSceneParam._m0[90u].y, _1047 * cbSceneParam._m0[90u].x));
    float _1076 = fma(_1049, cbSceneParam._m0[91u].z, fma(_1048, cbSceneParam._m0[91u].y, _1047 * cbSceneParam._m0[91u].x));
    vec4 _1084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_441, _442));
    float _1086 = _1084.w;
    uint _1102 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1107 = floatBitsToUint(cbInstanceData._m0[_1102 + 5u]);
    uint _1109 = _1107.x * 14u;
    uint _1110 = _1109 + 13u;
    float _1115 = _454 + (-1.0);
    float _1118 = (cbLight._m0[_1110].x * _1115) + 1.0;
    float _1119 = (cbLight._m0[_1110].y * _1115) + 1.0;
    uint _1120 = _1109 + 8u;
    float _1131 = cbLight._m0[_1109].x + _433;
    float _1132 = cbLight._m0[_1109].y + _434;
    float _1133 = cbLight._m0[_1109].z + _435;
    float _1137 = inversesqrt(dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133)));
    float _1141 = dot(vec3(0.0), vec3(cbLight._m0[_1109].xyz));
    float _2360 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    float _1145 = dot(vec3(0.0), vec3(_433, _434, _435));
    float _2371 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    float _1149 = dot(vec3(cbLight._m0[_1109].xyz), vec3(_1131 * _1137, _1132 * _1137, _1133 * _1137));
    float _2382 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1160 = (exp2(log2(1.0 - (isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1166 = (0.5 / ((_1144 + 9.9999999392252902907785028219223e-09) + _1148)) * _1144;
    float _2393 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1168 = (isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0))) * 0.31831014156341552734375;
    float _1170 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
    uint _1183 = _1109 + 9u;
    uint _1189 = _1109 | 1u;
    float _1195 = cbLight._m0[_1189].x + _433;
    float _1196 = cbLight._m0[_1189].y + _434;
    float _1197 = cbLight._m0[_1189].z + _435;
    float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
    float _1205 = dot(vec3(0.0), vec3(cbLight._m0[_1189].xyz));
    float _2409 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1208 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
    float _1209 = dot(vec3(cbLight._m0[_1189].xyz), vec3(_1195 * _1201, _1196 * _1201, _1197 * _1201));
    float _2420 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1218 = (exp2(log2(1.0 - (isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1222 = (0.5 / ((_1208 + 9.9999999392252902907785028219223e-09) + _1148)) * _1208;
    float _2431 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = (isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0))) * 0.31831014156341552734375;
    float _1225 = isnan(1.0) ? _1119 : (isnan(_1119) ? 1.0 : min(_1119, 1.0));
    float _1235 = (((_1218 * cbLight._m0[_1183].x) * _1224) * _1225) + ((((cbLight._m0[_1120].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1086))) * _1160) * _1168) * _1170);
    float _1236 = (((_1218 * cbLight._m0[_1183].y) * _1224) * _1225) + ((((cbLight._m0[_1120].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1086))) * _1160) * _1168) * _1170);
    float _1237 = (((_1218 * cbLight._m0[_1183].z) * _1224) * _1225) + ((((cbLight._m0[_1120].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1086))) * _1160) * _1168) * _1170);
    float _1354;
    float _1356;
    float _1358;
    if (_1107.y == 0u)
    {
        float _1293 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1294 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1293;
        float _1295 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1293;
        float _1296 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1293;
        uvec4 _1308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1309 = _1308.x;
        uint _1320 = uint((float(_1308.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _1309))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _1309)));
        float _1330 = (log2(_1296 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1331 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        uint _1334 = uint(isnan(14.0) ? _1331 : (isnan(_1331) ? 14.0 : min(_1331, 14.0)));
        uvec4 _1340 = texelFetch(g_lightClusterGridBuffer, int(((_1334 << 2u) + (_1320 << 6u)) >> 2u));
        uint _1341 = _1340.x;
        uint _1342 = _1308.z;
        float _1431;
        float _1433;
        float _1435;
        if (((((1u << ((_1342 >> 4u) & 15u)) + 4294967295u) & _1341) == 0u) || ((_1342 & 240u) == 0u))
        {
            _1431 = 0.0;
            _1433 = 0.0;
            _1435 = 0.0;
        }
        else
        {
            float _1432;
            float _1434;
            float _1436;
            float _1590 = 0.0;
            float _1591 = 0.0;
            float _1592 = 0.0;
            uint _1593 = 0u;
            uint _1602;
            bool _1603;
            for (;;)
            {
                _1602 = texelFetch(g_lightClassification, int((((_1334 << 5u) + (_1320 << 9u)) + (_1593 << 2u)) >> 2u)).x;
                _1603 = _1602 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1603)
                {
                    frontier_phi_58_pred = _1592;
                    frontier_phi_58_pred_1 = _1591;
                    frontier_phi_58_pred_2 = _1590;
                }
                else
                {
                    float _1756;
                    float _1757;
                    float _1758;
                    uint _1759;
                    _1756 = _1590;
                    _1757 = _1591;
                    _1758 = _1592;
                    _1759 = _1602;
                    float _1668;
                    float _1669;
                    float _1670;
                    for (;;)
                    {
                        uint _1763 = uint(findLSB(_1759)) + (_1593 << 5u);
                        uint _1760 = (_1759 + 4294967295u) & _1759;
                        uint _1765 = _1763 * 48u;
                        vec4 _1779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1765)).x, texelFetch(g_PointLightRenderingBuffer, int(_1765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1765 + 3u)).x));
                        uint _1796 = (_1763 * 48u) + 8u;
                        vec3 _1807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1796)).x, texelFetch(g_PointLightRenderingBuffer, int(_1796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1796 + 2u)).x));
                        float _1811 = _1779.x - _1294;
                        float _1812 = _1779.y - _1295;
                        float _1813 = _1779.z - _1296;
                        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
                        float _1817 = inversesqrt(_1814);
                        float _1826 = 1.0 - (_1814 * _1779.w);
                        float _2457 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
                        float _1828 = sqrt(_1814) * uintBitsToFloat(uvec4(_1786, _1787, _1788, texelFetch(g_PointLightRenderingBuffer, int(((_1763 * 48u) + 4u) + 3u)).x)).w;
                        float _1831 = 1.39999997615814208984375 / (_1828 + 1.39999997615814208984375);
                        float _1832 = _1831 * _1831;
                        float _1835 = ((1.0 - _1832) * dot(vec3(0.0), vec3(_1817 * _1811, _1817 * _1812, _1817 * _1813))) + _1832;
                        float _1837 = (-0.0) - _1294;
                        float _1838 = (-0.0) - _1295;
                        float _1839 = (-0.0) - _1296;
                        float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
                        float _1847 = dot(vec3(0.0), vec3(_1843 * _1837, _1843 * _1838, _1843 * _1839));
                        float _2468 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
                        float _2479 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
                        float _1851 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
                        float _1855 = (0.5 / (((isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0))) + 9.9999999392252902907785028219223e-09) + _1851)) * _1851;
                        float _2490 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
                        float _1864 = (((isnan(1.0) ? _2490 : (isnan(_2490) ? 1.0 : min(_2490, 1.0))) * 3.1415927410125732421875) / (((_1828 * _1828) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0)));
                        _1668 = (_1864 * _1807.x) + _1756;
                        _1669 = (_1864 * _1807.y) + _1757;
                        _1670 = (_1864 * _1807.z) + _1758;
                        if (_1760 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1756 = _1668;
                            _1757 = _1669;
                            _1758 = _1670;
                            _1759 = _1760;
                        }
                    }
                    frontier_phi_58_pred = _1670;
                    frontier_phi_58_pred_1 = _1669;
                    frontier_phi_58_pred_2 = _1668;
                }
                _1436 = frontier_phi_58_pred;
                _1434 = frontier_phi_58_pred_1;
                _1432 = frontier_phi_58_pred_2;
                uint _1594 = _1593 + 1u;
                if (_1594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1590 = _1432;
                    _1591 = _1434;
                    _1592 = _1436;
                    _1593 = _1594;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1431 = _1432;
            _1433 = _1434;
            _1435 = _1436;
        }
        uvec4 _1439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1440 = _1439.z;
        uint _1442 = (_1440 >> 8u) & 15u;
        float _1570;
        float _1572;
        float _1574;
        if (((4294967295u << _1442) & _1341) == 0u)
        {
            _1570 = _1431;
            _1572 = _1433;
            _1574 = _1435;
        }
        else
        {
            float _1586 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1442 < ((_1440 >> 12u) & 15u))
            {
                float _1571;
                float _1573;
                float _1575;
                float _1742 = _1431;
                float _1743 = _1433;
                float _1744 = _1435;
                uint _1745 = _1442;
                uint _1754;
                bool _1755;
                for (;;)
                {
                    _1754 = texelFetch(g_lightClassification, int((((_1334 << 5u) + (_1320 << 9u)) + (_1745 << 2u)) >> 2u)).x;
                    _1755 = _1754 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1755)
                    {
                        frontier_phi_67_pred = _1744;
                        frontier_phi_67_pred_1 = _1743;
                        frontier_phi_67_pred_2 = _1742;
                    }
                    else
                    {
                        float _1890;
                        float _1891;
                        float _1892;
                        float _2112;
                        float _2113;
                        float _2114;
                        float _1900 = _1742;
                        float _1901 = _1743;
                        float _1902 = _1744;
                        uint _1903 = _1754;
                        uint _1904;
                        uint _1914;
                        vec4 _1929;
                        float _1930;
                        vec3 _1942;
                        vec4 _1958;
                        vec4 _1973;
                        float _2019;
                        bool _2020;
                        for (;;)
                        {
                            _1914 = ((_1745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1903));
                            _1904 = (_1903 + 4294967295u) & _1903;
                            uint _1916 = _1914 * 40u;
                            _1929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 3u)).x));
                            _1930 = _1929.w;
                            uint _1932 = (_1914 * 40u) + 8u;
                            _1942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1932 + 2u)).x));
                            uint _1945 = (_1914 * 40u) + 16u;
                            _1958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1945 + 3u)).x));
                            uint _1960 = (_1914 * 40u) + 20u;
                            _1973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1960 + 3u)).x));
                            uint _1975 = (_1914 * 40u) + 24u;
                            vec4 _1988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 3u)).x));
                            uint _1994 = (_1914 * 40u) + 28u;
                            vec4 _2007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1994 + 3u)).x));
                            _2019 = fma(_1296, _2007.z, fma(_1295, _2007.y, _2007.x * _1294)) + _2007.w;
                            _2020 = !((fma(_1296, _1988.z, fma(_1295, _1988.y, _1988.x * _1294)) + _1988.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_2020)
                            {
                                float _2054 = _1929.x - _1294;
                                float _2055 = _1929.y - _1295;
                                float _2056 = _1929.z - _1296;
                                float _2057 = dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056));
                                float _2060 = inversesqrt(_2057);
                                float _2067 = 1.0 - (_2057 / (_1930 * _1930));
                                float _2501 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
                                float _2069 = sqrt(_2057) * uintBitsToFloat(uvec4(_2023, _2024, _2025, texelFetch(g_SpotLightRenderingBuffer, int(((_1914 * 40u) + 4u) + 3u)).x)).w;
                                float _2071 = 1.39999997615814208984375 / (_2069 + 1.39999997615814208984375);
                                float _2072 = _2071 * _2071;
                                float _2075 = (fma(_1296, _1958.z, fma(_1295, _1958.y, _1958.x * _1294)) + _1958.w) / _2019;
                                float _2076 = (fma(_1296, _1973.z, fma(_1295, _1973.y, _1973.x * _1294)) + _1973.w) / _2019;
                                float _2080 = 1.0 - dot(vec2(_2075, _2076), vec2(_2075, _2076));
                                float _2512 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
                                float _2088 = dot(vec3(0.0), vec3((-0.0) - (_1294 * _1586), (-0.0) - (_1295 * _1586), (-0.0) - (_1296 * _1586)));
                                float _2523 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
                                float _2096 = ((1.0 - _2072) * dot(vec3(0.0), vec3(_2060 * _2054, _2060 * _2055, _2060 * _2056))) + _2072;
                                float _2534 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
                                float _2097 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
                                float _2101 = (0.5 / (((isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0))) + 9.9999999392252902907785028219223e-09) + _2097)) * _2097;
                                float _2545 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
                                float _2108 = ((isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0))) * (isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0)))) * (((isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0))) * 3.1415927410125732421875) / (((_2069 * _2069) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2108 * _1942.z;
                                frontier_phi_73_pred_1 = _2108 * _1942.y;
                                frontier_phi_73_pred_2 = _2108 * _1942.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2114 = frontier_phi_73_pred;
                            _2113 = frontier_phi_73_pred_1;
                            _2112 = frontier_phi_73_pred_2;
                            _1890 = _2112 + _1900;
                            _1891 = _2113 + _1901;
                            _1892 = _2114 + _1902;
                            if (_1904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1900 = _1890;
                                _1901 = _1891;
                                _1902 = _1892;
                                _1903 = _1904;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1892;
                        frontier_phi_67_pred_1 = _1891;
                        frontier_phi_67_pred_2 = _1890;
                    }
                    _1575 = frontier_phi_67_pred;
                    _1573 = frontier_phi_67_pred_1;
                    _1571 = frontier_phi_67_pred_2;
                    uint _1746 = _1745 + 1u;
                    if (_1746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1742 = _1571;
                        _1743 = _1573;
                        _1744 = _1575;
                        _1745 = _1746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1573;
                frontier_phi_49_50_ladder_1 = _1575;
                frontier_phi_49_50_ladder_2 = _1571;
            }
            else
            {
                frontier_phi_49_50_ladder = _1433;
                frontier_phi_49_50_ladder_1 = _1435;
                frontier_phi_49_50_ladder_2 = _1431;
            }
            _1570 = frontier_phi_49_50_ladder_2;
            _1572 = frontier_phi_49_50_ladder;
            _1574 = frontier_phi_49_50_ladder_1;
        }
        float _1579 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _1354 = ((_1570 * 0.039999999105930328369140625) * _1579) + _1235;
        _1356 = ((_1572 * 0.039999999105930328369140625) * _1579) + _1236;
        _1358 = ((_1574 * 0.039999999105930328369140625) * _1579) + _1237;
    }
    else
    {
        _1354 = _1235;
        _1356 = _1236;
        _1358 = _1237;
    }
    uint _1365 = (_1102 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1380 = ((cbMtdParam._m0[9u].x * _400.x) * cbInstanceData._m0[_1365].x) + ((_1354 + ((isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    float _1381 = ((cbMtdParam._m0[9u].y * _400.y) * cbInstanceData._m0[_1365].y) + ((_1356 + ((isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    float _1382 = ((cbMtdParam._m0[9u].z * _400.z) * cbInstanceData._m0[_1365].z) + ((_1358 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    uint _1386 = _1102 + 6u;
    float _1394 = _441 / cbSceneParam._m0[86u].x;
    float _1395 = _442 / cbSceneParam._m0[86u].y;
    vec4 _1409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1394, _1395, (log2((isnan(cbSceneParam._m0[77u].w) ? _428 : (isnan(_428) ? cbSceneParam._m0[77u].w : min(_428, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1411 = _1409.x;
    float _1412 = _1409.y;
    float _1413 = _1409.z;
    float _1414 = _1409.w;
    float _1488;
    float _1490;
    float _1492;
    float _1494;
    if (_428 > cbSceneParam._m0[78u].w)
    {
        float _1450 = isnan(_428) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _428 : min(cbSceneParam._m0[80u].w, _428));
        float _1451 = _1450 / _428;
        float _1462 = _1451 * _252;
        float _1463 = _253 * _1451;
        float _1464 = (-0.0) - _1463;
        float _1465 = _1451 * _254;
        float _1467 = (cbSceneParam._m0[77u].w * _1464) / _1450;
        float _1468 = _1467 + cbSceneParam._m0[79u].w;
        float _1469 = cbSceneParam._m0[79u].w - _1463;
        float _1475 = sqrt(((_1462 * _1462) + (_1463 * _1463)) + (_1465 * _1465));
        float _1478 = (1.0 - (cbSceneParam._m0[77u].w / _1450)) * _1475;
        float _1484 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1678;
        if (abs((_1464 - _1467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1678 = ((((_1468 > 0.0) ? exp2(_1484 * _1468) : (2.0 - exp2(_1486 * _1468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1478;
        }
        else
        {
            float _1616 = 1.0 / cbSceneParam._m0[80u].x;
            float _1617 = isnan(_1469) ? _1468 : (isnan(_1468) ? _1469 : max(_1468, _1469));
            float _1618 = isnan(_1469) ? _1468 : (isnan(_1468) ? _1469 : min(_1468, _1469));
            float _1627 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : min(_1617, 0.0));
            float _1628 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : min(_1618, 0.0));
            _1678 = ((abs(_1475 / _1464) * cbSceneParam._m0[80u].y) * ((((_1627 - _1628) * 2.0) - ((exp2(_1484 * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)))) - exp2(_1484 * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))))) * _1616)) - ((exp2(_1486 * _1627) - exp2(_1486 * _1628)) * _1616))) + (_1478 * cbSceneParam._m0[80u].z);
        }
        vec4 _1680 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1394, _1395, 1.0), 0.0);
        float _1689 = exp2((_1678 * (-1.44269502162933349609375)) * (1.0 - _1680.w));
        float _1690 = log2(_1689);
        float _1706 = log2(_1414);
        _1488 = (exp2(_1706 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1690 * cbSceneParam._m0[78u].x)) * _1680.x) / cbSceneParam._m0[78u].x)) + _1411;
        _1490 = (exp2(_1706 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1690 * cbSceneParam._m0[78u].y)) * _1680.y) / cbSceneParam._m0[78u].y)) + _1412;
        _1492 = (exp2(_1706 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1690 * cbSceneParam._m0[78u].z)) * _1680.z) / cbSceneParam._m0[78u].z)) + _1413;
        _1494 = _1689 * _1414;
    }
    else
    {
        _1488 = _1411;
        _1490 = _1412;
        _1492 = _1413;
        _1494 = _1414;
    }
    float _1506 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1507 = _1506 == 3.0;
    float _1509 = log2(_1494);
    float _1516 = exp2(_1509 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    float _1517 = exp2(_1509 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    float _1518 = exp2(_1509 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    float _1527 = (_1506 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1527 * (_1507 ? _1516 : (_1516 + (cbSceneParam._m0[72u].w * _1488)));
    SV_Target.y = _1527 * (_1507 ? _1517 : (_1517 + (cbSceneParam._m0[72u].w * _1490)));
    SV_Target.z = _1527 * (_1507 ? _1518 : (_1518 + (cbSceneParam._m0[72u].w * _1492)));
    SV_Target.w = cbInstanceData._m0[_1386].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1386].w;
}


