#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _964;
float _2943;
float _2944;
float _2945;
float _2946;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _287 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = cbMtdParam._m0[21u].w + _263;
    float _323 = cbMtdParam._m0[22u].x + _264;
    float _324 = cbMtdParam._m0[22u].y + _265;
    float _338 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _339 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _340 = (-0.0) - dot(vec3(_322, _323, _324), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _347 = _344 * _340;
    float _348 = (_344 * _338) + (((_287.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _349 = (_344 * _339) + (((_287.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _350 = _348 * cbMtdParam._m0[18u].z;
    float _351 = _349 * cbMtdParam._m0[18u].y;
    float _352 = fract(TEXCOORD.x);
    float _353 = fract(TEXCOORD.y);
    float _359;
    if (_350 > 0.0)
    {
        _359 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _359 = frontier_phi_3_2_ladder;
    }
    float _367;
    if (_351 > 0.0)
    {
        _367 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _367 = frontier_phi_7_6_ladder;
    }
    bool _369 = _347 > 0.0;
    float _371 = _369 ? (cbMtdParam._m0[15u].x / _347) : 5000.0;
    float _372 = isnan(_367) ? _359 : (isnan(_359) ? _367 : min(_359, _367));
    float _373 = isnan(_371) ? _372 : (isnan(_372) ? _371 : min(_372, _371));
    float _377 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = _352 + (-0.5);
    float _381 = _353 + (-0.5);
    float _384 = ((_373 * _347) + _377) / _377;
    vec4 _408 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_378 + (_373 * _350)) / _384) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_381 + (_373 * _351)) / _384) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _438 = _348 * cbMtdParam._m0[20u].z;
    float _439 = _349 * cbMtdParam._m0[20u].y;
    bool _440 = _438 > 0.0;
    float _445;
    if (_440)
    {
        _445 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _445 = frontier_phi_11_10_ladder;
    }
    bool _447 = _439 > 0.0;
    float _452;
    if (_447)
    {
        _452 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _452 = frontier_phi_15_14_ladder;
    }
    float _455 = _369 ? (cbMtdParam._m0[16u].x / _347) : 5000.0;
    float _456 = isnan(_452) ? _445 : (isnan(_445) ? _452 : min(_445, _452));
    float _457 = isnan(_455) ? _456 : (isnan(_456) ? _455 : min(_456, _455));
    float _461 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _465 = ((_457 * _347) + _461) / _461;
    float _470 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _472 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _488 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_378 + (_457 * _438)) / _465) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_381 + (_457 * _439)) / _465) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _500;
    if (_440)
    {
        _500 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _500 = frontier_phi_19_18_ladder;
    }
    float _506;
    if (_447)
    {
        _506 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _506 = frontier_phi_23_22_ladder;
    }
    float _508 = isnan(_506) ? _500 : (isnan(_500) ? _506 : min(_500, _506));
    float _509 = isnan(_455) ? _508 : (isnan(_508) ? _455 : min(_508, _455));
    float _516 = ((_509 * _347) + _461) / _461;
    vec4 _537 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_378 + (_509 * _438)) / _516) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_381 + (_509 * _439)) / _516) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_488.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_488.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_488.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _2985 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2996 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3007 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _567 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _571 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _572 = _263 * _571;
    float _573 = _264 * _571;
    float _574 = _265 * _571;
    vec4 _579 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _581 = _579.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _677 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _684 = (cbMatDynParam._m0[5u].x * _677) + cbMatDynParam._m0[5u].y;
        float _3018 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _689 = (cbMatDynParam._m0[5u].z * _677) + cbMatDynParam._m0[5u].w;
        float _3029 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) - _685)) + _685) < ((_581 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _593 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _594 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = _607 + 9u;
    uint _610 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3040 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _3051 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _3062 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _593, cbSceneParam._m0[86u].y * _594));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = (-0.0) - _572;
    float _635 = (-0.0) - _573;
    float _636 = (-0.0) - _574;
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _963;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _751 = (cbModelParam._m0[37u].x * ((((fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _753 = (cbModelParam._m0[37u].y * ((((fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _754 = (((((fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_751, _753, _754), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_751, _753, _754), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_751, _753, _754), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_751, _753, _754), 0.0);
        float _791 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_757.x + (-0.5));
        float _793 = _791 * (_757.y + (-0.5));
        float _794 = _791 * (_757.z + (-0.5));
        float _801 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_764.x + (-0.5));
        float _803 = _801 * (_764.y + (-0.5));
        float _804 = _801 * (_764.z + (-0.5));
        float _811 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_771.x + (-0.5));
        float _813 = _811 * (_771.y + (-0.5));
        float _814 = _811 * (_771.z + (-0.5));
        float _821 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_778.x + (-0.5));
        float _823 = _821 * (_778.y + (-0.5));
        float _824 = _821 * (_778.z + (-0.5));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = _792 * 0.5;
        float _829 = _802 * 0.5;
        float _830 = _812 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _845 = (dot(vec3(0.0), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3088 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _855 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3099 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3110 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0))) * (_857 + 1.0))) + _862) * _825;
        float _872 = _793 * 0.5;
        float _873 = _803 * 0.5;
        float _874 = _813 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(0.0), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3121 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3132 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3143 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_899 + 1.0))) + _904) * _826;
        float _914 = _794 * 0.5;
        float _915 = _804 * 0.5;
        float _916 = _814 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(0.0), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3176 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_941 + 1.0))) + _946) * _827;
        _963 = _794;
        _965 = _793;
        _966 = _792;
        _967 = _804;
        _968 = _803;
        _969 = _802;
        _970 = _814;
        _971 = _813;
        _972 = _812;
        _973 = _827;
        _974 = _826;
        _975 = _825;
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
    }
    else
    {
        _963 = _964;
        _965 = _964;
        _966 = _964;
        _967 = _964;
        _968 = _964;
        _969 = _964;
        _970 = _964;
        _971 = _964;
        _972 = _964;
        _973 = _964;
        _974 = _964;
        _975 = _964;
        _976 = 0.0;
        _977 = 0.0;
        _978 = 0.0;
    }
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = (cbModelParam._m0[38u].x * ((((fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1036 = (cbModelParam._m0[38u].y * ((((fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1037 = (((((fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1072 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1039.x + (-0.5));
        float _1074 = _1072 * (_1039.y + (-0.5));
        float _1075 = _1072 * (_1039.z + (-0.5));
        float _1082 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1046.x + (-0.5));
        float _1084 = _1082 * (_1046.y + (-0.5));
        float _1085 = _1082 * (_1046.z + (-0.5));
        float _1092 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1053.x + (-0.5));
        float _1094 = _1092 * (_1053.y + (-0.5));
        float _1095 = _1092 * (_1053.z + (-0.5));
        float _1102 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1060.x + (-0.5));
        float _1104 = _1102 * (_1060.y + (-0.5));
        float _1105 = _1102 * (_1060.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(0.0), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3239 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_1136 + 1.0))) + _1141) * _1106;
        float _1151 = _1074 * 0.5;
        float _1152 = _1084 * 0.5;
        float _1153 = _1094 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(0.0), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3272 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_1178 + 1.0))) + _1183) * _1107;
        float _1193 = _1075 * 0.5;
        float _1194 = _1085 * 0.5;
        float _1195 = _1095 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(0.0), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3305 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_1220 + 1.0))) + _1225) * _1108;
        _1242 = _1075;
        _1243 = _1074;
        _1244 = _1073;
        _1245 = _1085;
        _1246 = _1084;
        _1247 = _1083;
        _1248 = _1095;
        _1249 = _1094;
        _1250 = _1093;
        _1251 = _1108;
        _1252 = _1107;
        _1253 = _1106;
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _964;
        _1243 = _964;
        _1244 = _964;
        _1245 = _964;
        _1246 = _964;
        _1247 = _964;
        _1248 = _964;
        _1249 = _964;
        _1250 = _964;
        _1251 = _964;
        _1252 = _964;
        _1253 = _964;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _976)) + _976;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _977)) + _977;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _978)) + _978;
    float _1289 = fma(_1268, cbSceneParam._m0[89u].z, fma(_1267, cbSceneParam._m0[89u].y, _1266 * cbSceneParam._m0[89u].x));
    float _1292 = fma(_1268, cbSceneParam._m0[90u].z, fma(_1267, cbSceneParam._m0[90u].y, _1266 * cbSceneParam._m0[90u].x));
    float _1295 = fma(_1268, cbSceneParam._m0[91u].z, fma(_1267, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1266));
    float _1310 = _572 * (-0.5);
    float _1311 = _573 * (-0.5);
    float _1312 = _574 * (-0.5);
    float _1313 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1316 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1319 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1353;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1326 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_963, _967, _970, _973));
        float _1330 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_965, _968, _971, _974));
        float _1334 = dot(vec4(_1310, _1311, _1312, 1.0), vec4(_966, _969, _972, _975));
        float _1341 = dot(vec4(cbModelParam._m0[39u]), vec4(_1310, _1311, _1312, 1.0));
        _1353 = dot(vec3(isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1353 = 1.0;
    }
    float _1364;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1355 = dot(vec4(cbModelParam._m0[40u]), vec4(_1310, _1311, _1312, 1.0));
        _1364 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1355) ? 0.0 : (isnan(0.0) ? _1355 : max(0.0, _1355))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1364 = 1.0;
    }
    float _1368 = (_1364 * cbModelParam._m0[1u].x) + (_1353 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1440 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1443 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1469;
        if (_1437 > 0.0)
        {
            _1469 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1469 = frontier_phi_41_39_ladder;
        }
        float _1789;
        if (_1440 > 0.0)
        {
            _1789 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1789 = frontier_phi_50_46_ladder;
        }
        float _2100;
        if (_1443 > 0.0)
        {
            _2100 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2100 = frontier_phi_64_57_ladder;
        }
        float _2102 = isnan(_1789) ? _1469 : (isnan(_1469) ? _1789 : min(_1469, _1789));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1437) + _1426;
        float _2108 = (_2103 * _1440) + _1430;
        float _2109 = (_2103 * _1443) + _1434;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2110;
        float _2113 = _2110 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2109 > _2113) || ((_2109 < _2111) || ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 < _2111) || (_2107 > _2113))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2109, cbModelParam._m0[9u].z, fma(_2108, cbModelParam._m0[9u].y, _2107 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2109, cbModelParam._m0[10u].z, fma(_2108, cbModelParam._m0[10u].y, _2107 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2109, cbModelParam._m0[11u].z, fma(_2108, cbModelParam._m0[11u].y, _2107 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_40_64_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_40_64_ladder_2;
        _1461 = frontier_phi_40_64_ladder_1;
        _1463 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1466 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1518 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1522 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1526 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1529 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1532 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1535 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1794;
        if (_1529 > 0.0)
        {
            _1794 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1794 = frontier_phi_52_48_ladder;
        }
        float _2126;
        if (_1532 > 0.0)
        {
            _2126 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2126 = frontier_phi_66_59_ladder;
        }
        float _2313;
        if (_1535 > 0.0)
        {
            _2313 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2313 = frontier_phi_84_77_ladder;
        }
        float _2315 = isnan(_2126) ? _1794 : (isnan(_1794) ? _2126 : min(_1794, _2126));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1529) + _1518;
        float _2321 = (_2316 * _1532) + _1522;
        float _2322 = (_2316 * _1535) + _1526;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2323;
        float _2326 = _2323 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2322 > _2326) || ((_2322 < _2324) || ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 < _2324) || (_2320 > _2326))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2322, cbModelParam._m0[17u].z, fma(_2321, cbModelParam._m0[17u].y, _2320 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2322, cbModelParam._m0[18u].z, fma(_2321, cbModelParam._m0[18u].y, _2320 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2322, cbModelParam._m0[19u].z, fma(_2321, cbModelParam._m0[19u].y, _2320 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_49_84_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1554 = frontier_phi_49_84_ladder_2;
        _1556 = frontier_phi_49_84_ladder_1;
        _1558 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1466);
        _1554 = _1538.x * cbModelParam._m0[1u].z;
        _1556 = _1538.y * cbModelParam._m0[1u].z;
        _1558 = _1538.z * cbModelParam._m0[1u].z;
    }
    float _1570 = _633 * 0.01200000010430812835693359375;
    float _1572 = _1570 * ((cbModelParam._m0[1u].w * (_1554 - _1459)) + _1459);
    float _1573 = _1570 * ((cbModelParam._m0[1u].w * (_1556 - _1461)) + _1461);
    float _1574 = _1570 * ((cbModelParam._m0[1u].w * (_1558 - _1463)) + _1463);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    vec4 _1591 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_593, _594));
    float _1593 = _1591.w;
    float _1606 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1593);
    float _1607 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1593);
    float _1608 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1593);
    uvec4 _1612 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1614 = _1612.x * 14u;
    uint _1615 = _1614 + 13u;
    float _1620 = _633 + (-1.0);
    float _1623 = (cbLight._m0[_1615].x * _1620) + 1.0;
    float _1624 = (cbLight._m0[_1615].y * _1620) + 1.0;
    uint _1625 = _1614 + 5u;
    float _1631 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1635 = _1614 + 4u;
    float _1644 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1648 = _1614 | 1u;
    float _1659 = dot(vec3(cbLight._m0[_1614].xyz), vec3(0.0));
    float _1662 = dot(vec3(cbLight._m0[_1648].xyz), vec3(0.0));
    float _3441 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _3452 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1667 = (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.3183098733425140380859375;
    float _1669 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.3183098733425140380859375;
    float _1676 = ((cbLight._m0[_1625].x * _1631) * _1669) + (((cbLight._m0[_1635].x * _1606) * _1644) * _1667);
    float _1677 = ((_1631 * cbLight._m0[_1625].y) * _1669) + (((cbLight._m0[_1635].y * _1607) * _1644) * _1667);
    float _1678 = ((_1631 * cbLight._m0[_1625].z) * _1669) + (((cbLight._m0[_1635].z * _1608) * _1644) * _1667);
    uint _1679 = _1614 + 8u;
    float _1685 = cbLight._m0[_1614].x + _572;
    float _1686 = cbLight._m0[_1614].y + _573;
    float _1687 = cbLight._m0[_1614].z + _574;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1695 = dot(vec3(0.0), vec3(cbLight._m0[_1614].xyz));
    float _3463 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _1699 = dot(vec3(0.0), vec3(_572, _573, _574));
    float _3474 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _1703 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_1685 * _1691, _1686 * _1691, _1687 * _1691));
    float _3485 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1714 = (exp2(log2(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1720 = (0.5 / ((_1698 + 9.9999999392252902907785028219223e-09) + _1702)) * _1698;
    float _3496 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1722 = (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.31831014156341552734375;
    uint _1736 = _1614 + 9u;
    float _1742 = cbLight._m0[_1648].x + _572;
    float _1743 = cbLight._m0[_1648].y + _573;
    float _1744 = cbLight._m0[_1648].z + _574;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1752 = dot(vec3(0.0), vec3(cbLight._m0[_1648].xyz));
    float _3507 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1742 * _1748, _1743 * _1748, _1744 * _1748));
    float _3518 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1765 = (exp2(log2(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1769 = (0.5 / ((_1755 + 9.9999999392252902907785028219223e-09) + _1702)) * _1755;
    float _3529 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * 0.31831014156341552734375;
    float _1781 = (((_1765 * cbLight._m0[_1736].x) * _1771) * _1631) + ((((cbLight._m0[_1679].x * _1606) * _1714) * _1722) * _1644);
    float _1782 = (((_1765 * cbLight._m0[_1736].y) * _1771) * _1631) + ((((cbLight._m0[_1679].y * _1607) * _1714) * _1722) * _1644);
    float _1783 = (((_1765 * cbLight._m0[_1736].z) * _1771) * _1631) + ((((cbLight._m0[_1679].z * _1608) * _1714) * _1722) * _1644);
    float _1899;
    float _1901;
    float _1903;
    float _1905;
    float _1907;
    float _1909;
    if (_1612.y == 0u)
    {
        float _1839 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1840 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1839;
        float _1841 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1839;
        float _1842 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1839;
        uvec4 _1854 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1855 = _1854.x;
        uint _1866 = uint((float(_1854.y) * floor(float(uint(cbSceneParam._m0[85u].y * _594) / _1855))) + floor(float(uint(cbSceneParam._m0[85u].x * _593) / _1855)));
        float _1876 = (log2(_1842 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1877 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        uint _1880 = uint(isnan(14.0) ? _1877 : (isnan(_1877) ? 14.0 : min(_1877, 14.0)));
        uvec4 _1885 = texelFetch(g_lightClusterGridBuffer, int(((_1880 << 2u) + (_1866 << 6u)) >> 2u));
        uint _1886 = _1885.x;
        uint _1887 = _1854.z;
        float _1977;
        float _1979;
        float _1981;
        float _1983;
        float _1985;
        float _1987;
        if (((((1u << ((_1887 >> 4u) & 15u)) + 4294967295u) & _1886) == 0u) || ((_1887 & 240u) == 0u))
        {
            _1977 = 0.0;
            _1979 = 0.0;
            _1981 = 0.0;
            _1983 = 0.0;
            _1985 = 0.0;
            _1987 = 0.0;
        }
        else
        {
            float _1978;
            float _1980;
            float _1982;
            float _1984;
            float _1986;
            float _1988;
            float _2160 = 0.0;
            float _2161 = 0.0;
            float _2162 = 0.0;
            float _2163 = 0.0;
            float _2164 = 0.0;
            float _2165 = 0.0;
            uint _2166 = 0u;
            uint _2175;
            bool _2176;
            for (;;)
            {
                _2175 = texelFetch(g_lightClassification, int((((_1880 << 5u) + (_1866 << 9u)) + (_2166 << 2u)) >> 2u)).x;
                _2176 = _2175 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2176)
                {
                    frontier_phi_79_pred = _2165;
                    frontier_phi_79_pred_1 = _2164;
                    frontier_phi_79_pred_2 = _2163;
                    frontier_phi_79_pred_3 = _2162;
                    frontier_phi_79_pred_4 = _2161;
                    frontier_phi_79_pred_5 = _2160;
                }
                else
                {
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    uint _2362;
                    _2356 = _2160;
                    _2357 = _2161;
                    _2358 = _2162;
                    _2359 = _2163;
                    _2360 = _2164;
                    _2361 = _2165;
                    _2362 = _2175;
                    float _2257;
                    float _2258;
                    float _2259;
                    float _2260;
                    float _2261;
                    float _2262;
                    for (;;)
                    {
                        uint _2366 = uint(findLSB(_2362)) + (_2166 << 5u);
                        uint _2363 = (_2362 + 4294967295u) & _2362;
                        uint _2368 = _2366 * 48u;
                        vec4 _2382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2368)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 3u)).x));
                        uint _2388 = (_2366 * 48u) + 4u;
                        vec4 _2401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2388)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2388 + 3u)).x));
                        uint _2407 = (_2366 * 48u) + 8u;
                        vec3 _2418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2407)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2407 + 2u)).x));
                        float _2422 = _2382.x - _1840;
                        float _2423 = _2382.y - _1841;
                        float _2424 = _2382.z - _1842;
                        float _2425 = dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424));
                        float _2428 = inversesqrt(_2425);
                        float _2437 = 1.0 - (_2425 * _2382.w);
                        float _3550 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                        float _2438 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
                        float _2439 = sqrt(_2425) * _2401.w;
                        float _2442 = 1.39999997615814208984375 / (_2439 + 1.39999997615814208984375);
                        float _2443 = _2442 * _2442;
                        float _2446 = ((1.0 - _2443) * dot(vec3(0.0), vec3(_2428 * _2422, _2428 * _2423, _2428 * _2424))) + _2443;
                        float _2449 = _2439 * _2439;
                        float _2453 = ((isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0))) * _2438) / ((_2449 * 0.699999988079071044921875) + 1.0);
                        float _2457 = (-0.0) - _1840;
                        float _2458 = (-0.0) - _1841;
                        float _2459 = (-0.0) - _1842;
                        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
                        float _2467 = dot(vec3(0.0), vec3(_2463 * _2457, _2463 * _2458, _2463 * _2459));
                        float _3566 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
                        float _3577 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
                        float _2471 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
                        float _2475 = (0.5 / (((isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) + 9.9999999392252902907785028219223e-09) + _2471)) * _2471;
                        float _3588 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
                        float _2484 = (((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 3.1415927410125732421875) / ((_2449 * 2.1991131305694580078125) + 3.141590118408203125)) * _2438;
                        _2260 = (_2453 * _2401.x) + _2359;
                        _2261 = (_2453 * _2401.y) + _2360;
                        _2262 = (_2453 * _2401.z) + _2361;
                        _2257 = (_2484 * _2418.x) + _2356;
                        _2258 = (_2484 * _2418.y) + _2357;
                        _2259 = (_2484 * _2418.z) + _2358;
                        if (_2363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2356 = _2257;
                            _2357 = _2258;
                            _2358 = _2259;
                            _2359 = _2260;
                            _2360 = _2261;
                            _2361 = _2262;
                            _2362 = _2363;
                        }
                    }
                    frontier_phi_79_pred = _2262;
                    frontier_phi_79_pred_1 = _2261;
                    frontier_phi_79_pred_2 = _2260;
                    frontier_phi_79_pred_3 = _2259;
                    frontier_phi_79_pred_4 = _2258;
                    frontier_phi_79_pred_5 = _2257;
                }
                _1988 = frontier_phi_79_pred;
                _1986 = frontier_phi_79_pred_1;
                _1984 = frontier_phi_79_pred_2;
                _1982 = frontier_phi_79_pred_3;
                _1980 = frontier_phi_79_pred_4;
                _1978 = frontier_phi_79_pred_5;
                uint _2167 = _2166 + 1u;
                if (_2167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2160 = _1978;
                    _2161 = _1980;
                    _2162 = _1982;
                    _2163 = _1984;
                    _2164 = _1986;
                    _2165 = _1988;
                    _2166 = _2167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1977 = _1978;
            _1979 = _1980;
            _1981 = _1982;
            _1983 = _1984;
            _1985 = _1986;
            _1987 = _1988;
        }
        uvec4 _1991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1992 = _1991.z;
        uint _1994 = (_1992 >> 8u) & 15u;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        if (((4294967295u << _1994) & _1886) == 0u)
        {
            _2131 = _1977;
            _2133 = _1979;
            _2135 = _1981;
            _2137 = _1983;
            _2139 = _1985;
            _2141 = _1987;
        }
        else
        {
            float _2156 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1994 < ((_1992 >> 12u) & 15u))
            {
                float _2132;
                float _2134;
                float _2136;
                float _2138;
                float _2140;
                float _2142;
                float _2339 = _1977;
                float _2340 = _1979;
                float _2341 = _1981;
                float _2342 = _1983;
                float _2343 = _1985;
                float _2344 = _1987;
                uint _2345 = _1994;
                uint _2354;
                bool _2355;
                for (;;)
                {
                    _2354 = texelFetch(g_lightClassification, int((((_1880 << 5u) + (_1866 << 9u)) + (_2345 << 2u)) >> 2u)).x;
                    _2355 = _2354 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2355)
                    {
                        frontier_phi_93_pred = _2343;
                        frontier_phi_93_pred_1 = _2342;
                        frontier_phi_93_pred_2 = _2341;
                        frontier_phi_93_pred_3 = _2340;
                        frontier_phi_93_pred_4 = _2339;
                        frontier_phi_93_pred_5 = _2344;
                    }
                    else
                    {
                        float _2519;
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2532 = _2339;
                        float _2533 = _2340;
                        float _2534 = _2341;
                        float _2535 = _2342;
                        float _2536 = _2343;
                        float _2537 = _2344;
                        uint _2538 = _2354;
                        uint _2539;
                        vec4 _2564;
                        float _2565;
                        vec4 _2580;
                        vec3 _2592;
                        vec4 _2607;
                        vec4 _2622;
                        float _2668;
                        bool _2669;
                        for (;;)
                        {
                            uint _2549 = ((_2345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2538));
                            _2539 = (_2538 + 4294967295u) & _2538;
                            uint _2551 = _2549 * 40u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            _2565 = _2564.w;
                            uint _2567 = (_2549 * 40u) + 4u;
                            _2580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 3u)).x));
                            uint _2582 = (_2549 * 40u) + 8u;
                            _2592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x));
                            uint _2594 = (_2549 * 40u) + 16u;
                            _2607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2594 + 3u)).x));
                            uint _2609 = (_2549 * 40u) + 20u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            uint _2624 = (_2549 * 40u) + 24u;
                            vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2643 = (_2549 * 40u) + 28u;
                            vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2643 + 3u)).x));
                            _2668 = fma(_1842, _2656.z, fma(_1841, _2656.y, _2656.x * _1840)) + _2656.w;
                            _2669 = !((fma(_1842, _2637.z, fma(_1841, _2637.y, _2637.x * _1840)) + _2637.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2669)
                            {
                                float _2696 = _2564.x - _1840;
                                float _2697 = _2564.y - _1841;
                                float _2698 = _2564.z - _1842;
                                float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                                float _2702 = inversesqrt(_2699);
                                float _2703 = _2702 * _2696;
                                float _2704 = _2702 * _2697;
                                float _2705 = _2702 * _2698;
                                float _2709 = 1.0 - (_2699 / (_2565 * _2565));
                                float _3599 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                                float _2710 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                                float _2714 = sqrt(_2699) * _2580.w;
                                float _2716 = 1.39999997615814208984375 / (_2714 + 1.39999997615814208984375);
                                float _2717 = _2716 * _2716;
                                float _2718 = 1.0 - _2717;
                                float _2720 = (_2718 * dot(vec3(_2703, _2704, _2705), vec3(0.0))) + _2717;
                                float _2723 = _2714 * _2714;
                                float _2727 = (fma(_1842, _2607.z, fma(_1841, _2607.y, _2607.x * _1840)) + _2607.w) / _2668;
                                float _2728 = (fma(_1842, _2622.z, fma(_1841, _2622.y, _2622.x * _1840)) + _2622.w) / _2668;
                                float _2732 = 1.0 - dot(vec2(_2727, _2728), vec2(_2727, _2728));
                                float _3615 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                                float _2733 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                                float _2734 = _2733 * (((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2710) / ((_2723 * 0.699999988079071044921875) + 1.0));
                                float _2744 = dot(vec3(0.0), vec3((-0.0) - (_1840 * _2156), (-0.0) - (_1841 * _2156), (-0.0) - (_1842 * _2156)));
                                float _3626 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2752 = (_2718 * dot(vec3(0.0), vec3(_2703, _2704, _2705))) + _2717;
                                float _3637 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                                float _2753 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
                                float _2757 = (0.5 / (((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) + 9.9999999392252902907785028219223e-09) + _2753)) * _2753;
                                float _3648 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2764 = (_2733 * _2710) * (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 3.1415927410125732421875) / ((_2723 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2734 * _2580.z;
                                frontier_phi_99_pred_1 = _2734 * _2580.y;
                                frontier_phi_99_pred_2 = _2734 * _2580.x;
                                frontier_phi_99_pred_3 = _2764 * _2592.z;
                                frontier_phi_99_pred_4 = _2764 * _2592.y;
                                frontier_phi_99_pred_5 = _2764 * _2592.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2773 = frontier_phi_99_pred;
                            _2772 = frontier_phi_99_pred_1;
                            _2771 = frontier_phi_99_pred_2;
                            _2770 = frontier_phi_99_pred_3;
                            _2769 = frontier_phi_99_pred_4;
                            _2768 = frontier_phi_99_pred_5;
                            _2522 = _2771 + _2535;
                            _2523 = _2772 + _2536;
                            _2524 = _2773 + _2537;
                            _2519 = _2768 + _2532;
                            _2520 = _2769 + _2533;
                            _2521 = _2770 + _2534;
                            if (_2539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2532 = _2519;
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2539;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2523;
                        frontier_phi_93_pred_1 = _2522;
                        frontier_phi_93_pred_2 = _2521;
                        frontier_phi_93_pred_3 = _2520;
                        frontier_phi_93_pred_4 = _2519;
                        frontier_phi_93_pred_5 = _2524;
                    }
                    _2140 = frontier_phi_93_pred;
                    _2138 = frontier_phi_93_pred_1;
                    _2136 = frontier_phi_93_pred_2;
                    _2134 = frontier_phi_93_pred_3;
                    _2132 = frontier_phi_93_pred_4;
                    _2142 = frontier_phi_93_pred_5;
                    uint _2346 = _2345 + 1u;
                    if (_2346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2339 = _2132;
                        _2340 = _2134;
                        _2341 = _2136;
                        _2342 = _2138;
                        _2343 = _2140;
                        _2344 = _2142;
                        _2345 = _2346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2142;
                frontier_phi_68_69_ladder_1 = _2140;
                frontier_phi_68_69_ladder_2 = _2138;
                frontier_phi_68_69_ladder_3 = _2136;
                frontier_phi_68_69_ladder_4 = _2132;
                frontier_phi_68_69_ladder_5 = _2134;
            }
            else
            {
                frontier_phi_68_69_ladder = _1987;
                frontier_phi_68_69_ladder_1 = _1985;
                frontier_phi_68_69_ladder_2 = _1983;
                frontier_phi_68_69_ladder_3 = _1981;
                frontier_phi_68_69_ladder_4 = _1977;
                frontier_phi_68_69_ladder_5 = _1979;
            }
            _2131 = frontier_phi_68_69_ladder_4;
            _2133 = frontier_phi_68_69_ladder_5;
            _2135 = frontier_phi_68_69_ladder_3;
            _2137 = frontier_phi_68_69_ladder_2;
            _2139 = frontier_phi_68_69_ladder_1;
            _2141 = frontier_phi_68_69_ladder;
        }
        float _2146 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _1899 = (_2146 * _2137) + _1676;
        _1901 = (_2146 * _2139) + _1677;
        _1903 = (_2146 * _2141) + _1678;
        _1905 = ((_2131 * 0.039999999105930328369140625) * _2146) + _1781;
        _1907 = ((_2133 * 0.039999999105930328369140625) * _2146) + _1782;
        _1909 = ((_2135 * 0.039999999105930328369140625) * _2146) + _1783;
    }
    else
    {
        _1899 = _1676;
        _1901 = _1677;
        _1903 = _1678;
        _1905 = _1781;
        _1907 = _1782;
        _1909 = _1783;
    }
    float _3664 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3675 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3686 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _1926 = ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1899 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _633))) + ((_1905 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _1927 = ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1901 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _633))) + ((_1907 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _1928 = ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1903 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _633))) + ((_1909 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1368)) * cbPerFrame._m0[3u].x);
    float _1929 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    uint _1932 = _607 + 6u;
    float _1940 = _593 / cbSceneParam._m0[86u].x;
    float _1941 = _594 / cbSceneParam._m0[86u].y;
    vec4 _1955 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1940, _1941, (log2((isnan(cbSceneParam._m0[77u].w) ? _567 : (isnan(_567) ? cbSceneParam._m0[77u].w : min(_567, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1957 = _1955.x;
    float _1958 = _1955.y;
    float _1959 = _1955.z;
    float _1960 = _1955.w;
    float _2040;
    float _2042;
    float _2044;
    float _2046;
    if (_567 > cbSceneParam._m0[78u].w)
    {
        float _2002 = isnan(_567) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _567 : min(cbSceneParam._m0[80u].w, _567));
        float _2003 = _2002 / _567;
        float _2014 = _2003 * _263;
        float _2015 = _264 * _2003;
        float _2016 = (-0.0) - _2015;
        float _2017 = _2003 * _265;
        float _2019 = (cbSceneParam._m0[77u].w * _2016) / _2002;
        float _2020 = _2019 + cbSceneParam._m0[79u].w;
        float _2021 = cbSceneParam._m0[79u].w - _2015;
        float _2027 = sqrt(((_2014 * _2014) + (_2015 * _2015)) + (_2017 * _2017));
        float _2030 = (1.0 - (cbSceneParam._m0[77u].w / _2002)) * _2027;
        float _2036 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2038 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2270;
        if (abs((_2016 - _2019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2270 = ((((_2020 > 0.0) ? exp2(_2036 * _2020) : (2.0 - exp2(_2038 * _2020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2030;
        }
        else
        {
            float _2189 = 1.0 / cbSceneParam._m0[80u].x;
            float _2190 = isnan(_2021) ? _2020 : (isnan(_2020) ? _2021 : max(_2020, _2021));
            float _2191 = isnan(_2021) ? _2020 : (isnan(_2020) ? _2021 : min(_2020, _2021));
            float _2200 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : min(_2190, 0.0));
            float _2201 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : min(_2191, 0.0));
            _2270 = ((abs(_2027 / _2016) * cbSceneParam._m0[80u].y) * ((((_2200 - _2201) * 2.0) - ((exp2(_2036 * (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0)))) - exp2(_2036 * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))))) * _2189)) - ((exp2(_2038 * _2200) - exp2(_2038 * _2201)) * _2189))) + (_2030 * cbSceneParam._m0[80u].z);
        }
        vec4 _2272 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1940, _1941, 1.0), 0.0);
        float _2281 = exp2((_2270 * (-1.44269502162933349609375)) * (1.0 - _2272.w));
        float _2282 = log2(_2281);
        float _2298 = log2(_1960);
        _2040 = (exp2(_2298 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].x)) * _2272.x) / cbSceneParam._m0[78u].x)) + _1957;
        _2042 = (exp2(_2298 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].y)) * _2272.y) / cbSceneParam._m0[78u].y)) + _1958;
        _2044 = (exp2(_2298 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2282 * cbSceneParam._m0[78u].z)) * _2272.z) / cbSceneParam._m0[78u].z)) + _1959;
        _2046 = _2281 * _1960;
    }
    else
    {
        _2040 = _1957;
        _2042 = _1958;
        _2044 = _1959;
        _2046 = _1960;
    }
    bool _2308;
    vec4 _2056;
    vec4 _2079;
    float _2081;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    bool _2099;
    for (;;)
    {
        _2056 = cbMatDynParam._m0[0u];
        float _2058 = roundEven(_2056.y);
        bool _2059 = _2058 == 3.0;
        float _2061 = log2(_2046);
        float _2068 = exp2(_2061 * cbSceneParam._m0[78u].x) * _1929;
        float _2069 = exp2(_2061 * cbSceneParam._m0[78u].y) * _1930;
        float _2070 = exp2(_2061 * cbSceneParam._m0[78u].z) * _1931;
        float _2077 = _581 + (-0.5);
        _2079 = cbMtdParam._m0[1u];
        _2081 = _2079.y * _2077;
        float _2084 = (_2058 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2085 = _2084 * (_2059 ? _2068 : (_2068 + (cbSceneParam._m0[72u].w * _2040)));
        _2086 = _2084 * (_2059 ? _2069 : (_2069 + (cbSceneParam._m0[72u].w * _2042)));
        _2087 = _2084 * (_2059 ? _2070 : (_2070 + (cbSceneParam._m0[72u].w * _2044)));
        _2088 = _2077 * 0.999000012874603271484375;
        _2099 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2099)
        {
            if ((cbInstanceData._m0[_607 + 7u].x + _2088) < 0.5)
            {
                _2308 = true;
                break;
            }
        }
        uint _2224 = _609 + uint(_2056.w);
        if ((cbInstanceData._m0[_2224].w < 1.0) && ((cbInstanceData._m0[_2224].w + _2088) < 0.5))
        {
            _2308 = true;
            break;
        }
        if ((_2081 + 1.0) < _2079.x)
        {
            _2308 = true;
            break;
        }
        _2308 = false;
        break;
    }
    float _2489;
    if (_2308)
    {
        discard_state = true;
        _2489 = 0.0;
    }
    else
    {
        _2489 = cbInstanceData._m0[_1932].w;
    }
    SV_Target.x = _2085;
    SV_Target.y = _2086;
    SV_Target.z = _2087;
    SV_Target.w = _2489;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1932].w;
    discard_exit();
}


