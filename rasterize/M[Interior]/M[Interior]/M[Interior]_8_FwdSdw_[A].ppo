#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _386;
uint _2173;
uint _2174;
uint _2175;
uint _2397;
uint _2398;
uint _2399;
float _2647;
float _2648;
float _2649;
float _2650;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _201 = _200 * TANGENT.x;
    float _202 = _200 * TANGENT.y;
    float _203 = _200 * TANGENT.z;
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _248);
    float _259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _248);
    float _260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _248);
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _311 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _318 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _330 = cbMtdParam._m0[22u].z + _258;
    float _331 = cbMtdParam._m0[22u].w + _259;
    float _332 = cbMtdParam._m0[23u].x + _260;
    float _349 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_311 * _190, _311 * _191, _311 * _192));
    float _350 = (-0.0) - dot(vec3(_330, _331, _332), vec3(_318 * _201, _318 * _202, _318 * _203));
    float _351 = (-0.0) - dot(vec3(_330, _331, _332), vec3((-0.0) - (NORMAL.x * _196), (-0.0) - (NORMAL.y * _196), (-0.0) - (NORMAL.z * _196)));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _361 = ((cbMtdParam._m0[19u].y * _349) * _355) + (((_295.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _362 = ((cbMtdParam._m0[19u].z * _350) * _355) + (((_295.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _365 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _366 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _384;
    float _387;
    float _389;
    if (_361 > 0.0)
    {
        float _370 = (1.0 - _365) / _361;
        _384 = _370;
        _387 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_370 * _356)) * 0.16666667163372039794921875;
        _389 = (fract((_370 * _362) + _366) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_361 < 0.0)
        {
            float _385 = ((-0.0) - _365) / _361;
            frontier_phi_3_2_ladder = _385;
            frontier_phi_3_2_ladder_1 = (fract((_385 * _362) + _366) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_385 * _356) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _386;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _384 = frontier_phi_3_2_ladder;
        _387 = frontier_phi_3_2_ladder_2;
        _389 = frontier_phi_3_2_ladder_1;
    }
    float _415;
    float _417;
    float _419;
    if (_362 > 0.0)
    {
        float _402 = (1.0 - _366) / _362;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_402 < _384)
        {
            frontier_phi_8_5_ladder = (fract(_402 * _356) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_402 * _361) + _365) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _402;
        }
        else
        {
            frontier_phi_8_5_ladder = _389;
            frontier_phi_8_5_ladder_1 = _387;
            frontier_phi_8_5_ladder_2 = _384;
        }
        _415 = frontier_phi_8_5_ladder_2;
        _417 = frontier_phi_8_5_ladder_1;
        _419 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_362 < 0.0)
        {
            float _416 = ((-0.0) - _366) / _362;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_416 < _384)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_416 * _356) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_416 * _361) + _365) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _416;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _389;
                frontier_phi_8_6_ladder_9_ladder_1 = _387;
                frontier_phi_8_6_ladder_9_ladder_2 = _384;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _389;
            frontier_phi_8_6_ladder_1 = _387;
            frontier_phi_8_6_ladder_2 = _384;
        }
        _415 = frontier_phi_8_6_ladder_2;
        _417 = frontier_phi_8_6_ladder_1;
        _419 = frontier_phi_8_6_ladder;
    }
    float _423 = (_356 > 0.0) ? (cbMtdParam._m0[16u].y / _356) : 5000.0;
    float _436;
    float _437;
    if (_423 < _415)
    {
        _436 = ((_365 + cbMtdParam._m0[16u].z) + (_423 * _361)) * 0.16666667163372039794921875;
        _437 = (((_423 * _362) + _366) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _436 = _417;
        _437 = _419;
    }
    vec4 _439 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_436, _437));
    float _462 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _466 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _467 = _258 * _466;
    float _468 = _259 * _466;
    float _469 = _260 * _466;
    vec4 _474 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _476 = _474.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _551 = sqrt(((_258 * _258) + (_259 * _259)) + (_260 * _260));
        float _558 = (cbMatDynParam._m0[5u].x * _551) + cbMatDynParam._m0[5u].y;
        float _2659 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        float _559 = isnan(1.0) ? _2659 : (isnan(_2659) ? 1.0 : min(_2659, 1.0));
        float _563 = (cbMatDynParam._m0[5u].z * _551) + cbMatDynParam._m0[5u].w;
        float _2670 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2670 : (isnan(_2670) ? 1.0 : min(_2670, 1.0))) - _559)) + _559) < ((_476 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _494 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _495 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _504 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_494 * cbSceneParam._m0[86u].x, _495 * cbSceneParam._m0[86u].y));
    float _507 = _504.x * TEXCOORD.z;
    float _508 = (-0.0) - _467;
    float _509 = (-0.0) - _468;
    float _510 = (-0.0) - _469;
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _626 = (cbModelParam._m0[37u].x * ((((fma(_540, cbModelParam._m0[26u].z, fma(_536, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _628 = (cbModelParam._m0[37u].y * ((((fma(_540, cbModelParam._m0[27u].z, fma(_536, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _629 = (((((fma(_540, cbModelParam._m0[28u].z, fma(_536, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_626, _628, _629), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_626, _628, _629), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_626, _628, _629), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_626, _628, _629), 0.0);
        float _666 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _676 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _686 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _696 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_653.x + (-0.5));
        float _698 = _696 * (_653.y + (-0.5));
        float _699 = _696 * (_653.z + (-0.5));
        _703 = _666 * (_632.z + (-0.5));
        _704 = _666 * (_632.y + (-0.5));
        _705 = _666 * (_632.x + (-0.5));
        _706 = _676 * (_639.z + (-0.5));
        _707 = _676 * (_639.y + (-0.5));
        _708 = _676 * (_639.x + (-0.5));
        _709 = _686 * (_646.z + (-0.5));
        _710 = _686 * (_646.y + (-0.5));
        _711 = _686 * (_646.x + (-0.5));
        _712 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        _713 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        _714 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    }
    else
    {
        _703 = _386;
        _704 = _386;
        _705 = _386;
        _706 = _386;
        _707 = _386;
        _708 = _386;
        _709 = _386;
        _710 = _386;
        _711 = _386;
        _712 = _386;
        _713 = _386;
        _714 = _386;
    }
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _771 = (cbModelParam._m0[38u].x * ((((fma(_540, cbModelParam._m0[30u].z, fma(_536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _532)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _772 = (cbModelParam._m0[38u].y * ((((fma(_540, cbModelParam._m0[31u].z, fma(_536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _532)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _773 = (((((fma(_540, cbModelParam._m0[32u].z, fma(_536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _532)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _808 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _818 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _828 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _838 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_796.x + (-0.5));
        float _840 = _838 * (_796.y + (-0.5));
        float _841 = _838 * (_796.z + (-0.5));
        _845 = _808 * (_775.z + (-0.5));
        _846 = _808 * (_775.y + (-0.5));
        _847 = _808 * (_775.x + (-0.5));
        _848 = _818 * (_782.z + (-0.5));
        _849 = _818 * (_782.y + (-0.5));
        _850 = _818 * (_782.x + (-0.5));
        _851 = _828 * (_789.z + (-0.5));
        _852 = _828 * (_789.y + (-0.5));
        _853 = _828 * (_789.x + (-0.5));
        _854 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        _855 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        _856 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    }
    else
    {
        _845 = _386;
        _846 = _386;
        _847 = _386;
        _848 = _386;
        _849 = _386;
        _850 = _386;
        _851 = _386;
        _852 = _386;
        _853 = _386;
        _854 = _386;
        _855 = _386;
        _856 = _386;
    }
    float _871 = _467 * (-0.5);
    float _872 = _468 * (-0.5);
    float _873 = _469 * (-0.5);
    float _874 = dot(vec4(_871, _872, _873, 1.0), vec4(_847, _850, _853, _856));
    float _877 = dot(vec4(_871, _872, _873, 1.0), vec4(_846, _849, _852, _855));
    float _880 = dot(vec4(_871, _872, _873, 1.0), vec4(_845, _848, _851, _854));
    float _915;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _887 = dot(vec4(_871, _872, _873, 1.0), vec4(_703, _706, _709, _712));
        float _891 = dot(vec4(_871, _872, _873, 1.0), vec4(_704, _707, _710, _713));
        float _895 = dot(vec4(_871, _872, _873, 1.0), vec4(_705, _708, _711, _714));
        float _902 = dot(vec4(cbModelParam._m0[39u]), vec4(_871, _872, _873, 1.0));
        _915 = dot(vec3(isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)), isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0)), isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_902) ? 0.0 : (isnan(0.0) ? _902 : max(0.0, _902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _915 = 1.0;
    }
    float _926;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _917 = dot(vec4(cbModelParam._m0[40u]), vec4(_871, _872, _873, 1.0));
        _926 = dot(vec3(isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)), isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)), isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_917) ? 0.0 : (isnan(0.0) ? _917 : max(0.0, _917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _926 = 1.0;
    }
    float _930 = (_926 * cbModelParam._m0[1u].x) + (_915 * (1.0 - cbModelParam._m0[1u].x));
    float _936 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1019;
    float _1021;
    float _1023;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _986 = fma(_540, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _532)) + cbModelParam._m0[13u].w;
        float _990 = fma(_540, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _532)) + cbModelParam._m0[14u].w;
        float _994 = fma(_540, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _532)) + cbModelParam._m0[15u].w;
        float _997 = fma(_510, cbModelParam._m0[13u].z, fma(_509, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508));
        float _1000 = fma(_510, cbModelParam._m0[14u].z, fma(_509, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508));
        float _1003 = fma(_510, cbModelParam._m0[15u].z, fma(_509, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508));
        float _1029;
        if (_997 > 0.0)
        {
            _1029 = abs((1.0 - _986) / _997);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_997 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_986 + 1.0) / _997);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1029 = frontier_phi_29_27_ladder;
        }
        float _1219;
        if (_1000 > 0.0)
        {
            _1219 = abs((1.0 - _990) / _1000);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1000 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_990 + 1.0) / _1000);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1219 = frontier_phi_38_34_ladder;
        }
        float _1573;
        if (_1003 > 0.0)
        {
            _1573 = abs((1.0 - _994) / _1003);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1003 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_994 + 1.0) / _1003);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1573 = frontier_phi_50_45_ladder;
        }
        float _1575 = isnan(_1219) ? _1029 : (isnan(_1029) ? _1219 : min(_1029, _1219));
        float _1576 = isnan(_1573) ? _1575 : (isnan(_1575) ? _1573 : min(_1575, _1573));
        float _1580 = (_1576 * _997) + _986;
        float _1581 = (_1576 * _1000) + _990;
        float _1582 = (_1576 * _1003) + _994;
        float _1583 = _1576 * 9.9999997473787516355514526367188e-05;
        float _1585 = (-1.0) - _1583;
        float _1587 = _1583 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1582 > _1587) || ((_1582 < _1585) || ((_1581 > _1587) || ((_1581 < _1585) || ((_1580 < _1585) || (_1580 > _1587))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1582, cbModelParam._m0[9u].z, fma(_1581, cbModelParam._m0[9u].y, _1580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1582, cbModelParam._m0[10u].z, fma(_1581, cbModelParam._m0[10u].y, _1580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1582, cbModelParam._m0[11u].z, fma(_1581, cbModelParam._m0[11u].y, _1580 * cbModelParam._m0[11u].x))), _936);
            frontier_phi_28_50_ladder = _1815.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _1815.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _1815.x * cbModelParam._m0[1u].y;
        }
        _1019 = frontier_phi_28_50_ladder_2;
        _1021 = frontier_phi_28_50_ladder_1;
        _1023 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_508, _509, _510), _936);
        _1019 = _1007.x * cbModelParam._m0[1u].y;
        _1021 = _1007.y * cbModelParam._m0[1u].y;
        _1023 = _1007.z * cbModelParam._m0[1u].y;
    }
    float _1026 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1116;
    float _1118;
    float _1120;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1080 = fma(_540, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _532)) + cbModelParam._m0[21u].w;
        float _1084 = fma(_540, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _532)) + cbModelParam._m0[22u].w;
        float _1088 = fma(_540, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _532)) + cbModelParam._m0[23u].w;
        float _1091 = fma(_510, cbModelParam._m0[21u].z, fma(_509, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508));
        float _1094 = fma(_510, cbModelParam._m0[22u].z, fma(_509, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508));
        float _1097 = fma(_510, cbModelParam._m0[23u].z, fma(_509, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508));
        float _1224;
        if (_1091 > 0.0)
        {
            _1224 = abs((1.0 - _1080) / _1091);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1091 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1080 + 1.0) / _1091);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1224 = frontier_phi_40_36_ladder;
        }
        float _1600;
        if (_1094 > 0.0)
        {
            _1600 = abs((1.0 - _1084) / _1094);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1094 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1084 + 1.0) / _1094);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1600 = frontier_phi_52_47_ladder;
        }
        float _1940;
        if (_1097 > 0.0)
        {
            _1940 = abs((1.0 - _1088) / _1097);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1097 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1088 + 1.0) / _1097);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _1940 = frontier_phi_64_59_ladder;
        }
        float _1942 = isnan(_1600) ? _1224 : (isnan(_1224) ? _1600 : min(_1224, _1600));
        float _1943 = isnan(_1940) ? _1942 : (isnan(_1942) ? _1940 : min(_1942, _1940));
        float _1947 = (_1943 * _1091) + _1080;
        float _1948 = (_1943 * _1094) + _1084;
        float _1949 = (_1943 * _1097) + _1088;
        float _1950 = _1943 * 9.9999997473787516355514526367188e-05;
        float _1951 = (-1.0) - _1950;
        float _1953 = _1950 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_1949 > _1953) || ((_1949 < _1951) || ((_1948 > _1953) || ((_1948 < _1951) || ((_1947 < _1951) || (_1947 > _1953))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1949, cbModelParam._m0[17u].z, fma(_1948, cbModelParam._m0[17u].y, _1947 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1949, cbModelParam._m0[18u].z, fma(_1948, cbModelParam._m0[18u].y, _1947 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1949, cbModelParam._m0[19u].z, fma(_1948, cbModelParam._m0[19u].y, _1947 * cbModelParam._m0[19u].x))), _1026);
            frontier_phi_37_64_ladder = _2071.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2071.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2071.x * cbModelParam._m0[1u].z;
        }
        _1116 = frontier_phi_37_64_ladder_2;
        _1118 = frontier_phi_37_64_ladder_1;
        _1120 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1100 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_508, _509, _510), _1026);
        _1116 = _1100.x * cbModelParam._m0[1u].z;
        _1118 = _1100.y * cbModelParam._m0[1u].z;
        _1120 = _1100.z * cbModelParam._m0[1u].z;
    }
    float _1132 = _507 * 0.01200000010430812835693359375;
    float _1134 = _1132 * ((cbModelParam._m0[1u].w * (_1116 - _1019)) + _1019);
    float _1135 = _1132 * ((cbModelParam._m0[1u].w * (_1118 - _1021)) + _1021);
    float _1136 = _1132 * ((cbModelParam._m0[1u].w * (_1120 - _1023)) + _1023);
    float _1157 = fma(_1136, cbSceneParam._m0[89u].z, fma(_1135, cbSceneParam._m0[89u].y, _1134 * cbSceneParam._m0[89u].x));
    float _1160 = fma(_1136, cbSceneParam._m0[90u].z, fma(_1135, cbSceneParam._m0[90u].y, _1134 * cbSceneParam._m0[90u].x));
    float _1163 = fma(_1136, cbSceneParam._m0[91u].z, fma(_1135, cbSceneParam._m0[91u].y, _1134 * cbSceneParam._m0[91u].x));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1210 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1211 = _1198 / _1210;
    float _1212 = _1202 / _1210;
    float _1213 = _1206 / _1210;
    float _1361;
    float _1362;
    float _1363;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1240 = ((uint(_1213 > cbSceneParam._m0[59u].y) + uint(_1213 > cbSceneParam._m0[59u].x)) + uint(_1213 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1241 = _1240 + 43u;
        uint _1249 = _1240 + 44u;
        uint _1257 = _1240 + 45u;
        uint _1265 = _1240 + 46u;
        float _1276 = fma(_1210, cbSceneParam._m0[_1241].w, fma(_1206, cbSceneParam._m0[_1241].z, fma(_1202, cbSceneParam._m0[_1241].y, _1198 * cbSceneParam._m0[_1241].x)));
        float _1280 = fma(_1210, cbSceneParam._m0[_1249].w, fma(_1206, cbSceneParam._m0[_1249].z, fma(_1202, cbSceneParam._m0[_1249].y, _1198 * cbSceneParam._m0[_1249].x)));
        float _1288 = fma(_1210, cbSceneParam._m0[_1265].w, fma(_1206, cbSceneParam._m0[_1265].z, fma(_1202, cbSceneParam._m0[_1265].y, _1198 * cbSceneParam._m0[_1265].x)));
        float _1293 = cbSceneParam._m0[33u].z * _1288;
        float _1295 = cbSceneParam._m0[33u].w * _1288;
        float _1298 = fma(_1210, cbSceneParam._m0[_1257].w, fma(_1206, cbSceneParam._m0[_1257].z, fma(_1202, cbSceneParam._m0[_1257].y, _1198 * cbSceneParam._m0[_1257].x))) / _1288;
        float _1346 = (cbSceneParam._m0[33u].x - sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213))) * cbSceneParam._m0[33u].y;
        float _2796 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1354 = (isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1293 + _1276) / _1288, (_1295 + _1280) / _1288), _1298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1295 + _1276) / _1288, (_1280 - _1293) / _1288), _1298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1276 - _1293) / _1288, (_1280 - _1295) / _1288), _1298), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1276 - _1295) / _1288, (_1293 + _1280) / _1288), _1298), 0.0)).x), vec4(0.25)));
        _1361 = 1.0 - (_1354 * cbSceneParam._m0[34u].x);
        _1362 = 1.0 - (_1354 * cbSceneParam._m0[34u].y);
        _1363 = 1.0 - (_1354 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1361 = 1.0;
        _1362 = 1.0;
        _1363 = 1.0;
    }
    float _1427;
    float _1429;
    float _1431;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1415 = fma(_1210, cbSceneParam._m0[63u].w, fma(_1206, cbSceneParam._m0[63u].z, fma(_1202, cbSceneParam._m0[63u].y, _1198 * cbSceneParam._m0[63u].x)));
        float _1416 = fma(_1210, cbSceneParam._m0[60u].w, fma(_1206, cbSceneParam._m0[60u].z, fma(_1202, cbSceneParam._m0[60u].y, _1198 * cbSceneParam._m0[60u].x))) / _1415;
        float _1417 = fma(_1210, cbSceneParam._m0[61u].w, fma(_1206, cbSceneParam._m0[61u].z, fma(_1202, cbSceneParam._m0[61u].y, _1198 * cbSceneParam._m0[61u].x))) / _1415;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1416 >= cbSceneParam._m0[64u].x) && (_1417 >= cbSceneParam._m0[64u].y)) && (_1416 <= cbSceneParam._m0[64u].z)) && (_1417 <= cbSceneParam._m0[64u].w))
        {
            float _1613 = fma(_1210, cbSceneParam._m0[62u].w, fma(_1206, cbSceneParam._m0[62u].z, fma(_1202, cbSceneParam._m0[62u].y, _1198 * cbSceneParam._m0[62u].x))) / _1415;
            float _1617 = isnan(cbSceneParam._m0[41u].w) ? _1613 : (isnan(_1613) ? cbSceneParam._m0[41u].w : max(_1613, cbSceneParam._m0[41u].w));
            float _1660 = (cbSceneParam._m0[33u].x - sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213))) * cbSceneParam._m0[33u].y;
            float _2812 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
            float _1667 = (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1416, cbSceneParam._m0[33u].w + _1417), _1617), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1416, _1417 - cbSceneParam._m0[33u].z), _1617), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1416 - cbSceneParam._m0[33u].z, _1417 - cbSceneParam._m0[33u].w), _1617), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1416 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1417), _1617), 0.0)).x), vec4(0.25)));
            float _1671 = 1.0 - (_1667 * cbSceneParam._m0[34u].x);
            float _1672 = 1.0 - (_1667 * cbSceneParam._m0[34u].y);
            float _1673 = 1.0 - (_1667 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_1671) ? _1361 : (isnan(_1361) ? _1671 : min(_1361, _1671));
            frontier_phi_49_48_ladder_1 = isnan(_1672) ? _1362 : (isnan(_1362) ? _1672 : min(_1362, _1672));
            frontier_phi_49_48_ladder_2 = isnan(_1673) ? _1363 : (isnan(_1363) ? _1673 : min(_1363, _1673));
        }
        else
        {
            frontier_phi_49_48_ladder = _1361;
            frontier_phi_49_48_ladder_1 = _1362;
            frontier_phi_49_48_ladder_2 = _1363;
        }
        _1427 = frontier_phi_49_48_ladder;
        _1429 = frontier_phi_49_48_ladder_1;
        _1431 = frontier_phi_49_48_ladder_2;
    }
    else
    {
        _1427 = _1361;
        _1429 = _1362;
        _1431 = _1363;
    }
    uint _1433 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1437 = floatBitsToUint(cbInstanceData._m0[_1433 + 5u]);
    uint _1439 = _1437.x * 14u;
    uint _1440 = _1439 + 13u;
    float _1445 = _507 + (-1.0);
    float _1448 = (cbLight._m0[_1440].x * _1445) + 1.0;
    float _1449 = (cbLight._m0[_1440].y * _1445) + 1.0;
    uint _1450 = _1439 + 8u;
    float _1461 = cbLight._m0[_1439].x + _467;
    float _1462 = cbLight._m0[_1439].y + _468;
    float _1463 = cbLight._m0[_1439].z + _469;
    float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
    float _1471 = dot(vec3(0.0), vec3(cbLight._m0[_1439].xyz));
    float _2838 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
    float _1474 = isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0));
    float _1475 = dot(vec3(0.0), vec3(_467, _468, _469));
    float _2849 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
    float _1478 = isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0));
    float _1479 = dot(vec3(cbLight._m0[_1439].xyz), vec3(_1461 * _1467, _1462 * _1467, _1463 * _1467));
    float _2860 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _1490 = (exp2(log2(1.0 - (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1496 = (0.5 / ((_1474 + 9.9999999392252902907785028219223e-09) + _1478)) * _1474;
    float _2871 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
    float _1498 = (isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0))) * 0.31831014156341552734375;
    float _1500 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
    uint _1513 = _1439 + 9u;
    uint _1519 = _1439 | 1u;
    float _1525 = cbLight._m0[_1519].x + _467;
    float _1526 = cbLight._m0[_1519].y + _468;
    float _1527 = cbLight._m0[_1519].z + _469;
    float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
    float _1535 = dot(vec3(0.0), vec3(cbLight._m0[_1519].xyz));
    float _2887 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _1538 = isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0));
    float _1539 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1525 * _1531, _1526 * _1531, _1527 * _1531));
    float _2898 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
    float _1548 = (exp2(log2(1.0 - (isnan(1.0) ? _2898 : (isnan(_2898) ? 1.0 : min(_2898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1552 = (0.5 / ((_1538 + 9.9999999392252902907785028219223e-09) + _1478)) * _1538;
    float _2909 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1554 = (isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0))) * 0.31831014156341552734375;
    float _1555 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
    float _1565 = (((_1548 * cbLight._m0[_1513].x) * _1554) * _1555) + ((((cbLight._m0[_1450].x * _1427) * _1490) * _1498) * _1500);
    float _1566 = (((_1548 * cbLight._m0[_1513].y) * _1554) * _1555) + ((((cbLight._m0[_1450].y * _1429) * _1490) * _1498) * _1500);
    float _1567 = (((_1548 * cbLight._m0[_1513].z) * _1554) * _1555) + ((((cbLight._m0[_1450].z * _1431) * _1490) * _1498) * _1500);
    float _1730;
    float _1732;
    float _1734;
    if (_1437.y == 0u)
    {
        uvec4 _1685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1686 = _1685.x;
        uint _1697 = uint((float(_1685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _495) / _1686))) + floor(float(uint(cbSceneParam._m0[85u].x * _494) / _1686)));
        float _1707 = (log2(_1213 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1708 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        uint _1711 = uint(isnan(14.0) ? _1708 : (isnan(_1708) ? 14.0 : min(_1708, 14.0)));
        uvec4 _1716 = texelFetch(g_lightClusterGridBuffer, int(((_1711 << 2u) + (_1697 << 6u)) >> 2u));
        uint _1717 = _1716.x;
        uint _1718 = _1685.z;
        float _1824;
        float _1826;
        float _1828;
        if (((((1u << ((_1718 >> 4u) & 15u)) + 4294967295u) & _1717) == 0u) || ((_1718 & 240u) == 0u))
        {
            _1824 = 0.0;
            _1826 = 0.0;
            _1828 = 0.0;
        }
        else
        {
            float _1825;
            float _1827;
            float _1829;
            float _1986 = 0.0;
            float _1987 = 0.0;
            float _1988 = 0.0;
            uint _1989 = 0u;
            uint _1998;
            bool _1999;
            for (;;)
            {
                _1998 = texelFetch(g_lightClassification, int((((_1711 << 5u) + (_1697 << 9u)) + (_1989 << 2u)) >> 2u)).x;
                _1999 = _1998 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                if (_1999)
                {
                    frontier_phi_75_pred = _1988;
                    frontier_phi_75_pred_1 = _1987;
                    frontier_phi_75_pred_2 = _1986;
                }
                else
                {
                    float _2143;
                    float _2144;
                    float _2145;
                    uint _2146;
                    _2143 = _1986;
                    _2144 = _1987;
                    _2145 = _1988;
                    _2146 = _1998;
                    float _2076;
                    float _2077;
                    float _2078;
                    for (;;)
                    {
                        uint _2150 = uint(findLSB(_2146)) + (_1989 << 5u);
                        uint _2147 = (_2146 + 4294967295u) & _2146;
                        uint _2152 = _2150 * 48u;
                        vec4 _2166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2152)).x, texelFetch(g_PointLightRenderingBuffer, int(_2152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2152 + 3u)).x));
                        uint _2183 = (_2150 * 48u) + 8u;
                        vec3 _2194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2183)).x, texelFetch(g_PointLightRenderingBuffer, int(_2183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2183 + 2u)).x));
                        float _2198 = _2166.x - _1211;
                        float _2199 = _2166.y - _1212;
                        float _2200 = _2166.z - _1213;
                        float _2201 = dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200));
                        float _2204 = inversesqrt(_2201);
                        float _2213 = 1.0 - (_2201 * _2166.w);
                        float _2935 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
                        float _2215 = sqrt(_2201) * uintBitsToFloat(uvec4(_2173, _2174, _2175, texelFetch(g_PointLightRenderingBuffer, int(((_2150 * 48u) + 4u) + 3u)).x)).w;
                        float _2218 = 1.39999997615814208984375 / (_2215 + 1.39999997615814208984375);
                        float _2219 = _2218 * _2218;
                        float _2222 = ((1.0 - _2219) * dot(vec3(0.0), vec3(_2204 * _2198, _2204 * _2199, _2204 * _2200))) + _2219;
                        float _2224 = (-0.0) - _1211;
                        float _2225 = (-0.0) - _1212;
                        float _2226 = (-0.0) - _1213;
                        float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
                        float _2234 = dot(vec3(0.0), vec3(_2230 * _2224, _2230 * _2225, _2230 * _2226));
                        float _2946 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
                        float _2957 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
                        float _2238 = isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0));
                        float _2242 = (0.5 / (((isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) + 9.9999999392252902907785028219223e-09) + _2238)) * _2238;
                        float _2968 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
                        float _2251 = (((isnan(1.0) ? _2968 : (isnan(_2968) ? 1.0 : min(_2968, 1.0))) * 3.1415927410125732421875) / (((_2215 * _2215) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0)));
                        _2076 = (_2251 * _2194.x) + _2143;
                        _2077 = (_2251 * _2194.y) + _2144;
                        _2078 = (_2251 * _2194.z) + _2145;
                        if (_2147 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2143 = _2076;
                            _2144 = _2077;
                            _2145 = _2078;
                            _2146 = _2147;
                        }
                    }
                    frontier_phi_75_pred = _2078;
                    frontier_phi_75_pred_1 = _2077;
                    frontier_phi_75_pred_2 = _2076;
                }
                _1829 = frontier_phi_75_pred;
                _1827 = frontier_phi_75_pred_1;
                _1825 = frontier_phi_75_pred_2;
                uint _1990 = _1989 + 1u;
                if (_1990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1986 = _1825;
                    _1987 = _1827;
                    _1988 = _1829;
                    _1989 = _1990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1824 = _1825;
            _1826 = _1827;
            _1828 = _1829;
        }
        uvec4 _1832 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1833 = _1832.z;
        uint _1835 = (_1833 >> 8u) & 15u;
        float _1966;
        float _1968;
        float _1970;
        if (((4294967295u << _1835) & _1717) == 0u)
        {
            _1966 = _1824;
            _1968 = _1826;
            _1970 = _1828;
        }
        else
        {
            float _1982 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            if (_1835 < ((_1833 >> 12u) & 15u))
            {
                float _1967;
                float _1969;
                float _1971;
                float _2129 = _1824;
                float _2130 = _1826;
                float _2131 = _1828;
                uint _2132 = _1835;
                uint _2141;
                bool _2142;
                for (;;)
                {
                    _2141 = texelFetch(g_lightClassification, int((((_1711 << 5u) + (_1697 << 9u)) + (_2132 << 2u)) >> 2u)).x;
                    _2142 = _2141 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    if (_2142)
                    {
                        frontier_phi_86_pred = _2131;
                        frontier_phi_86_pred_1 = _2130;
                        frontier_phi_86_pred_2 = _2129;
                    }
                    else
                    {
                        float _2265;
                        float _2266;
                        float _2267;
                        float _2486;
                        float _2487;
                        float _2488;
                        float _2275 = _2129;
                        float _2276 = _2130;
                        float _2277 = _2131;
                        uint _2278 = _2141;
                        uint _2279;
                        uint _2289;
                        vec4 _2304;
                        float _2305;
                        vec3 _2317;
                        vec4 _2332;
                        vec4 _2347;
                        float _2393;
                        bool _2394;
                        for (;;)
                        {
                            _2289 = ((_2132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2278));
                            _2279 = (_2278 + 4294967295u) & _2278;
                            uint _2291 = _2289 * 40u;
                            _2304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 3u)).x));
                            _2305 = _2304.w;
                            uint _2307 = (_2289 * 40u) + 8u;
                            _2317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2307 + 2u)).x));
                            uint _2319 = (_2289 * 40u) + 16u;
                            _2332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2319 + 3u)).x));
                            uint _2334 = (_2289 * 40u) + 20u;
                            _2347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 3u)).x));
                            uint _2349 = (_2289 * 40u) + 24u;
                            vec4 _2362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 3u)).x));
                            uint _2368 = (_2289 * 40u) + 28u;
                            vec4 _2381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 3u)).x));
                            _2393 = fma(_1213, _2381.z, fma(_1212, _2381.y, _2381.x * _1211)) + _2381.w;
                            _2394 = !((fma(_1213, _2362.z, fma(_1212, _2362.y, _2362.x * _1211)) + _2362.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            if (_2394)
                            {
                                float _2428 = _2304.x - _1211;
                                float _2429 = _2304.y - _1212;
                                float _2430 = _2304.z - _1213;
                                float _2431 = dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430));
                                float _2434 = inversesqrt(_2431);
                                float _2441 = 1.0 - (_2431 / (_2305 * _2305));
                                float _2979 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
                                float _2443 = sqrt(_2431) * uintBitsToFloat(uvec4(_2397, _2398, _2399, texelFetch(g_SpotLightRenderingBuffer, int(((_2289 * 40u) + 4u) + 3u)).x)).w;
                                float _2445 = 1.39999997615814208984375 / (_2443 + 1.39999997615814208984375);
                                float _2446 = _2445 * _2445;
                                float _2449 = (fma(_1213, _2332.z, fma(_1212, _2332.y, _2332.x * _1211)) + _2332.w) / _2393;
                                float _2450 = (fma(_1213, _2347.z, fma(_1212, _2347.y, _2347.x * _1211)) + _2347.w) / _2393;
                                float _2454 = 1.0 - dot(vec2(_2449, _2450), vec2(_2449, _2450));
                                float _2990 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
                                float _2462 = dot(vec3(0.0), vec3((-0.0) - (_1211 * _1982), (-0.0) - (_1212 * _1982), (-0.0) - (_1213 * _1982)));
                                float _3001 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                                float _2470 = ((1.0 - _2446) * dot(vec3(0.0), vec3(_2434 * _2428, _2434 * _2429, _2434 * _2430))) + _2446;
                                float _3012 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                                float _2471 = isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0));
                                float _2475 = (0.5 / (((isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0))) + 9.9999999392252902907785028219223e-09) + _2471)) * _2471;
                                float _3023 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
                                float _2482 = ((isnan(1.0) ? _2990 : (isnan(_2990) ? 1.0 : min(_2990, 1.0))) * (isnan(1.0) ? _2979 : (isnan(_2979) ? 1.0 : min(_2979, 1.0)))) * (((isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * 3.1415927410125732421875) / (((_2443 * _2443) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2482 * _2317.x;
                                frontier_phi_92_pred_1 = _2482 * _2317.z;
                                frontier_phi_92_pred_2 = _2482 * _2317.y;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                            }
                            _2486 = frontier_phi_92_pred;
                            _2488 = frontier_phi_92_pred_1;
                            _2487 = frontier_phi_92_pred_2;
                            _2265 = _2486 + _2275;
                            _2266 = _2487 + _2276;
                            _2267 = _2488 + _2277;
                            if (_2279 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2275 = _2265;
                                _2276 = _2266;
                                _2277 = _2267;
                                _2278 = _2279;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2267;
                        frontier_phi_86_pred_1 = _2266;
                        frontier_phi_86_pred_2 = _2265;
                    }
                    _1971 = frontier_phi_86_pred;
                    _1969 = frontier_phi_86_pred_1;
                    _1967 = frontier_phi_86_pred_2;
                    uint _2133 = _2132 + 1u;
                    if (_2133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2129 = _1967;
                        _2130 = _1969;
                        _2131 = _1971;
                        _2132 = _2133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _1971;
                frontier_phi_66_67_ladder_1 = _1967;
                frontier_phi_66_67_ladder_2 = _1969;
            }
            else
            {
                frontier_phi_66_67_ladder = _1828;
                frontier_phi_66_67_ladder_1 = _1824;
                frontier_phi_66_67_ladder_2 = _1826;
            }
            _1966 = frontier_phi_66_67_ladder_1;
            _1968 = frontier_phi_66_67_ladder_2;
            _1970 = frontier_phi_66_67_ladder;
        }
        float _1975 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _1730 = ((_1966 * 0.039999999105930328369140625) * _1975) + _1565;
        _1732 = ((_1968 * 0.039999999105930328369140625) * _1975) + _1566;
        _1734 = ((_1970 * 0.039999999105930328369140625) * _1975) + _1567;
    }
    else
    {
        _1730 = _1565;
        _1732 = _1566;
        _1734 = _1567;
    }
    uint _1740 = _1433 + 9u;
    uint _1741 = _1740 + uint(cbMatDynParam._m0[0u].w);
    float _1756 = ((_439.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1741].x) + ((_1730 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _930)) * cbPerFrame._m0[3u].x);
    float _1757 = ((_439.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1741].y) + ((_1732 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _930)) * cbPerFrame._m0[3u].x);
    float _1758 = ((_439.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1741].z) + ((_1734 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _930)) * cbPerFrame._m0[3u].x);
    float _1759 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1761 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    uint _1762 = _1433 + 6u;
    float _1770 = _494 / cbSceneParam._m0[86u].x;
    float _1771 = _495 / cbSceneParam._m0[86u].y;
    vec4 _1785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1770, _1771, (log2((isnan(cbSceneParam._m0[77u].w) ? _462 : (isnan(_462) ? cbSceneParam._m0[77u].w : min(_462, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1787 = _1785.x;
    float _1788 = _1785.y;
    float _1789 = _1785.z;
    float _1790 = _1785.w;
    float _1880;
    float _1882;
    float _1884;
    float _1886;
    if (_462 > cbSceneParam._m0[78u].w)
    {
        float _1843 = isnan(_462) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _462 : min(cbSceneParam._m0[80u].w, _462));
        float _1844 = _1843 / _462;
        float _1855 = _1844 * _258;
        float _1856 = _259 * _1844;
        float _1857 = (-0.0) - _1856;
        float _1858 = _1844 * _260;
        float _1860 = (cbSceneParam._m0[77u].w * _1857) / _1843;
        float _1861 = _1860 + cbSceneParam._m0[79u].w;
        float _1862 = cbSceneParam._m0[79u].w - _1856;
        float _1868 = sqrt(((_1855 * _1855) + (_1856 * _1856)) + (_1858 * _1858));
        float _1871 = (1.0 - (cbSceneParam._m0[77u].w / _1843)) * _1868;
        float _1876 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1878 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2086;
        if (abs((_1857 - _1860) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2086 = ((((_1861 > 0.0) ? exp2(_1876 * _1861) : (2.0 - exp2(_1878 * _1861))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1871;
        }
        else
        {
            float _2012 = 1.0 / cbSceneParam._m0[80u].x;
            float _2013 = isnan(_1862) ? _1861 : (isnan(_1861) ? _1862 : max(_1861, _1862));
            float _2014 = isnan(_1862) ? _1861 : (isnan(_1861) ? _1862 : min(_1861, _1862));
            float _2023 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : min(_2013, 0.0));
            float _2024 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : min(_2014, 0.0));
            _2086 = ((abs(_1868 / _1857) * cbSceneParam._m0[80u].y) * ((((_2023 - _2024) * 2.0) - ((exp2(_1876 * (isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)))) - exp2(_1876 * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))))) * _2012)) - ((exp2(_1878 * _2023) - exp2(_1878 * _2024)) * _2012))) + (_1871 * cbSceneParam._m0[80u].z);
        }
        vec4 _2088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1770, _1771, 1.0), 0.0);
        float _2097 = exp2((_2086 * (-1.44269502162933349609375)) * (1.0 - _2088.w));
        float _2098 = log2(_2097);
        float _2114 = log2(_1790);
        _1880 = (exp2(_2114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2098 * cbSceneParam._m0[78u].x)) * _2088.x) / cbSceneParam._m0[78u].x)) + _1787;
        _1882 = (exp2(_2114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2098 * cbSceneParam._m0[78u].y)) * _2088.y) / cbSceneParam._m0[78u].y)) + _1788;
        _1884 = (exp2(_2114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2098 * cbSceneParam._m0[78u].z)) * _2088.z) / cbSceneParam._m0[78u].z)) + _1789;
        _1886 = _2097 * _1790;
    }
    else
    {
        _1880 = _1787;
        _1882 = _1788;
        _1884 = _1789;
        _1886 = _1790;
    }
    bool _2124;
    vec4 _1896;
    vec4 _1919;
    float _1921;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    bool _1939;
    for (;;)
    {
        _1896 = cbMatDynParam._m0[0u];
        float _1898 = roundEven(_1896.y);
        bool _1899 = _1898 == 3.0;
        float _1901 = log2(_1886);
        float _1908 = exp2(_1901 * cbSceneParam._m0[78u].x) * _1759;
        float _1909 = exp2(_1901 * cbSceneParam._m0[78u].y) * _1760;
        float _1910 = exp2(_1901 * cbSceneParam._m0[78u].z) * _1761;
        float _1917 = _476 + (-0.5);
        _1919 = cbMtdParam._m0[1u];
        _1921 = _1919.y * _1917;
        float _1924 = (_1898 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1925 = _1924 * (_1899 ? _1908 : (_1908 + (cbSceneParam._m0[72u].w * _1880)));
        _1926 = _1924 * (_1899 ? _1909 : (_1909 + (cbSceneParam._m0[72u].w * _1882)));
        _1927 = _1924 * (_1899 ? _1910 : (_1910 + (cbSceneParam._m0[72u].w * _1884)));
        _1928 = _1917 * 0.999000012874603271484375;
        _1939 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1939)
        {
            if ((cbInstanceData._m0[_1433 + 7u].x + _1928) < 0.5)
            {
                _2124 = true;
                break;
            }
        }
        uint _2047 = _1740 + uint(_1896.w);
        if ((cbInstanceData._m0[_2047].w < 1.0) && ((cbInstanceData._m0[_2047].w + _1928) < 0.5))
        {
            _2124 = true;
            break;
        }
        if ((_1921 + 1.0) < _1919.x)
        {
            _2124 = true;
            break;
        }
        _2124 = false;
        break;
    }
    float _2256;
    if (_2124)
    {
        discard_state = true;
        _2256 = 0.0;
    }
    else
    {
        _2256 = cbInstanceData._m0[_1762].w;
    }
    SV_Target.x = _1925;
    SV_Target.y = _1926;
    SV_Target.z = _1927;
    SV_Target.w = _2256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1762].w;
    discard_exit();
}


