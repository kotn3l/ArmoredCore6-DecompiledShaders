#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _799;
uint _1995;
uint _1996;
uint _1997;
uint _2240;
uint _2241;
uint _2242;
float _2489;
float _2490;
float _2491;
float _2492;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _287 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _322 = cbMtdParam._m0[21u].w + _263;
    float _323 = cbMtdParam._m0[22u].x + _264;
    float _324 = cbMtdParam._m0[22u].y + _265;
    float _338 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _339 = (-0.0) - dot(vec3(_322, _323, _324), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _340 = (-0.0) - dot(vec3(_322, _323, _324), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _344 = inversesqrt(dot(vec3(_338, _339, _340), vec3(_338, _339, _340)));
    float _347 = _344 * _340;
    float _348 = (_344 * _338) + (((_287.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _349 = (_344 * _339) + (((_287.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _350 = _348 * cbMtdParam._m0[18u].z;
    float _351 = _349 * cbMtdParam._m0[18u].y;
    float _352 = fract(TEXCOORD.x);
    float _353 = fract(TEXCOORD.y);
    float _359;
    if (_350 > 0.0)
    {
        _359 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _359 = frontier_phi_3_2_ladder;
    }
    float _367;
    if (_351 > 0.0)
    {
        _367 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _367 = frontier_phi_7_6_ladder;
    }
    bool _369 = _347 > 0.0;
    float _371 = _369 ? (cbMtdParam._m0[15u].x / _347) : 5000.0;
    float _372 = isnan(_367) ? _359 : (isnan(_359) ? _367 : min(_359, _367));
    float _373 = isnan(_371) ? _372 : (isnan(_372) ? _371 : min(_372, _371));
    float _377 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _378 = _352 + (-0.5);
    float _381 = _353 + (-0.5);
    float _384 = ((_373 * _347) + _377) / _377;
    vec4 _408 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_378 + (_373 * _350)) / _384) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_381 + (_373 * _351)) / _384) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _438 = _348 * cbMtdParam._m0[20u].z;
    float _439 = _349 * cbMtdParam._m0[20u].y;
    bool _440 = _438 > 0.0;
    float _445;
    if (_440)
    {
        _445 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _445 = frontier_phi_11_10_ladder;
    }
    bool _447 = _439 > 0.0;
    float _452;
    if (_447)
    {
        _452 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _452 = frontier_phi_15_14_ladder;
    }
    float _455 = _369 ? (cbMtdParam._m0[16u].x / _347) : 5000.0;
    float _456 = isnan(_452) ? _445 : (isnan(_445) ? _452 : min(_445, _452));
    float _457 = isnan(_455) ? _456 : (isnan(_456) ? _455 : min(_456, _455));
    float _461 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _465 = ((_457 * _347) + _461) / _461;
    float _470 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _472 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _488 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_378 + (_457 * _438)) / _465) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_381 + (_457 * _439)) / _465) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _500;
    if (_440)
    {
        _500 = (1.0 - _352) / _438;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _352) / _438;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _500 = frontier_phi_19_18_ladder;
    }
    float _506;
    if (_447)
    {
        _506 = (1.0 - _353) / _439;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _353) / _439;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _506 = frontier_phi_23_22_ladder;
    }
    float _508 = isnan(_506) ? _500 : (isnan(_500) ? _506 : min(_500, _506));
    float _509 = isnan(_455) ? _508 : (isnan(_508) ? _455 : min(_508, _455));
    float _516 = ((_509 * _347) + _461) / _461;
    vec4 _537 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_378 + (_509 * _438)) / _516) + 0.5) + _470) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_381 + (_509 * _439)) / _516) + 0.5) + _472) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _569 = _263 * _568;
    float _570 = _264 * _568;
    float _571 = _265 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _647 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _654 = (cbMatDynParam._m0[5u].x * _647) + cbMatDynParam._m0[5u].y;
        float _2531 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _2531 : (isnan(_2531) ? 1.0 : min(_2531, 1.0));
        float _659 = (cbMatDynParam._m0[5u].z * _647) + cbMatDynParam._m0[5u].w;
        float _2542 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0))) - _655)) + _655) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_590 * cbSceneParam._m0[86u].x, _591 * cbSceneParam._m0[86u].y));
    float _603 = _600.x * TEXCOORD.z;
    float _604 = (-0.0) - _569;
    float _605 = (-0.0) - _570;
    float _606 = (-0.0) - _571;
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _798;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = (cbModelParam._m0[37u].x * ((((fma(_636, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _723 = (cbModelParam._m0[37u].y * ((((fma(_636, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _724 = (((((fma(_636, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_721, _723, _724), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_721, _723, _724), 0.0);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_721, _723, _724), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_721, _723, _724), 0.0);
        float _761 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _771 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _781 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _791 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_748.x + (-0.5));
        float _793 = _791 * (_748.y + (-0.5));
        float _794 = _791 * (_748.z + (-0.5));
        _798 = _761 * (_727.z + (-0.5));
        _800 = _761 * (_727.y + (-0.5));
        _801 = _761 * (_727.x + (-0.5));
        _802 = _771 * (_734.z + (-0.5));
        _803 = _771 * (_734.y + (-0.5));
        _804 = _771 * (_734.x + (-0.5));
        _805 = _781 * (_741.z + (-0.5));
        _806 = _781 * (_741.y + (-0.5));
        _807 = _781 * (_741.x + (-0.5));
        _808 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        _809 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        _810 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    }
    else
    {
        _798 = _799;
        _800 = _799;
        _801 = _799;
        _802 = _799;
        _803 = _799;
        _804 = _799;
        _805 = _799;
        _806 = _799;
        _807 = _799;
        _808 = _799;
        _809 = _799;
        _810 = _799;
    }
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _867 = (cbModelParam._m0[38u].x * ((((fma(_636, cbModelParam._m0[30u].z, fma(_632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _628)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _868 = (cbModelParam._m0[38u].y * ((((fma(_636, cbModelParam._m0[31u].z, fma(_632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _628)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _869 = (((((fma(_636, cbModelParam._m0[32u].z, fma(_632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _628)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _904 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _914 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _924 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _934 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_892.x + (-0.5));
        float _936 = _934 * (_892.y + (-0.5));
        float _937 = _934 * (_892.z + (-0.5));
        _941 = _904 * (_871.z + (-0.5));
        _942 = _904 * (_871.y + (-0.5));
        _943 = _904 * (_871.x + (-0.5));
        _944 = _914 * (_878.z + (-0.5));
        _945 = _914 * (_878.y + (-0.5));
        _946 = _914 * (_878.x + (-0.5));
        _947 = _924 * (_885.z + (-0.5));
        _948 = _924 * (_885.y + (-0.5));
        _949 = _924 * (_885.x + (-0.5));
        _950 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        _951 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        _952 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    }
    else
    {
        _941 = _799;
        _942 = _799;
        _943 = _799;
        _944 = _799;
        _945 = _799;
        _946 = _799;
        _947 = _799;
        _948 = _799;
        _949 = _799;
        _950 = _799;
        _951 = _799;
        _952 = _799;
    }
    float _967 = _569 * (-0.5);
    float _968 = _570 * (-0.5);
    float _969 = _571 * (-0.5);
    float _970 = dot(vec4(_967, _968, _969, 1.0), vec4(_943, _946, _949, _952));
    float _973 = dot(vec4(_967, _968, _969, 1.0), vec4(_942, _945, _948, _951));
    float _976 = dot(vec4(_967, _968, _969, 1.0), vec4(_941, _944, _947, _950));
    float _1011;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _983 = dot(vec4(_967, _968, _969, 1.0), vec4(_798, _802, _805, _808));
        float _987 = dot(vec4(_967, _968, _969, 1.0), vec4(_800, _803, _806, _809));
        float _991 = dot(vec4(_967, _968, _969, 1.0), vec4(_801, _804, _807, _810));
        float _998 = dot(vec4(cbModelParam._m0[39u]), vec4(_967, _968, _969, 1.0));
        _1011 = dot(vec3(isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)), isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)), isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_998) ? 0.0 : (isnan(0.0) ? _998 : max(0.0, _998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1011 = 1.0;
    }
    float _1022;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1013 = dot(vec4(cbModelParam._m0[40u]), vec4(_967, _968, _969, 1.0));
        _1022 = dot(vec3(isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)), isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)), isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1013) ? 0.0 : (isnan(0.0) ? _1013 : max(0.0, _1013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1022 = 1.0;
    }
    float _1026 = (_1022 * cbModelParam._m0[1u].x) + (_1011 * (1.0 - cbModelParam._m0[1u].x));
    float _1032 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1115;
    float _1117;
    float _1119;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1082 = fma(_636, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628)) + cbModelParam._m0[13u].w;
        float _1086 = fma(_636, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628)) + cbModelParam._m0[14u].w;
        float _1090 = fma(_636, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628)) + cbModelParam._m0[15u].w;
        float _1093 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1096 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1099 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1125;
        if (_1093 > 0.0)
        {
            _1125 = abs((1.0 - _1082) / _1093);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1093 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1082 + 1.0) / _1093);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1125 = frontier_phi_41_39_ladder;
        }
        float _1423;
        if (_1096 > 0.0)
        {
            _1423 = abs((1.0 - _1086) / _1096);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1096 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1086 + 1.0) / _1096);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1423 = frontier_phi_50_46_ladder;
        }
        float _1727;
        if (_1099 > 0.0)
        {
            _1727 = abs((1.0 - _1090) / _1099);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1099 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1090 + 1.0) / _1099);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1727 = frontier_phi_64_57_ladder;
        }
        float _1729 = isnan(_1423) ? _1125 : (isnan(_1125) ? _1423 : min(_1125, _1423));
        float _1730 = isnan(_1727) ? _1729 : (isnan(_1729) ? _1727 : min(_1729, _1727));
        float _1734 = (_1730 * _1093) + _1082;
        float _1735 = (_1730 * _1096) + _1086;
        float _1736 = (_1730 * _1099) + _1090;
        float _1737 = _1730 * 9.9999997473787516355514526367188e-05;
        float _1738 = (-1.0) - _1737;
        float _1740 = _1737 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1736 > _1740) || ((_1736 < _1738) || ((_1735 > _1740) || ((_1735 < _1738) || ((_1734 < _1738) || (_1734 > _1740))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1736, cbModelParam._m0[9u].z, fma(_1735, cbModelParam._m0[9u].y, _1734 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1736, cbModelParam._m0[10u].z, fma(_1735, cbModelParam._m0[10u].y, _1734 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1736, cbModelParam._m0[11u].z, fma(_1735, cbModelParam._m0[11u].y, _1734 * cbModelParam._m0[11u].x))), _1032);
            frontier_phi_40_64_ladder = _1863.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1863.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1863.x * cbModelParam._m0[1u].y;
        }
        _1115 = frontier_phi_40_64_ladder_2;
        _1117 = frontier_phi_40_64_ladder_1;
        _1119 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1103 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1032);
        _1115 = _1103.x * cbModelParam._m0[1u].y;
        _1117 = _1103.y * cbModelParam._m0[1u].y;
        _1119 = _1103.z * cbModelParam._m0[1u].y;
    }
    float _1122 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1210;
    float _1212;
    float _1214;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1174 = fma(_636, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628)) + cbModelParam._m0[21u].w;
        float _1178 = fma(_636, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628)) + cbModelParam._m0[22u].w;
        float _1182 = fma(_636, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628)) + cbModelParam._m0[23u].w;
        float _1185 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1188 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1191 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1428;
        if (_1185 > 0.0)
        {
            _1428 = abs((1.0 - _1174) / _1185);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1185 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1174 + 1.0) / _1185);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1428 = frontier_phi_52_48_ladder;
        }
        float _1753;
        if (_1188 > 0.0)
        {
            _1753 = abs((1.0 - _1178) / _1188);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1188 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1178 + 1.0) / _1188);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1753 = frontier_phi_66_59_ladder;
        }
        float _1925;
        if (_1191 > 0.0)
        {
            _1925 = abs((1.0 - _1182) / _1191);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1191 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1182 + 1.0) / _1191);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1925 = frontier_phi_84_77_ladder;
        }
        float _1927 = isnan(_1753) ? _1428 : (isnan(_1428) ? _1753 : min(_1428, _1753));
        float _1928 = isnan(_1925) ? _1927 : (isnan(_1927) ? _1925 : min(_1927, _1925));
        float _1932 = (_1928 * _1185) + _1174;
        float _1933 = (_1928 * _1188) + _1178;
        float _1934 = (_1928 * _1191) + _1182;
        float _1935 = _1928 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1935;
        float _1938 = _1935 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1934 > _1938) || ((_1934 < _1936) || ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 < _1936) || (_1932 > _1938))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1934, cbModelParam._m0[17u].z, fma(_1933, cbModelParam._m0[17u].y, _1932 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1934, cbModelParam._m0[18u].z, fma(_1933, cbModelParam._m0[18u].y, _1932 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1934, cbModelParam._m0[19u].z, fma(_1933, cbModelParam._m0[19u].y, _1932 * cbModelParam._m0[19u].x))), _1122);
            frontier_phi_49_84_ladder = _2103.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2103.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2103.z * cbModelParam._m0[1u].z;
        }
        _1210 = frontier_phi_49_84_ladder;
        _1212 = frontier_phi_49_84_ladder_1;
        _1214 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1194 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1122);
        _1210 = _1194.x * cbModelParam._m0[1u].z;
        _1212 = _1194.y * cbModelParam._m0[1u].z;
        _1214 = _1194.z * cbModelParam._m0[1u].z;
    }
    float _1226 = _603 * 0.01200000010430812835693359375;
    float _1228 = _1226 * ((cbModelParam._m0[1u].w * (_1210 - _1115)) + _1115);
    float _1229 = _1226 * ((cbModelParam._m0[1u].w * (_1212 - _1117)) + _1117);
    float _1230 = _1226 * ((cbModelParam._m0[1u].w * (_1214 - _1119)) + _1119);
    float _1251 = fma(_1230, cbSceneParam._m0[89u].z, fma(_1229, cbSceneParam._m0[89u].y, _1228 * cbSceneParam._m0[89u].x));
    float _1254 = fma(_1230, cbSceneParam._m0[90u].z, fma(_1229, cbSceneParam._m0[90u].y, _1228 * cbSceneParam._m0[90u].x));
    float _1257 = fma(_1230, cbSceneParam._m0[91u].z, fma(_1229, cbSceneParam._m0[91u].y, _1228 * cbSceneParam._m0[91u].x));
    vec4 _1265 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_590, _591));
    float _1267 = _1265.w;
    uint _1283 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1287 = floatBitsToUint(cbInstanceData._m0[_1283 + 5u]);
    uint _1289 = _1287.x * 14u;
    uint _1290 = _1289 + 13u;
    float _1295 = _603 + (-1.0);
    float _1298 = (cbLight._m0[_1290].x * _1295) + 1.0;
    float _1299 = (cbLight._m0[_1290].y * _1295) + 1.0;
    uint _1300 = _1289 + 8u;
    float _1311 = cbLight._m0[_1289].x + _569;
    float _1312 = cbLight._m0[_1289].y + _570;
    float _1313 = cbLight._m0[_1289].z + _571;
    float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
    float _1321 = dot(vec3(0.0), vec3(cbLight._m0[_1289].xyz));
    float _2668 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0));
    float _1325 = dot(vec3(0.0), vec3(_569, _570, _571));
    float _2679 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1328 = isnan(1.0) ? _2679 : (isnan(_2679) ? 1.0 : min(_2679, 1.0));
    float _1329 = dot(vec3(cbLight._m0[_1289].xyz), vec3(_1311 * _1317, _1312 * _1317, _1313 * _1317));
    float _2690 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1340 = (exp2(log2(1.0 - (isnan(1.0) ? _2690 : (isnan(_2690) ? 1.0 : min(_2690, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1346 = (0.5 / ((_1324 + 9.9999999392252902907785028219223e-09) + _1328)) * _1324;
    float _2701 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1348 = (isnan(1.0) ? _2701 : (isnan(_2701) ? 1.0 : min(_2701, 1.0))) * 0.31831014156341552734375;
    float _1350 = isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0));
    uint _1363 = _1289 + 9u;
    uint _1369 = _1289 | 1u;
    float _1375 = cbLight._m0[_1369].x + _569;
    float _1376 = cbLight._m0[_1369].y + _570;
    float _1377 = cbLight._m0[_1369].z + _571;
    float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
    float _1385 = dot(vec3(0.0), vec3(cbLight._m0[_1369].xyz));
    float _2717 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1388 = isnan(1.0) ? _2717 : (isnan(_2717) ? 1.0 : min(_2717, 1.0));
    float _1389 = dot(vec3(cbLight._m0[_1369].xyz), vec3(_1375 * _1381, _1376 * _1381, _1377 * _1381));
    float _2728 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1398 = (exp2(log2(1.0 - (isnan(1.0) ? _2728 : (isnan(_2728) ? 1.0 : min(_2728, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1402 = (0.5 / ((_1388 + 9.9999999392252902907785028219223e-09) + _1328)) * _1388;
    float _2739 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
    float _1404 = (isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0))) * 0.31831014156341552734375;
    float _1405 = isnan(1.0) ? _1299 : (isnan(_1299) ? 1.0 : min(_1299, 1.0));
    float _1415 = (((_1398 * cbLight._m0[_1363].x) * _1404) * _1405) + ((((cbLight._m0[_1300].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1267))) * _1340) * _1348) * _1350);
    float _1416 = (((_1398 * cbLight._m0[_1363].y) * _1404) * _1405) + ((((cbLight._m0[_1300].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1267))) * _1340) * _1348) * _1350);
    float _1417 = (((_1398 * cbLight._m0[_1363].z) * _1404) * _1405) + ((((cbLight._m0[_1300].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1267))) * _1340) * _1348) * _1350);
    float _1533;
    float _1535;
    float _1537;
    if (_1287.y == 0u)
    {
        float _1473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1473;
        float _1475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1473;
        float _1476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1473;
        uvec4 _1488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1489 = _1488.x;
        uint _1500 = uint((float(_1488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _1489))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _1489)));
        float _1510 = (log2(_1476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1511 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        uint _1514 = uint(isnan(14.0) ? _1511 : (isnan(_1511) ? 14.0 : min(_1511, 14.0)));
        uvec4 _1519 = texelFetch(g_lightClusterGridBuffer, int(((_1514 << 2u) + (_1500 << 6u)) >> 2u));
        uint _1520 = _1519.x;
        uint _1521 = _1488.z;
        float _1610;
        float _1612;
        float _1614;
        if (((((1u << ((_1521 >> 4u) & 15u)) + 4294967295u) & _1520) == 0u) || ((_1521 & 240u) == 0u))
        {
            _1610 = 0.0;
            _1612 = 0.0;
            _1614 = 0.0;
        }
        else
        {
            float _1611;
            float _1613;
            float _1615;
            float _1778 = 0.0;
            float _1779 = 0.0;
            float _1780 = 0.0;
            uint _1781 = 0u;
            uint _1790;
            bool _1791;
            for (;;)
            {
                _1790 = texelFetch(g_lightClassification, int((((_1514 << 5u) + (_1500 << 9u)) + (_1781 << 2u)) >> 2u)).x;
                _1791 = _1790 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1791)
                {
                    frontier_phi_79_pred = _1780;
                    frontier_phi_79_pred_1 = _1779;
                    frontier_phi_79_pred_2 = _1778;
                }
                else
                {
                    float _1965;
                    float _1966;
                    float _1967;
                    uint _1968;
                    _1965 = _1778;
                    _1966 = _1779;
                    _1967 = _1780;
                    _1968 = _1790;
                    float _1872;
                    float _1873;
                    float _1874;
                    for (;;)
                    {
                        uint _1972 = uint(findLSB(_1968)) + (_1781 << 5u);
                        uint _1969 = (_1968 + 4294967295u) & _1968;
                        uint _1974 = _1972 * 48u;
                        vec4 _1988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1974)).x, texelFetch(g_PointLightRenderingBuffer, int(_1974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1974 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1974 + 3u)).x));
                        uint _2005 = (_1972 * 48u) + 8u;
                        vec3 _2016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2005)).x, texelFetch(g_PointLightRenderingBuffer, int(_2005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2005 + 2u)).x));
                        float _2020 = _1988.x - _1474;
                        float _2021 = _1988.y - _1475;
                        float _2022 = _1988.z - _1476;
                        float _2023 = dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022));
                        float _2026 = inversesqrt(_2023);
                        float _2035 = 1.0 - (_2023 * _1988.w);
                        float _2765 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
                        float _2037 = sqrt(_2023) * uintBitsToFloat(uvec4(_1995, _1996, _1997, texelFetch(g_PointLightRenderingBuffer, int(((_1972 * 48u) + 4u) + 3u)).x)).w;
                        float _2040 = 1.39999997615814208984375 / (_2037 + 1.39999997615814208984375);
                        float _2041 = _2040 * _2040;
                        float _2044 = ((1.0 - _2041) * dot(vec3(0.0), vec3(_2026 * _2020, _2026 * _2021, _2026 * _2022))) + _2041;
                        float _2046 = (-0.0) - _1474;
                        float _2047 = (-0.0) - _1475;
                        float _2048 = (-0.0) - _1476;
                        float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
                        float _2056 = dot(vec3(0.0), vec3(_2052 * _2046, _2052 * _2047, _2052 * _2048));
                        float _2776 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
                        float _2787 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
                        float _2060 = isnan(1.0) ? _2787 : (isnan(_2787) ? 1.0 : min(_2787, 1.0));
                        float _2064 = (0.5 / (((isnan(1.0) ? _2776 : (isnan(_2776) ? 1.0 : min(_2776, 1.0))) + 9.9999999392252902907785028219223e-09) + _2060)) * _2060;
                        float _2798 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
                        float _2073 = (((isnan(1.0) ? _2798 : (isnan(_2798) ? 1.0 : min(_2798, 1.0))) * 3.1415927410125732421875) / (((_2037 * _2037) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2765 : (isnan(_2765) ? 1.0 : min(_2765, 1.0)));
                        _1872 = (_2073 * _2016.x) + _1965;
                        _1873 = (_2073 * _2016.y) + _1966;
                        _1874 = (_2073 * _2016.z) + _1967;
                        if (_1969 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1965 = _1872;
                            _1966 = _1873;
                            _1967 = _1874;
                            _1968 = _1969;
                        }
                    }
                    frontier_phi_79_pred = _1874;
                    frontier_phi_79_pred_1 = _1873;
                    frontier_phi_79_pred_2 = _1872;
                }
                _1615 = frontier_phi_79_pred;
                _1613 = frontier_phi_79_pred_1;
                _1611 = frontier_phi_79_pred_2;
                uint _1782 = _1781 + 1u;
                if (_1782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1778 = _1611;
                    _1779 = _1613;
                    _1780 = _1615;
                    _1781 = _1782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1610 = _1611;
            _1612 = _1613;
            _1614 = _1615;
        }
        uvec4 _1618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1619 = _1618.z;
        uint _1621 = (_1619 >> 8u) & 15u;
        float _1758;
        float _1760;
        float _1762;
        if (((4294967295u << _1621) & _1520) == 0u)
        {
            _1758 = _1610;
            _1760 = _1612;
            _1762 = _1614;
        }
        else
        {
            float _1774 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1621 < ((_1619 >> 12u) & 15u))
            {
                float _1759;
                float _1761;
                float _1763;
                float _1951 = _1610;
                float _1952 = _1612;
                float _1953 = _1614;
                uint _1954 = _1621;
                uint _1963;
                bool _1964;
                for (;;)
                {
                    _1963 = texelFetch(g_lightClassification, int((((_1514 << 5u) + (_1500 << 9u)) + (_1954 << 2u)) >> 2u)).x;
                    _1964 = _1963 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1964)
                    {
                        frontier_phi_93_pred = _1953;
                        frontier_phi_93_pred_1 = _1952;
                        frontier_phi_93_pred_2 = _1951;
                    }
                    else
                    {
                        float _2108;
                        float _2109;
                        float _2110;
                        float _2329;
                        float _2330;
                        float _2331;
                        float _2118 = _1951;
                        float _2119 = _1952;
                        float _2120 = _1953;
                        uint _2121 = _1963;
                        uint _2122;
                        uint _2132;
                        vec4 _2147;
                        float _2148;
                        vec3 _2160;
                        vec4 _2175;
                        vec4 _2190;
                        float _2236;
                        bool _2237;
                        for (;;)
                        {
                            _2132 = ((_1954 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2121));
                            _2122 = (_2121 + 4294967295u) & _2121;
                            uint _2134 = _2132 * 40u;
                            _2147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2134 + 3u)).x));
                            _2148 = _2147.w;
                            uint _2150 = (_2132 * 40u) + 8u;
                            _2160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2150 + 2u)).x));
                            uint _2162 = (_2132 * 40u) + 16u;
                            _2175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2162 + 3u)).x));
                            uint _2177 = (_2132 * 40u) + 20u;
                            _2190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2177 + 3u)).x));
                            uint _2192 = (_2132 * 40u) + 24u;
                            vec4 _2205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 3u)).x));
                            uint _2211 = (_2132 * 40u) + 28u;
                            vec4 _2224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2211 + 3u)).x));
                            _2236 = fma(_1476, _2224.z, fma(_1475, _2224.y, _2224.x * _1474)) + _2224.w;
                            _2237 = !((fma(_1476, _2205.z, fma(_1475, _2205.y, _2205.x * _1474)) + _2205.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2237)
                            {
                                float _2271 = _2147.x - _1474;
                                float _2272 = _2147.y - _1475;
                                float _2273 = _2147.z - _1476;
                                float _2274 = dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273));
                                float _2277 = inversesqrt(_2274);
                                float _2284 = 1.0 - (_2274 / (_2148 * _2148));
                                float _2809 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
                                float _2286 = sqrt(_2274) * uintBitsToFloat(uvec4(_2240, _2241, _2242, texelFetch(g_SpotLightRenderingBuffer, int(((_2132 * 40u) + 4u) + 3u)).x)).w;
                                float _2288 = 1.39999997615814208984375 / (_2286 + 1.39999997615814208984375);
                                float _2289 = _2288 * _2288;
                                float _2292 = (fma(_1476, _2175.z, fma(_1475, _2175.y, _2175.x * _1474)) + _2175.w) / _2236;
                                float _2293 = (fma(_1476, _2190.z, fma(_1475, _2190.y, _2190.x * _1474)) + _2190.w) / _2236;
                                float _2297 = 1.0 - dot(vec2(_2292, _2293), vec2(_2292, _2293));
                                float _2820 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
                                float _2305 = dot(vec3(0.0), vec3((-0.0) - (_1474 * _1774), (-0.0) - (_1475 * _1774), (-0.0) - (_1476 * _1774)));
                                float _2831 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                                float _2313 = ((1.0 - _2289) * dot(vec3(0.0), vec3(_2277 * _2271, _2277 * _2272, _2277 * _2273))) + _2289;
                                float _2842 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
                                float _2314 = isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0));
                                float _2318 = (0.5 / (((isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0))) + 9.9999999392252902907785028219223e-09) + _2314)) * _2314;
                                float _2853 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
                                float _2325 = ((isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0))) * (isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0)))) * (((isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0))) * 3.1415927410125732421875) / (((_2286 * _2286) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2325 * _2160.z;
                                frontier_phi_99_pred_1 = _2325 * _2160.y;
                                frontier_phi_99_pred_2 = _2325 * _2160.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2331 = frontier_phi_99_pred;
                            _2330 = frontier_phi_99_pred_1;
                            _2329 = frontier_phi_99_pred_2;
                            _2108 = _2329 + _2118;
                            _2109 = _2330 + _2119;
                            _2110 = _2331 + _2120;
                            if (_2122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2118 = _2108;
                                _2119 = _2109;
                                _2120 = _2110;
                                _2121 = _2122;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2110;
                        frontier_phi_93_pred_1 = _2109;
                        frontier_phi_93_pred_2 = _2108;
                    }
                    _1763 = frontier_phi_93_pred;
                    _1761 = frontier_phi_93_pred_1;
                    _1759 = frontier_phi_93_pred_2;
                    uint _1955 = _1954 + 1u;
                    if (_1955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1951 = _1759;
                        _1952 = _1761;
                        _1953 = _1763;
                        _1954 = _1955;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1763;
                frontier_phi_68_69_ladder_1 = _1761;
                frontier_phi_68_69_ladder_2 = _1759;
            }
            else
            {
                frontier_phi_68_69_ladder = _1614;
                frontier_phi_68_69_ladder_1 = _1612;
                frontier_phi_68_69_ladder_2 = _1610;
            }
            _1758 = frontier_phi_68_69_ladder_2;
            _1760 = frontier_phi_68_69_ladder_1;
            _1762 = frontier_phi_68_69_ladder;
        }
        float _1767 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _1533 = ((_1758 * 0.039999999105930328369140625) * _1767) + _1415;
        _1535 = ((_1760 * 0.039999999105930328369140625) * _1767) + _1416;
        _1537 = ((_1762 * 0.039999999105930328369140625) * _1767) + _1417;
    }
    else
    {
        _1533 = _1415;
        _1535 = _1416;
        _1537 = _1417;
    }
    uint _1543 = _1283 + 9u;
    uint _1544 = _1543 + uint(cbMatDynParam._m0[0u].w);
    float _1559 = (cbInstanceData._m0[_1544].x * ((_539 * ((_488.x * cbMtdParam._m0[10u].x) - _418)) + _418)) + ((_1533 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _1026)) * cbPerFrame._m0[3u].x);
    float _1560 = (cbInstanceData._m0[_1544].y * ((_539 * ((_488.y * cbMtdParam._m0[10u].y) - _419)) + _419)) + ((_1535 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _1026)) * cbPerFrame._m0[3u].x);
    float _1561 = (cbInstanceData._m0[_1544].z * ((_539 * ((_488.z * cbMtdParam._m0[10u].z) - _420)) + _420)) + ((_1537 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _1026)) * cbPerFrame._m0[3u].x);
    float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    uint _1565 = _1283 + 6u;
    float _1573 = _590 / cbSceneParam._m0[86u].x;
    float _1574 = _591 / cbSceneParam._m0[86u].y;
    vec4 _1588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1573, _1574, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1590 = _1588.x;
    float _1591 = _1588.y;
    float _1592 = _1588.z;
    float _1593 = _1588.w;
    float _1667;
    float _1669;
    float _1671;
    float _1673;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _1629 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _1630 = _1629 / _564;
        float _1641 = _1630 * _263;
        float _1642 = _264 * _1630;
        float _1643 = (-0.0) - _1642;
        float _1644 = _1630 * _265;
        float _1646 = (cbSceneParam._m0[77u].w * _1643) / _1629;
        float _1647 = _1646 + cbSceneParam._m0[79u].w;
        float _1648 = cbSceneParam._m0[79u].w - _1642;
        float _1654 = sqrt(((_1641 * _1641) + (_1642 * _1642)) + (_1644 * _1644));
        float _1657 = (1.0 - (cbSceneParam._m0[77u].w / _1629)) * _1654;
        float _1663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1882;
        if (abs((_1643 - _1646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1882 = ((((_1647 > 0.0) ? exp2(_1663 * _1647) : (2.0 - exp2(_1665 * _1647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1657;
        }
        else
        {
            float _1804 = 1.0 / cbSceneParam._m0[80u].x;
            float _1805 = isnan(_1648) ? _1647 : (isnan(_1647) ? _1648 : max(_1647, _1648));
            float _1806 = isnan(_1648) ? _1647 : (isnan(_1647) ? _1648 : min(_1647, _1648));
            float _1815 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : min(_1805, 0.0));
            float _1816 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : min(_1806, 0.0));
            _1882 = ((abs(_1654 / _1643) * cbSceneParam._m0[80u].y) * ((((_1815 - _1816) * 2.0) - ((exp2(_1663 * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)))) - exp2(_1663 * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))))) * _1804)) - ((exp2(_1665 * _1815) - exp2(_1665 * _1816)) * _1804))) + (_1657 * cbSceneParam._m0[80u].z);
        }
        vec4 _1884 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1573, _1574, 1.0), 0.0);
        float _1893 = exp2((_1882 * (-1.44269502162933349609375)) * (1.0 - _1884.w));
        float _1894 = log2(_1893);
        float _1910 = log2(_1593);
        _1667 = (exp2(_1910 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1894 * cbSceneParam._m0[78u].x)) * _1884.x) / cbSceneParam._m0[78u].x)) + _1590;
        _1669 = (exp2(_1910 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1894 * cbSceneParam._m0[78u].y)) * _1884.y) / cbSceneParam._m0[78u].y)) + _1591;
        _1671 = (exp2(_1910 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1894 * cbSceneParam._m0[78u].z)) * _1884.z) / cbSceneParam._m0[78u].z)) + _1592;
        _1673 = _1893 * _1593;
    }
    else
    {
        _1667 = _1590;
        _1669 = _1591;
        _1671 = _1592;
        _1673 = _1593;
    }
    bool _1920;
    vec4 _1683;
    vec4 _1706;
    float _1708;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    bool _1726;
    for (;;)
    {
        _1683 = cbMatDynParam._m0[0u];
        float _1685 = roundEven(_1683.y);
        bool _1686 = _1685 == 3.0;
        float _1688 = log2(_1673);
        float _1695 = exp2(_1688 * cbSceneParam._m0[78u].x) * _1562;
        float _1696 = exp2(_1688 * cbSceneParam._m0[78u].y) * _1563;
        float _1697 = exp2(_1688 * cbSceneParam._m0[78u].z) * _1564;
        float _1704 = _578 + (-0.5);
        _1706 = cbMtdParam._m0[1u];
        _1708 = _1706.y * _1704;
        float _1711 = (_1685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1712 = _1711 * (_1686 ? _1695 : (_1695 + (cbSceneParam._m0[72u].w * _1667)));
        _1713 = _1711 * (_1686 ? _1696 : (_1696 + (cbSceneParam._m0[72u].w * _1669)));
        _1714 = _1711 * (_1686 ? _1697 : (_1697 + (cbSceneParam._m0[72u].w * _1671)));
        _1715 = _1704 * 0.999000012874603271484375;
        _1726 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1726)
        {
            if ((cbInstanceData._m0[_1283 + 7u].x + _1715) < 0.5)
            {
                _1920 = true;
                break;
            }
        }
        uint _1839 = _1543 + uint(_1683.w);
        if ((cbInstanceData._m0[_1839].w < 1.0) && ((cbInstanceData._m0[_1839].w + _1715) < 0.5))
        {
            _1920 = true;
            break;
        }
        if ((_1708 + 1.0) < _1706.x)
        {
            _1920 = true;
            break;
        }
        _1920 = false;
        break;
    }
    float _2078;
    if (_1920)
    {
        discard_state = true;
        _2078 = 0.0;
    }
    else
    {
        _2078 = cbInstanceData._m0[_1565].w;
    }
    SV_Target.x = _1712;
    SV_Target.y = _1713;
    SV_Target.z = _1714;
    SV_Target.w = _2078;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1565].w;
    discard_exit();
}


