#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1270;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _347 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _383 = cbMtdParam._m0[21u].w + _269;
    float _384 = cbMtdParam._m0[22u].x + _270;
    float _385 = cbMtdParam._m0[22u].y + _271;
    float _399 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_198, _199, _200));
    float _400 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_212, _213, _214));
    float _401 = (-0.0) - dot(vec3(_383, _384, _385), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _408 = _405 * _401;
    float _409 = (_405 * _399) + ((cbMtdParam._m0[19u].w * _287) * ((_347.x * 2.0) + (-1.0)));
    float _410 = (_405 * _400) + ((cbMtdParam._m0[20u].x * _287) * ((_347.y * 2.0) + (-1.0)));
    float _411 = _409 * cbMtdParam._m0[18u].z;
    float _412 = _410 * cbMtdParam._m0[18u].y;
    float _413 = fract(TEXCOORD.x);
    float _414 = fract(TEXCOORD.y);
    float _420;
    if (_411 > 0.0)
    {
        _420 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _420 = frontier_phi_3_2_ladder;
    }
    float _428;
    if (_412 > 0.0)
    {
        _428 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _428 = frontier_phi_7_6_ladder;
    }
    bool _430 = _408 > 0.0;
    float _432 = _430 ? (cbMtdParam._m0[15u].x / _408) : 5000.0;
    float _433 = isnan(_428) ? _420 : (isnan(_420) ? _428 : min(_420, _428));
    float _434 = isnan(_432) ? _433 : (isnan(_433) ? _432 : min(_433, _432));
    float _438 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = _413 + (-0.5);
    float _442 = _414 + (-0.5);
    float _445 = ((_434 * _408) + _438) / _438;
    vec4 _469 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_439 + (_434 * _411)) / _445) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_442 + (_434 * _412)) / _445) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _482 = (_469.x * _287) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _287) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _287) * cbMtdParam._m0[9u].z;
    float _502 = _409 * cbMtdParam._m0[20u].z;
    float _503 = _410 * cbMtdParam._m0[20u].y;
    bool _504 = _502 > 0.0;
    float _509;
    if (_504)
    {
        _509 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _509 = frontier_phi_11_10_ladder;
    }
    bool _511 = _503 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _516 = frontier_phi_15_14_ladder;
    }
    float _519 = _430 ? (cbMtdParam._m0[16u].x / _408) : 5000.0;
    float _520 = isnan(_516) ? _509 : (isnan(_509) ? _516 : min(_509, _516));
    float _521 = isnan(_519) ? _520 : (isnan(_520) ? _519 : min(_520, _519));
    float _525 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _529 = ((_521 * _408) + _525) / _525;
    float _534 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _536 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _552 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_439 + (_521 * _502)) / _529) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_442 + (_521 * _503)) / _529) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _567;
    if (_504)
    {
        _567 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _567 = frontier_phi_19_18_ladder;
    }
    float _573;
    if (_511)
    {
        _573 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _573 = frontier_phi_23_22_ladder;
    }
    float _575 = isnan(_573) ? _567 : (isnan(_567) ? _573 : min(_567, _573));
    float _576 = isnan(_519) ? _575 : (isnan(_575) ? _519 : min(_575, _519));
    float _583 = ((_576 * _408) + _525) / _525;
    vec4 _604 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_439 + (_576 * _502)) / _583) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_442 + (_576 * _503)) / _583) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _616 = (((((cbMtdParam._m0[10u].x * _287) * _552.x) - _482) * _287) * _606) + _482;
    float _617 = (((((cbMtdParam._m0[10u].y * _287) * _552.y) - _483) * _287) * _606) + _483;
    float _618 = (((((cbMtdParam._m0[10u].z * _287) * _552.z) - _484) * _287) * _606) + _484;
    float _632 = _409 * cbMtdParam._m0[21u].x;
    float _633 = _410 * cbMtdParam._m0[20u].w;
    bool _634 = _632 > 0.0;
    float _639;
    if (_634)
    {
        _639 = (1.0 - _413) / _632;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _413) / _632;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _639 = frontier_phi_27_26_ladder;
    }
    bool _641 = _633 > 0.0;
    float _646;
    if (_641)
    {
        _646 = (1.0 - _414) / _633;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _414) / _633;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _646 = frontier_phi_31_30_ladder;
    }
    float _649 = _430 ? (cbMtdParam._m0[17u].z / _408) : 5000.0;
    float _650 = isnan(_646) ? _639 : (isnan(_639) ? _646 : min(_639, _646));
    float _651 = isnan(_649) ? _650 : (isnan(_650) ? _649 : min(_650, _649));
    float _655 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _659 = ((_651 * _408) + _655) / _655;
    float _664 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _666 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _683 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_439 + (_651 * _632)) / _659) + 0.5) + _664) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_442 + (_651 * _633)) / _659) + 0.5) + _666) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _698;
    if (_634)
    {
        _698 = (1.0 - _413) / _632;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _413) / _632;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _698 = frontier_phi_35_34_ladder;
    }
    float _704;
    if (_641)
    {
        _704 = (1.0 - _414) / _633;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _414) / _633;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _704 = frontier_phi_39_38_ladder;
    }
    float _706 = isnan(_704) ? _698 : (isnan(_698) ? _704 : min(_698, _704));
    float _707 = isnan(_649) ? _706 : (isnan(_706) ? _649 : min(_706, _649));
    float _714 = ((_707 * _408) + _655) / _655;
    vec4 _734 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_439 + (_707 * _632)) / _714) + 0.5) + _664) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_442 + (_707 * _633)) / _714) + 0.5) + _666) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _736 = _734.x;
    float _746 = _287 * 0.1500000059604644775390625;
    float _757 = (_746 * ((_616 - _322) + (((((cbMtdParam._m0[14u].x * _287) * _683.x) - _616) * _287) * _736))) + _322;
    float _758 = (_746 * ((_617 - _324) + (((((cbMtdParam._m0[14u].y * _287) * _683.y) - _617) * _287) * _736))) + _324;
    float _759 = (_746 * ((_618 - _326) + (((((cbMtdParam._m0[14u].z * _287) * _683.z) - _618) * _287) * _736))) + _326;
    vec4 _771 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _775 = _771.z;
    float _778 = (_771.x * 2.0) + (-1.0);
    float _779 = (_771.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _3448 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))));
    float _788 = fma(_785, _205, fma(_779, _212, _778 * _198));
    float _791 = fma(_785, _206, fma(_779, _213, _778 * _199));
    float _794 = fma(_785, _207, fma(_779, _214, _778 * _200));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _3459 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _802 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3481 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3492 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _826 = _269 * _825;
    float _827 = _270 * _825;
    float _828 = _271 * _825;
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _857 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _860 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _873 = uint(roundEven(NORMAL.w)) * 13u;
    uint _876 = (_873 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3503 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _899 = _896.x * TEXCOORD.z;
    float _900 = dot(vec3(_799, _800, _801), vec3(_826, _827, _828));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _799) - _826;
    float _908 = (_903 * _800) - _827;
    float _909 = (_903 * _801) - _828;
    float _913 = abs(dot(vec3(_826, _827, _828), vec3(_799, _800, _801)));
    float _3536 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_802);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_968, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960));
        float _1000 = fma(_968, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960));
        float _1004 = fma(_968, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960));
        float _1027 = _960 + _799;
        float _1028 = _964 + _800;
        float _1029 = _968 + _801;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_799, _800, _801), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3584 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_799, _800, _801), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3617 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_799, _800, _801), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3650 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1271 = _1099;
        _1272 = _1098;
        _1273 = _1110;
        _1274 = _1109;
        _1275 = _1108;
        _1276 = _1120;
        _1277 = _1119;
        _1278 = _1118;
        _1279 = _1133;
        _1280 = _1132;
        _1281 = _1131;
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _1270;
        _1271 = _1270;
        _1272 = _1270;
        _1273 = _1270;
        _1274 = _1270;
        _1275 = _1270;
        _1276 = _1270;
        _1277 = _1270;
        _1278 = _1270;
        _1279 = _1270;
        _1280 = _1270;
        _1281 = _1270;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_968, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960));
        float _1314 = fma(_968, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960));
        float _1318 = fma(_968, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960));
        float _1341 = _960 + _799;
        float _1342 = _964 + _800;
        float _1343 = _968 + _801;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_799, _800, _801), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3713 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_799, _800, _801), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3746 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_799, _800, _801), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _3779 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1270;
        _1580 = _1270;
        _1581 = _1270;
        _1582 = _1270;
        _1583 = _1270;
        _1584 = _1270;
        _1585 = _1270;
        _1586 = _1270;
        _1587 = _1270;
        _1588 = _1270;
        _1589 = _1270;
        _1590 = _1270;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1282)) + _1282;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1283)) + _1283;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _907 * 0.5;
    float _1648 = _908 * 0.5;
    float _1649 = _909 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1273, _1276, _1279));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_968, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_968, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_968, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1777 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1780 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1808 = frontier_phi_54_52_ladder;
        }
        float _2177;
        if (_1777 > 0.0)
        {
            _2177 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2177 = frontier_phi_63_59_ladder;
        }
        float _2477;
        if (_1780 > 0.0)
        {
            _2477 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2477 = frontier_phi_77_70_ladder;
        }
        float _2479 = isnan(_2177) ? _1808 : (isnan(_1808) ? _2177 : min(_1808, _2177));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1774) + _1763;
        float _2485 = (_2480 * _1777) + _1767;
        float _2486 = (_2480 * _1780) + _1771;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_53_77_ladder = _2612.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2612.z * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_53_77_ladder;
        _1798 = frontier_phi_53_77_ladder_1;
        _1800 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1857 = fma(_968, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960)) + cbModelParam._m0[21u].w;
        float _1861 = fma(_968, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960)) + cbModelParam._m0[22u].w;
        float _1865 = fma(_968, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960)) + cbModelParam._m0[23u].w;
        float _1868 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1871 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1874 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2182;
        if (_1868 > 0.0)
        {
            _2182 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2182 = frontier_phi_65_61_ladder;
        }
        float _2503;
        if (_1871 > 0.0)
        {
            _2503 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2503 = frontier_phi_79_72_ladder;
        }
        float _2672;
        if (_1874 > 0.0)
        {
            _2672 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2672 = frontier_phi_93_88_ladder;
        }
        float _2674 = isnan(_2503) ? _2182 : (isnan(_2182) ? _2503 : min(_2182, _2503));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1868) + _1857;
        float _2680 = (_2675 * _1871) + _1861;
        float _2681 = (_2675 * _1874) + _1865;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_62_93_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _1893 = frontier_phi_62_93_ladder_2;
        _1895 = frontier_phi_62_93_ladder_1;
        _1897 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1805);
        _1893 = _1877.x * cbModelParam._m0[1u].z;
        _1895 = _1877.y * cbModelParam._m0[1u].z;
        _1897 = _1877.z * cbModelParam._m0[1u].z;
    }
    float _1909 = ((((1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_928 * _915)) * _899;
    float _1910 = _1909 * ((cbModelParam._m0[1u].w * (_1893 - _1796)) + _1796);
    float _1911 = _1909 * ((cbModelParam._m0[1u].w * (_1895 - _1798)) + _1798);
    float _1912 = _1909 * ((cbModelParam._m0[1u].w * (_1897 - _1800)) + _1800);
    float _1915 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1918 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1921 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1910 * cbSceneParam._m0[91u].x));
    vec4 _1929 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_834, _835));
    float _1931 = _1929.w;
    float _1943 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1931);
    float _1944 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1931);
    float _1945 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1931);
    uvec4 _1949 = floatBitsToUint(cbInstanceData._m0[_873 + 5u]);
    uint _1951 = _1949.x * 14u;
    uint _1952 = _1951 + 13u;
    float _1957 = _899 + (-1.0);
    float _1960 = (cbLight._m0[_1952].x * _1957) + 1.0;
    float _1961 = (cbLight._m0[_1952].y * _1957) + 1.0;
    uint _1962 = _1951 + 5u;
    float _1968 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1972 = _1951 + 4u;
    float _1981 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1985 = _1951 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_799, _800, _801));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_799, _800, _801));
    float _3915 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _3926 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1962].x * _1968) * _2006) + (((cbLight._m0[_1972].x * _1943) * _1981) * _2004);
    float _2014 = ((_1968 * cbLight._m0[_1962].y) * _2006) + (((cbLight._m0[_1972].y * _1944) * _1981) * _2004);
    float _2015 = ((_1968 * cbLight._m0[_1962].z) * _2006) + (((cbLight._m0[_1972].z * _1945) * _1981) * _2004);
    uint _2017 = _1951 + 8u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _802) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1951].x + _826;
    float _2033 = cbLight._m0[_1951].y + _827;
    float _2034 = cbLight._m0[_1951].z + _828;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_1951].xyz));
    float _3937 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2046 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _2047 = dot(vec3(_799, _800, _801), vec3(_2039, _2040, _2041));
    float _3959 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2039, _2040, _2041));
    float _3970 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = _2031 * _2031;
    float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
    float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2071 = 1.0 - _2031;
    float _2082 = (0.5 / (((_2046 * ((_2045 * _2071) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2071) + _2031) * _2045))) * _2045;
    float _3981 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
    uint _2098 = _1951 + 9u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _802) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1985].x + _826;
    float _2112 = cbLight._m0[_1985].y + _827;
    float _2113 = cbLight._m0[_1985].z + _828;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_1985].xyz));
    float _3992 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _2125 = dot(vec3(_799, _800, _801), vec3(_2118, _2119, _2120));
    float _4003 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2118, _2119, _2120));
    float _4014 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2110 * _2110;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2110;
    float _2157 = (0.5 / (((_2046 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2147) + _2110) * _2124))) * _2124;
    float _4025 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    float _2169 = (((_2146 * cbLight._m0[_2098].x) * _2159) * _1968) + ((((cbLight._m0[_2017].x * _1943) * _2070) * _2084) * _1981);
    float _2170 = (((_2146 * cbLight._m0[_2098].y) * _2159) * _1968) + ((((cbLight._m0[_2017].y * _1944) * _2070) * _2084) * _1981);
    float _2171 = (((_2146 * cbLight._m0[_2098].z) * _2159) * _1968) + ((((cbLight._m0[_2017].z * _1945) * _2070) * _2084) * _1981);
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1949.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            uint _2546 = 0u;
            uint _2555;
            bool _2556;
            for (;;)
            {
                _2555 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                _2556 = _2555 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2556)
                {
                    frontier_phi_90_pred = _2545;
                    frontier_phi_90_pred_1 = _2540;
                    frontier_phi_90_pred_2 = _2541;
                    frontier_phi_90_pred_3 = _2542;
                    frontier_phi_90_pred_4 = _2543;
                    frontier_phi_90_pred_5 = _2544;
                }
                else
                {
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    uint _2721;
                    _2715 = _2540;
                    _2716 = _2541;
                    _2717 = _2542;
                    _2718 = _2543;
                    _2719 = _2544;
                    _2720 = _2545;
                    _2721 = _2555;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    for (;;)
                    {
                        uint _2725 = uint(findLSB(_2721)) + (_2546 << 5u);
                        uint _2722 = (_2721 + 4294967295u) & _2721;
                        uint _2727 = _2725 * 48u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 3u)).x));
                        uint _2747 = (_2725 * 48u) + 4u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2766 = (_2725 * 48u) + 8u;
                        vec3 _2777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x));
                        float _2781 = _2741.x - _2227;
                        float _2782 = _2741.y - _2228;
                        float _2783 = _2741.z - _2229;
                        float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                        float _2787 = inversesqrt(_2784);
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2791 = dot(vec3(_854, _857, _860), vec3(_2788, _2789, _2790));
                        float _2796 = 1.0 - (_2784 * _2741.w);
                        float _4046 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2798 = sqrt(_2784) * _2760.w;
                        float _2801 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * _2791) + _2802;
                        float _2808 = _2798 * _2798;
                        float _2812 = ((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2797) / ((_2808 * 0.699999988079071044921875) + 1.0);
                        float _2816 = (-0.0) - _2227;
                        float _2817 = (-0.0) - _2228;
                        float _2818 = (-0.0) - _2229;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2823 = _2822 * _2816;
                        float _2824 = _2822 * _2817;
                        float _2825 = _2822 * _2818;
                        float _2833 = exp2(log2(1.0 / ((_2808 * 3.5) + 5.0)) * 0.25);
                        float _2834 = 1.0 - _915;
                        float _2841 = sqrt(1.0 - ((1.0 - (_2834 * _2834)) * (1.0 - (_2833 * _2833))));
                        float _2842 = _2841 * _2841;
                        float _2843 = _2842 * _2842;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
                        float _2854 = dot(vec3(_854, _857, _860), vec3(_2823, _2824, _2825));
                        float _4062 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2858 = dot(vec3(_854, _857, _860), vec3(_2850 * _2844, _2850 * _2845, _2850 * _2846));
                        float _4073 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2865 = ((_2861 * _2861) * (_2843 + (-1.0))) + 1.0;
                        float _2866 = _2801 * _2842;
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2791) + _2867;
                        float _4084 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2872 = 1.0 - _2842;
                        float _2882 = (0.5 / (((_2871 * ((_2857 * _2872) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2871 * _2872) + _2842) * _2857))) * _2871;
                        float _4095 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2893 = (((_2843 * 3.1415927410125732421875) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) / ((_2865 * _2865) * ((_2808 * 2.1991131305694580078125) + 3.141590118408203125))) * _2797;
                        _2624 = (_2812 * _2760.x) + _2718;
                        _2625 = (_2812 * _2760.y) + _2719;
                        _2626 = (_2812 * _2760.z) + _2720;
                        _2621 = (_2893 * _2777.x) + _2715;
                        _2622 = (_2893 * _2777.y) + _2716;
                        _2623 = (_2893 * _2777.z) + _2717;
                        if (_2722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2715 = _2621;
                            _2716 = _2622;
                            _2717 = _2623;
                            _2718 = _2624;
                            _2719 = _2625;
                            _2720 = _2626;
                            _2721 = _2722;
                        }
                    }
                    frontier_phi_90_pred = _2626;
                    frontier_phi_90_pred_1 = _2621;
                    frontier_phi_90_pred_2 = _2622;
                    frontier_phi_90_pred_3 = _2623;
                    frontier_phi_90_pred_4 = _2624;
                    frontier_phi_90_pred_5 = _2625;
                }
                _2375 = frontier_phi_90_pred;
                _2365 = frontier_phi_90_pred_1;
                _2367 = frontier_phi_90_pred_2;
                _2369 = frontier_phi_90_pred_3;
                _2371 = frontier_phi_90_pred_4;
                _2373 = frontier_phi_90_pred_5;
                uint _2547 = _2546 + 1u;
                if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2540 = _2365;
                    _2541 = _2367;
                    _2542 = _2369;
                    _2543 = _2371;
                    _2544 = _2373;
                    _2545 = _2375;
                    _2546 = _2547;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((4294967295u << _2381) & _2273) == 0u)
        {
            _2508 = _2364;
            _2510 = _2366;
            _2512 = _2368;
            _2514 = _2370;
            _2516 = _2372;
            _2518 = _2374;
        }
        else
        {
            float _2533 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2534 = _2533 * _2227;
            float _2535 = _2533 * _2228;
            float _2536 = _2533 * _2229;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2698 = _2364;
                float _2699 = _2366;
                float _2700 = _2368;
                float _2701 = _2370;
                float _2702 = _2372;
                float _2703 = _2374;
                uint _2704 = _2381;
                uint _2713;
                bool _2714;
                for (;;)
                {
                    _2713 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                    _2714 = _2713 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2714)
                    {
                        frontier_phi_99_pred = _2701;
                        frontier_phi_99_pred_1 = _2700;
                        frontier_phi_99_pred_2 = _2699;
                        frontier_phi_99_pred_3 = _2698;
                        frontier_phi_99_pred_4 = _2703;
                        frontier_phi_99_pred_5 = _2702;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2932 = _2698;
                        float _2933 = _2699;
                        float _2934 = _2700;
                        float _2935 = _2701;
                        float _2936 = _2702;
                        float _2937 = _2703;
                        uint _2938 = _2713;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3007;
                        vec4 _3022;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2949 = ((_2704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2994 = (_2949 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2949 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2949 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2949 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2229, _3056.z, fma(_2228, _3056.y, _3056.x * _2227)) + _3056.w;
                            _3069 = !((fma(_2229, _3037.z, fma(_2228, _3037.y, _3037.x * _2227)) + _3037.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2964.x - _2227;
                                float _3097 = _2964.y - _2228;
                                float _3098 = _2964.z - _2229;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2965 * _2965));
                                float _4106 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3114 = sqrt(_3099) * _2980.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_854, _857, _860))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2229, _3007.z, fma(_2228, _3007.y, _3007.x * _2227)) + _3007.w) / _3068;
                                float _3128 = (fma(_2229, _3022.z, fma(_2228, _3022.y, _3022.x * _2227)) + _3022.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4122 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _915;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2534;
                                float _3158 = _3104 - _2535;
                                float _3159 = _3105 - _2536;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2534, (-0.0) - _2535, (-0.0) - _2536));
                                float _4133 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3171 = dot(vec3(_854, _857, _860), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4144 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_854, _857, _860), vec3(_3103, _3104, _3105))) + _3180;
                                float _4155 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4166 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3134 * _2980.z;
                                frontier_phi_105_pred_1 = _3208 * _2992.x;
                                frontier_phi_105_pred_2 = _3208 * _2992.y;
                                frontier_phi_105_pred_3 = _3208 * _2992.z;
                                frontier_phi_105_pred_4 = _3134 * _2980.x;
                                frontier_phi_105_pred_5 = _3134 * _2980.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3217 = frontier_phi_105_pred;
                            _3212 = frontier_phi_105_pred_1;
                            _3213 = frontier_phi_105_pred_2;
                            _3214 = frontier_phi_105_pred_3;
                            _3215 = frontier_phi_105_pred_4;
                            _3216 = frontier_phi_105_pred_5;
                            _2922 = _3215 + _2935;
                            _2923 = _3216 + _2936;
                            _2924 = _3217 + _2937;
                            _2919 = _3212 + _2932;
                            _2920 = _3213 + _2933;
                            _2921 = _3214 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2922;
                        frontier_phi_99_pred_1 = _2921;
                        frontier_phi_99_pred_2 = _2920;
                        frontier_phi_99_pred_3 = _2919;
                        frontier_phi_99_pred_4 = _2924;
                        frontier_phi_99_pred_5 = _2923;
                    }
                    _2515 = frontier_phi_99_pred;
                    _2513 = frontier_phi_99_pred_1;
                    _2511 = frontier_phi_99_pred_2;
                    _2509 = frontier_phi_99_pred_3;
                    _2519 = frontier_phi_99_pred_4;
                    _2517 = frontier_phi_99_pred_5;
                    uint _2705 = _2704 + 1u;
                    if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2698 = _2509;
                        _2699 = _2511;
                        _2700 = _2513;
                        _2701 = _2515;
                        _2702 = _2517;
                        _2703 = _2519;
                        _2704 = _2705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2519;
                frontier_phi_81_82_ladder_1 = _2515;
                frontier_phi_81_82_ladder_2 = _2513;
                frontier_phi_81_82_ladder_3 = _2511;
                frontier_phi_81_82_ladder_4 = _2509;
                frontier_phi_81_82_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_81_82_ladder = _2374;
                frontier_phi_81_82_ladder_1 = _2370;
                frontier_phi_81_82_ladder_2 = _2368;
                frontier_phi_81_82_ladder_3 = _2366;
                frontier_phi_81_82_ladder_4 = _2364;
                frontier_phi_81_82_ladder_5 = _2372;
            }
            _2508 = frontier_phi_81_82_ladder_4;
            _2510 = frontier_phi_81_82_ladder_3;
            _2512 = frontier_phi_81_82_ladder_2;
            _2514 = frontier_phi_81_82_ladder_1;
            _2516 = frontier_phi_81_82_ladder_5;
            _2518 = frontier_phi_81_82_ladder;
        }
        float _2523 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2286 = (_2523 * _2514) + _2013;
        _2288 = (_2523 * _2516) + _2014;
        _2290 = (_2523 * _2518) + _2015;
        _2292 = ((_2508 * 0.039999999105930328369140625) * _2523) + _2169;
        _2294 = ((_2510 * 0.039999999105930328369140625) * _2523) + _2170;
        _2296 = ((_2512 * 0.039999999105930328369140625) * _2523) + _2171;
    }
    else
    {
        _2286 = _2013;
        _2288 = _2014;
        _2290 = _2015;
        _2292 = _2169;
        _2294 = _2170;
        _2296 = _2171;
    }
    float _4182 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4193 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4204 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2313 = ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2286 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _899))) + ((_2292 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2314 = ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2288 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _899))) + ((_2294 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2290 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _899))) + ((_2296 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    uint _2319 = _873 + 6u;
    float _2327 = _834 / cbSceneParam._m0[86u].x;
    float _2328 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2390 = _2389 / _821;
        float _2401 = _2390 * _269;
        float _2402 = _270 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _271;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2634;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2634 = ((((_2407 > 0.0) ? exp2(_2423 * _2407) : (2.0 - exp2(_2425 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2569 = 1.0 / cbSceneParam._m0[80u].x;
            float _2570 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2571 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            _2634 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2580 - _2581) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))))) * _2569)) - ((exp2(_2425 * _2580) - exp2(_2425 * _2581)) * _2569))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2636 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2645 = exp2((_2634 * (-1.44269502162933349609375)) * (1.0 - _2636.w));
        float _2646 = log2(_2645);
        float _2662 = log2(_2347);
        _2427 = (exp2(_2662 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].x)) * _2636.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2429 = (exp2(_2662 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].y)) * _2636.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2431 = (exp2(_2662 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].z)) * _2636.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2433 = _2645 * _2347;
    }
    else
    {
        _2427 = _2344;
        _2429 = _2345;
        _2431 = _2346;
        _2433 = _2347;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2433);
    float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)));
    float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = cbInstanceData._m0[_2319].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
}


