#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _929;
uint _2395;
uint _2396;
uint _2397;
uint _2619;
uint _2620;
uint _2621;
float _2901;
float _2902;
float _2903;
float _2904;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _293 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _328 = cbMtdParam._m0[21u].w + _269;
    float _329 = cbMtdParam._m0[22u].x + _270;
    float _330 = cbMtdParam._m0[22u].y + _271;
    float _344 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_197 * _190, _197 * _191, _197 * _192));
    float _345 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_211 * TANGENT.x, _211 * TANGENT.y, _211 * TANGENT.z));
    float _346 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (_204 * NORMAL.x), (-0.0) - (_204 * NORMAL.y), (-0.0) - (_204 * NORMAL.z)));
    float _350 = inversesqrt(dot(vec3(_344, _345, _346), vec3(_344, _345, _346)));
    float _353 = _350 * _346;
    float _354 = (_350 * _344) + (((_293.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _355 = (_350 * _345) + (((_293.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _356 = _354 * cbMtdParam._m0[18u].z;
    float _357 = _355 * cbMtdParam._m0[18u].y;
    float _358 = fract(TEXCOORD.x);
    float _359 = fract(TEXCOORD.y);
    float _365;
    if (_356 > 0.0)
    {
        _365 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _365 = frontier_phi_3_2_ladder;
    }
    float _373;
    if (_357 > 0.0)
    {
        _373 = (1.0 - _359) / _357;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_357 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _359) / _357;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _373 = frontier_phi_7_6_ladder;
    }
    bool _375 = _353 > 0.0;
    float _377 = _375 ? (cbMtdParam._m0[15u].x / _353) : 5000.0;
    float _378 = isnan(_373) ? _365 : (isnan(_365) ? _373 : min(_365, _373));
    float _379 = isnan(_377) ? _378 : (isnan(_378) ? _377 : min(_378, _377));
    float _383 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _384 = _358 + (-0.5);
    float _387 = _359 + (-0.5);
    float _390 = ((_379 * _353) + _383) / _383;
    vec4 _414 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_384 + (_379 * _356)) / _390) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_387 + (_379 * _357)) / _390) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _424 = cbMtdParam._m0[9u].x * _414.x;
    float _425 = cbMtdParam._m0[9u].y * _414.y;
    float _426 = cbMtdParam._m0[9u].z * _414.z;
    float _444 = _354 * cbMtdParam._m0[20u].z;
    float _445 = _355 * cbMtdParam._m0[20u].y;
    bool _446 = _444 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _358) / _444;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _358) / _444;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _451 = frontier_phi_11_10_ladder;
    }
    bool _453 = _445 > 0.0;
    float _458;
    if (_453)
    {
        _458 = (1.0 - _359) / _445;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _359) / _445;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _458 = frontier_phi_15_14_ladder;
    }
    float _461 = _375 ? (cbMtdParam._m0[16u].x / _353) : 5000.0;
    float _462 = isnan(_458) ? _451 : (isnan(_451) ? _458 : min(_451, _458));
    float _463 = isnan(_461) ? _462 : (isnan(_462) ? _461 : min(_462, _461));
    float _467 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _471 = ((_463 * _353) + _467) / _467;
    float _476 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _478 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _494 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_384 + (_463 * _444)) / _471) + 0.5) + _476) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_387 + (_463 * _445)) / _471) + 0.5) + _478) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _506;
    if (_446)
    {
        _506 = (1.0 - _358) / _444;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _358) / _444;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _506 = frontier_phi_19_18_ladder;
    }
    float _512;
    if (_453)
    {
        _512 = (1.0 - _359) / _445;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _359) / _445;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _512 = frontier_phi_23_22_ladder;
    }
    float _514 = isnan(_512) ? _506 : (isnan(_506) ? _512 : min(_506, _512));
    float _515 = isnan(_461) ? _514 : (isnan(_514) ? _461 : min(_514, _461));
    float _522 = ((_515 * _353) + _467) / _467;
    vec4 _543 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_384 + (_515 * _444)) / _522) + 0.5) + _476) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_387 + (_515 * _445)) / _522) + 0.5) + _478) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _552 = (_545 * ((_494.x * cbMtdParam._m0[10u].x) - _424)) + _424;
    float _553 = (_545 * ((_494.y * cbMtdParam._m0[10u].y) - _425)) + _425;
    float _554 = (_545 * ((_494.z * cbMtdParam._m0[10u].z) - _426)) + _426;
    float _568 = _354 * cbMtdParam._m0[21u].x;
    float _569 = _355 * cbMtdParam._m0[20u].w;
    bool _570 = _568 > 0.0;
    float _575;
    if (_570)
    {
        _575 = (1.0 - _358) / _568;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _358) / _568;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _575 = frontier_phi_27_26_ladder;
    }
    bool _577 = _569 > 0.0;
    float _582;
    if (_577)
    {
        _582 = (1.0 - _359) / _569;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _359) / _569;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _582 = frontier_phi_31_30_ladder;
    }
    float _585 = _375 ? (cbMtdParam._m0[17u].z / _353) : 5000.0;
    float _586 = isnan(_582) ? _575 : (isnan(_575) ? _582 : min(_575, _582));
    float _587 = isnan(_585) ? _586 : (isnan(_586) ? _585 : min(_586, _585));
    float _591 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _595 = ((_587 * _353) + _591) / _591;
    float _600 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _602 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _619 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_384 + (_587 * _568)) / _595) + 0.5) + _600) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_387 + (_587 * _569)) / _595) + 0.5) + _602) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _631;
    if (_570)
    {
        _631 = (1.0 - _358) / _568;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _358) / _568;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _631 = frontier_phi_35_34_ladder;
    }
    float _637;
    if (_577)
    {
        _637 = (1.0 - _359) / _569;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _359) / _569;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _637 = frontier_phi_39_38_ladder;
    }
    float _639 = isnan(_637) ? _631 : (isnan(_631) ? _637 : min(_631, _637));
    float _640 = isnan(_585) ? _639 : (isnan(_639) ? _585 : min(_639, _585));
    float _647 = ((_640 * _353) + _591) / _591;
    vec4 _667 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_384 + (_640 * _568)) / _647) + 0.5) + _600) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_387 + (_640 * _569)) / _647) + 0.5) + _602) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _669 = _667.x;
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _699 = _269 * _698;
    float _700 = _270 * _698;
    float _701 = _271 * _698;
    vec4 _706 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _708 = _706.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _784 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _2963 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0));
        float _789 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _2974 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0))) - _785)) + _785) < ((_708 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _730 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_720 * cbSceneParam._m0[86u].x, _721 * cbSceneParam._m0[86u].y));
    float _733 = _730.x * TEXCOORD.z;
    float _734 = (-0.0) - _699;
    float _735 = (-0.0) - _700;
    float _736 = (-0.0) - _701;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _928;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = (cbModelParam._m0[37u].x * ((((fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _853 = (cbModelParam._m0[37u].y * ((((fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _854 = (((((fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        _928 = _891 * (_857.z + (-0.5));
        _930 = _891 * (_857.y + (-0.5));
        _931 = _891 * (_857.x + (-0.5));
        _932 = _901 * (_864.z + (-0.5));
        _933 = _901 * (_864.y + (-0.5));
        _934 = _901 * (_864.x + (-0.5));
        _935 = _911 * (_871.z + (-0.5));
        _936 = _911 * (_871.y + (-0.5));
        _937 = _911 * (_871.x + (-0.5));
        _938 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        _939 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        _940 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    }
    else
    {
        _928 = _929;
        _930 = _929;
        _931 = _929;
        _932 = _929;
        _933 = _929;
        _934 = _929;
        _935 = _929;
        _936 = _929;
        _937 = _929;
        _938 = _929;
        _939 = _929;
        _940 = _929;
    }
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = (cbModelParam._m0[38u].x * ((((fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _998 = (cbModelParam._m0[38u].y * ((((fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _999 = (((((fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1034 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1022.x + (-0.5));
        float _1066 = _1064 * (_1022.y + (-0.5));
        float _1067 = _1064 * (_1022.z + (-0.5));
        _1071 = _1034 * (_1001.z + (-0.5));
        _1072 = _1034 * (_1001.y + (-0.5));
        _1073 = _1034 * (_1001.x + (-0.5));
        _1074 = _1044 * (_1008.z + (-0.5));
        _1075 = _1044 * (_1008.y + (-0.5));
        _1076 = _1044 * (_1008.x + (-0.5));
        _1077 = _1054 * (_1015.z + (-0.5));
        _1078 = _1054 * (_1015.y + (-0.5));
        _1079 = _1054 * (_1015.x + (-0.5));
        _1080 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        _1081 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        _1082 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    }
    else
    {
        _1071 = _929;
        _1072 = _929;
        _1073 = _929;
        _1074 = _929;
        _1075 = _929;
        _1076 = _929;
        _1077 = _929;
        _1078 = _929;
        _1079 = _929;
        _1080 = _929;
        _1081 = _929;
        _1082 = _929;
    }
    float _1097 = _699 * (-0.5);
    float _1098 = _700 * (-0.5);
    float _1099 = _701 * (-0.5);
    float _1100 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1073, _1076, _1079, _1082));
    float _1103 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1072, _1075, _1078, _1081));
    float _1106 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_1071, _1074, _1077, _1080));
    float _1141;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1113 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_928, _932, _935, _938));
        float _1117 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_930, _933, _936, _939));
        float _1121 = dot(vec4(_1097, _1098, _1099, 1.0), vec4(_931, _934, _937, _940));
        float _1128 = dot(vec4(cbModelParam._m0[39u]), vec4(_1097, _1098, _1099, 1.0));
        _1141 = dot(vec3(isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1141 = 1.0;
    }
    float _1152;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1143 = dot(vec4(cbModelParam._m0[40u]), vec4(_1097, _1098, _1099, 1.0));
        _1152 = dot(vec3(isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1143) ? 0.0 : (isnan(0.0) ? _1143 : max(0.0, _1143))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1152 = 1.0;
    }
    float _1156 = (_1152 * cbModelParam._m0[1u].x) + (_1141 * (1.0 - cbModelParam._m0[1u].x));
    float _1162 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1243;
    float _1245;
    float _1247;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1210 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1214 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1218 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1221 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1224 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1227 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1253;
        if (_1221 > 0.0)
        {
            _1253 = abs((1.0 - _1210) / _1221);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1221 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1210 + 1.0) / _1221);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1253 = frontier_phi_57_55_ladder;
        }
        float _1441;
        if (_1224 > 0.0)
        {
            _1441 = abs((1.0 - _1214) / _1224);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1214 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1441 = frontier_phi_66_62_ladder;
        }
        float _1795;
        if (_1227 > 0.0)
        {
            _1795 = abs((1.0 - _1218) / _1227);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1218 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _1795 = frontier_phi_78_73_ladder;
        }
        float _1797 = isnan(_1441) ? _1253 : (isnan(_1253) ? _1441 : min(_1253, _1441));
        float _1798 = isnan(_1795) ? _1797 : (isnan(_1797) ? _1795 : min(_1797, _1795));
        float _1802 = (_1798 * _1221) + _1210;
        float _1803 = (_1798 * _1224) + _1214;
        float _1804 = (_1798 * _1227) + _1218;
        float _1805 = _1798 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1805;
        float _1809 = _1805 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 > _1809) || ((_1803 < _1807) || ((_1802 < _1807) || (_1802 > _1809))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2037 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1804, cbModelParam._m0[9u].z, fma(_1803, cbModelParam._m0[9u].y, _1802 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1804, cbModelParam._m0[10u].z, fma(_1803, cbModelParam._m0[10u].y, _1802 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1804, cbModelParam._m0[11u].z, fma(_1803, cbModelParam._m0[11u].y, _1802 * cbModelParam._m0[11u].x))), _1162);
            frontier_phi_56_78_ladder = _2037.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2037.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2037.x * cbModelParam._m0[1u].y;
        }
        _1243 = frontier_phi_56_78_ladder_2;
        _1245 = frontier_phi_56_78_ladder_1;
        _1247 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1162);
        _1243 = _1231.x * cbModelParam._m0[1u].y;
        _1245 = _1231.y * cbModelParam._m0[1u].y;
        _1247 = _1231.z * cbModelParam._m0[1u].y;
    }
    float _1250 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1338;
    float _1340;
    float _1342;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1302 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1306 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1310 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1313 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1316 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1319 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1446;
        if (_1313 > 0.0)
        {
            _1446 = abs((1.0 - _1302) / _1313);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1302 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1446 = frontier_phi_68_64_ladder;
        }
        float _1822;
        if (_1316 > 0.0)
        {
            _1822 = abs((1.0 - _1306) / _1316);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1306 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _1822 = frontier_phi_80_75_ladder;
        }
        float _2162;
        if (_1319 > 0.0)
        {
            _2162 = abs((1.0 - _1310) / _1319);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1310 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2162 = frontier_phi_92_87_ladder;
        }
        float _2164 = isnan(_1822) ? _1446 : (isnan(_1446) ? _1822 : min(_1446, _1822));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1313) + _1302;
        float _2170 = (_2165 * _1316) + _1306;
        float _2171 = (_2165 * _1319) + _1310;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2172;
        float _2175 = _2172 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2171 > _2175) || ((_2171 < _2173) || ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 < _2173) || (_2169 > _2175))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2171, cbModelParam._m0[17u].z, fma(_2170, cbModelParam._m0[17u].y, _2169 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2171, cbModelParam._m0[18u].z, fma(_2170, cbModelParam._m0[18u].y, _2169 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2171, cbModelParam._m0[19u].z, fma(_2170, cbModelParam._m0[19u].y, _2169 * cbModelParam._m0[19u].x))), _1250);
            frontier_phi_65_92_ladder = _2293.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2293.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2293.x * cbModelParam._m0[1u].z;
        }
        _1338 = frontier_phi_65_92_ladder_2;
        _1340 = frontier_phi_65_92_ladder;
        _1342 = frontier_phi_65_92_ladder_1;
    }
    else
    {
        vec4 _1322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1250);
        _1338 = _1322.x * cbModelParam._m0[1u].z;
        _1340 = _1322.y * cbModelParam._m0[1u].z;
        _1342 = _1322.z * cbModelParam._m0[1u].z;
    }
    float _1354 = _733 * 0.01200000010430812835693359375;
    float _1356 = _1354 * ((cbModelParam._m0[1u].w * (_1338 - _1243)) + _1243);
    float _1357 = _1354 * ((cbModelParam._m0[1u].w * (_1340 - _1245)) + _1245);
    float _1358 = _1354 * ((cbModelParam._m0[1u].w * (_1342 - _1247)) + _1247);
    float _1379 = fma(_1358, cbSceneParam._m0[89u].z, fma(_1357, cbSceneParam._m0[89u].y, _1356 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1358, cbSceneParam._m0[90u].z, fma(_1357, cbSceneParam._m0[90u].y, _1356 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1358, cbSceneParam._m0[91u].z, fma(_1357, cbSceneParam._m0[91u].y, _1356 * cbSceneParam._m0[91u].x));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1433 = _1420 / _1432;
    float _1434 = _1424 / _1432;
    float _1435 = _1428 / _1432;
    float _1583;
    float _1584;
    float _1585;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1462 = ((uint(_1435 > cbSceneParam._m0[59u].y) + uint(_1435 > cbSceneParam._m0[59u].x)) + uint(_1435 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1463 = _1462 + 43u;
        uint _1471 = _1462 + 44u;
        uint _1479 = _1462 + 45u;
        uint _1487 = _1462 + 46u;
        float _1498 = fma(_1432, cbSceneParam._m0[_1463].w, fma(_1428, cbSceneParam._m0[_1463].z, fma(_1424, cbSceneParam._m0[_1463].y, _1420 * cbSceneParam._m0[_1463].x)));
        float _1502 = fma(_1432, cbSceneParam._m0[_1471].w, fma(_1428, cbSceneParam._m0[_1471].z, fma(_1424, cbSceneParam._m0[_1471].y, _1420 * cbSceneParam._m0[_1471].x)));
        float _1510 = fma(_1432, cbSceneParam._m0[_1487].w, fma(_1428, cbSceneParam._m0[_1487].z, fma(_1424, cbSceneParam._m0[_1487].y, _1420 * cbSceneParam._m0[_1487].x)));
        float _1515 = cbSceneParam._m0[33u].z * _1510;
        float _1517 = cbSceneParam._m0[33u].w * _1510;
        float _1520 = fma(_1432, cbSceneParam._m0[_1479].w, fma(_1428, cbSceneParam._m0[_1479].z, fma(_1424, cbSceneParam._m0[_1479].y, _1420 * cbSceneParam._m0[_1479].x))) / _1510;
        float _1568 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
        float _3100 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1576 = (isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1515 + _1498) / _1510, (_1517 + _1502) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 + _1498) / _1510, (_1502 - _1515) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1515) / _1510, (_1502 - _1517) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1517) / _1510, (_1515 + _1502) / _1510), _1520), 0.0)).x), vec4(0.25)));
        _1583 = 1.0 - (_1576 * cbSceneParam._m0[34u].x);
        _1584 = 1.0 - (_1576 * cbSceneParam._m0[34u].y);
        _1585 = 1.0 - (_1576 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1583 = 1.0;
        _1584 = 1.0;
        _1585 = 1.0;
    }
    float _1649;
    float _1651;
    float _1653;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1637 = fma(_1432, cbSceneParam._m0[63u].w, fma(_1428, cbSceneParam._m0[63u].z, fma(_1424, cbSceneParam._m0[63u].y, _1420 * cbSceneParam._m0[63u].x)));
        float _1638 = fma(_1432, cbSceneParam._m0[60u].w, fma(_1428, cbSceneParam._m0[60u].z, fma(_1424, cbSceneParam._m0[60u].y, _1420 * cbSceneParam._m0[60u].x))) / _1637;
        float _1639 = fma(_1432, cbSceneParam._m0[61u].w, fma(_1428, cbSceneParam._m0[61u].z, fma(_1424, cbSceneParam._m0[61u].y, _1420 * cbSceneParam._m0[61u].x))) / _1637;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_1638 >= cbSceneParam._m0[64u].x) && (_1639 >= cbSceneParam._m0[64u].y)) && (_1638 <= cbSceneParam._m0[64u].z)) && (_1639 <= cbSceneParam._m0[64u].w))
        {
            float _1835 = fma(_1432, cbSceneParam._m0[62u].w, fma(_1428, cbSceneParam._m0[62u].z, fma(_1424, cbSceneParam._m0[62u].y, _1420 * cbSceneParam._m0[62u].x))) / _1637;
            float _1839 = isnan(cbSceneParam._m0[41u].w) ? _1835 : (isnan(_1835) ? cbSceneParam._m0[41u].w : max(_1835, cbSceneParam._m0[41u].w));
            float _1882 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
            float _3116 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
            float _1889 = (isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1638, cbSceneParam._m0[33u].w + _1639), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1638, _1639 - cbSceneParam._m0[33u].z), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1638 - cbSceneParam._m0[33u].z, _1639 - cbSceneParam._m0[33u].w), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1638 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1639), _1839), 0.0)).x), vec4(0.25)));
            float _1893 = 1.0 - (_1889 * cbSceneParam._m0[34u].x);
            float _1894 = 1.0 - (_1889 * cbSceneParam._m0[34u].y);
            float _1895 = 1.0 - (_1889 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_1895) ? _1585 : (isnan(_1585) ? _1895 : min(_1585, _1895));
            frontier_phi_77_76_ladder_1 = isnan(_1894) ? _1584 : (isnan(_1584) ? _1894 : min(_1584, _1894));
            frontier_phi_77_76_ladder_2 = isnan(_1893) ? _1583 : (isnan(_1583) ? _1893 : min(_1583, _1893));
        }
        else
        {
            frontier_phi_77_76_ladder = _1585;
            frontier_phi_77_76_ladder_1 = _1584;
            frontier_phi_77_76_ladder_2 = _1583;
        }
        _1649 = frontier_phi_77_76_ladder_2;
        _1651 = frontier_phi_77_76_ladder_1;
        _1653 = frontier_phi_77_76_ladder;
    }
    else
    {
        _1649 = _1583;
        _1651 = _1584;
        _1653 = _1585;
    }
    uint _1655 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1659 = floatBitsToUint(cbInstanceData._m0[_1655 + 5u]);
    uint _1661 = _1659.x * 14u;
    uint _1662 = _1661 + 13u;
    float _1667 = _733 + (-1.0);
    float _1670 = (cbLight._m0[_1662].x * _1667) + 1.0;
    float _1671 = (cbLight._m0[_1662].y * _1667) + 1.0;
    uint _1672 = _1661 + 8u;
    float _1683 = cbLight._m0[_1661].x + _699;
    float _1684 = cbLight._m0[_1661].y + _700;
    float _1685 = cbLight._m0[_1661].z + _701;
    float _1689 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
    float _1693 = dot(vec3(0.0), vec3(cbLight._m0[_1661].xyz));
    float _3142 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1696 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _1697 = dot(vec3(0.0), vec3(_699, _700, _701));
    float _3153 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1661].xyz), vec3(_1683 * _1689, _1684 * _1689, _1685 * _1689));
    float _3164 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1712 = (exp2(log2(1.0 - (isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1718 = (0.5 / ((_1696 + 9.9999999392252902907785028219223e-09) + _1700)) * _1696;
    float _3175 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1720 = (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * 0.31831014156341552734375;
    float _1722 = isnan(1.0) ? _1670 : (isnan(_1670) ? 1.0 : min(_1670, 1.0));
    uint _1735 = _1661 + 9u;
    uint _1741 = _1661 | 1u;
    float _1747 = cbLight._m0[_1741].x + _699;
    float _1748 = cbLight._m0[_1741].y + _700;
    float _1749 = cbLight._m0[_1741].z + _701;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1757 = dot(vec3(0.0), vec3(cbLight._m0[_1741].xyz));
    float _3191 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1747 * _1753, _1748 * _1753, _1749 * _1753));
    float _3202 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1770 = (exp2(log2(1.0 - (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = (0.5 / ((_1760 + 9.9999999392252902907785028219223e-09) + _1700)) * _1760;
    float _3213 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1776 = (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * 0.31831014156341552734375;
    float _1777 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    float _1787 = (((_1770 * cbLight._m0[_1735].x) * _1776) * _1777) + ((((cbLight._m0[_1672].x * _1649) * _1712) * _1720) * _1722);
    float _1788 = (((_1770 * cbLight._m0[_1735].y) * _1776) * _1777) + ((((cbLight._m0[_1672].y * _1651) * _1712) * _1720) * _1722);
    float _1789 = (((_1770 * cbLight._m0[_1735].z) * _1776) * _1777) + ((((cbLight._m0[_1672].z * _1653) * _1712) * _1720) * _1722);
    float _1952;
    float _1954;
    float _1956;
    if (_1659.y == 0u)
    {
        uvec4 _1907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1908 = _1907.x;
        uint _1919 = uint((float(_1907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _1908))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _1908)));
        float _1929 = (log2(_1435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1930 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        uint _1933 = uint(isnan(14.0) ? _1930 : (isnan(_1930) ? 14.0 : min(_1930, 14.0)));
        uvec4 _1938 = texelFetch(g_lightClusterGridBuffer, int(((_1933 << 2u) + (_1919 << 6u)) >> 2u));
        uint _1939 = _1938.x;
        uint _1940 = _1907.z;
        float _2046;
        float _2048;
        float _2050;
        if (((((1u << ((_1940 >> 4u) & 15u)) + 4294967295u) & _1939) == 0u) || ((_1940 & 240u) == 0u))
        {
            _2046 = 0.0;
            _2048 = 0.0;
            _2050 = 0.0;
        }
        else
        {
            float _2047;
            float _2049;
            float _2051;
            float _2208 = 0.0;
            float _2209 = 0.0;
            float _2210 = 0.0;
            uint _2211 = 0u;
            uint _2220;
            bool _2221;
            for (;;)
            {
                _2220 = texelFetch(g_lightClassification, int((((_1933 << 5u) + (_1919 << 9u)) + (_2211 << 2u)) >> 2u)).x;
                _2221 = _2220 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                if (_2221)
                {
                    frontier_phi_103_pred = _2210;
                    frontier_phi_103_pred_1 = _2209;
                    frontier_phi_103_pred_2 = _2208;
                }
                else
                {
                    float _2365;
                    float _2366;
                    float _2367;
                    uint _2368;
                    _2365 = _2208;
                    _2366 = _2209;
                    _2367 = _2210;
                    _2368 = _2220;
                    float _2298;
                    float _2299;
                    float _2300;
                    for (;;)
                    {
                        uint _2372 = uint(findLSB(_2368)) + (_2211 << 5u);
                        uint _2369 = (_2368 + 4294967295u) & _2368;
                        uint _2374 = _2372 * 48u;
                        vec4 _2388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2374)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2374 + 3u)).x));
                        uint _2405 = (_2372 * 48u) + 8u;
                        vec3 _2416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2405)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2405 + 2u)).x));
                        float _2420 = _2388.x - _1433;
                        float _2421 = _2388.y - _1434;
                        float _2422 = _2388.z - _1435;
                        float _2423 = dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422));
                        float _2426 = inversesqrt(_2423);
                        float _2435 = 1.0 - (_2423 * _2388.w);
                        float _3239 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
                        float _2437 = sqrt(_2423) * uintBitsToFloat(uvec4(_2395, _2396, _2397, texelFetch(g_PointLightRenderingBuffer, int(((_2372 * 48u) + 4u) + 3u)).x)).w;
                        float _2440 = 1.39999997615814208984375 / (_2437 + 1.39999997615814208984375);
                        float _2441 = _2440 * _2440;
                        float _2444 = ((1.0 - _2441) * dot(vec3(0.0), vec3(_2426 * _2420, _2426 * _2421, _2426 * _2422))) + _2441;
                        float _2446 = (-0.0) - _1433;
                        float _2447 = (-0.0) - _1434;
                        float _2448 = (-0.0) - _1435;
                        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
                        float _2456 = dot(vec3(0.0), vec3(_2452 * _2446, _2452 * _2447, _2452 * _2448));
                        float _3250 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
                        float _3261 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2460 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
                        float _2464 = (0.5 / (((isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) + 9.9999999392252902907785028219223e-09) + _2460)) * _2460;
                        float _3272 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
                        float _2473 = (((isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * 3.1415927410125732421875) / (((_2437 * _2437) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)));
                        _2298 = (_2473 * _2416.x) + _2365;
                        _2299 = (_2473 * _2416.y) + _2366;
                        _2300 = (_2473 * _2416.z) + _2367;
                        if (_2369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2365 = _2298;
                            _2366 = _2299;
                            _2367 = _2300;
                            _2368 = _2369;
                        }
                    }
                    frontier_phi_103_pred = _2300;
                    frontier_phi_103_pred_1 = _2299;
                    frontier_phi_103_pred_2 = _2298;
                }
                _2051 = frontier_phi_103_pred;
                _2049 = frontier_phi_103_pred_1;
                _2047 = frontier_phi_103_pred_2;
                uint _2212 = _2211 + 1u;
                if (_2212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2208 = _2047;
                    _2209 = _2049;
                    _2210 = _2051;
                    _2211 = _2212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2046 = _2047;
            _2048 = _2049;
            _2050 = _2051;
        }
        uvec4 _2054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2055 = _2054.z;
        uint _2057 = (_2055 >> 8u) & 15u;
        float _2188;
        float _2190;
        float _2192;
        if (((4294967295u << _2057) & _1939) == 0u)
        {
            _2188 = _2046;
            _2190 = _2048;
            _2192 = _2050;
        }
        else
        {
            float _2204 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            if (_2057 < ((_2055 >> 12u) & 15u))
            {
                float _2189;
                float _2191;
                float _2193;
                float _2351 = _2046;
                float _2352 = _2048;
                float _2353 = _2050;
                uint _2354 = _2057;
                uint _2363;
                bool _2364;
                for (;;)
                {
                    _2363 = texelFetch(g_lightClassification, int((((_1933 << 5u) + (_1919 << 9u)) + (_2354 << 2u)) >> 2u)).x;
                    _2364 = _2363 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    if (_2364)
                    {
                        frontier_phi_114_pred = _2353;
                        frontier_phi_114_pred_1 = _2352;
                        frontier_phi_114_pred_2 = _2351;
                    }
                    else
                    {
                        float _2487;
                        float _2488;
                        float _2489;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2497 = _2351;
                        float _2498 = _2352;
                        float _2499 = _2353;
                        uint _2500 = _2363;
                        uint _2501;
                        uint _2511;
                        vec4 _2526;
                        float _2527;
                        vec3 _2539;
                        vec4 _2554;
                        vec4 _2569;
                        float _2615;
                        bool _2616;
                        for (;;)
                        {
                            _2511 = ((_2354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2500));
                            _2501 = (_2500 + 4294967295u) & _2500;
                            uint _2513 = _2511 * 40u;
                            _2526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 3u)).x));
                            _2527 = _2526.w;
                            uint _2529 = (_2511 * 40u) + 8u;
                            _2539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 2u)).x));
                            uint _2541 = (_2511 * 40u) + 16u;
                            _2554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 3u)).x));
                            uint _2556 = (_2511 * 40u) + 20u;
                            _2569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 3u)).x));
                            uint _2571 = (_2511 * 40u) + 24u;
                            vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2571 + 3u)).x));
                            uint _2590 = (_2511 * 40u) + 28u;
                            vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2590 + 3u)).x));
                            _2615 = fma(_1435, _2603.z, fma(_1434, _2603.y, _2603.x * _1433)) + _2603.w;
                            _2616 = !((fma(_1435, _2584.z, fma(_1434, _2584.y, _2584.x * _1433)) + _2584.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            if (_2616)
                            {
                                float _2650 = _2526.x - _1433;
                                float _2651 = _2526.y - _1434;
                                float _2652 = _2526.z - _1435;
                                float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                                float _2656 = inversesqrt(_2653);
                                float _2663 = 1.0 - (_2653 / (_2527 * _2527));
                                float _3283 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
                                float _2665 = sqrt(_2653) * uintBitsToFloat(uvec4(_2619, _2620, _2621, texelFetch(g_SpotLightRenderingBuffer, int(((_2511 * 40u) + 4u) + 3u)).x)).w;
                                float _2667 = 1.39999997615814208984375 / (_2665 + 1.39999997615814208984375);
                                float _2668 = _2667 * _2667;
                                float _2671 = (fma(_1435, _2554.z, fma(_1434, _2554.y, _2554.x * _1433)) + _2554.w) / _2615;
                                float _2672 = (fma(_1435, _2569.z, fma(_1434, _2569.y, _2569.x * _1433)) + _2569.w) / _2615;
                                float _2676 = 1.0 - dot(vec2(_2671, _2672), vec2(_2671, _2672));
                                float _3294 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                                float _2684 = dot(vec3(0.0), vec3((-0.0) - (_1433 * _2204), (-0.0) - (_1434 * _2204), (-0.0) - (_1435 * _2204)));
                                float _3305 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                                float _2692 = ((1.0 - _2668) * dot(vec3(0.0), vec3(_2656 * _2650, _2656 * _2651, _2656 * _2652))) + _2668;
                                float _3316 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                                float _2693 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
                                float _2697 = (0.5 / (((isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) + 9.9999999392252902907785028219223e-09) + _2693)) * _2693;
                                float _3327 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                                float _2704 = ((isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * (((isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * 3.1415927410125732421875) / (((_2665 * _2665) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_120_pred = _2704 * _2539.z;
                                frontier_phi_120_pred_1 = _2704 * _2539.y;
                                frontier_phi_120_pred_2 = _2704 * _2539.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                            }
                            _2710 = frontier_phi_120_pred;
                            _2709 = frontier_phi_120_pred_1;
                            _2708 = frontier_phi_120_pred_2;
                            _2487 = _2708 + _2497;
                            _2488 = _2709 + _2498;
                            _2489 = _2710 + _2499;
                            if (_2501 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2497 = _2487;
                                _2498 = _2488;
                                _2499 = _2489;
                                _2500 = _2501;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _2489;
                        frontier_phi_114_pred_1 = _2488;
                        frontier_phi_114_pred_2 = _2487;
                    }
                    _2193 = frontier_phi_114_pred;
                    _2191 = frontier_phi_114_pred_1;
                    _2189 = frontier_phi_114_pred_2;
                    uint _2355 = _2354 + 1u;
                    if (_2355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2351 = _2189;
                        _2352 = _2191;
                        _2353 = _2193;
                        _2354 = _2355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2191;
                frontier_phi_94_95_ladder_1 = _2193;
                frontier_phi_94_95_ladder_2 = _2189;
            }
            else
            {
                frontier_phi_94_95_ladder = _2048;
                frontier_phi_94_95_ladder_1 = _2050;
                frontier_phi_94_95_ladder_2 = _2046;
            }
            _2188 = frontier_phi_94_95_ladder_2;
            _2190 = frontier_phi_94_95_ladder;
            _2192 = frontier_phi_94_95_ladder_1;
        }
        float _2197 = isnan(1.0) ? _733 : (isnan(_733) ? 1.0 : min(_733, 1.0));
        _1952 = ((_2188 * 0.039999999105930328369140625) * _2197) + _1787;
        _1954 = ((_2190 * 0.039999999105930328369140625) * _2197) + _1788;
        _1956 = ((_2192 * 0.039999999105930328369140625) * _2197) + _1789;
    }
    else
    {
        _1952 = _1787;
        _1954 = _1788;
        _1956 = _1789;
    }
    uint _1962 = _1655 + 9u;
    uint _1963 = _1962 + uint(cbMatDynParam._m0[0u].w);
    float _1978 = (cbInstanceData._m0[_1963].x * ((_669 * ((_619.x * cbMtdParam._m0[14u].x) - _552)) + _552)) + ((_1952 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    float _1979 = (cbInstanceData._m0[_1963].y * ((_669 * ((_619.y * cbMtdParam._m0[14u].y) - _553)) + _553)) + ((_1954 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    float _1980 = (cbInstanceData._m0[_1963].z * ((_669 * ((_619.z * cbMtdParam._m0[14u].z) - _554)) + _554)) + ((_1956 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1156)) * cbPerFrame._m0[3u].x);
    float _1981 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    uint _1984 = _1655 + 6u;
    float _1992 = _720 / cbSceneParam._m0[86u].x;
    float _1993 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2007 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1992, _1993, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2009 = _2007.x;
    float _2010 = _2007.y;
    float _2011 = _2007.z;
    float _2012 = _2007.w;
    float _2102;
    float _2104;
    float _2106;
    float _2108;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2065 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2066 = _2065 / _694;
        float _2077 = _2066 * _269;
        float _2078 = _270 * _2066;
        float _2079 = (-0.0) - _2078;
        float _2080 = _2066 * _271;
        float _2082 = (cbSceneParam._m0[77u].w * _2079) / _2065;
        float _2083 = _2082 + cbSceneParam._m0[79u].w;
        float _2084 = cbSceneParam._m0[79u].w - _2078;
        float _2090 = sqrt(((_2077 * _2077) + (_2078 * _2078)) + (_2080 * _2080));
        float _2093 = (1.0 - (cbSceneParam._m0[77u].w / _2065)) * _2090;
        float _2098 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2100 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2308;
        if (abs((_2079 - _2082) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2308 = ((((_2083 > 0.0) ? exp2(_2098 * _2083) : (2.0 - exp2(_2100 * _2083))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2093;
        }
        else
        {
            float _2234 = 1.0 / cbSceneParam._m0[80u].x;
            float _2235 = isnan(_2084) ? _2083 : (isnan(_2083) ? _2084 : max(_2083, _2084));
            float _2236 = isnan(_2084) ? _2083 : (isnan(_2083) ? _2084 : min(_2083, _2084));
            float _2245 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : min(_2235, 0.0));
            float _2246 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : min(_2236, 0.0));
            _2308 = ((abs(_2090 / _2079) * cbSceneParam._m0[80u].y) * ((((_2245 - _2246) * 2.0) - ((exp2(_2098 * (isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0)))) - exp2(_2098 * (isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))))) * _2234)) - ((exp2(_2100 * _2245) - exp2(_2100 * _2246)) * _2234))) + (_2093 * cbSceneParam._m0[80u].z);
        }
        vec4 _2310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1992, _1993, 1.0), 0.0);
        float _2319 = exp2((_2308 * (-1.44269502162933349609375)) * (1.0 - _2310.w));
        float _2320 = log2(_2319);
        float _2336 = log2(_2012);
        _2102 = (exp2(_2336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].x)) * _2310.x) / cbSceneParam._m0[78u].x)) + _2009;
        _2104 = (exp2(_2336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].y)) * _2310.y) / cbSceneParam._m0[78u].y)) + _2010;
        _2106 = (exp2(_2336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2320 * cbSceneParam._m0[78u].z)) * _2310.z) / cbSceneParam._m0[78u].z)) + _2011;
        _2108 = _2319 * _2012;
    }
    else
    {
        _2102 = _2009;
        _2104 = _2010;
        _2106 = _2011;
        _2108 = _2012;
    }
    bool _2346;
    vec4 _2118;
    vec4 _2141;
    float _2143;
    float _2147;
    float _2148;
    float _2149;
    float _2150;
    bool _2161;
    for (;;)
    {
        _2118 = cbMatDynParam._m0[0u];
        float _2120 = roundEven(_2118.y);
        bool _2121 = _2120 == 3.0;
        float _2123 = log2(_2108);
        float _2130 = exp2(_2123 * cbSceneParam._m0[78u].x) * _1981;
        float _2131 = exp2(_2123 * cbSceneParam._m0[78u].y) * _1982;
        float _2132 = exp2(_2123 * cbSceneParam._m0[78u].z) * _1983;
        float _2139 = _708 + (-0.5);
        _2141 = cbMtdParam._m0[1u];
        _2143 = _2141.y * _2139;
        float _2146 = (_2120 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2147 = _2146 * (_2121 ? _2130 : (_2130 + (cbSceneParam._m0[72u].w * _2102)));
        _2148 = _2146 * (_2121 ? _2131 : (_2131 + (cbSceneParam._m0[72u].w * _2104)));
        _2149 = _2146 * (_2121 ? _2132 : (_2132 + (cbSceneParam._m0[72u].w * _2106)));
        _2150 = _2139 * 0.999000012874603271484375;
        _2161 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2161)
        {
            if ((cbInstanceData._m0[_1655 + 7u].x + _2150) < 0.5)
            {
                _2346 = true;
                break;
            }
        }
        uint _2269 = _1962 + uint(_2118.w);
        if ((cbInstanceData._m0[_2269].w < 1.0) && ((cbInstanceData._m0[_2269].w + _2150) < 0.5))
        {
            _2346 = true;
            break;
        }
        if ((_2143 + 1.0) < _2141.x)
        {
            _2346 = true;
            break;
        }
        _2346 = false;
        break;
    }
    float _2478;
    if (_2346)
    {
        discard_state = true;
        _2478 = 0.0;
    }
    else
    {
        _2478 = cbInstanceData._m0[_1984].w;
    }
    SV_Target.x = _2147;
    SV_Target.y = _2148;
    SV_Target.z = _2149;
    SV_Target.w = _2478;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1984].w;
    discard_exit();
}


