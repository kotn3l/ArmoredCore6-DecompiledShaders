#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _668;
uint _1864;
uint _1865;
uint _1866;
uint _2110;
uint _2111;
uint _2112;
float _2335;
float _2336;
float _2337;
float _2338;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _280 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _315 = cbMtdParam._m0[21u].w + _256;
    float _316 = cbMtdParam._m0[22u].x + _257;
    float _317 = cbMtdParam._m0[22u].y + _258;
    float _334 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _335 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _336 = (-0.0) - dot(vec3(_315, _316, _317), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _340 = inversesqrt(dot(vec3(_334, _335, _336), vec3(_334, _335, _336)));
    float _343 = _340 * _336;
    float _346 = ((_340 * _334) + (((_280.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _347 = ((_340 * _335) + (((_280.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _348 = fract(TEXCOORD.x);
    float _349 = fract(TEXCOORD.y);
    float _355;
    if (_346 > 0.0)
    {
        _355 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _355 = frontier_phi_3_2_ladder;
    }
    float _363;
    if (_347 > 0.0)
    {
        _363 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _363 = frontier_phi_7_6_ladder;
    }
    float _367 = (_343 > 0.0) ? (cbMtdParam._m0[15u].x / _343) : 5000.0;
    float _368 = isnan(_363) ? _355 : (isnan(_355) ? _363 : min(_355, _363));
    float _369 = isnan(_367) ? _368 : (isnan(_368) ? _367 : min(_368, _367));
    float _373 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = ((_369 * _343) + _373) / _373;
    vec4 _404 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_348 + (-0.5)) + (_369 * _346)) / _380) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_349 + (-0.5)) + (_369 * _347)) / _380) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _437 = _256 * _436;
    float _438 = _257 * _436;
    float _439 = _258 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _516 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _523 = (cbMatDynParam._m0[5u].x * _516) + cbMatDynParam._m0[5u].y;
        float _2357 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
        float _524 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
        float _528 = (cbMatDynParam._m0[5u].z * _516) + cbMatDynParam._m0[5u].w;
        float _2368 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0))) - _524)) + _524) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_459 * cbSceneParam._m0[86u].x, _460 * cbSceneParam._m0[86u].y));
    float _472 = _469.x * TEXCOORD.z;
    float _473 = (-0.0) - _437;
    float _474 = (-0.0) - _438;
    float _475 = (-0.0) - _439;
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _667;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    float _676;
    float _677;
    float _678;
    float _679;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _590 = (cbModelParam._m0[37u].x * ((((fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _592 = (cbModelParam._m0[37u].y * ((((fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _593 = (((((fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_590, _592, _593), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_590, _592, _593), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_590, _592, _593), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_590, _592, _593), 0.0);
        float _630 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _640 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _650 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _660 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_617.x + (-0.5));
        float _662 = _660 * (_617.y + (-0.5));
        float _663 = _660 * (_617.z + (-0.5));
        _667 = _630 * (_596.z + (-0.5));
        _669 = _630 * (_596.y + (-0.5));
        _670 = _630 * (_596.x + (-0.5));
        _671 = _640 * (_603.z + (-0.5));
        _672 = _640 * (_603.y + (-0.5));
        _673 = _640 * (_603.x + (-0.5));
        _674 = _650 * (_610.z + (-0.5));
        _675 = _650 * (_610.y + (-0.5));
        _676 = _650 * (_610.x + (-0.5));
        _677 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        _678 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        _679 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    }
    else
    {
        _667 = _668;
        _669 = _668;
        _670 = _668;
        _671 = _668;
        _672 = _668;
        _673 = _668;
        _674 = _668;
        _675 = _668;
        _676 = _668;
        _677 = _668;
        _678 = _668;
        _679 = _668;
    }
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _736 = (cbModelParam._m0[38u].x * ((((fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _737 = (cbModelParam._m0[38u].y * ((((fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _738 = (((((fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _773 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _783 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _793 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _803 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_761.x + (-0.5));
        float _805 = _803 * (_761.y + (-0.5));
        float _806 = _803 * (_761.z + (-0.5));
        _810 = _773 * (_740.z + (-0.5));
        _811 = _773 * (_740.y + (-0.5));
        _812 = _773 * (_740.x + (-0.5));
        _813 = _783 * (_747.z + (-0.5));
        _814 = _783 * (_747.y + (-0.5));
        _815 = _783 * (_747.x + (-0.5));
        _816 = _793 * (_754.z + (-0.5));
        _817 = _793 * (_754.y + (-0.5));
        _818 = _793 * (_754.x + (-0.5));
        _819 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        _820 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        _821 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    }
    else
    {
        _810 = _668;
        _811 = _668;
        _812 = _668;
        _813 = _668;
        _814 = _668;
        _815 = _668;
        _816 = _668;
        _817 = _668;
        _818 = _668;
        _819 = _668;
        _820 = _668;
        _821 = _668;
    }
    float _836 = _437 * (-0.5);
    float _837 = _438 * (-0.5);
    float _838 = _439 * (-0.5);
    float _839 = dot(vec4(_836, _837, _838, 1.0), vec4(_812, _815, _818, _821));
    float _842 = dot(vec4(_836, _837, _838, 1.0), vec4(_811, _814, _817, _820));
    float _845 = dot(vec4(_836, _837, _838, 1.0), vec4(_810, _813, _816, _819));
    float _880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _852 = dot(vec4(_836, _837, _838, 1.0), vec4(_667, _671, _674, _677));
        float _856 = dot(vec4(_836, _837, _838, 1.0), vec4(_669, _672, _675, _678));
        float _860 = dot(vec4(_836, _837, _838, 1.0), vec4(_670, _673, _676, _679));
        float _867 = dot(vec4(cbModelParam._m0[39u]), vec4(_836, _837, _838, 1.0));
        _880 = dot(vec3(isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)), isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)), isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_867) ? 0.0 : (isnan(0.0) ? _867 : max(0.0, _867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _880 = 1.0;
    }
    float _891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _882 = dot(vec4(cbModelParam._m0[40u]), vec4(_836, _837, _838, 1.0));
        _891 = dot(vec3(isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)), isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)), isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_882) ? 0.0 : (isnan(0.0) ? _882 : max(0.0, _882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _891 = 1.0;
    }
    float _895 = (_891 * cbModelParam._m0[1u].x) + (_880 * (1.0 - cbModelParam._m0[1u].x));
    float _901 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _984;
    float _986;
    float _988;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _951 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _955 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _959 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _962 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _965 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _968 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _994;
        if (_962 > 0.0)
        {
            _994 = abs((1.0 - _951) / _962);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_962 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_951 + 1.0) / _962);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _994 = frontier_phi_25_23_ladder;
        }
        float _1292;
        if (_965 > 0.0)
        {
            _1292 = abs((1.0 - _955) / _965);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_965 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_955 + 1.0) / _965);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1292 = frontier_phi_34_30_ladder;
        }
        float _1596;
        if (_968 > 0.0)
        {
            _1596 = abs((1.0 - _959) / _968);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_968 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_959 + 1.0) / _968);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1596 = frontier_phi_48_41_ladder;
        }
        float _1598 = isnan(_1292) ? _994 : (isnan(_994) ? _1292 : min(_994, _1292));
        float _1599 = isnan(_1596) ? _1598 : (isnan(_1598) ? _1596 : min(_1598, _1596));
        float _1603 = (_1599 * _962) + _951;
        float _1604 = (_1599 * _965) + _955;
        float _1605 = (_1599 * _968) + _959;
        float _1606 = _1599 * 9.9999997473787516355514526367188e-05;
        float _1607 = (-1.0) - _1606;
        float _1609 = _1606 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1605 > _1609) || ((_1605 < _1607) || ((_1604 > _1609) || ((_1604 < _1607) || ((_1603 < _1607) || (_1603 > _1609))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1605, cbModelParam._m0[9u].z, fma(_1604, cbModelParam._m0[9u].y, _1603 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1605, cbModelParam._m0[10u].z, fma(_1604, cbModelParam._m0[10u].y, _1603 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1605, cbModelParam._m0[11u].z, fma(_1604, cbModelParam._m0[11u].y, _1603 * cbModelParam._m0[11u].x))), _901);
            frontier_phi_24_48_ladder = _1732.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1732.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1732.x * cbModelParam._m0[1u].y;
        }
        _984 = frontier_phi_24_48_ladder_2;
        _986 = frontier_phi_24_48_ladder_1;
        _988 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _972 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _901);
        _984 = _972.x * cbModelParam._m0[1u].y;
        _986 = _972.y * cbModelParam._m0[1u].y;
        _988 = _972.z * cbModelParam._m0[1u].y;
    }
    float _991 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1079;
    float _1081;
    float _1083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1043 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1047 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1051 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1054 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1057 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1060 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1297;
        if (_1054 > 0.0)
        {
            _1297 = abs((1.0 - _1043) / _1054);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1054 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1043 + 1.0) / _1054);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1297 = frontier_phi_36_32_ladder;
        }
        float _1622;
        if (_1057 > 0.0)
        {
            _1622 = abs((1.0 - _1047) / _1057);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1057 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1047 + 1.0) / _1057);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1622 = frontier_phi_50_43_ladder;
        }
        float _1794;
        if (_1060 > 0.0)
        {
            _1794 = abs((1.0 - _1051) / _1060);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1060 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1051 + 1.0) / _1060);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1794 = frontier_phi_68_61_ladder;
        }
        float _1796 = isnan(_1622) ? _1297 : (isnan(_1297) ? _1622 : min(_1297, _1622));
        float _1797 = isnan(_1794) ? _1796 : (isnan(_1796) ? _1794 : min(_1796, _1794));
        float _1801 = (_1797 * _1054) + _1043;
        float _1802 = (_1797 * _1057) + _1047;
        float _1803 = (_1797 * _1060) + _1051;
        float _1804 = _1797 * 9.9999997473787516355514526367188e-05;
        float _1805 = (-1.0) - _1804;
        float _1807 = _1804 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1803 > _1807) || ((_1803 < _1805) || ((_1802 > _1807) || ((_1802 < _1805) || ((_1801 < _1805) || (_1801 > _1807))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1803, cbModelParam._m0[17u].z, fma(_1802, cbModelParam._m0[17u].y, _1801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1803, cbModelParam._m0[18u].z, fma(_1802, cbModelParam._m0[18u].y, _1801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1803, cbModelParam._m0[19u].z, fma(_1802, cbModelParam._m0[19u].y, _1801 * cbModelParam._m0[19u].x))), _991);
            frontier_phi_33_68_ladder = _1972.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1972.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1972.x * cbModelParam._m0[1u].z;
        }
        _1079 = frontier_phi_33_68_ladder_2;
        _1081 = frontier_phi_33_68_ladder_1;
        _1083 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _991);
        _1079 = _1063.x * cbModelParam._m0[1u].z;
        _1081 = _1063.y * cbModelParam._m0[1u].z;
        _1083 = _1063.z * cbModelParam._m0[1u].z;
    }
    float _1095 = _472 * 0.01200000010430812835693359375;
    float _1097 = _1095 * ((cbModelParam._m0[1u].w * (_1079 - _984)) + _984);
    float _1098 = _1095 * ((cbModelParam._m0[1u].w * (_1081 - _986)) + _986);
    float _1099 = _1095 * ((cbModelParam._m0[1u].w * (_1083 - _988)) + _988);
    float _1120 = fma(_1099, cbSceneParam._m0[89u].z, fma(_1098, cbSceneParam._m0[89u].y, _1097 * cbSceneParam._m0[89u].x));
    float _1123 = fma(_1099, cbSceneParam._m0[90u].z, fma(_1098, cbSceneParam._m0[90u].y, _1097 * cbSceneParam._m0[90u].x));
    float _1126 = fma(_1099, cbSceneParam._m0[91u].z, fma(_1098, cbSceneParam._m0[91u].y, _1097 * cbSceneParam._m0[91u].x));
    vec4 _1134 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_459, _460));
    float _1136 = _1134.w;
    uint _1152 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1156 = floatBitsToUint(cbInstanceData._m0[_1152 + 5u]);
    uint _1158 = _1156.x * 14u;
    uint _1159 = _1158 + 13u;
    float _1164 = _472 + (-1.0);
    float _1167 = (cbLight._m0[_1159].x * _1164) + 1.0;
    float _1168 = (cbLight._m0[_1159].y * _1164) + 1.0;
    uint _1169 = _1158 + 8u;
    float _1180 = cbLight._m0[_1158].x + _437;
    float _1181 = cbLight._m0[_1158].y + _438;
    float _1182 = cbLight._m0[_1158].z + _439;
    float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
    float _1190 = dot(vec3(0.0), vec3(cbLight._m0[_1158].xyz));
    float _2494 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    float _1194 = dot(vec3(0.0), vec3(_437, _438, _439));
    float _2505 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
    float _1198 = dot(vec3(cbLight._m0[_1158].xyz), vec3(_1180 * _1186, _1181 * _1186, _1182 * _1186));
    float _2516 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1209 = (exp2(log2(1.0 - (isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1215 = (0.5 / ((_1193 + 9.9999999392252902907785028219223e-09) + _1197)) * _1193;
    float _2527 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1217 = (isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0))) * 0.31831014156341552734375;
    float _1219 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
    uint _1232 = _1158 + 9u;
    uint _1238 = _1158 | 1u;
    float _1244 = cbLight._m0[_1238].x + _437;
    float _1245 = cbLight._m0[_1238].y + _438;
    float _1246 = cbLight._m0[_1238].z + _439;
    float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
    float _1254 = dot(vec3(0.0), vec3(cbLight._m0[_1238].xyz));
    float _2543 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _1257 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
    float _1258 = dot(vec3(cbLight._m0[_1238].xyz), vec3(_1244 * _1250, _1245 * _1250, _1246 * _1250));
    float _2554 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1267 = (exp2(log2(1.0 - (isnan(1.0) ? _2554 : (isnan(_2554) ? 1.0 : min(_2554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1271 = (0.5 / ((_1257 + 9.9999999392252902907785028219223e-09) + _1197)) * _1257;
    float _2565 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _1273 = (isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0))) * 0.31831014156341552734375;
    float _1274 = isnan(1.0) ? _1168 : (isnan(_1168) ? 1.0 : min(_1168, 1.0));
    float _1284 = (((_1267 * cbLight._m0[_1232].x) * _1273) * _1274) + ((((cbLight._m0[_1169].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1136))) * _1209) * _1217) * _1219);
    float _1285 = (((_1267 * cbLight._m0[_1232].y) * _1273) * _1274) + ((((cbLight._m0[_1169].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1136))) * _1209) * _1217) * _1219);
    float _1286 = (((_1267 * cbLight._m0[_1232].z) * _1273) * _1274) + ((((cbLight._m0[_1169].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1136))) * _1209) * _1217) * _1219);
    float _1402;
    float _1404;
    float _1406;
    if (_1156.y == 0u)
    {
        float _1342 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1343 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1342;
        float _1344 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1342;
        float _1345 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1342;
        uvec4 _1357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1358 = _1357.x;
        uint _1369 = uint((float(_1357.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _1358))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _1358)));
        float _1379 = (log2(_1345 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1380 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        uint _1383 = uint(isnan(14.0) ? _1380 : (isnan(_1380) ? 14.0 : min(_1380, 14.0)));
        uvec4 _1388 = texelFetch(g_lightClusterGridBuffer, int(((_1383 << 2u) + (_1369 << 6u)) >> 2u));
        uint _1389 = _1388.x;
        uint _1390 = _1357.z;
        float _1479;
        float _1481;
        float _1483;
        if (((((1u << ((_1390 >> 4u) & 15u)) + 4294967295u) & _1389) == 0u) || ((_1390 & 240u) == 0u))
        {
            _1479 = 0.0;
            _1481 = 0.0;
            _1483 = 0.0;
        }
        else
        {
            float _1480;
            float _1482;
            float _1484;
            float _1647 = 0.0;
            float _1648 = 0.0;
            float _1649 = 0.0;
            uint _1650 = 0u;
            uint _1659;
            bool _1660;
            for (;;)
            {
                _1659 = texelFetch(g_lightClassification, int((((_1383 << 5u) + (_1369 << 9u)) + (_1650 << 2u)) >> 2u)).x;
                _1660 = _1659 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1660)
                {
                    frontier_phi_63_pred = _1649;
                    frontier_phi_63_pred_1 = _1648;
                    frontier_phi_63_pred_2 = _1647;
                }
                else
                {
                    float _1834;
                    float _1835;
                    float _1836;
                    uint _1837;
                    _1834 = _1647;
                    _1835 = _1648;
                    _1836 = _1649;
                    _1837 = _1659;
                    float _1741;
                    float _1742;
                    float _1743;
                    for (;;)
                    {
                        uint _1841 = uint(findLSB(_1837)) + (_1650 << 5u);
                        uint _1838 = (_1837 + 4294967295u) & _1837;
                        uint _1843 = _1841 * 48u;
                        vec4 _1857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1843)).x, texelFetch(g_PointLightRenderingBuffer, int(_1843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1843 + 3u)).x));
                        uint _1874 = (_1841 * 48u) + 8u;
                        vec3 _1885 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1874)).x, texelFetch(g_PointLightRenderingBuffer, int(_1874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1874 + 2u)).x));
                        float _1889 = _1857.x - _1343;
                        float _1890 = _1857.y - _1344;
                        float _1891 = _1857.z - _1345;
                        float _1892 = dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891));
                        float _1895 = inversesqrt(_1892);
                        float _1904 = 1.0 - (_1892 * _1857.w);
                        float _2591 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
                        float _1906 = sqrt(_1892) * uintBitsToFloat(uvec4(_1864, _1865, _1866, texelFetch(g_PointLightRenderingBuffer, int(((_1841 * 48u) + 4u) + 3u)).x)).w;
                        float _1909 = 1.39999997615814208984375 / (_1906 + 1.39999997615814208984375);
                        float _1910 = _1909 * _1909;
                        float _1913 = ((1.0 - _1910) * dot(vec3(0.0), vec3(_1895 * _1889, _1895 * _1890, _1895 * _1891))) + _1910;
                        float _1915 = (-0.0) - _1343;
                        float _1916 = (-0.0) - _1344;
                        float _1917 = (-0.0) - _1345;
                        float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
                        float _1925 = dot(vec3(0.0), vec3(_1921 * _1915, _1921 * _1916, _1921 * _1917));
                        float _2602 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
                        float _2613 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
                        float _1929 = isnan(1.0) ? _2613 : (isnan(_2613) ? 1.0 : min(_2613, 1.0));
                        float _1933 = (0.5 / (((isnan(1.0) ? _2602 : (isnan(_2602) ? 1.0 : min(_2602, 1.0))) + 9.9999999392252902907785028219223e-09) + _1929)) * _1929;
                        float _2624 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
                        float _1942 = (((isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0))) * 3.1415927410125732421875) / (((_1906 * _1906) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0)));
                        _1741 = (_1942 * _1885.x) + _1834;
                        _1742 = (_1942 * _1885.y) + _1835;
                        _1743 = (_1942 * _1885.z) + _1836;
                        if (_1838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1834 = _1741;
                            _1835 = _1742;
                            _1836 = _1743;
                            _1837 = _1838;
                        }
                    }
                    frontier_phi_63_pred = _1743;
                    frontier_phi_63_pred_1 = _1742;
                    frontier_phi_63_pred_2 = _1741;
                }
                _1484 = frontier_phi_63_pred;
                _1482 = frontier_phi_63_pred_1;
                _1480 = frontier_phi_63_pred_2;
                uint _1651 = _1650 + 1u;
                if (_1651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1647 = _1480;
                    _1648 = _1482;
                    _1649 = _1484;
                    _1650 = _1651;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1479 = _1480;
            _1481 = _1482;
            _1483 = _1484;
        }
        uvec4 _1487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1488 = _1487.z;
        uint _1490 = (_1488 >> 8u) & 15u;
        float _1627;
        float _1629;
        float _1631;
        if (((4294967295u << _1490) & _1389) == 0u)
        {
            _1627 = _1479;
            _1629 = _1481;
            _1631 = _1483;
        }
        else
        {
            float _1643 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1490 < ((_1488 >> 12u) & 15u))
            {
                float _1628;
                float _1630;
                float _1632;
                float _1820 = _1479;
                float _1821 = _1481;
                float _1822 = _1483;
                uint _1823 = _1490;
                uint _1832;
                bool _1833;
                for (;;)
                {
                    _1832 = texelFetch(g_lightClassification, int((((_1383 << 5u) + (_1369 << 9u)) + (_1823 << 2u)) >> 2u)).x;
                    _1833 = _1832 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1833)
                    {
                        frontier_phi_77_pred = _1821;
                        frontier_phi_77_pred_1 = _1820;
                        frontier_phi_77_pred_2 = _1822;
                    }
                    else
                    {
                        float _1977;
                        float _1978;
                        float _1979;
                        float _2199;
                        float _2200;
                        float _2201;
                        float _1987 = _1820;
                        float _1988 = _1821;
                        float _1989 = _1822;
                        uint _1990 = _1832;
                        uint _1991;
                        uint _2001;
                        vec4 _2016;
                        float _2017;
                        vec3 _2029;
                        vec4 _2045;
                        vec4 _2060;
                        float _2106;
                        bool _2107;
                        for (;;)
                        {
                            _2001 = ((_1823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1990));
                            _1991 = (_1990 + 4294967295u) & _1990;
                            uint _2003 = _2001 * 40u;
                            _2016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 3u)).x));
                            _2017 = _2016.w;
                            uint _2019 = (_2001 * 40u) + 8u;
                            _2029 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2019 + 2u)).x));
                            uint _2032 = (_2001 * 40u) + 16u;
                            _2045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 3u)).x));
                            uint _2047 = (_2001 * 40u) + 20u;
                            _2060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 3u)).x));
                            uint _2062 = (_2001 * 40u) + 24u;
                            vec4 _2075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 3u)).x));
                            uint _2081 = (_2001 * 40u) + 28u;
                            vec4 _2094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 3u)).x));
                            _2106 = fma(_1345, _2094.z, fma(_1344, _2094.y, _2094.x * _1343)) + _2094.w;
                            _2107 = !((fma(_1345, _2075.z, fma(_1344, _2075.y, _2075.x * _1343)) + _2075.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2107)
                            {
                                float _2141 = _2016.x - _1343;
                                float _2142 = _2016.y - _1344;
                                float _2143 = _2016.z - _1345;
                                float _2144 = dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143));
                                float _2147 = inversesqrt(_2144);
                                float _2154 = 1.0 - (_2144 / (_2017 * _2017));
                                float _2635 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
                                float _2156 = sqrt(_2144) * uintBitsToFloat(uvec4(_2110, _2111, _2112, texelFetch(g_SpotLightRenderingBuffer, int(((_2001 * 40u) + 4u) + 3u)).x)).w;
                                float _2158 = 1.39999997615814208984375 / (_2156 + 1.39999997615814208984375);
                                float _2159 = _2158 * _2158;
                                float _2162 = (fma(_1345, _2045.z, fma(_1344, _2045.y, _2045.x * _1343)) + _2045.w) / _2106;
                                float _2163 = (fma(_1345, _2060.z, fma(_1344, _2060.y, _2060.x * _1343)) + _2060.w) / _2106;
                                float _2167 = 1.0 - dot(vec2(_2162, _2163), vec2(_2162, _2163));
                                float _2646 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
                                float _2175 = dot(vec3(0.0), vec3((-0.0) - (_1343 * _1643), (-0.0) - (_1344 * _1643), (-0.0) - (_1345 * _1643)));
                                float _2657 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
                                float _2183 = ((1.0 - _2159) * dot(vec3(0.0), vec3(_2147 * _2141, _2147 * _2142, _2147 * _2143))) + _2159;
                                float _2668 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
                                float _2184 = isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0));
                                float _2188 = (0.5 / (((isnan(1.0) ? _2657 : (isnan(_2657) ? 1.0 : min(_2657, 1.0))) + 9.9999999392252902907785028219223e-09) + _2184)) * _2184;
                                float _2679 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
                                float _2195 = ((isnan(1.0) ? _2646 : (isnan(_2646) ? 1.0 : min(_2646, 1.0))) * (isnan(1.0) ? _2635 : (isnan(_2635) ? 1.0 : min(_2635, 1.0)))) * (((isnan(1.0) ? _2679 : (isnan(_2679) ? 1.0 : min(_2679, 1.0))) * 3.1415927410125732421875) / (((_2156 * _2156) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2195 * _2029.z;
                                frontier_phi_83_pred_1 = _2195 * _2029.y;
                                frontier_phi_83_pred_2 = _2195 * _2029.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2201 = frontier_phi_83_pred;
                            _2200 = frontier_phi_83_pred_1;
                            _2199 = frontier_phi_83_pred_2;
                            _1977 = _2199 + _1987;
                            _1978 = _2200 + _1988;
                            _1979 = _2201 + _1989;
                            if (_1991 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1987 = _1977;
                                _1988 = _1978;
                                _1989 = _1979;
                                _1990 = _1991;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1978;
                        frontier_phi_77_pred_1 = _1977;
                        frontier_phi_77_pred_2 = _1979;
                    }
                    _1630 = frontier_phi_77_pred;
                    _1628 = frontier_phi_77_pred_1;
                    _1632 = frontier_phi_77_pred_2;
                    uint _1824 = _1823 + 1u;
                    if (_1824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1820 = _1628;
                        _1821 = _1630;
                        _1822 = _1632;
                        _1823 = _1824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1632;
                frontier_phi_52_53_ladder_1 = _1630;
                frontier_phi_52_53_ladder_2 = _1628;
            }
            else
            {
                frontier_phi_52_53_ladder = _1483;
                frontier_phi_52_53_ladder_1 = _1481;
                frontier_phi_52_53_ladder_2 = _1479;
            }
            _1627 = frontier_phi_52_53_ladder_2;
            _1629 = frontier_phi_52_53_ladder_1;
            _1631 = frontier_phi_52_53_ladder;
        }
        float _1636 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _1402 = ((_1627 * 0.039999999105930328369140625) * _1636) + _1284;
        _1404 = ((_1629 * 0.039999999105930328369140625) * _1636) + _1285;
        _1406 = ((_1631 * 0.039999999105930328369140625) * _1636) + _1286;
    }
    else
    {
        _1402 = _1284;
        _1404 = _1285;
        _1406 = _1286;
    }
    uint _1412 = _1152 + 9u;
    uint _1413 = _1412 + uint(cbMatDynParam._m0[0u].w);
    float _1428 = ((cbMtdParam._m0[9u].x * _404.x) * cbInstanceData._m0[_1413].x) + ((_1402 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _895)) * cbPerFrame._m0[3u].x);
    float _1429 = ((cbMtdParam._m0[9u].y * _404.y) * cbInstanceData._m0[_1413].y) + ((_1404 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _895)) * cbPerFrame._m0[3u].x);
    float _1430 = ((cbMtdParam._m0[9u].z * _404.z) * cbInstanceData._m0[_1413].z) + ((_1406 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _895)) * cbPerFrame._m0[3u].x);
    float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
    float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
    float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    uint _1434 = _1152 + 6u;
    float _1442 = _459 / cbSceneParam._m0[86u].x;
    float _1443 = _460 / cbSceneParam._m0[86u].y;
    vec4 _1457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1442, _1443, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1459 = _1457.x;
    float _1460 = _1457.y;
    float _1461 = _1457.z;
    float _1462 = _1457.w;
    float _1536;
    float _1538;
    float _1540;
    float _1542;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _1498 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _1499 = _1498 / _432;
        float _1510 = _1499 * _256;
        float _1511 = _257 * _1499;
        float _1512 = (-0.0) - _1511;
        float _1513 = _1499 * _258;
        float _1515 = (cbSceneParam._m0[77u].w * _1512) / _1498;
        float _1516 = _1515 + cbSceneParam._m0[79u].w;
        float _1517 = cbSceneParam._m0[79u].w - _1511;
        float _1523 = sqrt(((_1510 * _1510) + (_1511 * _1511)) + (_1513 * _1513));
        float _1526 = (1.0 - (cbSceneParam._m0[77u].w / _1498)) * _1523;
        float _1532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1751;
        if (abs((_1512 - _1515) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1751 = ((((_1516 > 0.0) ? exp2(_1532 * _1516) : (2.0 - exp2(_1534 * _1516))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1526;
        }
        else
        {
            float _1673 = 1.0 / cbSceneParam._m0[80u].x;
            float _1674 = isnan(_1517) ? _1516 : (isnan(_1516) ? _1517 : max(_1516, _1517));
            float _1675 = isnan(_1517) ? _1516 : (isnan(_1516) ? _1517 : min(_1516, _1517));
            float _1684 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : min(_1674, 0.0));
            float _1685 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : min(_1675, 0.0));
            _1751 = ((abs(_1523 / _1512) * cbSceneParam._m0[80u].y) * ((((_1684 - _1685) * 2.0) - ((exp2(_1532 * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)))) - exp2(_1532 * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))))) * _1673)) - ((exp2(_1534 * _1684) - exp2(_1534 * _1685)) * _1673))) + (_1526 * cbSceneParam._m0[80u].z);
        }
        vec4 _1753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1442, _1443, 1.0), 0.0);
        float _1762 = exp2((_1751 * (-1.44269502162933349609375)) * (1.0 - _1753.w));
        float _1763 = log2(_1762);
        float _1779 = log2(_1462);
        _1536 = (exp2(_1779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1763 * cbSceneParam._m0[78u].x)) * _1753.x) / cbSceneParam._m0[78u].x)) + _1459;
        _1538 = (exp2(_1779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1763 * cbSceneParam._m0[78u].y)) * _1753.y) / cbSceneParam._m0[78u].y)) + _1460;
        _1540 = (exp2(_1779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1763 * cbSceneParam._m0[78u].z)) * _1753.z) / cbSceneParam._m0[78u].z)) + _1461;
        _1542 = _1762 * _1462;
    }
    else
    {
        _1536 = _1459;
        _1538 = _1460;
        _1540 = _1461;
        _1542 = _1462;
    }
    bool _1789;
    vec4 _1552;
    vec4 _1575;
    float _1577;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    bool _1595;
    for (;;)
    {
        _1552 = cbMatDynParam._m0[0u];
        float _1554 = roundEven(_1552.y);
        bool _1555 = _1554 == 3.0;
        float _1557 = log2(_1542);
        float _1564 = exp2(_1557 * cbSceneParam._m0[78u].x) * _1431;
        float _1565 = exp2(_1557 * cbSceneParam._m0[78u].y) * _1432;
        float _1566 = exp2(_1557 * cbSceneParam._m0[78u].z) * _1433;
        float _1573 = _446 + (-0.5);
        _1575 = cbMtdParam._m0[1u];
        _1577 = _1575.y * _1573;
        float _1580 = (_1554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1581 = _1580 * (_1555 ? _1564 : (_1564 + (cbSceneParam._m0[72u].w * _1536)));
        _1582 = _1580 * (_1555 ? _1565 : (_1565 + (cbSceneParam._m0[72u].w * _1538)));
        _1583 = _1580 * (_1555 ? _1566 : (_1566 + (cbSceneParam._m0[72u].w * _1540)));
        _1584 = _1573 * 0.999000012874603271484375;
        _1595 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1595)
        {
            if ((cbInstanceData._m0[_1152 + 7u].x + _1584) < 0.5)
            {
                _1789 = true;
                break;
            }
        }
        uint _1708 = _1412 + uint(_1552.w);
        if ((cbInstanceData._m0[_1708].w < 1.0) && ((cbInstanceData._m0[_1708].w + _1584) < 0.5))
        {
            _1789 = true;
            break;
        }
        if ((_1577 + 1.0) < _1575.x)
        {
            _1789 = true;
            break;
        }
        _1789 = false;
        break;
    }
    float _1947;
    if (_1789)
    {
        discard_state = true;
        _1947 = 0.0;
    }
    else
    {
        _1947 = cbInstanceData._m0[_1434].w;
    }
    SV_Target.x = _1581;
    SV_Target.y = _1582;
    SV_Target.z = _1583;
    SV_Target.w = _1947;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1434].w;
    discard_exit();
}


