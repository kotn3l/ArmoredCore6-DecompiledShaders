#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1313;
float _3471;
float _3472;
float _3473;
float _3474;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _349 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _385 = cbMtdParam._m0[21u].w + _271;
    float _386 = cbMtdParam._m0[22u].x + _272;
    float _387 = cbMtdParam._m0[22u].y + _273;
    float _401 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_200, _201, _202));
    float _402 = (-0.0) - dot(vec3(_385, _386, _387), vec3(_214, _215, _216));
    float _403 = (-0.0) - dot(vec3(_385, _386, _387), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _410 = _407 * _403;
    float _411 = (_407 * _401) + ((cbMtdParam._m0[19u].w * _289) * ((_349.x * 2.0) + (-1.0)));
    float _412 = (_407 * _402) + ((cbMtdParam._m0[20u].x * _289) * ((_349.y * 2.0) + (-1.0)));
    float _413 = _411 * cbMtdParam._m0[18u].z;
    float _414 = _412 * cbMtdParam._m0[18u].y;
    float _415 = fract(TEXCOORD.x);
    float _416 = fract(TEXCOORD.y);
    float _422;
    if (_413 > 0.0)
    {
        _422 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _422 = frontier_phi_3_2_ladder;
    }
    float _430;
    if (_414 > 0.0)
    {
        _430 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _430 = frontier_phi_7_6_ladder;
    }
    bool _432 = _410 > 0.0;
    float _434 = _432 ? (cbMtdParam._m0[15u].x / _410) : 5000.0;
    float _435 = isnan(_430) ? _422 : (isnan(_422) ? _430 : min(_422, _430));
    float _436 = isnan(_434) ? _435 : (isnan(_435) ? _434 : min(_435, _434));
    float _440 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _441 = _415 + (-0.5);
    float _444 = _416 + (-0.5);
    float _447 = ((_436 * _410) + _440) / _440;
    vec4 _471 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_441 + (_436 * _413)) / _447) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_444 + (_436 * _414)) / _447) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _484 = (_471.x * _289) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _289) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _289) * cbMtdParam._m0[9u].z;
    float _504 = _411 * cbMtdParam._m0[20u].z;
    float _505 = _412 * cbMtdParam._m0[20u].y;
    bool _506 = _504 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _511 = frontier_phi_11_10_ladder;
    }
    bool _513 = _505 > 0.0;
    float _518;
    if (_513)
    {
        _518 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _518 = frontier_phi_15_14_ladder;
    }
    float _521 = _432 ? (cbMtdParam._m0[16u].x / _410) : 5000.0;
    float _522 = isnan(_518) ? _511 : (isnan(_511) ? _518 : min(_511, _518));
    float _523 = isnan(_521) ? _522 : (isnan(_522) ? _521 : min(_522, _521));
    float _527 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _531 = ((_523 * _410) + _527) / _527;
    float _536 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _538 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _554 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_441 + (_523 * _504)) / _531) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_444 + (_523 * _505)) / _531) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _569;
    if (_506)
    {
        _569 = (1.0 - _415) / _504;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _415) / _504;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _569 = frontier_phi_19_18_ladder;
    }
    float _575;
    if (_513)
    {
        _575 = (1.0 - _416) / _505;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _416) / _505;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _575 = frontier_phi_23_22_ladder;
    }
    float _577 = isnan(_575) ? _569 : (isnan(_569) ? _575 : min(_569, _575));
    float _578 = isnan(_521) ? _577 : (isnan(_577) ? _521 : min(_577, _521));
    float _585 = ((_578 * _410) + _527) / _527;
    vec4 _606 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_441 + (_578 * _504)) / _585) + 0.5) + _536) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_444 + (_578 * _505)) / _585) + 0.5) + _538) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _289) * _554.x) - _484) * _289) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _289) * _554.y) - _485) * _289) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _289) * _554.z) - _486) * _289) * _608) + _486;
    float _634 = _411 * cbMtdParam._m0[21u].x;
    float _635 = _412 * cbMtdParam._m0[20u].w;
    bool _636 = _634 > 0.0;
    float _641;
    if (_636)
    {
        _641 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _641 = frontier_phi_27_26_ladder;
    }
    bool _643 = _635 > 0.0;
    float _648;
    if (_643)
    {
        _648 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _648 = frontier_phi_31_30_ladder;
    }
    float _651 = _432 ? (cbMtdParam._m0[17u].z / _410) : 5000.0;
    float _652 = isnan(_648) ? _641 : (isnan(_641) ? _648 : min(_641, _648));
    float _653 = isnan(_651) ? _652 : (isnan(_652) ? _651 : min(_652, _651));
    float _657 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _661 = ((_653 * _410) + _657) / _657;
    float _666 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _668 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _685 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_441 + (_653 * _634)) / _661) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_444 + (_653 * _635)) / _661) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _700;
    if (_636)
    {
        _700 = (1.0 - _415) / _634;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _415) / _634;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _700 = frontier_phi_35_34_ladder;
    }
    float _706;
    if (_643)
    {
        _706 = (1.0 - _416) / _635;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _416) / _635;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _706 = frontier_phi_39_38_ladder;
    }
    float _708 = isnan(_706) ? _700 : (isnan(_700) ? _706 : min(_700, _706));
    float _709 = isnan(_651) ? _708 : (isnan(_708) ? _651 : min(_708, _651));
    float _716 = ((_709 * _410) + _657) / _657;
    vec4 _736 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_441 + (_709 * _634)) / _716) + 0.5) + _666) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_444 + (_709 * _635)) / _716) + 0.5) + _668) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _738 = _736.x;
    float _748 = _289 * 0.1500000059604644775390625;
    float _759 = (_748 * ((_618 - _324) + (((((cbMtdParam._m0[14u].x * _289) * _685.x) - _618) * _289) * _738))) + _324;
    float _760 = (_748 * ((_619 - _326) + (((((cbMtdParam._m0[14u].y * _289) * _685.y) - _619) * _289) * _738))) + _326;
    float _761 = (_748 * ((_620 - _328) + (((((cbMtdParam._m0[14u].z * _289) * _685.z) - _620) * _289) * _738))) + _328;
    vec4 _773 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _777 = _773.z;
    float _780 = (_773.x * 2.0) + (-1.0);
    float _781 = (_773.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3533 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _790 = fma(_787, _207, fma(_781, _214, _780 * _200));
    float _793 = fma(_787, _208, fma(_781, _215, _780 * _201));
    float _796 = fma(_787, _209, fma(_781, _216, _780 * _202));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3544 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _804 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3566 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3577 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _828 = _271 * _827;
    float _829 = _272 * _827;
    float _830 = _273 * _827;
    vec4 _835 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _837 = _835.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _994 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _1000 = (cbMatDynParam._m0[5u].x * _994) + cbMatDynParam._m0[5u].y;
        float _3588 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1005 = (cbMatDynParam._m0[5u].z * _994) + cbMatDynParam._m0[5u].w;
        float _3599 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) - _1001)) + _1001) < ((_837 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _849 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _850 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _872 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _875 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _888 = uint(roundEven(NORMAL.w)) * 13u;
    uint _890 = _888 + 9u;
    uint _891 = _890 + uint(cbMatDynParam._m0[0u].w);
    float _897 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_891].x;
    float _898 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_891].y;
    float _899 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_891].z;
    float _3610 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _849, cbSceneParam._m0[86u].y * _850));
    float _914 = _911.x * TEXCOORD.z;
    float _915 = dot(vec3(_801, _802, _803), vec3(_828, _829, _830));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _801) - _828;
    float _923 = (_918 * _802) - _829;
    float _924 = (_918 * _803) - _830;
    float _928 = abs(dot(vec3(_828, _829, _830), vec3(_801, _802, _803)));
    float _3643 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_804);
    float _943 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1312;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1039 = fma(_983, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975));
        float _1043 = fma(_983, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975));
        float _1047 = fma(_983, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975));
        float _1070 = _975 + _801;
        float _1071 = _979 + _802;
        float _1072 = _983 + _803;
        float _1082 = fma(_1072, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1039 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1043 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[34u].z) + ((((((_1047 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1140 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1106.x + (-0.5));
        float _1142 = _1140 * (_1106.y + (-0.5));
        float _1143 = _1140 * (_1106.z + (-0.5));
        float _1150 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1113.x + (-0.5));
        float _1152 = _1150 * (_1113.y + (-0.5));
        float _1153 = _1150 * (_1113.z + (-0.5));
        float _1160 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1120.x + (-0.5));
        float _1162 = _1160 * (_1120.y + (-0.5));
        float _1163 = _1160 * (_1120.z + (-0.5));
        float _1170 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1127.x + (-0.5));
        float _1172 = _1170 * (_1127.y + (-0.5));
        float _1173 = _1170 * (_1127.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1194 = (dot(vec3(_801, _802, _803), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1204 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3691 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1206 + 1.0))) + _1211) * _1174;
        float _1221 = _1142 * 0.5;
        float _1222 = _1152 * 0.5;
        float _1223 = _1162 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_801, _802, _803), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3724 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1248 + 1.0))) + _1253) * _1175;
        float _1263 = _1143 * 0.5;
        float _1264 = _1153 * 0.5;
        float _1265 = _1163 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_801, _802, _803), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3757 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1290 + 1.0))) + _1295) * _1176;
        _1312 = _1143;
        _1314 = _1142;
        _1315 = _1141;
        _1316 = _1153;
        _1317 = _1152;
        _1318 = _1151;
        _1319 = _1163;
        _1320 = _1162;
        _1321 = _1161;
        _1322 = _1176;
        _1323 = _1175;
        _1324 = _1174;
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1313;
        _1314 = _1313;
        _1315 = _1313;
        _1316 = _1313;
        _1317 = _1313;
        _1318 = _1313;
        _1319 = _1313;
        _1320 = _1313;
        _1321 = _1313;
        _1322 = _1313;
        _1323 = _1313;
        _1324 = _1313;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_983, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975));
        float _1360 = fma(_983, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975));
        float _1364 = fma(_983, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975));
        float _1387 = _975 + _801;
        float _1388 = _979 + _802;
        float _1389 = _983 + _803;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_801, _802, _803), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _3820 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_801, _802, _803), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _3853 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_801, _802, _803), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _3886 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1313;
        _1626 = _1313;
        _1627 = _1313;
        _1628 = _1313;
        _1629 = _1313;
        _1630 = _1313;
        _1631 = _1313;
        _1632 = _1313;
        _1633 = _1313;
        _1634 = _1313;
        _1635 = _1313;
        _1636 = _1313;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1325)) + _1325;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1326)) + _1326;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _922 * 0.5;
    float _1694 = _923 * 0.5;
    float _1695 = _924 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1312, _1316, _1319, _1322));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1809 = fma(_983, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975)) + cbModelParam._m0[13u].w;
        float _1813 = fma(_983, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975)) + cbModelParam._m0[14u].w;
        float _1817 = fma(_983, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975)) + cbModelParam._m0[15u].w;
        float _1820 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1823 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1826 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1854;
        if (_1820 > 0.0)
        {
            _1854 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1854 = frontier_phi_57_55_ladder;
        }
        float _2199;
        if (_1823 > 0.0)
        {
            _2199 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2199 = frontier_phi_66_62_ladder;
        }
        float _2507;
        if (_1826 > 0.0)
        {
            _2507 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2507 = frontier_phi_80_73_ladder;
        }
        float _2509 = isnan(_2199) ? _1854 : (isnan(_1854) ? _2199 : min(_1854, _2199));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1820) + _1809;
        float _2515 = (_2510 * _1823) + _1813;
        float _2516 = (_2510 * _1826) + _1817;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2516, cbModelParam._m0[9u].z, fma(_2515, cbModelParam._m0[9u].y, _2514 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2516, cbModelParam._m0[10u].z, fma(_2515, cbModelParam._m0[10u].y, _2514 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2516, cbModelParam._m0[11u].z, fma(_2515, cbModelParam._m0[11u].y, _2514 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_56_80_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _1842 = frontier_phi_56_80_ladder_2;
        _1844 = frontier_phi_56_80_ladder_1;
        _1846 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1762);
        _1842 = _1830.x * cbModelParam._m0[1u].y;
        _1844 = _1830.y * cbModelParam._m0[1u].y;
        _1846 = _1830.z * cbModelParam._m0[1u].y;
    }
    float _1850 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1850 : min(cbModelParam._m0[25u].w, _1850));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1903 = fma(_983, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975)) + cbModelParam._m0[21u].w;
        float _1907 = fma(_983, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975)) + cbModelParam._m0[22u].w;
        float _1911 = fma(_983, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975)) + cbModelParam._m0[23u].w;
        float _1914 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1917 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1920 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _2204;
        if (_1914 > 0.0)
        {
            _2204 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2204 = frontier_phi_68_64_ladder;
        }
        float _2533;
        if (_1917 > 0.0)
        {
            _2533 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2533 = frontier_phi_82_75_ladder;
        }
        float _2723;
        if (_1920 > 0.0)
        {
            _2723 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2723 = frontier_phi_100_93_ladder;
        }
        float _2725 = isnan(_2533) ? _2204 : (isnan(_2204) ? _2533 : min(_2204, _2533));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1914) + _1903;
        float _2731 = (_2726 * _1917) + _1907;
        float _2732 = (_2726 * _1920) + _1911;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1851);
            frontier_phi_65_100_ladder = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2974.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2974.z * cbModelParam._m0[1u].z;
        }
        _1939 = frontier_phi_65_100_ladder_1;
        _1941 = frontier_phi_65_100_ladder;
        _1943 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1851);
        _1939 = _1923.x * cbModelParam._m0[1u].z;
        _1941 = _1923.y * cbModelParam._m0[1u].z;
        _1943 = _1923.z * cbModelParam._m0[1u].z;
    }
    float _1955 = ((((1.0 - _943) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_943 * _930)) * _914;
    float _1956 = _1955 * ((cbModelParam._m0[1u].w * (_1939 - _1842)) + _1842);
    float _1957 = _1955 * ((cbModelParam._m0[1u].w * (_1941 - _1844)) + _1844);
    float _1958 = _1955 * ((cbModelParam._m0[1u].w * (_1943 - _1846)) + _1846);
    float _1961 = fma(_1958, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1958, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1958, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, _1956 * cbSceneParam._m0[91u].x));
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_888 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1985 = _914 + (-1.0);
    float _1988 = (cbLight._m0[_1980].x * _1985) + 1.0;
    float _1989 = (cbLight._m0[_1980].y * _1985) + 1.0;
    uint _1990 = _1979 + 5u;
    float _1996 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2000 = _1979 + 4u;
    float _2006 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2010 = _1979 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_801, _802, _803));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_801, _802, _803));
    float _4022 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4033 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1990].x * _1996) * _2031) + ((cbLight._m0[_2000].x * _2006) * _2029);
    float _2039 = ((_1996 * cbLight._m0[_1990].y) * _2031) + ((_2006 * cbLight._m0[_2000].y) * _2029);
    float _2040 = ((_1996 * cbLight._m0[_1990].z) * _2031) + ((_2006 * cbLight._m0[_2000].z) * _2029);
    uint _2042 = _1979 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _804) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1979].x + _828;
    float _2058 = cbLight._m0[_1979].y + _829;
    float _2059 = cbLight._m0[_1979].z + _830;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_1979].xyz));
    float _4044 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2071 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2072 = dot(vec3(_801, _802, _803), vec3(_2064, _2065, _2066));
    float _4066 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2064, _2065, _2066));
    float _4077 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2096 = 1.0 - _2056;
    float _2107 = (0.5 / (((_2071 * ((_2070 * _2096) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2096) + _2056) * _2070))) * _2070;
    float _4088 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2120 = _1979 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _804) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_2010].x + _828;
    float _2134 = cbLight._m0[_2010].y + _829;
    float _2135 = cbLight._m0[_2010].z + _830;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2010].xyz));
    float _4099 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2147 = dot(vec3(_801, _802, _803), vec3(_2140, _2141, _2142));
    float _4110 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2140, _2141, _2142));
    float _4121 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2132;
    float _2179 = (0.5 / (((_2071 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2169) + _2132) * _2146))) * _2146;
    float _4132 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2191 = (((_2168 * cbLight._m0[_2120].x) * _2181) * _1996) + (((_2095 * cbLight._m0[_2042].x) * _2109) * _2006);
    float _2192 = (((_2168 * cbLight._m0[_2120].y) * _2181) * _1996) + (((_2095 * cbLight._m0[_2042].y) * _2109) * _2006);
    float _2193 = (((_2168 * cbLight._m0[_2120].z) * _2181) * _1996) + (((_2095 * cbLight._m0[_2042].z) * _2109) * _2006);
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1977.y == 0u)
    {
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2248;
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2248;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2248;
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.x;
        uint _2275 = uint((float(_2263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _850) / _2264))) + floor(float(uint(cbSceneParam._m0[85u].x * _849) / _2264)));
        float _2285 = (log2(_2251 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2286 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        uint _2289 = uint(isnan(14.0) ? _2286 : (isnan(_2286) ? 14.0 : min(_2286, 14.0)));
        uvec4 _2294 = texelFetch(g_lightClusterGridBuffer, int(((_2289 << 2u) + (_2275 << 6u)) >> 2u));
        uint _2295 = _2294.x;
        uint _2296 = _2263.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2296 >> 4u) & 15u)) + 4294967295u) & _2295) == 0u) || ((_2296 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2586)
                {
                    frontier_phi_95_pred = _2571;
                    frontier_phi_95_pred_1 = _2570;
                    frontier_phi_95_pred_2 = _2572;
                    frontier_phi_95_pred_3 = _2575;
                    frontier_phi_95_pred_4 = _2574;
                    frontier_phi_95_pred_5 = _2573;
                }
                else
                {
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    uint _2772;
                    _2766 = _2570;
                    _2767 = _2571;
                    _2768 = _2572;
                    _2769 = _2573;
                    _2770 = _2574;
                    _2771 = _2575;
                    _2772 = _2585;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    for (;;)
                    {
                        uint _2776 = uint(findLSB(_2772)) + (_2576 << 5u);
                        uint _2773 = (_2772 + 4294967295u) & _2772;
                        uint _2778 = _2776 * 48u;
                        vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 3u)).x));
                        uint _2798 = (_2776 * 48u) + 4u;
                        vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2817 = (_2776 * 48u) + 8u;
                        vec3 _2828 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x));
                        float _2832 = _2792.x - _2249;
                        float _2833 = _2792.y - _2250;
                        float _2834 = _2792.z - _2251;
                        float _2835 = dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834));
                        float _2838 = inversesqrt(_2835);
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2842 = dot(vec3(_869, _872, _875), vec3(_2839, _2840, _2841));
                        float _2847 = 1.0 - (_2835 * _2792.w);
                        float _4153 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2849 = sqrt(_2835) * _2811.w;
                        float _2852 = 1.39999997615814208984375 / (_2849 + 1.39999997615814208984375);
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2842) + _2853;
                        float _2859 = _2849 * _2849;
                        float _2863 = ((isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))) * _2848) / ((_2859 * 0.699999988079071044921875) + 1.0);
                        float _2867 = (-0.0) - _2249;
                        float _2868 = (-0.0) - _2250;
                        float _2869 = (-0.0) - _2251;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2884 = exp2(log2(1.0 / ((_2859 * 3.5) + 5.0)) * 0.25);
                        float _2885 = 1.0 - _930;
                        float _2892 = sqrt(1.0 - ((1.0 - (_2885 * _2885)) * (1.0 - (_2884 * _2884))));
                        float _2893 = _2892 * _2892;
                        float _2894 = _2893 * _2893;
                        float _2895 = _2874 + _2839;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2905 = dot(vec3(_869, _872, _875), vec3(_2874, _2875, _2876));
                        float _4169 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2908 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2909 = dot(vec3(_869, _872, _875), vec3(_2901 * _2895, _2901 * _2896, _2901 * _2897));
                        float _4180 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2916 = ((_2912 * _2912) * (_2894 + (-1.0))) + 1.0;
                        float _2917 = _2852 * _2893;
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2842) + _2918;
                        float _4191 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2923 = 1.0 - _2893;
                        float _2933 = (0.5 / (((_2922 * ((_2908 * _2923) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2922 * _2923) + _2893) * _2908))) * _2922;
                        float _4202 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2944 = (((_2894 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_2916 * _2916) * ((_2859 * 2.1991131305694580078125) + 3.141590118408203125))) * _2848;
                        _2670 = (_2863 * _2811.x) + _2769;
                        _2671 = (_2863 * _2811.y) + _2770;
                        _2672 = (_2863 * _2811.z) + _2771;
                        _2667 = (_2944 * _2828.x) + _2766;
                        _2668 = (_2944 * _2828.y) + _2767;
                        _2669 = (_2944 * _2828.z) + _2768;
                        if (_2773 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2766 = _2667;
                            _2767 = _2668;
                            _2768 = _2669;
                            _2769 = _2670;
                            _2770 = _2671;
                            _2771 = _2672;
                            _2772 = _2773;
                        }
                    }
                    frontier_phi_95_pred = _2668;
                    frontier_phi_95_pred_1 = _2667;
                    frontier_phi_95_pred_2 = _2669;
                    frontier_phi_95_pred_3 = _2672;
                    frontier_phi_95_pred_4 = _2671;
                    frontier_phi_95_pred_5 = _2670;
                }
                _2389 = frontier_phi_95_pred;
                _2387 = frontier_phi_95_pred_1;
                _2391 = frontier_phi_95_pred_2;
                _2397 = frontier_phi_95_pred_3;
                _2395 = frontier_phi_95_pred_4;
                _2393 = frontier_phi_95_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2387;
                    _2571 = _2389;
                    _2572 = _2391;
                    _2573 = _2393;
                    _2574 = _2395;
                    _2575 = _2397;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2403) & _2295) == 0u)
        {
            _2538 = _2386;
            _2540 = _2388;
            _2542 = _2390;
            _2544 = _2392;
            _2546 = _2394;
            _2548 = _2396;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
            float _2564 = _2563 * _2249;
            float _2565 = _2563 * _2250;
            float _2566 = _2563 * _2251;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2749 = _2386;
                float _2750 = _2388;
                float _2751 = _2390;
                float _2752 = _2392;
                float _2753 = _2394;
                float _2754 = _2396;
                uint _2755 = _2403;
                uint _2764;
                bool _2765;
                for (;;)
                {
                    _2764 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                    _2765 = _2764 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2765)
                    {
                        frontier_phi_109_pred = _2750;
                        frontier_phi_109_pred_1 = _2749;
                        frontier_phi_109_pred_2 = _2754;
                        frontier_phi_109_pred_3 = _2753;
                        frontier_phi_109_pred_4 = _2752;
                        frontier_phi_109_pred_5 = _2751;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _2992 = _2749;
                        float _2993 = _2750;
                        float _2994 = _2751;
                        float _2995 = _2752;
                        float _2996 = _2753;
                        float _2997 = _2754;
                        uint _2998 = _2764;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3082;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _3009 = ((_2755 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3009 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3009 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_3009 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_2251, _3116.z, fma(_2250, _3116.y, _3116.x * _2249)) + _3116.w;
                            _3129 = !((fma(_2251, _3097.z, fma(_2250, _3097.y, _3097.x * _2249)) + _3097.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3129)
                            {
                                float _3156 = _3024.x - _2249;
                                float _3157 = _3024.y - _2250;
                                float _3158 = _3024.z - _2251;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3025 * _3025));
                                float _4213 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3174 = sqrt(_3159) * _3040.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3180 = ((1.0 - _3177) * dot(vec3(_3163, _3164, _3165), vec3(_869, _872, _875))) + _3177;
                                float _3183 = _3174 * _3174;
                                float _3187 = (fma(_2251, _3067.z, fma(_2250, _3067.y, _3067.x * _2249)) + _3067.w) / _3128;
                                float _3188 = (fma(_2251, _3082.z, fma(_2250, _3082.y, _3082.x * _2249)) + _3082.w) / _3128;
                                float _3192 = 1.0 - dot(vec2(_3187, _3188), vec2(_3187, _3188));
                                float _4229 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3194 = _3193 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3170) / ((_3183 * 0.699999988079071044921875) + 1.0));
                                float _3206 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                                float _3207 = 1.0 - _930;
                                float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                                float _3215 = _3214 * _3214;
                                float _3216 = _3215 * _3215;
                                float _3217 = _3163 - _2564;
                                float _3218 = _3164 - _2565;
                                float _3219 = _3165 - _2566;
                                float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                                float _3227 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4240 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3231 = dot(vec3(_869, _872, _875), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                                float _4251 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                                float _3239 = _3176 * _3215;
                                float _3240 = _3239 * _3239;
                                float _3246 = ((1.0 - _3240) * dot(vec3(_869, _872, _875), vec3(_3163, _3164, _3165))) + _3240;
                                float _4262 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3248 = 1.0 - _3215;
                                float _3258 = (0.5 / (((_3247 * ((_3230 * _3248) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3215) * _3230))) * _3247;
                                float _4273 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3268 = (_3193 * _3170) * (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_3238 * _3238) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3194 * _3040.y;
                                frontier_phi_115_pred_1 = _3194 * _3040.x;
                                frontier_phi_115_pred_2 = _3268 * _3052.z;
                                frontier_phi_115_pred_3 = _3268 * _3052.y;
                                frontier_phi_115_pred_4 = _3268 * _3052.x;
                                frontier_phi_115_pred_5 = _3194 * _3040.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_115_pred;
                            _3275 = frontier_phi_115_pred_1;
                            _3274 = frontier_phi_115_pred_2;
                            _3273 = frontier_phi_115_pred_3;
                            _3272 = frontier_phi_115_pred_4;
                            _3277 = frontier_phi_115_pred_5;
                            _2982 = _3275 + _2995;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            _2979 = _3272 + _2992;
                            _2980 = _3273 + _2993;
                            _2981 = _3274 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2980;
                        frontier_phi_109_pred_1 = _2979;
                        frontier_phi_109_pred_2 = _2984;
                        frontier_phi_109_pred_3 = _2983;
                        frontier_phi_109_pred_4 = _2982;
                        frontier_phi_109_pred_5 = _2981;
                    }
                    _2541 = frontier_phi_109_pred;
                    _2539 = frontier_phi_109_pred_1;
                    _2549 = frontier_phi_109_pred_2;
                    _2547 = frontier_phi_109_pred_3;
                    _2545 = frontier_phi_109_pred_4;
                    _2543 = frontier_phi_109_pred_5;
                    uint _2756 = _2755 + 1u;
                    if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2749 = _2539;
                        _2750 = _2541;
                        _2751 = _2543;
                        _2752 = _2545;
                        _2753 = _2547;
                        _2754 = _2549;
                        _2755 = _2756;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2539;
                frontier_phi_84_85_ladder_1 = _2543;
                frontier_phi_84_85_ladder_2 = _2549;
                frontier_phi_84_85_ladder_3 = _2547;
                frontier_phi_84_85_ladder_4 = _2545;
                frontier_phi_84_85_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_84_85_ladder = _2386;
                frontier_phi_84_85_ladder_1 = _2390;
                frontier_phi_84_85_ladder_2 = _2396;
                frontier_phi_84_85_ladder_3 = _2394;
                frontier_phi_84_85_ladder_4 = _2392;
                frontier_phi_84_85_ladder_5 = _2388;
            }
            _2538 = frontier_phi_84_85_ladder;
            _2540 = frontier_phi_84_85_ladder_5;
            _2542 = frontier_phi_84_85_ladder_1;
            _2544 = frontier_phi_84_85_ladder_4;
            _2546 = frontier_phi_84_85_ladder_3;
            _2548 = frontier_phi_84_85_ladder_2;
        }
        float _2553 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2308 = (_2553 * _2544) + _2038;
        _2310 = (_2553 * _2546) + _2039;
        _2312 = (_2553 * _2548) + _2040;
        _2314 = ((_2538 * 0.039999999105930328369140625) * _2553) + _2191;
        _2316 = ((_2540 * 0.039999999105930328369140625) * _2553) + _2192;
        _2318 = ((_2542 * 0.039999999105930328369140625) * _2553) + _2193;
    }
    else
    {
        _2308 = _2038;
        _2310 = _2039;
        _2312 = _2040;
        _2314 = _2191;
        _2316 = _2192;
        _2318 = _2193;
    }
    float _4289 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4300 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4311 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2335 = ((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2308 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _914))) + ((_2314 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    float _2336 = ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2310 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _914))) + ((_2316 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2312 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _914))) + ((_2318 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1751)) * cbPerFrame._m0[3u].x);
    float _2338 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    uint _2341 = _888 + 6u;
    float _2349 = _849 / cbSceneParam._m0[86u].x;
    float _2350 = _850 / cbSceneParam._m0[86u].y;
    vec4 _2364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2366 = _2364.x;
    float _2367 = _2364.y;
    float _2368 = _2364.z;
    float _2369 = _2364.w;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2412 = _2411 / _823;
        float _2423 = _2412 * _271;
        float _2424 = _272 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _273;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2680;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2680 = ((((_2429 > 0.0) ? exp2(_2445 * _2429) : (2.0 - exp2(_2447 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2601 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2680 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2445 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2445 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2447 * _2610) - exp2(_2447 * _2611)) * _2599))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, 1.0), 0.0);
        float _2691 = exp2((_2680 * (-1.44269502162933349609375)) * (1.0 - _2682.w));
        float _2692 = log2(_2691);
        float _2708 = log2(_2369);
        _2449 = (exp2(_2708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].x)) * _2682.x) / cbSceneParam._m0[78u].x)) + _2366;
        _2451 = (exp2(_2708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].y)) * _2682.y) / cbSceneParam._m0[78u].y)) + _2367;
        _2453 = (exp2(_2708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].z)) * _2682.z) / cbSceneParam._m0[78u].z)) + _2368;
        _2455 = _2691 * _2369;
    }
    else
    {
        _2449 = _2366;
        _2451 = _2367;
        _2453 = _2368;
        _2455 = _2369;
    }
    bool _2718;
    vec4 _2465;
    vec4 _2487;
    float _2489;
    float _2493;
    float _2494;
    float _2495;
    float _2496;
    bool _2506;
    for (;;)
    {
        _2465 = cbMatDynParam._m0[0u];
        float _2467 = roundEven(_2465.y);
        bool _2468 = _2467 == 3.0;
        float _2469 = log2(_2455);
        float _2476 = exp2(_2469 * cbSceneParam._m0[78u].x) * _2338;
        float _2477 = exp2(_2469 * cbSceneParam._m0[78u].y) * _2339;
        float _2478 = exp2(_2469 * cbSceneParam._m0[78u].z) * _2340;
        float _2485 = _837 + (-0.5);
        _2487 = cbMtdParam._m0[1u];
        _2489 = _2487.y * _2485;
        float _2492 = (_2467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2493 = _2492 * (_2468 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = _2492 * (_2468 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
        _2495 = _2492 * (_2468 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
        _2496 = _2485 * 0.999000012874603271484375;
        _2506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2506)
        {
            if ((cbInstanceData._m0[_888 + 7u].x + _2496) < 0.5)
            {
                _2718 = true;
                break;
            }
        }
        uint _2634 = _890 + uint(_2465.w);
        if ((cbInstanceData._m0[_2634].w < 1.0) && ((cbInstanceData._m0[_2634].w + _2496) < 0.5))
        {
            _2718 = true;
            break;
        }
        if ((_2489 + 1.0) < _2487.x)
        {
            _2718 = true;
            break;
        }
        _2718 = false;
        break;
    }
    float _2949;
    if (_2718)
    {
        discard_state = true;
        _2949 = 0.0;
    }
    else
    {
        _2949 = cbInstanceData._m0[_2341].w;
    }
    SV_Target.x = _2493;
    SV_Target.y = _2494;
    SV_Target.z = _2495;
    SV_Target.w = _2949;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2341].w;
    discard_exit();
}


