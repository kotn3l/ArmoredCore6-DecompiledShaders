#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _439;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _276 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _279 = _276.x;
    vec4 _297 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _279) + cbMtdParam._m0[12u].x) * _297.x;
    float _316 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _279) + cbMtdParam._m0[12u].y) * _297.y;
    float _318 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _279) + cbMtdParam._m0[12u].z) * _297.z;
    vec4 _352 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _367 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _374 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _386 = cbMtdParam._m0[22u].z + _261;
    float _387 = cbMtdParam._m0[22u].w + _262;
    float _388 = cbMtdParam._m0[23u].x + _263;
    float _402 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_367 * _190, _367 * _191, _367 * _192));
    float _403 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_374 * _204, _374 * _205, _374 * _206));
    float _404 = (-0.0) - dot(vec3(_386, _387, _388), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _409 = _408 * _404;
    float _414 = ((cbMtdParam._m0[19u].y * _402) * _408) + (((_352.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _415 = ((cbMtdParam._m0[19u].z * _403) * _408) + (((_352.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _418 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _419 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _437;
    float _440;
    float _442;
    if (_414 > 0.0)
    {
        float _423 = (1.0 - _418) / _414;
        _437 = _423;
        _440 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_423 * _409)) * 0.16666667163372039794921875;
        _442 = (fract((_423 * _415) + _419) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_414 < 0.0)
        {
            float _438 = ((-0.0) - _418) / _414;
            frontier_phi_3_2_ladder = (fract((_438 * _415) + _419) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _438;
            frontier_phi_3_2_ladder_2 = (fract(_438 * _409) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _439;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _437 = frontier_phi_3_2_ladder_1;
        _440 = frontier_phi_3_2_ladder_2;
        _442 = frontier_phi_3_2_ladder;
    }
    float _468;
    float _470;
    float _472;
    if (_415 > 0.0)
    {
        float _455 = (1.0 - _419) / _415;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_455 < _437)
        {
            frontier_phi_8_5_ladder = (fract((_455 * _414) + _418) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _455;
            frontier_phi_8_5_ladder_2 = (fract(_455 * _409) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _440;
            frontier_phi_8_5_ladder_1 = _437;
            frontier_phi_8_5_ladder_2 = _442;
        }
        _468 = frontier_phi_8_5_ladder_1;
        _470 = frontier_phi_8_5_ladder;
        _472 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_415 < 0.0)
        {
            float _469 = ((-0.0) - _419) / _415;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_469 < _437)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_469 * _414) + _418) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _469;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_469 * _409) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _440;
                frontier_phi_8_6_ladder_9_ladder_1 = _437;
                frontier_phi_8_6_ladder_9_ladder_2 = _442;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _440;
            frontier_phi_8_6_ladder_1 = _437;
            frontier_phi_8_6_ladder_2 = _442;
        }
        _468 = frontier_phi_8_6_ladder_1;
        _470 = frontier_phi_8_6_ladder;
        _472 = frontier_phi_8_6_ladder_2;
    }
    float _476 = (_409 > 0.0) ? (cbMtdParam._m0[16u].y / _409) : 5000.0;
    float _489;
    float _490;
    if (_476 < _468)
    {
        _489 = ((_418 + cbMtdParam._m0[16u].z) + (_476 * _414)) * 0.16666667163372039794921875;
        _490 = (((_476 * _415) + _419) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _489 = _470;
        _490 = _472;
    }
    vec4 _492 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_489, _490));
    vec4 _508 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _512 = _508.z;
    float _515 = (_508.x * 2.0) + (-1.0);
    float _516 = (_508.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3135 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0))));
    float _525 = fma(_522, _197, fma(_516, _204, _515 * _190));
    float _528 = fma(_522, _198, fma(_516, _205, _515 * _191));
    float _531 = fma(_522, _199, fma(_516, _206, _515 * _192));
    float _535 = inversesqrt(dot(vec3(_525, _528, _531), vec3(_525, _528, _531)));
    float _536 = _535 * _525;
    float _537 = _535 * _528;
    float _538 = _535 * _531;
    float _3146 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _539 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3168 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3179 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _563 = _261 * _562;
    float _564 = _262 * _562;
    float _565 = _263 * _562;
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _593 = fma(_538, cbSceneParam._m0[5u].z, fma(_537, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _536));
    float _596 = fma(_538, cbSceneParam._m0[6u].z, fma(_537, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _536));
    float _599 = fma(_538, cbSceneParam._m0[7u].z, fma(_537, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _536));
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _613 = _612 + 9u;
    uint _614 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3190 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    float _3201 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    vec4 _634 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572));
    float _637 = _634.x * TEXCOORD.z;
    float _638 = dot(vec3(_536, _537, _538), vec3(_563, _564, _565));
    float _641 = _638 * 2.0;
    float _645 = (_641 * _536) - _563;
    float _646 = (_641 * _537) - _564;
    float _647 = (_641 * _538) - _565;
    float _651 = abs(dot(vec3(_563, _564, _565), vec3(_536, _537, _538)));
    float _3223 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _653 = sqrt(_539);
    float _666 = exp2((_653 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_653 * 3.0));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _739 = fma(_706, cbModelParam._m0[26u].z, fma(_702, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _698));
        float _743 = fma(_706, cbModelParam._m0[27u].z, fma(_702, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _698));
        float _747 = fma(_706, cbModelParam._m0[28u].z, fma(_702, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _698));
        float _771 = _698 + _536;
        float _772 = _702 + _537;
        float _773 = _706 + _538;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _739;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _743;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _747;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_739 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_743 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_747 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_536, _537, _538), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3271 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_536, _537, _538), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3304 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_536, _537, _538), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3337 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1014 = _843;
        _1015 = _842;
        _1016 = _854;
        _1017 = _853;
        _1018 = _852;
        _1019 = _864;
        _1020 = _863;
        _1021 = _862;
        _1022 = _877;
        _1023 = _876;
        _1024 = _875;
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _439;
        _1014 = _439;
        _1015 = _439;
        _1016 = _439;
        _1017 = _439;
        _1018 = _439;
        _1019 = _439;
        _1020 = _439;
        _1021 = _439;
        _1022 = _439;
        _1023 = _439;
        _1024 = _439;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1053 = fma(_706, cbModelParam._m0[30u].z, fma(_702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _698));
        float _1057 = fma(_706, cbModelParam._m0[31u].z, fma(_702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _698));
        float _1061 = fma(_706, cbModelParam._m0[32u].z, fma(_702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _698));
        float _1084 = _698 + _536;
        float _1085 = _702 + _537;
        float _1086 = _706 + _538;
        float _1096 = fma(_1086, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084)) - _1053;
        float _1097 = fma(_1086, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084)) - _1057;
        float _1098 = fma(_1086, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084)) - _1061;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1053 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1057 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[35u].z) + ((((((_1061 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_536, _537, _538), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3400 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_536, _537, _538), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3433 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_536, _537, _538), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3466 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _439;
        _1323 = _439;
        _1324 = _439;
        _1325 = _439;
        _1326 = _439;
        _1327 = _439;
        _1328 = _439;
        _1329 = _439;
        _1330 = _439;
        _1331 = _439;
        _1332 = _439;
        _1333 = _439;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1026)) + _1026;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1027)) + _1027;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _645 * 0.5;
    float _1391 = _646 * 0.5;
    float _1392 = _647 * 0.5;
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _539);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1458 : min(cbModelParam._m0[25u].z, _1458));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_706, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_706, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_706, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_647, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _645));
        float _1522 = fma(_647, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _645));
        float _1525 = fma(_647, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _645));
        float _1553;
        if (_1519 > 0.0)
        {
            _1553 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1553 = frontier_phi_26_24_ladder;
        }
        float _1924;
        if (_1522 > 0.0)
        {
            _1924 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1924 = frontier_phi_35_31_ladder;
        }
        float _2246;
        if (_1525 > 0.0)
        {
            _2246 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2246 = frontier_phi_49_42_ladder;
        }
        float _2248 = isnan(_1924) ? _1553 : (isnan(_1553) ? _1924 : min(_1553, _1924));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1519) + _1508;
        float _2254 = (_2249 * _1522) + _1512;
        float _2255 = (_2249 * _1525) + _1516;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2256;
        float _2259 = _2256 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2255 > _2259) || ((_2255 < _2257) || ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 < _2257) || (_2253 > _2259))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_25_49_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_25_49_ladder_2;
        _1543 = frontier_phi_25_49_ladder_1;
        _1545 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_645, _646, _647), _1459);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1549 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _539);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1549 : min(cbModelParam._m0[25u].w, _1549));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1604 = fma(_706, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698)) + cbModelParam._m0[21u].w;
        float _1608 = fma(_706, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698)) + cbModelParam._m0[22u].w;
        float _1612 = fma(_706, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698)) + cbModelParam._m0[23u].w;
        float _1615 = fma(_647, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _645));
        float _1618 = fma(_647, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _645));
        float _1621 = fma(_647, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _645));
        float _1929;
        if (_1615 > 0.0)
        {
            _1929 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1929 = frontier_phi_37_33_ladder;
        }
        float _2272;
        if (_1618 > 0.0)
        {
            _2272 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2272 = frontier_phi_51_44_ladder;
        }
        float _2441;
        if (_1621 > 0.0)
        {
            _2441 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2441 = frontier_phi_65_60_ladder;
        }
        float _2443 = isnan(_2272) ? _1929 : (isnan(_1929) ? _2272 : min(_1929, _2272));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1615) + _1604;
        float _2449 = (_2444 * _1618) + _1608;
        float _2450 = (_2444 * _1621) + _1612;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_34_65_ladder = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2683.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2683.z * cbModelParam._m0[1u].z;
        }
        _1640 = frontier_phi_34_65_ladder_1;
        _1642 = frontier_phi_34_65_ladder;
        _1644 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_645, _646, _647), _1550);
        _1640 = _1624.x * cbModelParam._m0[1u].z;
        _1642 = _1624.y * cbModelParam._m0[1u].z;
        _1644 = _1624.z * cbModelParam._m0[1u].z;
    }
    float _1656 = ((((1.0 - _666) * ((_653 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_666 * _653)) * _637;
    float _1657 = _1656 * ((cbModelParam._m0[1u].w * (_1640 - _1541)) + _1541);
    float _1658 = _1656 * ((cbModelParam._m0[1u].w * (_1642 - _1543)) + _1543);
    float _1659 = _1656 * ((cbModelParam._m0[1u].w * (_1644 - _1545)) + _1545);
    float _1662 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, _1657 * cbSceneParam._m0[91u].x));
    vec4 _1676 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_571, _572));
    float _1678 = _1676.w;
    float _1690 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1678);
    float _1691 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1678);
    float _1692 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1678);
    uvec4 _1696 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1698 = _1696.x * 14u;
    uint _1699 = _1698 + 13u;
    float _1704 = _637 + (-1.0);
    float _1707 = (cbLight._m0[_1699].x * _1704) + 1.0;
    float _1708 = (cbLight._m0[_1699].y * _1704) + 1.0;
    uint _1709 = _1698 + 5u;
    float _1715 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1719 = _1698 + 4u;
    float _1728 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1732 = _1698 | 1u;
    float _1743 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_536, _537, _538));
    float _1746 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_536, _537, _538));
    float _3602 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _3613 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1751 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.3183098733425140380859375;
    float _1753 = (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.3183098733425140380859375;
    float _1760 = ((cbLight._m0[_1709].x * _1715) * _1753) + (((cbLight._m0[_1719].x * _1690) * _1728) * _1751);
    float _1761 = ((_1715 * cbLight._m0[_1709].y) * _1753) + (((cbLight._m0[_1719].y * _1691) * _1728) * _1751);
    float _1762 = ((_1715 * cbLight._m0[_1709].z) * _1753) + (((cbLight._m0[_1719].z * _1692) * _1728) * _1751);
    uint _1764 = _1698 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1698].w)) * _539) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1698].x + _563;
    float _1780 = cbLight._m0[_1698].y + _564;
    float _1781 = cbLight._m0[_1698].z + _565;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_536, _537, _538), vec3(cbLight._m0[_1698].xyz));
    float _3624 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _1793 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _1794 = dot(vec3(_536, _537, _538), vec3(_1786, _1787, _1788));
    float _3646 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1786, _1787, _1788));
    float _3657 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1793 * ((_1792 * _1818) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1818) + _1778) * _1792))) * _1792;
    float _3668 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1845 = _1698 + 9u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _539) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1732].x + _563;
    float _1859 = cbLight._m0[_1732].y + _564;
    float _1860 = cbLight._m0[_1732].z + _565;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_536, _537, _538), vec3(cbLight._m0[_1732].xyz));
    float _3679 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _1872 = dot(vec3(_536, _537, _538), vec3(_1865, _1866, _1867));
    float _3690 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1865, _1866, _1867));
    float _3701 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1857 * _1857;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1857;
    float _1904 = (0.5 / (((_1793 * ((_1871 * _1894) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1894) + _1857) * _1871))) * _1871;
    float _3712 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    float _1916 = (((_1893 * cbLight._m0[_1845].x) * _1906) * _1715) + ((((cbLight._m0[_1764].x * _1690) * _1817) * _1831) * _1728);
    float _1917 = (((_1893 * cbLight._m0[_1845].y) * _1906) * _1715) + ((((cbLight._m0[_1764].y * _1691) * _1817) * _1831) * _1728);
    float _1918 = (((_1893 * cbLight._m0[_1845].z) * _1906) * _1715) + ((((cbLight._m0[_1764].z * _1692) * _1817) * _1831) * _1728);
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1696.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2133;
        float _2135;
        float _2137;
        float _2139;
        float _2141;
        float _2143;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
        }
        else
        {
            float _2134;
            float _2136;
            float _2138;
            float _2140;
            float _2142;
            float _2144;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            uint _2315 = 0u;
            uint _2324;
            bool _2325;
            for (;;)
            {
                _2324 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2315 << 2u)) >> 2u)).x;
                _2325 = _2324 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2325)
                {
                    frontier_phi_62_pred = _2310;
                    frontier_phi_62_pred_1 = _2309;
                    frontier_phi_62_pred_2 = _2311;
                    frontier_phi_62_pred_3 = _2314;
                    frontier_phi_62_pred_4 = _2313;
                    frontier_phi_62_pred_5 = _2312;
                }
                else
                {
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    uint _2490;
                    _2484 = _2309;
                    _2485 = _2310;
                    _2486 = _2311;
                    _2487 = _2312;
                    _2488 = _2313;
                    _2489 = _2314;
                    _2490 = _2324;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    for (;;)
                    {
                        uint _2494 = uint(findLSB(_2490)) + (_2315 << 5u);
                        uint _2491 = (_2490 + 4294967295u) & _2490;
                        uint _2496 = _2494 * 48u;
                        vec4 _2510 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2496)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2496 + 3u)).x));
                        uint _2516 = (_2494 * 48u) + 4u;
                        vec4 _2529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2516)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 3u)).x));
                        uint _2535 = (_2494 * 48u) + 8u;
                        vec3 _2546 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2535)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 2u)).x));
                        float _2550 = _2510.x - _1974;
                        float _2551 = _2510.y - _1975;
                        float _2552 = _2510.z - _1976;
                        float _2553 = dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552));
                        float _2556 = inversesqrt(_2553);
                        float _2557 = _2556 * _2550;
                        float _2558 = _2556 * _2551;
                        float _2559 = _2556 * _2552;
                        float _2560 = dot(vec3(_593, _596, _599), vec3(_2557, _2558, _2559));
                        float _2565 = 1.0 - (_2553 * _2510.w);
                        float _3733 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2566 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                        float _2567 = sqrt(_2553) * _2529.w;
                        float _2570 = 1.39999997615814208984375 / (_2567 + 1.39999997615814208984375);
                        float _2571 = _2570 * _2570;
                        float _2574 = ((1.0 - _2571) * _2560) + _2571;
                        float _2577 = _2567 * _2567;
                        float _2581 = ((isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))) * _2566) / ((_2577 * 0.699999988079071044921875) + 1.0);
                        float _2585 = (-0.0) - _1974;
                        float _2586 = (-0.0) - _1975;
                        float _2587 = (-0.0) - _1976;
                        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
                        float _2592 = _2591 * _2585;
                        float _2593 = _2591 * _2586;
                        float _2594 = _2591 * _2587;
                        float _2602 = exp2(log2(1.0 / ((_2577 * 3.5) + 5.0)) * 0.25);
                        float _2603 = 1.0 - _653;
                        float _2610 = sqrt(1.0 - ((1.0 - (_2603 * _2603)) * (1.0 - (_2602 * _2602))));
                        float _2611 = _2610 * _2610;
                        float _2612 = _2611 * _2611;
                        float _2613 = _2592 + _2557;
                        float _2614 = _2593 + _2558;
                        float _2615 = _2594 + _2559;
                        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
                        float _2623 = dot(vec3(_593, _596, _599), vec3(_2592, _2593, _2594));
                        float _3749 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                        float _2626 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                        float _2627 = dot(vec3(_593, _596, _599), vec3(_2619 * _2613, _2619 * _2614, _2619 * _2615));
                        float _3760 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2630 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
                        float _2634 = ((_2630 * _2630) * (_2612 + (-1.0))) + 1.0;
                        float _2635 = _2570 * _2611;
                        float _2636 = _2635 * _2635;
                        float _2639 = ((1.0 - _2636) * _2560) + _2636;
                        float _3771 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                        float _2641 = 1.0 - _2611;
                        float _2651 = (0.5 / (((_2640 * ((_2626 * _2641) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2640 * _2641) + _2611) * _2626))) * _2640;
                        float _3782 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2662 = (((_2612 * 3.1415927410125732421875) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) / ((_2634 * _2634) * ((_2577 * 2.1991131305694580078125) + 3.141590118408203125))) * _2566;
                        _2393 = (_2581 * _2529.x) + _2487;
                        _2394 = (_2581 * _2529.y) + _2488;
                        _2395 = (_2581 * _2529.z) + _2489;
                        _2390 = (_2662 * _2546.x) + _2484;
                        _2391 = (_2662 * _2546.y) + _2485;
                        _2392 = (_2662 * _2546.z) + _2486;
                        if (_2491 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2484 = _2390;
                            _2485 = _2391;
                            _2486 = _2392;
                            _2487 = _2393;
                            _2488 = _2394;
                            _2489 = _2395;
                            _2490 = _2491;
                        }
                    }
                    frontier_phi_62_pred = _2391;
                    frontier_phi_62_pred_1 = _2390;
                    frontier_phi_62_pred_2 = _2392;
                    frontier_phi_62_pred_3 = _2395;
                    frontier_phi_62_pred_4 = _2394;
                    frontier_phi_62_pred_5 = _2393;
                }
                _2136 = frontier_phi_62_pred;
                _2134 = frontier_phi_62_pred_1;
                _2138 = frontier_phi_62_pred_2;
                _2144 = frontier_phi_62_pred_3;
                _2142 = frontier_phi_62_pred_4;
                _2140 = frontier_phi_62_pred_5;
                uint _2316 = _2315 + 1u;
                if (_2316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2309 = _2134;
                    _2310 = _2136;
                    _2311 = _2138;
                    _2312 = _2140;
                    _2313 = _2142;
                    _2314 = _2144;
                    _2315 = _2316;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
        }
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.z;
        uint _2150 = (_2148 >> 8u) & 15u;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        if (((4294967295u << _2150) & _2020) == 0u)
        {
            _2277 = _2133;
            _2279 = _2135;
            _2281 = _2137;
            _2283 = _2139;
            _2285 = _2141;
            _2287 = _2143;
        }
        else
        {
            float _2302 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _2303 = _2302 * _1974;
            float _2304 = _2302 * _1975;
            float _2305 = _2302 * _1976;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2150 < ((_2148 >> 12u) & 15u))
            {
                float _2278;
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2467 = _2133;
                float _2468 = _2135;
                float _2469 = _2137;
                float _2470 = _2139;
                float _2471 = _2141;
                float _2472 = _2143;
                uint _2473 = _2150;
                uint _2482;
                bool _2483;
                for (;;)
                {
                    _2482 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2473 << 2u)) >> 2u)).x;
                    _2483 = _2482 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2483)
                    {
                        frontier_phi_71_pred = _2468;
                        frontier_phi_71_pred_1 = _2467;
                        frontier_phi_71_pred_2 = _2472;
                        frontier_phi_71_pred_3 = _2471;
                        frontier_phi_71_pred_4 = _2470;
                        frontier_phi_71_pred_5 = _2469;
                    }
                    else
                    {
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2701 = _2467;
                        float _2702 = _2468;
                        float _2703 = _2469;
                        float _2704 = _2470;
                        float _2705 = _2471;
                        float _2706 = _2472;
                        uint _2707 = _2482;
                        uint _2708;
                        vec4 _2733;
                        float _2734;
                        vec4 _2749;
                        vec3 _2761;
                        vec4 _2776;
                        vec4 _2791;
                        float _2837;
                        bool _2838;
                        for (;;)
                        {
                            uint _2718 = ((_2473 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2707));
                            _2708 = (_2707 + 4294967295u) & _2707;
                            uint _2720 = _2718 * 40u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            _2734 = _2733.w;
                            uint _2736 = (_2718 * 40u) + 4u;
                            _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2751 = (_2718 * 40u) + 8u;
                            _2761 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x));
                            uint _2763 = (_2718 * 40u) + 16u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2778 = (_2718 * 40u) + 20u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            uint _2793 = (_2718 * 40u) + 24u;
                            vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            uint _2812 = (_2718 * 40u) + 28u;
                            vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            _2837 = fma(_1976, _2825.z, fma(_1975, _2825.y, _2825.x * _1974)) + _2825.w;
                            _2838 = !((fma(_1976, _2806.z, fma(_1975, _2806.y, _2806.x * _1974)) + _2806.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2838)
                            {
                                float _2865 = _2733.x - _1974;
                                float _2866 = _2733.y - _1975;
                                float _2867 = _2733.z - _1976;
                                float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                                float _2871 = inversesqrt(_2868);
                                float _2872 = _2871 * _2865;
                                float _2873 = _2871 * _2866;
                                float _2874 = _2871 * _2867;
                                float _2878 = 1.0 - (_2868 / (_2734 * _2734));
                                float _3793 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2879 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                                float _2883 = sqrt(_2868) * _2749.w;
                                float _2885 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                                float _2886 = _2885 * _2885;
                                float _2889 = ((1.0 - _2886) * dot(vec3(_2872, _2873, _2874), vec3(_593, _596, _599))) + _2886;
                                float _2892 = _2883 * _2883;
                                float _2896 = (fma(_1976, _2776.z, fma(_1975, _2776.y, _2776.x * _1974)) + _2776.w) / _2837;
                                float _2897 = (fma(_1976, _2791.z, fma(_1975, _2791.y, _2791.x * _1974)) + _2791.w) / _2837;
                                float _2901 = 1.0 - dot(vec2(_2896, _2897), vec2(_2896, _2897));
                                float _3809 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                                float _2903 = _2902 * (((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2879) / ((_2892 * 0.699999988079071044921875) + 1.0));
                                float _2915 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                                float _2916 = 1.0 - _653;
                                float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                                float _2924 = _2923 * _2923;
                                float _2925 = _2924 * _2924;
                                float _2926 = _2872 - _2303;
                                float _2927 = _2873 - _2304;
                                float _2928 = _2874 - _2305;
                                float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                                float _2936 = dot(vec3(_593, _596, _599), vec3((-0.0) - _2303, (-0.0) - _2304, (-0.0) - _2305));
                                float _3820 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2939 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
                                float _2940 = dot(vec3(_593, _596, _599), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                                float _3831 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2943 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                                float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                                float _2948 = _2885 * _2924;
                                float _2949 = _2948 * _2948;
                                float _2955 = ((1.0 - _2949) * dot(vec3(_593, _596, _599), vec3(_2872, _2873, _2874))) + _2949;
                                float _3842 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                                float _2957 = 1.0 - _2924;
                                float _2967 = (0.5 / (((_2956 * ((_2939 * _2957) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2924) * _2939))) * _2956;
                                float _3853 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2977 = (_2902 * _2879) * (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) / ((_2947 * _2947) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2977 * _2761.y;
                                frontier_phi_77_pred_1 = _2977 * _2761.x;
                                frontier_phi_77_pred_2 = _2903 * _2749.z;
                                frontier_phi_77_pred_3 = _2903 * _2749.y;
                                frontier_phi_77_pred_4 = _2903 * _2749.x;
                                frontier_phi_77_pred_5 = _2977 * _2761.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2982 = frontier_phi_77_pred;
                            _2981 = frontier_phi_77_pred_1;
                            _2986 = frontier_phi_77_pred_2;
                            _2985 = frontier_phi_77_pred_3;
                            _2984 = frontier_phi_77_pred_4;
                            _2983 = frontier_phi_77_pred_5;
                            _2691 = _2984 + _2704;
                            _2692 = _2985 + _2705;
                            _2693 = _2986 + _2706;
                            _2688 = _2981 + _2701;
                            _2689 = _2982 + _2702;
                            _2690 = _2983 + _2703;
                            if (_2708 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2708;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2689;
                        frontier_phi_71_pred_1 = _2688;
                        frontier_phi_71_pred_2 = _2693;
                        frontier_phi_71_pred_3 = _2692;
                        frontier_phi_71_pred_4 = _2691;
                        frontier_phi_71_pred_5 = _2690;
                    }
                    _2280 = frontier_phi_71_pred;
                    _2278 = frontier_phi_71_pred_1;
                    _2288 = frontier_phi_71_pred_2;
                    _2286 = frontier_phi_71_pred_3;
                    _2284 = frontier_phi_71_pred_4;
                    _2282 = frontier_phi_71_pred_5;
                    uint _2474 = _2473 + 1u;
                    if (_2474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2467 = _2278;
                        _2468 = _2280;
                        _2469 = _2282;
                        _2470 = _2284;
                        _2471 = _2286;
                        _2472 = _2288;
                        _2473 = _2474;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2288;
                frontier_phi_53_54_ladder_1 = _2284;
                frontier_phi_53_54_ladder_2 = _2282;
                frontier_phi_53_54_ladder_3 = _2280;
                frontier_phi_53_54_ladder_4 = _2278;
                frontier_phi_53_54_ladder_5 = _2286;
            }
            else
            {
                frontier_phi_53_54_ladder = _2143;
                frontier_phi_53_54_ladder_1 = _2139;
                frontier_phi_53_54_ladder_2 = _2137;
                frontier_phi_53_54_ladder_3 = _2135;
                frontier_phi_53_54_ladder_4 = _2133;
                frontier_phi_53_54_ladder_5 = _2141;
            }
            _2277 = frontier_phi_53_54_ladder_4;
            _2279 = frontier_phi_53_54_ladder_3;
            _2281 = frontier_phi_53_54_ladder_2;
            _2283 = frontier_phi_53_54_ladder_1;
            _2285 = frontier_phi_53_54_ladder_5;
            _2287 = frontier_phi_53_54_ladder;
        }
        float _2292 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
        _2033 = (_2292 * _2283) + _1760;
        _2035 = (_2292 * _2285) + _1761;
        _2037 = (_2292 * _2287) + _1762;
        _2039 = ((_2277 * 0.039999999105930328369140625) * _2292) + _1916;
        _2041 = ((_2279 * 0.039999999105930328369140625) * _2292) + _1917;
        _2043 = ((_2281 * 0.039999999105930328369140625) * _2292) + _1918;
    }
    else
    {
        _2033 = _1760;
        _2035 = _1761;
        _2037 = _1762;
        _2039 = _1916;
        _2041 = _1917;
        _2043 = _1918;
    }
    uint _2049 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _3869 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3880 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3891 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _2080 = (((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_2033 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _637))) + ((_2039 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[13u].x * _279) * _492.x) * cbInstanceData._m0[_2049].x);
    float _2082 = ((((cbMtdParam._m0[13u].y * _279) * _492.y) * cbInstanceData._m0[_2049].y) + ((_2041 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_2035 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _637)));
    float _2084 = ((((cbMtdParam._m0[13u].z * _279) * _492.z) * cbInstanceData._m0[_2049].z) + ((_2043 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_2037 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _637)));
    uint _2088 = _612 + 6u;
    float _2096 = _571 / cbSceneParam._m0[86u].x;
    float _2097 = _572 / cbSceneParam._m0[86u].y;
    vec4 _2111 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2113 = _2111.x;
    float _2114 = _2111.y;
    float _2115 = _2111.z;
    float _2116 = _2111.w;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2158 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2159 = _2158 / _558;
        float _2170 = _2159 * _261;
        float _2171 = _262 * _2159;
        float _2172 = (-0.0) - _2171;
        float _2173 = _2159 * _263;
        float _2175 = (cbSceneParam._m0[77u].w * _2172) / _2158;
        float _2176 = _2175 + cbSceneParam._m0[79u].w;
        float _2177 = cbSceneParam._m0[79u].w - _2171;
        float _2183 = sqrt(((_2170 * _2170) + (_2171 * _2171)) + (_2173 * _2173));
        float _2186 = (1.0 - (cbSceneParam._m0[77u].w / _2158)) * _2183;
        float _2192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2403;
        if (abs((_2172 - _2175) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2403 = ((((_2176 > 0.0) ? exp2(_2192 * _2176) : (2.0 - exp2(_2194 * _2176))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2186;
        }
        else
        {
            float _2338 = 1.0 / cbSceneParam._m0[80u].x;
            float _2339 = isnan(_2177) ? _2176 : (isnan(_2176) ? _2177 : max(_2176, _2177));
            float _2340 = isnan(_2177) ? _2176 : (isnan(_2176) ? _2177 : min(_2176, _2177));
            float _2349 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : min(_2339, 0.0));
            float _2350 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : min(_2340, 0.0));
            _2403 = ((abs(_2183 / _2172) * cbSceneParam._m0[80u].y) * ((((_2349 - _2350) * 2.0) - ((exp2(_2192 * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)))) - exp2(_2192 * (isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0))))) * _2338)) - ((exp2(_2194 * _2349) - exp2(_2194 * _2350)) * _2338))) + (_2186 * cbSceneParam._m0[80u].z);
        }
        vec4 _2405 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2096, _2097, 1.0), 0.0);
        float _2414 = exp2((_2403 * (-1.44269502162933349609375)) * (1.0 - _2405.w));
        float _2415 = log2(_2414);
        float _2431 = log2(_2116);
        _2196 = (exp2(_2431 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2415 * cbSceneParam._m0[78u].x)) * _2405.x) / cbSceneParam._m0[78u].x)) + _2113;
        _2198 = (exp2(_2431 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2415 * cbSceneParam._m0[78u].y)) * _2405.y) / cbSceneParam._m0[78u].y)) + _2114;
        _2200 = (exp2(_2431 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2415 * cbSceneParam._m0[78u].z)) * _2405.z) / cbSceneParam._m0[78u].z)) + _2115;
        _2202 = _2414 * _2116;
    }
    else
    {
        _2196 = _2113;
        _2198 = _2114;
        _2200 = _2115;
        _2202 = _2116;
    }
    float _2214 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2215 = _2214 == 3.0;
    float _2216 = log2(_2202);
    float _2223 = exp2(_2216 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0)));
    float _2224 = exp2(_2216 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0)));
    float _2225 = exp2(_2216 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0)));
    float _2234 = (_2214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2234 * (_2215 ? _2223 : (_2223 + (cbSceneParam._m0[72u].w * _2196)));
    SV_Target.y = _2234 * (_2215 ? _2224 : (_2224 + (cbSceneParam._m0[72u].w * _2198)));
    SV_Target.z = _2234 * (_2215 ? _2225 : (_2225 + (cbSceneParam._m0[72u].w * _2200)));
    SV_Target.w = cbInstanceData._m0[_2088].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2088].w;
}


