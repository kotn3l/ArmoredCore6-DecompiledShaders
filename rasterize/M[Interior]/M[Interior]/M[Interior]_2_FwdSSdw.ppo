#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _753;
uint _1917;
uint _1918;
uint _1919;
uint _2153;
uint _2154;
uint _2155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _283 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _318 = cbMtdParam._m0[21u].w + _259;
    float _319 = cbMtdParam._m0[22u].x + _260;
    float _320 = cbMtdParam._m0[22u].y + _261;
    float _334 = (-0.0) - dot(vec3(_318, _319, _320), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _335 = (-0.0) - dot(vec3(_318, _319, _320), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _336 = (-0.0) - dot(vec3(_318, _319, _320), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _340 = inversesqrt(dot(vec3(_334, _335, _336), vec3(_334, _335, _336)));
    float _343 = _340 * _336;
    float _344 = (_340 * _334) + (((_283.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _345 = (_340 * _335) + (((_283.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _346 = _344 * cbMtdParam._m0[18u].z;
    float _347 = _345 * cbMtdParam._m0[18u].y;
    float _348 = fract(TEXCOORD.x);
    float _349 = fract(TEXCOORD.y);
    float _355;
    if (_346 > 0.0)
    {
        _355 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _355 = frontier_phi_3_2_ladder;
    }
    float _363;
    if (_347 > 0.0)
    {
        _363 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _363 = frontier_phi_7_6_ladder;
    }
    bool _365 = _343 > 0.0;
    float _367 = _365 ? (cbMtdParam._m0[15u].x / _343) : 5000.0;
    float _368 = isnan(_363) ? _355 : (isnan(_355) ? _363 : min(_355, _363));
    float _369 = isnan(_367) ? _368 : (isnan(_368) ? _367 : min(_368, _367));
    float _373 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _374 = _348 + (-0.5);
    float _377 = _349 + (-0.5);
    float _380 = ((_369 * _343) + _373) / _373;
    vec4 _404 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_374 + (_369 * _346)) / _380) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_377 + (_369 * _347)) / _380) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _414 = cbMtdParam._m0[9u].x * _404.x;
    float _415 = cbMtdParam._m0[9u].y * _404.y;
    float _416 = cbMtdParam._m0[9u].z * _404.z;
    float _434 = _344 * cbMtdParam._m0[20u].z;
    float _435 = _345 * cbMtdParam._m0[20u].y;
    bool _436 = _434 > 0.0;
    float _441;
    if (_436)
    {
        _441 = (1.0 - _348) / _434;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _348) / _434;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _441 = frontier_phi_11_10_ladder;
    }
    bool _443 = _435 > 0.0;
    float _448;
    if (_443)
    {
        _448 = (1.0 - _349) / _435;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _349) / _435;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _448 = frontier_phi_15_14_ladder;
    }
    float _451 = _365 ? (cbMtdParam._m0[16u].x / _343) : 5000.0;
    float _452 = isnan(_448) ? _441 : (isnan(_441) ? _448 : min(_441, _448));
    float _453 = isnan(_451) ? _452 : (isnan(_452) ? _451 : min(_452, _451));
    float _457 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _461 = ((_453 * _343) + _457) / _457;
    float _466 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _468 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _484 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_374 + (_453 * _434)) / _461) + 0.5) + _466) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_377 + (_453 * _435)) / _461) + 0.5) + _468) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _496;
    if (_436)
    {
        _496 = (1.0 - _348) / _434;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _348) / _434;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _496 = frontier_phi_19_18_ladder;
    }
    float _502;
    if (_443)
    {
        _502 = (1.0 - _349) / _435;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _349) / _435;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _502 = frontier_phi_23_22_ladder;
    }
    float _504 = isnan(_502) ? _496 : (isnan(_496) ? _502 : min(_496, _502));
    float _505 = isnan(_451) ? _504 : (isnan(_504) ? _451 : min(_504, _451));
    float _512 = ((_505 * _343) + _457) / _457;
    vec4 _533 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_374 + (_505 * _434)) / _512) + 0.5) + _466) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_377 + (_505 * _435)) / _512) + 0.5) + _468) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _535 = _533.x;
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _565 = _259 * _564;
    float _566 = _260 * _564;
    float _567 = _261 * _564;
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_573 * cbSceneParam._m0[86u].x, _574 * cbSceneParam._m0[86u].y));
    float _586 = _583.x * TEXCOORD.z;
    float _587 = (-0.0) - _565;
    float _588 = (-0.0) - _566;
    float _589 = (-0.0) - _567;
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = (cbModelParam._m0[37u].x * ((((fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _677 = (cbModelParam._m0[37u].y * ((((fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _678 = (((((fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        float _715 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_702.x + (-0.5));
        float _747 = _745 * (_702.y + (-0.5));
        float _748 = _745 * (_702.z + (-0.5));
        _752 = _715 * (_681.z + (-0.5));
        _754 = _715 * (_681.y + (-0.5));
        _755 = _715 * (_681.x + (-0.5));
        _756 = _725 * (_688.z + (-0.5));
        _757 = _725 * (_688.y + (-0.5));
        _758 = _725 * (_688.x + (-0.5));
        _759 = _735 * (_695.z + (-0.5));
        _760 = _735 * (_695.y + (-0.5));
        _761 = _735 * (_695.x + (-0.5));
        _762 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        _763 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        _764 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    }
    else
    {
        _752 = _753;
        _754 = _753;
        _755 = _753;
        _756 = _753;
        _757 = _753;
        _758 = _753;
        _759 = _753;
        _760 = _753;
        _761 = _753;
        _762 = _753;
        _763 = _753;
        _764 = _753;
    }
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = (cbModelParam._m0[38u].x * ((((fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _819 = (cbModelParam._m0[38u].y * ((((fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _820 = (((((fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _855 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _865 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _875 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _885 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_843.x + (-0.5));
        float _887 = _885 * (_843.y + (-0.5));
        float _888 = _885 * (_843.z + (-0.5));
        _892 = _855 * (_822.z + (-0.5));
        _893 = _855 * (_822.y + (-0.5));
        _894 = _855 * (_822.x + (-0.5));
        _895 = _865 * (_829.z + (-0.5));
        _896 = _865 * (_829.y + (-0.5));
        _897 = _865 * (_829.x + (-0.5));
        _898 = _875 * (_836.z + (-0.5));
        _899 = _875 * (_836.y + (-0.5));
        _900 = _875 * (_836.x + (-0.5));
        _901 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        _902 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        _903 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    }
    else
    {
        _892 = _753;
        _893 = _753;
        _894 = _753;
        _895 = _753;
        _896 = _753;
        _897 = _753;
        _898 = _753;
        _899 = _753;
        _900 = _753;
        _901 = _753;
        _902 = _753;
        _903 = _753;
    }
    float _918 = _565 * (-0.5);
    float _919 = _566 * (-0.5);
    float _920 = _567 * (-0.5);
    float _921 = dot(vec4(_918, _919, _920, 1.0), vec4(_894, _897, _900, _903));
    float _924 = dot(vec4(_918, _919, _920, 1.0), vec4(_893, _896, _899, _902));
    float _927 = dot(vec4(_918, _919, _920, 1.0), vec4(_892, _895, _898, _901));
    float _962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _934 = dot(vec4(_918, _919, _920, 1.0), vec4(_752, _756, _759, _762));
        float _938 = dot(vec4(_918, _919, _920, 1.0), vec4(_754, _757, _760, _763));
        float _942 = dot(vec4(_918, _919, _920, 1.0), vec4(_755, _758, _761, _764));
        float _949 = dot(vec4(cbModelParam._m0[39u]), vec4(_918, _919, _920, 1.0));
        _962 = dot(vec3(isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)), isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)), isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_949) ? 0.0 : (isnan(0.0) ? _949 : max(0.0, _949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _962 = 1.0;
    }
    float _973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _964 = dot(vec4(cbModelParam._m0[40u]), vec4(_918, _919, _920, 1.0));
        _973 = dot(vec3(isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)), isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)), isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_964) ? 0.0 : (isnan(0.0) ? _964 : max(0.0, _964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _973 = 1.0;
    }
    float _977 = (_973 * cbModelParam._m0[1u].x) + (_962 * (1.0 - cbModelParam._m0[1u].x));
    float _983 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1066;
    float _1068;
    float _1070;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1033 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1037 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1041 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1044 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1047 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1050 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1076;
        if (_1044 > 0.0)
        {
            _1076 = abs((1.0 - _1033) / _1044);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1044 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1033 + 1.0) / _1044);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1076 = frontier_phi_38_36_ladder;
        }
        float _1375;
        if (_1047 > 0.0)
        {
            _1375 = abs((1.0 - _1037) / _1047);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1047 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1037 + 1.0) / _1047);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1375 = frontier_phi_47_43_ladder;
        }
        float _1670;
        if (_1050 > 0.0)
        {
            _1670 = abs((1.0 - _1041) / _1050);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1050 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1041 + 1.0) / _1050);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1670 = frontier_phi_61_54_ladder;
        }
        float _1672 = isnan(_1375) ? _1076 : (isnan(_1076) ? _1375 : min(_1076, _1375));
        float _1673 = isnan(_1670) ? _1672 : (isnan(_1672) ? _1670 : min(_1672, _1670));
        float _1677 = (_1673 * _1044) + _1033;
        float _1678 = (_1673 * _1047) + _1037;
        float _1679 = (_1673 * _1050) + _1041;
        float _1680 = _1673 * 9.9999997473787516355514526367188e-05;
        float _1681 = (-1.0) - _1680;
        float _1683 = _1680 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1679 > _1683) || ((_1679 < _1681) || ((_1678 > _1683) || ((_1678 < _1681) || ((_1677 < _1681) || (_1677 > _1683))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1679, cbModelParam._m0[9u].z, fma(_1678, cbModelParam._m0[9u].y, _1677 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1679, cbModelParam._m0[10u].z, fma(_1678, cbModelParam._m0[10u].y, _1677 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1679, cbModelParam._m0[11u].z, fma(_1678, cbModelParam._m0[11u].y, _1677 * cbModelParam._m0[11u].x))), _983);
            frontier_phi_37_61_ladder = _1790.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _1790.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _1790.x * cbModelParam._m0[1u].y;
        }
        _1066 = frontier_phi_37_61_ladder_2;
        _1068 = frontier_phi_37_61_ladder_1;
        _1070 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _983);
        _1066 = _1054.x * cbModelParam._m0[1u].y;
        _1068 = _1054.y * cbModelParam._m0[1u].y;
        _1070 = _1054.z * cbModelParam._m0[1u].y;
    }
    float _1073 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1161;
    float _1163;
    float _1165;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1125 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1129 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1133 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1136 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1139 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1142 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1380;
        if (_1136 > 0.0)
        {
            _1380 = abs((1.0 - _1125) / _1136);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1136 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1125 + 1.0) / _1136);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1380 = frontier_phi_49_45_ladder;
        }
        float _1696;
        if (_1139 > 0.0)
        {
            _1696 = abs((1.0 - _1129) / _1139);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1139 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1129 + 1.0) / _1139);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1696 = frontier_phi_63_56_ladder;
        }
        float _1847;
        if (_1142 > 0.0)
        {
            _1847 = abs((1.0 - _1133) / _1142);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1142 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1133 + 1.0) / _1142);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1847 = frontier_phi_77_72_ladder;
        }
        float _1849 = isnan(_1696) ? _1380 : (isnan(_1380) ? _1696 : min(_1380, _1696));
        float _1850 = isnan(_1847) ? _1849 : (isnan(_1849) ? _1847 : min(_1849, _1847));
        float _1854 = (_1850 * _1136) + _1125;
        float _1855 = (_1850 * _1139) + _1129;
        float _1856 = (_1850 * _1142) + _1133;
        float _1857 = _1850 * 9.9999997473787516355514526367188e-05;
        float _1858 = (-1.0) - _1857;
        float _1860 = _1857 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_1856 > _1860) || ((_1856 < _1858) || ((_1855 > _1860) || ((_1855 < _1858) || ((_1854 < _1858) || (_1854 > _1860))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1856, cbModelParam._m0[17u].z, fma(_1855, cbModelParam._m0[17u].y, _1854 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1856, cbModelParam._m0[18u].z, fma(_1855, cbModelParam._m0[18u].y, _1854 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1856, cbModelParam._m0[19u].z, fma(_1855, cbModelParam._m0[19u].y, _1854 * cbModelParam._m0[19u].x))), _1073);
            frontier_phi_46_77_ladder = _2016.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2016.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2016.y * cbModelParam._m0[1u].z;
        }
        _1161 = frontier_phi_46_77_ladder_1;
        _1163 = frontier_phi_46_77_ladder_2;
        _1165 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1073);
        _1161 = _1145.x * cbModelParam._m0[1u].z;
        _1163 = _1145.y * cbModelParam._m0[1u].z;
        _1165 = _1145.z * cbModelParam._m0[1u].z;
    }
    float _1177 = _586 * 0.01200000010430812835693359375;
    float _1179 = _1177 * ((cbModelParam._m0[1u].w * (_1161 - _1066)) + _1066);
    float _1180 = _1177 * ((cbModelParam._m0[1u].w * (_1163 - _1068)) + _1068);
    float _1181 = _1177 * ((cbModelParam._m0[1u].w * (_1165 - _1070)) + _1070);
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, _1179 * cbSceneParam._m0[91u].x));
    vec4 _1216 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_573, _574));
    float _1218 = _1216.w;
    uint _1234 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1239 = floatBitsToUint(cbInstanceData._m0[_1234 + 5u]);
    uint _1241 = _1239.x * 14u;
    uint _1242 = _1241 + 13u;
    float _1247 = _586 + (-1.0);
    float _1250 = (cbLight._m0[_1242].x * _1247) + 1.0;
    float _1251 = (cbLight._m0[_1242].y * _1247) + 1.0;
    uint _1252 = _1241 + 8u;
    float _1263 = cbLight._m0[_1241].x + _565;
    float _1264 = cbLight._m0[_1241].y + _566;
    float _1265 = cbLight._m0[_1241].z + _567;
    float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
    float _1273 = dot(vec3(0.0), vec3(cbLight._m0[_1241].xyz));
    float _2534 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1276 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
    float _1277 = dot(vec3(0.0), vec3(_565, _566, _567));
    float _2545 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1280 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
    float _1281 = dot(vec3(cbLight._m0[_1241].xyz), vec3(_1263 * _1269, _1264 * _1269, _1265 * _1269));
    float _2556 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1292 = (exp2(log2(1.0 - (isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1298 = (0.5 / ((_1276 + 9.9999999392252902907785028219223e-09) + _1280)) * _1276;
    float _2567 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1300 = (isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0))) * 0.31831014156341552734375;
    float _1302 = isnan(1.0) ? _1250 : (isnan(_1250) ? 1.0 : min(_1250, 1.0));
    uint _1315 = _1241 + 9u;
    uint _1321 = _1241 | 1u;
    float _1327 = cbLight._m0[_1321].x + _565;
    float _1328 = cbLight._m0[_1321].y + _566;
    float _1329 = cbLight._m0[_1321].z + _567;
    float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
    float _1337 = dot(vec3(0.0), vec3(cbLight._m0[_1321].xyz));
    float _2583 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1340 = isnan(1.0) ? _2583 : (isnan(_2583) ? 1.0 : min(_2583, 1.0));
    float _1341 = dot(vec3(cbLight._m0[_1321].xyz), vec3(_1327 * _1333, _1328 * _1333, _1329 * _1333));
    float _2594 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _1350 = (exp2(log2(1.0 - (isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1354 = (0.5 / ((_1340 + 9.9999999392252902907785028219223e-09) + _1280)) * _1340;
    float _2605 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1356 = (isnan(1.0) ? _2605 : (isnan(_2605) ? 1.0 : min(_2605, 1.0))) * 0.31831014156341552734375;
    float _1357 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
    float _1367 = (((_1350 * cbLight._m0[_1315].x) * _1356) * _1357) + ((((cbLight._m0[_1252].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1218))) * _1292) * _1300) * _1302);
    float _1368 = (((_1350 * cbLight._m0[_1315].y) * _1356) * _1357) + ((((cbLight._m0[_1252].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1218))) * _1292) * _1300) * _1302);
    float _1369 = (((_1350 * cbLight._m0[_1315].z) * _1356) * _1357) + ((((cbLight._m0[_1252].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1218))) * _1292) * _1300) * _1302);
    float _1485;
    float _1487;
    float _1489;
    if (_1239.y == 0u)
    {
        float _1425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1426 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1425;
        float _1427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1425;
        float _1428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1425;
        uvec4 _1440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1441 = _1440.x;
        uint _1452 = uint((float(_1440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _1441))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _1441)));
        float _1462 = (log2(_1428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1463 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        uint _1466 = uint(isnan(14.0) ? _1463 : (isnan(_1463) ? 14.0 : min(_1463, 14.0)));
        uvec4 _1471 = texelFetch(g_lightClusterGridBuffer, int(((_1466 << 2u) + (_1452 << 6u)) >> 2u));
        uint _1472 = _1471.x;
        uint _1473 = _1440.z;
        float _1562;
        float _1564;
        float _1566;
        if (((((1u << ((_1473 >> 4u) & 15u)) + 4294967295u) & _1472) == 0u) || ((_1473 & 240u) == 0u))
        {
            _1562 = 0.0;
            _1564 = 0.0;
            _1566 = 0.0;
        }
        else
        {
            float _1563;
            float _1565;
            float _1567;
            float _1721 = 0.0;
            float _1722 = 0.0;
            float _1723 = 0.0;
            uint _1724 = 0u;
            uint _1733;
            bool _1734;
            for (;;)
            {
                _1733 = texelFetch(g_lightClassification, int((((_1466 << 5u) + (_1452 << 9u)) + (_1724 << 2u)) >> 2u)).x;
                _1734 = _1733 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1734)
                {
                    frontier_phi_74_pred = _1723;
                    frontier_phi_74_pred_1 = _1722;
                    frontier_phi_74_pred_2 = _1721;
                }
                else
                {
                    float _1887;
                    float _1888;
                    float _1889;
                    uint _1890;
                    _1887 = _1721;
                    _1888 = _1722;
                    _1889 = _1723;
                    _1890 = _1733;
                    float _1799;
                    float _1800;
                    float _1801;
                    for (;;)
                    {
                        uint _1894 = uint(findLSB(_1890)) + (_1724 << 5u);
                        uint _1891 = (_1890 + 4294967295u) & _1890;
                        uint _1896 = _1894 * 48u;
                        vec4 _1910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1896)).x, texelFetch(g_PointLightRenderingBuffer, int(_1896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1896 + 3u)).x));
                        uint _1927 = (_1894 * 48u) + 8u;
                        vec3 _1938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1927)).x, texelFetch(g_PointLightRenderingBuffer, int(_1927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1927 + 2u)).x));
                        float _1942 = _1910.x - _1426;
                        float _1943 = _1910.y - _1427;
                        float _1944 = _1910.z - _1428;
                        float _1945 = dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944));
                        float _1948 = inversesqrt(_1945);
                        float _1957 = 1.0 - (_1945 * _1910.w);
                        float _2631 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
                        float _1959 = sqrt(_1945) * uintBitsToFloat(uvec4(_1917, _1918, _1919, texelFetch(g_PointLightRenderingBuffer, int(((_1894 * 48u) + 4u) + 3u)).x)).w;
                        float _1962 = 1.39999997615814208984375 / (_1959 + 1.39999997615814208984375);
                        float _1963 = _1962 * _1962;
                        float _1966 = ((1.0 - _1963) * dot(vec3(0.0), vec3(_1948 * _1942, _1948 * _1943, _1948 * _1944))) + _1963;
                        float _1968 = (-0.0) - _1426;
                        float _1969 = (-0.0) - _1427;
                        float _1970 = (-0.0) - _1428;
                        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
                        float _1978 = dot(vec3(0.0), vec3(_1974 * _1968, _1974 * _1969, _1974 * _1970));
                        float _2642 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
                        float _2653 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
                        float _1982 = isnan(1.0) ? _2653 : (isnan(_2653) ? 1.0 : min(_2653, 1.0));
                        float _1986 = (0.5 / (((isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0))) + 9.9999999392252902907785028219223e-09) + _1982)) * _1982;
                        float _2664 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
                        float _1995 = (((isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0))) * 3.1415927410125732421875) / (((_1959 * _1959) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2631 : (isnan(_2631) ? 1.0 : min(_2631, 1.0)));
                        _1799 = (_1995 * _1938.x) + _1887;
                        _1800 = (_1995 * _1938.y) + _1888;
                        _1801 = (_1995 * _1938.z) + _1889;
                        if (_1891 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1887 = _1799;
                            _1888 = _1800;
                            _1889 = _1801;
                            _1890 = _1891;
                        }
                    }
                    frontier_phi_74_pred = _1801;
                    frontier_phi_74_pred_1 = _1800;
                    frontier_phi_74_pred_2 = _1799;
                }
                _1567 = frontier_phi_74_pred;
                _1565 = frontier_phi_74_pred_1;
                _1563 = frontier_phi_74_pred_2;
                uint _1725 = _1724 + 1u;
                if (_1725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1721 = _1563;
                    _1722 = _1565;
                    _1723 = _1567;
                    _1724 = _1725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1562 = _1563;
            _1564 = _1565;
            _1566 = _1567;
        }
        uvec4 _1570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1571 = _1570.z;
        uint _1573 = (_1571 >> 8u) & 15u;
        float _1701;
        float _1703;
        float _1705;
        if (((4294967295u << _1573) & _1472) == 0u)
        {
            _1701 = _1562;
            _1703 = _1564;
            _1705 = _1566;
        }
        else
        {
            float _1717 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1573 < ((_1571 >> 12u) & 15u))
            {
                float _1702;
                float _1704;
                float _1706;
                float _1873 = _1562;
                float _1874 = _1564;
                float _1875 = _1566;
                uint _1876 = _1573;
                uint _1885;
                bool _1886;
                for (;;)
                {
                    _1885 = texelFetch(g_lightClassification, int((((_1466 << 5u) + (_1452 << 9u)) + (_1876 << 2u)) >> 2u)).x;
                    _1886 = _1885 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_1886)
                    {
                        frontier_phi_83_pred = _1875;
                        frontier_phi_83_pred_1 = _1874;
                        frontier_phi_83_pred_2 = _1873;
                    }
                    else
                    {
                        float _2021;
                        float _2022;
                        float _2023;
                        float _2242;
                        float _2243;
                        float _2244;
                        float _2031 = _1873;
                        float _2032 = _1874;
                        float _2033 = _1875;
                        uint _2034 = _1885;
                        uint _2035;
                        uint _2045;
                        vec4 _2060;
                        float _2061;
                        vec3 _2073;
                        vec4 _2088;
                        vec4 _2103;
                        float _2149;
                        bool _2150;
                        for (;;)
                        {
                            _2045 = ((_1876 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2034));
                            _2035 = (_2034 + 4294967295u) & _2034;
                            uint _2047 = _2045 * 40u;
                            _2060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2047 + 3u)).x));
                            _2061 = _2060.w;
                            uint _2063 = (_2045 * 40u) + 8u;
                            _2073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 2u)).x));
                            uint _2075 = (_2045 * 40u) + 16u;
                            _2088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 3u)).x));
                            uint _2090 = (_2045 * 40u) + 20u;
                            _2103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2090 + 3u)).x));
                            uint _2105 = (_2045 * 40u) + 24u;
                            vec4 _2118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2105 + 3u)).x));
                            uint _2124 = (_2045 * 40u) + 28u;
                            vec4 _2137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 3u)).x));
                            _2149 = fma(_1428, _2137.z, fma(_1427, _2137.y, _2137.x * _1426)) + _2137.w;
                            _2150 = !((fma(_1428, _2118.z, fma(_1427, _2118.y, _2118.x * _1426)) + _2118.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2150)
                            {
                                float _2184 = _2060.x - _1426;
                                float _2185 = _2060.y - _1427;
                                float _2186 = _2060.z - _1428;
                                float _2187 = dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186));
                                float _2190 = inversesqrt(_2187);
                                float _2197 = 1.0 - (_2187 / (_2061 * _2061));
                                float _2675 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
                                float _2199 = sqrt(_2187) * uintBitsToFloat(uvec4(_2153, _2154, _2155, texelFetch(g_SpotLightRenderingBuffer, int(((_2045 * 40u) + 4u) + 3u)).x)).w;
                                float _2201 = 1.39999997615814208984375 / (_2199 + 1.39999997615814208984375);
                                float _2202 = _2201 * _2201;
                                float _2205 = (fma(_1428, _2088.z, fma(_1427, _2088.y, _2088.x * _1426)) + _2088.w) / _2149;
                                float _2206 = (fma(_1428, _2103.z, fma(_1427, _2103.y, _2103.x * _1426)) + _2103.w) / _2149;
                                float _2210 = 1.0 - dot(vec2(_2205, _2206), vec2(_2205, _2206));
                                float _2686 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
                                float _2218 = dot(vec3(0.0), vec3((-0.0) - (_1426 * _1717), (-0.0) - (_1427 * _1717), (-0.0) - (_1428 * _1717)));
                                float _2697 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
                                float _2226 = ((1.0 - _2202) * dot(vec3(0.0), vec3(_2190 * _2184, _2190 * _2185, _2190 * _2186))) + _2202;
                                float _2708 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
                                float _2227 = isnan(1.0) ? _2708 : (isnan(_2708) ? 1.0 : min(_2708, 1.0));
                                float _2231 = (0.5 / (((isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) + 9.9999999392252902907785028219223e-09) + _2227)) * _2227;
                                float _2719 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
                                float _2238 = ((isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0))) * (isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0)))) * (((isnan(1.0) ? _2719 : (isnan(_2719) ? 1.0 : min(_2719, 1.0))) * 3.1415927410125732421875) / (((_2199 * _2199) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2238 * _2073.x;
                                frontier_phi_89_pred_1 = _2238 * _2073.z;
                                frontier_phi_89_pred_2 = _2238 * _2073.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2242 = frontier_phi_89_pred;
                            _2244 = frontier_phi_89_pred_1;
                            _2243 = frontier_phi_89_pred_2;
                            _2021 = _2242 + _2031;
                            _2022 = _2243 + _2032;
                            _2023 = _2244 + _2033;
                            if (_2035 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2031 = _2021;
                                _2032 = _2022;
                                _2033 = _2023;
                                _2034 = _2035;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2023;
                        frontier_phi_83_pred_1 = _2022;
                        frontier_phi_83_pred_2 = _2021;
                    }
                    _1706 = frontier_phi_83_pred;
                    _1704 = frontier_phi_83_pred_1;
                    _1702 = frontier_phi_83_pred_2;
                    uint _1877 = _1876 + 1u;
                    if (_1877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1873 = _1702;
                        _1874 = _1704;
                        _1875 = _1706;
                        _1876 = _1877;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1704;
                frontier_phi_65_66_ladder_1 = _1702;
                frontier_phi_65_66_ladder_2 = _1706;
            }
            else
            {
                frontier_phi_65_66_ladder = _1564;
                frontier_phi_65_66_ladder_1 = _1562;
                frontier_phi_65_66_ladder_2 = _1566;
            }
            _1701 = frontier_phi_65_66_ladder_1;
            _1703 = frontier_phi_65_66_ladder;
            _1705 = frontier_phi_65_66_ladder_2;
        }
        float _1710 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
        _1485 = ((_1701 * 0.039999999105930328369140625) * _1710) + _1367;
        _1487 = ((_1703 * 0.039999999105930328369140625) * _1710) + _1368;
        _1489 = ((_1705 * 0.039999999105930328369140625) * _1710) + _1369;
    }
    else
    {
        _1485 = _1367;
        _1487 = _1368;
        _1489 = _1369;
    }
    uint _1496 = (_1234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1511 = (cbInstanceData._m0[_1496].x * ((_535 * ((_484.x * cbMtdParam._m0[10u].x) - _414)) + _414)) + ((_1485 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    float _1512 = (cbInstanceData._m0[_1496].y * ((_535 * ((_484.y * cbMtdParam._m0[10u].y) - _415)) + _415)) + ((_1487 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    float _1513 = (cbInstanceData._m0[_1496].z * ((_535 * ((_484.z * cbMtdParam._m0[10u].z) - _416)) + _416)) + ((_1489 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    uint _1517 = _1234 + 6u;
    float _1525 = _573 / cbSceneParam._m0[86u].x;
    float _1526 = _574 / cbSceneParam._m0[86u].y;
    vec4 _1540 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1525, _1526, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1542 = _1540.x;
    float _1543 = _1540.y;
    float _1544 = _1540.z;
    float _1545 = _1540.w;
    float _1619;
    float _1621;
    float _1623;
    float _1625;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _1581 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _1582 = _1581 / _560;
        float _1593 = _1582 * _259;
        float _1594 = _260 * _1582;
        float _1595 = (-0.0) - _1594;
        float _1596 = _1582 * _261;
        float _1598 = (cbSceneParam._m0[77u].w * _1595) / _1581;
        float _1599 = _1598 + cbSceneParam._m0[79u].w;
        float _1600 = cbSceneParam._m0[79u].w - _1594;
        float _1606 = sqrt(((_1593 * _1593) + (_1594 * _1594)) + (_1596 * _1596));
        float _1609 = (1.0 - (cbSceneParam._m0[77u].w / _1581)) * _1606;
        float _1615 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1617 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1809;
        if (abs((_1595 - _1598) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1809 = ((((_1599 > 0.0) ? exp2(_1615 * _1599) : (2.0 - exp2(_1617 * _1599))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1609;
        }
        else
        {
            float _1747 = 1.0 / cbSceneParam._m0[80u].x;
            float _1748 = isnan(_1600) ? _1599 : (isnan(_1599) ? _1600 : max(_1599, _1600));
            float _1749 = isnan(_1600) ? _1599 : (isnan(_1599) ? _1600 : min(_1599, _1600));
            float _1758 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : min(_1748, 0.0));
            float _1759 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : min(_1749, 0.0));
            _1809 = ((abs(_1606 / _1595) * cbSceneParam._m0[80u].y) * ((((_1758 - _1759) * 2.0) - ((exp2(_1615 * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)))) - exp2(_1615 * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))))) * _1747)) - ((exp2(_1617 * _1758) - exp2(_1617 * _1759)) * _1747))) + (_1609 * cbSceneParam._m0[80u].z);
        }
        vec4 _1811 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1525, _1526, 1.0), 0.0);
        float _1820 = exp2((_1809 * (-1.44269502162933349609375)) * (1.0 - _1811.w));
        float _1821 = log2(_1820);
        float _1837 = log2(_1545);
        _1619 = (exp2(_1837 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1821 * cbSceneParam._m0[78u].x)) * _1811.x) / cbSceneParam._m0[78u].x)) + _1542;
        _1621 = (exp2(_1837 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1821 * cbSceneParam._m0[78u].y)) * _1811.y) / cbSceneParam._m0[78u].y)) + _1543;
        _1623 = (exp2(_1837 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1821 * cbSceneParam._m0[78u].z)) * _1811.z) / cbSceneParam._m0[78u].z)) + _1544;
        _1625 = _1820 * _1545;
    }
    else
    {
        _1619 = _1542;
        _1621 = _1543;
        _1623 = _1544;
        _1625 = _1545;
    }
    float _1637 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1638 = _1637 == 3.0;
    float _1640 = log2(_1625);
    float _1647 = exp2(_1640 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    float _1648 = exp2(_1640 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    float _1649 = exp2(_1640 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    float _1658 = (_1637 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1658 * (_1638 ? _1647 : (_1647 + (cbSceneParam._m0[72u].w * _1619)));
    SV_Target.y = _1658 * (_1638 ? _1648 : (_1648 + (cbSceneParam._m0[72u].w * _1621)));
    SV_Target.z = _1658 * (_1638 ? _1649 : (_1649 + (cbSceneParam._m0[72u].w * _1623)));
    SV_Target.w = cbInstanceData._m0[_1517].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1517].w;
}


