#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _184 = _183 * _176;
    float _185 = _183 * _177;
    float _186 = _183 * _178;
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _195 = _194 * TANGENT.x;
    float _196 = _194 * TANGENT.y;
    float _197 = _194 * TANGENT.z;
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _305 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _312 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _324 = cbMtdParam._m0[22u].z + _252;
    float _325 = cbMtdParam._m0[22u].w + _253;
    float _326 = cbMtdParam._m0[23u].x + _254;
    float _343 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_305 * _184, _305 * _185, _305 * _186));
    float _344 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_312 * _195, _312 * _196, _312 * _197));
    float _345 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _355 = ((cbMtdParam._m0[19u].y * _343) * _349) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _356 = ((cbMtdParam._m0[19u].z * _344) * _349) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _359 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _360 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _378;
    float _381;
    float _383;
    if (_355 > 0.0)
    {
        float _364 = (1.0 - _359) / _355;
        _378 = _364;
        _381 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_364 * _350)) * 0.16666667163372039794921875;
        _383 = (fract((_364 * _356) + _360) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_355 < 0.0)
        {
            float _379 = ((-0.0) - _359) / _355;
            frontier_phi_3_2_ladder = (fract((_379 * _356) + _360) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _379;
            frontier_phi_3_2_ladder_2 = (fract(_379 * _350) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _380;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _378 = frontier_phi_3_2_ladder_1;
        _381 = frontier_phi_3_2_ladder_2;
        _383 = frontier_phi_3_2_ladder;
    }
    float _409;
    float _411;
    float _413;
    if (_356 > 0.0)
    {
        float _396 = (1.0 - _360) / _356;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_396 < _378)
        {
            frontier_phi_8_5_ladder = (fract((_396 * _355) + _359) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _396;
            frontier_phi_8_5_ladder_2 = (fract(_396 * _350) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _381;
            frontier_phi_8_5_ladder_1 = _378;
            frontier_phi_8_5_ladder_2 = _383;
        }
        _409 = frontier_phi_8_5_ladder_1;
        _411 = frontier_phi_8_5_ladder;
        _413 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_356 < 0.0)
        {
            float _410 = ((-0.0) - _360) / _356;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_410 < _378)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_410 * _355) + _359) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _410;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_410 * _350) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _381;
                frontier_phi_8_6_ladder_9_ladder_1 = _378;
                frontier_phi_8_6_ladder_9_ladder_2 = _383;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _381;
            frontier_phi_8_6_ladder_1 = _378;
            frontier_phi_8_6_ladder_2 = _383;
        }
        _409 = frontier_phi_8_6_ladder_1;
        _411 = frontier_phi_8_6_ladder;
        _413 = frontier_phi_8_6_ladder_2;
    }
    float _417 = (_350 > 0.0) ? (cbMtdParam._m0[16u].y / _350) : 5000.0;
    float _430;
    float _431;
    if (_417 < _409)
    {
        _430 = ((_359 + cbMtdParam._m0[16u].z) + (_417 * _355)) * 0.16666667163372039794921875;
        _431 = (((_417 * _356) + _360) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _430 = _411;
        _431 = _413;
    }
    vec4 _433 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_430, _431));
    float _438 = _433.x * cbMtdParam._m0[13u].x;
    float _439 = _433.y * cbMtdParam._m0[13u].y;
    float _440 = _433.z * cbMtdParam._m0[13u].z;
    float _2739 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _2750 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2761 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _463 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _464 = _252 * _463;
    float _465 = _253 * _463;
    float _466 = _254 * _463;
    float _472 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _473 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _486 = uint(roundEven(NORMAL.w)) * 13u;
    uint _488 = (_486 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _494 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0)))) * cbInstanceData._m0[_488].x;
    float _495 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2750 : (isnan(_2750) ? 1.0 : min(_2750, 1.0)))) * cbInstanceData._m0[_488].y;
    float _496 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0)))) * cbInstanceData._m0[_488].z;
    float _2772 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _2772 : (isnan(_2772) ? 1.0 : min(_2772, 1.0));
    float _2783 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _2783 : (isnan(_2783) ? 1.0 : min(_2783, 1.0));
    float _2794 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _499 = isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0));
    vec4 _508 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _472, cbSceneParam._m0[86u].y * _473));
    float _511 = _508.x * TEXCOORD.z;
    float _512 = (-0.0) - _464;
    float _513 = (-0.0) - _465;
    float _514 = (-0.0) - _466;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _606 = (cbModelParam._m0[37u].x * ((((fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _608 = (cbModelParam._m0[37u].y * ((((fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _609 = (((((fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_606, _608, _609), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_606, _608, _609), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_606, _608, _609), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_606, _608, _609), 0.0);
        float _646 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_612.x + (-0.5));
        float _648 = _646 * (_612.y + (-0.5));
        float _649 = _646 * (_612.z + (-0.5));
        float _656 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_619.x + (-0.5));
        float _658 = _656 * (_619.y + (-0.5));
        float _659 = _656 * (_619.z + (-0.5));
        float _666 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_626.x + (-0.5));
        float _668 = _666 * (_626.y + (-0.5));
        float _669 = _666 * (_626.z + (-0.5));
        float _676 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_633.x + (-0.5));
        float _678 = _676 * (_633.y + (-0.5));
        float _679 = _676 * (_633.z + (-0.5));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = _647 * 0.5;
        float _684 = _657 * 0.5;
        float _685 = _667 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _700 = (dot(vec3(0.0), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _2820 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _710 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _2831 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _2842 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0))) * (_712 + 1.0))) + _717) * _680;
        float _727 = _648 * 0.5;
        float _728 = _658 * 0.5;
        float _729 = _668 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(0.0), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _2853 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _2864 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _2864 : (isnan(_2864) ? 1.0 : min(_2864, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _2875 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0))) * (_754 + 1.0))) + _759) * _681;
        float _769 = _649 * 0.5;
        float _770 = _659 * 0.5;
        float _771 = _669 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(0.0), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _2886 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _2897 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _2897 : (isnan(_2897) ? 1.0 : min(_2897, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _2908 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _2908 : (isnan(_2908) ? 1.0 : min(_2908, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _2886 : (isnan(_2886) ? 1.0 : min(_2886, 1.0))) * (_796 + 1.0))) + _801) * _682;
        _818 = _649;
        _819 = _648;
        _820 = _647;
        _821 = _659;
        _822 = _658;
        _823 = _657;
        _824 = _669;
        _825 = _668;
        _826 = _667;
        _827 = _682;
        _828 = _681;
        _829 = _680;
        _830 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
    }
    else
    {
        _818 = _380;
        _819 = _380;
        _820 = _380;
        _821 = _380;
        _822 = _380;
        _823 = _380;
        _824 = _380;
        _825 = _380;
        _826 = _380;
        _827 = _380;
        _828 = _380;
        _829 = _380;
        _830 = 0.0;
        _831 = 0.0;
        _832 = 0.0;
    }
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = (cbModelParam._m0[38u].x * ((((fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _887 = (cbModelParam._m0[38u].y * ((((fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _888 = (((((fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _923 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_890.x + (-0.5));
        float _925 = _923 * (_890.y + (-0.5));
        float _926 = _923 * (_890.z + (-0.5));
        float _933 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_897.x + (-0.5));
        float _935 = _933 * (_897.y + (-0.5));
        float _936 = _933 * (_897.z + (-0.5));
        float _943 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_904.x + (-0.5));
        float _945 = _943 * (_904.y + (-0.5));
        float _946 = _943 * (_904.z + (-0.5));
        float _953 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_911.x + (-0.5));
        float _955 = _953 * (_911.y + (-0.5));
        float _956 = _953 * (_911.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(0.0), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _2949 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _2960 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _2971 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0))) * (_987 + 1.0))) + _992) * _957;
        float _1002 = _925 * 0.5;
        float _1003 = _935 * 0.5;
        float _1004 = _945 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(0.0), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _2982 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _2993 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3004 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) * (_1029 + 1.0))) + _1034) * _958;
        float _1044 = _926 * 0.5;
        float _1045 = _936 * 0.5;
        float _1046 = _946 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(0.0), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3015 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3026 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3037 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3037 : (isnan(_3037) ? 1.0 : min(_3037, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0))) * (_1071 + 1.0))) + _1076) * _959;
        _1093 = _926;
        _1094 = _925;
        _1095 = _924;
        _1096 = _936;
        _1097 = _935;
        _1098 = _934;
        _1099 = _946;
        _1100 = _945;
        _1101 = _944;
        _1102 = _959;
        _1103 = _958;
        _1104 = _957;
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _380;
        _1094 = _380;
        _1095 = _380;
        _1096 = _380;
        _1097 = _380;
        _1098 = _380;
        _1099 = _380;
        _1100 = _380;
        _1101 = _380;
        _1102 = _380;
        _1103 = _380;
        _1104 = _380;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _830)) + _830;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _831)) + _831;
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _832)) + _832;
    float _1140 = fma(_1119, cbSceneParam._m0[89u].z, fma(_1118, cbSceneParam._m0[89u].y, _1117 * cbSceneParam._m0[89u].x));
    float _1143 = fma(_1119, cbSceneParam._m0[90u].z, fma(_1118, cbSceneParam._m0[90u].y, _1117 * cbSceneParam._m0[90u].x));
    float _1146 = fma(_1119, cbSceneParam._m0[91u].z, fma(_1118, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1117));
    float _1161 = _464 * (-0.5);
    float _1162 = _465 * (-0.5);
    float _1163 = _466 * (-0.5);
    float _1164 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1167 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1170 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1204;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1177 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_818, _821, _824, _827));
        float _1181 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_819, _822, _825, _828));
        float _1185 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_820, _823, _826, _829));
        float _1192 = dot(vec4(cbModelParam._m0[39u]), vec4(_1161, _1162, _1163, 1.0));
        _1204 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1192) ? 0.0 : (isnan(0.0) ? _1192 : max(0.0, _1192))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1204 = 1.0;
    }
    float _1215;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1206 = dot(vec4(cbModelParam._m0[40u]), vec4(_1161, _1162, _1163, 1.0));
        _1215 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1215 = 1.0;
    }
    float _1219 = (_1215 * cbModelParam._m0[1u].x) + (_1204 * (1.0 - cbModelParam._m0[1u].x));
    float _1228 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1311;
    float _1313;
    float _1315;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1278 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1282 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1286 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1289 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1292 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1295 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1321;
        if (_1289 > 0.0)
        {
            _1321 = abs((1.0 - _1278) / _1289);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1278 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1321 = frontier_phi_26_24_ladder;
        }
        float _1644;
        if (_1292 > 0.0)
        {
            _1644 = abs((1.0 - _1282) / _1292);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1282 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1644 = frontier_phi_35_31_ladder;
        }
        float _1947;
        if (_1295 > 0.0)
        {
            _1947 = abs((1.0 - _1286) / _1295);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1286 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1947 = frontier_phi_49_42_ladder;
        }
        float _1949 = isnan(_1644) ? _1321 : (isnan(_1321) ? _1644 : min(_1321, _1644));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1289) + _1278;
        float _1955 = (_1950 * _1292) + _1282;
        float _1956 = (_1950 * _1295) + _1286;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1957;
        float _1960 = _1957 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1956 > _1960) || ((_1956 < _1958) || ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 < _1958) || (_1954 > _1960))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1228);
            frontier_phi_25_49_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1311 = frontier_phi_25_49_ladder_2;
        _1313 = frontier_phi_25_49_ladder_1;
        _1315 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1228);
        _1311 = _1299.x * cbModelParam._m0[1u].y;
        _1313 = _1299.y * cbModelParam._m0[1u].y;
        _1315 = _1299.z * cbModelParam._m0[1u].y;
    }
    float _1318 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1408;
    float _1410;
    float _1412;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1372 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1376 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1380 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1383 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1386 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1389 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1649;
        if (_1383 > 0.0)
        {
            _1649 = abs((1.0 - _1372) / _1383);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1372 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1649 = frontier_phi_37_33_ladder;
        }
        float _1973;
        if (_1386 > 0.0)
        {
            _1973 = abs((1.0 - _1376) / _1386);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1376 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1973 = frontier_phi_51_44_ladder;
        }
        float _2139;
        if (_1389 > 0.0)
        {
            _2139 = abs((1.0 - _1380) / _1389);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1380 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2139 = frontier_phi_65_60_ladder;
        }
        float _2141 = isnan(_1973) ? _1649 : (isnan(_1649) ? _1973 : min(_1649, _1973));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1383) + _1372;
        float _2147 = (_2142 * _1386) + _1376;
        float _2148 = (_2142 * _1389) + _1380;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2149;
        float _2152 = _2149 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2148 > _2152) || ((_2148 < _2150) || ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 < _2150) || (_2146 > _2152))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2148, cbModelParam._m0[17u].z, fma(_2147, cbModelParam._m0[17u].y, _2146 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2148, cbModelParam._m0[18u].z, fma(_2147, cbModelParam._m0[18u].y, _2146 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2148, cbModelParam._m0[19u].z, fma(_2147, cbModelParam._m0[19u].y, _2146 * cbModelParam._m0[19u].x))), _1318);
            frontier_phi_34_65_ladder = _2331.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2331.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2331.z * cbModelParam._m0[1u].z;
        }
        _1408 = frontier_phi_34_65_ladder_1;
        _1410 = frontier_phi_34_65_ladder;
        _1412 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1318);
        _1408 = _1392.x * cbModelParam._m0[1u].z;
        _1410 = _1392.y * cbModelParam._m0[1u].z;
        _1412 = _1392.z * cbModelParam._m0[1u].z;
    }
    float _1424 = _511 * 0.01200000010430812835693359375;
    float _1426 = _1424 * ((cbModelParam._m0[1u].w * (_1408 - _1311)) + _1311);
    float _1427 = _1424 * ((cbModelParam._m0[1u].w * (_1410 - _1313)) + _1313);
    float _1428 = _1424 * ((cbModelParam._m0[1u].w * (_1412 - _1315)) + _1315);
    float _1431 = fma(_1428, cbSceneParam._m0[89u].z, fma(_1427, cbSceneParam._m0[89u].y, _1426 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1428, cbSceneParam._m0[90u].z, fma(_1427, cbSceneParam._m0[90u].y, _1426 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1428, cbSceneParam._m0[91u].z, fma(_1427, cbSceneParam._m0[91u].y, _1426 * cbSceneParam._m0[91u].x));
    vec4 _1445 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_472, _473));
    float _1447 = _1445.w;
    float _1460 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1447);
    float _1461 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1447);
    float _1462 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1447);
    uvec4 _1467 = floatBitsToUint(cbInstanceData._m0[_486 + 5u]);
    uint _1469 = _1467.x * 14u;
    uint _1470 = _1469 + 13u;
    float _1475 = _511 + (-1.0);
    float _1478 = (cbLight._m0[_1470].x * _1475) + 1.0;
    float _1479 = (cbLight._m0[_1470].y * _1475) + 1.0;
    uint _1480 = _1469 + 5u;
    float _1486 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
    uint _1490 = _1469 + 4u;
    float _1499 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
    uint _1503 = _1469 | 1u;
    float _1514 = dot(vec3(cbLight._m0[_1469].xyz), vec3(0.0));
    float _1517 = dot(vec3(cbLight._m0[_1503].xyz), vec3(0.0));
    float _3173 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _3184 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1522 = (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0))) * 0.3183098733425140380859375;
    float _1524 = (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0))) * 0.3183098733425140380859375;
    float _1531 = ((cbLight._m0[_1480].x * _1486) * _1524) + (((cbLight._m0[_1490].x * _1460) * _1499) * _1522);
    float _1532 = ((_1486 * cbLight._m0[_1480].y) * _1524) + (((cbLight._m0[_1490].y * _1461) * _1499) * _1522);
    float _1533 = ((_1486 * cbLight._m0[_1480].z) * _1524) + (((cbLight._m0[_1490].z * _1462) * _1499) * _1522);
    uint _1534 = _1469 + 8u;
    float _1540 = cbLight._m0[_1469].x + _464;
    float _1541 = cbLight._m0[_1469].y + _465;
    float _1542 = cbLight._m0[_1469].z + _466;
    float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
    float _1550 = dot(vec3(0.0), vec3(cbLight._m0[_1469].xyz));
    float _3195 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1553 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _1554 = dot(vec3(0.0), vec3(_464, _465, _466));
    float _3206 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
    float _1557 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _1558 = dot(vec3(cbLight._m0[_1469].xyz), vec3(_1540 * _1546, _1541 * _1546, _1542 * _1546));
    float _3217 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
    float _1569 = (exp2(log2(1.0 - (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1575 = (0.5 / ((_1553 + 9.9999999392252902907785028219223e-09) + _1557)) * _1553;
    float _3228 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1577 = (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * 0.31831014156341552734375;
    uint _1591 = _1469 + 9u;
    float _1597 = cbLight._m0[_1503].x + _464;
    float _1598 = cbLight._m0[_1503].y + _465;
    float _1599 = cbLight._m0[_1503].z + _466;
    float _1603 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
    float _1607 = dot(vec3(0.0), vec3(cbLight._m0[_1503].xyz));
    float _3239 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1610 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _1611 = dot(vec3(cbLight._m0[_1503].xyz), vec3(_1597 * _1603, _1598 * _1603, _1599 * _1603));
    float _3250 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1620 = (exp2(log2(1.0 - (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1624 = (0.5 / ((_1610 + 9.9999999392252902907785028219223e-09) + _1557)) * _1610;
    float _3261 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1626 = (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * 0.31831014156341552734375;
    float _1636 = (((_1620 * cbLight._m0[_1591].x) * _1626) * _1486) + ((((cbLight._m0[_1534].x * _1460) * _1569) * _1577) * _1499);
    float _1637 = (((_1620 * cbLight._m0[_1591].y) * _1626) * _1486) + ((((cbLight._m0[_1534].y * _1461) * _1569) * _1577) * _1499);
    float _1638 = (((_1620 * cbLight._m0[_1591].z) * _1626) * _1486) + ((((cbLight._m0[_1534].z * _1462) * _1569) * _1577) * _1499);
    float _1755;
    float _1757;
    float _1759;
    float _1761;
    float _1763;
    float _1765;
    if (_1467.y == 0u)
    {
        float _1694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1694;
        float _1696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1694;
        float _1697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1694;
        uvec4 _1709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1710 = _1709.x;
        uint _1721 = uint((float(_1709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _473) / _1710))) + floor(float(uint(cbSceneParam._m0[85u].x * _472) / _1710)));
        float _1731 = (log2(_1697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1732 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        uint _1735 = uint(isnan(14.0) ? _1732 : (isnan(_1732) ? 14.0 : min(_1732, 14.0)));
        uvec4 _1741 = texelFetch(g_lightClusterGridBuffer, int(((_1735 << 2u) + (_1721 << 6u)) >> 2u));
        uint _1742 = _1741.x;
        uint _1743 = _1709.z;
        float _1833;
        float _1835;
        float _1837;
        float _1839;
        float _1841;
        float _1843;
        if (((((1u << ((_1743 >> 4u) & 15u)) + 4294967295u) & _1742) == 0u) || ((_1743 & 240u) == 0u))
        {
            _1833 = 0.0;
            _1835 = 0.0;
            _1837 = 0.0;
            _1839 = 0.0;
            _1841 = 0.0;
            _1843 = 0.0;
        }
        else
        {
            float _1834;
            float _1836;
            float _1838;
            float _1840;
            float _1842;
            float _1844;
            float _2007 = 0.0;
            float _2008 = 0.0;
            float _2009 = 0.0;
            float _2010 = 0.0;
            float _2011 = 0.0;
            float _2012 = 0.0;
            uint _2013 = 0u;
            uint _2022;
            bool _2023;
            for (;;)
            {
                _2022 = texelFetch(g_lightClassification, int((((_1735 << 5u) + (_1721 << 9u)) + (_2013 << 2u)) >> 2u)).x;
                _2023 = _2022 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2023)
                {
                    frontier_phi_62_pred = _2008;
                    frontier_phi_62_pred_1 = _2007;
                    frontier_phi_62_pred_2 = _2009;
                    frontier_phi_62_pred_3 = _2012;
                    frontier_phi_62_pred_4 = _2011;
                    frontier_phi_62_pred_5 = _2010;
                }
                else
                {
                    float _2182;
                    float _2183;
                    float _2184;
                    float _2185;
                    float _2186;
                    float _2187;
                    uint _2188;
                    _2182 = _2007;
                    _2183 = _2008;
                    _2184 = _2009;
                    _2185 = _2010;
                    _2186 = _2011;
                    _2187 = _2012;
                    _2188 = _2022;
                    float _2088;
                    float _2089;
                    float _2090;
                    float _2091;
                    float _2092;
                    float _2093;
                    for (;;)
                    {
                        uint _2192 = uint(findLSB(_2188)) + (_2013 << 5u);
                        uint _2189 = (_2188 + 4294967295u) & _2188;
                        uint _2194 = _2192 * 48u;
                        vec4 _2208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2194)).x, texelFetch(g_PointLightRenderingBuffer, int(_2194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2194 + 3u)).x));
                        uint _2214 = (_2192 * 48u) + 4u;
                        vec4 _2227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2214)).x, texelFetch(g_PointLightRenderingBuffer, int(_2214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2214 + 3u)).x));
                        uint _2233 = (_2192 * 48u) + 8u;
                        vec3 _2244 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2233)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 2u)).x));
                        float _2248 = _2208.x - _1695;
                        float _2249 = _2208.y - _1696;
                        float _2250 = _2208.z - _1697;
                        float _2251 = dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250));
                        float _2254 = inversesqrt(_2251);
                        float _2263 = 1.0 - (_2251 * _2208.w);
                        float _3282 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
                        float _2264 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
                        float _2265 = sqrt(_2251) * _2227.w;
                        float _2268 = 1.39999997615814208984375 / (_2265 + 1.39999997615814208984375);
                        float _2269 = _2268 * _2268;
                        float _2272 = ((1.0 - _2269) * dot(vec3(0.0), vec3(_2254 * _2248, _2254 * _2249, _2254 * _2250))) + _2269;
                        float _2275 = _2265 * _2265;
                        float _2279 = ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2264) / ((_2275 * 0.699999988079071044921875) + 1.0);
                        float _2283 = (-0.0) - _1695;
                        float _2284 = (-0.0) - _1696;
                        float _2285 = (-0.0) - _1697;
                        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
                        float _2293 = dot(vec3(0.0), vec3(_2289 * _2283, _2289 * _2284, _2289 * _2285));
                        float _3298 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
                        float _3309 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
                        float _2297 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
                        float _2301 = (0.5 / (((isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) + 9.9999999392252902907785028219223e-09) + _2297)) * _2297;
                        float _3320 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
                        float _2310 = (((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * 3.1415927410125732421875) / ((_2275 * 2.1991131305694580078125) + 3.141590118408203125)) * _2264;
                        _2091 = (_2279 * _2227.x) + _2185;
                        _2092 = (_2279 * _2227.y) + _2186;
                        _2093 = (_2279 * _2227.z) + _2187;
                        _2088 = (_2310 * _2244.x) + _2182;
                        _2089 = (_2310 * _2244.y) + _2183;
                        _2090 = (_2310 * _2244.z) + _2184;
                        if (_2189 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2182 = _2088;
                            _2183 = _2089;
                            _2184 = _2090;
                            _2185 = _2091;
                            _2186 = _2092;
                            _2187 = _2093;
                            _2188 = _2189;
                        }
                    }
                    frontier_phi_62_pred = _2089;
                    frontier_phi_62_pred_1 = _2088;
                    frontier_phi_62_pred_2 = _2090;
                    frontier_phi_62_pred_3 = _2093;
                    frontier_phi_62_pred_4 = _2092;
                    frontier_phi_62_pred_5 = _2091;
                }
                _1836 = frontier_phi_62_pred;
                _1834 = frontier_phi_62_pred_1;
                _1838 = frontier_phi_62_pred_2;
                _1844 = frontier_phi_62_pred_3;
                _1842 = frontier_phi_62_pred_4;
                _1840 = frontier_phi_62_pred_5;
                uint _2014 = _2013 + 1u;
                if (_2014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2007 = _1834;
                    _2008 = _1836;
                    _2009 = _1838;
                    _2010 = _1840;
                    _2011 = _1842;
                    _2012 = _1844;
                    _2013 = _2014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1833 = _1834;
            _1835 = _1836;
            _1837 = _1838;
            _1839 = _1840;
            _1841 = _1842;
            _1843 = _1844;
        }
        uvec4 _1847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1848 = _1847.z;
        uint _1850 = (_1848 >> 8u) & 15u;
        float _1978;
        float _1980;
        float _1982;
        float _1984;
        float _1986;
        float _1988;
        if (((4294967295u << _1850) & _1742) == 0u)
        {
            _1978 = _1833;
            _1980 = _1835;
            _1982 = _1837;
            _1984 = _1839;
            _1986 = _1841;
            _1988 = _1843;
        }
        else
        {
            float _2003 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_1850 < ((_1848 >> 12u) & 15u))
            {
                float _1979;
                float _1981;
                float _1983;
                float _1985;
                float _1987;
                float _1989;
                float _2165 = _1833;
                float _2166 = _1835;
                float _2167 = _1837;
                float _2168 = _1839;
                float _2169 = _1841;
                float _2170 = _1843;
                uint _2171 = _1850;
                uint _2180;
                bool _2181;
                for (;;)
                {
                    _2180 = texelFetch(g_lightClassification, int((((_1735 << 5u) + (_1721 << 9u)) + (_2171 << 2u)) >> 2u)).x;
                    _2181 = _2180 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2181)
                    {
                        frontier_phi_71_pred = _2166;
                        frontier_phi_71_pred_1 = _2165;
                        frontier_phi_71_pred_2 = _2170;
                        frontier_phi_71_pred_3 = _2169;
                        frontier_phi_71_pred_4 = _2168;
                        frontier_phi_71_pred_5 = _2167;
                    }
                    else
                    {
                        float _2336;
                        float _2337;
                        float _2338;
                        float _2339;
                        float _2340;
                        float _2341;
                        float _2585;
                        float _2586;
                        float _2587;
                        float _2588;
                        float _2589;
                        float _2590;
                        float _2349 = _2165;
                        float _2350 = _2166;
                        float _2351 = _2167;
                        float _2352 = _2168;
                        float _2353 = _2169;
                        float _2354 = _2170;
                        uint _2355 = _2180;
                        uint _2356;
                        vec4 _2381;
                        float _2382;
                        vec4 _2397;
                        vec3 _2409;
                        vec4 _2424;
                        vec4 _2439;
                        float _2485;
                        bool _2486;
                        for (;;)
                        {
                            uint _2366 = ((_2171 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2355));
                            _2356 = (_2355 + 4294967295u) & _2355;
                            uint _2368 = _2366 * 40u;
                            _2381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 3u)).x));
                            _2382 = _2381.w;
                            uint _2384 = (_2366 * 40u) + 4u;
                            _2397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2384 + 3u)).x));
                            uint _2399 = (_2366 * 40u) + 8u;
                            _2409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2399 + 2u)).x));
                            uint _2411 = (_2366 * 40u) + 16u;
                            _2424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 3u)).x));
                            uint _2426 = (_2366 * 40u) + 20u;
                            _2439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 3u)).x));
                            uint _2441 = (_2366 * 40u) + 24u;
                            vec4 _2454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2441 + 3u)).x));
                            uint _2460 = (_2366 * 40u) + 28u;
                            vec4 _2473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 3u)).x));
                            _2485 = fma(_1697, _2473.z, fma(_1696, _2473.y, _2473.x * _1695)) + _2473.w;
                            _2486 = !((fma(_1697, _2454.z, fma(_1696, _2454.y, _2454.x * _1695)) + _2454.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2486)
                            {
                                float _2513 = _2381.x - _1695;
                                float _2514 = _2381.y - _1696;
                                float _2515 = _2381.z - _1697;
                                float _2516 = dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515));
                                float _2519 = inversesqrt(_2516);
                                float _2520 = _2519 * _2513;
                                float _2521 = _2519 * _2514;
                                float _2522 = _2519 * _2515;
                                float _2526 = 1.0 - (_2516 / (_2382 * _2382));
                                float _3331 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
                                float _2527 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
                                float _2531 = sqrt(_2516) * _2397.w;
                                float _2533 = 1.39999997615814208984375 / (_2531 + 1.39999997615814208984375);
                                float _2534 = _2533 * _2533;
                                float _2535 = 1.0 - _2534;
                                float _2537 = (_2535 * dot(vec3(_2520, _2521, _2522), vec3(0.0))) + _2534;
                                float _2540 = _2531 * _2531;
                                float _2544 = (fma(_1697, _2424.z, fma(_1696, _2424.y, _2424.x * _1695)) + _2424.w) / _2485;
                                float _2545 = (fma(_1697, _2439.z, fma(_1696, _2439.y, _2439.x * _1695)) + _2439.w) / _2485;
                                float _2549 = 1.0 - dot(vec2(_2544, _2545), vec2(_2544, _2545));
                                float _3347 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                                float _2550 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
                                float _2551 = _2550 * (((isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))) * _2527) / ((_2540 * 0.699999988079071044921875) + 1.0));
                                float _2561 = dot(vec3(0.0), vec3((-0.0) - (_1695 * _2003), (-0.0) - (_1696 * _2003), (-0.0) - (_1697 * _2003)));
                                float _3358 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                                float _2569 = (_2535 * dot(vec3(0.0), vec3(_2520, _2521, _2522))) + _2534;
                                float _3369 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                                float _2570 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
                                float _2574 = (0.5 / (((isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) + 9.9999999392252902907785028219223e-09) + _2570)) * _2570;
                                float _3380 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                                float _2581 = (_2550 * _2527) * (((isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * 3.1415927410125732421875) / ((_2540 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2581 * _2409.y;
                                frontier_phi_77_pred_1 = _2581 * _2409.x;
                                frontier_phi_77_pred_2 = _2551 * _2397.z;
                                frontier_phi_77_pred_3 = _2551 * _2397.y;
                                frontier_phi_77_pred_4 = _2551 * _2397.x;
                                frontier_phi_77_pred_5 = _2581 * _2409.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2586 = frontier_phi_77_pred;
                            _2585 = frontier_phi_77_pred_1;
                            _2590 = frontier_phi_77_pred_2;
                            _2589 = frontier_phi_77_pred_3;
                            _2588 = frontier_phi_77_pred_4;
                            _2587 = frontier_phi_77_pred_5;
                            _2339 = _2588 + _2352;
                            _2340 = _2589 + _2353;
                            _2341 = _2590 + _2354;
                            _2336 = _2585 + _2349;
                            _2337 = _2586 + _2350;
                            _2338 = _2587 + _2351;
                            if (_2356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2349 = _2336;
                                _2350 = _2337;
                                _2351 = _2338;
                                _2352 = _2339;
                                _2353 = _2340;
                                _2354 = _2341;
                                _2355 = _2356;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2337;
                        frontier_phi_71_pred_1 = _2336;
                        frontier_phi_71_pred_2 = _2341;
                        frontier_phi_71_pred_3 = _2340;
                        frontier_phi_71_pred_4 = _2339;
                        frontier_phi_71_pred_5 = _2338;
                    }
                    _1981 = frontier_phi_71_pred;
                    _1979 = frontier_phi_71_pred_1;
                    _1989 = frontier_phi_71_pred_2;
                    _1987 = frontier_phi_71_pred_3;
                    _1985 = frontier_phi_71_pred_4;
                    _1983 = frontier_phi_71_pred_5;
                    uint _2172 = _2171 + 1u;
                    if (_2172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2165 = _1979;
                        _2166 = _1981;
                        _2167 = _1983;
                        _2168 = _1985;
                        _2169 = _1987;
                        _2170 = _1989;
                        _2171 = _2172;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1989;
                frontier_phi_53_54_ladder_1 = _1985;
                frontier_phi_53_54_ladder_2 = _1983;
                frontier_phi_53_54_ladder_3 = _1981;
                frontier_phi_53_54_ladder_4 = _1979;
                frontier_phi_53_54_ladder_5 = _1987;
            }
            else
            {
                frontier_phi_53_54_ladder = _1843;
                frontier_phi_53_54_ladder_1 = _1839;
                frontier_phi_53_54_ladder_2 = _1837;
                frontier_phi_53_54_ladder_3 = _1835;
                frontier_phi_53_54_ladder_4 = _1833;
                frontier_phi_53_54_ladder_5 = _1841;
            }
            _1978 = frontier_phi_53_54_ladder_4;
            _1980 = frontier_phi_53_54_ladder_3;
            _1982 = frontier_phi_53_54_ladder_2;
            _1984 = frontier_phi_53_54_ladder_1;
            _1986 = frontier_phi_53_54_ladder_5;
            _1988 = frontier_phi_53_54_ladder;
        }
        float _1993 = isnan(1.0) ? _511 : (isnan(_511) ? 1.0 : min(_511, 1.0));
        _1755 = (_1993 * _1984) + _1531;
        _1757 = (_1993 * _1986) + _1532;
        _1759 = (_1993 * _1988) + _1533;
        _1761 = ((_1978 * 0.039999999105930328369140625) * _1993) + _1636;
        _1763 = ((_1980 * 0.039999999105930328369140625) * _1993) + _1637;
        _1765 = ((_1982 * 0.039999999105930328369140625) * _1993) + _1638;
    }
    else
    {
        _1755 = _1531;
        _1757 = _1532;
        _1759 = _1533;
        _1761 = _1636;
        _1763 = _1637;
        _1765 = _1638;
    }
    float _3396 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3407 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3418 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _1782 = ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1755 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _511))) + ((_1761 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1219)) * cbPerFrame._m0[3u].x);
    float _1783 = ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_1757 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _511))) + ((_1763 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1219)) * cbPerFrame._m0[3u].x);
    float _1784 = ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1759 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _511))) + ((_1765 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1219)) * cbPerFrame._m0[3u].x);
    uint _1788 = _486 + 6u;
    float _1796 = _472 / cbSceneParam._m0[86u].x;
    float _1797 = _473 / cbSceneParam._m0[86u].y;
    vec4 _1811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1813 = _1811.x;
    float _1814 = _1811.y;
    float _1815 = _1811.z;
    float _1816 = _1811.w;
    float _1896;
    float _1898;
    float _1900;
    float _1902;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _1858 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _1859 = _1858 / _459;
        float _1870 = _1859 * _252;
        float _1871 = _253 * _1859;
        float _1872 = (-0.0) - _1871;
        float _1873 = _1859 * _254;
        float _1875 = (cbSceneParam._m0[77u].w * _1872) / _1858;
        float _1876 = _1875 + cbSceneParam._m0[79u].w;
        float _1877 = cbSceneParam._m0[79u].w - _1871;
        float _1883 = sqrt(((_1870 * _1870) + (_1871 * _1871)) + (_1873 * _1873));
        float _1886 = (1.0 - (cbSceneParam._m0[77u].w / _1858)) * _1883;
        float _1892 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1894 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2101;
        if (abs((_1872 - _1875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2101 = ((((_1876 > 0.0) ? exp2(_1892 * _1876) : (2.0 - exp2(_1894 * _1876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1886;
        }
        else
        {
            float _2036 = 1.0 / cbSceneParam._m0[80u].x;
            float _2037 = isnan(_1877) ? _1876 : (isnan(_1876) ? _1877 : max(_1876, _1877));
            float _2038 = isnan(_1877) ? _1876 : (isnan(_1876) ? _1877 : min(_1876, _1877));
            float _2047 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : min(_2037, 0.0));
            float _2048 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : min(_2038, 0.0));
            _2101 = ((abs(_1883 / _1872) * cbSceneParam._m0[80u].y) * ((((_2047 - _2048) * 2.0) - ((exp2(_1892 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)))) - exp2(_1892 * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))))) * _2036)) - ((exp2(_1894 * _2047) - exp2(_1894 * _2048)) * _2036))) + (_1886 * cbSceneParam._m0[80u].z);
        }
        vec4 _2103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1796, _1797, 1.0), 0.0);
        float _2112 = exp2((_2101 * (-1.44269502162933349609375)) * (1.0 - _2103.w));
        float _2113 = log2(_2112);
        float _2129 = log2(_1816);
        _1896 = (exp2(_2129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2113 * cbSceneParam._m0[78u].x)) * _2103.x) / cbSceneParam._m0[78u].x)) + _1813;
        _1898 = (exp2(_2129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2113 * cbSceneParam._m0[78u].y)) * _2103.y) / cbSceneParam._m0[78u].y)) + _1814;
        _1900 = (exp2(_2129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2113 * cbSceneParam._m0[78u].z)) * _2103.z) / cbSceneParam._m0[78u].z)) + _1815;
        _1902 = _2112 * _1816;
    }
    else
    {
        _1896 = _1813;
        _1898 = _1814;
        _1900 = _1815;
        _1902 = _1816;
    }
    float _1914 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1915 = _1914 == 3.0;
    float _1917 = log2(_1902);
    float _1924 = exp2(_1917 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
    float _1925 = exp2(_1917 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    float _1926 = exp2(_1917 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
    float _1935 = (_1914 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1935 * (_1915 ? _1924 : (_1924 + (cbSceneParam._m0[72u].w * _1896)));
    SV_Target.y = _1935 * (_1915 ? _1925 : (_1925 + (cbSceneParam._m0[72u].w * _1898)));
    SV_Target.z = _1935 * (_1915 ? _1926 : (_1926 + (cbSceneParam._m0[72u].w * _1900)));
    SV_Target.w = cbInstanceData._m0[_1788].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1788].w;
}


