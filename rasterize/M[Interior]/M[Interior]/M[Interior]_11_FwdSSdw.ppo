#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _786;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    vec4 _276 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _311 = cbMtdParam._m0[21u].w + _252;
    float _312 = cbMtdParam._m0[22u].x + _253;
    float _313 = cbMtdParam._m0[22u].y + _254;
    float _330 = (-0.0) - dot(vec3(_311, _312, _313), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _331 = (-0.0) - dot(vec3(_311, _312, _313), vec3(_194 * TANGENT.x, _194 * TANGENT.y, _194 * TANGENT.z));
    float _332 = (-0.0) - dot(vec3(_311, _312, _313), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _336 = inversesqrt(dot(vec3(_330, _331, _332), vec3(_330, _331, _332)));
    float _339 = _336 * _332;
    float _342 = ((_336 * _330) + (((_276.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _343 = ((_336 * _331) + (((_276.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _344 = fract(TEXCOORD.x);
    float _345 = fract(TEXCOORD.y);
    float _351;
    if (_342 > 0.0)
    {
        _351 = (1.0 - _344) / _342;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_342 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _344) / _342;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _351 = frontier_phi_3_2_ladder;
    }
    float _359;
    if (_343 > 0.0)
    {
        _359 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _359 = frontier_phi_7_6_ladder;
    }
    float _363 = (_339 > 0.0) ? (cbMtdParam._m0[15u].x / _339) : 5000.0;
    float _364 = isnan(_359) ? _351 : (isnan(_351) ? _359 : min(_351, _359));
    float _365 = isnan(_363) ? _364 : (isnan(_364) ? _363 : min(_364, _363));
    float _369 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _376 = ((_365 * _339) + _369) / _369;
    vec4 _400 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_344 + (-0.5)) + (_365 * _342)) / _376) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_345 + (-0.5)) + (_365 * _343)) / _376) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _410 = cbMtdParam._m0[9u].x * _400.x;
    float _411 = cbMtdParam._m0[9u].y * _400.y;
    float _412 = cbMtdParam._m0[9u].z * _400.z;
    float _2699 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _2710 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _2721 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _431 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _435 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _436 = _252 * _435;
    float _437 = _253 * _435;
    float _438 = _254 * _435;
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _458 = uint(roundEven(NORMAL.w)) * 13u;
    uint _461 = (_458 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2699 : (isnan(_2699) ? 1.0 : min(_2699, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2710 : (isnan(_2710) ? 1.0 : min(_2710, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2721 : (isnan(_2721) ? 1.0 : min(_2721, 1.0)))) * cbInstanceData._m0[_461].z;
    float _2732 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _2732 : (isnan(_2732) ? 1.0 : min(_2732, 1.0));
    float _2743 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _2743 : (isnan(_2743) ? 1.0 : min(_2743, 1.0));
    float _2754 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _2754 : (isnan(_2754) ? 1.0 : min(_2754, 1.0));
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = (-0.0) - _436;
    float _486 = (-0.0) - _437;
    float _487 = (-0.0) - _438;
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _785;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _573 = (cbModelParam._m0[37u].x * ((((fma(_517, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _575 = (cbModelParam._m0[37u].y * ((((fma(_517, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _576 = (((((fma(_517, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_573, _575, _576), 0.0);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_573, _575, _576), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_573, _575, _576), 0.0);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_573, _575, _576), 0.0);
        float _613 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_579.x + (-0.5));
        float _615 = _613 * (_579.y + (-0.5));
        float _616 = _613 * (_579.z + (-0.5));
        float _623 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_586.x + (-0.5));
        float _625 = _623 * (_586.y + (-0.5));
        float _626 = _623 * (_586.z + (-0.5));
        float _633 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_593.x + (-0.5));
        float _635 = _633 * (_593.y + (-0.5));
        float _636 = _633 * (_593.z + (-0.5));
        float _643 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_600.x + (-0.5));
        float _645 = _643 * (_600.y + (-0.5));
        float _646 = _643 * (_600.z + (-0.5));
        float _647 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = _614 * 0.5;
        float _651 = _624 * 0.5;
        float _652 = _634 * 0.5;
        float _653 = dot(vec3(_650, _651, _652), vec3(_650, _651, _652));
        float _658 = (_653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_653);
        float _667 = (dot(vec3(0.0), vec3(_658 * _650, _658 * _651, _658 * _652)) + 1.0) * 0.5;
        float _2780 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _677 = sqrt(((_651 * _651) + (_650 * _650)) + (_652 * _652)) / (_647 + 9.9999997473787516355514526367188e-06);
        float _2791 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _2802 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0))) * (_679 + 1.0))) + _684) * _647;
        float _694 = _615 * 0.5;
        float _695 = _625 * 0.5;
        float _696 = _635 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _710 = (dot(vec3(0.0), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _2813 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _719 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _2824 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _2835 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0))) * (_721 + 1.0))) + _726) * _648;
        float _736 = _616 * 0.5;
        float _737 = _626 * 0.5;
        float _738 = _636 * 0.5;
        float _739 = dot(vec3(_736, _737, _738), vec3(_736, _737, _738));
        float _744 = (_739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_739);
        float _752 = (dot(vec3(0.0), vec3(_744 * _736, _744 * _737, _744 * _738)) + 1.0) * 0.5;
        float _2846 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _761 = sqrt(((_737 * _737) + (_736 * _736)) + (_738 * _738)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _2857 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
        float _763 = _762 * 2.0;
        float _767 = (1.0 - _762) / (_762 + 1.0);
        float _2868 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0));
        float _777 = ((((1.0 - _768) * (_763 + 2.0)) * exp2(log2(isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0))) * (_763 + 1.0))) + _768) * _649;
        _785 = _616;
        _787 = _615;
        _788 = _614;
        _789 = _626;
        _790 = _625;
        _791 = _624;
        _792 = _636;
        _793 = _635;
        _794 = _634;
        _795 = _649;
        _796 = _648;
        _797 = _647;
        _798 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0)));
    }
    else
    {
        _785 = _786;
        _787 = _786;
        _788 = _786;
        _789 = _786;
        _790 = _786;
        _791 = _786;
        _792 = _786;
        _793 = _786;
        _794 = _786;
        _795 = _786;
        _796 = _786;
        _797 = _786;
        _798 = 0.0;
        _799 = 0.0;
        _800 = 0.0;
    }
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _854 = (cbModelParam._m0[38u].x * ((((fma(_517, cbModelParam._m0[30u].z, fma(_513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _509)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _855 = (cbModelParam._m0[38u].y * ((((fma(_517, cbModelParam._m0[31u].z, fma(_513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _509)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _856 = (((((fma(_517, cbModelParam._m0[32u].z, fma(_513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _509)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_858.x + (-0.5));
        float _893 = _891 * (_858.y + (-0.5));
        float _894 = _891 * (_858.z + (-0.5));
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_865.x + (-0.5));
        float _903 = _901 * (_865.y + (-0.5));
        float _904 = _901 * (_865.z + (-0.5));
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_872.x + (-0.5));
        float _913 = _911 * (_872.y + (-0.5));
        float _914 = _911 * (_872.z + (-0.5));
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _944 = (dot(vec3(0.0), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _2909 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _953 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _2920 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _2920 : (isnan(_2920) ? 1.0 : min(_2920, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _2931 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _2909 : (isnan(_2909) ? 1.0 : min(_2909, 1.0))) * (_955 + 1.0))) + _960) * _925;
        float _970 = _893 * 0.5;
        float _971 = _903 * 0.5;
        float _972 = _913 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(0.0), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _2942 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _2953 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _2964 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0))) * (_997 + 1.0))) + _1002) * _926;
        float _1012 = _894 * 0.5;
        float _1013 = _904 * 0.5;
        float _1014 = _914 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(0.0), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _2975 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _2986 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _2997 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0))) * (_1039 + 1.0))) + _1044) * _927;
        _1061 = _894;
        _1062 = _893;
        _1063 = _892;
        _1064 = _904;
        _1065 = _903;
        _1066 = _902;
        _1067 = _914;
        _1068 = _913;
        _1069 = _912;
        _1070 = _927;
        _1071 = _926;
        _1072 = _925;
        _1073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _786;
        _1062 = _786;
        _1063 = _786;
        _1064 = _786;
        _1065 = _786;
        _1066 = _786;
        _1067 = _786;
        _1068 = _786;
        _1069 = _786;
        _1070 = _786;
        _1071 = _786;
        _1072 = _786;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1085 = (cbModelParam._m0[1u].x * (_1073 - _798)) + _798;
    float _1086 = (cbModelParam._m0[1u].x * (_1074 - _799)) + _799;
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _800)) + _800;
    float _1108 = fma(_1087, cbSceneParam._m0[89u].z, fma(_1086, cbSceneParam._m0[89u].y, _1085 * cbSceneParam._m0[89u].x));
    float _1111 = fma(_1087, cbSceneParam._m0[90u].z, fma(_1086, cbSceneParam._m0[90u].y, _1085 * cbSceneParam._m0[90u].x));
    float _1114 = fma(_1087, cbSceneParam._m0[91u].z, fma(_1086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1085));
    float _1129 = _436 * (-0.5);
    float _1130 = _437 * (-0.5);
    float _1131 = _438 * (-0.5);
    float _1132 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1135 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1062, _1065, _1068, _1071));
    float _1138 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_1061, _1064, _1067, _1070));
    float _1172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1145 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_785, _789, _792, _795));
        float _1149 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_787, _790, _793, _796));
        float _1153 = dot(vec4(_1129, _1130, _1131, 1.0), vec4(_788, _791, _794, _797));
        float _1160 = dot(vec4(cbModelParam._m0[39u]), vec4(_1129, _1130, _1131, 1.0));
        _1172 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1172 = 1.0;
    }
    float _1183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1174 = dot(vec4(cbModelParam._m0[40u]), vec4(_1129, _1130, _1131, 1.0));
        _1183 = dot(vec3(isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1174) ? 0.0 : (isnan(0.0) ? _1174 : max(0.0, _1174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1183 = 1.0;
    }
    float _1187 = (_1183 * cbModelParam._m0[1u].x) + (_1172 * (1.0 - cbModelParam._m0[1u].x));
    float _1196 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1278;
    float _1280;
    float _1282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1245 = fma(_517, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509)) + cbModelParam._m0[13u].w;
        float _1249 = fma(_517, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509)) + cbModelParam._m0[14u].w;
        float _1253 = fma(_517, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509)) + cbModelParam._m0[15u].w;
        float _1256 = fma(_487, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485));
        float _1259 = fma(_487, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485));
        float _1262 = fma(_487, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485));
        float _1288;
        if (_1256 > 0.0)
        {
            _1288 = abs((1.0 - _1245) / _1256);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1245 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1288 = frontier_phi_22_20_ladder;
        }
        float _1609;
        if (_1259 > 0.0)
        {
            _1609 = abs((1.0 - _1249) / _1259);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1249 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1609 = frontier_phi_31_27_ladder;
        }
        float _1912;
        if (_1262 > 0.0)
        {
            _1912 = abs((1.0 - _1253) / _1262);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1253 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1912 = frontier_phi_45_38_ladder;
        }
        float _1914 = isnan(_1609) ? _1288 : (isnan(_1288) ? _1609 : min(_1288, _1609));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1256) + _1245;
        float _1920 = (_1915 * _1259) + _1249;
        float _1921 = (_1915 * _1262) + _1253;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1923 = (-1.0) - _1922;
        float _1925 = _1922 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1921 > _1925) || ((_1921 < _1923) || ((_1920 > _1925) || ((_1920 < _1923) || ((_1919 < _1923) || (_1919 > _1925))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1196);
            frontier_phi_21_45_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1278 = frontier_phi_21_45_ladder_2;
        _1280 = frontier_phi_21_45_ladder_1;
        _1282 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_485, _486, _487), _1196);
        _1278 = _1266.x * cbModelParam._m0[1u].y;
        _1280 = _1266.y * cbModelParam._m0[1u].y;
        _1282 = _1266.z * cbModelParam._m0[1u].y;
    }
    float _1285 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1337 = fma(_517, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509)) + cbModelParam._m0[21u].w;
        float _1341 = fma(_517, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509)) + cbModelParam._m0[22u].w;
        float _1345 = fma(_517, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509)) + cbModelParam._m0[23u].w;
        float _1348 = fma(_487, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485));
        float _1351 = fma(_487, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485));
        float _1354 = fma(_487, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485));
        float _1614;
        if (_1348 > 0.0)
        {
            _1614 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1614 = frontier_phi_33_29_ladder;
        }
        float _1938;
        if (_1351 > 0.0)
        {
            _1938 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1938 = frontier_phi_47_40_ladder;
        }
        float _2104;
        if (_1354 > 0.0)
        {
            _2104 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2104 = frontier_phi_61_56_ladder;
        }
        float _2106 = isnan(_1938) ? _1614 : (isnan(_1614) ? _1938 : min(_1614, _1938));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1348) + _1337;
        float _2112 = (_2107 * _1351) + _1341;
        float _2113 = (_2107 * _1354) + _1345;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2114;
        float _2117 = _2114 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2113 > _2117) || ((_2113 < _2115) || ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 < _2115) || (_2111 > _2117))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2113, cbModelParam._m0[17u].z, fma(_2112, cbModelParam._m0[17u].y, _2111 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2113, cbModelParam._m0[18u].z, fma(_2112, cbModelParam._m0[18u].y, _2111 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2113, cbModelParam._m0[19u].z, fma(_2112, cbModelParam._m0[19u].y, _2111 * cbModelParam._m0[19u].x))), _1285);
            frontier_phi_30_61_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1373 = frontier_phi_30_61_ladder_2;
        _1375 = frontier_phi_30_61_ladder_1;
        _1377 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1357 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_485, _486, _487), _1285);
        _1373 = _1357.x * cbModelParam._m0[1u].z;
        _1375 = _1357.y * cbModelParam._m0[1u].z;
        _1377 = _1357.z * cbModelParam._m0[1u].z;
    }
    float _1389 = _484 * 0.01200000010430812835693359375;
    float _1391 = _1389 * ((cbModelParam._m0[1u].w * (_1373 - _1278)) + _1278);
    float _1392 = _1389 * ((cbModelParam._m0[1u].w * (_1375 - _1280)) + _1280);
    float _1393 = _1389 * ((cbModelParam._m0[1u].w * (_1377 - _1282)) + _1282);
    float _1396 = fma(_1393, cbSceneParam._m0[89u].z, fma(_1392, cbSceneParam._m0[89u].y, _1391 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1393, cbSceneParam._m0[90u].z, fma(_1392, cbSceneParam._m0[90u].y, _1391 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1393, cbSceneParam._m0[91u].z, fma(_1392, cbSceneParam._m0[91u].y, _1391 * cbSceneParam._m0[91u].x));
    vec4 _1410 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_444, _445));
    float _1412 = _1410.w;
    float _1425 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1412);
    float _1426 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1412);
    float _1427 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1412);
    uvec4 _1432 = floatBitsToUint(cbInstanceData._m0[_458 + 5u]);
    uint _1434 = _1432.x * 14u;
    uint _1435 = _1434 + 13u;
    float _1440 = _484 + (-1.0);
    float _1443 = (cbLight._m0[_1435].x * _1440) + 1.0;
    float _1444 = (cbLight._m0[_1435].y * _1440) + 1.0;
    uint _1445 = _1434 + 5u;
    float _1451 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
    uint _1455 = _1434 + 4u;
    float _1464 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
    uint _1468 = _1434 | 1u;
    float _1479 = dot(vec3(cbLight._m0[_1434].xyz), vec3(0.0));
    float _1482 = dot(vec3(cbLight._m0[_1468].xyz), vec3(0.0));
    float _3133 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _3144 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _1487 = (isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * 0.3183098733425140380859375;
    float _1489 = (isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))) * 0.3183098733425140380859375;
    float _1496 = ((cbLight._m0[_1445].x * _1451) * _1489) + (((cbLight._m0[_1455].x * _1425) * _1464) * _1487);
    float _1497 = ((_1451 * cbLight._m0[_1445].y) * _1489) + (((cbLight._m0[_1455].y * _1426) * _1464) * _1487);
    float _1498 = ((_1451 * cbLight._m0[_1445].z) * _1489) + (((cbLight._m0[_1455].z * _1427) * _1464) * _1487);
    uint _1499 = _1434 + 8u;
    float _1505 = cbLight._m0[_1434].x + _436;
    float _1506 = cbLight._m0[_1434].y + _437;
    float _1507 = cbLight._m0[_1434].z + _438;
    float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
    float _1515 = dot(vec3(0.0), vec3(cbLight._m0[_1434].xyz));
    float _3155 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _1518 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
    float _1519 = dot(vec3(0.0), vec3(_436, _437, _438));
    float _3166 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _1522 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
    float _1523 = dot(vec3(cbLight._m0[_1434].xyz), vec3(_1505 * _1511, _1506 * _1511, _1507 * _1511));
    float _3177 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1534 = (exp2(log2(1.0 - (isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1540 = (0.5 / ((_1518 + 9.9999999392252902907785028219223e-09) + _1522)) * _1518;
    float _3188 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1542 = (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * 0.31831014156341552734375;
    uint _1556 = _1434 + 9u;
    float _1562 = cbLight._m0[_1468].x + _436;
    float _1563 = cbLight._m0[_1468].y + _437;
    float _1564 = cbLight._m0[_1468].z + _438;
    float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
    float _1572 = dot(vec3(0.0), vec3(cbLight._m0[_1468].xyz));
    float _3199 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1575 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _1576 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_1562 * _1568, _1563 * _1568, _1564 * _1568));
    float _3210 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
    float _1585 = (exp2(log2(1.0 - (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1589 = (0.5 / ((_1575 + 9.9999999392252902907785028219223e-09) + _1522)) * _1575;
    float _3221 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1591 = (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * 0.31831014156341552734375;
    float _1601 = (((_1585 * cbLight._m0[_1556].x) * _1591) * _1451) + ((((cbLight._m0[_1499].x * _1425) * _1534) * _1542) * _1464);
    float _1602 = (((_1585 * cbLight._m0[_1556].y) * _1591) * _1451) + ((((cbLight._m0[_1499].y * _1426) * _1534) * _1542) * _1464);
    float _1603 = (((_1585 * cbLight._m0[_1556].z) * _1591) * _1451) + ((((cbLight._m0[_1499].z * _1427) * _1534) * _1542) * _1464);
    float _1720;
    float _1722;
    float _1724;
    float _1726;
    float _1728;
    float _1730;
    if (_1432.y == 0u)
    {
        float _1659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1659;
        float _1661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1659;
        float _1662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1659;
        uvec4 _1674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1675 = _1674.x;
        uint _1686 = uint((float(_1674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _1675))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _1675)));
        float _1696 = (log2(_1662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1697 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        uint _1700 = uint(isnan(14.0) ? _1697 : (isnan(_1697) ? 14.0 : min(_1697, 14.0)));
        uvec4 _1706 = texelFetch(g_lightClusterGridBuffer, int(((_1700 << 2u) + (_1686 << 6u)) >> 2u));
        uint _1707 = _1706.x;
        uint _1708 = _1674.z;
        float _1798;
        float _1800;
        float _1802;
        float _1804;
        float _1806;
        float _1808;
        if (((((1u << ((_1708 >> 4u) & 15u)) + 4294967295u) & _1707) == 0u) || ((_1708 & 240u) == 0u))
        {
            _1798 = 0.0;
            _1800 = 0.0;
            _1802 = 0.0;
            _1804 = 0.0;
            _1806 = 0.0;
            _1808 = 0.0;
        }
        else
        {
            float _1799;
            float _1801;
            float _1803;
            float _1805;
            float _1807;
            float _1809;
            float _1972 = 0.0;
            float _1973 = 0.0;
            float _1974 = 0.0;
            float _1975 = 0.0;
            float _1976 = 0.0;
            float _1977 = 0.0;
            uint _1978 = 0u;
            uint _1987;
            bool _1988;
            for (;;)
            {
                _1987 = texelFetch(g_lightClassification, int((((_1700 << 5u) + (_1686 << 9u)) + (_1978 << 2u)) >> 2u)).x;
                _1988 = _1987 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_1988)
                {
                    frontier_phi_58_pred = _1973;
                    frontier_phi_58_pred_1 = _1977;
                    frontier_phi_58_pred_2 = _1976;
                    frontier_phi_58_pred_3 = _1975;
                    frontier_phi_58_pred_4 = _1974;
                    frontier_phi_58_pred_5 = _1972;
                }
                else
                {
                    float _2147;
                    float _2148;
                    float _2149;
                    float _2150;
                    float _2151;
                    float _2152;
                    uint _2153;
                    _2147 = _1972;
                    _2148 = _1973;
                    _2149 = _1974;
                    _2150 = _1975;
                    _2151 = _1976;
                    _2152 = _1977;
                    _2153 = _1987;
                    float _2053;
                    float _2054;
                    float _2055;
                    float _2056;
                    float _2057;
                    float _2058;
                    for (;;)
                    {
                        uint _2157 = uint(findLSB(_2153)) + (_1978 << 5u);
                        uint _2154 = (_2153 + 4294967295u) & _2153;
                        uint _2159 = _2157 * 48u;
                        vec4 _2173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2159)).x, texelFetch(g_PointLightRenderingBuffer, int(_2159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2159 + 3u)).x));
                        uint _2179 = (_2157 * 48u) + 4u;
                        vec4 _2192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2179)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2179 + 3u)).x));
                        uint _2198 = (_2157 * 48u) + 8u;
                        vec3 _2209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2198)).x, texelFetch(g_PointLightRenderingBuffer, int(_2198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2198 + 2u)).x));
                        float _2213 = _2173.x - _1660;
                        float _2214 = _2173.y - _1661;
                        float _2215 = _2173.z - _1662;
                        float _2216 = dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215));
                        float _2219 = inversesqrt(_2216);
                        float _2228 = 1.0 - (_2216 * _2173.w);
                        float _3242 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
                        float _2229 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
                        float _2230 = sqrt(_2216) * _2192.w;
                        float _2233 = 1.39999997615814208984375 / (_2230 + 1.39999997615814208984375);
                        float _2234 = _2233 * _2233;
                        float _2237 = ((1.0 - _2234) * dot(vec3(0.0), vec3(_2219 * _2213, _2219 * _2214, _2219 * _2215))) + _2234;
                        float _2240 = _2230 * _2230;
                        float _2244 = ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2229) / ((_2240 * 0.699999988079071044921875) + 1.0);
                        float _2248 = (-0.0) - _1660;
                        float _2249 = (-0.0) - _1661;
                        float _2250 = (-0.0) - _1662;
                        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
                        float _2258 = dot(vec3(0.0), vec3(_2254 * _2248, _2254 * _2249, _2254 * _2250));
                        float _3258 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
                        float _3269 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
                        float _2262 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
                        float _2266 = (0.5 / (((isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) + 9.9999999392252902907785028219223e-09) + _2262)) * _2262;
                        float _3280 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
                        float _2275 = (((isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) * 3.1415927410125732421875) / ((_2240 * 2.1991131305694580078125) + 3.141590118408203125)) * _2229;
                        _2056 = (_2244 * _2192.x) + _2150;
                        _2057 = (_2244 * _2192.y) + _2151;
                        _2058 = (_2244 * _2192.z) + _2152;
                        _2053 = (_2275 * _2209.x) + _2147;
                        _2054 = (_2275 * _2209.y) + _2148;
                        _2055 = (_2275 * _2209.z) + _2149;
                        if (_2154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2147 = _2053;
                            _2148 = _2054;
                            _2149 = _2055;
                            _2150 = _2056;
                            _2151 = _2057;
                            _2152 = _2058;
                            _2153 = _2154;
                        }
                    }
                    frontier_phi_58_pred = _2054;
                    frontier_phi_58_pred_1 = _2058;
                    frontier_phi_58_pred_2 = _2057;
                    frontier_phi_58_pred_3 = _2056;
                    frontier_phi_58_pred_4 = _2055;
                    frontier_phi_58_pred_5 = _2053;
                }
                _1801 = frontier_phi_58_pred;
                _1809 = frontier_phi_58_pred_1;
                _1807 = frontier_phi_58_pred_2;
                _1805 = frontier_phi_58_pred_3;
                _1803 = frontier_phi_58_pred_4;
                _1799 = frontier_phi_58_pred_5;
                uint _1979 = _1978 + 1u;
                if (_1979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1972 = _1799;
                    _1973 = _1801;
                    _1974 = _1803;
                    _1975 = _1805;
                    _1976 = _1807;
                    _1977 = _1809;
                    _1978 = _1979;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1798 = _1799;
            _1800 = _1801;
            _1802 = _1803;
            _1804 = _1805;
            _1806 = _1807;
            _1808 = _1809;
        }
        uvec4 _1812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1813 = _1812.z;
        uint _1815 = (_1813 >> 8u) & 15u;
        float _1943;
        float _1945;
        float _1947;
        float _1949;
        float _1951;
        float _1953;
        if (((4294967295u << _1815) & _1707) == 0u)
        {
            _1943 = _1798;
            _1945 = _1800;
            _1947 = _1802;
            _1949 = _1804;
            _1951 = _1806;
            _1953 = _1808;
        }
        else
        {
            float _1968 = inversesqrt(dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_1815 < ((_1813 >> 12u) & 15u))
            {
                float _1944;
                float _1946;
                float _1948;
                float _1950;
                float _1952;
                float _1954;
                float _2130 = _1798;
                float _2131 = _1800;
                float _2132 = _1802;
                float _2133 = _1804;
                float _2134 = _1806;
                float _2135 = _1808;
                uint _2136 = _1815;
                uint _2145;
                bool _2146;
                for (;;)
                {
                    _2145 = texelFetch(g_lightClassification, int((((_1700 << 5u) + (_1686 << 9u)) + (_2136 << 2u)) >> 2u)).x;
                    _2146 = _2145 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2146)
                    {
                        frontier_phi_67_pred = _2135;
                        frontier_phi_67_pred_1 = _2134;
                        frontier_phi_67_pred_2 = _2133;
                        frontier_phi_67_pred_3 = _2132;
                        frontier_phi_67_pred_4 = _2131;
                        frontier_phi_67_pred_5 = _2130;
                    }
                    else
                    {
                        float _2301;
                        float _2302;
                        float _2303;
                        float _2304;
                        float _2305;
                        float _2306;
                        float _2551;
                        float _2552;
                        float _2553;
                        float _2554;
                        float _2555;
                        float _2556;
                        float _2314 = _2130;
                        float _2315 = _2131;
                        float _2316 = _2132;
                        float _2317 = _2133;
                        float _2318 = _2134;
                        float _2319 = _2135;
                        uint _2320 = _2145;
                        uint _2321;
                        vec4 _2346;
                        float _2347;
                        vec4 _2362;
                        vec3 _2374;
                        vec4 _2390;
                        vec4 _2405;
                        float _2451;
                        bool _2452;
                        for (;;)
                        {
                            uint _2331 = ((_2136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2320));
                            _2321 = (_2320 + 4294967295u) & _2320;
                            uint _2333 = _2331 * 40u;
                            _2346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 3u)).x));
                            _2347 = _2346.w;
                            uint _2349 = (_2331 * 40u) + 4u;
                            _2362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 3u)).x));
                            uint _2364 = (_2331 * 40u) + 8u;
                            _2374 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2364 + 2u)).x));
                            uint _2377 = (_2331 * 40u) + 16u;
                            _2390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2377 + 3u)).x));
                            uint _2392 = (_2331 * 40u) + 20u;
                            _2405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2392 + 3u)).x));
                            uint _2407 = (_2331 * 40u) + 24u;
                            vec4 _2420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2407 + 3u)).x));
                            uint _2426 = (_2331 * 40u) + 28u;
                            vec4 _2439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 3u)).x));
                            _2451 = fma(_1662, _2439.z, fma(_1661, _2439.y, _2439.x * _1660)) + _2439.w;
                            _2452 = !((fma(_1662, _2420.z, fma(_1661, _2420.y, _2420.x * _1660)) + _2420.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2452)
                            {
                                float _2479 = _2346.x - _1660;
                                float _2480 = _2346.y - _1661;
                                float _2481 = _2346.z - _1662;
                                float _2482 = dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481));
                                float _2485 = inversesqrt(_2482);
                                float _2486 = _2485 * _2479;
                                float _2487 = _2485 * _2480;
                                float _2488 = _2485 * _2481;
                                float _2492 = 1.0 - (_2482 / (_2347 * _2347));
                                float _3291 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
                                float _2493 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
                                float _2497 = sqrt(_2482) * _2362.w;
                                float _2499 = 1.39999997615814208984375 / (_2497 + 1.39999997615814208984375);
                                float _2500 = _2499 * _2499;
                                float _2501 = 1.0 - _2500;
                                float _2503 = (_2501 * dot(vec3(_2486, _2487, _2488), vec3(0.0))) + _2500;
                                float _2506 = _2497 * _2497;
                                float _2510 = (fma(_1662, _2390.z, fma(_1661, _2390.y, _2390.x * _1660)) + _2390.w) / _2451;
                                float _2511 = (fma(_1662, _2405.z, fma(_1661, _2405.y, _2405.x * _1660)) + _2405.w) / _2451;
                                float _2515 = 1.0 - dot(vec2(_2510, _2511), vec2(_2510, _2511));
                                float _3307 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                                float _2516 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
                                float _2517 = _2516 * (((isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))) * _2493) / ((_2506 * 0.699999988079071044921875) + 1.0));
                                float _2527 = dot(vec3(0.0), vec3((-0.0) - (_1660 * _1968), (-0.0) - (_1661 * _1968), (-0.0) - (_1662 * _1968)));
                                float _3318 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
                                float _2535 = (_2501 * dot(vec3(0.0), vec3(_2486, _2487, _2488))) + _2500;
                                float _3329 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                                float _2536 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
                                float _2540 = (0.5 / (((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) + 9.9999999392252902907785028219223e-09) + _2536)) * _2536;
                                float _3340 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
                                float _2547 = (_2516 * _2493) * (((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * 3.1415927410125732421875) / ((_2506 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2517 * _2362.z;
                                frontier_phi_73_pred_1 = _2517 * _2362.y;
                                frontier_phi_73_pred_2 = _2517 * _2362.x;
                                frontier_phi_73_pred_3 = _2547 * _2374.z;
                                frontier_phi_73_pred_4 = _2547 * _2374.y;
                                frontier_phi_73_pred_5 = _2547 * _2374.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2556 = frontier_phi_73_pred;
                            _2555 = frontier_phi_73_pred_1;
                            _2554 = frontier_phi_73_pred_2;
                            _2553 = frontier_phi_73_pred_3;
                            _2552 = frontier_phi_73_pred_4;
                            _2551 = frontier_phi_73_pred_5;
                            _2304 = _2554 + _2317;
                            _2305 = _2555 + _2318;
                            _2306 = _2556 + _2319;
                            _2301 = _2551 + _2314;
                            _2302 = _2552 + _2315;
                            _2303 = _2553 + _2316;
                            if (_2321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2314 = _2301;
                                _2315 = _2302;
                                _2316 = _2303;
                                _2317 = _2304;
                                _2318 = _2305;
                                _2319 = _2306;
                                _2320 = _2321;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2306;
                        frontier_phi_67_pred_1 = _2305;
                        frontier_phi_67_pred_2 = _2304;
                        frontier_phi_67_pred_3 = _2303;
                        frontier_phi_67_pred_4 = _2302;
                        frontier_phi_67_pred_5 = _2301;
                    }
                    _1954 = frontier_phi_67_pred;
                    _1952 = frontier_phi_67_pred_1;
                    _1950 = frontier_phi_67_pred_2;
                    _1948 = frontier_phi_67_pred_3;
                    _1946 = frontier_phi_67_pred_4;
                    _1944 = frontier_phi_67_pred_5;
                    uint _2137 = _2136 + 1u;
                    if (_2137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2130 = _1944;
                        _2131 = _1946;
                        _2132 = _1948;
                        _2133 = _1950;
                        _2134 = _1952;
                        _2135 = _1954;
                        _2136 = _2137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1950;
                frontier_phi_49_50_ladder_1 = _1954;
                frontier_phi_49_50_ladder_2 = _1952;
                frontier_phi_49_50_ladder_3 = _1948;
                frontier_phi_49_50_ladder_4 = _1946;
                frontier_phi_49_50_ladder_5 = _1944;
            }
            else
            {
                frontier_phi_49_50_ladder = _1804;
                frontier_phi_49_50_ladder_1 = _1808;
                frontier_phi_49_50_ladder_2 = _1806;
                frontier_phi_49_50_ladder_3 = _1802;
                frontier_phi_49_50_ladder_4 = _1800;
                frontier_phi_49_50_ladder_5 = _1798;
            }
            _1943 = frontier_phi_49_50_ladder_5;
            _1945 = frontier_phi_49_50_ladder_4;
            _1947 = frontier_phi_49_50_ladder_3;
            _1949 = frontier_phi_49_50_ladder;
            _1951 = frontier_phi_49_50_ladder_2;
            _1953 = frontier_phi_49_50_ladder_1;
        }
        float _1958 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _1720 = (_1958 * _1949) + _1496;
        _1722 = (_1958 * _1951) + _1497;
        _1724 = (_1958 * _1953) + _1498;
        _1726 = ((_1943 * 0.039999999105930328369140625) * _1958) + _1601;
        _1728 = ((_1945 * 0.039999999105930328369140625) * _1958) + _1602;
        _1730 = ((_1947 * 0.039999999105930328369140625) * _1958) + _1603;
    }
    else
    {
        _1720 = _1496;
        _1722 = _1497;
        _1724 = _1498;
        _1726 = _1601;
        _1728 = _1602;
        _1730 = _1603;
    }
    float _3356 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3367 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3378 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1747 = ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_1720 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _484))) + ((_1726 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _1748 = ((isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_1722 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _484))) + ((_1728 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    float _1749 = ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_1724 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _484))) + ((_1730 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1187)) * cbPerFrame._m0[3u].x);
    uint _1753 = _458 + 6u;
    float _1761 = _444 / cbSceneParam._m0[86u].x;
    float _1762 = _445 / cbSceneParam._m0[86u].y;
    vec4 _1776 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1761, _1762, (log2((isnan(cbSceneParam._m0[77u].w) ? _431 : (isnan(_431) ? cbSceneParam._m0[77u].w : min(_431, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1778 = _1776.x;
    float _1779 = _1776.y;
    float _1780 = _1776.z;
    float _1781 = _1776.w;
    float _1861;
    float _1863;
    float _1865;
    float _1867;
    if (_431 > cbSceneParam._m0[78u].w)
    {
        float _1823 = isnan(_431) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _431 : min(cbSceneParam._m0[80u].w, _431));
        float _1824 = _1823 / _431;
        float _1835 = _1824 * _252;
        float _1836 = _253 * _1824;
        float _1837 = (-0.0) - _1836;
        float _1838 = _1824 * _254;
        float _1840 = (cbSceneParam._m0[77u].w * _1837) / _1823;
        float _1841 = _1840 + cbSceneParam._m0[79u].w;
        float _1842 = cbSceneParam._m0[79u].w - _1836;
        float _1848 = sqrt(((_1835 * _1835) + (_1836 * _1836)) + (_1838 * _1838));
        float _1851 = (1.0 - (cbSceneParam._m0[77u].w / _1823)) * _1848;
        float _1857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2066;
        if (abs((_1837 - _1840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2066 = ((((_1841 > 0.0) ? exp2(_1857 * _1841) : (2.0 - exp2(_1859 * _1841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1851;
        }
        else
        {
            float _2001 = 1.0 / cbSceneParam._m0[80u].x;
            float _2002 = isnan(_1842) ? _1841 : (isnan(_1841) ? _1842 : max(_1841, _1842));
            float _2003 = isnan(_1842) ? _1841 : (isnan(_1841) ? _1842 : min(_1841, _1842));
            float _2012 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : min(_2002, 0.0));
            float _2013 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : min(_2003, 0.0));
            _2066 = ((abs(_1848 / _1837) * cbSceneParam._m0[80u].y) * ((((_2012 - _2013) * 2.0) - ((exp2(_1857 * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)))) - exp2(_1857 * (isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))))) * _2001)) - ((exp2(_1859 * _2012) - exp2(_1859 * _2013)) * _2001))) + (_1851 * cbSceneParam._m0[80u].z);
        }
        vec4 _2068 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1761, _1762, 1.0), 0.0);
        float _2077 = exp2((_2066 * (-1.44269502162933349609375)) * (1.0 - _2068.w));
        float _2078 = log2(_2077);
        float _2094 = log2(_1781);
        _1861 = (exp2(_2094 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2078 * cbSceneParam._m0[78u].x)) * _2068.x) / cbSceneParam._m0[78u].x)) + _1778;
        _1863 = (exp2(_2094 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2078 * cbSceneParam._m0[78u].y)) * _2068.y) / cbSceneParam._m0[78u].y)) + _1779;
        _1865 = (exp2(_2094 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2078 * cbSceneParam._m0[78u].z)) * _2068.z) / cbSceneParam._m0[78u].z)) + _1780;
        _1867 = _2077 * _1781;
    }
    else
    {
        _1861 = _1778;
        _1863 = _1779;
        _1865 = _1780;
        _1867 = _1781;
    }
    float _1879 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1880 = _1879 == 3.0;
    float _1882 = log2(_1867);
    float _1889 = exp2(_1882 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
    float _1890 = exp2(_1882 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    float _1891 = exp2(_1882 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
    float _1900 = (_1879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1900 * (_1880 ? _1889 : (_1889 + (cbSceneParam._m0[72u].w * _1861)));
    SV_Target.y = _1900 * (_1880 ? _1890 : (_1890 + (cbSceneParam._m0[72u].w * _1863)));
    SV_Target.z = _1900 * (_1880 ? _1891 : (_1891 + (cbSceneParam._m0[72u].w * _1865)));
    SV_Target.w = cbInstanceData._m0[_1753].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1753].w;
}


