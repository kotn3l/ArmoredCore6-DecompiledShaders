#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1171;
float _3346;
float _3347;
float _3348;
float _3349;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _347 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _383 = cbMtdParam._m0[21u].w + _269;
    float _384 = cbMtdParam._m0[22u].x + _270;
    float _385 = cbMtdParam._m0[22u].y + _271;
    float _399 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_198, _199, _200));
    float _400 = (-0.0) - dot(vec3(_383, _384, _385), vec3(_212, _213, _214));
    float _401 = (-0.0) - dot(vec3(_383, _384, _385), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _408 = _405 * _401;
    float _409 = (_405 * _399) + ((cbMtdParam._m0[19u].w * _287) * ((_347.x * 2.0) + (-1.0)));
    float _410 = (_405 * _400) + ((cbMtdParam._m0[20u].x * _287) * ((_347.y * 2.0) + (-1.0)));
    float _411 = _409 * cbMtdParam._m0[18u].z;
    float _412 = _410 * cbMtdParam._m0[18u].y;
    float _413 = fract(TEXCOORD.x);
    float _414 = fract(TEXCOORD.y);
    float _420;
    if (_411 > 0.0)
    {
        _420 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _420 = frontier_phi_3_2_ladder;
    }
    float _428;
    if (_412 > 0.0)
    {
        _428 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _428 = frontier_phi_7_6_ladder;
    }
    bool _430 = _408 > 0.0;
    float _432 = _430 ? (cbMtdParam._m0[15u].x / _408) : 5000.0;
    float _433 = isnan(_428) ? _420 : (isnan(_420) ? _428 : min(_420, _428));
    float _434 = isnan(_432) ? _433 : (isnan(_433) ? _432 : min(_433, _432));
    float _438 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = _413 + (-0.5);
    float _442 = _414 + (-0.5);
    float _445 = ((_434 * _408) + _438) / _438;
    vec4 _469 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_439 + (_434 * _411)) / _445) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_442 + (_434 * _412)) / _445) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _482 = (_469.x * _287) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _287) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _287) * cbMtdParam._m0[9u].z;
    float _502 = _409 * cbMtdParam._m0[20u].z;
    float _503 = _410 * cbMtdParam._m0[20u].y;
    bool _504 = _502 > 0.0;
    float _509;
    if (_504)
    {
        _509 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _509 = frontier_phi_11_10_ladder;
    }
    bool _511 = _503 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _516 = frontier_phi_15_14_ladder;
    }
    float _519 = _430 ? (cbMtdParam._m0[16u].x / _408) : 5000.0;
    float _520 = isnan(_516) ? _509 : (isnan(_509) ? _516 : min(_509, _516));
    float _521 = isnan(_519) ? _520 : (isnan(_520) ? _519 : min(_520, _519));
    float _525 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _529 = ((_521 * _408) + _525) / _525;
    float _534 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _536 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _552 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_439 + (_521 * _502)) / _529) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_442 + (_521 * _503)) / _529) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _567;
    if (_504)
    {
        _567 = (1.0 - _413) / _502;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _413) / _502;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _567 = frontier_phi_19_18_ladder;
    }
    float _573;
    if (_511)
    {
        _573 = (1.0 - _414) / _503;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _414) / _503;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _573 = frontier_phi_23_22_ladder;
    }
    float _575 = isnan(_573) ? _567 : (isnan(_567) ? _573 : min(_567, _573));
    float _576 = isnan(_519) ? _575 : (isnan(_575) ? _519 : min(_575, _519));
    float _583 = ((_576 * _408) + _525) / _525;
    vec4 _604 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_439 + (_576 * _502)) / _583) + 0.5) + _534) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_442 + (_576 * _503)) / _583) + 0.5) + _536) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    vec4 _630 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _634 = _630.z;
    float _637 = (_630.x * 2.0) + (-1.0);
    float _638 = (_630.y * 2.0) + (-1.0);
    float _639 = dot(vec2(_637, _638), vec2(_637, _638));
    float _3388 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _644 = sqrt(1.0 - (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))));
    float _647 = fma(_644, _205, fma(_638, _212, _637 * _198));
    float _650 = fma(_644, _206, fma(_638, _213, _637 * _199));
    float _653 = fma(_644, _207, fma(_638, _214, _637 * _200));
    float _657 = inversesqrt(dot(vec3(_647, _650, _653), vec3(_647, _650, _653)));
    float _658 = _657 * _647;
    float _659 = _657 * _650;
    float _660 = _657 * _653;
    float _3399 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _661 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _3410 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3421 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3432 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _684 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _685 = _269 * _684;
    float _686 = _270 * _684;
    float _687 = _271 * _684;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _852 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _858 = (cbMatDynParam._m0[5u].x * _852) + cbMatDynParam._m0[5u].y;
        float _3443 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _863 = (cbMatDynParam._m0[5u].z * _852) + cbMatDynParam._m0[5u].w;
        float _3454 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) - _859)) + _859) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_660, cbSceneParam._m0[5u].z, fma(_659, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _658));
    float _730 = fma(_660, cbSceneParam._m0[6u].z, fma(_659, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _658));
    float _733 = fma(_660, cbSceneParam._m0[7u].z, fma(_659, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _658));
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _748 = _746 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3465 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _772 = _769.x * TEXCOORD.z;
    float _773 = dot(vec3(_658, _659, _660), vec3(_685, _686, _687));
    float _776 = _773 * 2.0;
    float _780 = (_776 * _658) - _685;
    float _781 = (_776 * _659) - _686;
    float _782 = (_776 * _660) - _687;
    float _786 = abs(dot(vec3(_685, _686, _687), vec3(_658, _659, _660)));
    float _3498 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _788 = sqrt(_661);
    float _801 = exp2((_788 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_788 * 3.0));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _901 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _905 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _928 = _833 + _658;
        float _929 = _837 + _659;
        float _930 = _841 + _660;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_658, _659, _660), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3546 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_658, _659, _660), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3579 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_658, _659, _660), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3612 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1218 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1222 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1245 = _833 + _658;
        float _1246 = _837 + _659;
        float _1247 = _841 + _660;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_658, _659, _660), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3675 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_658, _659, _660), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3708 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_658, _659, _660), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3741 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = _1171;
        _1493 = _1171;
        _1494 = _1171;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _780 * 0.5;
    float _1552 = _781 * 0.5;
    float _1553 = _782 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _661);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_782, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780));
        float _1682 = fma(_782, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780));
        float _1685 = fma(_782, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1713 = frontier_phi_41_39_ladder;
        }
        float _2082;
        if (_1682 > 0.0)
        {
            _2082 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2082 = frontier_phi_50_46_ladder;
        }
        float _2406;
        if (_1685 > 0.0)
        {
            _2406 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2406 = frontier_phi_64_57_ladder;
        }
        float _2408 = isnan(_2082) ? _1713 : (isnan(_1713) ? _2082 : min(_1713, _2082));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1679) + _1668;
        float _2414 = (_2409 * _1682) + _1672;
        float _2415 = (_2409 * _1685) + _1676;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_40_64_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_40_64_ladder_2;
        _1703 = frontier_phi_40_64_ladder_1;
        _1705 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_780, _781, _782), _1620);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _661);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_782, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780));
        float _1776 = fma(_782, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780));
        float _1779 = fma(_782, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780));
        float _2087;
        if (_1773 > 0.0)
        {
            _2087 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2087 = frontier_phi_52_48_ladder;
        }
        float _2432;
        if (_1776 > 0.0)
        {
            _2432 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2432 = frontier_phi_66_59_ladder;
        }
        float _2622;
        if (_1779 > 0.0)
        {
            _2622 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2622 = frontier_phi_84_77_ladder;
        }
        float _2624 = isnan(_2432) ? _2087 : (isnan(_2087) ? _2432 : min(_2087, _2432));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1773) + _1762;
        float _2630 = (_2625 * _1776) + _1766;
        float _2631 = (_2625 * _1779) + _1770;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_49_84_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_49_84_ladder_2;
        _1800 = frontier_phi_49_84_ladder_1;
        _1802 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_780, _781, _782), _1710);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _801) * ((_788 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_801 * _788)) * _772;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1705)) + _1705);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    vec4 _1834 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_706, _707));
    float _1836 = _1834.w;
    float _1848 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1836);
    float _1849 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1836);
    float _1850 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1836);
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1862 = _772 + (-1.0);
    float _1865 = (cbLight._m0[_1857].x * _1862) + 1.0;
    float _1866 = (cbLight._m0[_1857].y * _1862) + 1.0;
    uint _1867 = _1856 + 5u;
    float _1873 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1877 = _1856 + 4u;
    float _1886 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1890 = _1856 | 1u;
    float _1901 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_658, _659, _660));
    float _1904 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_658, _659, _660));
    float _3877 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _3888 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1909 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1911 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 0.3183098733425140380859375;
    float _1918 = ((cbLight._m0[_1867].x * _1873) * _1911) + (((cbLight._m0[_1877].x * _1848) * _1886) * _1909);
    float _1919 = ((_1873 * cbLight._m0[_1867].y) * _1911) + (((cbLight._m0[_1877].y * _1849) * _1886) * _1909);
    float _1920 = ((_1873 * cbLight._m0[_1867].z) * _1911) + (((cbLight._m0[_1877].z * _1850) * _1886) * _1909);
    uint _1922 = _1856 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _661) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1856].x + _685;
    float _1938 = cbLight._m0[_1856].y + _686;
    float _1939 = cbLight._m0[_1856].z + _687;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_1856].xyz));
    float _3899 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _1951 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1952 = dot(vec3(_658, _659, _660), vec3(_1944, _1945, _1946));
    float _3921 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_1944, _1945, _1946));
    float _3932 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1951 * ((_1950 * _1976) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1976) + _1936) * _1950))) * _1950;
    float _3943 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2003 = _1856 + 9u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _661) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1890].x + _685;
    float _2017 = cbLight._m0[_1890].y + _686;
    float _2018 = cbLight._m0[_1890].z + _687;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_1890].xyz));
    float _3954 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _2030 = dot(vec3(_658, _659, _660), vec3(_2023, _2024, _2025));
    float _3965 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2023, _2024, _2025));
    float _3976 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2015 * _2015;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2051 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2052 = 1.0 - _2015;
    float _2062 = (0.5 / (((_1951 * ((_2029 * _2052) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2052) + _2015) * _2029))) * _2029;
    float _3987 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    float _2074 = (((_2051 * cbLight._m0[_2003].x) * _2064) * _1873) + ((((cbLight._m0[_1922].x * _1848) * _1975) * _1989) * _1886);
    float _2075 = (((_2051 * cbLight._m0[_2003].y) * _2064) * _1873) + ((((cbLight._m0[_1922].y * _1849) * _1975) * _1989) * _1886);
    float _2076 = (((_2051 * cbLight._m0[_2003].z) * _2064) * _1873) + ((((cbLight._m0[_1922].z * _1850) * _1975) * _1989) * _1886);
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    if (_1854.y == 0u)
    {
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2131;
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2131;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2131;
        uvec4 _2146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2147 = _2146.x;
        uint _2158 = uint((float(_2146.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2147))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2147)));
        float _2168 = (log2(_2134 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2169 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        uint _2172 = uint(isnan(14.0) ? _2169 : (isnan(_2169) ? 14.0 : min(_2169, 14.0)));
        uvec4 _2177 = texelFetch(g_lightClusterGridBuffer, int(((_2172 << 2u) + (_2158 << 6u)) >> 2u));
        uint _2178 = _2177.x;
        uint _2179 = _2146.z;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        if (((((1u << ((_2179 >> 4u) & 15u)) + 4294967295u) & _2178) == 0u) || ((_2179 & 240u) == 0u))
        {
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
        }
        else
        {
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2485)
                {
                    frontier_phi_79_pred = _2474;
                    frontier_phi_79_pred_1 = _2473;
                    frontier_phi_79_pred_2 = _2472;
                    frontier_phi_79_pred_3 = _2471;
                    frontier_phi_79_pred_4 = _2470;
                    frontier_phi_79_pred_5 = _2469;
                }
                else
                {
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    uint _2671;
                    _2665 = _2469;
                    _2666 = _2470;
                    _2667 = _2471;
                    _2668 = _2472;
                    _2669 = _2473;
                    _2670 = _2474;
                    _2671 = _2484;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2675 = uint(findLSB(_2671)) + (_2475 << 5u);
                        uint _2672 = (_2671 + 4294967295u) & _2671;
                        uint _2677 = _2675 * 48u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2697 = (_2675 * 48u) + 4u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2716 = (_2675 * 48u) + 8u;
                        vec3 _2727 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x));
                        float _2731 = _2691.x - _2132;
                        float _2732 = _2691.y - _2133;
                        float _2733 = _2691.z - _2134;
                        float _2734 = dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733));
                        float _2737 = inversesqrt(_2734);
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2741 = dot(vec3(_727, _730, _733), vec3(_2738, _2739, _2740));
                        float _2746 = 1.0 - (_2734 * _2691.w);
                        float _4008 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2748 = sqrt(_2734) * _2710.w;
                        float _2751 = 1.39999997615814208984375 / (_2748 + 1.39999997615814208984375);
                        float _2752 = _2751 * _2751;
                        float _2755 = ((1.0 - _2752) * _2741) + _2752;
                        float _2758 = _2748 * _2748;
                        float _2762 = ((isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))) * _2747) / ((_2758 * 0.699999988079071044921875) + 1.0);
                        float _2766 = (-0.0) - _2132;
                        float _2767 = (-0.0) - _2133;
                        float _2768 = (-0.0) - _2134;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2783 = exp2(log2(1.0 / ((_2758 * 3.5) + 5.0)) * 0.25);
                        float _2784 = 1.0 - _788;
                        float _2791 = sqrt(1.0 - ((1.0 - (_2784 * _2784)) * (1.0 - (_2783 * _2783))));
                        float _2792 = _2791 * _2791;
                        float _2793 = _2792 * _2792;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2796 = _2775 + _2740;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2804 = dot(vec3(_727, _730, _733), vec3(_2773, _2774, _2775));
                        float _4024 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2808 = dot(vec3(_727, _730, _733), vec3(_2800 * _2794, _2800 * _2795, _2800 * _2796));
                        float _4035 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2815 = ((_2811 * _2811) * (_2793 + (-1.0))) + 1.0;
                        float _2816 = _2751 * _2792;
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2741) + _2817;
                        float _4046 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2821 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2822 = 1.0 - _2792;
                        float _2832 = (0.5 / (((_2821 * ((_2807 * _2822) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2822) + _2792) * _2807))) * _2821;
                        float _4057 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2843 = (((_2793 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2815 * _2815) * ((_2758 * 2.1991131305694580078125) + 3.141590118408203125))) * _2747;
                        _2569 = (_2762 * _2710.x) + _2668;
                        _2570 = (_2762 * _2710.y) + _2669;
                        _2571 = (_2762 * _2710.z) + _2670;
                        _2566 = (_2843 * _2727.x) + _2665;
                        _2567 = (_2843 * _2727.y) + _2666;
                        _2568 = (_2843 * _2727.z) + _2667;
                        if (_2672 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2665 = _2566;
                            _2666 = _2567;
                            _2667 = _2568;
                            _2668 = _2569;
                            _2669 = _2570;
                            _2670 = _2571;
                            _2671 = _2672;
                        }
                    }
                    frontier_phi_79_pred = _2571;
                    frontier_phi_79_pred_1 = _2570;
                    frontier_phi_79_pred_2 = _2569;
                    frontier_phi_79_pred_3 = _2568;
                    frontier_phi_79_pred_4 = _2567;
                    frontier_phi_79_pred_5 = _2566;
                }
                _2296 = frontier_phi_79_pred;
                _2294 = frontier_phi_79_pred_1;
                _2292 = frontier_phi_79_pred_2;
                _2290 = frontier_phi_79_pred_3;
                _2288 = frontier_phi_79_pred_4;
                _2286 = frontier_phi_79_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2286;
                    _2470 = _2288;
                    _2471 = _2290;
                    _2472 = _2292;
                    _2473 = _2294;
                    _2474 = _2296;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
        }
        uvec4 _2299 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2300 = _2299.z;
        uint _2302 = (_2300 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2302) & _2178) == 0u)
        {
            _2437 = _2285;
            _2439 = _2287;
            _2441 = _2289;
            _2443 = _2291;
            _2445 = _2293;
            _2447 = _2295;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
            float _2463 = _2462 * _2132;
            float _2464 = _2462 * _2133;
            float _2465 = _2462 * _2134;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2302 < ((_2300 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2648 = _2285;
                float _2649 = _2287;
                float _2650 = _2289;
                float _2651 = _2291;
                float _2652 = _2293;
                float _2653 = _2295;
                uint _2654 = _2302;
                uint _2663;
                bool _2664;
                for (;;)
                {
                    _2663 = texelFetch(g_lightClassification, int((((_2172 << 5u) + (_2158 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                    _2664 = _2663 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2664)
                    {
                        frontier_phi_93_pred = _2652;
                        frontier_phi_93_pred_1 = _2651;
                        frontier_phi_93_pred_2 = _2650;
                        frontier_phi_93_pred_3 = _2649;
                        frontier_phi_93_pred_4 = _2648;
                        frontier_phi_93_pred_5 = _2653;
                    }
                    else
                    {
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _2891 = _2648;
                        float _2892 = _2649;
                        float _2893 = _2650;
                        float _2894 = _2651;
                        float _2895 = _2652;
                        float _2896 = _2653;
                        uint _2897 = _2663;
                        uint _2898;
                        vec4 _2923;
                        float _2924;
                        vec4 _2939;
                        vec3 _2951;
                        vec4 _2966;
                        vec4 _2981;
                        float _3027;
                        bool _3028;
                        for (;;)
                        {
                            uint _2908 = ((_2654 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2897));
                            _2898 = (_2897 + 4294967295u) & _2897;
                            uint _2910 = _2908 * 40u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            _2924 = _2923.w;
                            uint _2926 = (_2908 * 40u) + 4u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2941 = (_2908 * 40u) + 8u;
                            _2951 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x));
                            uint _2953 = (_2908 * 40u) + 16u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2968 = (_2908 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2908 * 40u) + 24u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _3002 = (_2908 * 40u) + 28u;
                            vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3027 = fma(_2134, _3015.z, fma(_2133, _3015.y, _3015.x * _2132)) + _3015.w;
                            _3028 = !((fma(_2134, _2996.z, fma(_2133, _2996.y, _2996.x * _2132)) + _2996.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3028)
                            {
                                float _3055 = _2923.x - _2132;
                                float _3056 = _2923.y - _2133;
                                float _3057 = _2923.z - _2134;
                                float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                                float _3061 = inversesqrt(_3058);
                                float _3062 = _3061 * _3055;
                                float _3063 = _3061 * _3056;
                                float _3064 = _3061 * _3057;
                                float _3068 = 1.0 - (_3058 / (_2924 * _2924));
                                float _4068 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3073 = sqrt(_3058) * _2939.w;
                                float _3075 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                                float _3076 = _3075 * _3075;
                                float _3079 = ((1.0 - _3076) * dot(vec3(_3062, _3063, _3064), vec3(_727, _730, _733))) + _3076;
                                float _3082 = _3073 * _3073;
                                float _3086 = (fma(_2134, _2966.z, fma(_2133, _2966.y, _2966.x * _2132)) + _2966.w) / _3027;
                                float _3087 = (fma(_2134, _2981.z, fma(_2133, _2981.y, _2981.x * _2132)) + _2981.w) / _3027;
                                float _3091 = 1.0 - dot(vec2(_3086, _3087), vec2(_3086, _3087));
                                float _4084 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3093 = _3092 * (((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3069) / ((_3082 * 0.699999988079071044921875) + 1.0));
                                float _3105 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                                float _3106 = 1.0 - _788;
                                float _3113 = sqrt(1.0 - ((1.0 - (_3106 * _3106)) * (1.0 - (_3105 * _3105))));
                                float _3114 = _3113 * _3113;
                                float _3115 = _3114 * _3114;
                                float _3116 = _3062 - _2463;
                                float _3117 = _3063 - _2464;
                                float _3118 = _3064 - _2465;
                                float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                                float _3126 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2463, (-0.0) - _2464, (-0.0) - _2465));
                                float _4095 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3130 = dot(vec3(_727, _730, _733), vec3(_3122 * _3116, _3122 * _3117, _3122 * _3118));
                                float _4106 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3137 = ((_3133 * _3133) * (_3115 + (-1.0))) + 1.0;
                                float _3138 = _3075 * _3114;
                                float _3139 = _3138 * _3138;
                                float _3145 = ((1.0 - _3139) * dot(vec3(_727, _730, _733), vec3(_3062, _3063, _3064))) + _3139;
                                float _4117 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3147 = 1.0 - _3114;
                                float _3157 = (0.5 / (((_3146 * ((_3129 * _3147) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_3146 * _3147) + _3114) * _3129))) * _3146;
                                float _4128 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3167 = (_3092 * _3069) * (((_3115 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3137 * _3137) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3093 * _2939.z;
                                frontier_phi_99_pred_1 = _3093 * _2939.y;
                                frontier_phi_99_pred_2 = _3093 * _2939.x;
                                frontier_phi_99_pred_3 = _3167 * _2951.z;
                                frontier_phi_99_pred_4 = _3167 * _2951.y;
                                frontier_phi_99_pred_5 = _3167 * _2951.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3176 = frontier_phi_99_pred;
                            _3175 = frontier_phi_99_pred_1;
                            _3174 = frontier_phi_99_pred_2;
                            _3173 = frontier_phi_99_pred_3;
                            _3172 = frontier_phi_99_pred_4;
                            _3171 = frontier_phi_99_pred_5;
                            _2881 = _3174 + _2894;
                            _2882 = _3175 + _2895;
                            _2883 = _3176 + _2896;
                            _2878 = _3171 + _2891;
                            _2879 = _3172 + _2892;
                            _2880 = _3173 + _2893;
                            if (_2898 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2898;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2882;
                        frontier_phi_93_pred_1 = _2881;
                        frontier_phi_93_pred_2 = _2880;
                        frontier_phi_93_pred_3 = _2879;
                        frontier_phi_93_pred_4 = _2878;
                        frontier_phi_93_pred_5 = _2883;
                    }
                    _2446 = frontier_phi_93_pred;
                    _2444 = frontier_phi_93_pred_1;
                    _2442 = frontier_phi_93_pred_2;
                    _2440 = frontier_phi_93_pred_3;
                    _2438 = frontier_phi_93_pred_4;
                    _2448 = frontier_phi_93_pred_5;
                    uint _2655 = _2654 + 1u;
                    if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2648 = _2438;
                        _2649 = _2440;
                        _2650 = _2442;
                        _2651 = _2444;
                        _2652 = _2446;
                        _2653 = _2448;
                        _2654 = _2655;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2448;
                frontier_phi_68_69_ladder_1 = _2446;
                frontier_phi_68_69_ladder_2 = _2444;
                frontier_phi_68_69_ladder_3 = _2442;
                frontier_phi_68_69_ladder_4 = _2438;
                frontier_phi_68_69_ladder_5 = _2440;
            }
            else
            {
                frontier_phi_68_69_ladder = _2295;
                frontier_phi_68_69_ladder_1 = _2293;
                frontier_phi_68_69_ladder_2 = _2291;
                frontier_phi_68_69_ladder_3 = _2289;
                frontier_phi_68_69_ladder_4 = _2285;
                frontier_phi_68_69_ladder_5 = _2287;
            }
            _2437 = frontier_phi_68_69_ladder_4;
            _2439 = frontier_phi_68_69_ladder_5;
            _2441 = frontier_phi_68_69_ladder_3;
            _2443 = frontier_phi_68_69_ladder_2;
            _2445 = frontier_phi_68_69_ladder_1;
            _2447 = frontier_phi_68_69_ladder;
        }
        float _2452 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
        _2191 = (_2452 * _2443) + _1918;
        _2193 = (_2452 * _2445) + _1919;
        _2195 = (_2452 * _2447) + _1920;
        _2197 = ((_2437 * 0.039999999105930328369140625) * _2452) + _2074;
        _2199 = ((_2439 * 0.039999999105930328369140625) * _2452) + _2075;
        _2201 = ((_2441 * 0.039999999105930328369140625) * _2452) + _2076;
    }
    else
    {
        _2191 = _1918;
        _2193 = _1919;
        _2195 = _1920;
        _2197 = _2074;
        _2199 = _2075;
        _2201 = _2076;
    }
    uint _2207 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _4144 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4155 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4166 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2232 = (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2191 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _772))) + ((_2197 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2207].x * ((((((cbMtdParam._m0[10u].x * _287) * _552.x) - _482) * _287) * _606) + _482));
    float _2234 = ((cbInstanceData._m0[_2207].y * ((((((cbMtdParam._m0[10u].y * _287) * _552.y) - _483) * _287) * _606) + _483)) + ((_2199 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2193 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _772)));
    float _2236 = ((cbInstanceData._m0[_2207].z * ((((((cbMtdParam._m0[10u].z * _287) * _552.z) - _484) * _287) * _606) + _484)) + ((_2201 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2195 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _772)));
    float _2237 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2238 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    uint _2240 = _746 + 6u;
    float _2248 = _706 / cbSceneParam._m0[86u].x;
    float _2249 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2263 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2248, _2249, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2265 = _2263.x;
    float _2266 = _2263.y;
    float _2267 = _2263.z;
    float _2268 = _2263.w;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _2310 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _2311 = _2310 / _680;
        float _2322 = _2311 * _269;
        float _2323 = _270 * _2311;
        float _2324 = (-0.0) - _2323;
        float _2325 = _2311 * _271;
        float _2327 = (cbSceneParam._m0[77u].w * _2324) / _2310;
        float _2328 = _2327 + cbSceneParam._m0[79u].w;
        float _2329 = cbSceneParam._m0[79u].w - _2323;
        float _2335 = sqrt(((_2322 * _2322) + (_2323 * _2323)) + (_2325 * _2325));
        float _2338 = (1.0 - (cbSceneParam._m0[77u].w / _2310)) * _2335;
        float _2344 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2346 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2579;
        if (abs((_2324 - _2327) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2579 = ((((_2328 > 0.0) ? exp2(_2344 * _2328) : (2.0 - exp2(_2346 * _2328))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2338;
        }
        else
        {
            float _2498 = 1.0 / cbSceneParam._m0[80u].x;
            float _2499 = isnan(_2329) ? _2328 : (isnan(_2328) ? _2329 : max(_2328, _2329));
            float _2500 = isnan(_2329) ? _2328 : (isnan(_2328) ? _2329 : min(_2328, _2329));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            _2579 = ((abs(_2335 / _2324) * cbSceneParam._m0[80u].y) * ((((_2509 - _2510) * 2.0) - ((exp2(_2344 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)))) - exp2(_2344 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))))) * _2498)) - ((exp2(_2346 * _2509) - exp2(_2346 * _2510)) * _2498))) + (_2338 * cbSceneParam._m0[80u].z);
        }
        vec4 _2581 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2248, _2249, 1.0), 0.0);
        float _2590 = exp2((_2579 * (-1.44269502162933349609375)) * (1.0 - _2581.w));
        float _2591 = log2(_2590);
        float _2607 = log2(_2268);
        _2348 = (exp2(_2607 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].x)) * _2581.x) / cbSceneParam._m0[78u].x)) + _2265;
        _2350 = (exp2(_2607 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].y)) * _2581.y) / cbSceneParam._m0[78u].y)) + _2266;
        _2352 = (exp2(_2607 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2591 * cbSceneParam._m0[78u].z)) * _2581.z) / cbSceneParam._m0[78u].z)) + _2267;
        _2354 = _2590 * _2268;
    }
    else
    {
        _2348 = _2265;
        _2350 = _2266;
        _2352 = _2267;
        _2354 = _2268;
    }
    bool _2617;
    vec4 _2364;
    vec4 _2386;
    float _2388;
    float _2392;
    float _2393;
    float _2394;
    float _2395;
    bool _2405;
    for (;;)
    {
        _2364 = cbMatDynParam._m0[0u];
        float _2366 = roundEven(_2364.y);
        bool _2367 = _2366 == 3.0;
        float _2368 = log2(_2354);
        float _2375 = exp2(_2368 * cbSceneParam._m0[78u].x) * _2237;
        float _2376 = exp2(_2368 * cbSceneParam._m0[78u].y) * _2238;
        float _2377 = exp2(_2368 * cbSceneParam._m0[78u].z) * _2239;
        float _2384 = _694 + (-0.5);
        _2386 = cbMtdParam._m0[1u];
        _2388 = _2386.y * _2384;
        float _2391 = (_2366 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2392 = _2391 * (_2367 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2348)));
        _2393 = _2391 * (_2367 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2350)));
        _2394 = _2391 * (_2367 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2352)));
        _2395 = _2384 * 0.999000012874603271484375;
        _2405 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2405)
        {
            if ((cbInstanceData._m0[_746 + 7u].x + _2395) < 0.5)
            {
                _2617 = true;
                break;
            }
        }
        uint _2533 = _748 + uint(_2364.w);
        if ((cbInstanceData._m0[_2533].w < 1.0) && ((cbInstanceData._m0[_2533].w + _2395) < 0.5))
        {
            _2617 = true;
            break;
        }
        if ((_2388 + 1.0) < _2386.x)
        {
            _2617 = true;
            break;
        }
        _2617 = false;
        break;
    }
    float _2848;
    if (_2617)
    {
        discard_state = true;
        _2848 = 0.0;
    }
    else
    {
        _2848 = cbInstanceData._m0[_2240].w;
    }
    SV_Target.x = _2392;
    SV_Target.y = _2393;
    SV_Target.z = _2394;
    SV_Target.w = _2848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2240].w;
    discard_exit();
}


