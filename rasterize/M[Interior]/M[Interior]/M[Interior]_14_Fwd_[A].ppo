#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1043;
float _3155;
float _3156;
float _3157;
float _3158;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _341 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = cbMtdParam._m0[21u].w + _263;
    float _378 = cbMtdParam._m0[22u].x + _264;
    float _379 = cbMtdParam._m0[22u].y + _265;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_192, _193, _194));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_206, _207, _208));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _402 = _399 * _395;
    float _405 = ((_399 * _393) + ((cbMtdParam._m0[19u].w * _281) * ((_341.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _406 = ((_399 * _394) + ((cbMtdParam._m0[20u].x * _281) * ((_341.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _407 = fract(TEXCOORD.x);
    float _408 = fract(TEXCOORD.y);
    float _414;
    if (_405 > 0.0)
    {
        _414 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _414 = frontier_phi_3_2_ladder;
    }
    float _422;
    if (_406 > 0.0)
    {
        _422 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _422 = frontier_phi_7_6_ladder;
    }
    float _426 = (_402 > 0.0) ? (cbMtdParam._m0[15u].x / _402) : 5000.0;
    float _427 = isnan(_422) ? _414 : (isnan(_414) ? _422 : min(_414, _422));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _439 = ((_428 * _402) + _432) / _432;
    vec4 _463 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_407 + (-0.5)) + (_428 * _405)) / _439) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_408 + (-0.5)) + (_428 * _406)) / _439) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _479 = _281 * 0.1500000059604644775390625;
    float _487 = (_479 * (((_463.x * _281) * cbMtdParam._m0[9u].x) - _316)) + _316;
    float _488 = (_479 * (((_463.y * _281) * cbMtdParam._m0[9u].y) - _318)) + _318;
    float _489 = (_479 * (((_463.z * _281) * cbMtdParam._m0[9u].z) - _320)) + _320;
    vec4 _501 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _505 = _501.z;
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3177 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))));
    float _518 = fma(_515, _199, fma(_509, _206, _508 * _192));
    float _521 = fma(_515, _200, fma(_509, _207, _508 * _193));
    float _524 = fma(_515, _201, fma(_509, _208, _508 * _194));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3188 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _532 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
    float _3199 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3210 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3221 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _555 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _556 = _263 * _555;
    float _557 = _264 * _555;
    float _558 = _265 * _555;
    vec4 _563 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _565 = _563.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _724 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _730 = (cbMatDynParam._m0[5u].x * _724) + cbMatDynParam._m0[5u].y;
        float _3232 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _735 = (cbMatDynParam._m0[5u].z * _724) + cbMatDynParam._m0[5u].w;
        float _3243 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) - _731)) + _731) < ((_565 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _602 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _605 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _620 = _618 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3254 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _644 = _641.x * TEXCOORD.z;
    float _645 = dot(vec3(_529, _530, _531), vec3(_556, _557, _558));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _529) - _556;
    float _653 = (_648 * _530) - _557;
    float _654 = (_648 * _531) - _558;
    float _658 = abs(dot(vec3(_556, _557, _558), vec3(_529, _530, _531)));
    float _3287 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_532);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_713, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705));
        float _773 = fma(_713, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705));
        float _777 = fma(_713, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705));
        float _800 = _705 + _529;
        float _801 = _709 + _530;
        float _802 = _713 + _531;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _769;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _773;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _777;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_529, _530, _531), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3335 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_529, _530, _531), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3368 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_529, _530, _531), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3401 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_713, cbModelParam._m0[30u].z, fma(_709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _705));
        float _1090 = fma(_713, cbModelParam._m0[31u].z, fma(_709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _705));
        float _1094 = fma(_713, cbModelParam._m0[32u].z, fma(_709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _705));
        float _1117 = _705 + _529;
        float _1118 = _709 + _530;
        float _1119 = _713 + _531;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_529, _530, _531), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3464 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_529, _530, _531), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3497 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_529, _530, _531), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3530 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = _1043;
        _1365 = _1043;
        _1366 = _1043;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_713, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_713, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_713, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1554 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1557 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_23_ladder;
        }
        float _1930;
        if (_1554 > 0.0)
        {
            _1930 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1930 = frontier_phi_34_30_ladder;
        }
        float _2238;
        if (_1557 > 0.0)
        {
            _2238 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2238 = frontier_phi_48_41_ladder;
        }
        float _2240 = isnan(_1930) ? _1585 : (isnan(_1585) ? _1930 : min(_1585, _1930));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1551) + _1540;
        float _2246 = (_2241 * _1554) + _1544;
        float _2247 = (_2241 * _1557) + _1548;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_24_48_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_24_48_ladder_2;
        _1575 = frontier_phi_24_48_ladder_1;
        _1577 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1492);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_713, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_713, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_713, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1648 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1651 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1935;
        if (_1645 > 0.0)
        {
            _1935 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1935 = frontier_phi_36_32_ladder;
        }
        float _2264;
        if (_1648 > 0.0)
        {
            _2264 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2264 = frontier_phi_50_43_ladder;
        }
        float _2454;
        if (_1651 > 0.0)
        {
            _2454 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2454 = frontier_phi_68_61_ladder;
        }
        float _2456 = isnan(_2264) ? _1935 : (isnan(_1935) ? _2264 : min(_1935, _2264));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1645) + _1634;
        float _2462 = (_2457 * _1648) + _1638;
        float _2463 = (_2457 * _1651) + _1642;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_33_68_ladder = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_33_68_ladder_2;
        _1672 = frontier_phi_33_68_ladder;
        _1674 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1582);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_673 * _660)) * _644;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1573)) + _1573);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1575)) + _1575);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1577)) + _1577);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1716 = _644 + (-1.0);
    float _1719 = (cbLight._m0[_1711].x * _1716) + 1.0;
    float _1720 = (cbLight._m0[_1711].y * _1716) + 1.0;
    uint _1721 = _1710 + 5u;
    float _1727 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1731 = _1710 + 4u;
    float _1737 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1741 = _1710 | 1u;
    float _1752 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_529, _530, _531));
    float _1755 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_529, _530, _531));
    float _3666 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _3677 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1760 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
    float _1762 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
    float _1769 = ((cbLight._m0[_1721].x * _1727) * _1762) + ((cbLight._m0[_1731].x * _1737) * _1760);
    float _1770 = ((_1727 * cbLight._m0[_1721].y) * _1762) + ((_1737 * cbLight._m0[_1731].y) * _1760);
    float _1771 = ((_1727 * cbLight._m0[_1721].z) * _1762) + ((_1737 * cbLight._m0[_1731].z) * _1760);
    uint _1773 = _1710 + 8u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _532) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1710].x + _556;
    float _1789 = cbLight._m0[_1710].y + _557;
    float _1790 = cbLight._m0[_1710].z + _558;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1710].xyz));
    float _3688 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1802 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1803 = dot(vec3(_529, _530, _531), vec3(_1795, _1796, _1797));
    float _3710 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1795, _1796, _1797));
    float _3721 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1787 * _1787;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1826 = (exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1827 = 1.0 - _1787;
    float _1838 = (0.5 / (((_1802 * ((_1801 * _1827) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1827) + _1787) * _1801))) * _1801;
    float _3732 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    uint _1851 = _1710 + 9u;
    float _1862 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _532) * 0.949999988079071044921875);
    float _1863 = _1862 * _1862;
    float _1864 = cbLight._m0[_1741].x + _556;
    float _1865 = cbLight._m0[_1741].y + _557;
    float _1866 = cbLight._m0[_1741].z + _558;
    float _1870 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
    float _1871 = _1870 * _1864;
    float _1872 = _1870 * _1865;
    float _1873 = _1870 * _1866;
    float _1874 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1741].xyz));
    float _3743 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1878 = dot(vec3(_529, _530, _531), vec3(_1871, _1872, _1873));
    float _3754 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1871, _1872, _1873));
    float _3765 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1863 * _1863;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1899 = (exp2(log2(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1900 = 1.0 - _1863;
    float _1910 = (0.5 / (((_1802 * ((_1877 * _1900) + _1863)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1900) + _1863) * _1877))) * _1877;
    float _3776 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    float _1922 = (((_1899 * cbLight._m0[_1851].x) * _1912) * _1727) + (((_1826 * cbLight._m0[_1773].x) * _1840) * _1737);
    float _1923 = (((_1899 * cbLight._m0[_1851].y) * _1912) * _1727) + (((_1826 * cbLight._m0[_1773].y) * _1840) * _1737);
    float _1924 = (((_1899 * cbLight._m0[_1851].z) * _1912) * _1727) + (((_1826 * cbLight._m0[_1773].z) * _1840) * _1737);
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1708.y == 0u)
    {
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1979;
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1979;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1979;
        uvec4 _1994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1995 = _1994.x;
        uint _2006 = uint((float(_1994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _1995))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _1995)));
        float _2016 = (log2(_1982 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2017 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        uint _2020 = uint(isnan(14.0) ? _2017 : (isnan(_2017) ? 14.0 : min(_2017, 14.0)));
        uvec4 _2025 = texelFetch(g_lightClusterGridBuffer, int(((_2020 << 2u) + (_2006 << 6u)) >> 2u));
        uint _2026 = _2025.x;
        uint _2027 = _1994.z;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        if (((((1u << ((_2027 >> 4u) & 15u)) + 4294967295u) & _2026) == 0u) || ((_2027 & 240u) == 0u))
        {
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
        }
        else
        {
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2301 = 0.0;
            float _2302 = 0.0;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            uint _2307 = 0u;
            uint _2316;
            bool _2317;
            for (;;)
            {
                _2316 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2307 << 2u)) >> 2u)).x;
                _2317 = _2316 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2317)
                {
                    frontier_phi_63_pred = _2303;
                    frontier_phi_63_pred_1 = _2306;
                    frontier_phi_63_pred_2 = _2305;
                    frontier_phi_63_pred_3 = _2304;
                    frontier_phi_63_pred_4 = _2302;
                    frontier_phi_63_pred_5 = _2301;
                }
                else
                {
                    float _2497;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    uint _2503;
                    _2497 = _2301;
                    _2498 = _2302;
                    _2499 = _2303;
                    _2500 = _2304;
                    _2501 = _2305;
                    _2502 = _2306;
                    _2503 = _2316;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    for (;;)
                    {
                        uint _2507 = uint(findLSB(_2503)) + (_2307 << 5u);
                        uint _2504 = (_2503 + 4294967295u) & _2503;
                        uint _2509 = _2507 * 48u;
                        vec4 _2523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 3u)).x));
                        uint _2529 = (_2507 * 48u) + 4u;
                        vec4 _2542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2529)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 3u)).x));
                        uint _2548 = (_2507 * 48u) + 8u;
                        vec3 _2559 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2548)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2548 + 2u)).x));
                        float _2563 = _2523.x - _1980;
                        float _2564 = _2523.y - _1981;
                        float _2565 = _2523.z - _1982;
                        float _2566 = dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565));
                        float _2569 = inversesqrt(_2566);
                        float _2570 = _2569 * _2563;
                        float _2571 = _2569 * _2564;
                        float _2572 = _2569 * _2565;
                        float _2573 = dot(vec3(_599, _602, _605), vec3(_2570, _2571, _2572));
                        float _2578 = 1.0 - (_2566 * _2523.w);
                        float _3797 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
                        float _2579 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                        float _2580 = sqrt(_2566) * _2542.w;
                        float _2583 = 1.39999997615814208984375 / (_2580 + 1.39999997615814208984375);
                        float _2584 = _2583 * _2583;
                        float _2587 = ((1.0 - _2584) * _2573) + _2584;
                        float _2590 = _2580 * _2580;
                        float _2594 = ((isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0))) * _2579) / ((_2590 * 0.699999988079071044921875) + 1.0);
                        float _2598 = (-0.0) - _1980;
                        float _2599 = (-0.0) - _1981;
                        float _2600 = (-0.0) - _1982;
                        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
                        float _2605 = _2604 * _2598;
                        float _2606 = _2604 * _2599;
                        float _2607 = _2604 * _2600;
                        float _2615 = exp2(log2(1.0 / ((_2590 * 3.5) + 5.0)) * 0.25);
                        float _2616 = 1.0 - _660;
                        float _2623 = sqrt(1.0 - ((1.0 - (_2616 * _2616)) * (1.0 - (_2615 * _2615))));
                        float _2624 = _2623 * _2623;
                        float _2625 = _2624 * _2624;
                        float _2626 = _2605 + _2570;
                        float _2627 = _2606 + _2571;
                        float _2628 = _2607 + _2572;
                        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
                        float _2636 = dot(vec3(_599, _602, _605), vec3(_2605, _2606, _2607));
                        float _3813 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2639 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                        float _2640 = dot(vec3(_599, _602, _605), vec3(_2632 * _2626, _2632 * _2627, _2632 * _2628));
                        float _3824 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _2643 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2647 = ((_2643 * _2643) * (_2625 + (-1.0))) + 1.0;
                        float _2648 = _2583 * _2624;
                        float _2649 = _2648 * _2648;
                        float _2652 = ((1.0 - _2649) * _2573) + _2649;
                        float _3835 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2653 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
                        float _2654 = 1.0 - _2624;
                        float _2664 = (0.5 / (((_2653 * ((_2639 * _2654) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2653 * _2654) + _2624) * _2639))) * _2653;
                        float _3846 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2675 = (((_2625 * 3.1415927410125732421875) * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) / ((_2647 * _2647) * ((_2590 * 2.1991131305694580078125) + 3.141590118408203125))) * _2579;
                        _2401 = (_2594 * _2542.x) + _2500;
                        _2402 = (_2594 * _2542.y) + _2501;
                        _2403 = (_2594 * _2542.z) + _2502;
                        _2398 = (_2675 * _2559.x) + _2497;
                        _2399 = (_2675 * _2559.y) + _2498;
                        _2400 = (_2675 * _2559.z) + _2499;
                        if (_2504 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2497 = _2398;
                            _2498 = _2399;
                            _2499 = _2400;
                            _2500 = _2401;
                            _2501 = _2402;
                            _2502 = _2403;
                            _2503 = _2504;
                        }
                    }
                    frontier_phi_63_pred = _2400;
                    frontier_phi_63_pred_1 = _2403;
                    frontier_phi_63_pred_2 = _2402;
                    frontier_phi_63_pred_3 = _2401;
                    frontier_phi_63_pred_4 = _2399;
                    frontier_phi_63_pred_5 = _2398;
                }
                _2122 = frontier_phi_63_pred;
                _2128 = frontier_phi_63_pred_1;
                _2126 = frontier_phi_63_pred_2;
                _2124 = frontier_phi_63_pred_3;
                _2120 = frontier_phi_63_pred_4;
                _2118 = frontier_phi_63_pred_5;
                uint _2308 = _2307 + 1u;
                if (_2308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2301 = _2118;
                    _2302 = _2120;
                    _2303 = _2122;
                    _2304 = _2124;
                    _2305 = _2126;
                    _2306 = _2128;
                    _2307 = _2308;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
        }
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.z;
        uint _2134 = (_2132 >> 8u) & 15u;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        if (((4294967295u << _2134) & _2026) == 0u)
        {
            _2269 = _2117;
            _2271 = _2119;
            _2273 = _2121;
            _2275 = _2123;
            _2277 = _2125;
            _2279 = _2127;
        }
        else
        {
            float _2294 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
            float _2295 = _2294 * _1980;
            float _2296 = _2294 * _1981;
            float _2297 = _2294 * _1982;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2134 < ((_2132 >> 12u) & 15u))
            {
                float _2270;
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2480 = _2117;
                float _2481 = _2119;
                float _2482 = _2121;
                float _2483 = _2123;
                float _2484 = _2125;
                float _2485 = _2127;
                uint _2486 = _2134;
                uint _2495;
                bool _2496;
                for (;;)
                {
                    _2495 = texelFetch(g_lightClassification, int((((_2020 << 5u) + (_2006 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                    _2496 = _2495 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2496)
                    {
                        frontier_phi_77_pred = _2485;
                        frontier_phi_77_pred_1 = _2484;
                        frontier_phi_77_pred_2 = _2483;
                        frontier_phi_77_pred_3 = _2482;
                        frontier_phi_77_pred_4 = _2481;
                        frontier_phi_77_pred_5 = _2480;
                    }
                    else
                    {
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _2723 = _2480;
                        float _2724 = _2481;
                        float _2725 = _2482;
                        float _2726 = _2483;
                        float _2727 = _2484;
                        float _2728 = _2485;
                        uint _2729 = _2495;
                        uint _2730;
                        vec4 _2755;
                        float _2756;
                        vec4 _2771;
                        vec3 _2783;
                        vec4 _2799;
                        vec4 _2814;
                        float _2860;
                        bool _2861;
                        for (;;)
                        {
                            uint _2740 = ((_2486 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2729));
                            _2730 = (_2729 + 4294967295u) & _2729;
                            uint _2742 = _2740 * 40u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            _2756 = _2755.w;
                            uint _2758 = (_2740 * 40u) + 4u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            uint _2773 = (_2740 * 40u) + 8u;
                            _2783 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x));
                            uint _2786 = (_2740 * 40u) + 16u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            uint _2801 = (_2740 * 40u) + 20u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2740 * 40u) + 24u;
                            vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2835 = (_2740 * 40u) + 28u;
                            vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            _2860 = fma(_1982, _2848.z, fma(_1981, _2848.y, _2848.x * _1980)) + _2848.w;
                            _2861 = !((fma(_1982, _2829.z, fma(_1981, _2829.y, _2829.x * _1980)) + _2829.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2861)
                            {
                                float _2888 = _2755.x - _1980;
                                float _2889 = _2755.y - _1981;
                                float _2890 = _2755.z - _1982;
                                float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                                float _2894 = inversesqrt(_2891);
                                float _2895 = _2894 * _2888;
                                float _2896 = _2894 * _2889;
                                float _2897 = _2894 * _2890;
                                float _2901 = 1.0 - (_2891 / (_2756 * _2756));
                                float _3857 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                                float _2906 = sqrt(_2891) * _2771.w;
                                float _2908 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                                float _2909 = _2908 * _2908;
                                float _2912 = ((1.0 - _2909) * dot(vec3(_2895, _2896, _2897), vec3(_599, _602, _605))) + _2909;
                                float _2915 = _2906 * _2906;
                                float _2919 = (fma(_1982, _2799.z, fma(_1981, _2799.y, _2799.x * _1980)) + _2799.w) / _2860;
                                float _2920 = (fma(_1982, _2814.z, fma(_1981, _2814.y, _2814.x * _1980)) + _2814.w) / _2860;
                                float _2924 = 1.0 - dot(vec2(_2919, _2920), vec2(_2919, _2920));
                                float _3873 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
                                float _2926 = _2925 * (((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2902) / ((_2915 * 0.699999988079071044921875) + 1.0));
                                float _2938 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                                float _2939 = 1.0 - _660;
                                float _2946 = sqrt(1.0 - ((1.0 - (_2939 * _2939)) * (1.0 - (_2938 * _2938))));
                                float _2947 = _2946 * _2946;
                                float _2948 = _2947 * _2947;
                                float _2949 = _2895 - _2295;
                                float _2950 = _2896 - _2296;
                                float _2951 = _2897 - _2297;
                                float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                                float _2959 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2295, (-0.0) - _2296, (-0.0) - _2297));
                                float _3884 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2962 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _2963 = dot(vec3(_599, _602, _605), vec3(_2955 * _2949, _2955 * _2950, _2955 * _2951));
                                float _3895 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                                float _2966 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2970 = ((_2966 * _2966) * (_2948 + (-1.0))) + 1.0;
                                float _2971 = _2908 * _2947;
                                float _2972 = _2971 * _2971;
                                float _2978 = ((1.0 - _2972) * dot(vec3(_599, _602, _605), vec3(_2895, _2896, _2897))) + _2972;
                                float _3906 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                                float _2980 = 1.0 - _2947;
                                float _2990 = (0.5 / (((_2979 * ((_2962 * _2980) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _2980) + _2947) * _2962))) * _2979;
                                float _3917 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _3000 = (_2925 * _2902) * (((_2948 * 3.1415927410125732421875) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) / ((_2970 * _2970) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2926 * _2771.x;
                                frontier_phi_83_pred_1 = _2926 * _2771.z;
                                frontier_phi_83_pred_2 = _2926 * _2771.y;
                                frontier_phi_83_pred_3 = _3000 * _2783.z;
                                frontier_phi_83_pred_4 = _3000 * _2783.y;
                                frontier_phi_83_pred_5 = _3000 * _2783.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3007 = frontier_phi_83_pred;
                            _3009 = frontier_phi_83_pred_1;
                            _3008 = frontier_phi_83_pred_2;
                            _3006 = frontier_phi_83_pred_3;
                            _3005 = frontier_phi_83_pred_4;
                            _3004 = frontier_phi_83_pred_5;
                            _2713 = _3007 + _2726;
                            _2714 = _3008 + _2727;
                            _2715 = _3009 + _2728;
                            _2710 = _3004 + _2723;
                            _2711 = _3005 + _2724;
                            _2712 = _3006 + _2725;
                            if (_2730 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2730;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2715;
                        frontier_phi_77_pred_1 = _2714;
                        frontier_phi_77_pred_2 = _2713;
                        frontier_phi_77_pred_3 = _2712;
                        frontier_phi_77_pred_4 = _2711;
                        frontier_phi_77_pred_5 = _2710;
                    }
                    _2280 = frontier_phi_77_pred;
                    _2278 = frontier_phi_77_pred_1;
                    _2276 = frontier_phi_77_pred_2;
                    _2274 = frontier_phi_77_pred_3;
                    _2272 = frontier_phi_77_pred_4;
                    _2270 = frontier_phi_77_pred_5;
                    uint _2487 = _2486 + 1u;
                    if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2480 = _2270;
                        _2481 = _2272;
                        _2482 = _2274;
                        _2483 = _2276;
                        _2484 = _2278;
                        _2485 = _2280;
                        _2486 = _2487;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2272;
                frontier_phi_52_53_ladder_1 = _2280;
                frontier_phi_52_53_ladder_2 = _2278;
                frontier_phi_52_53_ladder_3 = _2276;
                frontier_phi_52_53_ladder_4 = _2274;
                frontier_phi_52_53_ladder_5 = _2270;
            }
            else
            {
                frontier_phi_52_53_ladder = _2119;
                frontier_phi_52_53_ladder_1 = _2127;
                frontier_phi_52_53_ladder_2 = _2125;
                frontier_phi_52_53_ladder_3 = _2123;
                frontier_phi_52_53_ladder_4 = _2121;
                frontier_phi_52_53_ladder_5 = _2117;
            }
            _2269 = frontier_phi_52_53_ladder_5;
            _2271 = frontier_phi_52_53_ladder;
            _2273 = frontier_phi_52_53_ladder_4;
            _2275 = frontier_phi_52_53_ladder_3;
            _2277 = frontier_phi_52_53_ladder_2;
            _2279 = frontier_phi_52_53_ladder_1;
        }
        float _2284 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2039 = (_2284 * _2275) + _1769;
        _2041 = (_2284 * _2277) + _1770;
        _2043 = (_2284 * _2279) + _1771;
        _2045 = ((_2269 * 0.039999999105930328369140625) * _2284) + _1922;
        _2047 = ((_2271 * 0.039999999105930328369140625) * _2284) + _1923;
        _2049 = ((_2273 * 0.039999999105930328369140625) * _2284) + _1924;
    }
    else
    {
        _2039 = _1769;
        _2041 = _1770;
        _2043 = _1771;
        _2045 = _1922;
        _2047 = _1923;
        _2049 = _1924;
    }
    float _3933 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3944 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3955 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2066 = ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2039 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _644))) + ((_2045 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2067 = ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_2041 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _644))) + ((_2047 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2068 = ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2043 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _644))) + ((_2049 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2069 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    uint _2072 = _618 + 6u;
    float _2080 = _578 / cbSceneParam._m0[86u].x;
    float _2081 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2097 = _2095.x;
    float _2098 = _2095.y;
    float _2099 = _2095.z;
    float _2100 = _2095.w;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2142 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2143 = _2142 / _551;
        float _2154 = _2143 * _263;
        float _2155 = _264 * _2143;
        float _2156 = (-0.0) - _2155;
        float _2157 = _2143 * _265;
        float _2159 = (cbSceneParam._m0[77u].w * _2156) / _2142;
        float _2160 = _2159 + cbSceneParam._m0[79u].w;
        float _2161 = cbSceneParam._m0[79u].w - _2155;
        float _2167 = sqrt(((_2154 * _2154) + (_2155 * _2155)) + (_2157 * _2157));
        float _2170 = (1.0 - (cbSceneParam._m0[77u].w / _2142)) * _2167;
        float _2176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2411;
        if (abs((_2156 - _2159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2411 = ((((_2160 > 0.0) ? exp2(_2176 * _2160) : (2.0 - exp2(_2178 * _2160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2170;
        }
        else
        {
            float _2330 = 1.0 / cbSceneParam._m0[80u].x;
            float _2331 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : max(_2160, _2161));
            float _2332 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : min(_2160, _2161));
            float _2341 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : min(_2331, 0.0));
            float _2342 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : min(_2332, 0.0));
            _2411 = ((abs(_2167 / _2156) * cbSceneParam._m0[80u].y) * ((((_2341 - _2342) * 2.0) - ((exp2(_2176 * (isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0)))) - exp2(_2176 * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0))))) * _2330)) - ((exp2(_2178 * _2341) - exp2(_2178 * _2342)) * _2330))) + (_2170 * cbSceneParam._m0[80u].z);
        }
        vec4 _2413 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, 1.0), 0.0);
        float _2422 = exp2((_2411 * (-1.44269502162933349609375)) * (1.0 - _2413.w));
        float _2423 = log2(_2422);
        float _2439 = log2(_2100);
        _2180 = (exp2(_2439 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].x)) * _2413.x) / cbSceneParam._m0[78u].x)) + _2097;
        _2182 = (exp2(_2439 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].y)) * _2413.y) / cbSceneParam._m0[78u].y)) + _2098;
        _2184 = (exp2(_2439 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2423 * cbSceneParam._m0[78u].z)) * _2413.z) / cbSceneParam._m0[78u].z)) + _2099;
        _2186 = _2422 * _2100;
    }
    else
    {
        _2180 = _2097;
        _2182 = _2098;
        _2184 = _2099;
        _2186 = _2100;
    }
    bool _2449;
    vec4 _2196;
    vec4 _2218;
    float _2220;
    float _2224;
    float _2225;
    float _2226;
    float _2227;
    bool _2237;
    for (;;)
    {
        _2196 = cbMatDynParam._m0[0u];
        float _2198 = roundEven(_2196.y);
        bool _2199 = _2198 == 3.0;
        float _2200 = log2(_2186);
        float _2207 = exp2(_2200 * cbSceneParam._m0[78u].x) * _2069;
        float _2208 = exp2(_2200 * cbSceneParam._m0[78u].y) * _2070;
        float _2209 = exp2(_2200 * cbSceneParam._m0[78u].z) * _2071;
        float _2216 = _565 + (-0.5);
        _2218 = cbMtdParam._m0[1u];
        _2220 = _2218.y * _2216;
        float _2223 = (_2198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2224 = _2223 * (_2199 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2180)));
        _2225 = _2223 * (_2199 ? _2208 : (_2208 + (cbSceneParam._m0[72u].w * _2182)));
        _2226 = _2223 * (_2199 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2184)));
        _2227 = _2216 * 0.999000012874603271484375;
        _2237 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2237)
        {
            if ((cbInstanceData._m0[_618 + 7u].x + _2227) < 0.5)
            {
                _2449 = true;
                break;
            }
        }
        uint _2365 = _620 + uint(_2196.w);
        if ((cbInstanceData._m0[_2365].w < 1.0) && ((cbInstanceData._m0[_2365].w + _2227) < 0.5))
        {
            _2449 = true;
            break;
        }
        if ((_2220 + 1.0) < _2218.x)
        {
            _2449 = true;
            break;
        }
        _2449 = false;
        break;
    }
    float _2680;
    if (_2449)
    {
        discard_state = true;
        _2680 = 0.0;
    }
    else
    {
        _2680 = cbInstanceData._m0[_2072].w;
    }
    SV_Target.x = _2224;
    SV_Target.y = _2225;
    SV_Target.z = _2226;
    SV_Target.w = _2680;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2072].w;
    discard_exit();
}


