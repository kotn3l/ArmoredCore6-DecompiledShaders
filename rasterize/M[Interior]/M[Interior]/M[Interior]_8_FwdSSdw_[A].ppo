#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _384;
uint _1899;
uint _1900;
uint _1901;
uint _2144;
uint _2145;
uint _2146;
float _2385;
float _2386;
float _2387;
float _2388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _199 = _198 * TANGENT.x;
    float _200 = _198 * TANGENT.y;
    float _201 = _198 * TANGENT.z;
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _293 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _309 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _316 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _328 = cbMtdParam._m0[22u].z + _256;
    float _329 = cbMtdParam._m0[22u].w + _257;
    float _330 = cbMtdParam._m0[23u].x + _258;
    float _347 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_309 * _188, _309 * _189, _309 * _190));
    float _348 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_316 * _199, _316 * _200, _316 * _201));
    float _349 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _359 = ((cbMtdParam._m0[19u].y * _347) * _353) + (((_293.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _360 = ((cbMtdParam._m0[19u].z * _348) * _353) + (((_293.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _363 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _364 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _382;
    float _385;
    float _387;
    if (_359 > 0.0)
    {
        float _368 = (1.0 - _363) / _359;
        _382 = _368;
        _385 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_368 * _354)) * 0.16666667163372039794921875;
        _387 = (fract((_368 * _360) + _364) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_359 < 0.0)
        {
            float _383 = ((-0.0) - _363) / _359;
            frontier_phi_3_2_ladder = _383;
            frontier_phi_3_2_ladder_1 = (fract((_383 * _360) + _364) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_383 * _354) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _384;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _382 = frontier_phi_3_2_ladder;
        _385 = frontier_phi_3_2_ladder_2;
        _387 = frontier_phi_3_2_ladder_1;
    }
    float _413;
    float _415;
    float _417;
    if (_360 > 0.0)
    {
        float _400 = (1.0 - _364) / _360;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_400 < _382)
        {
            frontier_phi_8_5_ladder = (fract(_400 * _354) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_400 * _359) + _363) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _400;
        }
        else
        {
            frontier_phi_8_5_ladder = _387;
            frontier_phi_8_5_ladder_1 = _385;
            frontier_phi_8_5_ladder_2 = _382;
        }
        _413 = frontier_phi_8_5_ladder_2;
        _415 = frontier_phi_8_5_ladder_1;
        _417 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_360 < 0.0)
        {
            float _414 = ((-0.0) - _364) / _360;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_414 < _382)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_414 * _354) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_414 * _359) + _363) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _414;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _387;
                frontier_phi_8_6_ladder_9_ladder_1 = _385;
                frontier_phi_8_6_ladder_9_ladder_2 = _382;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _387;
            frontier_phi_8_6_ladder_1 = _385;
            frontier_phi_8_6_ladder_2 = _382;
        }
        _413 = frontier_phi_8_6_ladder_2;
        _415 = frontier_phi_8_6_ladder_1;
        _417 = frontier_phi_8_6_ladder;
    }
    float _421 = (_354 > 0.0) ? (cbMtdParam._m0[16u].y / _354) : 5000.0;
    float _434;
    float _435;
    if (_421 < _413)
    {
        _434 = ((_363 + cbMtdParam._m0[16u].z) + (_421 * _359)) * 0.16666667163372039794921875;
        _435 = (((_421 * _360) + _364) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _434 = _415;
        _435 = _417;
    }
    vec4 _437 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_434, _435));
    float _460 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _464 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _465 = _256 * _464;
    float _466 = _257 * _464;
    float _467 = _258 * _464;
    vec4 _472 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _474 = _472.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _549 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _556 = (cbMatDynParam._m0[5u].x * _549) + cbMatDynParam._m0[5u].y;
        float _2397 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        float _557 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        float _561 = (cbMatDynParam._m0[5u].z * _549) + cbMatDynParam._m0[5u].w;
        float _2408 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0))) - _557)) + _557) < ((_474 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _492 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _493 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _502 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_492 * cbSceneParam._m0[86u].x, _493 * cbSceneParam._m0[86u].y));
    float _505 = _502.x * TEXCOORD.z;
    float _506 = (-0.0) - _465;
    float _507 = (-0.0) - _466;
    float _508 = (-0.0) - _467;
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _701;
    float _702;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _624 = (cbModelParam._m0[37u].x * ((((fma(_538, cbModelParam._m0[26u].z, fma(_534, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _626 = (cbModelParam._m0[37u].y * ((((fma(_538, cbModelParam._m0[27u].z, fma(_534, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _627 = (((((fma(_538, cbModelParam._m0[28u].z, fma(_534, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _626, _627), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _626, _627), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _626, _627), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _626, _627), 0.0);
        float _664 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _674 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _684 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _694 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_651.x + (-0.5));
        float _696 = _694 * (_651.y + (-0.5));
        float _697 = _694 * (_651.z + (-0.5));
        _701 = _664 * (_630.z + (-0.5));
        _702 = _664 * (_630.y + (-0.5));
        _703 = _664 * (_630.x + (-0.5));
        _704 = _674 * (_637.z + (-0.5));
        _705 = _674 * (_637.y + (-0.5));
        _706 = _674 * (_637.x + (-0.5));
        _707 = _684 * (_644.z + (-0.5));
        _708 = _684 * (_644.y + (-0.5));
        _709 = _684 * (_644.x + (-0.5));
        _710 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        _711 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        _712 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    }
    else
    {
        _701 = _384;
        _702 = _384;
        _703 = _384;
        _704 = _384;
        _705 = _384;
        _706 = _384;
        _707 = _384;
        _708 = _384;
        _709 = _384;
        _710 = _384;
        _711 = _384;
        _712 = _384;
    }
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _769 = (cbModelParam._m0[38u].x * ((((fma(_538, cbModelParam._m0[30u].z, fma(_534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _530)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _770 = (cbModelParam._m0[38u].y * ((((fma(_538, cbModelParam._m0[31u].z, fma(_534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _530)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _771 = (((((fma(_538, cbModelParam._m0[32u].z, fma(_534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _530)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _806 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _816 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _826 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _836 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_794.x + (-0.5));
        float _838 = _836 * (_794.y + (-0.5));
        float _839 = _836 * (_794.z + (-0.5));
        _843 = _806 * (_773.z + (-0.5));
        _844 = _806 * (_773.y + (-0.5));
        _845 = _806 * (_773.x + (-0.5));
        _846 = _816 * (_780.z + (-0.5));
        _847 = _816 * (_780.y + (-0.5));
        _848 = _816 * (_780.x + (-0.5));
        _849 = _826 * (_787.z + (-0.5));
        _850 = _826 * (_787.y + (-0.5));
        _851 = _826 * (_787.x + (-0.5));
        _852 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        _853 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        _854 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    }
    else
    {
        _843 = _384;
        _844 = _384;
        _845 = _384;
        _846 = _384;
        _847 = _384;
        _848 = _384;
        _849 = _384;
        _850 = _384;
        _851 = _384;
        _852 = _384;
        _853 = _384;
        _854 = _384;
    }
    float _869 = _465 * (-0.5);
    float _870 = _466 * (-0.5);
    float _871 = _467 * (-0.5);
    float _872 = dot(vec4(_869, _870, _871, 1.0), vec4(_845, _848, _851, _854));
    float _875 = dot(vec4(_869, _870, _871, 1.0), vec4(_844, _847, _850, _853));
    float _878 = dot(vec4(_869, _870, _871, 1.0), vec4(_843, _846, _849, _852));
    float _913;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _885 = dot(vec4(_869, _870, _871, 1.0), vec4(_701, _704, _707, _710));
        float _889 = dot(vec4(_869, _870, _871, 1.0), vec4(_702, _705, _708, _711));
        float _893 = dot(vec4(_869, _870, _871, 1.0), vec4(_703, _706, _709, _712));
        float _900 = dot(vec4(cbModelParam._m0[39u]), vec4(_869, _870, _871, 1.0));
        _913 = dot(vec3(isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)), isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)), isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_900) ? 0.0 : (isnan(0.0) ? _900 : max(0.0, _900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _913 = 1.0;
    }
    float _924;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _915 = dot(vec4(cbModelParam._m0[40u]), vec4(_869, _870, _871, 1.0));
        _924 = dot(vec3(isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)), isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)), isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_915) ? 0.0 : (isnan(0.0) ? _915 : max(0.0, _915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _924 = 1.0;
    }
    float _928 = (_924 * cbModelParam._m0[1u].x) + (_913 * (1.0 - cbModelParam._m0[1u].x));
    float _934 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1017;
    float _1019;
    float _1021;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _984 = fma(_538, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _530)) + cbModelParam._m0[13u].w;
        float _988 = fma(_538, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _530)) + cbModelParam._m0[14u].w;
        float _992 = fma(_538, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _530)) + cbModelParam._m0[15u].w;
        float _995 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _998 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1001 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1027;
        if (_995 > 0.0)
        {
            _1027 = abs((1.0 - _984) / _995);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_995 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_984 + 1.0) / _995);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1027 = frontier_phi_29_27_ladder;
        }
        float _1327;
        if (_998 > 0.0)
        {
            _1327 = abs((1.0 - _988) / _998);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_998 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_988 + 1.0) / _998);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1327 = frontier_phi_38_34_ladder;
        }
        float _1631;
        if (_1001 > 0.0)
        {
            _1631 = abs((1.0 - _992) / _1001);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1001 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_992 + 1.0) / _1001);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1631 = frontier_phi_52_45_ladder;
        }
        float _1633 = isnan(_1327) ? _1027 : (isnan(_1027) ? _1327 : min(_1027, _1327));
        float _1634 = isnan(_1631) ? _1633 : (isnan(_1633) ? _1631 : min(_1633, _1631));
        float _1638 = (_1634 * _995) + _984;
        float _1639 = (_1634 * _998) + _988;
        float _1640 = (_1634 * _1001) + _992;
        float _1641 = _1634 * 9.9999997473787516355514526367188e-05;
        float _1642 = (-1.0) - _1641;
        float _1644 = _1641 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1640 > _1644) || ((_1640 < _1642) || ((_1639 > _1644) || ((_1639 < _1642) || ((_1638 < _1642) || (_1638 > _1644))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1640, cbModelParam._m0[9u].z, fma(_1639, cbModelParam._m0[9u].y, _1638 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1640, cbModelParam._m0[10u].z, fma(_1639, cbModelParam._m0[10u].y, _1638 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1640, cbModelParam._m0[11u].z, fma(_1639, cbModelParam._m0[11u].y, _1638 * cbModelParam._m0[11u].x))), _934);
            frontier_phi_28_52_ladder = _1767.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _1767.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _1767.x * cbModelParam._m0[1u].y;
        }
        _1017 = frontier_phi_28_52_ladder_2;
        _1019 = frontier_phi_28_52_ladder_1;
        _1021 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _934);
        _1017 = _1005.x * cbModelParam._m0[1u].y;
        _1019 = _1005.y * cbModelParam._m0[1u].y;
        _1021 = _1005.z * cbModelParam._m0[1u].y;
    }
    float _1024 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1114;
    float _1116;
    float _1118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1078 = fma(_538, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _530)) + cbModelParam._m0[21u].w;
        float _1082 = fma(_538, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _530)) + cbModelParam._m0[22u].w;
        float _1086 = fma(_538, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _530)) + cbModelParam._m0[23u].w;
        float _1089 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1092 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1095 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1332;
        if (_1089 > 0.0)
        {
            _1332 = abs((1.0 - _1078) / _1089);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1089 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1078 + 1.0) / _1089);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1332 = frontier_phi_40_36_ladder;
        }
        float _1657;
        if (_1092 > 0.0)
        {
            _1657 = abs((1.0 - _1082) / _1092);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1092 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1082 + 1.0) / _1092);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1657 = frontier_phi_54_47_ladder;
        }
        float _1829;
        if (_1095 > 0.0)
        {
            _1829 = abs((1.0 - _1086) / _1095);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1095 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1086 + 1.0) / _1095);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _1829 = frontier_phi_72_65_ladder;
        }
        float _1831 = isnan(_1657) ? _1332 : (isnan(_1332) ? _1657 : min(_1332, _1657));
        float _1832 = isnan(_1829) ? _1831 : (isnan(_1831) ? _1829 : min(_1831, _1829));
        float _1836 = (_1832 * _1089) + _1078;
        float _1837 = (_1832 * _1092) + _1082;
        float _1838 = (_1832 * _1095) + _1086;
        float _1839 = _1832 * 9.9999997473787516355514526367188e-05;
        float _1840 = (-1.0) - _1839;
        float _1842 = _1839 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_1838 > _1842) || ((_1838 < _1840) || ((_1837 > _1842) || ((_1837 < _1840) || ((_1836 < _1840) || (_1836 > _1842))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1838, cbModelParam._m0[17u].z, fma(_1837, cbModelParam._m0[17u].y, _1836 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1838, cbModelParam._m0[18u].z, fma(_1837, cbModelParam._m0[18u].y, _1836 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1838, cbModelParam._m0[19u].z, fma(_1837, cbModelParam._m0[19u].y, _1836 * cbModelParam._m0[19u].x))), _1024);
            frontier_phi_37_72_ladder = _2007.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2007.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2007.y * cbModelParam._m0[1u].z;
        }
        _1114 = frontier_phi_37_72_ladder_1;
        _1116 = frontier_phi_37_72_ladder_2;
        _1118 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1024);
        _1114 = _1098.x * cbModelParam._m0[1u].z;
        _1116 = _1098.y * cbModelParam._m0[1u].z;
        _1118 = _1098.z * cbModelParam._m0[1u].z;
    }
    float _1130 = _505 * 0.01200000010430812835693359375;
    float _1132 = _1130 * ((cbModelParam._m0[1u].w * (_1114 - _1017)) + _1017);
    float _1133 = _1130 * ((cbModelParam._m0[1u].w * (_1116 - _1019)) + _1019);
    float _1134 = _1130 * ((cbModelParam._m0[1u].w * (_1118 - _1021)) + _1021);
    float _1155 = fma(_1134, cbSceneParam._m0[89u].z, fma(_1133, cbSceneParam._m0[89u].y, _1132 * cbSceneParam._m0[89u].x));
    float _1158 = fma(_1134, cbSceneParam._m0[90u].z, fma(_1133, cbSceneParam._m0[90u].y, _1132 * cbSceneParam._m0[90u].x));
    float _1161 = fma(_1134, cbSceneParam._m0[91u].z, fma(_1133, cbSceneParam._m0[91u].y, _1132 * cbSceneParam._m0[91u].x));
    vec4 _1169 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_492, _493));
    float _1171 = _1169.w;
    uint _1187 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1191 = floatBitsToUint(cbInstanceData._m0[_1187 + 5u]);
    uint _1193 = _1191.x * 14u;
    uint _1194 = _1193 + 13u;
    float _1199 = _505 + (-1.0);
    float _1202 = (cbLight._m0[_1194].x * _1199) + 1.0;
    float _1203 = (cbLight._m0[_1194].y * _1199) + 1.0;
    uint _1204 = _1193 + 8u;
    float _1215 = cbLight._m0[_1193].x + _465;
    float _1216 = cbLight._m0[_1193].y + _466;
    float _1217 = cbLight._m0[_1193].z + _467;
    float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
    float _1225 = dot(vec3(0.0), vec3(cbLight._m0[_1193].xyz));
    float _2534 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1228 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
    float _1229 = dot(vec3(0.0), vec3(_465, _466, _467));
    float _2545 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1232 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
    float _1233 = dot(vec3(cbLight._m0[_1193].xyz), vec3(_1215 * _1221, _1216 * _1221, _1217 * _1221));
    float _2556 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1244 = (exp2(log2(1.0 - (isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1250 = (0.5 / ((_1228 + 9.9999999392252902907785028219223e-09) + _1232)) * _1228;
    float _2567 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _1252 = (isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0))) * 0.31831014156341552734375;
    float _1254 = isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0));
    uint _1267 = _1193 + 9u;
    uint _1273 = _1193 | 1u;
    float _1279 = cbLight._m0[_1273].x + _465;
    float _1280 = cbLight._m0[_1273].y + _466;
    float _1281 = cbLight._m0[_1273].z + _467;
    float _1285 = inversesqrt(dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281)));
    float _1289 = dot(vec3(0.0), vec3(cbLight._m0[_1273].xyz));
    float _2583 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1292 = isnan(1.0) ? _2583 : (isnan(_2583) ? 1.0 : min(_2583, 1.0));
    float _1293 = dot(vec3(cbLight._m0[_1273].xyz), vec3(_1279 * _1285, _1280 * _1285, _1281 * _1285));
    float _2594 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1302 = (exp2(log2(1.0 - (isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1306 = (0.5 / ((_1292 + 9.9999999392252902907785028219223e-09) + _1232)) * _1292;
    float _2605 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1308 = (isnan(1.0) ? _2605 : (isnan(_2605) ? 1.0 : min(_2605, 1.0))) * 0.31831014156341552734375;
    float _1309 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
    float _1319 = (((_1302 * cbLight._m0[_1267].x) * _1308) * _1309) + ((((cbLight._m0[_1204].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1171))) * _1244) * _1252) * _1254);
    float _1320 = (((_1302 * cbLight._m0[_1267].y) * _1308) * _1309) + ((((cbLight._m0[_1204].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1171))) * _1244) * _1252) * _1254);
    float _1321 = (((_1302 * cbLight._m0[_1267].z) * _1308) * _1309) + ((((cbLight._m0[_1204].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1171))) * _1244) * _1252) * _1254);
    float _1437;
    float _1439;
    float _1441;
    if (_1191.y == 0u)
    {
        float _1377 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1378 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1377;
        float _1379 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1377;
        float _1380 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1377;
        uvec4 _1392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1393 = _1392.x;
        uint _1404 = uint((float(_1392.y) * floor(float(uint(cbSceneParam._m0[85u].y * _493) / _1393))) + floor(float(uint(cbSceneParam._m0[85u].x * _492) / _1393)));
        float _1414 = (log2(_1380 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1415 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        uint _1418 = uint(isnan(14.0) ? _1415 : (isnan(_1415) ? 14.0 : min(_1415, 14.0)));
        uvec4 _1423 = texelFetch(g_lightClusterGridBuffer, int(((_1418 << 2u) + (_1404 << 6u)) >> 2u));
        uint _1424 = _1423.x;
        uint _1425 = _1392.z;
        float _1514;
        float _1516;
        float _1518;
        if (((((1u << ((_1425 >> 4u) & 15u)) + 4294967295u) & _1424) == 0u) || ((_1425 & 240u) == 0u))
        {
            _1514 = 0.0;
            _1516 = 0.0;
            _1518 = 0.0;
        }
        else
        {
            float _1515;
            float _1517;
            float _1519;
            float _1682 = 0.0;
            float _1683 = 0.0;
            float _1684 = 0.0;
            uint _1685 = 0u;
            uint _1694;
            bool _1695;
            for (;;)
            {
                _1694 = texelFetch(g_lightClassification, int((((_1418 << 5u) + (_1404 << 9u)) + (_1685 << 2u)) >> 2u)).x;
                _1695 = _1694 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1695)
                {
                    frontier_phi_67_pred = _1684;
                    frontier_phi_67_pred_1 = _1683;
                    frontier_phi_67_pred_2 = _1682;
                }
                else
                {
                    float _1869;
                    float _1870;
                    float _1871;
                    uint _1872;
                    _1869 = _1682;
                    _1870 = _1683;
                    _1871 = _1684;
                    _1872 = _1694;
                    float _1776;
                    float _1777;
                    float _1778;
                    for (;;)
                    {
                        uint _1876 = uint(findLSB(_1872)) + (_1685 << 5u);
                        uint _1873 = (_1872 + 4294967295u) & _1872;
                        uint _1878 = _1876 * 48u;
                        vec4 _1892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1878)).x, texelFetch(g_PointLightRenderingBuffer, int(_1878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1878 + 3u)).x));
                        uint _1909 = (_1876 * 48u) + 8u;
                        vec3 _1920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1909)).x, texelFetch(g_PointLightRenderingBuffer, int(_1909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1909 + 2u)).x));
                        float _1924 = _1892.x - _1378;
                        float _1925 = _1892.y - _1379;
                        float _1926 = _1892.z - _1380;
                        float _1927 = dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926));
                        float _1930 = inversesqrt(_1927);
                        float _1939 = 1.0 - (_1927 * _1892.w);
                        float _2631 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
                        float _1941 = sqrt(_1927) * uintBitsToFloat(uvec4(_1899, _1900, _1901, texelFetch(g_PointLightRenderingBuffer, int(((_1876 * 48u) + 4u) + 3u)).x)).w;
                        float _1944 = 1.39999997615814208984375 / (_1941 + 1.39999997615814208984375);
                        float _1945 = _1944 * _1944;
                        float _1948 = ((1.0 - _1945) * dot(vec3(0.0), vec3(_1930 * _1924, _1930 * _1925, _1930 * _1926))) + _1945;
                        float _1950 = (-0.0) - _1378;
                        float _1951 = (-0.0) - _1379;
                        float _1952 = (-0.0) - _1380;
                        float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
                        float _1960 = dot(vec3(0.0), vec3(_1956 * _1950, _1956 * _1951, _1956 * _1952));
                        float _2642 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
                        float _2653 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
                        float _1964 = isnan(1.0) ? _2653 : (isnan(_2653) ? 1.0 : min(_2653, 1.0));
                        float _1968 = (0.5 / (((isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0))) + 9.9999999392252902907785028219223e-09) + _1964)) * _1964;
                        float _2664 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
                        float _1977 = (((isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0))) * 3.1415927410125732421875) / (((_1941 * _1941) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2631 : (isnan(_2631) ? 1.0 : min(_2631, 1.0)));
                        _1776 = (_1977 * _1920.x) + _1869;
                        _1777 = (_1977 * _1920.y) + _1870;
                        _1778 = (_1977 * _1920.z) + _1871;
                        if (_1873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1869 = _1776;
                            _1870 = _1777;
                            _1871 = _1778;
                            _1872 = _1873;
                        }
                    }
                    frontier_phi_67_pred = _1778;
                    frontier_phi_67_pred_1 = _1777;
                    frontier_phi_67_pred_2 = _1776;
                }
                _1519 = frontier_phi_67_pred;
                _1517 = frontier_phi_67_pred_1;
                _1515 = frontier_phi_67_pred_2;
                uint _1686 = _1685 + 1u;
                if (_1686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1682 = _1515;
                    _1683 = _1517;
                    _1684 = _1519;
                    _1685 = _1686;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1514 = _1515;
            _1516 = _1517;
            _1518 = _1519;
        }
        uvec4 _1522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1523 = _1522.z;
        uint _1525 = (_1523 >> 8u) & 15u;
        float _1662;
        float _1664;
        float _1666;
        if (((4294967295u << _1525) & _1424) == 0u)
        {
            _1662 = _1514;
            _1664 = _1516;
            _1666 = _1518;
        }
        else
        {
            float _1678 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1525 < ((_1523 >> 12u) & 15u))
            {
                float _1663;
                float _1665;
                float _1667;
                float _1855 = _1514;
                float _1856 = _1516;
                float _1857 = _1518;
                uint _1858 = _1525;
                uint _1867;
                bool _1868;
                for (;;)
                {
                    _1867 = texelFetch(g_lightClassification, int((((_1418 << 5u) + (_1404 << 9u)) + (_1858 << 2u)) >> 2u)).x;
                    _1868 = _1867 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_1868)
                    {
                        frontier_phi_81_pred = _1855;
                        frontier_phi_81_pred_1 = _1857;
                        frontier_phi_81_pred_2 = _1856;
                    }
                    else
                    {
                        float _2012;
                        float _2013;
                        float _2014;
                        float _2233;
                        float _2234;
                        float _2235;
                        float _2022 = _1855;
                        float _2023 = _1856;
                        float _2024 = _1857;
                        uint _2025 = _1867;
                        uint _2026;
                        uint _2036;
                        vec4 _2051;
                        float _2052;
                        vec3 _2064;
                        vec4 _2079;
                        vec4 _2094;
                        float _2140;
                        bool _2141;
                        for (;;)
                        {
                            _2036 = ((_1858 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2025));
                            _2026 = (_2025 + 4294967295u) & _2025;
                            uint _2038 = _2036 * 40u;
                            _2051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2038 + 3u)).x));
                            _2052 = _2051.w;
                            uint _2054 = (_2036 * 40u) + 8u;
                            _2064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2054 + 2u)).x));
                            uint _2066 = (_2036 * 40u) + 16u;
                            _2079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2066 + 3u)).x));
                            uint _2081 = (_2036 * 40u) + 20u;
                            _2094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2081 + 3u)).x));
                            uint _2096 = (_2036 * 40u) + 24u;
                            vec4 _2109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2096 + 3u)).x));
                            uint _2115 = (_2036 * 40u) + 28u;
                            vec4 _2128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2115 + 3u)).x));
                            _2140 = fma(_1380, _2128.z, fma(_1379, _2128.y, _2128.x * _1378)) + _2128.w;
                            _2141 = !((fma(_1380, _2109.z, fma(_1379, _2109.y, _2109.x * _1378)) + _2109.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2141)
                            {
                                float _2175 = _2051.x - _1378;
                                float _2176 = _2051.y - _1379;
                                float _2177 = _2051.z - _1380;
                                float _2178 = dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177));
                                float _2181 = inversesqrt(_2178);
                                float _2188 = 1.0 - (_2178 / (_2052 * _2052));
                                float _2675 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
                                float _2190 = sqrt(_2178) * uintBitsToFloat(uvec4(_2144, _2145, _2146, texelFetch(g_SpotLightRenderingBuffer, int(((_2036 * 40u) + 4u) + 3u)).x)).w;
                                float _2192 = 1.39999997615814208984375 / (_2190 + 1.39999997615814208984375);
                                float _2193 = _2192 * _2192;
                                float _2196 = (fma(_1380, _2079.z, fma(_1379, _2079.y, _2079.x * _1378)) + _2079.w) / _2140;
                                float _2197 = (fma(_1380, _2094.z, fma(_1379, _2094.y, _2094.x * _1378)) + _2094.w) / _2140;
                                float _2201 = 1.0 - dot(vec2(_2196, _2197), vec2(_2196, _2197));
                                float _2686 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
                                float _2209 = dot(vec3(0.0), vec3((-0.0) - (_1378 * _1678), (-0.0) - (_1379 * _1678), (-0.0) - (_1380 * _1678)));
                                float _2697 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
                                float _2217 = ((1.0 - _2193) * dot(vec3(0.0), vec3(_2181 * _2175, _2181 * _2176, _2181 * _2177))) + _2193;
                                float _2708 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
                                float _2218 = isnan(1.0) ? _2708 : (isnan(_2708) ? 1.0 : min(_2708, 1.0));
                                float _2222 = (0.5 / (((isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) + 9.9999999392252902907785028219223e-09) + _2218)) * _2218;
                                float _2719 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
                                float _2229 = ((isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0))) * (isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0)))) * (((isnan(1.0) ? _2719 : (isnan(_2719) ? 1.0 : min(_2719, 1.0))) * 3.1415927410125732421875) / (((_2190 * _2190) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2229 * _2064.x;
                                frontier_phi_87_pred_1 = _2229 * _2064.y;
                                frontier_phi_87_pred_2 = _2229 * _2064.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2233 = frontier_phi_87_pred;
                            _2234 = frontier_phi_87_pred_1;
                            _2235 = frontier_phi_87_pred_2;
                            _2012 = _2233 + _2022;
                            _2013 = _2234 + _2023;
                            _2014 = _2235 + _2024;
                            if (_2026 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2022 = _2012;
                                _2023 = _2013;
                                _2024 = _2014;
                                _2025 = _2026;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2012;
                        frontier_phi_81_pred_1 = _2014;
                        frontier_phi_81_pred_2 = _2013;
                    }
                    _1663 = frontier_phi_81_pred;
                    _1667 = frontier_phi_81_pred_1;
                    _1665 = frontier_phi_81_pred_2;
                    uint _1859 = _1858 + 1u;
                    if (_1859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1855 = _1663;
                        _1856 = _1665;
                        _1857 = _1667;
                        _1858 = _1859;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1667;
                frontier_phi_56_57_ladder_1 = _1665;
                frontier_phi_56_57_ladder_2 = _1663;
            }
            else
            {
                frontier_phi_56_57_ladder = _1518;
                frontier_phi_56_57_ladder_1 = _1516;
                frontier_phi_56_57_ladder_2 = _1514;
            }
            _1662 = frontier_phi_56_57_ladder_2;
            _1664 = frontier_phi_56_57_ladder_1;
            _1666 = frontier_phi_56_57_ladder;
        }
        float _1671 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _1437 = ((_1662 * 0.039999999105930328369140625) * _1671) + _1319;
        _1439 = ((_1664 * 0.039999999105930328369140625) * _1671) + _1320;
        _1441 = ((_1666 * 0.039999999105930328369140625) * _1671) + _1321;
    }
    else
    {
        _1437 = _1319;
        _1439 = _1320;
        _1441 = _1321;
    }
    uint _1447 = _1187 + 9u;
    uint _1448 = _1447 + uint(cbMatDynParam._m0[0u].w);
    float _1463 = ((_437.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1448].x) + ((_1437 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _928)) * cbPerFrame._m0[3u].x);
    float _1464 = ((_437.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1448].y) + ((_1439 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _928)) * cbPerFrame._m0[3u].x);
    float _1465 = ((_437.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1448].z) + ((_1441 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _928)) * cbPerFrame._m0[3u].x);
    float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
    float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    uint _1469 = _1187 + 6u;
    float _1477 = _492 / cbSceneParam._m0[86u].x;
    float _1478 = _493 / cbSceneParam._m0[86u].y;
    vec4 _1492 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1477, _1478, (log2((isnan(cbSceneParam._m0[77u].w) ? _460 : (isnan(_460) ? cbSceneParam._m0[77u].w : min(_460, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1494 = _1492.x;
    float _1495 = _1492.y;
    float _1496 = _1492.z;
    float _1497 = _1492.w;
    float _1571;
    float _1573;
    float _1575;
    float _1577;
    if (_460 > cbSceneParam._m0[78u].w)
    {
        float _1533 = isnan(_460) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _460 : min(cbSceneParam._m0[80u].w, _460));
        float _1534 = _1533 / _460;
        float _1545 = _1534 * _256;
        float _1546 = _257 * _1534;
        float _1547 = (-0.0) - _1546;
        float _1548 = _1534 * _258;
        float _1550 = (cbSceneParam._m0[77u].w * _1547) / _1533;
        float _1551 = _1550 + cbSceneParam._m0[79u].w;
        float _1552 = cbSceneParam._m0[79u].w - _1546;
        float _1558 = sqrt(((_1545 * _1545) + (_1546 * _1546)) + (_1548 * _1548));
        float _1561 = (1.0 - (cbSceneParam._m0[77u].w / _1533)) * _1558;
        float _1567 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1569 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1786;
        if (abs((_1547 - _1550) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1786 = ((((_1551 > 0.0) ? exp2(_1567 * _1551) : (2.0 - exp2(_1569 * _1551))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1561;
        }
        else
        {
            float _1708 = 1.0 / cbSceneParam._m0[80u].x;
            float _1709 = isnan(_1552) ? _1551 : (isnan(_1551) ? _1552 : max(_1551, _1552));
            float _1710 = isnan(_1552) ? _1551 : (isnan(_1551) ? _1552 : min(_1551, _1552));
            float _1719 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : min(_1709, 0.0));
            float _1720 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : min(_1710, 0.0));
            _1786 = ((abs(_1558 / _1547) * cbSceneParam._m0[80u].y) * ((((_1719 - _1720) * 2.0) - ((exp2(_1567 * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)))) - exp2(_1567 * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))))) * _1708)) - ((exp2(_1569 * _1719) - exp2(_1569 * _1720)) * _1708))) + (_1561 * cbSceneParam._m0[80u].z);
        }
        vec4 _1788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1477, _1478, 1.0), 0.0);
        float _1797 = exp2((_1786 * (-1.44269502162933349609375)) * (1.0 - _1788.w));
        float _1798 = log2(_1797);
        float _1814 = log2(_1497);
        _1571 = (exp2(_1814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].x)) * _1788.x) / cbSceneParam._m0[78u].x)) + _1494;
        _1573 = (exp2(_1814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].y)) * _1788.y) / cbSceneParam._m0[78u].y)) + _1495;
        _1575 = (exp2(_1814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].z)) * _1788.z) / cbSceneParam._m0[78u].z)) + _1496;
        _1577 = _1797 * _1497;
    }
    else
    {
        _1571 = _1494;
        _1573 = _1495;
        _1575 = _1496;
        _1577 = _1497;
    }
    bool _1824;
    vec4 _1587;
    vec4 _1610;
    float _1612;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    bool _1630;
    for (;;)
    {
        _1587 = cbMatDynParam._m0[0u];
        float _1589 = roundEven(_1587.y);
        bool _1590 = _1589 == 3.0;
        float _1592 = log2(_1577);
        float _1599 = exp2(_1592 * cbSceneParam._m0[78u].x) * _1466;
        float _1600 = exp2(_1592 * cbSceneParam._m0[78u].y) * _1467;
        float _1601 = exp2(_1592 * cbSceneParam._m0[78u].z) * _1468;
        float _1608 = _474 + (-0.5);
        _1610 = cbMtdParam._m0[1u];
        _1612 = _1610.y * _1608;
        float _1615 = (_1589 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1616 = _1615 * (_1590 ? _1599 : (_1599 + (cbSceneParam._m0[72u].w * _1571)));
        _1617 = _1615 * (_1590 ? _1600 : (_1600 + (cbSceneParam._m0[72u].w * _1573)));
        _1618 = _1615 * (_1590 ? _1601 : (_1601 + (cbSceneParam._m0[72u].w * _1575)));
        _1619 = _1608 * 0.999000012874603271484375;
        _1630 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1630)
        {
            if ((cbInstanceData._m0[_1187 + 7u].x + _1619) < 0.5)
            {
                _1824 = true;
                break;
            }
        }
        uint _1743 = _1447 + uint(_1587.w);
        if ((cbInstanceData._m0[_1743].w < 1.0) && ((cbInstanceData._m0[_1743].w + _1619) < 0.5))
        {
            _1824 = true;
            break;
        }
        if ((_1612 + 1.0) < _1610.x)
        {
            _1824 = true;
            break;
        }
        _1824 = false;
        break;
    }
    float _1982;
    if (_1824)
    {
        discard_state = true;
        _1982 = 0.0;
    }
    else
    {
        _1982 = cbInstanceData._m0[_1469].w;
    }
    SV_Target.x = _1616;
    SV_Target.y = _1617;
    SV_Target.z = _1618;
    SV_Target.w = _1982;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1469].w;
    discard_exit();
}


