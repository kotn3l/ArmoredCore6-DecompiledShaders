#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _925;
uint _2097;
uint _2098;
uint _2099;
uint _2342;
uint _2343;
uint _2344;
float _2615;
float _2616;
float _2617;
float _2618;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _289 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _324 = cbMtdParam._m0[21u].w + _265;
    float _325 = cbMtdParam._m0[22u].x + _266;
    float _326 = cbMtdParam._m0[22u].y + _267;
    float _340 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _341 = (-0.0) - dot(vec3(_324, _325, _326), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _342 = (-0.0) - dot(vec3(_324, _325, _326), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _346 = inversesqrt(dot(vec3(_340, _341, _342), vec3(_340, _341, _342)));
    float _349 = _346 * _342;
    float _350 = (_346 * _340) + (((_289.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _351 = (_346 * _341) + (((_289.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _352 = _350 * cbMtdParam._m0[18u].z;
    float _353 = _351 * cbMtdParam._m0[18u].y;
    float _354 = fract(TEXCOORD.x);
    float _355 = fract(TEXCOORD.y);
    float _361;
    if (_352 > 0.0)
    {
        _361 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _361 = frontier_phi_3_2_ladder;
    }
    float _369;
    if (_353 > 0.0)
    {
        _369 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _369 = frontier_phi_7_6_ladder;
    }
    bool _371 = _349 > 0.0;
    float _373 = _371 ? (cbMtdParam._m0[15u].x / _349) : 5000.0;
    float _374 = isnan(_369) ? _361 : (isnan(_361) ? _369 : min(_361, _369));
    float _375 = isnan(_373) ? _374 : (isnan(_374) ? _373 : min(_374, _373));
    float _379 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _380 = _354 + (-0.5);
    float _383 = _355 + (-0.5);
    float _386 = ((_375 * _349) + _379) / _379;
    vec4 _410 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * (((((_380 + (_375 * _352)) / _386) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (((((_383 + (_375 * _353)) / _386) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _440 = _350 * cbMtdParam._m0[20u].z;
    float _441 = _351 * cbMtdParam._m0[20u].y;
    bool _442 = _440 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _447 = frontier_phi_11_10_ladder;
    }
    bool _449 = _441 > 0.0;
    float _454;
    if (_449)
    {
        _454 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _454 = frontier_phi_15_14_ladder;
    }
    float _457 = _371 ? (cbMtdParam._m0[16u].x / _349) : 5000.0;
    float _458 = isnan(_454) ? _447 : (isnan(_447) ? _454 : min(_447, _454));
    float _459 = isnan(_457) ? _458 : (isnan(_458) ? _457 : min(_458, _457));
    float _463 = cbMtdParam._m0[17u].x * cbMtdParam._m0[16u].x;
    float _467 = ((_459 * _349) + _463) / _463;
    float _472 = cbMtdParam._m0[16u].w - cbMtdParam._m0[17u].w * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    float _474 = floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[17u].w);
    vec4 _490 = texture(sampler2D(M_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_380 + (_459 * _440)) / _467) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_383 + (_459 * _441)) / _467) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[0u].w));
    float _502;
    if (_442)
    {
        _502 = (1.0 - _354) / _440;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _354) / _440;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _502 = frontier_phi_19_18_ladder;
    }
    float _508;
    if (_449)
    {
        _508 = (1.0 - _355) / _441;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _355) / _441;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _508 = frontier_phi_23_22_ladder;
    }
    float _510 = isnan(_508) ? _502 : (isnan(_502) ? _508 : min(_502, _508));
    float _511 = isnan(_457) ? _510 : (isnan(_510) ? _457 : min(_510, _457));
    float _518 = ((_511 * _349) + _463) / _463;
    vec4 _539 = texture(sampler2D(M_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * (((((_380 + (_511 * _440)) / _518) + 0.5) + _472) / cbMtdParam._m0[17u].w)) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * (((((_383 + (_511 * _441)) / _518) + 0.5) + _474) / cbMtdParam._m0[18u].x)) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_490.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_490.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_490.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _564 = _350 * cbMtdParam._m0[21u].x;
    float _565 = _351 * cbMtdParam._m0[20u].w;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _371 ? (cbMtdParam._m0[17u].z / _349) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[17u].z * cbMtdParam._m0[15u].z;
    float _591 = ((_583 * _349) + _587) / _587;
    float _596 = cbMtdParam._m0[17u].y - cbMtdParam._m0[21u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    float _598 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[21u].y);
    vec4 _615 = texture(sampler2D(M_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_380 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_383 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[7u].w));
    float _627;
    if (_566)
    {
        _627 = (1.0 - _354) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _354) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _627 = frontier_phi_35_34_ladder;
    }
    float _633;
    if (_573)
    {
        _633 = (1.0 - _355) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _355) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _633 = frontier_phi_39_38_ladder;
    }
    float _635 = isnan(_633) ? _627 : (isnan(_627) ? _633 : min(_627, _633));
    float _636 = isnan(_581) ? _635 : (isnan(_635) ? _581 : min(_635, _581));
    float _643 = ((_636 * _349) + _587) / _587;
    vec4 _663 = texture(sampler2D(M_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_380 + (_636 * _564)) / _643) + 0.5) + _596) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_383 + (_636 * _565)) / _643) + 0.5) + _598) / cbMtdParam._m0[21u].z)) + cbTextureTilingScale._m0[8u].w));
    float _665 = _663.x;
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _695 = _265 * _694;
    float _696 = _266 * _694;
    float _697 = _267 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _780 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _2677 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _2677 : (isnan(_2677) ? 1.0 : min(_2677, 1.0));
        float _785 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _2688 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0))) - _781)) + _781) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_716 * cbSceneParam._m0[86u].x, _717 * cbSceneParam._m0[86u].y));
    float _729 = _726.x * TEXCOORD.z;
    float _730 = (-0.0) - _695;
    float _731 = (-0.0) - _696;
    float _732 = (-0.0) - _697;
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _924;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = (cbModelParam._m0[37u].x * ((((fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _849 = (cbModelParam._m0[37u].y * ((((fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _850 = (((((fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        _924 = _887 * (_853.z + (-0.5));
        _926 = _887 * (_853.y + (-0.5));
        _927 = _887 * (_853.x + (-0.5));
        _928 = _897 * (_860.z + (-0.5));
        _929 = _897 * (_860.y + (-0.5));
        _930 = _897 * (_860.x + (-0.5));
        _931 = _907 * (_867.z + (-0.5));
        _932 = _907 * (_867.y + (-0.5));
        _933 = _907 * (_867.x + (-0.5));
        _934 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        _935 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        _936 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    }
    else
    {
        _924 = _925;
        _926 = _925;
        _927 = _925;
        _928 = _925;
        _929 = _925;
        _930 = _925;
        _931 = _925;
        _932 = _925;
        _933 = _925;
        _934 = _925;
        _935 = _925;
        _936 = _925;
    }
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = (cbModelParam._m0[38u].x * ((((fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _994 = (cbModelParam._m0[38u].y * ((((fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _995 = (((((fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        _1067 = _1030 * (_997.z + (-0.5));
        _1068 = _1030 * (_997.y + (-0.5));
        _1069 = _1030 * (_997.x + (-0.5));
        _1070 = _1040 * (_1004.z + (-0.5));
        _1071 = _1040 * (_1004.y + (-0.5));
        _1072 = _1040 * (_1004.x + (-0.5));
        _1073 = _1050 * (_1011.z + (-0.5));
        _1074 = _1050 * (_1011.y + (-0.5));
        _1075 = _1050 * (_1011.x + (-0.5));
        _1076 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        _1077 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        _1078 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    }
    else
    {
        _1067 = _925;
        _1068 = _925;
        _1069 = _925;
        _1070 = _925;
        _1071 = _925;
        _1072 = _925;
        _1073 = _925;
        _1074 = _925;
        _1075 = _925;
        _1076 = _925;
        _1077 = _925;
        _1078 = _925;
    }
    float _1093 = _695 * (-0.5);
    float _1094 = _696 * (-0.5);
    float _1095 = _697 * (-0.5);
    float _1096 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1099 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1102 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1137;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1109 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_924, _928, _931, _934));
        float _1113 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_926, _929, _932, _935));
        float _1117 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_927, _930, _933, _936));
        float _1124 = dot(vec4(cbModelParam._m0[39u]), vec4(_1093, _1094, _1095, 1.0));
        _1137 = dot(vec3(isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1124) ? 0.0 : (isnan(0.0) ? _1124 : max(0.0, _1124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1137 = 1.0;
    }
    float _1148;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1139 = dot(vec4(cbModelParam._m0[40u]), vec4(_1093, _1094, _1095, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1152 = (_1148 * cbModelParam._m0[1u].x) + (_1137 * (1.0 - cbModelParam._m0[1u].x));
    float _1158 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1239;
    float _1241;
    float _1243;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1206 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1210 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1214 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1217 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1220 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1223 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1249;
        if (_1217 > 0.0)
        {
            _1249 = abs((1.0 - _1206) / _1217);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1217 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1206 + 1.0) / _1217);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1249 = frontier_phi_57_55_ladder;
        }
        float _1525;
        if (_1220 > 0.0)
        {
            _1525 = abs((1.0 - _1210) / _1220);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1220 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1210 + 1.0) / _1220);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1525 = frontier_phi_66_62_ladder;
        }
        float _1829;
        if (_1223 > 0.0)
        {
            _1829 = abs((1.0 - _1214) / _1223);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1223 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1214 + 1.0) / _1223);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _1829 = frontier_phi_80_73_ladder;
        }
        float _1831 = isnan(_1525) ? _1249 : (isnan(_1249) ? _1525 : min(_1249, _1525));
        float _1832 = isnan(_1829) ? _1831 : (isnan(_1831) ? _1829 : min(_1831, _1829));
        float _1836 = (_1832 * _1217) + _1206;
        float _1837 = (_1832 * _1220) + _1210;
        float _1838 = (_1832 * _1223) + _1214;
        float _1839 = _1832 * 9.9999997473787516355514526367188e-05;
        float _1840 = (-1.0) - _1839;
        float _1842 = _1839 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_1838 > _1842) || ((_1838 < _1840) || ((_1837 > _1842) || ((_1837 < _1840) || ((_1836 < _1840) || (_1836 > _1842))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1838, cbModelParam._m0[9u].z, fma(_1837, cbModelParam._m0[9u].y, _1836 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1838, cbModelParam._m0[10u].z, fma(_1837, cbModelParam._m0[10u].y, _1836 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1838, cbModelParam._m0[11u].z, fma(_1837, cbModelParam._m0[11u].y, _1836 * cbModelParam._m0[11u].x))), _1158);
            frontier_phi_56_80_ladder = _1965.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _1965.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _1965.x * cbModelParam._m0[1u].y;
        }
        _1239 = frontier_phi_56_80_ladder_2;
        _1241 = frontier_phi_56_80_ladder_1;
        _1243 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1158);
        _1239 = _1227.x * cbModelParam._m0[1u].y;
        _1241 = _1227.y * cbModelParam._m0[1u].y;
        _1243 = _1227.z * cbModelParam._m0[1u].y;
    }
    float _1246 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1298 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1302 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1306 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1309 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1312 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1315 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1530;
        if (_1309 > 0.0)
        {
            _1530 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1530 = frontier_phi_68_64_ladder;
        }
        float _1855;
        if (_1312 > 0.0)
        {
            _1855 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _1855 = frontier_phi_82_75_ladder;
        }
        float _2027;
        if (_1315 > 0.0)
        {
            _2027 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2027 = frontier_phi_100_93_ladder;
        }
        float _2029 = isnan(_1855) ? _1530 : (isnan(_1530) ? _1855 : min(_1530, _1855));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1309) + _1298;
        float _2035 = (_2030 * _1312) + _1302;
        float _2036 = (_2030 * _1315) + _1306;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2037;
        float _2040 = _2037 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2036 > _2040) || ((_2036 < _2038) || ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 < _2038) || (_2034 > _2040))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2205 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2036, cbModelParam._m0[17u].z, fma(_2035, cbModelParam._m0[17u].y, _2034 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2036, cbModelParam._m0[18u].z, fma(_2035, cbModelParam._m0[18u].y, _2034 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2036, cbModelParam._m0[19u].z, fma(_2035, cbModelParam._m0[19u].y, _2034 * cbModelParam._m0[19u].x))), _1246);
            frontier_phi_65_100_ladder = _2205.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2205.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2205.x * cbModelParam._m0[1u].z;
        }
        _1334 = frontier_phi_65_100_ladder_2;
        _1336 = frontier_phi_65_100_ladder_1;
        _1338 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1246);
        _1334 = _1318.x * cbModelParam._m0[1u].z;
        _1336 = _1318.y * cbModelParam._m0[1u].z;
        _1338 = _1318.z * cbModelParam._m0[1u].z;
    }
    float _1350 = _729 * 0.01200000010430812835693359375;
    float _1352 = _1350 * ((cbModelParam._m0[1u].w * (_1334 - _1239)) + _1239);
    float _1353 = _1350 * ((cbModelParam._m0[1u].w * (_1336 - _1241)) + _1241);
    float _1354 = _1350 * ((cbModelParam._m0[1u].w * (_1338 - _1243)) + _1243);
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, _1352 * cbSceneParam._m0[91u].x));
    uint _1388 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1392 = floatBitsToUint(cbInstanceData._m0[_1388 + 5u]);
    uint _1394 = _1392.x * 14u;
    uint _1395 = _1394 + 13u;
    float _1400 = _729 + (-1.0);
    float _1403 = (cbLight._m0[_1395].x * _1400) + 1.0;
    float _1404 = (cbLight._m0[_1395].y * _1400) + 1.0;
    uint _1405 = _1394 + 8u;
    float _1416 = cbLight._m0[_1394].x + _695;
    float _1417 = cbLight._m0[_1394].y + _696;
    float _1418 = cbLight._m0[_1394].z + _697;
    float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
    float _1426 = dot(vec3(0.0), vec3(cbLight._m0[_1394].xyz));
    float _2814 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
    float _1429 = isnan(1.0) ? _2814 : (isnan(_2814) ? 1.0 : min(_2814, 1.0));
    float _1430 = dot(vec3(0.0), vec3(_695, _696, _697));
    float _2825 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    float _1433 = isnan(1.0) ? _2825 : (isnan(_2825) ? 1.0 : min(_2825, 1.0));
    float _1434 = dot(vec3(cbLight._m0[_1394].xyz), vec3(_1416 * _1422, _1417 * _1422, _1418 * _1422));
    float _2836 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
    float _1445 = (exp2(log2(1.0 - (isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1451 = (0.5 / ((_1429 + 9.9999999392252902907785028219223e-09) + _1433)) * _1429;
    float _2847 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1453 = (isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0))) * 0.31831014156341552734375;
    float _1455 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
    uint _1465 = _1394 + 9u;
    uint _1471 = _1394 | 1u;
    float _1477 = cbLight._m0[_1471].x + _695;
    float _1478 = cbLight._m0[_1471].y + _696;
    float _1479 = cbLight._m0[_1471].z + _697;
    float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
    float _1487 = dot(vec3(0.0), vec3(cbLight._m0[_1471].xyz));
    float _2863 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1490 = isnan(1.0) ? _2863 : (isnan(_2863) ? 1.0 : min(_2863, 1.0));
    float _1491 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_1477 * _1483, _1478 * _1483, _1479 * _1483));
    float _2874 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
    float _1500 = (exp2(log2(1.0 - (isnan(1.0) ? _2874 : (isnan(_2874) ? 1.0 : min(_2874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1504 = (0.5 / ((_1490 + 9.9999999392252902907785028219223e-09) + _1433)) * _1490;
    float _2885 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _1506 = (isnan(1.0) ? _2885 : (isnan(_2885) ? 1.0 : min(_2885, 1.0))) * 0.31831014156341552734375;
    float _1507 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
    float _1517 = (((_1500 * cbLight._m0[_1465].x) * _1506) * _1507) + (((_1445 * cbLight._m0[_1405].x) * _1453) * _1455);
    float _1518 = (((_1500 * cbLight._m0[_1465].y) * _1506) * _1507) + (((_1445 * cbLight._m0[_1405].y) * _1453) * _1455);
    float _1519 = (((_1500 * cbLight._m0[_1465].z) * _1506) * _1507) + (((_1445 * cbLight._m0[_1405].z) * _1453) * _1455);
    float _1635;
    float _1637;
    float _1639;
    if (_1392.y == 0u)
    {
        float _1575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1576 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1575;
        float _1577 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1575;
        float _1578 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1575;
        uvec4 _1590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1591 = _1590.x;
        uint _1602 = uint((float(_1590.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _1591))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _1591)));
        float _1612 = (log2(_1578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1613 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        uint _1616 = uint(isnan(14.0) ? _1613 : (isnan(_1613) ? 14.0 : min(_1613, 14.0)));
        uvec4 _1621 = texelFetch(g_lightClusterGridBuffer, int(((_1616 << 2u) + (_1602 << 6u)) >> 2u));
        uint _1622 = _1621.x;
        uint _1623 = _1590.z;
        float _1712;
        float _1714;
        float _1716;
        if (((((1u << ((_1623 >> 4u) & 15u)) + 4294967295u) & _1622) == 0u) || ((_1623 & 240u) == 0u))
        {
            _1712 = 0.0;
            _1714 = 0.0;
            _1716 = 0.0;
        }
        else
        {
            float _1713;
            float _1715;
            float _1717;
            float _1880 = 0.0;
            float _1881 = 0.0;
            float _1882 = 0.0;
            uint _1883 = 0u;
            uint _1892;
            bool _1893;
            for (;;)
            {
                _1892 = texelFetch(g_lightClassification, int((((_1616 << 5u) + (_1602 << 9u)) + (_1883 << 2u)) >> 2u)).x;
                _1893 = _1892 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_1893)
                {
                    frontier_phi_95_pred = _1882;
                    frontier_phi_95_pred_1 = _1881;
                    frontier_phi_95_pred_2 = _1880;
                }
                else
                {
                    float _2067;
                    float _2068;
                    float _2069;
                    uint _2070;
                    _2067 = _1880;
                    _2068 = _1881;
                    _2069 = _1882;
                    _2070 = _1892;
                    float _1974;
                    float _1975;
                    float _1976;
                    for (;;)
                    {
                        uint _2074 = uint(findLSB(_2070)) + (_1883 << 5u);
                        uint _2071 = (_2070 + 4294967295u) & _2070;
                        uint _2076 = _2074 * 48u;
                        vec4 _2090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2076)).x, texelFetch(g_PointLightRenderingBuffer, int(_2076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2076 + 3u)).x));
                        uint _2107 = (_2074 * 48u) + 8u;
                        vec3 _2118 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2107)).x, texelFetch(g_PointLightRenderingBuffer, int(_2107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2107 + 2u)).x));
                        float _2122 = _2090.x - _1576;
                        float _2123 = _2090.y - _1577;
                        float _2124 = _2090.z - _1578;
                        float _2125 = dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124));
                        float _2128 = inversesqrt(_2125);
                        float _2137 = 1.0 - (_2125 * _2090.w);
                        float _2911 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
                        float _2139 = sqrt(_2125) * uintBitsToFloat(uvec4(_2097, _2098, _2099, texelFetch(g_PointLightRenderingBuffer, int(((_2074 * 48u) + 4u) + 3u)).x)).w;
                        float _2142 = 1.39999997615814208984375 / (_2139 + 1.39999997615814208984375);
                        float _2143 = _2142 * _2142;
                        float _2146 = ((1.0 - _2143) * dot(vec3(0.0), vec3(_2128 * _2122, _2128 * _2123, _2128 * _2124))) + _2143;
                        float _2148 = (-0.0) - _1576;
                        float _2149 = (-0.0) - _1577;
                        float _2150 = (-0.0) - _1578;
                        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
                        float _2158 = dot(vec3(0.0), vec3(_2154 * _2148, _2154 * _2149, _2154 * _2150));
                        float _2922 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
                        float _2933 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
                        float _2162 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
                        float _2166 = (0.5 / (((isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0))) + 9.9999999392252902907785028219223e-09) + _2162)) * _2162;
                        float _2944 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
                        float _2175 = (((isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0))) * 3.1415927410125732421875) / (((_2139 * _2139) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0)));
                        _1974 = (_2175 * _2118.x) + _2067;
                        _1975 = (_2175 * _2118.y) + _2068;
                        _1976 = (_2175 * _2118.z) + _2069;
                        if (_2071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2067 = _1974;
                            _2068 = _1975;
                            _2069 = _1976;
                            _2070 = _2071;
                        }
                    }
                    frontier_phi_95_pred = _1976;
                    frontier_phi_95_pred_1 = _1975;
                    frontier_phi_95_pred_2 = _1974;
                }
                _1717 = frontier_phi_95_pred;
                _1715 = frontier_phi_95_pred_1;
                _1713 = frontier_phi_95_pred_2;
                uint _1884 = _1883 + 1u;
                if (_1884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1880 = _1713;
                    _1881 = _1715;
                    _1882 = _1717;
                    _1883 = _1884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1712 = _1713;
            _1714 = _1715;
            _1716 = _1717;
        }
        uvec4 _1720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1721 = _1720.z;
        uint _1723 = (_1721 >> 8u) & 15u;
        float _1860;
        float _1862;
        float _1864;
        if (((4294967295u << _1723) & _1622) == 0u)
        {
            _1860 = _1712;
            _1862 = _1714;
            _1864 = _1716;
        }
        else
        {
            float _1876 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1723 < ((_1721 >> 12u) & 15u))
            {
                float _1861;
                float _1863;
                float _1865;
                float _2053 = _1712;
                float _2054 = _1714;
                float _2055 = _1716;
                uint _2056 = _1723;
                uint _2065;
                bool _2066;
                for (;;)
                {
                    _2065 = texelFetch(g_lightClassification, int((((_1616 << 5u) + (_1602 << 9u)) + (_2056 << 2u)) >> 2u)).x;
                    _2066 = _2065 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2066)
                    {
                        frontier_phi_109_pred = _2055;
                        frontier_phi_109_pred_1 = _2054;
                        frontier_phi_109_pred_2 = _2053;
                    }
                    else
                    {
                        float _2210;
                        float _2211;
                        float _2212;
                        float _2431;
                        float _2432;
                        float _2433;
                        float _2220 = _2053;
                        float _2221 = _2054;
                        float _2222 = _2055;
                        uint _2223 = _2065;
                        uint _2224;
                        uint _2234;
                        vec4 _2249;
                        float _2250;
                        vec3 _2262;
                        vec4 _2277;
                        vec4 _2292;
                        float _2338;
                        bool _2339;
                        for (;;)
                        {
                            _2234 = ((_2056 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2223));
                            _2224 = (_2223 + 4294967295u) & _2223;
                            uint _2236 = _2234 * 40u;
                            _2249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2236 + 3u)).x));
                            _2250 = _2249.w;
                            uint _2252 = (_2234 * 40u) + 8u;
                            _2262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2252 + 2u)).x));
                            uint _2264 = (_2234 * 40u) + 16u;
                            _2277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2264 + 3u)).x));
                            uint _2279 = (_2234 * 40u) + 20u;
                            _2292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2279 + 3u)).x));
                            uint _2294 = (_2234 * 40u) + 24u;
                            vec4 _2307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2294 + 3u)).x));
                            uint _2313 = (_2234 * 40u) + 28u;
                            vec4 _2326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2313 + 3u)).x));
                            _2338 = fma(_1578, _2326.z, fma(_1577, _2326.y, _2326.x * _1576)) + _2326.w;
                            _2339 = !((fma(_1578, _2307.z, fma(_1577, _2307.y, _2307.x * _1576)) + _2307.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2339)
                            {
                                float _2373 = _2249.x - _1576;
                                float _2374 = _2249.y - _1577;
                                float _2375 = _2249.z - _1578;
                                float _2376 = dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375));
                                float _2379 = inversesqrt(_2376);
                                float _2386 = 1.0 - (_2376 / (_2250 * _2250));
                                float _2955 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
                                float _2388 = sqrt(_2376) * uintBitsToFloat(uvec4(_2342, _2343, _2344, texelFetch(g_SpotLightRenderingBuffer, int(((_2234 * 40u) + 4u) + 3u)).x)).w;
                                float _2390 = 1.39999997615814208984375 / (_2388 + 1.39999997615814208984375);
                                float _2391 = _2390 * _2390;
                                float _2394 = (fma(_1578, _2277.z, fma(_1577, _2277.y, _2277.x * _1576)) + _2277.w) / _2338;
                                float _2395 = (fma(_1578, _2292.z, fma(_1577, _2292.y, _2292.x * _1576)) + _2292.w) / _2338;
                                float _2399 = 1.0 - dot(vec2(_2394, _2395), vec2(_2394, _2395));
                                float _2966 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
                                float _2407 = dot(vec3(0.0), vec3((-0.0) - (_1576 * _1876), (-0.0) - (_1577 * _1876), (-0.0) - (_1578 * _1876)));
                                float _2977 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
                                float _2415 = ((1.0 - _2391) * dot(vec3(0.0), vec3(_2379 * _2373, _2379 * _2374, _2379 * _2375))) + _2391;
                                float _2988 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
                                float _2416 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
                                float _2420 = (0.5 / (((isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0))) + 9.9999999392252902907785028219223e-09) + _2416)) * _2416;
                                float _2999 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
                                float _2427 = ((isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0))) * (isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0)))) * (((isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0))) * 3.1415927410125732421875) / (((_2388 * _2388) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2427 * _2262.y;
                                frontier_phi_115_pred_1 = _2427 * _2262.x;
                                frontier_phi_115_pred_2 = _2427 * _2262.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2432 = frontier_phi_115_pred;
                            _2431 = frontier_phi_115_pred_1;
                            _2433 = frontier_phi_115_pred_2;
                            _2210 = _2431 + _2220;
                            _2211 = _2432 + _2221;
                            _2212 = _2433 + _2222;
                            if (_2224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2220 = _2210;
                                _2221 = _2211;
                                _2222 = _2212;
                                _2223 = _2224;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2212;
                        frontier_phi_109_pred_1 = _2211;
                        frontier_phi_109_pred_2 = _2210;
                    }
                    _1865 = frontier_phi_109_pred;
                    _1863 = frontier_phi_109_pred_1;
                    _1861 = frontier_phi_109_pred_2;
                    uint _2057 = _2056 + 1u;
                    if (_2057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2053 = _1861;
                        _2054 = _1863;
                        _2055 = _1865;
                        _2056 = _2057;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _1865;
                frontier_phi_84_85_ladder_1 = _1863;
                frontier_phi_84_85_ladder_2 = _1861;
            }
            else
            {
                frontier_phi_84_85_ladder = _1716;
                frontier_phi_84_85_ladder_1 = _1714;
                frontier_phi_84_85_ladder_2 = _1712;
            }
            _1860 = frontier_phi_84_85_ladder_2;
            _1862 = frontier_phi_84_85_ladder_1;
            _1864 = frontier_phi_84_85_ladder;
        }
        float _1869 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _1635 = ((_1860 * 0.039999999105930328369140625) * _1869) + _1517;
        _1637 = ((_1862 * 0.039999999105930328369140625) * _1869) + _1518;
        _1639 = ((_1864 * 0.039999999105930328369140625) * _1869) + _1519;
    }
    else
    {
        _1635 = _1517;
        _1637 = _1518;
        _1639 = _1519;
    }
    uint _1645 = _1388 + 9u;
    uint _1646 = _1645 + uint(cbMatDynParam._m0[0u].w);
    float _1661 = (cbInstanceData._m0[_1646].x * ((_665 * ((_615.x * cbMtdParam._m0[14u].x) - _548)) + _548)) + ((_1635 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1662 = (cbInstanceData._m0[_1646].y * ((_665 * ((_615.y * cbMtdParam._m0[14u].y) - _549)) + _549)) + ((_1637 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1663 = (cbInstanceData._m0[_1646].z * ((_665 * ((_615.z * cbMtdParam._m0[14u].z) - _550)) + _550)) + ((_1639 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1664 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    uint _1667 = _1388 + 6u;
    float _1675 = _716 / cbSceneParam._m0[86u].x;
    float _1676 = _717 / cbSceneParam._m0[86u].y;
    vec4 _1690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1675, _1676, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1692 = _1690.x;
    float _1693 = _1690.y;
    float _1694 = _1690.z;
    float _1695 = _1690.w;
    float _1769;
    float _1771;
    float _1773;
    float _1775;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _1731 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _1732 = _1731 / _690;
        float _1743 = _1732 * _265;
        float _1744 = _266 * _1732;
        float _1745 = (-0.0) - _1744;
        float _1746 = _1732 * _267;
        float _1748 = (cbSceneParam._m0[77u].w * _1745) / _1731;
        float _1749 = _1748 + cbSceneParam._m0[79u].w;
        float _1750 = cbSceneParam._m0[79u].w - _1744;
        float _1756 = sqrt(((_1743 * _1743) + (_1744 * _1744)) + (_1746 * _1746));
        float _1759 = (1.0 - (cbSceneParam._m0[77u].w / _1731)) * _1756;
        float _1765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1984;
        if (abs((_1745 - _1748) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1984 = ((((_1749 > 0.0) ? exp2(_1765 * _1749) : (2.0 - exp2(_1767 * _1749))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1759;
        }
        else
        {
            float _1906 = 1.0 / cbSceneParam._m0[80u].x;
            float _1907 = isnan(_1750) ? _1749 : (isnan(_1749) ? _1750 : max(_1749, _1750));
            float _1908 = isnan(_1750) ? _1749 : (isnan(_1749) ? _1750 : min(_1749, _1750));
            float _1917 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : min(_1907, 0.0));
            float _1918 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : min(_1908, 0.0));
            _1984 = ((abs(_1756 / _1745) * cbSceneParam._m0[80u].y) * ((((_1917 - _1918) * 2.0) - ((exp2(_1765 * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)))) - exp2(_1765 * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))))) * _1906)) - ((exp2(_1767 * _1917) - exp2(_1767 * _1918)) * _1906))) + (_1759 * cbSceneParam._m0[80u].z);
        }
        vec4 _1986 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1675, _1676, 1.0), 0.0);
        float _1995 = exp2((_1984 * (-1.44269502162933349609375)) * (1.0 - _1986.w));
        float _1996 = log2(_1995);
        float _2012 = log2(_1695);
        _1769 = (exp2(_2012 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1996 * cbSceneParam._m0[78u].x)) * _1986.x) / cbSceneParam._m0[78u].x)) + _1692;
        _1771 = (exp2(_2012 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1996 * cbSceneParam._m0[78u].y)) * _1986.y) / cbSceneParam._m0[78u].y)) + _1693;
        _1773 = (exp2(_2012 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1996 * cbSceneParam._m0[78u].z)) * _1986.z) / cbSceneParam._m0[78u].z)) + _1694;
        _1775 = _1995 * _1695;
    }
    else
    {
        _1769 = _1692;
        _1771 = _1693;
        _1773 = _1694;
        _1775 = _1695;
    }
    bool _2022;
    vec4 _1785;
    vec4 _1808;
    float _1810;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    bool _1828;
    for (;;)
    {
        _1785 = cbMatDynParam._m0[0u];
        float _1787 = roundEven(_1785.y);
        bool _1788 = _1787 == 3.0;
        float _1790 = log2(_1775);
        float _1797 = exp2(_1790 * cbSceneParam._m0[78u].x) * _1664;
        float _1798 = exp2(_1790 * cbSceneParam._m0[78u].y) * _1665;
        float _1799 = exp2(_1790 * cbSceneParam._m0[78u].z) * _1666;
        float _1806 = _704 + (-0.5);
        _1808 = cbMtdParam._m0[1u];
        _1810 = _1808.y * _1806;
        float _1813 = (_1787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1814 = _1813 * (_1788 ? _1797 : (_1797 + (cbSceneParam._m0[72u].w * _1769)));
        _1815 = _1813 * (_1788 ? _1798 : (_1798 + (cbSceneParam._m0[72u].w * _1771)));
        _1816 = _1813 * (_1788 ? _1799 : (_1799 + (cbSceneParam._m0[72u].w * _1773)));
        _1817 = _1806 * 0.999000012874603271484375;
        _1828 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1828)
        {
            if ((cbInstanceData._m0[_1388 + 7u].x + _1817) < 0.5)
            {
                _2022 = true;
                break;
            }
        }
        uint _1941 = _1645 + uint(_1785.w);
        if ((cbInstanceData._m0[_1941].w < 1.0) && ((cbInstanceData._m0[_1941].w + _1817) < 0.5))
        {
            _2022 = true;
            break;
        }
        if ((_1810 + 1.0) < _1808.x)
        {
            _2022 = true;
            break;
        }
        _2022 = false;
        break;
    }
    float _2180;
    if (_2022)
    {
        discard_state = true;
        _2180 = 0.0;
    }
    else
    {
        _2180 = cbInstanceData._m0[_1667].w;
    }
    SV_Target.x = _1814;
    SV_Target.y = _1815;
    SV_Target.z = _1816;
    SV_Target.w = _2180;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1667].w;
    discard_exit();
}


