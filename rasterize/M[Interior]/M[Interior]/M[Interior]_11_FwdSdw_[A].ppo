#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _835;
float _3051;
float _3052;
float _3053;
float _3054;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _248);
    float _259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _248);
    float _260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _248);
    vec4 _282 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _317 = cbMtdParam._m0[21u].w + _258;
    float _318 = cbMtdParam._m0[22u].x + _259;
    float _319 = cbMtdParam._m0[22u].y + _260;
    float _336 = (-0.0) - dot(vec3(_317, _318, _319), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _337 = (-0.0) - dot(vec3(_317, _318, _319), vec3(_200 * TANGENT.x, _200 * TANGENT.y, _200 * TANGENT.z));
    float _338 = (-0.0) - dot(vec3(_317, _318, _319), vec3((-0.0) - (NORMAL.x * _196), (-0.0) - (NORMAL.y * _196), (-0.0) - (NORMAL.z * _196)));
    float _342 = inversesqrt(dot(vec3(_336, _337, _338), vec3(_336, _337, _338)));
    float _345 = _342 * _338;
    float _348 = ((_342 * _336) + (((_282.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w)) * cbMtdParam._m0[18u].z;
    float _349 = ((_342 * _337) + (((_282.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x)) * cbMtdParam._m0[18u].y;
    float _350 = fract(TEXCOORD.x);
    float _351 = fract(TEXCOORD.y);
    float _357;
    if (_348 > 0.0)
    {
        _357 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _357 = frontier_phi_3_2_ladder;
    }
    float _365;
    if (_349 > 0.0)
    {
        _365 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _365 = frontier_phi_7_6_ladder;
    }
    float _369 = (_345 > 0.0) ? (cbMtdParam._m0[15u].x / _345) : 5000.0;
    float _370 = isnan(_365) ? _357 : (isnan(_357) ? _365 : min(_357, _365));
    float _371 = isnan(_369) ? _370 : (isnan(_370) ? _369 : min(_370, _369));
    float _375 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _382 = ((_371 * _345) + _375) / _375;
    vec4 _406 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_350 + (-0.5)) + (_371 * _348)) / _382) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_351 + (-0.5)) + (_371 * _349)) / _382) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _3073 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3084 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3095 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _442 = _258 * _441;
    float _443 = _259 * _441;
    float _444 = _260 * _441;
    vec4 _449 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _451 = _449.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _548 = sqrt(((_258 * _258) + (_259 * _259)) + (_260 * _260));
        float _555 = (cbMatDynParam._m0[5u].x * _548) + cbMatDynParam._m0[5u].y;
        float _3106 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _556 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _560 = (cbMatDynParam._m0[5u].z * _548) + cbMatDynParam._m0[5u].w;
        float _3117 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) - _556)) + _556) < ((_451 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _464 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _465 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _478 = uint(roundEven(NORMAL.w)) * 13u;
    uint _480 = _478 + 9u;
    uint _481 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3128 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _3139 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    float _3150 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _464, cbSceneParam._m0[86u].y * _465));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = (-0.0) - _442;
    float _506 = (-0.0) - _443;
    float _507 = (-0.0) - _444;
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _834;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _622 = (cbModelParam._m0[37u].x * ((((fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _624 = (cbModelParam._m0[37u].y * ((((fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _625 = (((((fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _624, _625), 0.0);
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_628.x + (-0.5));
        float _664 = _662 * (_628.y + (-0.5));
        float _665 = _662 * (_628.z + (-0.5));
        float _672 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_635.x + (-0.5));
        float _674 = _672 * (_635.y + (-0.5));
        float _675 = _672 * (_635.z + (-0.5));
        float _682 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_642.x + (-0.5));
        float _684 = _682 * (_642.y + (-0.5));
        float _685 = _682 * (_642.z + (-0.5));
        float _692 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_649.x + (-0.5));
        float _694 = _692 * (_649.y + (-0.5));
        float _695 = _692 * (_649.z + (-0.5));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = _663 * 0.5;
        float _700 = _673 * 0.5;
        float _701 = _683 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _716 = (dot(vec3(0.0), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _726 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3198 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_728 + 1.0))) + _733) * _696;
        float _743 = _664 * 0.5;
        float _744 = _674 * 0.5;
        float _745 = _684 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(0.0), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3231 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_770 + 1.0))) + _775) * _697;
        float _785 = _665 * 0.5;
        float _786 = _675 * 0.5;
        float _787 = _685 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(0.0), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3242 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3253 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3264 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * (_812 + 1.0))) + _817) * _698;
        _834 = _665;
        _836 = _664;
        _837 = _663;
        _838 = _675;
        _839 = _674;
        _840 = _673;
        _841 = _685;
        _842 = _684;
        _843 = _683;
        _844 = _698;
        _845 = _697;
        _846 = _696;
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
    }
    else
    {
        _834 = _835;
        _836 = _835;
        _837 = _835;
        _838 = _835;
        _839 = _835;
        _840 = _835;
        _841 = _835;
        _842 = _835;
        _843 = _835;
        _844 = _835;
        _845 = _835;
        _846 = _835;
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
    }
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _906 = (cbModelParam._m0[38u].x * ((((fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _907 = (cbModelParam._m0[38u].y * ((((fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _908 = (((((fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _943 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_910.x + (-0.5));
        float _945 = _943 * (_910.y + (-0.5));
        float _946 = _943 * (_910.z + (-0.5));
        float _953 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_917.x + (-0.5));
        float _955 = _953 * (_917.y + (-0.5));
        float _956 = _953 * (_917.z + (-0.5));
        float _963 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_924.x + (-0.5));
        float _965 = _963 * (_924.y + (-0.5));
        float _966 = _963 * (_924.z + (-0.5));
        float _973 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_931.x + (-0.5));
        float _975 = _973 * (_931.y + (-0.5));
        float _976 = _973 * (_931.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(0.0), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3327 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1007 + 1.0))) + _1012) * _977;
        float _1022 = _945 * 0.5;
        float _1023 = _955 * 0.5;
        float _1024 = _965 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(0.0), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3360 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1049 + 1.0))) + _1054) * _978;
        float _1064 = _946 * 0.5;
        float _1065 = _956 * 0.5;
        float _1066 = _966 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(0.0), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3393 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1091 + 1.0))) + _1096) * _979;
        _1113 = _946;
        _1114 = _945;
        _1115 = _944;
        _1116 = _956;
        _1117 = _955;
        _1118 = _954;
        _1119 = _966;
        _1120 = _965;
        _1121 = _964;
        _1122 = _979;
        _1123 = _978;
        _1124 = _977;
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _835;
        _1114 = _835;
        _1115 = _835;
        _1116 = _835;
        _1117 = _835;
        _1118 = _835;
        _1119 = _835;
        _1120 = _835;
        _1121 = _835;
        _1122 = _835;
        _1123 = _835;
        _1124 = _835;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _847)) + _847;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _848)) + _848;
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _849)) + _849;
    float _1160 = fma(_1139, cbSceneParam._m0[89u].z, fma(_1138, cbSceneParam._m0[89u].y, _1137 * cbSceneParam._m0[89u].x));
    float _1163 = fma(_1139, cbSceneParam._m0[90u].z, fma(_1138, cbSceneParam._m0[90u].y, _1137 * cbSceneParam._m0[90u].x));
    float _1166 = fma(_1139, cbSceneParam._m0[91u].z, fma(_1138, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1137));
    float _1181 = _442 * (-0.5);
    float _1182 = _443 * (-0.5);
    float _1183 = _444 * (-0.5);
    float _1184 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1187 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1190 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1224;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1197 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_834, _838, _841, _844));
        float _1201 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_836, _839, _842, _845));
        float _1205 = dot(vec4(_1181, _1182, _1183, 1.0), vec4(_837, _840, _843, _846));
        float _1212 = dot(vec4(cbModelParam._m0[39u]), vec4(_1181, _1182, _1183, 1.0));
        _1224 = dot(vec3(isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1212) ? 0.0 : (isnan(0.0) ? _1212 : max(0.0, _1212))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1224 = 1.0;
    }
    float _1235;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1226 = dot(vec4(cbModelParam._m0[40u]), vec4(_1181, _1182, _1183, 1.0));
        _1235 = dot(vec3(isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1226) ? 0.0 : (isnan(0.0) ? _1226 : max(0.0, _1226))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1235 = 1.0;
    }
    float _1239 = (_1235 * cbModelParam._m0[1u].x) + (_1224 * (1.0 - cbModelParam._m0[1u].x));
    float _1248 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1297 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1301 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1305 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1308 = fma(_507, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505));
        float _1311 = fma(_507, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505));
        float _1314 = fma(_507, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505));
        float _1340;
        if (_1308 > 0.0)
        {
            _1340 = abs((1.0 - _1297) / _1308);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1297 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1340 = frontier_phi_25_23_ladder;
        }
        float _1510;
        if (_1311 > 0.0)
        {
            _1510 = abs((1.0 - _1301) / _1311);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1301 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1510 = frontier_phi_34_30_ladder;
        }
        float _1904;
        if (_1314 > 0.0)
        {
            _1904 = abs((1.0 - _1305) / _1314);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1305 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _1904 = frontier_phi_46_41_ladder;
        }
        float _1906 = isnan(_1510) ? _1340 : (isnan(_1340) ? _1510 : min(_1340, _1510));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1308) + _1297;
        float _1912 = (_1907 * _1311) + _1301;
        float _1913 = (_1907 * _1314) + _1305;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1248);
            frontier_phi_24_46_ladder = _2147.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2147.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2147.x * cbModelParam._m0[1u].y;
        }
        _1330 = frontier_phi_24_46_ladder_2;
        _1332 = frontier_phi_24_46_ladder_1;
        _1334 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_505, _506, _507), _1248);
        _1330 = _1318.x * cbModelParam._m0[1u].y;
        _1332 = _1318.y * cbModelParam._m0[1u].y;
        _1334 = _1318.z * cbModelParam._m0[1u].y;
    }
    float _1337 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1425;
    float _1427;
    float _1429;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1389 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1393 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1397 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1400 = fma(_507, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505));
        float _1403 = fma(_507, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505));
        float _1406 = fma(_507, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505));
        float _1515;
        if (_1400 > 0.0)
        {
            _1515 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1515 = frontier_phi_36_32_ladder;
        }
        float _1931;
        if (_1403 > 0.0)
        {
            _1931 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1931 = frontier_phi_48_43_ladder;
        }
        float _2278;
        if (_1406 > 0.0)
        {
            _2278 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2278 = frontier_phi_60_55_ladder;
        }
        float _2280 = isnan(_1931) ? _1515 : (isnan(_1515) ? _1931 : min(_1515, _1931));
        float _2281 = isnan(_2278) ? _2280 : (isnan(_2280) ? _2278 : min(_2280, _2278));
        float _2285 = (_2281 * _1400) + _1389;
        float _2286 = (_2281 * _1403) + _1393;
        float _2287 = (_2281 * _1406) + _1397;
        float _2288 = _2281 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2288;
        float _2291 = _2288 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2287 > _2291) || ((_2287 < _2289) || ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 < _2289) || (_2285 > _2291))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2287, cbModelParam._m0[17u].z, fma(_2286, cbModelParam._m0[17u].y, _2285 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2287, cbModelParam._m0[18u].z, fma(_2286, cbModelParam._m0[18u].y, _2285 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2287, cbModelParam._m0[19u].z, fma(_2286, cbModelParam._m0[19u].y, _2285 * cbModelParam._m0[19u].x))), _1337);
            frontier_phi_33_60_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1425 = frontier_phi_33_60_ladder_2;
        _1427 = frontier_phi_33_60_ladder_1;
        _1429 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_505, _506, _507), _1337);
        _1425 = _1409.x * cbModelParam._m0[1u].z;
        _1427 = _1409.y * cbModelParam._m0[1u].z;
        _1429 = _1409.z * cbModelParam._m0[1u].z;
    }
    float _1441 = _504 * 0.01200000010430812835693359375;
    float _1443 = _1441 * ((cbModelParam._m0[1u].w * (_1425 - _1330)) + _1330);
    float _1444 = _1441 * ((cbModelParam._m0[1u].w * (_1427 - _1332)) + _1332);
    float _1445 = _1441 * ((cbModelParam._m0[1u].w * (_1429 - _1334)) + _1334);
    float _1448 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, _1443 * cbSceneParam._m0[91u].x));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1501 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1502 = _1489 / _1501;
    float _1503 = _1493 / _1501;
    float _1504 = _1497 / _1501;
    float _1652;
    float _1653;
    float _1654;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1531 = ((uint(_1504 > cbSceneParam._m0[59u].y) + uint(_1504 > cbSceneParam._m0[59u].x)) + uint(_1504 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1532 = _1531 + 43u;
        uint _1540 = _1531 + 44u;
        uint _1548 = _1531 + 45u;
        uint _1556 = _1531 + 46u;
        float _1567 = fma(_1501, cbSceneParam._m0[_1532].w, fma(_1497, cbSceneParam._m0[_1532].z, fma(_1493, cbSceneParam._m0[_1532].y, _1489 * cbSceneParam._m0[_1532].x)));
        float _1571 = fma(_1501, cbSceneParam._m0[_1540].w, fma(_1497, cbSceneParam._m0[_1540].z, fma(_1493, cbSceneParam._m0[_1540].y, _1489 * cbSceneParam._m0[_1540].x)));
        float _1579 = fma(_1501, cbSceneParam._m0[_1556].w, fma(_1497, cbSceneParam._m0[_1556].z, fma(_1493, cbSceneParam._m0[_1556].y, _1489 * cbSceneParam._m0[_1556].x)));
        float _1584 = cbSceneParam._m0[33u].z * _1579;
        float _1586 = cbSceneParam._m0[33u].w * _1579;
        float _1589 = fma(_1501, cbSceneParam._m0[_1548].w, fma(_1497, cbSceneParam._m0[_1548].z, fma(_1493, cbSceneParam._m0[_1548].y, _1489 * cbSceneParam._m0[_1548].x))) / _1579;
        float _1637 = (cbSceneParam._m0[33u].x - sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504))) * cbSceneParam._m0[33u].y;
        float _3519 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1645 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1584 + _1567) / _1579, (_1586 + _1571) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 + _1567) / _1579, (_1571 - _1584) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 - _1584) / _1579, (_1571 - _1586) / _1579), _1589), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1567 - _1586) / _1579, (_1584 + _1571) / _1579), _1589), 0.0)).x), vec4(0.25)));
        _1652 = 1.0 - (_1645 * cbSceneParam._m0[34u].x);
        _1653 = 1.0 - (_1645 * cbSceneParam._m0[34u].y);
        _1654 = 1.0 - (_1645 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1652 = 1.0;
        _1653 = 1.0;
        _1654 = 1.0;
    }
    float _1718;
    float _1720;
    float _1722;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1706 = fma(_1501, cbSceneParam._m0[63u].w, fma(_1497, cbSceneParam._m0[63u].z, fma(_1493, cbSceneParam._m0[63u].y, _1489 * cbSceneParam._m0[63u].x)));
        float _1707 = fma(_1501, cbSceneParam._m0[60u].w, fma(_1497, cbSceneParam._m0[60u].z, fma(_1493, cbSceneParam._m0[60u].y, _1489 * cbSceneParam._m0[60u].x))) / _1706;
        float _1708 = fma(_1501, cbSceneParam._m0[61u].w, fma(_1497, cbSceneParam._m0[61u].z, fma(_1493, cbSceneParam._m0[61u].y, _1489 * cbSceneParam._m0[61u].x))) / _1706;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1707 >= cbSceneParam._m0[64u].x) && (_1708 >= cbSceneParam._m0[64u].y)) && (_1707 <= cbSceneParam._m0[64u].z)) && (_1708 <= cbSceneParam._m0[64u].w))
        {
            float _1944 = fma(_1501, cbSceneParam._m0[62u].w, fma(_1497, cbSceneParam._m0[62u].z, fma(_1493, cbSceneParam._m0[62u].y, _1489 * cbSceneParam._m0[62u].x))) / _1706;
            float _1948 = isnan(cbSceneParam._m0[41u].w) ? _1944 : (isnan(_1944) ? cbSceneParam._m0[41u].w : max(_1944, cbSceneParam._m0[41u].w));
            float _1991 = (cbSceneParam._m0[33u].x - sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504))) * cbSceneParam._m0[33u].y;
            float _3535 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
            float _1998 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1707, cbSceneParam._m0[33u].w + _1708), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1707, _1708 - cbSceneParam._m0[33u].z), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1707 - cbSceneParam._m0[33u].z, _1708 - cbSceneParam._m0[33u].w), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1707 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1708), _1948), 0.0)).x), vec4(0.25)));
            float _2002 = 1.0 - (_1998 * cbSceneParam._m0[34u].x);
            float _2003 = 1.0 - (_1998 * cbSceneParam._m0[34u].y);
            float _2004 = 1.0 - (_1998 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2004) ? _1654 : (isnan(_1654) ? _2004 : min(_1654, _2004));
            frontier_phi_45_44_ladder_1 = isnan(_2003) ? _1653 : (isnan(_1653) ? _2003 : min(_1653, _2003));
            frontier_phi_45_44_ladder_2 = isnan(_2002) ? _1652 : (isnan(_1652) ? _2002 : min(_1652, _2002));
        }
        else
        {
            frontier_phi_45_44_ladder = _1654;
            frontier_phi_45_44_ladder_1 = _1653;
            frontier_phi_45_44_ladder_2 = _1652;
        }
        _1718 = frontier_phi_45_44_ladder_2;
        _1720 = frontier_phi_45_44_ladder_1;
        _1722 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1718 = _1652;
        _1720 = _1653;
        _1722 = _1654;
    }
    uvec4 _1727 = floatBitsToUint(cbInstanceData._m0[_478 + 5u]);
    uint _1729 = _1727.x * 14u;
    uint _1730 = _1729 + 13u;
    float _1735 = _504 + (-1.0);
    float _1738 = (cbLight._m0[_1730].x * _1735) + 1.0;
    float _1739 = (cbLight._m0[_1730].y * _1735) + 1.0;
    uint _1740 = _1729 + 5u;
    float _1746 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1750 = _1729 + 4u;
    float _1759 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1763 = _1729 | 1u;
    float _1774 = dot(vec3(cbLight._m0[_1729].xyz), vec3(0.0));
    float _1777 = dot(vec3(cbLight._m0[_1763].xyz), vec3(0.0));
    float _3571 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _3582 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1782 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.3183098733425140380859375;
    float _1784 = (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.3183098733425140380859375;
    float _1791 = ((cbLight._m0[_1740].x * _1746) * _1784) + (((cbLight._m0[_1750].x * _1718) * _1759) * _1782);
    float _1792 = ((_1746 * cbLight._m0[_1740].y) * _1784) + (((cbLight._m0[_1750].y * _1720) * _1759) * _1782);
    float _1793 = ((_1746 * cbLight._m0[_1740].z) * _1784) + (((cbLight._m0[_1750].z * _1722) * _1759) * _1782);
    uint _1794 = _1729 + 8u;
    float _1800 = cbLight._m0[_1729].x + _442;
    float _1801 = cbLight._m0[_1729].y + _443;
    float _1802 = cbLight._m0[_1729].z + _444;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1810 = dot(vec3(0.0), vec3(cbLight._m0[_1729].xyz));
    float _3593 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _1814 = dot(vec3(0.0), vec3(_442, _443, _444));
    float _3604 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1800 * _1806, _1801 * _1806, _1802 * _1806));
    float _3615 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1829 = (exp2(log2(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1835 = (0.5 / ((_1813 + 9.9999999392252902907785028219223e-09) + _1817)) * _1813;
    float _3626 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.31831014156341552734375;
    uint _1851 = _1729 + 9u;
    float _1857 = cbLight._m0[_1763].x + _442;
    float _1858 = cbLight._m0[_1763].y + _443;
    float _1859 = cbLight._m0[_1763].z + _444;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1867 = dot(vec3(0.0), vec3(cbLight._m0[_1763].xyz));
    float _3637 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1857 * _1863, _1858 * _1863, _1859 * _1863));
    float _3648 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = (0.5 / ((_1870 + 9.9999999392252902907785028219223e-09) + _1817)) * _1870;
    float _3659 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1886 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.31831014156341552734375;
    float _1896 = (((_1880 * cbLight._m0[_1851].x) * _1886) * _1746) + ((((cbLight._m0[_1794].x * _1718) * _1829) * _1837) * _1759);
    float _1897 = (((_1880 * cbLight._m0[_1851].y) * _1886) * _1746) + ((((cbLight._m0[_1794].y * _1720) * _1829) * _1837) * _1759);
    float _1898 = (((_1880 * cbLight._m0[_1851].z) * _1886) * _1746) + ((((cbLight._m0[_1794].z * _1722) * _1829) * _1837) * _1759);
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    if (_1727.y == 0u)
    {
        uvec4 _2016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2017 = _2016.x;
        uint _2028 = uint((float(_2016.y) * floor(float(uint(cbSceneParam._m0[85u].y * _465) / _2017))) + floor(float(uint(cbSceneParam._m0[85u].x * _464) / _2017)));
        float _2038 = (log2(_1504 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2039 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        uint _2042 = uint(isnan(14.0) ? _2039 : (isnan(_2039) ? 14.0 : min(_2039, 14.0)));
        uvec4 _2047 = texelFetch(g_lightClusterGridBuffer, int(((_2042 << 2u) + (_2028 << 6u)) >> 2u));
        uint _2048 = _2047.x;
        uint _2049 = _2016.z;
        float _2156;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        if (((((1u << ((_2049 >> 4u) & 15u)) + 4294967295u) & _2048) == 0u) || ((_2049 & 240u) == 0u))
        {
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
        }
        else
        {
            float _2157;
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            uint _2339 = 0u;
            uint _2348;
            bool _2349;
            for (;;)
            {
                _2348 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2339 << 2u)) >> 2u)).x;
                _2349 = _2348 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2349)
                {
                    frontier_phi_71_pred = _2336;
                    frontier_phi_71_pred_1 = _2335;
                    frontier_phi_71_pred_2 = _2334;
                    frontier_phi_71_pred_3 = _2333;
                    frontier_phi_71_pred_4 = _2337;
                    frontier_phi_71_pred_5 = _2338;
                }
                else
                {
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    uint _2505;
                    _2499 = _2333;
                    _2500 = _2334;
                    _2501 = _2335;
                    _2502 = _2336;
                    _2503 = _2337;
                    _2504 = _2338;
                    _2505 = _2348;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    for (;;)
                    {
                        uint _2509 = uint(findLSB(_2505)) + (_2339 << 5u);
                        uint _2506 = (_2505 + 4294967295u) & _2505;
                        uint _2511 = _2509 * 48u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2531 = (_2509 * 48u) + 4u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        uint _2550 = (_2509 * 48u) + 8u;
                        vec3 _2561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x));
                        float _2565 = _2525.x - _1502;
                        float _2566 = _2525.y - _1503;
                        float _2567 = _2525.z - _1504;
                        float _2568 = dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567));
                        float _2571 = inversesqrt(_2568);
                        float _2580 = 1.0 - (_2568 * _2525.w);
                        float _3680 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2582 = sqrt(_2568) * _2544.w;
                        float _2585 = 1.39999997615814208984375 / (_2582 + 1.39999997615814208984375);
                        float _2586 = _2585 * _2585;
                        float _2589 = ((1.0 - _2586) * dot(vec3(0.0), vec3(_2571 * _2565, _2571 * _2566, _2571 * _2567))) + _2586;
                        float _2592 = _2582 * _2582;
                        float _2596 = ((isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))) * _2581) / ((_2592 * 0.699999988079071044921875) + 1.0);
                        float _2600 = (-0.0) - _1502;
                        float _2601 = (-0.0) - _1503;
                        float _2602 = (-0.0) - _1504;
                        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
                        float _2610 = dot(vec3(0.0), vec3(_2606 * _2600, _2606 * _2601, _2606 * _2602));
                        float _3696 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                        float _3707 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2614 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2618 = (0.5 / (((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) + 9.9999999392252902907785028219223e-09) + _2614)) * _2614;
                        float _3718 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2627 = (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 3.1415927410125732421875) / ((_2592 * 2.1991131305694580078125) + 3.141590118408203125)) * _2581;
                        _2429 = (_2596 * _2544.x) + _2502;
                        _2430 = (_2596 * _2544.y) + _2503;
                        _2431 = (_2596 * _2544.z) + _2504;
                        _2426 = (_2627 * _2561.x) + _2499;
                        _2427 = (_2627 * _2561.y) + _2500;
                        _2428 = (_2627 * _2561.z) + _2501;
                        if (_2506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2499 = _2426;
                            _2500 = _2427;
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2431;
                            _2505 = _2506;
                        }
                    }
                    frontier_phi_71_pred = _2429;
                    frontier_phi_71_pred_1 = _2428;
                    frontier_phi_71_pred_2 = _2427;
                    frontier_phi_71_pred_3 = _2426;
                    frontier_phi_71_pred_4 = _2430;
                    frontier_phi_71_pred_5 = _2431;
                }
                _2163 = frontier_phi_71_pred;
                _2161 = frontier_phi_71_pred_1;
                _2159 = frontier_phi_71_pred_2;
                _2157 = frontier_phi_71_pred_3;
                _2165 = frontier_phi_71_pred_4;
                _2167 = frontier_phi_71_pred_5;
                uint _2340 = _2339 + 1u;
                if (_2340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2333 = _2157;
                    _2334 = _2159;
                    _2335 = _2161;
                    _2336 = _2163;
                    _2337 = _2165;
                    _2338 = _2167;
                    _2339 = _2340;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
        }
        uvec4 _2170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2171 = _2170.z;
        uint _2173 = (_2171 >> 8u) & 15u;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        if (((4294967295u << _2173) & _2048) == 0u)
        {
            _2304 = _2156;
            _2306 = _2158;
            _2308 = _2160;
            _2310 = _2162;
            _2312 = _2164;
            _2314 = _2166;
        }
        else
        {
            float _2329 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2173 < ((_2171 >> 12u) & 15u))
            {
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2482 = _2156;
                float _2483 = _2158;
                float _2484 = _2160;
                float _2485 = _2162;
                float _2486 = _2164;
                float _2487 = _2166;
                uint _2488 = _2173;
                uint _2497;
                bool _2498;
                for (;;)
                {
                    _2497 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                    _2498 = _2497 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2498)
                    {
                        frontier_phi_82_pred = _2485;
                        frontier_phi_82_pred_1 = _2484;
                        frontier_phi_82_pred_2 = _2483;
                        frontier_phi_82_pred_3 = _2482;
                        frontier_phi_82_pred_4 = _2487;
                        frontier_phi_82_pred_5 = _2486;
                    }
                    else
                    {
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2646;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2654 = _2482;
                        float _2655 = _2483;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        float _2659 = _2487;
                        uint _2660 = _2497;
                        uint _2661;
                        vec4 _2686;
                        float _2687;
                        vec4 _2702;
                        vec3 _2714;
                        vec4 _2730;
                        vec4 _2745;
                        float _2791;
                        bool _2792;
                        for (;;)
                        {
                            uint _2671 = ((_2488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2660));
                            _2661 = (_2660 + 4294967295u) & _2660;
                            uint _2673 = _2671 * 40u;
                            _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            _2687 = _2686.w;
                            uint _2689 = (_2671 * 40u) + 4u;
                            _2702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 3u)).x));
                            uint _2704 = (_2671 * 40u) + 8u;
                            _2714 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x));
                            uint _2717 = (_2671 * 40u) + 16u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2732 = (_2671 * 40u) + 20u;
                            _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            uint _2747 = (_2671 * 40u) + 24u;
                            vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2766 = (_2671 * 40u) + 28u;
                            vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            _2791 = fma(_1504, _2779.z, fma(_1503, _2779.y, _2779.x * _1502)) + _2779.w;
                            _2792 = !((fma(_1504, _2760.z, fma(_1503, _2760.y, _2760.x * _1502)) + _2760.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2792)
                            {
                                float _2819 = _2686.x - _1502;
                                float _2820 = _2686.y - _1503;
                                float _2821 = _2686.z - _1504;
                                float _2822 = dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821));
                                float _2825 = inversesqrt(_2822);
                                float _2826 = _2825 * _2819;
                                float _2827 = _2825 * _2820;
                                float _2828 = _2825 * _2821;
                                float _2832 = 1.0 - (_2822 / (_2687 * _2687));
                                float _3729 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2837 = sqrt(_2822) * _2702.w;
                                float _2839 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                                float _2840 = _2839 * _2839;
                                float _2841 = 1.0 - _2840;
                                float _2843 = (_2841 * dot(vec3(_2826, _2827, _2828), vec3(0.0))) + _2840;
                                float _2846 = _2837 * _2837;
                                float _2850 = (fma(_1504, _2730.z, fma(_1503, _2730.y, _2730.x * _1502)) + _2730.w) / _2791;
                                float _2851 = (fma(_1504, _2745.z, fma(_1503, _2745.y, _2745.x * _1502)) + _2745.w) / _2791;
                                float _2855 = 1.0 - dot(vec2(_2850, _2851), vec2(_2850, _2851));
                                float _3745 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2856 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2857 = _2856 * (((isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))) * _2833) / ((_2846 * 0.699999988079071044921875) + 1.0));
                                float _2867 = dot(vec3(0.0), vec3((-0.0) - (_1502 * _2329), (-0.0) - (_1503 * _2329), (-0.0) - (_1504 * _2329)));
                                float _3756 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2875 = (_2841 * dot(vec3(0.0), vec3(_2826, _2827, _2828))) + _2840;
                                float _3767 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2880 = (0.5 / (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) + 9.9999999392252902907785028219223e-09) + _2876)) * _2876;
                                float _3778 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2887 = (_2856 * _2833) * (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 3.1415927410125732421875) / ((_2846 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2857 * _2702.x;
                                frontier_phi_88_pred_1 = _2887 * _2714.z;
                                frontier_phi_88_pred_2 = _2887 * _2714.y;
                                frontier_phi_88_pred_3 = _2887 * _2714.x;
                                frontier_phi_88_pred_4 = _2857 * _2702.z;
                                frontier_phi_88_pred_5 = _2857 * _2702.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _2894 = frontier_phi_88_pred;
                            _2893 = frontier_phi_88_pred_1;
                            _2892 = frontier_phi_88_pred_2;
                            _2891 = frontier_phi_88_pred_3;
                            _2896 = frontier_phi_88_pred_4;
                            _2895 = frontier_phi_88_pred_5;
                            _2644 = _2894 + _2657;
                            _2645 = _2895 + _2658;
                            _2646 = _2896 + _2659;
                            _2641 = _2891 + _2654;
                            _2642 = _2892 + _2655;
                            _2643 = _2893 + _2656;
                            if (_2661 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2654 = _2641;
                                _2655 = _2642;
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2661;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2644;
                        frontier_phi_82_pred_1 = _2643;
                        frontier_phi_82_pred_2 = _2642;
                        frontier_phi_82_pred_3 = _2641;
                        frontier_phi_82_pred_4 = _2646;
                        frontier_phi_82_pred_5 = _2645;
                    }
                    _2311 = frontier_phi_82_pred;
                    _2309 = frontier_phi_82_pred_1;
                    _2307 = frontier_phi_82_pred_2;
                    _2305 = frontier_phi_82_pred_3;
                    _2315 = frontier_phi_82_pred_4;
                    _2313 = frontier_phi_82_pred_5;
                    uint _2489 = _2488 + 1u;
                    if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2482 = _2305;
                        _2483 = _2307;
                        _2484 = _2309;
                        _2485 = _2311;
                        _2486 = _2313;
                        _2487 = _2315;
                        _2488 = _2489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2315;
                frontier_phi_62_63_ladder_1 = _2313;
                frontier_phi_62_63_ladder_2 = _2311;
                frontier_phi_62_63_ladder_3 = _2307;
                frontier_phi_62_63_ladder_4 = _2305;
                frontier_phi_62_63_ladder_5 = _2309;
            }
            else
            {
                frontier_phi_62_63_ladder = _2166;
                frontier_phi_62_63_ladder_1 = _2164;
                frontier_phi_62_63_ladder_2 = _2162;
                frontier_phi_62_63_ladder_3 = _2158;
                frontier_phi_62_63_ladder_4 = _2156;
                frontier_phi_62_63_ladder_5 = _2160;
            }
            _2304 = frontier_phi_62_63_ladder_4;
            _2306 = frontier_phi_62_63_ladder_3;
            _2308 = frontier_phi_62_63_ladder_5;
            _2310 = frontier_phi_62_63_ladder_2;
            _2312 = frontier_phi_62_63_ladder_1;
            _2314 = frontier_phi_62_63_ladder;
        }
        float _2319 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2061 = (_2319 * _2310) + _1791;
        _2063 = (_2319 * _2312) + _1792;
        _2065 = (_2319 * _2314) + _1793;
        _2067 = ((_2304 * 0.039999999105930328369140625) * _2319) + _1896;
        _2069 = ((_2306 * 0.039999999105930328369140625) * _2319) + _1897;
        _2071 = ((_2308 * 0.039999999105930328369140625) * _2319) + _1898;
    }
    else
    {
        _2061 = _1791;
        _2063 = _1792;
        _2065 = _1793;
        _2067 = _1896;
        _2069 = _1897;
        _2071 = _1898;
    }
    float _3794 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3805 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3816 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2088 = ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_2061 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _504))) + ((_2067 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1239)) * cbPerFrame._m0[3u].x);
    float _2089 = ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_2063 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _504))) + ((_2069 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1239)) * cbPerFrame._m0[3u].x);
    float _2090 = ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_2065 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _504))) + ((_2071 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1239)) * cbPerFrame._m0[3u].x);
    float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    uint _2094 = _478 + 6u;
    float _2102 = _464 / cbSceneParam._m0[86u].x;
    float _2103 = _465 / cbSceneParam._m0[86u].y;
    vec4 _2117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2119 = _2117.x;
    float _2120 = _2117.y;
    float _2121 = _2117.z;
    float _2122 = _2117.w;
    float _2218;
    float _2220;
    float _2222;
    float _2224;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2181 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2182 = _2181 / _437;
        float _2193 = _2182 * _258;
        float _2194 = _259 * _2182;
        float _2195 = (-0.0) - _2194;
        float _2196 = _2182 * _260;
        float _2198 = (cbSceneParam._m0[77u].w * _2195) / _2181;
        float _2199 = _2198 + cbSceneParam._m0[79u].w;
        float _2200 = cbSceneParam._m0[79u].w - _2194;
        float _2206 = sqrt(((_2193 * _2193) + (_2194 * _2194)) + (_2196 * _2196));
        float _2209 = (1.0 - (cbSceneParam._m0[77u].w / _2181)) * _2206;
        float _2214 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2216 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2439;
        if (abs((_2195 - _2198) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2439 = ((((_2199 > 0.0) ? exp2(_2214 * _2199) : (2.0 - exp2(_2216 * _2199))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2209;
        }
        else
        {
            float _2362 = 1.0 / cbSceneParam._m0[80u].x;
            float _2363 = isnan(_2200) ? _2199 : (isnan(_2199) ? _2200 : max(_2199, _2200));
            float _2364 = isnan(_2200) ? _2199 : (isnan(_2199) ? _2200 : min(_2199, _2200));
            float _2373 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : min(_2363, 0.0));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            _2439 = ((abs(_2206 / _2195) * cbSceneParam._m0[80u].y) * ((((_2373 - _2374) * 2.0) - ((exp2(_2214 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0)))) - exp2(_2214 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0))))) * _2362)) - ((exp2(_2216 * _2373) - exp2(_2216 * _2374)) * _2362))) + (_2209 * cbSceneParam._m0[80u].z);
        }
        vec4 _2441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, 1.0), 0.0);
        float _2450 = exp2((_2439 * (-1.44269502162933349609375)) * (1.0 - _2441.w));
        float _2451 = log2(_2450);
        float _2467 = log2(_2122);
        _2218 = (exp2(_2467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].x)) * _2441.x) / cbSceneParam._m0[78u].x)) + _2119;
        _2220 = (exp2(_2467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].y)) * _2441.y) / cbSceneParam._m0[78u].y)) + _2120;
        _2222 = (exp2(_2467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].z)) * _2441.z) / cbSceneParam._m0[78u].z)) + _2121;
        _2224 = _2450 * _2122;
    }
    else
    {
        _2218 = _2119;
        _2220 = _2120;
        _2222 = _2121;
        _2224 = _2122;
    }
    bool _2477;
    vec4 _2234;
    vec4 _2257;
    float _2259;
    float _2263;
    float _2264;
    float _2265;
    float _2266;
    bool _2277;
    for (;;)
    {
        _2234 = cbMatDynParam._m0[0u];
        float _2236 = roundEven(_2234.y);
        bool _2237 = _2236 == 3.0;
        float _2239 = log2(_2224);
        float _2246 = exp2(_2239 * cbSceneParam._m0[78u].x) * _2091;
        float _2247 = exp2(_2239 * cbSceneParam._m0[78u].y) * _2092;
        float _2248 = exp2(_2239 * cbSceneParam._m0[78u].z) * _2093;
        float _2255 = _451 + (-0.5);
        _2257 = cbMtdParam._m0[1u];
        _2259 = _2257.y * _2255;
        float _2262 = (_2236 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2263 = _2262 * (_2237 ? _2246 : (_2246 + (cbSceneParam._m0[72u].w * _2218)));
        _2264 = _2262 * (_2237 ? _2247 : (_2247 + (cbSceneParam._m0[72u].w * _2220)));
        _2265 = _2262 * (_2237 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2222)));
        _2266 = _2255 * 0.999000012874603271484375;
        _2277 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2277)
        {
            if ((cbInstanceData._m0[_478 + 7u].x + _2266) < 0.5)
            {
                _2477 = true;
                break;
            }
        }
        uint _2397 = _480 + uint(_2234.w);
        if ((cbInstanceData._m0[_2397].w < 1.0) && ((cbInstanceData._m0[_2397].w + _2266) < 0.5))
        {
            _2477 = true;
            break;
        }
        if ((_2259 + 1.0) < _2257.x)
        {
            _2477 = true;
            break;
        }
        _2477 = false;
        break;
    }
    float _2632;
    if (_2477)
    {
        discard_state = true;
        _2632 = 0.0;
    }
    else
    {
        _2632 = cbInstanceData._m0[_2094].w;
    }
    SV_Target.x = _2263;
    SV_Target.y = _2264;
    SV_Target.z = _2265;
    SV_Target.w = _2632;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2094].w;
    discard_exit();
}


