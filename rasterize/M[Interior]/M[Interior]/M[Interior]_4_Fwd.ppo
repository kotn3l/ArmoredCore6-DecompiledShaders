#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D M_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _987;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _274 = texture(sampler2D(M_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _277 = _274.x;
    vec4 _295 = texture(sampler2D(M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _277) + cbMtdParam._m0[12u].x) * _295.x;
    float _314 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _277) + cbMtdParam._m0[12u].y) * _295.y;
    float _316 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _277) + cbMtdParam._m0[12u].z) * _295.z;
    vec4 _337 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _373 = cbMtdParam._m0[21u].w + _259;
    float _374 = cbMtdParam._m0[22u].x + _260;
    float _375 = cbMtdParam._m0[22u].y + _261;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_188, _189, _190));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_202, _203, _204));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _395 * _391;
    float _401 = ((_395 * _389) + ((cbMtdParam._m0[19u].w * _277) * ((_337.x * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].z;
    float _402 = ((_395 * _390) + ((cbMtdParam._m0[20u].x * _277) * ((_337.y * 2.0) + (-1.0)))) * cbMtdParam._m0[18u].y;
    float _403 = fract(TEXCOORD.x);
    float _404 = fract(TEXCOORD.y);
    float _410;
    if (_401 > 0.0)
    {
        _410 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _410 = frontier_phi_3_2_ladder;
    }
    float _418;
    if (_402 > 0.0)
    {
        _418 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _418 = frontier_phi_7_6_ladder;
    }
    float _422 = (_398 > 0.0) ? (cbMtdParam._m0[15u].x / _398) : 5000.0;
    float _423 = isnan(_418) ? _410 : (isnan(_410) ? _418 : min(_410, _418));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _435 = ((_424 * _398) + _428) / _428;
    vec4 _459 = texture(sampler2D(M_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * ((((((_403 + (-0.5)) + (_424 * _401)) / _435) + 0.5) + (cbMtdParam._m0[15u].w - cbMtdParam._m0[18u].w * trunc(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w))) / cbMtdParam._m0[18u].w)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((((((_404 + (-0.5)) + (_424 * _402)) / _435) + 0.5) + floor(cbMtdParam._m0[15u].w / cbMtdParam._m0[18u].w)) / cbMtdParam._m0[19u].x)) + cbTextureTilingScale._m0[3u].w));
    vec4 _486 = texture(sampler2D(M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _490 = _486.z;
    float _493 = (_486.x * 2.0) + (-1.0);
    float _494 = (_486.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3071 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _500 = sqrt(1.0 - (isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))));
    float _503 = fma(_500, _195, fma(_494, _202, _493 * _188));
    float _506 = fma(_500, _196, fma(_494, _203, _493 * _189));
    float _509 = fma(_500, _197, fma(_494, _204, _493 * _190));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3082 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _517 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3104 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3115 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _541 = _259 * _540;
    float _542 = _260 * _540;
    float _543 = _261 * _540;
    float _549 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _550 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _571 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _574 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _577 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _590 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3126 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
    float _3137 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    float _3148 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _549, cbSceneParam._m0[86u].y * _550));
    float _616 = _613.x * TEXCOORD.z;
    float _617 = dot(vec3(_514, _515, _516), vec3(_541, _542, _543));
    float _620 = _617 * 2.0;
    float _624 = (_620 * _514) - _541;
    float _625 = (_620 * _515) - _542;
    float _626 = (_620 * _516) - _543;
    float _630 = abs(dot(vec3(_541, _542, _543), vec3(_514, _515, _516)));
    float _3159 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _632 = sqrt(_517);
    float _645 = exp2((_632 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_632 * 3.0));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _986;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _713 = fma(_685, cbModelParam._m0[26u].z, fma(_681, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _677));
        float _717 = fma(_685, cbModelParam._m0[27u].z, fma(_681, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _677));
        float _721 = fma(_685, cbModelParam._m0[28u].z, fma(_681, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _677));
        float _744 = _677 + _514;
        float _745 = _681 + _515;
        float _746 = _685 + _516;
        float _756 = fma(_746, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744)) - _713;
        float _757 = fma(_746, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744)) - _717;
        float _758 = fma(_746, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744)) - _721;
        float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
        float _775 = ((_762 * _756) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_713 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_762 * _757) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_717 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_762 * _758) / cbModelParam._m0[34u].z) + ((((((_721 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_775, _776, _777), 0.0);
        float _814 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_780.x + (-0.5));
        float _816 = _814 * (_780.y + (-0.5));
        float _817 = _814 * (_780.z + (-0.5));
        float _824 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_787.x + (-0.5));
        float _826 = _824 * (_787.y + (-0.5));
        float _827 = _824 * (_787.z + (-0.5));
        float _834 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_794.x + (-0.5));
        float _836 = _834 * (_794.y + (-0.5));
        float _837 = _834 * (_794.z + (-0.5));
        float _844 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_801.x + (-0.5));
        float _846 = _844 * (_801.y + (-0.5));
        float _847 = _844 * (_801.z + (-0.5));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = _815 * 0.5;
        float _852 = _825 * 0.5;
        float _853 = _835 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _868 = (dot(vec3(_514, _515, _516), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3185 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _878 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3196 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3207 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * (_880 + 1.0))) + _885) * _848;
        float _895 = _816 * 0.5;
        float _896 = _826 * 0.5;
        float _897 = _836 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(_514, _515, _516), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _3240 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_922 + 1.0))) + _927) * _849;
        float _937 = _817 * 0.5;
        float _938 = _827 * 0.5;
        float _939 = _837 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(_514, _515, _516), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3273 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_964 + 1.0))) + _969) * _850;
        _986 = _817;
        _988 = _816;
        _989 = _815;
        _990 = _827;
        _991 = _826;
        _992 = _825;
        _993 = _837;
        _994 = _836;
        _995 = _835;
        _996 = _850;
        _997 = _849;
        _998 = _848;
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
    }
    else
    {
        _986 = _987;
        _988 = _987;
        _989 = _987;
        _990 = _987;
        _991 = _987;
        _992 = _987;
        _993 = _987;
        _994 = _987;
        _995 = _987;
        _996 = _987;
        _997 = _987;
        _998 = _987;
        _999 = 0.0;
        _1000 = 0.0;
        _1001 = 0.0;
    }
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1027 = fma(_685, cbModelParam._m0[30u].z, fma(_681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _677));
        float _1031 = fma(_685, cbModelParam._m0[31u].z, fma(_681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _677));
        float _1035 = fma(_685, cbModelParam._m0[32u].z, fma(_681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _677));
        float _1058 = _677 + _514;
        float _1059 = _681 + _515;
        float _1060 = _685 + _516;
        float _1070 = fma(_1060, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058)) - _1027;
        float _1071 = fma(_1060, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058)) - _1031;
        float _1072 = fma(_1060, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058)) - _1035;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1027 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1031 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[35u].z) + ((((((_1035 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1126 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1093.x + (-0.5));
        float _1128 = _1126 * (_1093.y + (-0.5));
        float _1129 = _1126 * (_1093.z + (-0.5));
        float _1136 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1100.x + (-0.5));
        float _1138 = _1136 * (_1100.y + (-0.5));
        float _1139 = _1136 * (_1100.z + (-0.5));
        float _1146 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1107.x + (-0.5));
        float _1148 = _1146 * (_1107.y + (-0.5));
        float _1149 = _1146 * (_1107.z + (-0.5));
        float _1156 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1114.x + (-0.5));
        float _1158 = _1156 * (_1114.y + (-0.5));
        float _1159 = _1156 * (_1114.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_514, _515, _516), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3336 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_1190 + 1.0))) + _1195) * _1160;
        float _1205 = _1128 * 0.5;
        float _1206 = _1138 * 0.5;
        float _1207 = _1148 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_514, _515, _516), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3369 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_1232 + 1.0))) + _1237) * _1161;
        float _1247 = _1129 * 0.5;
        float _1248 = _1139 * 0.5;
        float _1249 = _1149 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_514, _515, _516), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3402 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1274 + 1.0))) + _1279) * _1162;
        _1296 = _1129;
        _1297 = _1128;
        _1298 = _1127;
        _1299 = _1139;
        _1300 = _1138;
        _1301 = _1137;
        _1302 = _1149;
        _1303 = _1148;
        _1304 = _1147;
        _1305 = _1162;
        _1306 = _1161;
        _1307 = _1160;
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _987;
        _1297 = _987;
        _1298 = _987;
        _1299 = _987;
        _1300 = _987;
        _1301 = _987;
        _1302 = _987;
        _1303 = _987;
        _1304 = _987;
        _1305 = _987;
        _1306 = _987;
        _1307 = _987;
        _1308 = 0.0;
        _1309 = 0.0;
        _1310 = 0.0;
    }
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1343 = fma(_1322, cbSceneParam._m0[89u].z, fma(_1321, cbSceneParam._m0[89u].y, _1320 * cbSceneParam._m0[89u].x));
    float _1346 = fma(_1322, cbSceneParam._m0[90u].z, fma(_1321, cbSceneParam._m0[90u].y, _1320 * cbSceneParam._m0[90u].x));
    float _1349 = fma(_1322, cbSceneParam._m0[91u].z, fma(_1321, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1320));
    float _1364 = _624 * 0.5;
    float _1365 = _625 * 0.5;
    float _1366 = _626 * 0.5;
    float _1367 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1370 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1373 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1407;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1380 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_986, _990, _993, _996));
        float _1384 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_988, _991, _994, _997));
        float _1388 = dot(vec4(_1364, _1365, _1366, 1.0), vec4(_989, _992, _995, _998));
        float _1395 = dot(vec4(cbModelParam._m0[39u]), vec4(_1364, _1365, _1366, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1418;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1409 = dot(vec4(cbModelParam._m0[40u]), vec4(_1364, _1365, _1366, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1422 = (_1418 * cbModelParam._m0[1u].x) + (_1407 * (1.0 - cbModelParam._m0[1u].x));
    float _1432 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1432 : min(cbModelParam._m0[25u].z, _1432));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_685, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_685, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_685, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_626, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624));
        float _1495 = fma(_626, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624));
        float _1498 = fma(_626, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1526 = frontier_phi_22_20_ladder;
        }
        float _1871;
        if (_1495 > 0.0)
        {
            _1871 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1871 = frontier_phi_31_27_ladder;
        }
        float _2187;
        if (_1498 > 0.0)
        {
            _2187 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2187 = frontier_phi_45_38_ladder;
        }
        float _2189 = isnan(_1871) ? _1526 : (isnan(_1526) ? _1871 : min(_1526, _1871));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1492) + _1481;
        float _2195 = (_2190 * _1495) + _1485;
        float _2196 = (_2190 * _1498) + _1489;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1433);
            frontier_phi_21_45_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_21_45_ladder_2;
        _1516 = frontier_phi_21_45_ladder_1;
        _1518 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_624, _625, _626), _1433);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1575 = fma(_685, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677)) + cbModelParam._m0[21u].w;
        float _1579 = fma(_685, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677)) + cbModelParam._m0[22u].w;
        float _1583 = fma(_685, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677)) + cbModelParam._m0[23u].w;
        float _1586 = fma(_626, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624));
        float _1589 = fma(_626, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624));
        float _1592 = fma(_626, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624));
        float _1876;
        if (_1586 > 0.0)
        {
            _1876 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1876 = frontier_phi_33_29_ladder;
        }
        float _2213;
        if (_1589 > 0.0)
        {
            _2213 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2213 = frontier_phi_47_40_ladder;
        }
        float _2382;
        if (_1592 > 0.0)
        {
            _2382 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2382 = frontier_phi_61_56_ladder;
        }
        float _2384 = isnan(_2213) ? _1876 : (isnan(_1876) ? _2213 : min(_1876, _2213));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1586) + _1575;
        float _2390 = (_2385 * _1589) + _1579;
        float _2391 = (_2385 * _1592) + _1583;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2392;
        float _2395 = _2392 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2391 > _2395) || ((_2391 < _2393) || ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 < _2393) || (_2389 > _2395))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2391, cbModelParam._m0[17u].z, fma(_2390, cbModelParam._m0[17u].y, _2389 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2391, cbModelParam._m0[18u].z, fma(_2390, cbModelParam._m0[18u].y, _2389 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2391, cbModelParam._m0[19u].z, fma(_2390, cbModelParam._m0[19u].y, _2389 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_30_61_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1611 = frontier_phi_30_61_ladder_2;
        _1613 = frontier_phi_30_61_ladder_1;
        _1615 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_624, _625, _626), _1523);
        _1611 = _1595.x * cbModelParam._m0[1u].z;
        _1613 = _1595.y * cbModelParam._m0[1u].z;
        _1615 = _1595.z * cbModelParam._m0[1u].z;
    }
    float _1627 = ((((1.0 - _645) * ((_632 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_645 * _632)) * _616;
    float _1628 = _1627 * ((cbModelParam._m0[1u].w * (_1611 - _1514)) + _1514);
    float _1629 = _1627 * ((cbModelParam._m0[1u].w * (_1613 - _1516)) + _1516);
    float _1630 = _1627 * ((cbModelParam._m0[1u].w * (_1615 - _1518)) + _1518);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1628 * cbSceneParam._m0[91u].x));
    uvec4 _1649 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1651 = _1649.x * 14u;
    uint _1652 = _1651 + 13u;
    float _1657 = _616 + (-1.0);
    float _1660 = (cbLight._m0[_1652].x * _1657) + 1.0;
    float _1661 = (cbLight._m0[_1652].y * _1657) + 1.0;
    uint _1662 = _1651 + 5u;
    float _1668 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1672 = _1651 + 4u;
    float _1678 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1682 = _1651 | 1u;
    float _1693 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_514, _515, _516));
    float _1696 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_514, _515, _516));
    float _3538 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _3549 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1701 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.3183098733425140380859375;
    float _1703 = (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.3183098733425140380859375;
    float _1710 = ((cbLight._m0[_1662].x * _1668) * _1703) + ((cbLight._m0[_1672].x * _1678) * _1701);
    float _1711 = ((_1668 * cbLight._m0[_1662].y) * _1703) + ((_1678 * cbLight._m0[_1672].y) * _1701);
    float _1712 = ((_1668 * cbLight._m0[_1662].z) * _1703) + ((_1678 * cbLight._m0[_1672].z) * _1701);
    uint _1714 = _1651 + 8u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1651].w)) * _517) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1651].x + _541;
    float _1730 = cbLight._m0[_1651].y + _542;
    float _1731 = cbLight._m0[_1651].z + _543;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1651].xyz));
    float _3560 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _1743 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _1744 = dot(vec3(_514, _515, _516), vec3(_1736, _1737, _1738));
    float _3582 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1747 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _1748 = dot(vec3(cbLight._m0[_1651].xyz), vec3(_1736, _1737, _1738));
    float _3593 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1752 = _1728 * _1728;
    float _1756 = ((_1747 * _1747) * (_1752 + (-1.0))) + 1.0;
    float _1767 = (exp2(log2(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1768 = 1.0 - _1728;
    float _1779 = (0.5 / (((_1743 * ((_1742 * _1768) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1768) + _1728) * _1742))) * _1742;
    float _3604 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1781 = (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1752 / ((_1756 * _1756) * 3.141590118408203125));
    uint _1792 = _1651 + 9u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _517) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1682].x + _541;
    float _1806 = cbLight._m0[_1682].y + _542;
    float _1807 = cbLight._m0[_1682].z + _543;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1682].xyz));
    float _3615 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _1819 = dot(vec3(_514, _515, _516), vec3(_1812, _1813, _1814));
    float _3626 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _1823 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1812, _1813, _1814));
    float _3637 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1827 = _1804 * _1804;
    float _1831 = ((_1822 * _1822) * (_1827 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1804;
    float _1851 = (0.5 / (((_1743 * ((_1818 * _1841) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1743 * _1841) + _1804) * _1818))) * _1818;
    float _3648 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1827 / ((_1831 * _1831) * 3.141590118408203125));
    float _1863 = (((_1840 * cbLight._m0[_1792].x) * _1853) * _1668) + (((_1767 * cbLight._m0[_1714].x) * _1781) * _1678);
    float _1864 = (((_1840 * cbLight._m0[_1792].y) * _1853) * _1668) + (((_1767 * cbLight._m0[_1714].y) * _1781) * _1678);
    float _1865 = (((_1840 * cbLight._m0[_1792].z) * _1853) * _1668) + (((_1767 * cbLight._m0[_1714].z) * _1781) * _1678);
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    if (_1649.y == 0u)
    {
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1920;
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1920;
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1920;
        uvec4 _1935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1936 = _1935.x;
        uint _1947 = uint((float(_1935.y) * floor(float(uint(cbSceneParam._m0[85u].y * _550) / _1936))) + floor(float(uint(cbSceneParam._m0[85u].x * _549) / _1936)));
        float _1957 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1958 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        uint _1961 = uint(isnan(14.0) ? _1958 : (isnan(_1958) ? 14.0 : min(_1958, 14.0)));
        uvec4 _1966 = texelFetch(g_lightClusterGridBuffer, int(((_1961 << 2u) + (_1947 << 6u)) >> 2u));
        uint _1967 = _1966.x;
        uint _1968 = _1935.z;
        float _2074;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        if (((((1u << ((_1968 >> 4u) & 15u)) + 4294967295u) & _1967) == 0u) || ((_1968 & 240u) == 0u))
        {
            _2074 = 0.0;
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
        }
        else
        {
            float _2075;
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            uint _2256 = 0u;
            uint _2265;
            bool _2266;
            for (;;)
            {
                _2265 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2256 << 2u)) >> 2u)).x;
                _2266 = _2265 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2266)
                {
                    frontier_phi_58_pred = _2251;
                    frontier_phi_58_pred_1 = _2255;
                    frontier_phi_58_pred_2 = _2254;
                    frontier_phi_58_pred_3 = _2253;
                    frontier_phi_58_pred_4 = _2252;
                    frontier_phi_58_pred_5 = _2250;
                }
                else
                {
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    uint _2431;
                    _2425 = _2250;
                    _2426 = _2251;
                    _2427 = _2252;
                    _2428 = _2253;
                    _2429 = _2254;
                    _2430 = _2255;
                    _2431 = _2265;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    for (;;)
                    {
                        uint _2435 = uint(findLSB(_2431)) + (_2256 << 5u);
                        uint _2432 = (_2431 + 4294967295u) & _2431;
                        uint _2437 = _2435 * 48u;
                        vec4 _2451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2437)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2437 + 3u)).x));
                        uint _2457 = (_2435 * 48u) + 4u;
                        vec4 _2470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2457)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2457 + 3u)).x));
                        uint _2476 = (_2435 * 48u) + 8u;
                        vec3 _2487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2476)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2476 + 2u)).x));
                        float _2491 = _2451.x - _1921;
                        float _2492 = _2451.y - _1922;
                        float _2493 = _2451.z - _1923;
                        float _2494 = dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493));
                        float _2497 = inversesqrt(_2494);
                        float _2498 = _2497 * _2491;
                        float _2499 = _2497 * _2492;
                        float _2500 = _2497 * _2493;
                        float _2501 = dot(vec3(_571, _574, _577), vec3(_2498, _2499, _2500));
                        float _2506 = 1.0 - (_2494 * _2451.w);
                        float _3669 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
                        float _2507 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2508 = sqrt(_2494) * _2470.w;
                        float _2511 = 1.39999997615814208984375 / (_2508 + 1.39999997615814208984375);
                        float _2512 = _2511 * _2511;
                        float _2515 = ((1.0 - _2512) * _2501) + _2512;
                        float _2518 = _2508 * _2508;
                        float _2522 = ((isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))) * _2507) / ((_2518 * 0.699999988079071044921875) + 1.0);
                        float _2526 = (-0.0) - _1921;
                        float _2527 = (-0.0) - _1922;
                        float _2528 = (-0.0) - _1923;
                        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
                        float _2533 = _2532 * _2526;
                        float _2534 = _2532 * _2527;
                        float _2535 = _2532 * _2528;
                        float _2543 = exp2(log2(1.0 / ((_2518 * 3.5) + 5.0)) * 0.25);
                        float _2544 = 1.0 - _632;
                        float _2551 = sqrt(1.0 - ((1.0 - (_2544 * _2544)) * (1.0 - (_2543 * _2543))));
                        float _2552 = _2551 * _2551;
                        float _2553 = _2552 * _2552;
                        float _2554 = _2533 + _2498;
                        float _2555 = _2534 + _2499;
                        float _2556 = _2535 + _2500;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2564 = dot(vec3(_571, _574, _577), vec3(_2533, _2534, _2535));
                        float _3685 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2567 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
                        float _2568 = dot(vec3(_571, _574, _577), vec3(_2560 * _2554, _2560 * _2555, _2560 * _2556));
                        float _3696 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
                        float _2571 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2575 = ((_2571 * _2571) * (_2553 + (-1.0))) + 1.0;
                        float _2576 = _2511 * _2552;
                        float _2577 = _2576 * _2576;
                        float _2580 = ((1.0 - _2577) * _2501) + _2577;
                        float _3707 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2582 = 1.0 - _2552;
                        float _2592 = (0.5 / (((_2581 * ((_2567 * _2582) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2582) + _2552) * _2567))) * _2581;
                        float _3718 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _2603 = (((_2553 * 3.1415927410125732421875) * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) / ((_2575 * _2575) * ((_2518 * 2.1991131305694580078125) + 3.141590118408203125))) * _2507;
                        _2334 = (_2522 * _2470.x) + _2428;
                        _2335 = (_2522 * _2470.y) + _2429;
                        _2336 = (_2522 * _2470.z) + _2430;
                        _2331 = (_2603 * _2487.x) + _2425;
                        _2332 = (_2603 * _2487.y) + _2426;
                        _2333 = (_2603 * _2487.z) + _2427;
                        if (_2432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2425 = _2331;
                            _2426 = _2332;
                            _2427 = _2333;
                            _2428 = _2334;
                            _2429 = _2335;
                            _2430 = _2336;
                            _2431 = _2432;
                        }
                    }
                    frontier_phi_58_pred = _2332;
                    frontier_phi_58_pred_1 = _2336;
                    frontier_phi_58_pred_2 = _2335;
                    frontier_phi_58_pred_3 = _2334;
                    frontier_phi_58_pred_4 = _2333;
                    frontier_phi_58_pred_5 = _2331;
                }
                _2077 = frontier_phi_58_pred;
                _2085 = frontier_phi_58_pred_1;
                _2083 = frontier_phi_58_pred_2;
                _2081 = frontier_phi_58_pred_3;
                _2079 = frontier_phi_58_pred_4;
                _2075 = frontier_phi_58_pred_5;
                uint _2257 = _2256 + 1u;
                if (_2257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2250 = _2075;
                    _2251 = _2077;
                    _2252 = _2079;
                    _2253 = _2081;
                    _2254 = _2083;
                    _2255 = _2085;
                    _2256 = _2257;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2074 = _2075;
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
        }
        uvec4 _2088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2089 = _2088.z;
        uint _2091 = (_2089 >> 8u) & 15u;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        if (((4294967295u << _2091) & _1967) == 0u)
        {
            _2218 = _2074;
            _2220 = _2076;
            _2222 = _2078;
            _2224 = _2080;
            _2226 = _2082;
            _2228 = _2084;
        }
        else
        {
            float _2243 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float _2244 = _2243 * _1921;
            float _2245 = _2243 * _1922;
            float _2246 = _2243 * _1923;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2091 < ((_2089 >> 12u) & 15u))
            {
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2229;
                float _2408 = _2074;
                float _2409 = _2076;
                float _2410 = _2078;
                float _2411 = _2080;
                float _2412 = _2082;
                float _2413 = _2084;
                uint _2414 = _2091;
                uint _2423;
                bool _2424;
                for (;;)
                {
                    _2423 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                    _2424 = _2423 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2424)
                    {
                        frontier_phi_67_pred = _2413;
                        frontier_phi_67_pred_1 = _2412;
                        frontier_phi_67_pred_2 = _2411;
                        frontier_phi_67_pred_3 = _2410;
                        frontier_phi_67_pred_4 = _2409;
                        frontier_phi_67_pred_5 = _2408;
                    }
                    else
                    {
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2642 = _2408;
                        float _2643 = _2409;
                        float _2644 = _2410;
                        float _2645 = _2411;
                        float _2646 = _2412;
                        float _2647 = _2413;
                        uint _2648 = _2423;
                        uint _2649;
                        vec4 _2674;
                        float _2675;
                        vec4 _2690;
                        vec3 _2702;
                        vec4 _2718;
                        vec4 _2733;
                        float _2779;
                        bool _2780;
                        for (;;)
                        {
                            uint _2659 = ((_2414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2648));
                            _2649 = (_2648 + 4294967295u) & _2648;
                            uint _2661 = _2659 * 40u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            _2675 = _2674.w;
                            uint _2677 = (_2659 * 40u) + 4u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2692 = (_2659 * 40u) + 8u;
                            _2702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x));
                            uint _2705 = (_2659 * 40u) + 16u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2720 = (_2659 * 40u) + 20u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2735 = (_2659 * 40u) + 24u;
                            vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            uint _2754 = (_2659 * 40u) + 28u;
                            vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 3u)).x));
                            _2779 = fma(_1923, _2767.z, fma(_1922, _2767.y, _2767.x * _1921)) + _2767.w;
                            _2780 = !((fma(_1923, _2748.z, fma(_1922, _2748.y, _2748.x * _1921)) + _2748.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2780)
                            {
                                float _2807 = _2674.x - _1921;
                                float _2808 = _2674.y - _1922;
                                float _2809 = _2674.z - _1923;
                                float _2810 = dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809));
                                float _2813 = inversesqrt(_2810);
                                float _2814 = _2813 * _2807;
                                float _2815 = _2813 * _2808;
                                float _2816 = _2813 * _2809;
                                float _2820 = 1.0 - (_2810 / (_2675 * _2675));
                                float _3729 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                                float _2821 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2825 = sqrt(_2810) * _2690.w;
                                float _2827 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                                float _2828 = _2827 * _2827;
                                float _2831 = ((1.0 - _2828) * dot(vec3(_2814, _2815, _2816), vec3(_571, _574, _577))) + _2828;
                                float _2834 = _2825 * _2825;
                                float _2838 = (fma(_1923, _2718.z, fma(_1922, _2718.y, _2718.x * _1921)) + _2718.w) / _2779;
                                float _2839 = (fma(_1923, _2733.z, fma(_1922, _2733.y, _2733.x * _1921)) + _2733.w) / _2779;
                                float _2843 = 1.0 - dot(vec2(_2838, _2839), vec2(_2838, _2839));
                                float _3745 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                                float _2844 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2845 = _2844 * (((isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))) * _2821) / ((_2834 * 0.699999988079071044921875) + 1.0));
                                float _2857 = exp2(log2(1.0 / ((_2834 * 3.5) + 5.0)) * 0.25);
                                float _2858 = 1.0 - _632;
                                float _2865 = sqrt(1.0 - ((1.0 - (_2858 * _2858)) * (1.0 - (_2857 * _2857))));
                                float _2866 = _2865 * _2865;
                                float _2867 = _2866 * _2866;
                                float _2868 = _2814 - _2244;
                                float _2869 = _2815 - _2245;
                                float _2870 = _2816 - _2246;
                                float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                                float _2878 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2244, (-0.0) - _2245, (-0.0) - _2246));
                                float _3756 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2881 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
                                float _2882 = dot(vec3(_571, _574, _577), vec3(_2874 * _2868, _2874 * _2869, _2874 * _2870));
                                float _3767 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                                float _2885 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2889 = ((_2885 * _2885) * (_2867 + (-1.0))) + 1.0;
                                float _2890 = _2827 * _2866;
                                float _2891 = _2890 * _2890;
                                float _2897 = ((1.0 - _2891) * dot(vec3(_571, _574, _577), vec3(_2814, _2815, _2816))) + _2891;
                                float _3778 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                                float _2898 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                                float _2899 = 1.0 - _2866;
                                float _2909 = (0.5 / (((_2898 * ((_2881 * _2899) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2899) + _2866) * _2881))) * _2898;
                                float _3789 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2919 = (_2844 * _2821) * (((_2867 * 3.1415927410125732421875) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) / ((_2889 * _2889) * ((_2834 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2845 * _2690.z;
                                frontier_phi_73_pred_1 = _2845 * _2690.y;
                                frontier_phi_73_pred_2 = _2845 * _2690.x;
                                frontier_phi_73_pred_3 = _2919 * _2702.z;
                                frontier_phi_73_pred_4 = _2919 * _2702.y;
                                frontier_phi_73_pred_5 = _2919 * _2702.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2928 = frontier_phi_73_pred;
                            _2927 = frontier_phi_73_pred_1;
                            _2926 = frontier_phi_73_pred_2;
                            _2925 = frontier_phi_73_pred_3;
                            _2924 = frontier_phi_73_pred_4;
                            _2923 = frontier_phi_73_pred_5;
                            _2632 = _2926 + _2645;
                            _2633 = _2927 + _2646;
                            _2634 = _2928 + _2647;
                            _2629 = _2923 + _2642;
                            _2630 = _2924 + _2643;
                            _2631 = _2925 + _2644;
                            if (_2649 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2649;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2634;
                        frontier_phi_67_pred_1 = _2633;
                        frontier_phi_67_pred_2 = _2632;
                        frontier_phi_67_pred_3 = _2631;
                        frontier_phi_67_pred_4 = _2630;
                        frontier_phi_67_pred_5 = _2629;
                    }
                    _2229 = frontier_phi_67_pred;
                    _2227 = frontier_phi_67_pred_1;
                    _2225 = frontier_phi_67_pred_2;
                    _2223 = frontier_phi_67_pred_3;
                    _2221 = frontier_phi_67_pred_4;
                    _2219 = frontier_phi_67_pred_5;
                    uint _2415 = _2414 + 1u;
                    if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2408 = _2219;
                        _2409 = _2221;
                        _2410 = _2223;
                        _2411 = _2225;
                        _2412 = _2227;
                        _2413 = _2229;
                        _2414 = _2415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2225;
                frontier_phi_49_50_ladder_1 = _2229;
                frontier_phi_49_50_ladder_2 = _2227;
                frontier_phi_49_50_ladder_3 = _2223;
                frontier_phi_49_50_ladder_4 = _2221;
                frontier_phi_49_50_ladder_5 = _2219;
            }
            else
            {
                frontier_phi_49_50_ladder = _2080;
                frontier_phi_49_50_ladder_1 = _2084;
                frontier_phi_49_50_ladder_2 = _2082;
                frontier_phi_49_50_ladder_3 = _2078;
                frontier_phi_49_50_ladder_4 = _2076;
                frontier_phi_49_50_ladder_5 = _2074;
            }
            _2218 = frontier_phi_49_50_ladder_5;
            _2220 = frontier_phi_49_50_ladder_4;
            _2222 = frontier_phi_49_50_ladder_3;
            _2224 = frontier_phi_49_50_ladder;
            _2226 = frontier_phi_49_50_ladder_2;
            _2228 = frontier_phi_49_50_ladder_1;
        }
        float _2233 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
        _1980 = (_2233 * _2224) + _1710;
        _1982 = (_2233 * _2226) + _1711;
        _1984 = (_2233 * _2228) + _1712;
        _1986 = ((_2218 * 0.039999999105930328369140625) * _2233) + _1863;
        _1988 = ((_2220 * 0.039999999105930328369140625) * _2233) + _1864;
        _1990 = ((_2222 * 0.039999999105930328369140625) * _2233) + _1865;
    }
    else
    {
        _1980 = _1710;
        _1982 = _1711;
        _1984 = _1712;
        _1986 = _1863;
        _1988 = _1864;
        _1990 = _1865;
    }
    uint _1996 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _3805 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3816 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3827 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _2021 = (((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1980 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _616))) + ((_1986 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + (((_459.x * _277) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1996].x);
    float _2023 = ((((_459.y * _277) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_1996].y) + ((_1988 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1982 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _616)));
    float _2025 = ((((_459.z * _277) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_1996].z) + ((_1990 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1422)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1984 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _616)));
    uint _2029 = _590 + 6u;
    float _2037 = _549 / cbSceneParam._m0[86u].x;
    float _2038 = _550 / cbSceneParam._m0[86u].y;
    vec4 _2052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2037, _2038, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2054 = _2052.x;
    float _2055 = _2052.y;
    float _2056 = _2052.z;
    float _2057 = _2052.w;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2099 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2100 = _2099 / _536;
        float _2111 = _2100 * _259;
        float _2112 = _260 * _2100;
        float _2113 = (-0.0) - _2112;
        float _2114 = _2100 * _261;
        float _2116 = (cbSceneParam._m0[77u].w * _2113) / _2099;
        float _2117 = _2116 + cbSceneParam._m0[79u].w;
        float _2118 = cbSceneParam._m0[79u].w - _2112;
        float _2124 = sqrt(((_2111 * _2111) + (_2112 * _2112)) + (_2114 * _2114));
        float _2127 = (1.0 - (cbSceneParam._m0[77u].w / _2099)) * _2124;
        float _2133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2344;
        if (abs((_2113 - _2116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2344 = ((((_2117 > 0.0) ? exp2(_2133 * _2117) : (2.0 - exp2(_2135 * _2117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2127;
        }
        else
        {
            float _2279 = 1.0 / cbSceneParam._m0[80u].x;
            float _2280 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : max(_2117, _2118));
            float _2281 = isnan(_2118) ? _2117 : (isnan(_2117) ? _2118 : min(_2117, _2118));
            float _2290 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : min(_2280, 0.0));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            _2344 = ((abs(_2124 / _2113) * cbSceneParam._m0[80u].y) * ((((_2290 - _2291) * 2.0) - ((exp2(_2133 * (isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0)))) - exp2(_2133 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))))) * _2279)) - ((exp2(_2135 * _2290) - exp2(_2135 * _2291)) * _2279))) + (_2127 * cbSceneParam._m0[80u].z);
        }
        vec4 _2346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2037, _2038, 1.0), 0.0);
        float _2355 = exp2((_2344 * (-1.44269502162933349609375)) * (1.0 - _2346.w));
        float _2356 = log2(_2355);
        float _2372 = log2(_2057);
        _2137 = (exp2(_2372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].x)) * _2346.x) / cbSceneParam._m0[78u].x)) + _2054;
        _2139 = (exp2(_2372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].y)) * _2346.y) / cbSceneParam._m0[78u].y)) + _2055;
        _2141 = (exp2(_2372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2356 * cbSceneParam._m0[78u].z)) * _2346.z) / cbSceneParam._m0[78u].z)) + _2056;
        _2143 = _2355 * _2057;
    }
    else
    {
        _2137 = _2054;
        _2139 = _2055;
        _2141 = _2056;
        _2143 = _2057;
    }
    float _2155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2156 = _2155 == 3.0;
    float _2157 = log2(_2143);
    float _2164 = exp2(_2157 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)));
    float _2165 = exp2(_2157 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)));
    float _2166 = exp2(_2157 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2175 = (_2155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2175 * (_2156 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2137)));
    SV_Target.y = _2175 * (_2156 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.z = _2175 * (_2156 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.w = cbInstanceData._m0[_2029].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2029].w;
}


