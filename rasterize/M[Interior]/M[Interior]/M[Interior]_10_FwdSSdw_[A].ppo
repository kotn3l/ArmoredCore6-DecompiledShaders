#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _384;
float _2839;
float _2840;
float _2841;
float _2842;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _199 = _198 * TANGENT.x;
    float _200 = _198 * TANGENT.y;
    float _201 = _198 * TANGENT.z;
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _293 = texture(sampler2D(M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _309 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _316 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _328 = cbMtdParam._m0[22u].z + _256;
    float _329 = cbMtdParam._m0[22u].w + _257;
    float _330 = cbMtdParam._m0[23u].x + _258;
    float _347 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_309 * _188, _309 * _189, _309 * _190));
    float _348 = (-0.0) - dot(vec3(_328, _329, _330), vec3(_316 * _199, _316 * _200, _316 * _201));
    float _349 = (-0.0) - dot(vec3(_328, _329, _330), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _359 = ((cbMtdParam._m0[19u].y * _347) * _353) + (((_293.x * 2.0) + (-1.0)) * cbMtdParam._m0[19u].w);
    float _360 = ((cbMtdParam._m0[19u].z * _348) * _353) + (((_293.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].x);
    float _363 = fract(cbMtdParam._m0[19u].y * TEXCOORD.x);
    float _364 = fract(cbMtdParam._m0[19u].z * TEXCOORD.y);
    float _382;
    float _385;
    float _387;
    if (_359 > 0.0)
    {
        float _368 = (1.0 - _363) / _359;
        _382 = _368;
        _385 = ((cbMtdParam._m0[16u].z + 1.0) - fract(_368 * _354)) * 0.16666667163372039794921875;
        _387 = (fract((_368 * _360) + _364) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_359 < 0.0)
        {
            float _383 = ((-0.0) - _363) / _359;
            frontier_phi_3_2_ladder = _383;
            frontier_phi_3_2_ladder_1 = (fract((_383 * _360) + _364) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_383 * _354) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _384;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _382 = frontier_phi_3_2_ladder;
        _385 = frontier_phi_3_2_ladder_2;
        _387 = frontier_phi_3_2_ladder_1;
    }
    float _413;
    float _415;
    float _417;
    if (_360 > 0.0)
    {
        float _400 = (1.0 - _364) / _360;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_400 < _382)
        {
            frontier_phi_8_5_ladder = (fract(_400 * _354) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_400 * _359) + _363) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _400;
        }
        else
        {
            frontier_phi_8_5_ladder = _387;
            frontier_phi_8_5_ladder_1 = _385;
            frontier_phi_8_5_ladder_2 = _382;
        }
        _413 = frontier_phi_8_5_ladder_2;
        _415 = frontier_phi_8_5_ladder_1;
        _417 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_360 < 0.0)
        {
            float _414 = ((-0.0) - _364) / _360;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_414 < _382)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_414 * _354) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_414 * _359) + _363) + cbMtdParam._m0[16u].z) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _414;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _387;
                frontier_phi_8_6_ladder_9_ladder_1 = _385;
                frontier_phi_8_6_ladder_9_ladder_2 = _382;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _387;
            frontier_phi_8_6_ladder_1 = _385;
            frontier_phi_8_6_ladder_2 = _382;
        }
        _413 = frontier_phi_8_6_ladder_2;
        _415 = frontier_phi_8_6_ladder_1;
        _417 = frontier_phi_8_6_ladder;
    }
    float _421 = (_354 > 0.0) ? (cbMtdParam._m0[16u].y / _354) : 5000.0;
    float _434;
    float _435;
    if (_421 < _413)
    {
        _434 = ((_363 + cbMtdParam._m0[16u].z) + (_421 * _359)) * 0.16666667163372039794921875;
        _435 = (((_421 * _360) + _364) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _434 = _415;
        _435 = _417;
    }
    vec4 _437 = texture(sampler2D(M_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_434, _435));
    float _442 = _437.x * cbMtdParam._m0[13u].x;
    float _443 = _437.y * cbMtdParam._m0[13u].y;
    float _444 = _437.z * cbMtdParam._m0[13u].z;
    float _2851 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _2862 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _2873 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _463 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _467 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _468 = _256 * _467;
    float _469 = _257 * _467;
    float _470 = _258 * _467;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _578 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _585 = (cbMatDynParam._m0[5u].x * _578) + cbMatDynParam._m0[5u].y;
        float _2884 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _586 = isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0));
        float _590 = (cbMatDynParam._m0[5u].z * _578) + cbMatDynParam._m0[5u].w;
        float _2895 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0))) - _586)) + _586) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _495 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _496 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _509 = uint(roundEven(NORMAL.w)) * 13u;
    uint _510 = _509 + 9u;
    uint _511 = _510 + uint(cbMatDynParam._m0[0u].w);
    float _517 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0)))) * cbInstanceData._m0[_511].x;
    float _518 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0)))) * cbInstanceData._m0[_511].y;
    float _519 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0)))) * cbInstanceData._m0[_511].z;
    float _2906 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _520 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
    float _2917 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _521 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    float _2928 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _495, cbSceneParam._m0[86u].y * _496));
    float _534 = _531.x * TEXCOORD.z;
    float _535 = (-0.0) - _468;
    float _536 = (-0.0) - _469;
    float _537 = (-0.0) - _470;
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = (cbModelParam._m0[37u].x * ((((fma(_567, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _655 = (cbModelParam._m0[37u].y * ((((fma(_567, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _656 = (((((fma(_567, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _655, _656), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _655, _656), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _655, _656), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _655, _656), 0.0);
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_659.x + (-0.5));
        float _695 = _693 * (_659.y + (-0.5));
        float _696 = _693 * (_659.z + (-0.5));
        float _703 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_666.x + (-0.5));
        float _705 = _703 * (_666.y + (-0.5));
        float _706 = _703 * (_666.z + (-0.5));
        float _713 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_673.x + (-0.5));
        float _715 = _713 * (_673.y + (-0.5));
        float _716 = _713 * (_673.z + (-0.5));
        float _723 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_680.x + (-0.5));
        float _725 = _723 * (_680.y + (-0.5));
        float _726 = _723 * (_680.z + (-0.5));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = _694 * 0.5;
        float _731 = _704 * 0.5;
        float _732 = _714 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _747 = (dot(vec3(0.0), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _757 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _2976 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_759 + 1.0))) + _764) * _727;
        float _774 = _695 * 0.5;
        float _775 = _705 * 0.5;
        float _776 = _715 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(0.0), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _2987 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _2998 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3009 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * (_801 + 1.0))) + _806) * _728;
        float _816 = _696 * 0.5;
        float _817 = _706 * 0.5;
        float _818 = _716 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(0.0), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3020 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3031 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3042 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0))) * (_843 + 1.0))) + _848) * _729;
        _865 = _696;
        _866 = _695;
        _867 = _694;
        _868 = _706;
        _869 = _705;
        _870 = _704;
        _871 = _716;
        _872 = _715;
        _873 = _714;
        _874 = _729;
        _875 = _728;
        _876 = _727;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
    }
    else
    {
        _865 = _384;
        _866 = _384;
        _867 = _384;
        _868 = _384;
        _869 = _384;
        _870 = _384;
        _871 = _384;
        _872 = _384;
        _873 = _384;
        _874 = _384;
        _875 = _384;
        _876 = _384;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = (cbModelParam._m0[38u].x * ((((fma(_567, cbModelParam._m0[30u].z, fma(_563, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _937 = (cbModelParam._m0[38u].y * ((((fma(_567, cbModelParam._m0[31u].z, fma(_563, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _938 = (((((fma(_567, cbModelParam._m0[32u].z, fma(_563, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(0.0), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3105 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(0.0), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3138 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(0.0), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3149 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3160 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3171 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _384;
        _1144 = _384;
        _1145 = _384;
        _1146 = _384;
        _1147 = _384;
        _1148 = _384;
        _1149 = _384;
        _1150 = _384;
        _1151 = _384;
        _1152 = _384;
        _1153 = _384;
        _1154 = _384;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _877)) + _877;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _878)) + _878;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _879)) + _879;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _468 * (-0.5);
    float _1212 = _469 * (-0.5);
    float _1213 = _470 * (-0.5);
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_865, _868, _871, _874));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_866, _869, _872, _875));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_867, _870, _873, _876));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1278 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1361;
    float _1363;
    float _1365;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1328 = fma(_567, cbModelParam._m0[13u].z, fma(_563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _559)) + cbModelParam._m0[13u].w;
        float _1332 = fma(_567, cbModelParam._m0[14u].z, fma(_563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _559)) + cbModelParam._m0[14u].w;
        float _1336 = fma(_567, cbModelParam._m0[15u].z, fma(_563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _559)) + cbModelParam._m0[15u].w;
        float _1339 = fma(_537, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535));
        float _1342 = fma(_537, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535));
        float _1345 = fma(_537, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535));
        float _1371;
        if (_1339 > 0.0)
        {
            _1371 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1371 = frontier_phi_29_27_ladder;
        }
        float _1693;
        if (_1342 > 0.0)
        {
            _1693 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1693 = frontier_phi_38_34_ladder;
        }
        float _2004;
        if (_1345 > 0.0)
        {
            _2004 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2004 = frontier_phi_52_45_ladder;
        }
        float _2006 = isnan(_1693) ? _1371 : (isnan(_1371) ? _1693 : min(_1371, _1693));
        float _2007 = isnan(_2004) ? _2006 : (isnan(_2006) ? _2004 : min(_2006, _2004));
        float _2011 = (_2007 * _1339) + _1328;
        float _2012 = (_2007 * _1342) + _1332;
        float _2013 = (_2007 * _1345) + _1336;
        float _2014 = _2007 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2014;
        float _2017 = _2014 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2013 > _2017) || ((_2013 < _2015) || ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 < _2015) || (_2011 > _2017))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2013, cbModelParam._m0[9u].z, fma(_2012, cbModelParam._m0[9u].y, _2011 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2013, cbModelParam._m0[10u].z, fma(_2012, cbModelParam._m0[10u].y, _2011 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2013, cbModelParam._m0[11u].z, fma(_2012, cbModelParam._m0[11u].y, _2011 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_28_52_ladder = _2152.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2152.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2152.x * cbModelParam._m0[1u].y;
        }
        _1361 = frontier_phi_28_52_ladder_2;
        _1363 = frontier_phi_28_52_ladder_1;
        _1365 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_535, _536, _537), _1278);
        _1361 = _1349.x * cbModelParam._m0[1u].y;
        _1363 = _1349.y * cbModelParam._m0[1u].y;
        _1365 = _1349.z * cbModelParam._m0[1u].y;
    }
    float _1368 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1422 = fma(_567, cbModelParam._m0[21u].z, fma(_563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _559)) + cbModelParam._m0[21u].w;
        float _1426 = fma(_567, cbModelParam._m0[22u].z, fma(_563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _559)) + cbModelParam._m0[22u].w;
        float _1430 = fma(_567, cbModelParam._m0[23u].z, fma(_563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _559)) + cbModelParam._m0[23u].w;
        float _1433 = fma(_537, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535));
        float _1436 = fma(_537, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535));
        float _1439 = fma(_537, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535));
        float _1698;
        if (_1433 > 0.0)
        {
            _1698 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1698 = frontier_phi_40_36_ladder;
        }
        float _2030;
        if (_1436 > 0.0)
        {
            _2030 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2030 = frontier_phi_54_47_ladder;
        }
        float _2217;
        if (_1439 > 0.0)
        {
            _2217 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2217 = frontier_phi_72_65_ladder;
        }
        float _2219 = isnan(_2030) ? _1698 : (isnan(_1698) ? _2030 : min(_1698, _2030));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1433) + _1422;
        float _2225 = (_2220 * _1436) + _1426;
        float _2226 = (_2220 * _1439) + _1430;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1368);
            frontier_phi_37_72_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1458 = frontier_phi_37_72_ladder_2;
        _1460 = frontier_phi_37_72_ladder_1;
        _1462 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_535, _536, _537), _1368);
        _1458 = _1442.x * cbModelParam._m0[1u].z;
        _1460 = _1442.y * cbModelParam._m0[1u].z;
        _1462 = _1442.z * cbModelParam._m0[1u].z;
    }
    float _1474 = _534 * 0.01200000010430812835693359375;
    float _1476 = _1474 * ((cbModelParam._m0[1u].w * (_1458 - _1361)) + _1361);
    float _1477 = _1474 * ((cbModelParam._m0[1u].w * (_1460 - _1363)) + _1363);
    float _1478 = _1474 * ((cbModelParam._m0[1u].w * (_1462 - _1365)) + _1365);
    float _1481 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, _1476 * cbSceneParam._m0[91u].x));
    vec4 _1495 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_495, _496));
    float _1497 = _1495.w;
    float _1510 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1497);
    float _1511 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1497);
    float _1512 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1497);
    uvec4 _1516 = floatBitsToUint(cbInstanceData._m0[_509 + 5u]);
    uint _1518 = _1516.x * 14u;
    uint _1519 = _1518 + 13u;
    float _1524 = _534 + (-1.0);
    float _1527 = (cbLight._m0[_1519].x * _1524) + 1.0;
    float _1528 = (cbLight._m0[_1519].y * _1524) + 1.0;
    uint _1529 = _1518 + 5u;
    float _1535 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1539 = _1518 + 4u;
    float _1548 = isnan(1.0) ? _1527 : (isnan(_1527) ? 1.0 : min(_1527, 1.0));
    uint _1552 = _1518 | 1u;
    float _1563 = dot(vec3(cbLight._m0[_1518].xyz), vec3(0.0));
    float _1566 = dot(vec3(cbLight._m0[_1552].xyz), vec3(0.0));
    float _3307 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
    float _3318 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1571 = (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.3183098733425140380859375;
    float _1573 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.3183098733425140380859375;
    float _1580 = ((cbLight._m0[_1529].x * _1535) * _1573) + (((cbLight._m0[_1539].x * _1510) * _1548) * _1571);
    float _1581 = ((_1535 * cbLight._m0[_1529].y) * _1573) + (((cbLight._m0[_1539].y * _1511) * _1548) * _1571);
    float _1582 = ((_1535 * cbLight._m0[_1529].z) * _1573) + (((cbLight._m0[_1539].z * _1512) * _1548) * _1571);
    uint _1583 = _1518 + 8u;
    float _1589 = cbLight._m0[_1518].x + _468;
    float _1590 = cbLight._m0[_1518].y + _469;
    float _1591 = cbLight._m0[_1518].z + _470;
    float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
    float _1599 = dot(vec3(0.0), vec3(cbLight._m0[_1518].xyz));
    float _3329 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1602 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _1603 = dot(vec3(0.0), vec3(_468, _469, _470));
    float _3340 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1606 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _1607 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_1589 * _1595, _1590 * _1595, _1591 * _1595));
    float _3351 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1618 = (exp2(log2(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1624 = (0.5 / ((_1602 + 9.9999999392252902907785028219223e-09) + _1606)) * _1602;
    float _3362 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1626 = (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * 0.31831014156341552734375;
    uint _1640 = _1518 + 9u;
    float _1646 = cbLight._m0[_1552].x + _468;
    float _1647 = cbLight._m0[_1552].y + _469;
    float _1648 = cbLight._m0[_1552].z + _470;
    float _1652 = inversesqrt(dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648)));
    float _1656 = dot(vec3(0.0), vec3(cbLight._m0[_1552].xyz));
    float _3373 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1659 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _1660 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1646 * _1652, _1647 * _1652, _1648 * _1652));
    float _3384 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1669 = (exp2(log2(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1673 = (0.5 / ((_1659 + 9.9999999392252902907785028219223e-09) + _1606)) * _1659;
    float _3395 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1675 = (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0))) * 0.31831014156341552734375;
    float _1685 = (((_1669 * cbLight._m0[_1640].x) * _1675) * _1535) + ((((cbLight._m0[_1583].x * _1510) * _1618) * _1626) * _1548);
    float _1686 = (((_1669 * cbLight._m0[_1640].y) * _1675) * _1535) + ((((cbLight._m0[_1583].y * _1511) * _1618) * _1626) * _1548);
    float _1687 = (((_1669 * cbLight._m0[_1640].z) * _1675) * _1535) + ((((cbLight._m0[_1583].z * _1512) * _1618) * _1626) * _1548);
    float _1803;
    float _1805;
    float _1807;
    float _1809;
    float _1811;
    float _1813;
    if (_1516.y == 0u)
    {
        float _1743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1743;
        float _1745 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1743;
        float _1746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1743;
        uvec4 _1758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1759 = _1758.x;
        uint _1770 = uint((float(_1758.y) * floor(float(uint(cbSceneParam._m0[85u].y * _496) / _1759))) + floor(float(uint(cbSceneParam._m0[85u].x * _495) / _1759)));
        float _1780 = (log2(_1746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1781 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        uint _1784 = uint(isnan(14.0) ? _1781 : (isnan(_1781) ? 14.0 : min(_1781, 14.0)));
        uvec4 _1789 = texelFetch(g_lightClusterGridBuffer, int(((_1784 << 2u) + (_1770 << 6u)) >> 2u));
        uint _1790 = _1789.x;
        uint _1791 = _1758.z;
        float _1881;
        float _1883;
        float _1885;
        float _1887;
        float _1889;
        float _1891;
        if (((((1u << ((_1791 >> 4u) & 15u)) + 4294967295u) & _1790) == 0u) || ((_1791 & 240u) == 0u))
        {
            _1881 = 0.0;
            _1883 = 0.0;
            _1885 = 0.0;
            _1887 = 0.0;
            _1889 = 0.0;
            _1891 = 0.0;
        }
        else
        {
            float _1882;
            float _1884;
            float _1886;
            float _1888;
            float _1890;
            float _1892;
            float _2064 = 0.0;
            float _2065 = 0.0;
            float _2066 = 0.0;
            float _2067 = 0.0;
            float _2068 = 0.0;
            float _2069 = 0.0;
            uint _2070 = 0u;
            uint _2079;
            bool _2080;
            for (;;)
            {
                _2079 = texelFetch(g_lightClassification, int((((_1784 << 5u) + (_1770 << 9u)) + (_2070 << 2u)) >> 2u)).x;
                _2080 = _2079 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2080)
                {
                    frontier_phi_67_pred = _2067;
                    frontier_phi_67_pred_1 = _2066;
                    frontier_phi_67_pred_2 = _2065;
                    frontier_phi_67_pred_3 = _2064;
                    frontier_phi_67_pred_4 = _2068;
                    frontier_phi_67_pred_5 = _2069;
                }
                else
                {
                    float _2260;
                    float _2261;
                    float _2262;
                    float _2263;
                    float _2264;
                    float _2265;
                    uint _2266;
                    _2260 = _2064;
                    _2261 = _2065;
                    _2262 = _2066;
                    _2263 = _2067;
                    _2264 = _2068;
                    _2265 = _2069;
                    _2266 = _2079;
                    float _2161;
                    float _2162;
                    float _2163;
                    float _2164;
                    float _2165;
                    float _2166;
                    for (;;)
                    {
                        uint _2270 = uint(findLSB(_2266)) + (_2070 << 5u);
                        uint _2267 = (_2266 + 4294967295u) & _2266;
                        uint _2272 = _2270 * 48u;
                        vec4 _2286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2272)).x, texelFetch(g_PointLightRenderingBuffer, int(_2272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2272 + 3u)).x));
                        uint _2292 = (_2270 * 48u) + 4u;
                        vec4 _2305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2292)).x, texelFetch(g_PointLightRenderingBuffer, int(_2292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2292 + 3u)).x));
                        uint _2311 = (_2270 * 48u) + 8u;
                        vec3 _2322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2311)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2311 + 2u)).x));
                        float _2326 = _2286.x - _1744;
                        float _2327 = _2286.y - _1745;
                        float _2328 = _2286.z - _1746;
                        float _2329 = dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328));
                        float _2332 = inversesqrt(_2329);
                        float _2341 = 1.0 - (_2329 * _2286.w);
                        float _3416 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
                        float _2342 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
                        float _2343 = sqrt(_2329) * _2305.w;
                        float _2346 = 1.39999997615814208984375 / (_2343 + 1.39999997615814208984375);
                        float _2347 = _2346 * _2346;
                        float _2350 = ((1.0 - _2347) * dot(vec3(0.0), vec3(_2332 * _2326, _2332 * _2327, _2332 * _2328))) + _2347;
                        float _2353 = _2343 * _2343;
                        float _2357 = ((isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))) * _2342) / ((_2353 * 0.699999988079071044921875) + 1.0);
                        float _2361 = (-0.0) - _1744;
                        float _2362 = (-0.0) - _1745;
                        float _2363 = (-0.0) - _1746;
                        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
                        float _2371 = dot(vec3(0.0), vec3(_2367 * _2361, _2367 * _2362, _2367 * _2363));
                        float _3432 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
                        float _3443 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                        float _2375 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
                        float _2379 = (0.5 / (((isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) + 9.9999999392252902907785028219223e-09) + _2375)) * _2375;
                        float _3454 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
                        float _2388 = (((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 3.1415927410125732421875) / ((_2353 * 2.1991131305694580078125) + 3.141590118408203125)) * _2342;
                        _2164 = (_2357 * _2305.x) + _2263;
                        _2165 = (_2357 * _2305.y) + _2264;
                        _2166 = (_2357 * _2305.z) + _2265;
                        _2161 = (_2388 * _2322.x) + _2260;
                        _2162 = (_2388 * _2322.y) + _2261;
                        _2163 = (_2388 * _2322.z) + _2262;
                        if (_2267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2260 = _2161;
                            _2261 = _2162;
                            _2262 = _2163;
                            _2263 = _2164;
                            _2264 = _2165;
                            _2265 = _2166;
                            _2266 = _2267;
                        }
                    }
                    frontier_phi_67_pred = _2164;
                    frontier_phi_67_pred_1 = _2163;
                    frontier_phi_67_pred_2 = _2162;
                    frontier_phi_67_pred_3 = _2161;
                    frontier_phi_67_pred_4 = _2165;
                    frontier_phi_67_pred_5 = _2166;
                }
                _1888 = frontier_phi_67_pred;
                _1886 = frontier_phi_67_pred_1;
                _1884 = frontier_phi_67_pred_2;
                _1882 = frontier_phi_67_pred_3;
                _1890 = frontier_phi_67_pred_4;
                _1892 = frontier_phi_67_pred_5;
                uint _2071 = _2070 + 1u;
                if (_2071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2064 = _1882;
                    _2065 = _1884;
                    _2066 = _1886;
                    _2067 = _1888;
                    _2068 = _1890;
                    _2069 = _1892;
                    _2070 = _2071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1881 = _1882;
            _1883 = _1884;
            _1885 = _1886;
            _1887 = _1888;
            _1889 = _1890;
            _1891 = _1892;
        }
        uvec4 _1895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1896 = _1895.z;
        uint _1898 = (_1896 >> 8u) & 15u;
        float _2035;
        float _2037;
        float _2039;
        float _2041;
        float _2043;
        float _2045;
        if (((4294967295u << _1898) & _1790) == 0u)
        {
            _2035 = _1881;
            _2037 = _1883;
            _2039 = _1885;
            _2041 = _1887;
            _2043 = _1889;
            _2045 = _1891;
        }
        else
        {
            float _2060 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1898 < ((_1896 >> 12u) & 15u))
            {
                float _2036;
                float _2038;
                float _2040;
                float _2042;
                float _2044;
                float _2046;
                float _2243 = _1881;
                float _2244 = _1883;
                float _2245 = _1885;
                float _2246 = _1887;
                float _2247 = _1889;
                float _2248 = _1891;
                uint _2249 = _1898;
                uint _2258;
                bool _2259;
                for (;;)
                {
                    _2258 = texelFetch(g_lightClassification, int((((_1784 << 5u) + (_1770 << 9u)) + (_2249 << 2u)) >> 2u)).x;
                    _2259 = _2258 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2259)
                    {
                        frontier_phi_81_pred = _2246;
                        frontier_phi_81_pred_1 = _2245;
                        frontier_phi_81_pred_2 = _2244;
                        frontier_phi_81_pred_3 = _2243;
                        frontier_phi_81_pred_4 = _2248;
                        frontier_phi_81_pred_5 = _2247;
                    }
                    else
                    {
                        float _2423;
                        float _2424;
                        float _2425;
                        float _2426;
                        float _2427;
                        float _2428;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2436 = _2243;
                        float _2437 = _2244;
                        float _2438 = _2245;
                        float _2439 = _2246;
                        float _2440 = _2247;
                        float _2441 = _2248;
                        uint _2442 = _2258;
                        uint _2443;
                        vec4 _2468;
                        float _2469;
                        vec4 _2484;
                        vec3 _2496;
                        vec4 _2511;
                        vec4 _2526;
                        float _2572;
                        bool _2573;
                        for (;;)
                        {
                            uint _2453 = ((_2249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2442));
                            _2443 = (_2442 + 4294967295u) & _2442;
                            uint _2455 = _2453 * 40u;
                            _2468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2455 + 3u)).x));
                            _2469 = _2468.w;
                            uint _2471 = (_2453 * 40u) + 4u;
                            _2484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2471 + 3u)).x));
                            uint _2486 = (_2453 * 40u) + 8u;
                            _2496 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2486 + 2u)).x));
                            uint _2498 = (_2453 * 40u) + 16u;
                            _2511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 3u)).x));
                            uint _2513 = (_2453 * 40u) + 20u;
                            _2526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 3u)).x));
                            uint _2528 = (_2453 * 40u) + 24u;
                            vec4 _2541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2528 + 3u)).x));
                            uint _2547 = (_2453 * 40u) + 28u;
                            vec4 _2560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2547 + 3u)).x));
                            _2572 = fma(_1746, _2560.z, fma(_1745, _2560.y, _2560.x * _1744)) + _2560.w;
                            _2573 = !((fma(_1746, _2541.z, fma(_1745, _2541.y, _2541.x * _1744)) + _2541.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2573)
                            {
                                float _2600 = _2468.x - _1744;
                                float _2601 = _2468.y - _1745;
                                float _2602 = _2468.z - _1746;
                                float _2603 = dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602));
                                float _2606 = inversesqrt(_2603);
                                float _2607 = _2606 * _2600;
                                float _2608 = _2606 * _2601;
                                float _2609 = _2606 * _2602;
                                float _2613 = 1.0 - (_2603 / (_2469 * _2469));
                                float _3465 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                                float _2614 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
                                float _2618 = sqrt(_2603) * _2484.w;
                                float _2620 = 1.39999997615814208984375 / (_2618 + 1.39999997615814208984375);
                                float _2621 = _2620 * _2620;
                                float _2622 = 1.0 - _2621;
                                float _2624 = (_2622 * dot(vec3(_2607, _2608, _2609), vec3(0.0))) + _2621;
                                float _2627 = _2618 * _2618;
                                float _2631 = (fma(_1746, _2511.z, fma(_1745, _2511.y, _2511.x * _1744)) + _2511.w) / _2572;
                                float _2632 = (fma(_1746, _2526.z, fma(_1745, _2526.y, _2526.x * _1744)) + _2526.w) / _2572;
                                float _2636 = 1.0 - dot(vec2(_2631, _2632), vec2(_2631, _2632));
                                float _3481 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                                float _2637 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
                                float _2638 = _2637 * (((isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))) * _2614) / ((_2627 * 0.699999988079071044921875) + 1.0));
                                float _2648 = dot(vec3(0.0), vec3((-0.0) - (_1744 * _2060), (-0.0) - (_1745 * _2060), (-0.0) - (_1746 * _2060)));
                                float _3492 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                                float _2656 = (_2622 * dot(vec3(0.0), vec3(_2607, _2608, _2609))) + _2621;
                                float _3503 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                                float _2657 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
                                float _2661 = (0.5 / (((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) + 9.9999999392252902907785028219223e-09) + _2657)) * _2657;
                                float _3514 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                                float _2668 = (_2637 * _2614) * (((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 3.1415927410125732421875) / ((_2627 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2638 * _2484.x;
                                frontier_phi_87_pred_1 = _2668 * _2496.z;
                                frontier_phi_87_pred_2 = _2668 * _2496.y;
                                frontier_phi_87_pred_3 = _2668 * _2496.x;
                                frontier_phi_87_pred_4 = _2638 * _2484.z;
                                frontier_phi_87_pred_5 = _2638 * _2484.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2675 = frontier_phi_87_pred;
                            _2674 = frontier_phi_87_pred_1;
                            _2673 = frontier_phi_87_pred_2;
                            _2672 = frontier_phi_87_pred_3;
                            _2677 = frontier_phi_87_pred_4;
                            _2676 = frontier_phi_87_pred_5;
                            _2426 = _2675 + _2439;
                            _2427 = _2676 + _2440;
                            _2428 = _2677 + _2441;
                            _2423 = _2672 + _2436;
                            _2424 = _2673 + _2437;
                            _2425 = _2674 + _2438;
                            if (_2443 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2436 = _2423;
                                _2437 = _2424;
                                _2438 = _2425;
                                _2439 = _2426;
                                _2440 = _2427;
                                _2441 = _2428;
                                _2442 = _2443;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2426;
                        frontier_phi_81_pred_1 = _2425;
                        frontier_phi_81_pred_2 = _2424;
                        frontier_phi_81_pred_3 = _2423;
                        frontier_phi_81_pred_4 = _2428;
                        frontier_phi_81_pred_5 = _2427;
                    }
                    _2042 = frontier_phi_81_pred;
                    _2040 = frontier_phi_81_pred_1;
                    _2038 = frontier_phi_81_pred_2;
                    _2036 = frontier_phi_81_pred_3;
                    _2046 = frontier_phi_81_pred_4;
                    _2044 = frontier_phi_81_pred_5;
                    uint _2250 = _2249 + 1u;
                    if (_2250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2243 = _2036;
                        _2244 = _2038;
                        _2245 = _2040;
                        _2246 = _2042;
                        _2247 = _2044;
                        _2248 = _2046;
                        _2249 = _2250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2046;
                frontier_phi_56_57_ladder_1 = _2044;
                frontier_phi_56_57_ladder_2 = _2042;
                frontier_phi_56_57_ladder_3 = _2038;
                frontier_phi_56_57_ladder_4 = _2036;
                frontier_phi_56_57_ladder_5 = _2040;
            }
            else
            {
                frontier_phi_56_57_ladder = _1891;
                frontier_phi_56_57_ladder_1 = _1889;
                frontier_phi_56_57_ladder_2 = _1887;
                frontier_phi_56_57_ladder_3 = _1883;
                frontier_phi_56_57_ladder_4 = _1881;
                frontier_phi_56_57_ladder_5 = _1885;
            }
            _2035 = frontier_phi_56_57_ladder_4;
            _2037 = frontier_phi_56_57_ladder_3;
            _2039 = frontier_phi_56_57_ladder_5;
            _2041 = frontier_phi_56_57_ladder_2;
            _2043 = frontier_phi_56_57_ladder_1;
            _2045 = frontier_phi_56_57_ladder;
        }
        float _2050 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _1803 = (_2050 * _2041) + _1580;
        _1805 = (_2050 * _2043) + _1581;
        _1807 = (_2050 * _2045) + _1582;
        _1809 = ((_2035 * 0.039999999105930328369140625) * _2050) + _1685;
        _1811 = ((_2037 * 0.039999999105930328369140625) * _2050) + _1686;
        _1813 = ((_2039 * 0.039999999105930328369140625) * _2050) + _1687;
    }
    else
    {
        _1803 = _1580;
        _1805 = _1581;
        _1807 = _1582;
        _1809 = _1685;
        _1811 = _1686;
        _1813 = _1687;
    }
    float _3530 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3541 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3552 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _1830 = ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1803 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _534))) + ((_1809 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1269)) * cbPerFrame._m0[3u].x);
    float _1831 = ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1805 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _534))) + ((_1811 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1269)) * cbPerFrame._m0[3u].x);
    float _1832 = ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1807 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _534))) + ((_1813 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1269)) * cbPerFrame._m0[3u].x);
    float _1833 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1834 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    uint _1836 = _509 + 6u;
    float _1844 = _495 / cbSceneParam._m0[86u].x;
    float _1845 = _496 / cbSceneParam._m0[86u].y;
    vec4 _1859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1844, _1845, (log2((isnan(cbSceneParam._m0[77u].w) ? _463 : (isnan(_463) ? cbSceneParam._m0[77u].w : min(_463, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1861 = _1859.x;
    float _1862 = _1859.y;
    float _1863 = _1859.z;
    float _1864 = _1859.w;
    float _1944;
    float _1946;
    float _1948;
    float _1950;
    if (_463 > cbSceneParam._m0[78u].w)
    {
        float _1906 = isnan(_463) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _463 : min(cbSceneParam._m0[80u].w, _463));
        float _1907 = _1906 / _463;
        float _1918 = _1907 * _256;
        float _1919 = _257 * _1907;
        float _1920 = (-0.0) - _1919;
        float _1921 = _1907 * _258;
        float _1923 = (cbSceneParam._m0[77u].w * _1920) / _1906;
        float _1924 = _1923 + cbSceneParam._m0[79u].w;
        float _1925 = cbSceneParam._m0[79u].w - _1919;
        float _1931 = sqrt(((_1918 * _1918) + (_1919 * _1919)) + (_1921 * _1921));
        float _1934 = (1.0 - (cbSceneParam._m0[77u].w / _1906)) * _1931;
        float _1940 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1942 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2174;
        if (abs((_1920 - _1923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2174 = ((((_1924 > 0.0) ? exp2(_1940 * _1924) : (2.0 - exp2(_1942 * _1924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1934;
        }
        else
        {
            float _2093 = 1.0 / cbSceneParam._m0[80u].x;
            float _2094 = isnan(_1925) ? _1924 : (isnan(_1924) ? _1925 : max(_1924, _1925));
            float _2095 = isnan(_1925) ? _1924 : (isnan(_1924) ? _1925 : min(_1924, _1925));
            float _2104 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : min(_2094, 0.0));
            float _2105 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : min(_2095, 0.0));
            _2174 = ((abs(_1931 / _1920) * cbSceneParam._m0[80u].y) * ((((_2104 - _2105) * 2.0) - ((exp2(_1940 * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)))) - exp2(_1940 * (isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))))) * _2093)) - ((exp2(_1942 * _2104) - exp2(_1942 * _2105)) * _2093))) + (_1934 * cbSceneParam._m0[80u].z);
        }
        vec4 _2176 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1844, _1845, 1.0), 0.0);
        float _2185 = exp2((_2174 * (-1.44269502162933349609375)) * (1.0 - _2176.w));
        float _2186 = log2(_2185);
        float _2202 = log2(_1864);
        _1944 = (exp2(_2202 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2186 * cbSceneParam._m0[78u].x)) * _2176.x) / cbSceneParam._m0[78u].x)) + _1861;
        _1946 = (exp2(_2202 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2186 * cbSceneParam._m0[78u].y)) * _2176.y) / cbSceneParam._m0[78u].y)) + _1862;
        _1948 = (exp2(_2202 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2186 * cbSceneParam._m0[78u].z)) * _2176.z) / cbSceneParam._m0[78u].z)) + _1863;
        _1950 = _2185 * _1864;
    }
    else
    {
        _1944 = _1861;
        _1946 = _1862;
        _1948 = _1863;
        _1950 = _1864;
    }
    bool _2212;
    vec4 _1960;
    vec4 _1983;
    float _1985;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    bool _2003;
    for (;;)
    {
        _1960 = cbMatDynParam._m0[0u];
        float _1962 = roundEven(_1960.y);
        bool _1963 = _1962 == 3.0;
        float _1965 = log2(_1950);
        float _1972 = exp2(_1965 * cbSceneParam._m0[78u].x) * _1833;
        float _1973 = exp2(_1965 * cbSceneParam._m0[78u].y) * _1834;
        float _1974 = exp2(_1965 * cbSceneParam._m0[78u].z) * _1835;
        float _1981 = _477 + (-0.5);
        _1983 = cbMtdParam._m0[1u];
        _1985 = _1983.y * _1981;
        float _1988 = (_1962 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1989 = _1988 * (_1963 ? _1972 : (_1972 + (cbSceneParam._m0[72u].w * _1944)));
        _1990 = _1988 * (_1963 ? _1973 : (_1973 + (cbSceneParam._m0[72u].w * _1946)));
        _1991 = _1988 * (_1963 ? _1974 : (_1974 + (cbSceneParam._m0[72u].w * _1948)));
        _1992 = _1981 * 0.999000012874603271484375;
        _2003 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2003)
        {
            if ((cbInstanceData._m0[_509 + 7u].x + _1992) < 0.5)
            {
                _2212 = true;
                break;
            }
        }
        uint _2128 = _510 + uint(_1960.w);
        if ((cbInstanceData._m0[_2128].w < 1.0) && ((cbInstanceData._m0[_2128].w + _1992) < 0.5))
        {
            _2212 = true;
            break;
        }
        if ((_1985 + 1.0) < _1983.x)
        {
            _2212 = true;
            break;
        }
        _2212 = false;
        break;
    }
    float _2393;
    if (_2212)
    {
        discard_state = true;
        _2393 = 0.0;
    }
    else
    {
        _2393 = cbInstanceData._m0[_1836].w;
    }
    SV_Target.x = _1989;
    SV_Target.y = _1990;
    SV_Target.z = _1991;
    SV_Target.w = _2393;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1836].w;
    discard_exit();
}


