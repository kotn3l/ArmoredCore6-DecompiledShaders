#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1414;
float _3849;
float _3850;
float _3851;
float _3852;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _352 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _342)) + 1.0;
    float _3861 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _360 = (_353 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _361 = (_353 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _362 = (_353 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3872 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3883 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    vec4 _463 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _471 = ((((((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _463.x;
    float _474 = ((((_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _463.y;
    float _477 = ((((_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _463.z;
    vec4 _490 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _524 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _507) * _353) + _507;
    float _541 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _524) * _394) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _541) * _435) + _541;
    vec4 _571 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    vec4 _587 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _598 = ((_587.x - _573) * _353) + _573;
    float _599 = ((_587.y - _574) * _353) + _574;
    float _600 = ((_587.z - _575) * _353) + _575;
    vec4 _613 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _624 = ((_613.x - _598) * _394) + _598;
    float _625 = ((_613.y - _599) * _394) + _599;
    float _626 = ((_613.z - _600) * _394) + _600;
    vec4 _639 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _652 = ((_639.z - _626) * _435) + _626;
    float _655 = ((((_639.x - _624) * _435) + _624) * 2.0) + (-1.0);
    float _657 = ((((_639.y - _625) * _435) + _625) * 2.0) + (-1.0);
    float _658 = dot(vec2(_655, _657), vec2(_655, _657));
    float _3894 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    vec4 _695 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _709 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3905 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _718 = (((_710 * _710) * (3.0 - (_710 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _726 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _734 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3916 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _739 = (_735 * _735) * (3.0 - (_735 * 2.0));
    float _740 = _739 * cbMtdParam._m0[22u].x;
    float _741 = _739 * cbMtdParam._m0[22u].y;
    float _742 = sin(_726);
    float _743 = cos(_726);
    float _744 = TEXCOORD.z - _740;
    float _745 = TEXCOORD.w - _741;
    vec4 _765 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_740 + fma(_745, (-0.0) - _742, _744 * _743))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_745, _743, _744 * _742) + _741)) + cbTextureTilingScale._m0[2u].w));
    float _771 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _765.x;
    float _773 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _765.y;
    float _775 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _765.z;
    float _795 = (TEXCOORD_5.x - (((_490.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3927 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    vec4 _809 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _819 = (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _655;
    float _820 = (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _657;
    float _823 = fma(_663, _239 * NORMAL.x, fma(_820, _246 * TANGENT.x, (_232 * _224) * _819));
    float _826 = fma(_663, _239 * NORMAL.y, fma(_820, _246 * TANGENT.y, (_232 * _225) * _819));
    float _829 = fma(_663, _239 * NORMAL.z, fma(_820, _246 * TANGENT.z, (_232 * _226) * _819));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    float _834 = _833 * _823;
    float _835 = _833 * _826;
    float _836 = _833 * _829;
    float _3938 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _837 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3960 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3971 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3982 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _841 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    vec4 _921 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _923 = _921.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_907 * _907) + (_908 * _908)) + (_909 * _909));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3993 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _4004 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) - _1101)) + _1101) < ((_923 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _834));
    float _956 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _834));
    float _959 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _834));
    uint _972 = uint(roundEven(NORMAL.w)) * 13u;
    uint _973 = _972 + 9u;
    uint _974 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4015 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _986 = 1.0 - _841;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _841;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _841;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _841;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _1012 = _1009.x * TEXCOORD_5.w;
    float _1013 = dot(vec3(_834, _835, _836), vec3(_914, _915, _916));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _834) - _914;
    float _1021 = (_1016 * _835) - _915;
    float _1022 = (_1016 * _836) - _916;
    float _1026 = abs(dot(vec3(_914, _915, _916), vec3(_834, _835, _836)));
    float _4048 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_837);
    float _1040 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1046 = (1.0 - _1040) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1047 = _1040 * _1028;
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1413;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1138 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1142 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1146 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1171 = _1075 + _834;
        float _1172 = _1079 + _835;
        float _1173 = _1083 + _836;
        float _1183 = fma(_1173, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171)) - _1138;
        float _1184 = fma(_1173, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171)) - _1142;
        float _1185 = fma(_1173, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171)) - _1146;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1138 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1142 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[34u].z) + ((((((_1146 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1241 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1207.x + (-0.5));
        float _1243 = _1241 * (_1207.y + (-0.5));
        float _1244 = _1241 * (_1207.z + (-0.5));
        float _1251 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1214.x + (-0.5));
        float _1253 = _1251 * (_1214.y + (-0.5));
        float _1254 = _1251 * (_1214.z + (-0.5));
        float _1261 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1221.x + (-0.5));
        float _1263 = _1261 * (_1221.y + (-0.5));
        float _1264 = _1261 * (_1221.z + (-0.5));
        float _1271 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1228.x + (-0.5));
        float _1273 = _1271 * (_1228.y + (-0.5));
        float _1274 = _1271 * (_1228.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1295 = (dot(vec3(_834, _835, _836), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1305 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4096 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1307 + 1.0))) + _1312) * _1275;
        float _1322 = _1243 * 0.5;
        float _1323 = _1253 * 0.5;
        float _1324 = _1263 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_834, _835, _836), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4129 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1349 + 1.0))) + _1354) * _1276;
        float _1364 = _1244 * 0.5;
        float _1365 = _1254 * 0.5;
        float _1366 = _1264 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_834, _835, _836), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4162 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1391 + 1.0))) + _1396) * _1277;
        _1413 = _1244;
        _1415 = _1243;
        _1416 = _1242;
        _1417 = _1254;
        _1418 = _1253;
        _1419 = _1252;
        _1420 = _1264;
        _1421 = _1263;
        _1422 = _1262;
        _1423 = _1277;
        _1424 = _1276;
        _1425 = _1275;
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1414;
        _1415 = _1414;
        _1416 = _1414;
        _1417 = _1414;
        _1418 = _1414;
        _1419 = _1414;
        _1420 = _1414;
        _1421 = _1414;
        _1422 = _1414;
        _1423 = _1414;
        _1424 = _1414;
        _1425 = _1414;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1457 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1461 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1465 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1488 = _1075 + _834;
        float _1489 = _1079 + _835;
        float _1490 = _1083 + _836;
        float _1500 = fma(_1490, cbModelParam._m0[30u].z, fma(_1489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1488)) - _1457;
        float _1501 = fma(_1490, cbModelParam._m0[31u].z, fma(_1489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1488)) - _1461;
        float _1502 = fma(_1490, cbModelParam._m0[32u].z, fma(_1489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1488)) - _1465;
        float _1506 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
        float _1519 = ((_1506 * _1500) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1457 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1506 * _1501) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1461 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1506 * _1502) / cbModelParam._m0[35u].z) + ((((((_1465 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1519, _1520, _1521), 0.0);
        float _1556 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1523.x + (-0.5));
        float _1558 = _1556 * (_1523.y + (-0.5));
        float _1559 = _1556 * (_1523.z + (-0.5));
        float _1566 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1530.x + (-0.5));
        float _1568 = _1566 * (_1530.y + (-0.5));
        float _1569 = _1566 * (_1530.z + (-0.5));
        float _1576 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1537.x + (-0.5));
        float _1578 = _1576 * (_1537.y + (-0.5));
        float _1579 = _1576 * (_1537.z + (-0.5));
        float _1586 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1544.x + (-0.5));
        float _1588 = _1586 * (_1544.y + (-0.5));
        float _1589 = _1586 * (_1544.z + (-0.5));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1557 * 0.5;
        float _1594 = _1567 * 0.5;
        float _1595 = _1577 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_834, _835, _836), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4225 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1620 + 1.0))) + _1625) * _1590;
        float _1635 = _1558 * 0.5;
        float _1636 = _1568 * 0.5;
        float _1637 = _1578 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_834, _835, _836), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4258 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1662 + 1.0))) + _1667) * _1591;
        float _1677 = _1559 * 0.5;
        float _1678 = _1569 * 0.5;
        float _1679 = _1579 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_834, _835, _836), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4291 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1704 + 1.0))) + _1709) * _1592;
        _1726 = _1559;
        _1727 = _1558;
        _1728 = _1557;
        _1729 = _1569;
        _1730 = _1568;
        _1731 = _1567;
        _1732 = _1579;
        _1733 = _1578;
        _1734 = _1577;
        _1735 = _1592;
        _1736 = _1591;
        _1737 = _1590;
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    }
    else
    {
        _1726 = _1414;
        _1727 = _1414;
        _1728 = _1414;
        _1729 = _1414;
        _1730 = _1414;
        _1731 = _1414;
        _1732 = _1414;
        _1733 = _1414;
        _1734 = _1414;
        _1735 = _1414;
        _1736 = _1414;
        _1737 = _1414;
        _1738 = 0.0;
        _1739 = 0.0;
        _1740 = 0.0;
    }
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1426)) + _1426;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1427)) + _1427;
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1428)) + _1428;
    float _1773 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1750));
    float _1794 = _1020 * 0.5;
    float _1795 = _1021 * 0.5;
    float _1796 = _1022 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1837;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1413, _1417, _1420, _1423));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1848;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1839 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1852 = (_1848 * cbModelParam._m0[1u].x) + (_1837 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _837);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1924 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1927 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1955 = frontier_phi_17_15_ladder;
        }
        float _2158;
        if (_1924 > 0.0)
        {
            _2158 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2158 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1927 > 0.0)
        {
            _2412 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2158) ? _1955 : (isnan(_1955) ? _2158 : min(_1955, _2158));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1921) + _1910;
        float _2420 = (_2415 * _1924) + _1914;
        float _2421 = (_2415 * _1927) + _1918;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_16_38_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_16_38_ladder_2;
        _1945 = frontier_phi_16_38_ladder_1;
        _1947 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1863);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _837);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _2019 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _2022 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2163;
        if (_2016 > 0.0)
        {
            _2163 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2019 > 0.0)
        {
            _2439 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2652;
        if (_2022 > 0.0)
        {
            _2652 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2652 = frontier_phi_49_46_ladder;
        }
        float _2654 = isnan(_2439) ? _2163 : (isnan(_2163) ? _2439 : min(_2163, _2439));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _2016) + _2005;
        float _2660 = (_2655 * _2019) + _2009;
        float _2661 = (_2655 * _2022) + _2013;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_25_49_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_25_49_ladder_2;
        _2043 = frontier_phi_25_49_ladder_1;
        _2045 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1952);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2058 = (((_1046 * _997) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2060 = (((_1046 * _999) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2062 = (((_1046 * _1000) + _1047) * _1012) * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2065 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2060, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2068 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2060, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2071 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2060, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    uvec4 _2081 = floatBitsToUint(cbInstanceData._m0[_972 + 5u]);
    uint _2083 = _2081.x * 14u;
    uint _2084 = _2083 + 13u;
    float _2091 = _1012 + (-1.0);
    float _2096 = (cbLight._m0[_2084].x * _2091) + 1.0;
    float _2097 = (cbLight._m0[_2084].y * _2091) + 1.0;
    float _2098 = (cbLight._m0[_2084].z * _2091) + 1.0;
    float _2099 = (cbLight._m0[_2084].w * _2091) + 1.0;
    uint _2100 = _2083 + 5u;
    float _2106 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2110 = _2083 + 4u;
    float _2117 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2121 = _2083 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_834, _835, _836));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_834, _835, _836));
    float _4427 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4438 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2100].x * _2106) * _2142) + ((cbLight._m0[_2110].x * _2117) * _2140);
    float _2150 = ((_2106 * cbLight._m0[_2100].y) * _2142) + ((_2117 * cbLight._m0[_2110].y) * _2140);
    float _2151 = ((_2106 * cbLight._m0[_2100].z) * _2142) + ((_2117 * cbLight._m0[_2110].z) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2083 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2083 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2083 + 2u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4449 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2195 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2383 = _2083 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_2083 + 3u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4465 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2402 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2213 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2168;
        _2215 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2170;
        _2217 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2172;
    }
    uint _2220 = _2083 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _837) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2083].x + _914;
    float _2236 = cbLight._m0[_2083].y + _915;
    float _2237 = cbLight._m0[_2083].z + _916;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2083].xyz));
    float _4481 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2249 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2250 = dot(vec3(_834, _835, _836), vec3(_2242, _2243, _2244));
    float _4503 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2242, _2243, _2244));
    float _4514 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _994;
    float _2273 = 0.959999978542327880859375 - _995;
    float _2274 = 0.959999978542327880859375 - _996;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4525 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2305 = _2083 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _837) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2121].x + _914;
    float _2319 = cbLight._m0[_2121].y + _915;
    float _2320 = cbLight._m0[_2121].z + _916;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2121].xyz));
    float _4536 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2332 = dot(vec3(_834, _835, _836), vec3(_2325, _2326, _2327));
    float _4547 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2325, _2326, _2327));
    float _4558 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2249 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2358) + _2317) * _2331))) * _2331;
    float _4569 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2271) + _997) * cbLight._m0[_2305].x) * _2370) * _2106) + (((((_2270 * _2271) + _997) * cbLight._m0[_2220].x) * _2294) * _2117);
    float _2381 = (((((_2351 * _2273) + _999) * cbLight._m0[_2305].y) * _2370) * _2106) + (((((_2270 * _2273) + _999) * cbLight._m0[_2220].y) * _2294) * _2117);
    float _2382 = (((((_2351 * _2274) + _1000) * cbLight._m0[_2305].z) * _2370) * _2106) + (((((_2270 * _2274) + _1000) * cbLight._m0[_2220].z) * _2294) * _2117);
    float _2444;
    float _2446;
    float _2448;
    if (_2157)
    {
        _2444 = _2380;
        _2446 = _2381;
        _2448 = _2382;
    }
    else
    {
        uint _2450 = _2083 + 2u;
        uint _2454 = _2083 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _837) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _914;
        float _2471 = cbLight._m0[_2450].y + _915;
        float _2472 = cbLight._m0[_2450].z + _916;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2450].xyz));
        float _4580 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2484 = dot(vec3(_834, _835, _836), vec3(_2477, _2478, _2479));
        float _4591 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4602 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2249 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2510) + _2469) * _2483))) * _2483;
        float _4613 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2444 = (((((_2503 * _2271) + _997) * cbLight._m0[_2454].x) * _2522) * _2523) + _2380;
        _2446 = (((((_2503 * _2273) + _999) * cbLight._m0[_2454].y) * _2522) * _2523) + _2381;
        _2448 = (((((_2503 * _2274) + _1000) * cbLight._m0[_2454].z) * _2522) * _2523) + _2382;
    }
    float _2558;
    float _2560;
    float _2562;
    if (_2175)
    {
        _2558 = _2444;
        _2560 = _2446;
        _2562 = _2448;
    }
    else
    {
        uint _2569 = _2083 + 3u;
        uint _2573 = _2083 + 11u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _837) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _914;
        float _2590 = cbLight._m0[_2569].y + _915;
        float _2591 = cbLight._m0[_2569].z + _916;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2569].xyz));
        float _4629 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2603 = dot(vec3(_834, _835, _836), vec3(_2596, _2597, _2598));
        float _4640 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4651 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2249 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2629) + _2588) * _2602))) * _2602;
        float _4662 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2558 = (((((_2622 * _2271) + _997) * cbLight._m0[_2573].x) * _2641) * _2642) + _2444;
        _2560 = (((((_2622 * _2273) + _999) * cbLight._m0[_2573].y) * _2641) * _2642) + _2446;
        _2562 = (((((_2622 * _2274) + _1000) * cbLight._m0[_2573].z) * _2641) * _2642) + _2448;
    }
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_2081.y == 0u)
    {
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2717;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2717;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2717;
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.x;
        uint _2744 = uint((float(_2732.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2733))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2733)));
        float _2754 = (log2(_2720 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2755 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        uint _2758 = uint(isnan(14.0) ? _2755 : (isnan(_2755) ? 14.0 : min(_2755, 14.0)));
        uvec4 _2763 = texelFetch(g_lightClusterGridBuffer, int(((_2758 << 2u) + (_2744 << 6u)) >> 2u));
        uint _2764 = _2763.x;
        uint _2765 = _2732.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2765 >> 4u) & 15u)) + 4294967295u) & _2764) == 0u) || ((_2765 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            uint _3077 = 0u;
            uint _3086;
            bool _3087;
            for (;;)
            {
                _3086 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                _3087 = _3086 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3087)
                {
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                else
                {
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    uint _3222;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3086;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    for (;;)
                    {
                        uint _3226 = uint(findLSB(_3222)) + (_3077 << 5u);
                        uint _3223 = (_3222 + 4294967295u) & _3222;
                        uint _3228 = _3226 * 48u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3248 = (_3226 * 48u) + 4u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3267 = (_3226 * 48u) + 8u;
                        vec3 _3278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x));
                        float _3282 = _3242.x - _2718;
                        float _3283 = _3242.y - _2719;
                        float _3284 = _3242.z - _2720;
                        float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                        float _3288 = inversesqrt(_3285);
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3292 = dot(vec3(_953, _956, _959), vec3(_3289, _3290, _3291));
                        float _3297 = 1.0 - (_3285 * _3242.w);
                        float _4688 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3299 = sqrt(_3285) * _3261.w;
                        float _3302 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3292) + _3303;
                        float _3309 = _3299 * _3299;
                        float _3313 = ((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3298) / ((_3309 * 0.699999988079071044921875) + 1.0);
                        float _3317 = (-0.0) - _2718;
                        float _3318 = (-0.0) - _2719;
                        float _3319 = (-0.0) - _2720;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3334 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                        float _3335 = 1.0 - _1028;
                        float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                        float _3343 = _3342 * _3342;
                        float _3344 = _3343 * _3343;
                        float _3345 = _3324 + _3289;
                        float _3346 = _3325 + _3290;
                        float _3347 = _3326 + _3291;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3355 = dot(vec3(_953, _956, _959), vec3(_3324, _3325, _3326));
                        float _4704 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3359 = dot(vec3(_953, _956, _959), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                        float _4715 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                        float _3367 = _3302 * _3343;
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3292) + _3368;
                        float _4726 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3372 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3373 = 1.0 - _3343;
                        float _3383 = (0.5 / (((_3372 * ((_3358 * _3373) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3343) * _3358))) * _3372;
                        float _4737 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3394 = (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3366 * _3366) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125))) * _3298;
                        _3146 = (_3313 * _3261.x) + _3219;
                        _3147 = (_3313 * _3261.y) + _3220;
                        _3148 = (_3313 * _3261.z) + _3221;
                        _3143 = (_3394 * _3278.x) + _3216;
                        _3144 = (_3394 * _3278.y) + _3217;
                        _3145 = (_3394 * _3278.z) + _3218;
                        if (_3223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3223;
                        }
                    }
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                _2911 = frontier_phi_66_pred;
                _2921 = frontier_phi_66_pred_1;
                _2919 = frontier_phi_66_pred_2;
                _2917 = frontier_phi_66_pred_3;
                _2915 = frontier_phi_66_pred_4;
                _2913 = frontier_phi_66_pred_5;
                uint _3078 = _3077 + 1u;
                if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3071 = _2911;
                    _3072 = _2913;
                    _3073 = _2915;
                    _3074 = _2917;
                    _3075 = _2919;
                    _3076 = _2921;
                    _3077 = _3078;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((4294967295u << _2927) & _2764) == 0u)
        {
            _3039 = _2910;
            _3041 = _2912;
            _3043 = _2914;
            _3045 = _2916;
            _3047 = _2918;
            _3049 = _2920;
        }
        else
        {
            float _3064 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
            float _3065 = _3064 * _2718;
            float _3066 = _3064 * _2719;
            float _3067 = _3064 * _2720;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3199 = _2910;
                float _3200 = _2912;
                float _3201 = _2914;
                float _3202 = _2916;
                float _3203 = _2918;
                float _3204 = _2920;
                uint _3205 = _2927;
                uint _3214;
                bool _3215;
                for (;;)
                {
                    _3214 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                    _3215 = _3214 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3215)
                    {
                        frontier_phi_77_pred = _3204;
                        frontier_phi_77_pred_1 = _3203;
                        frontier_phi_77_pred_2 = _3202;
                        frontier_phi_77_pred_3 = _3201;
                        frontier_phi_77_pred_4 = _3200;
                        frontier_phi_77_pred_5 = _3199;
                    }
                    else
                    {
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        uint _3427 = _3214;
                        uint _3428;
                        vec4 _3453;
                        float _3454;
                        vec4 _3469;
                        vec3 _3481;
                        vec4 _3496;
                        vec4 _3511;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3438 = ((_3205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3427));
                            _3428 = (_3427 + 4294967295u) & _3427;
                            uint _3440 = _3438 * 40u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3454 = _3453.w;
                            uint _3456 = (_3438 * 40u) + 4u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3438 * 40u) + 8u;
                            _3481 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x));
                            uint _3483 = (_3438 * 40u) + 16u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3438 * 40u) + 20u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3514 = (_3438 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3438 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2720, _3546.z, fma(_2719, _3546.y, _3546.x * _2718)) + _3546.w;
                            _3559 = !((fma(_2720, _3527.z, fma(_2719, _3527.y, _3527.x * _2718)) + _3527.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3453.x - _2718;
                                float _3587 = _3453.y - _2719;
                                float _3588 = _3453.z - _2720;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3454 * _3454));
                                float _4748 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3604 = sqrt(_3589) * _3469.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_953, _956, _959))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2720, _3496.z, fma(_2719, _3496.y, _3496.x * _2718)) + _3496.w) / _3558;
                                float _3618 = (fma(_2720, _3511.z, fma(_2719, _3511.y, _3511.x * _2718)) + _3511.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4764 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1028;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3065;
                                float _3648 = _3594 - _3066;
                                float _3649 = _3595 - _3067;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_953, _956, _959), vec3((-0.0) - _3065, (-0.0) - _3066, (-0.0) - _3067));
                                float _4775 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3661 = dot(vec3(_953, _956, _959), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4786 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_953, _956, _959), vec3(_3593, _3594, _3595))) + _3670;
                                float _4797 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4808 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3624 * _3469.y;
                                frontier_phi_83_pred_1 = _3624 * _3469.x;
                                frontier_phi_83_pred_2 = _3698 * _3481.z;
                                frontier_phi_83_pred_3 = _3698 * _3481.y;
                                frontier_phi_83_pred_4 = _3698 * _3481.x;
                                frontier_phi_83_pred_5 = _3624 * _3469.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3706 = frontier_phi_83_pred;
                            _3705 = frontier_phi_83_pred_1;
                            _3704 = frontier_phi_83_pred_2;
                            _3703 = frontier_phi_83_pred_3;
                            _3702 = frontier_phi_83_pred_4;
                            _3707 = frontier_phi_83_pred_5;
                            _3411 = _3705 + _3424;
                            _3412 = _3706 + _3425;
                            _3413 = _3707 + _3426;
                            _3408 = _3702 + _3421;
                            _3409 = _3703 + _3422;
                            _3410 = _3704 + _3423;
                            if (_3428 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3428;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3413;
                        frontier_phi_77_pred_1 = _3412;
                        frontier_phi_77_pred_2 = _3411;
                        frontier_phi_77_pred_3 = _3410;
                        frontier_phi_77_pred_4 = _3409;
                        frontier_phi_77_pred_5 = _3408;
                    }
                    _3050 = frontier_phi_77_pred;
                    _3048 = frontier_phi_77_pred_1;
                    _3046 = frontier_phi_77_pred_2;
                    _3044 = frontier_phi_77_pred_3;
                    _3042 = frontier_phi_77_pred_4;
                    _3040 = frontier_phi_77_pred_5;
                    uint _3206 = _3205 + 1u;
                    if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3199 = _3040;
                        _3200 = _3042;
                        _3201 = _3044;
                        _3202 = _3046;
                        _3203 = _3048;
                        _3204 = _3050;
                        _3205 = _3206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3044;
                frontier_phi_58_59_ladder_1 = _3050;
                frontier_phi_58_59_ladder_2 = _3048;
                frontier_phi_58_59_ladder_3 = _3046;
                frontier_phi_58_59_ladder_4 = _3042;
                frontier_phi_58_59_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_58_59_ladder = _2914;
                frontier_phi_58_59_ladder_1 = _2920;
                frontier_phi_58_59_ladder_2 = _2918;
                frontier_phi_58_59_ladder_3 = _2916;
                frontier_phi_58_59_ladder_4 = _2912;
                frontier_phi_58_59_ladder_5 = _2910;
            }
            _3039 = frontier_phi_58_59_ladder_5;
            _3041 = frontier_phi_58_59_ladder_4;
            _3043 = frontier_phi_58_59_ladder;
            _3045 = frontier_phi_58_59_ladder_3;
            _3047 = frontier_phi_58_59_ladder_2;
            _3049 = frontier_phi_58_59_ladder_1;
        }
        float _3054 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _2777 = (_3054 * _3045) + _2213;
        _2779 = (_3054 * _3047) + _2215;
        _2781 = (_3054 * _3049) + _2217;
        _2783 = ((_3039 * _997) * _3054) + _2558;
        _2785 = ((_3041 * _999) * _3054) + _2560;
        _2787 = ((_3043 * _1000) * _3054) + _2562;
    }
    else
    {
        _2777 = _2213;
        _2779 = _2215;
        _2781 = _2217;
        _2783 = _2558;
        _2785 = _2560;
        _2787 = _2562;
    }
    uint _2793 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _2799 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2805 = (((((_2799 * cbMtdParam._m0[14u].x) * _695.x) * _718) * _796) * (((1.0 - _771) * cbMtdParam._m0[20u].w) + _771)) * cbInstanceData._m0[_2793].x;
    float _2811 = (((((_2799 * cbMtdParam._m0[14u].y) * _695.y) * _718) * _796) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_2793].y;
    float _2817 = (((((_2799 * cbMtdParam._m0[14u].z) * _695.z) * _718) * _796) * (((1.0 - _775) * cbMtdParam._m0[20u].w) + _775)) * cbInstanceData._m0[_2793].z;
    float _4824 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4835 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4846 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2834 = (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2777 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1012))) + ((_2783 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + _2805;
    float _2836 = (_2811 + ((_2785 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2779 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1012)));
    float _2838 = (_2817 + ((_2787 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2781 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1012)));
    float _2839 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2840 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
    float _2841 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2847 = cbMtdParam._m0[2u].x * _2805;
    float _2848 = cbMtdParam._m0[2u].y * _2811;
    float _2849 = cbMtdParam._m0[2u].z * _2817;
    float _4872 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2851 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    uint _2852 = _972 + 6u;
    float _2860 = _934 / cbSceneParam._m0[86u].x;
    float _2861 = _935 / cbSceneParam._m0[86u].y;
    vec4 _2875 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2877 = _2875.x;
    float _2878 = _2875.y;
    float _2879 = _2875.z;
    float _2880 = _2875.w;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _2936 = _2935 / _857;
        float _2947 = _2936 * _907;
        float _2948 = _908 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2950 = _2936 * _909;
        float _2952 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2953 = _2952 + cbSceneParam._m0[79u].w;
        float _2954 = cbSceneParam._m0[79u].w - _2948;
        float _2960 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2950 * _2950));
        float _2963 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2960;
        float _2968 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2970 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3156;
        if (abs((_2949 - _2952) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3156 = ((((_2953 > 0.0) ? exp2(_2968 * _2953) : (2.0 - exp2(_2970 * _2953))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2963;
        }
        else
        {
            float _3100 = 1.0 / cbSceneParam._m0[80u].x;
            float _3101 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : max(_2953, _2954));
            float _3102 = isnan(_2954) ? _2953 : (isnan(_2953) ? _2954 : min(_2953, _2954));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            _3156 = ((abs(_2960 / _2949) * cbSceneParam._m0[80u].y) * ((((_3111 - _3112) * 2.0) - ((exp2(_2968 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)))) - exp2(_2968 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))))) * _3100)) - ((exp2(_2970 * _3111) - exp2(_2970 * _3112)) * _3100))) + (_2963 * cbSceneParam._m0[80u].z);
        }
        vec4 _3158 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, 1.0), 0.0);
        float _3167 = exp2((_3156 * (-1.44269502162933349609375)) * (1.0 - _3158.w));
        float _3168 = log2(_3167);
        float _3184 = log2(_2880);
        _2972 = (exp2(_3184 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].x)) * _3158.x) / cbSceneParam._m0[78u].x)) + _2877;
        _2974 = (exp2(_3184 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].y)) * _3158.y) / cbSceneParam._m0[78u].y)) + _2878;
        _2976 = (exp2(_3184 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].z)) * _3158.z) / cbSceneParam._m0[78u].z)) + _2879;
        _2978 = _3167 * _2880;
    }
    else
    {
        _2972 = _2877;
        _2974 = _2878;
        _2976 = _2879;
        _2978 = _2880;
    }
    bool _3194;
    vec4 _2988;
    vec4 _3010;
    float _3012;
    float _3016;
    float _3017;
    float _3018;
    float _3021;
    float _3024;
    float _3027;
    float _3028;
    bool _3038;
    for (;;)
    {
        _2988 = cbMatDynParam._m0[0u];
        float _2990 = roundEven(_2988.y);
        bool _2991 = _2990 == 3.0;
        float _2992 = log2(_2978);
        float _2996 = exp2(_2992 * cbSceneParam._m0[78u].x);
        float _2997 = exp2(_2992 * cbSceneParam._m0[78u].y);
        float _2998 = exp2(_2992 * cbSceneParam._m0[78u].z);
        float _2999 = _2996 * _2839;
        float _3000 = _2997 * _2840;
        float _3001 = _2998 * _2841;
        float _3008 = _923 + (-0.5);
        _3010 = cbMtdParam._m0[1u];
        _3012 = _3010.y * _3008;
        float _3015 = (_2990 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3016 = _3015 * (_2991 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2972)));
        _3017 = _3015 * (_2991 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2974)));
        _3018 = _3015 * (_2991 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2976)));
        _3021 = ((_2847 * _2851) * _2996) * _3015;
        _3024 = ((_2848 * _2851) * _2997) * _3015;
        _3027 = ((_2849 * _2851) * _2998) * _3015;
        _3028 = _3008 * 0.999000012874603271484375;
        _3038 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3038)
        {
            if ((cbInstanceData._m0[_972 + 7u].x + _3028) < 0.5)
            {
                _3194 = true;
                break;
            }
        }
        uint _3135 = _973 + uint(_2988.w);
        if ((cbInstanceData._m0[_3135].w < 1.0) && ((cbInstanceData._m0[_3135].w + _3028) < 0.5))
        {
            _3194 = true;
            break;
        }
        if ((_3012 + 1.0) < _3010.x)
        {
            _3194 = true;
            break;
        }
        _3194 = false;
        break;
    }
    float _3399;
    if (_3194)
    {
        discard_state = true;
        _3399 = 0.0;
    }
    else
    {
        _3399 = cbInstanceData._m0[_2852].w;
    }
    SV_Target.x = _3016;
    SV_Target.y = _3017;
    SV_Target.z = _3018;
    SV_Target.w = _3399;
    SV_Target_1.x = _3021;
    SV_Target_1.y = _3024;
    SV_Target_1.z = _3027;
    SV_Target_1.w = cbInstanceData._m0[_2852].w;
    discard_exit();
}


