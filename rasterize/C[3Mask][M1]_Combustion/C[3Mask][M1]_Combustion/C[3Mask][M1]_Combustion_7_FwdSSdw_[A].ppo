#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1357;
float _3816;
float _3817;
float _3818;
float _3819;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _3828 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3839 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3850 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401;
    vec4 _455 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _470 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _490 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _472) * _351) + _472;
    float _507 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _490) * _392) + _490;
    float _524 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _507) * _433) + _507;
    vec4 _537 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    vec4 _553 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _564 = ((_553.x - _539) * _351) + _539;
    float _565 = ((_553.y - _540) * _351) + _540;
    float _566 = ((_553.z - _541) * _351) + _541;
    vec4 _579 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _590 = ((_579.x - _564) * _392) + _564;
    float _591 = ((_579.y - _565) * _392) + _565;
    float _592 = ((_579.z - _566) * _392) + _566;
    vec4 _605 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _618 = ((_605.z - _592) * _433) + _592;
    float _621 = ((((_605.x - _590) * _433) + _590) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _591) * _433) + _591) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _3861 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _661 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _675 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3872 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _684 = (((_676 * _676) * (3.0 - (_676 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _692 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _700 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3883 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _705 = (_701 * _701) * (3.0 - (_701 * 2.0));
    float _706 = _705 * cbMtdParam._m0[22u].x;
    float _707 = _705 * cbMtdParam._m0[22u].y;
    float _708 = sin(_692);
    float _709 = cos(_692);
    float _710 = TEXCOORD.z - _706;
    float _711 = TEXCOORD.w - _707;
    vec4 _731 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_706 + fma(_711, (-0.0) - _708, _710 * _709))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_711, _709, _710 * _708) + _707)) + cbTextureTilingScale._m0[2u].w));
    float _737 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _731.x;
    float _739 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _731.y;
    float _741 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _731.z;
    float _761 = (TEXCOORD_5.x - (((_455.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3894 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _765 = fma(_629, _237 * NORMAL.x, fma(_623, _244 * TANGENT.x, (_230 * _222) * _621));
    float _768 = fma(_629, _237 * NORMAL.y, fma(_623, _244 * TANGENT.y, (_230 * _223) * _621));
    float _771 = fma(_629, _237 * NORMAL.z, fma(_623, _244 * TANGENT.z, (_230 * _224) * _621));
    float _775 = inversesqrt(dot(vec3(_765, _768, _771), vec3(_765, _768, _771)));
    float _776 = _775 * _765;
    float _777 = _775 * _768;
    float _778 = _775 * _771;
    float _3905 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _779 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3927 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3938 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3949 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _783 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    vec4 _863 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _865 = _863.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1037 = sqrt(((_849 * _849) + (_850 * _850)) + (_851 * _851));
        float _1043 = (cbMatDynParam._m0[5u].x * _1037) + cbMatDynParam._m0[5u].y;
        float _3960 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1048 = (cbMatDynParam._m0[5u].z * _1037) + cbMatDynParam._m0[5u].w;
        float _3971 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) - _1044)) + _1044) < ((_865 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _876 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _877 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _896 = fma(_778, cbSceneParam._m0[5u].z, fma(_777, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _776));
    float _899 = fma(_778, cbSceneParam._m0[6u].z, fma(_777, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _776));
    float _902 = fma(_778, cbSceneParam._m0[7u].z, fma(_777, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _776));
    uint _915 = uint(roundEven(NORMAL.w)) * 13u;
    uint _916 = _915 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3982 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _929 = 1.0 - _783;
    float _930 = _926 * _929;
    float _931 = _927 * _929;
    float _932 = _928 * _929;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _783;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _783;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _783;
    float _940 = _937 + 0.039999999105930328369140625;
    float _942 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _876, cbSceneParam._m0[86u].y * _877));
    float _955 = _952.x * TEXCOORD_5.w;
    float _956 = dot(vec3(_776, _777, _778), vec3(_856, _857, _858));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _776) - _856;
    float _964 = (_959 * _777) - _857;
    float _965 = (_959 * _778) - _858;
    float _969 = abs(dot(vec3(_856, _857, _858), vec3(_776, _777, _778)));
    float _4015 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_779);
    float _983 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _989 = (1.0 - _983) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _990 = _983 * _971;
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1085 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1089 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1114 = _1018 + _776;
        float _1115 = _1022 + _777;
        float _1116 = _1026 + _778;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_776, _777, _778), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4063 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_776, _777, _778), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4096 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_776, _777, _778), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4129 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1404 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1408 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1431 = _1018 + _776;
        float _1432 = _1022 + _777;
        float _1433 = _1026 + _778;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_776, _777, _778), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4192 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_776, _777, _778), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4225 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_776, _777, _778), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4258 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = _1357;
        _1679 = _1357;
        _1680 = _1357;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1369)) + _1369;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1370)) + _1370;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1371)) + _1371;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _963 * 0.5;
    float _1738 = _964 * 0.5;
    float _1739 = _965 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _779);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1867 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1870 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1898 = frontier_phi_17_15_ladder;
        }
        float _2122;
        if (_1867 > 0.0)
        {
            _2122 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2122 = frontier_phi_26_22_ladder;
        }
        float _2379;
        if (_1870 > 0.0)
        {
            _2379 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2379 = frontier_phi_38_33_ladder;
        }
        float _2381 = isnan(_2122) ? _1898 : (isnan(_1898) ? _2122 : min(_1898, _2122));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1864) + _1853;
        float _2387 = (_2382 * _1867) + _1857;
        float _2388 = (_2382 * _1870) + _1861;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_16_38_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_16_38_ladder_2;
        _1888 = frontier_phi_16_38_ladder_1;
        _1890 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1806);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _779);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1962 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1965 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2127;
        if (_1959 > 0.0)
        {
            _2127 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2127 = frontier_phi_28_24_ladder;
        }
        float _2406;
        if (_1962 > 0.0)
        {
            _2406 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2406 = frontier_phi_40_35_ladder;
        }
        float _2619;
        if (_1965 > 0.0)
        {
            _2619 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2619 = frontier_phi_49_46_ladder;
        }
        float _2621 = isnan(_2406) ? _2127 : (isnan(_2127) ? _2406 : min(_2127, _2406));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1959) + _1948;
        float _2627 = (_2622 * _1962) + _1952;
        float _2628 = (_2622 * _1965) + _1956;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_25_49_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_25_49_ladder_2;
        _1986 = frontier_phi_25_49_ladder_1;
        _1988 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1895);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_989 * _940) + _990) * _955) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_989 * _942) + _990) * _955) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_989 * _943) + _990) * _955) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    vec4 _2022 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_876, _877));
    float _2024 = _2022.w;
    float _2036 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2024);
    float _2037 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2024);
    float _2038 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2024);
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_915 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _955 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2081 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2085 = _2044 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_776, _777, _778));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_776, _777, _778));
    float _4394 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4405 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2061].x * _2067) * _2106) + (((cbLight._m0[_2071].x * _2036) * _2081) * _2104);
    float _2114 = ((_2067 * cbLight._m0[_2061].y) * _2106) + (((cbLight._m0[_2071].y * _2037) * _2081) * _2104);
    float _2115 = ((_2067 * cbLight._m0[_2061].z) * _2106) + (((cbLight._m0[_2071].z * _2038) * _2081) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2121)
    {
        _2132 = _2113;
        _2134 = _2114;
        _2136 = _2115;
    }
    else
    {
        uint _2140 = _2044 + 6u;
        float _2156 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4416 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2159 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2132 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _2113;
        _2134 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _2114;
        _2136 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _2115;
    }
    bool _2139 = _2119.y == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2139)
    {
        _2177 = _2132;
        _2179 = _2134;
        _2181 = _2136;
    }
    else
    {
        uint _2350 = _2044 + 7u;
        float _2366 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_776, _777, _778)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4432 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2369 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2177 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2132;
        _2179 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2134;
        _2181 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2136;
    }
    uint _2184 = _2044 + 8u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _779) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2044].x + _856;
    float _2200 = cbLight._m0[_2044].y + _857;
    float _2201 = cbLight._m0[_2044].z + _858;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2044].xyz));
    float _4448 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2213 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2214 = dot(vec3(_776, _777, _778), vec3(_2206, _2207, _2208));
    float _4470 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2206, _2207, _2208));
    float _4481 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2198 * _2198;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2235 = 0.959999978542327880859375 - _937;
    float _2237 = 0.959999978542327880859375 - _938;
    float _2238 = 0.959999978542327880859375 - _939;
    float _2245 = 1.0 - _2198;
    float _2256 = (0.5 / (((_2213 * ((_2212 * _2245) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2245) + _2198) * _2212))) * _2212;
    float _4492 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    uint _2272 = _2044 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _779) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2085].x + _856;
    float _2286 = cbLight._m0[_2085].y + _857;
    float _2287 = cbLight._m0[_2085].z + _858;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2085].xyz));
    float _4503 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2299 = dot(vec3(_776, _777, _778), vec3(_2292, _2293, _2294));
    float _4514 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2292, _2293, _2294));
    float _4525 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2325 = 1.0 - _2284;
    float _2335 = (0.5 / (((_2213 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2325) + _2284) * _2298))) * _2298;
    float _4536 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2347 = (((((_2318 * _2235) + _940) * cbLight._m0[_2272].x) * _2337) * _2067) + ((((cbLight._m0[_2184].x * _2036) * ((_2234 * _2235) + _940)) * _2258) * _2081);
    float _2348 = (((((_2318 * _2237) + _942) * cbLight._m0[_2272].y) * _2337) * _2067) + ((((cbLight._m0[_2184].y * _2037) * ((_2234 * _2237) + _942)) * _2258) * _2081);
    float _2349 = (((((_2318 * _2238) + _943) * cbLight._m0[_2272].z) * _2337) * _2067) + ((((cbLight._m0[_2184].z * _2038) * ((_2234 * _2238) + _943)) * _2258) * _2081);
    float _2411;
    float _2413;
    float _2415;
    if (_2121)
    {
        _2411 = _2347;
        _2413 = _2348;
        _2415 = _2349;
    }
    else
    {
        uint _2417 = _2044 + 2u;
        uint _2421 = _2044 + 10u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _779) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _856;
        float _2438 = cbLight._m0[_2417].y + _857;
        float _2439 = cbLight._m0[_2417].z + _858;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2417].xyz));
        float _4547 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2451 = dot(vec3(_776, _777, _778), vec3(_2444, _2445, _2446));
        float _4558 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4569 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2213 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2477) + _2436) * _2450))) * _2450;
        float _4580 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2411 = (((((_2470 * _2235) + _940) * cbLight._m0[_2421].x) * _2489) * _2490) + _2347;
        _2413 = (((((_2470 * _2237) + _942) * cbLight._m0[_2421].y) * _2489) * _2490) + _2348;
        _2415 = (((((_2470 * _2238) + _943) * cbLight._m0[_2421].z) * _2489) * _2490) + _2349;
    }
    float _2525;
    float _2527;
    float _2529;
    if (_2139)
    {
        _2525 = _2411;
        _2527 = _2413;
        _2529 = _2415;
    }
    else
    {
        uint _2536 = _2044 + 3u;
        uint _2540 = _2044 + 11u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _779) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _856;
        float _2557 = cbLight._m0[_2536].y + _857;
        float _2558 = cbLight._m0[_2536].z + _858;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_776, _777, _778), vec3(cbLight._m0[_2536].xyz));
        float _4596 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2570 = dot(vec3(_776, _777, _778), vec3(_2563, _2564, _2565));
        float _4607 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4618 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2213 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2596) + _2555) * _2569))) * _2569;
        float _4629 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2525 = (((((_2589 * _2235) + _940) * cbLight._m0[_2540].x) * _2608) * _2609) + _2411;
        _2527 = (((((_2589 * _2237) + _942) * cbLight._m0[_2540].y) * _2608) * _2609) + _2413;
        _2529 = (((((_2589 * _2238) + _943) * cbLight._m0[_2540].z) * _2608) * _2609) + _2415;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2042.y == 0u)
    {
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2684;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2684;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2684;
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _877) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _876) / _2700)));
        float _2721 = (log2(_2687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3054)
                {
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3053;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3044 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2685;
                        float _3250 = _3209.y - _2686;
                        float _3251 = _3209.z - _2687;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_896, _899, _902), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4655 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2685;
                        float _3285 = (-0.0) - _2686;
                        float _3286 = (-0.0) - _2687;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _971;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_896, _899, _902), vec3(_3291, _3292, _3293));
                        float _4671 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3326 = dot(vec3(_896, _899, _902), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4682 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4693 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4704 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3113 = (_3280 * _3228.x) + _3186;
                        _3114 = (_3280 * _3228.y) + _3187;
                        _3115 = (_3280 * _3228.z) + _3188;
                        _3110 = (_3361 * _3245.x) + _3183;
                        _3111 = (_3361 * _3245.y) + _3184;
                        _3112 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2878 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2878;
                    _3039 = _2880;
                    _3040 = _2882;
                    _3041 = _2884;
                    _3042 = _2886;
                    _3043 = _2888;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2894) & _2731) == 0u)
        {
            _3006 = _2877;
            _3008 = _2879;
            _3010 = _2881;
            _3012 = _2883;
            _3014 = _2885;
            _3016 = _2887;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
            float _3032 = _3031 * _2685;
            float _3033 = _3031 * _2686;
            float _3034 = _3031 * _2687;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3166 = _2877;
                float _3167 = _2879;
                float _3168 = _2881;
                float _3169 = _2883;
                float _3170 = _2885;
                float _3171 = _2887;
                uint _3172 = _2894;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3182)
                    {
                        frontier_phi_77_pred = _3171;
                        frontier_phi_77_pred_1 = _3170;
                        frontier_phi_77_pred_2 = _3169;
                        frontier_phi_77_pred_3 = _3168;
                        frontier_phi_77_pred_4 = _3167;
                        frontier_phi_77_pred_5 = _3166;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        uint _3394 = _3181;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3525;
                        bool _3526;
                        for (;;)
                        {
                            uint _3405 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3481 = (_3405 * 40u) + 24u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3500 = (_3405 * 40u) + 28u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3525 = fma(_2687, _3513.z, fma(_2686, _3513.y, _3513.x * _2685)) + _3513.w;
                            _3526 = !((fma(_2687, _3494.z, fma(_2686, _3494.y, _3494.x * _2685)) + _3494.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3526)
                            {
                                float _3553 = _3420.x - _2685;
                                float _3554 = _3420.y - _2686;
                                float _3555 = _3420.z - _2687;
                                float _3556 = dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555));
                                float _3559 = inversesqrt(_3556);
                                float _3560 = _3559 * _3553;
                                float _3561 = _3559 * _3554;
                                float _3562 = _3559 * _3555;
                                float _3566 = 1.0 - (_3556 / (_3421 * _3421));
                                float _4715 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3571 = sqrt(_3556) * _3436.w;
                                float _3573 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                                float _3574 = _3573 * _3573;
                                float _3577 = ((1.0 - _3574) * dot(vec3(_3560, _3561, _3562), vec3(_896, _899, _902))) + _3574;
                                float _3580 = _3571 * _3571;
                                float _3584 = (fma(_2687, _3463.z, fma(_2686, _3463.y, _3463.x * _2685)) + _3463.w) / _3525;
                                float _3585 = (fma(_2687, _3478.z, fma(_2686, _3478.y, _3478.x * _2685)) + _3478.w) / _3525;
                                float _3589 = 1.0 - dot(vec2(_3584, _3585), vec2(_3584, _3585));
                                float _4731 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3591 = _3590 * (((isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0))) * _3567) / ((_3580 * 0.699999988079071044921875) + 1.0));
                                float _3603 = exp2(log2(1.0 / ((_3580 * 3.5) + 5.0)) * 0.25);
                                float _3604 = 1.0 - _971;
                                float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                                float _3612 = _3611 * _3611;
                                float _3613 = _3612 * _3612;
                                float _3614 = _3560 - _3032;
                                float _3615 = _3561 - _3033;
                                float _3616 = _3562 - _3034;
                                float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                                float _3624 = dot(vec3(_896, _899, _902), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4742 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3628 = dot(vec3(_896, _899, _902), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                                float _4753 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                                float _3636 = _3573 * _3612;
                                float _3637 = _3636 * _3636;
                                float _3643 = ((1.0 - _3637) * dot(vec3(_896, _899, _902), vec3(_3560, _3561, _3562))) + _3637;
                                float _4764 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3645 = 1.0 - _3612;
                                float _3655 = (0.5 / (((_3644 * ((_3627 * _3645) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3612) * _3627))) * _3644;
                                float _4775 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3665 = (_3590 * _3567) * (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3635 * _3635) * ((_3580 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3591 * _3436.y;
                                frontier_phi_83_pred_1 = _3591 * _3436.x;
                                frontier_phi_83_pred_2 = _3665 * _3448.z;
                                frontier_phi_83_pred_3 = _3665 * _3448.y;
                                frontier_phi_83_pred_4 = _3665 * _3448.x;
                                frontier_phi_83_pred_5 = _3591 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3673 = frontier_phi_83_pred;
                            _3672 = frontier_phi_83_pred_1;
                            _3671 = frontier_phi_83_pred_2;
                            _3670 = frontier_phi_83_pred_3;
                            _3669 = frontier_phi_83_pred_4;
                            _3674 = frontier_phi_83_pred_5;
                            _3378 = _3672 + _3391;
                            _3379 = _3673 + _3392;
                            _3380 = _3674 + _3393;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    _3017 = frontier_phi_77_pred;
                    _3015 = frontier_phi_77_pred_1;
                    _3013 = frontier_phi_77_pred_2;
                    _3011 = frontier_phi_77_pred_3;
                    _3009 = frontier_phi_77_pred_4;
                    _3007 = frontier_phi_77_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3007;
                        _3167 = _3009;
                        _3168 = _3011;
                        _3169 = _3013;
                        _3170 = _3015;
                        _3171 = _3017;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3011;
                frontier_phi_58_59_ladder_1 = _3017;
                frontier_phi_58_59_ladder_2 = _3015;
                frontier_phi_58_59_ladder_3 = _3013;
                frontier_phi_58_59_ladder_4 = _3009;
                frontier_phi_58_59_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_58_59_ladder = _2881;
                frontier_phi_58_59_ladder_1 = _2887;
                frontier_phi_58_59_ladder_2 = _2885;
                frontier_phi_58_59_ladder_3 = _2883;
                frontier_phi_58_59_ladder_4 = _2879;
                frontier_phi_58_59_ladder_5 = _2877;
            }
            _3006 = frontier_phi_58_59_ladder_5;
            _3008 = frontier_phi_58_59_ladder_4;
            _3010 = frontier_phi_58_59_ladder;
            _3012 = frontier_phi_58_59_ladder_3;
            _3014 = frontier_phi_58_59_ladder_2;
            _3016 = frontier_phi_58_59_ladder_1;
        }
        float _3021 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _2744 = (_3021 * _3012) + _2177;
        _2746 = (_3021 * _3014) + _2179;
        _2748 = (_3021 * _3016) + _2181;
        _2750 = ((_3006 * _940) * _3021) + _2525;
        _2752 = ((_3008 * _942) * _3021) + _2527;
        _2754 = ((_3010 * _943) * _3021) + _2529;
    }
    else
    {
        _2744 = _2177;
        _2746 = _2179;
        _2748 = _2181;
        _2750 = _2525;
        _2752 = _2527;
        _2754 = _2529;
    }
    uint _2760 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _2766 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2772 = (((((_2766 * cbMtdParam._m0[14u].x) * _661.x) * _684) * _762) * (((1.0 - _737) * cbMtdParam._m0[20u].w) + _737)) * cbInstanceData._m0[_2760].x;
    float _2778 = (((((_2766 * cbMtdParam._m0[14u].y) * _661.y) * _684) * _762) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_2760].y;
    float _2784 = (((((_2766 * cbMtdParam._m0[14u].z) * _661.z) * _684) * _762) * (((1.0 - _741) * cbMtdParam._m0[20u].w) + _741)) * cbInstanceData._m0[_2760].z;
    float _4791 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4802 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4813 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2801 = (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2744 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _955))) + ((_2750 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1795)) * cbPerFrame._m0[3u].x)) + _2772;
    float _2803 = (_2778 + ((_2752 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1795)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2746 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _955)));
    float _2805 = (_2784 + ((_2754 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1795)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2748 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _955)));
    float _2806 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2807 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2808 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2814 = cbMtdParam._m0[2u].x * _2772;
    float _2815 = cbMtdParam._m0[2u].y * _2778;
    float _2816 = cbMtdParam._m0[2u].z * _2784;
    float _4839 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2818 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    uint _2819 = _915 + 6u;
    float _2827 = _876 / cbSceneParam._m0[86u].x;
    float _2828 = _877 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _2903 = _2902 / _799;
        float _2914 = _2903 * _849;
        float _2915 = _850 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2917 = _2903 * _851;
        float _2919 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2920 = _2919 + cbSceneParam._m0[79u].w;
        float _2921 = cbSceneParam._m0[79u].w - _2915;
        float _2927 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2917 * _2917));
        float _2930 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2927;
        float _2935 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2916 - _2919) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2920 > 0.0) ? exp2(_2935 * _2920) : (2.0 - exp2(_2937 * _2920))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2930;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : max(_2920, _2921));
            float _3069 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : min(_2920, _2921));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3123 = ((abs(_2927 / _2916) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2935 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2935 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2937 * _3078) - exp2(_2937 * _3079)) * _3067))) + (_2930 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2847);
        _2939 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2941 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2943 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2945 = _3134 * _2847;
    }
    else
    {
        _2939 = _2844;
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
    }
    bool _3161;
    vec4 _2955;
    vec4 _2977;
    float _2979;
    float _2983;
    float _2984;
    float _2985;
    float _2988;
    float _2991;
    float _2994;
    float _2995;
    bool _3005;
    for (;;)
    {
        _2955 = cbMatDynParam._m0[0u];
        float _2957 = roundEven(_2955.y);
        bool _2958 = _2957 == 3.0;
        float _2959 = log2(_2945);
        float _2963 = exp2(_2959 * cbSceneParam._m0[78u].x);
        float _2964 = exp2(_2959 * cbSceneParam._m0[78u].y);
        float _2965 = exp2(_2959 * cbSceneParam._m0[78u].z);
        float _2966 = _2963 * _2806;
        float _2967 = _2964 * _2807;
        float _2968 = _2965 * _2808;
        float _2975 = _865 + (-0.5);
        _2977 = cbMtdParam._m0[1u];
        _2979 = _2977.y * _2975;
        float _2982 = (_2957 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2983 = _2982 * (_2958 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2939)));
        _2984 = _2982 * (_2958 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2941)));
        _2985 = _2982 * (_2958 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = ((_2814 * _2818) * _2963) * _2982;
        _2991 = ((_2815 * _2818) * _2964) * _2982;
        _2994 = ((_2816 * _2818) * _2965) * _2982;
        _2995 = _2975 * 0.999000012874603271484375;
        _3005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3005)
        {
            if ((cbInstanceData._m0[_915 + 7u].x + _2995) < 0.5)
            {
                _3161 = true;
                break;
            }
        }
        uint _3102 = _916 + uint(_2955.w);
        if ((cbInstanceData._m0[_3102].w < 1.0) && ((cbInstanceData._m0[_3102].w + _2995) < 0.5))
        {
            _3161 = true;
            break;
        }
        if ((_2979 + 1.0) < _2977.x)
        {
            _3161 = true;
            break;
        }
        _3161 = false;
        break;
    }
    float _3366;
    if (_3161)
    {
        discard_state = true;
        _3366 = 0.0;
    }
    else
    {
        _3366 = cbInstanceData._m0[_2819].w;
    }
    SV_Target.x = _2983;
    SV_Target.y = _2984;
    SV_Target.z = _2985;
    SV_Target.w = _3366;
    SV_Target_1.x = _2988;
    SV_Target_1.y = _2991;
    SV_Target_1.z = _2994;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
    discard_exit();
}


