#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1381;
float _3816;
float _3817;
float _3818;
float _3819;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _3828 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3839 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3850 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401;
    vec4 _455 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _470 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _490 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _472) * _351) + _472;
    float _507 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _490) * _392) + _490;
    float _524 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _507) * _433) + _507;
    vec4 _537 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    vec4 _553 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _564 = ((_553.x - _539) * _351) + _539;
    float _565 = ((_553.y - _540) * _351) + _540;
    float _566 = ((_553.z - _541) * _351) + _541;
    vec4 _579 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _590 = ((_579.x - _564) * _392) + _564;
    float _591 = ((_579.y - _565) * _392) + _565;
    float _592 = ((_579.z - _566) * _392) + _566;
    vec4 _605 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _618 = ((_605.z - _592) * _433) + _592;
    float _621 = ((((_605.x - _590) * _433) + _590) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _591) * _433) + _591) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _3861 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _661 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _675 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3872 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _684 = (((_676 * _676) * (3.0 - (_676 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _692 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _700 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3883 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _705 = (_701 * _701) * (3.0 - (_701 * 2.0));
    float _706 = _705 * cbMtdParam._m0[22u].x;
    float _707 = _705 * cbMtdParam._m0[22u].y;
    float _708 = sin(_692);
    float _709 = cos(_692);
    float _710 = TEXCOORD.z - _706;
    float _711 = TEXCOORD.w - _707;
    vec4 _731 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_706 + fma(_711, (-0.0) - _708, _710 * _709))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_711, _709, _710 * _708) + _707)) + cbTextureTilingScale._m0[2u].w));
    float _737 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _731.x;
    float _739 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _731.y;
    float _741 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _731.z;
    float _761 = (TEXCOORD_5.x - (((_455.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3894 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    vec4 _775 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _785 = (((_775.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _621;
    float _786 = (((_775.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _623;
    float _789 = fma(_629, _237 * NORMAL.x, fma(_786, _244 * TANGENT.x, (_230 * _222) * _785));
    float _792 = fma(_629, _237 * NORMAL.y, fma(_786, _244 * TANGENT.y, (_230 * _223) * _785));
    float _795 = fma(_629, _237 * NORMAL.z, fma(_786, _244 * TANGENT.z, (_230 * _224) * _785));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3905 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _803 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3927 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3938 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3949 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _807 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _873 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _863);
    float _874 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _863);
    float _875 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _863);
    float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
    float _880 = _873 * _879;
    float _881 = _874 * _879;
    float _882 = _875 * _879;
    vec4 _887 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _889 = _887.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1061 = sqrt(((_873 * _873) + (_874 * _874)) + (_875 * _875));
        float _1067 = (cbMatDynParam._m0[5u].x * _1061) + cbMatDynParam._m0[5u].y;
        float _3960 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1072 = (cbMatDynParam._m0[5u].z * _1061) + cbMatDynParam._m0[5u].w;
        float _3971 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) - _1068)) + _1068) < ((_889 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _923 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _926 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _939 = uint(roundEven(NORMAL.w)) * 13u;
    uint _940 = _939 + 9u;
    uint _941 = _940 + uint(cbMatDynParam._m0[0u].w);
    float _947 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_941].x;
    float _948 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_941].y;
    float _949 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_941].z;
    float _3982 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _953 = 1.0 - _807;
    float _954 = _950 * _953;
    float _955 = _951 * _953;
    float _956 = _952 * _953;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _807;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _807;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _807;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _979 = _976.x * TEXCOORD_5.w;
    float _980 = dot(vec3(_800, _801, _802), vec3(_880, _881, _882));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _800) - _880;
    float _988 = (_983 * _801) - _881;
    float _989 = (_983 * _802) - _882;
    float _993 = abs(dot(vec3(_880, _881, _882), vec3(_800, _801, _802)));
    float _4015 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_803);
    float _1007 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1013 = (1.0 - _1007) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1014 = _1007 * _995;
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1109 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1113 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1138 = _1042 + _800;
        float _1139 = _1046 + _801;
        float _1140 = _1050 + _802;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_800, _801, _802), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4063 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_800, _801, _802), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4096 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_800, _801, _802), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4129 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1428 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1432 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1455 = _1042 + _800;
        float _1456 = _1046 + _801;
        float _1457 = _1050 + _802;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_800, _801, _802), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4192 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_800, _801, _802), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4225 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_800, _801, _802), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4258 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = _1381;
        _1702 = _1381;
        _1703 = _1381;
        _1704 = _1381;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1393)) + _1393;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1394)) + _1394;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1395)) + _1395;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _987 * 0.5;
    float _1762 = _988 * 0.5;
    float _1763 = _989 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1891 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1894 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1922 = frontier_phi_17_15_ladder;
        }
        float _2125;
        if (_1891 > 0.0)
        {
            _2125 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2125 = frontier_phi_26_22_ladder;
        }
        float _2379;
        if (_1894 > 0.0)
        {
            _2379 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2379 = frontier_phi_38_33_ladder;
        }
        float _2381 = isnan(_2125) ? _1922 : (isnan(_1922) ? _2125 : min(_1922, _2125));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1888) + _1877;
        float _2387 = (_2382 * _1891) + _1881;
        float _2388 = (_2382 * _1894) + _1885;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_16_38_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_16_38_ladder_2;
        _1912 = frontier_phi_16_38_ladder_1;
        _1914 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1830);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1986 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1989 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2130;
        if (_1983 > 0.0)
        {
            _2130 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2130 = frontier_phi_28_24_ladder;
        }
        float _2406;
        if (_1986 > 0.0)
        {
            _2406 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2406 = frontier_phi_40_35_ladder;
        }
        float _2619;
        if (_1989 > 0.0)
        {
            _2619 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2619 = frontier_phi_49_46_ladder;
        }
        float _2621 = isnan(_2406) ? _2130 : (isnan(_2130) ? _2406 : min(_2130, _2406));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1983) + _1972;
        float _2627 = (_2622 * _1986) + _1976;
        float _2628 = (_2622 * _1989) + _1980;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_25_49_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_49_ladder_2;
        _2010 = frontier_phi_25_49_ladder_1;
        _2012 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1919);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2025 = (((_1013 * _964) + _1014) * _979) * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2027 = (((_1013 * _966) + _1014) * _979) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1013 * _967) + _1014) * _979) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    uvec4 _2048 = floatBitsToUint(cbInstanceData._m0[_939 + 5u]);
    uint _2050 = _2048.x * 14u;
    uint _2051 = _2050 + 13u;
    float _2058 = _979 + (-1.0);
    float _2063 = (cbLight._m0[_2051].x * _2058) + 1.0;
    float _2064 = (cbLight._m0[_2051].y * _2058) + 1.0;
    float _2065 = (cbLight._m0[_2051].z * _2058) + 1.0;
    float _2066 = (cbLight._m0[_2051].w * _2058) + 1.0;
    uint _2067 = _2050 + 5u;
    float _2073 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2077 = _2050 + 4u;
    float _2084 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
    uint _2088 = _2050 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_800, _801, _802));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_800, _801, _802));
    float _4394 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4405 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2067].x * _2073) * _2109) + ((cbLight._m0[_2077].x * _2084) * _2107);
    float _2117 = ((_2073 * cbLight._m0[_2067].y) * _2109) + ((_2084 * cbLight._m0[_2077].y) * _2107);
    float _2118 = ((_2073 * cbLight._m0[_2067].z) * _2109) + ((_2084 * cbLight._m0[_2077].z) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2050 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2050 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2050 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4416 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2162 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2350 = _2050 + 7u;
        float _2366 = (dot(vec3(cbLight._m0[_2050 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4432 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2369 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2180 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2135;
        _2182 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2137;
        _2184 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2139;
    }
    uint _2187 = _2050 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _803) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2050].x + _880;
    float _2203 = cbLight._m0[_2050].y + _881;
    float _2204 = cbLight._m0[_2050].z + _882;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2050].xyz));
    float _4448 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2216 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2217 = dot(vec3(_800, _801, _802), vec3(_2209, _2210, _2211));
    float _4470 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2209, _2210, _2211));
    float _4481 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2238 = 0.959999978542327880859375 - _961;
    float _2240 = 0.959999978542327880859375 - _962;
    float _2241 = 0.959999978542327880859375 - _963;
    float _2248 = 1.0 - _2201;
    float _2259 = (0.5 / (((_2216 * ((_2215 * _2248) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2248) + _2201) * _2215))) * _2215;
    float _4492 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2272 = _2050 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _803) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2088].x + _880;
    float _2286 = cbLight._m0[_2088].y + _881;
    float _2287 = cbLight._m0[_2088].z + _882;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2088].xyz));
    float _4503 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2299 = dot(vec3(_800, _801, _802), vec3(_2292, _2293, _2294));
    float _4514 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2292, _2293, _2294));
    float _4525 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
    float _2325 = 1.0 - _2284;
    float _2335 = (0.5 / (((_2216 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2325) + _2284) * _2298))) * _2298;
    float _4536 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2347 = (((((_2318 * _2238) + _964) * cbLight._m0[_2272].x) * _2337) * _2073) + (((((_2237 * _2238) + _964) * cbLight._m0[_2187].x) * _2261) * _2084);
    float _2348 = (((((_2318 * _2240) + _966) * cbLight._m0[_2272].y) * _2337) * _2073) + (((((_2237 * _2240) + _966) * cbLight._m0[_2187].y) * _2261) * _2084);
    float _2349 = (((((_2318 * _2241) + _967) * cbLight._m0[_2272].z) * _2337) * _2073) + (((((_2237 * _2241) + _967) * cbLight._m0[_2187].z) * _2261) * _2084);
    float _2411;
    float _2413;
    float _2415;
    if (_2124)
    {
        _2411 = _2347;
        _2413 = _2348;
        _2415 = _2349;
    }
    else
    {
        uint _2417 = _2050 + 2u;
        uint _2421 = _2050 + 10u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _803) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _880;
        float _2438 = cbLight._m0[_2417].y + _881;
        float _2439 = cbLight._m0[_2417].z + _882;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2417].xyz));
        float _4547 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2451 = dot(vec3(_800, _801, _802), vec3(_2444, _2445, _2446));
        float _4558 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4569 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2216 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2477) + _2436) * _2450))) * _2450;
        float _4580 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
        _2411 = (((((_2470 * _2238) + _964) * cbLight._m0[_2421].x) * _2489) * _2490) + _2347;
        _2413 = (((((_2470 * _2240) + _966) * cbLight._m0[_2421].y) * _2489) * _2490) + _2348;
        _2415 = (((((_2470 * _2241) + _967) * cbLight._m0[_2421].z) * _2489) * _2490) + _2349;
    }
    float _2525;
    float _2527;
    float _2529;
    if (_2142)
    {
        _2525 = _2411;
        _2527 = _2413;
        _2529 = _2415;
    }
    else
    {
        uint _2536 = _2050 + 3u;
        uint _2540 = _2050 + 11u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _803) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _880;
        float _2557 = cbLight._m0[_2536].y + _881;
        float _2558 = cbLight._m0[_2536].z + _882;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2536].xyz));
        float _4596 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2570 = dot(vec3(_800, _801, _802), vec3(_2563, _2564, _2565));
        float _4607 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4618 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2216 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2596) + _2555) * _2569))) * _2569;
        float _4629 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2525 = (((((_2589 * _2238) + _964) * cbLight._m0[_2540].x) * _2608) * _2609) + _2411;
        _2527 = (((((_2589 * _2240) + _966) * cbLight._m0[_2540].y) * _2608) * _2609) + _2413;
        _2529 = (((((_2589 * _2241) + _967) * cbLight._m0[_2540].z) * _2608) * _2609) + _2415;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2048.y == 0u)
    {
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2684;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2684;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2684;
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2700)));
        float _2721 = (log2(_2687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
        }
        else
        {
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3054)
                {
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3053;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3044 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2685;
                        float _3250 = _3209.y - _2686;
                        float _3251 = _3209.z - _2687;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_920, _923, _926), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4655 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2685;
                        float _3285 = (-0.0) - _2686;
                        float _3286 = (-0.0) - _2687;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _995;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_920, _923, _926), vec3(_3291, _3292, _3293));
                        float _4671 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3326 = dot(vec3(_920, _923, _926), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4682 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4693 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4704 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3113 = (_3280 * _3228.x) + _3186;
                        _3114 = (_3280 * _3228.y) + _3187;
                        _3115 = (_3280 * _3228.z) + _3188;
                        _3110 = (_3361 * _3245.x) + _3183;
                        _3111 = (_3361 * _3245.y) + _3184;
                        _3112 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2878 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2878;
                    _3039 = _2880;
                    _3040 = _2882;
                    _3041 = _2884;
                    _3042 = _2886;
                    _3043 = _2888;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
        }
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.z;
        uint _2894 = (_2892 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2894) & _2731) == 0u)
        {
            _3006 = _2877;
            _3008 = _2879;
            _3010 = _2881;
            _3012 = _2883;
            _3014 = _2885;
            _3016 = _2887;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
            float _3032 = _3031 * _2685;
            float _3033 = _3031 * _2686;
            float _3034 = _3031 * _2687;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2894 < ((_2892 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3166 = _2877;
                float _3167 = _2879;
                float _3168 = _2881;
                float _3169 = _2883;
                float _3170 = _2885;
                float _3171 = _2887;
                uint _3172 = _2894;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3182)
                    {
                        frontier_phi_77_pred = _3171;
                        frontier_phi_77_pred_1 = _3170;
                        frontier_phi_77_pred_2 = _3169;
                        frontier_phi_77_pred_3 = _3168;
                        frontier_phi_77_pred_4 = _3167;
                        frontier_phi_77_pred_5 = _3166;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        uint _3394 = _3181;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3525;
                        bool _3526;
                        for (;;)
                        {
                            uint _3405 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3481 = (_3405 * 40u) + 24u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3500 = (_3405 * 40u) + 28u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3525 = fma(_2687, _3513.z, fma(_2686, _3513.y, _3513.x * _2685)) + _3513.w;
                            _3526 = !((fma(_2687, _3494.z, fma(_2686, _3494.y, _3494.x * _2685)) + _3494.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3526)
                            {
                                float _3553 = _3420.x - _2685;
                                float _3554 = _3420.y - _2686;
                                float _3555 = _3420.z - _2687;
                                float _3556 = dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555));
                                float _3559 = inversesqrt(_3556);
                                float _3560 = _3559 * _3553;
                                float _3561 = _3559 * _3554;
                                float _3562 = _3559 * _3555;
                                float _3566 = 1.0 - (_3556 / (_3421 * _3421));
                                float _4715 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3571 = sqrt(_3556) * _3436.w;
                                float _3573 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                                float _3574 = _3573 * _3573;
                                float _3577 = ((1.0 - _3574) * dot(vec3(_3560, _3561, _3562), vec3(_920, _923, _926))) + _3574;
                                float _3580 = _3571 * _3571;
                                float _3584 = (fma(_2687, _3463.z, fma(_2686, _3463.y, _3463.x * _2685)) + _3463.w) / _3525;
                                float _3585 = (fma(_2687, _3478.z, fma(_2686, _3478.y, _3478.x * _2685)) + _3478.w) / _3525;
                                float _3589 = 1.0 - dot(vec2(_3584, _3585), vec2(_3584, _3585));
                                float _4731 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3591 = _3590 * (((isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0))) * _3567) / ((_3580 * 0.699999988079071044921875) + 1.0));
                                float _3603 = exp2(log2(1.0 / ((_3580 * 3.5) + 5.0)) * 0.25);
                                float _3604 = 1.0 - _995;
                                float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                                float _3612 = _3611 * _3611;
                                float _3613 = _3612 * _3612;
                                float _3614 = _3560 - _3032;
                                float _3615 = _3561 - _3033;
                                float _3616 = _3562 - _3034;
                                float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                                float _3624 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4742 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3628 = dot(vec3(_920, _923, _926), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                                float _4753 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                                float _3636 = _3573 * _3612;
                                float _3637 = _3636 * _3636;
                                float _3643 = ((1.0 - _3637) * dot(vec3(_920, _923, _926), vec3(_3560, _3561, _3562))) + _3637;
                                float _4764 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3645 = 1.0 - _3612;
                                float _3655 = (0.5 / (((_3644 * ((_3627 * _3645) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3612) * _3627))) * _3644;
                                float _4775 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3665 = (_3590 * _3567) * (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3635 * _3635) * ((_3580 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3591 * _3436.y;
                                frontier_phi_83_pred_1 = _3591 * _3436.x;
                                frontier_phi_83_pred_2 = _3665 * _3448.z;
                                frontier_phi_83_pred_3 = _3665 * _3448.y;
                                frontier_phi_83_pred_4 = _3665 * _3448.x;
                                frontier_phi_83_pred_5 = _3591 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3673 = frontier_phi_83_pred;
                            _3672 = frontier_phi_83_pred_1;
                            _3671 = frontier_phi_83_pred_2;
                            _3670 = frontier_phi_83_pred_3;
                            _3669 = frontier_phi_83_pred_4;
                            _3674 = frontier_phi_83_pred_5;
                            _3378 = _3672 + _3391;
                            _3379 = _3673 + _3392;
                            _3380 = _3674 + _3393;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    _3017 = frontier_phi_77_pred;
                    _3015 = frontier_phi_77_pred_1;
                    _3013 = frontier_phi_77_pred_2;
                    _3011 = frontier_phi_77_pred_3;
                    _3009 = frontier_phi_77_pred_4;
                    _3007 = frontier_phi_77_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3007;
                        _3167 = _3009;
                        _3168 = _3011;
                        _3169 = _3013;
                        _3170 = _3015;
                        _3171 = _3017;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3011;
                frontier_phi_58_59_ladder_1 = _3017;
                frontier_phi_58_59_ladder_2 = _3015;
                frontier_phi_58_59_ladder_3 = _3013;
                frontier_phi_58_59_ladder_4 = _3009;
                frontier_phi_58_59_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_58_59_ladder = _2881;
                frontier_phi_58_59_ladder_1 = _2887;
                frontier_phi_58_59_ladder_2 = _2885;
                frontier_phi_58_59_ladder_3 = _2883;
                frontier_phi_58_59_ladder_4 = _2879;
                frontier_phi_58_59_ladder_5 = _2877;
            }
            _3006 = frontier_phi_58_59_ladder_5;
            _3008 = frontier_phi_58_59_ladder_4;
            _3010 = frontier_phi_58_59_ladder;
            _3012 = frontier_phi_58_59_ladder_3;
            _3014 = frontier_phi_58_59_ladder_2;
            _3016 = frontier_phi_58_59_ladder_1;
        }
        float _3021 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2744 = (_3021 * _3012) + _2180;
        _2746 = (_3021 * _3014) + _2182;
        _2748 = (_3021 * _3016) + _2184;
        _2750 = ((_3006 * _964) * _3021) + _2525;
        _2752 = ((_3008 * _966) * _3021) + _2527;
        _2754 = ((_3010 * _967) * _3021) + _2529;
    }
    else
    {
        _2744 = _2180;
        _2746 = _2182;
        _2748 = _2184;
        _2750 = _2525;
        _2752 = _2527;
        _2754 = _2529;
    }
    uint _2760 = _940 + uint(cbMatDynParam._m0[0u].w);
    float _2766 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2772 = (((((_2766 * cbMtdParam._m0[14u].x) * _661.x) * _684) * _762) * (((1.0 - _737) * cbMtdParam._m0[20u].w) + _737)) * cbInstanceData._m0[_2760].x;
    float _2778 = (((((_2766 * cbMtdParam._m0[14u].y) * _661.y) * _684) * _762) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_2760].y;
    float _2784 = (((((_2766 * cbMtdParam._m0[14u].z) * _661.z) * _684) * _762) * (((1.0 - _741) * cbMtdParam._m0[20u].w) + _741)) * cbInstanceData._m0[_2760].z;
    float _4791 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4802 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4813 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2801 = (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2744 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _979))) + ((_2750 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1819)) * cbPerFrame._m0[3u].x)) + _2772;
    float _2803 = (_2778 + ((_2752 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1819)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2746 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _979)));
    float _2805 = (_2784 + ((_2754 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1819)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2748 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _979)));
    float _2806 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2807 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2808 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2814 = cbMtdParam._m0[2u].x * _2772;
    float _2815 = cbMtdParam._m0[2u].y * _2778;
    float _2816 = cbMtdParam._m0[2u].z * _2784;
    float _4839 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2818 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    uint _2819 = _939 + 6u;
    float _2827 = _900 / cbSceneParam._m0[86u].x;
    float _2828 = _901 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2902 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2903 = _2902 / _823;
        float _2914 = _2903 * _873;
        float _2915 = _874 * _2903;
        float _2916 = (-0.0) - _2915;
        float _2917 = _2903 * _875;
        float _2919 = (cbSceneParam._m0[77u].w * _2916) / _2902;
        float _2920 = _2919 + cbSceneParam._m0[79u].w;
        float _2921 = cbSceneParam._m0[79u].w - _2915;
        float _2927 = sqrt(((_2914 * _2914) + (_2915 * _2915)) + (_2917 * _2917));
        float _2930 = (1.0 - (cbSceneParam._m0[77u].w / _2902)) * _2927;
        float _2935 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2916 - _2919) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2920 > 0.0) ? exp2(_2935 * _2920) : (2.0 - exp2(_2937 * _2920))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2930;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : max(_2920, _2921));
            float _3069 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : min(_2920, _2921));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3123 = ((abs(_2927 / _2916) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2935 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2935 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2937 * _3078) - exp2(_2937 * _3079)) * _3067))) + (_2930 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2847);
        _2939 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2941 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2943 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2945 = _3134 * _2847;
    }
    else
    {
        _2939 = _2844;
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
    }
    bool _3161;
    vec4 _2955;
    vec4 _2977;
    float _2979;
    float _2983;
    float _2984;
    float _2985;
    float _2988;
    float _2991;
    float _2994;
    float _2995;
    bool _3005;
    for (;;)
    {
        _2955 = cbMatDynParam._m0[0u];
        float _2957 = roundEven(_2955.y);
        bool _2958 = _2957 == 3.0;
        float _2959 = log2(_2945);
        float _2963 = exp2(_2959 * cbSceneParam._m0[78u].x);
        float _2964 = exp2(_2959 * cbSceneParam._m0[78u].y);
        float _2965 = exp2(_2959 * cbSceneParam._m0[78u].z);
        float _2966 = _2963 * _2806;
        float _2967 = _2964 * _2807;
        float _2968 = _2965 * _2808;
        float _2975 = _889 + (-0.5);
        _2977 = cbMtdParam._m0[1u];
        _2979 = _2977.y * _2975;
        float _2982 = (_2957 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2983 = _2982 * (_2958 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2939)));
        _2984 = _2982 * (_2958 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2941)));
        _2985 = _2982 * (_2958 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = ((_2814 * _2818) * _2963) * _2982;
        _2991 = ((_2815 * _2818) * _2964) * _2982;
        _2994 = ((_2816 * _2818) * _2965) * _2982;
        _2995 = _2975 * 0.999000012874603271484375;
        _3005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3005)
        {
            if ((cbInstanceData._m0[_939 + 7u].x + _2995) < 0.5)
            {
                _3161 = true;
                break;
            }
        }
        uint _3102 = _940 + uint(_2955.w);
        if ((cbInstanceData._m0[_3102].w < 1.0) && ((cbInstanceData._m0[_3102].w + _2995) < 0.5))
        {
            _3161 = true;
            break;
        }
        if ((_2979 + 1.0) < _2977.x)
        {
            _3161 = true;
            break;
        }
        _3161 = false;
        break;
    }
    float _3366;
    if (_3161)
    {
        discard_state = true;
        _3366 = 0.0;
    }
    else
    {
        _3366 = cbInstanceData._m0[_2819].w;
    }
    SV_Target.x = _2983;
    SV_Target.y = _2984;
    SV_Target.z = _2985;
    SV_Target.w = _3366;
    SV_Target_1.x = _2988;
    SV_Target_1.y = _2991;
    SV_Target_1.z = _2994;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
    discard_exit();
}


