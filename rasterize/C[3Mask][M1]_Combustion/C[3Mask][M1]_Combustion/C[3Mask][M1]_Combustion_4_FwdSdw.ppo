#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1374;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _352 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _342)) + 1.0;
    float _4038 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _360 = (_353 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _361 = (_353 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _362 = (_353 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4049 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4060 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    vec4 _463 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _471 = ((((((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _463.x;
    float _474 = ((((_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _463.y;
    float _477 = ((((_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _463.z;
    vec4 _490 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _524 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _507) * _353) + _507;
    float _541 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _524) * _394) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _541) * _435) + _541;
    vec4 _571 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    vec4 _587 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _598 = ((_587.x - _573) * _353) + _573;
    float _599 = ((_587.y - _574) * _353) + _574;
    float _600 = ((_587.z - _575) * _353) + _575;
    vec4 _613 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _624 = ((_613.x - _598) * _394) + _598;
    float _625 = ((_613.y - _599) * _394) + _599;
    float _626 = ((_613.z - _600) * _394) + _600;
    vec4 _639 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _652 = ((_639.z - _626) * _435) + _626;
    float _655 = ((((_639.x - _624) * _435) + _624) * 2.0) + (-1.0);
    float _657 = ((((_639.y - _625) * _435) + _625) * 2.0) + (-1.0);
    float _658 = dot(vec2(_655, _657), vec2(_655, _657));
    float _4071 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))));
    vec4 _695 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _709 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4082 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _718 = (((_710 * _710) * (3.0 - (_710 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _726 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _734 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4093 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _739 = (_735 * _735) * (3.0 - (_735 * 2.0));
    float _740 = _739 * cbMtdParam._m0[22u].x;
    float _741 = _739 * cbMtdParam._m0[22u].y;
    float _742 = sin(_726);
    float _743 = cos(_726);
    float _744 = TEXCOORD.z - _740;
    float _745 = TEXCOORD.w - _741;
    vec4 _765 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_740 + fma(_745, (-0.0) - _742, _744 * _743))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_745, _743, _744 * _742) + _741)) + cbTextureTilingScale._m0[2u].w));
    float _771 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _765.x;
    float _773 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _765.y;
    float _775 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _765.z;
    float _795 = (TEXCOORD_5.x - (((_490.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4104 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    vec4 _809 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _819 = (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _655;
    float _820 = (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _657;
    float _823 = fma(_663, _239 * NORMAL.x, fma(_820, _246 * TANGENT.x, (_232 * _224) * _819));
    float _826 = fma(_663, _239 * NORMAL.y, fma(_820, _246 * TANGENT.y, (_232 * _225) * _819));
    float _829 = fma(_663, _239 * NORMAL.z, fma(_820, _246 * TANGENT.z, (_232 * _226) * _819));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    float _834 = _833 * _823;
    float _835 = _833 * _826;
    float _836 = _833 * _829;
    float _4115 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _837 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4137 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4148 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4159 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _841 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_836, cbSceneParam._m0[5u].z, fma(_835, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _834));
    float _944 = fma(_836, cbSceneParam._m0[6u].z, fma(_835, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _834));
    float _947 = fma(_836, cbSceneParam._m0[7u].z, fma(_835, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _834));
    uint _960 = uint(roundEven(NORMAL.w)) * 13u;
    uint _961 = _960 + 9u;
    uint _962 = _961 + uint(cbMatDynParam._m0[0u].w);
    float _968 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_962].x;
    float _969 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_962].y;
    float _970 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_962].z;
    float _4170 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _974 = 1.0 - _841;
    float _975 = _971 * _974;
    float _976 = _972 * _974;
    float _977 = _973 * _974;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _841;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _841;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _841;
    float _985 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _1000 = _997.x * TEXCOORD_5.w;
    float _1001 = dot(vec3(_834, _835, _836), vec3(_914, _915, _916));
    float _1004 = _1001 * 2.0;
    float _1008 = (_1004 * _834) - _914;
    float _1009 = (_1004 * _835) - _915;
    float _1010 = (_1004 * _836) - _916;
    float _1014 = abs(dot(vec3(_914, _915, _916), vec3(_834, _835, _836)));
    float _4203 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1016 = sqrt(_837);
    float _1028 = exp2((_1016 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1016 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1016 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1016;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1102 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1106 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1131 = _1063 + _834;
        float _1132 = _1067 + _835;
        float _1133 = _1071 + _836;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_834, _835, _836), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4251 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_834, _835, _836), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4284 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_834, _835, _836), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4317 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1418 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1422 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1445 = _1063 + _834;
        float _1446 = _1067 + _835;
        float _1447 = _1071 + _836;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_834, _835, _836), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4380 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_834, _835, _836), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4413 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_834, _835, _836), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4446 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1374;
        _1684 = _1374;
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1387)) + _1387;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _1008 * 0.5;
    float _1752 = _1009 * 0.5;
    float _1753 = _1010 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _837);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_1010, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008));
        float _1881 = fma(_1010, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008));
        float _1884 = fma(_1010, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1912 = frontier_phi_14_12_ladder;
        }
        float _2083;
        if (_1881 > 0.0)
        {
            _2083 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2083 = frontier_phi_23_19_ladder;
        }
        float _2379;
        if (_1884 > 0.0)
        {
            _2379 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2379 = frontier_phi_35_30_ladder;
        }
        float _2381 = isnan(_2083) ? _1912 : (isnan(_1912) ? _2083 : min(_1912, _2083));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1878) + _1867;
        float _2387 = (_2382 * _1881) + _1871;
        float _2388 = (_2382 * _1884) + _1875;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_13_35_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_13_35_ladder_2;
        _1902 = frontier_phi_13_35_ladder_1;
        _1904 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1008, _1009, _1010), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _837);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1962 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1966 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _1970 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _1973 = fma(_1010, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008));
        float _1976 = fma(_1010, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008));
        float _1979 = fma(_1010, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008));
        float _2088;
        if (_1973 > 0.0)
        {
            _2088 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2088 = frontier_phi_25_21_ladder;
        }
        float _2406;
        if (_1976 > 0.0)
        {
            _2406 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2406 = frontier_phi_37_32_ladder;
        }
        float _2744;
        if (_1979 > 0.0)
        {
            _2744 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2744 = frontier_phi_47_44_ladder;
        }
        float _2746 = isnan(_2406) ? _2088 : (isnan(_2088) ? _2406 : min(_2088, _2406));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1973) + _1962;
        float _2752 = (_2747 * _1976) + _1966;
        float _2753 = (_2747 * _1979) + _1970;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_22_47_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _1998 = frontier_phi_22_47_ladder_2;
        _2000 = frontier_phi_22_47_ladder_1;
        _2002 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1008, _1009, _1010), _1909);
        _1998 = _1982.x * cbModelParam._m0[1u].z;
        _2000 = _1982.y * cbModelParam._m0[1u].z;
        _2002 = _1982.z * cbModelParam._m0[1u].z;
    }
    float _2015 = (((_1034 * _985) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1034 * _987) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1034 * _988) + _1035) * _1000) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2017, cbSceneParam._m0[89u].y, _2015 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2017, cbSceneParam._m0[90u].y, _2015 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2017, cbSceneParam._m0[91u].y, _2015 * cbSceneParam._m0[91u].x));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2075 = _2062 / _2074;
    float _2076 = _2066 / _2074;
    float _2077 = _2070 / _2074;
    float _2224;
    float _2225;
    float _2226;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2104 = ((uint(_2077 > cbSceneParam._m0[59u].y) + uint(_2077 > cbSceneParam._m0[59u].x)) + uint(_2077 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2105 = _2104 + 43u;
        uint _2113 = _2104 + 44u;
        uint _2121 = _2104 + 45u;
        uint _2129 = _2104 + 46u;
        float _2140 = fma(_2074, cbSceneParam._m0[_2105].w, fma(_2070, cbSceneParam._m0[_2105].z, fma(_2066, cbSceneParam._m0[_2105].y, _2062 * cbSceneParam._m0[_2105].x)));
        float _2144 = fma(_2074, cbSceneParam._m0[_2113].w, fma(_2070, cbSceneParam._m0[_2113].z, fma(_2066, cbSceneParam._m0[_2113].y, _2062 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2074, cbSceneParam._m0[_2129].w, fma(_2070, cbSceneParam._m0[_2129].z, fma(_2066, cbSceneParam._m0[_2129].y, _2062 * cbSceneParam._m0[_2129].x)));
        float _2157 = cbSceneParam._m0[33u].z * _2152;
        float _2159 = cbSceneParam._m0[33u].w * _2152;
        float _2162 = fma(_2074, cbSceneParam._m0[_2121].w, fma(_2070, cbSceneParam._m0[_2121].z, fma(_2066, cbSceneParam._m0[_2121].y, _2062 * cbSceneParam._m0[_2121].x))) / _2152;
        float _2210 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
        float _4572 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2217 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2140) / _2152, (_2159 + _2144) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2140) / _2152, (_2144 - _2157) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2157) / _2152, (_2144 - _2159) / _2152), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 - _2159) / _2152, (_2157 + _2144) / _2152), _2162), 0.0)).x), vec4(0.25)));
        _2224 = 1.0 - (_2217 * cbSceneParam._m0[34u].x);
        _2225 = 1.0 - (_2217 * cbSceneParam._m0[34u].y);
        _2226 = 1.0 - (_2217 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2224 = 1.0;
        _2225 = 1.0;
        _2226 = 1.0;
    }
    float _2290;
    float _2292;
    float _2294;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2278 = fma(_2074, cbSceneParam._m0[63u].w, fma(_2070, cbSceneParam._m0[63u].z, fma(_2066, cbSceneParam._m0[63u].y, _2062 * cbSceneParam._m0[63u].x)));
        float _2279 = fma(_2074, cbSceneParam._m0[60u].w, fma(_2070, cbSceneParam._m0[60u].z, fma(_2066, cbSceneParam._m0[60u].y, _2062 * cbSceneParam._m0[60u].x))) / _2278;
        float _2280 = fma(_2074, cbSceneParam._m0[61u].w, fma(_2070, cbSceneParam._m0[61u].z, fma(_2066, cbSceneParam._m0[61u].y, _2062 * cbSceneParam._m0[61u].x))) / _2278;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2279 >= cbSceneParam._m0[64u].x) && (_2280 >= cbSceneParam._m0[64u].y)) && (_2279 <= cbSceneParam._m0[64u].z)) && (_2280 <= cbSceneParam._m0[64u].w))
        {
            float _2419 = fma(_2074, cbSceneParam._m0[62u].w, fma(_2070, cbSceneParam._m0[62u].z, fma(_2066, cbSceneParam._m0[62u].y, _2062 * cbSceneParam._m0[62u].x))) / _2278;
            float _2423 = isnan(cbSceneParam._m0[41u].w) ? _2419 : (isnan(_2419) ? cbSceneParam._m0[41u].w : max(_2419, cbSceneParam._m0[41u].w));
            float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2076 * _2076) + (_2075 * _2075)) + (_2077 * _2077))) * cbSceneParam._m0[33u].y;
            float _4588 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
            float _2473 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2279, cbSceneParam._m0[33u].w + _2280), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2279, _2280 - cbSceneParam._m0[33u].z), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].z, _2280 - cbSceneParam._m0[33u].w), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2279 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2280), _2423), 0.0)).x), vec4(0.25)));
            float _2477 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
            float _2478 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
            float _2479 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2479) ? _2226 : (isnan(_2226) ? _2479 : min(_2226, _2479));
            frontier_phi_34_33_ladder_1 = isnan(_2478) ? _2225 : (isnan(_2225) ? _2478 : min(_2225, _2478));
            frontier_phi_34_33_ladder_2 = isnan(_2477) ? _2224 : (isnan(_2224) ? _2477 : min(_2224, _2477));
        }
        else
        {
            frontier_phi_34_33_ladder = _2226;
            frontier_phi_34_33_ladder_1 = _2225;
            frontier_phi_34_33_ladder_2 = _2224;
        }
        _2290 = frontier_phi_34_33_ladder_2;
        _2292 = frontier_phi_34_33_ladder_1;
        _2294 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2290 = _2224;
        _2292 = _2225;
        _2294 = _2226;
    }
    uvec4 _2299 = floatBitsToUint(cbInstanceData._m0[_960 + 5u]);
    uint _2301 = _2299.x * 14u;
    uint _2302 = _2301 + 13u;
    float _2309 = _1000 + (-1.0);
    float _2314 = (cbLight._m0[_2302].x * _2309) + 1.0;
    float _2315 = (cbLight._m0[_2302].y * _2309) + 1.0;
    float _2316 = (cbLight._m0[_2302].z * _2309) + 1.0;
    float _2317 = (cbLight._m0[_2302].w * _2309) + 1.0;
    uint _2318 = _2301 + 5u;
    float _2324 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2328 = _2301 + 4u;
    float _2338 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2342 = _2301 | 1u;
    float _2353 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_834, _835, _836));
    float _2356 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_834, _835, _836));
    float _4624 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _4635 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2363 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2370 = ((cbLight._m0[_2318].x * _2324) * _2363) + (((cbLight._m0[_2328].x * _2290) * _2338) * _2361);
    float _2371 = ((_2324 * cbLight._m0[_2318].y) * _2363) + (((cbLight._m0[_2328].y * _2292) * _2338) * _2361);
    float _2372 = ((_2324 * cbLight._m0[_2318].z) * _2363) + (((cbLight._m0[_2328].z * _2294) * _2338) * _2361);
    uvec4 _2376 = floatBitsToUint(cbLight._m0[_2301 + 12u]);
    bool _2378 = _2376.x == 0u;
    float _2480;
    float _2482;
    float _2484;
    if (_2378)
    {
        _2480 = _2370;
        _2482 = _2371;
        _2484 = _2372;
    }
    else
    {
        uint _2488 = _2301 + 6u;
        float _2504 = (dot(vec3(cbLight._m0[_2301 + 2u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2505 = _2504 * _2504;
        float _4646 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2506 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2507 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2480 = (((cbLight._m0[_2488].x * 0.3183098733425140380859375) * _2506) * _2507) + _2370;
        _2482 = (((cbLight._m0[_2488].y * 0.3183098733425140380859375) * _2506) * _2507) + _2371;
        _2484 = (((cbLight._m0[_2488].z * 0.3183098733425140380859375) * _2506) * _2507) + _2372;
    }
    bool _2487 = _2376.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2487)
    {
        _2542 = _2480;
        _2544 = _2482;
        _2546 = _2484;
    }
    else
    {
        uint _2715 = _2301 + 7u;
        float _2731 = (dot(vec3(cbLight._m0[_2301 + 3u].xyz), vec3(_834, _835, _836)) * 0.5) + 0.5;
        float _2732 = _2731 * _2731;
        float _4662 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2733 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2734 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2542 = (((cbLight._m0[_2715].x * 0.3183098733425140380859375) * _2733) * _2734) + _2480;
        _2544 = (((cbLight._m0[_2715].y * 0.3183098733425140380859375) * _2733) * _2734) + _2482;
        _2546 = (((cbLight._m0[_2715].z * 0.3183098733425140380859375) * _2733) * _2734) + _2484;
    }
    uint _2549 = _2301 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _837) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2301].x + _914;
    float _2565 = cbLight._m0[_2301].y + _915;
    float _2566 = cbLight._m0[_2301].z + _916;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2301].xyz));
    float _4678 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _4689 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _2578 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2579 = dot(vec3(_834, _835, _836), vec3(_2571, _2572, _2573));
    float _4700 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2571, _2572, _2573));
    float _4711 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
    float _2600 = 0.959999978542327880859375 - _982;
    float _2602 = 0.959999978542327880859375 - _983;
    float _2603 = 0.959999978542327880859375 - _984;
    float _2610 = 1.0 - _2563;
    float _2621 = (0.5 / (((_2578 * ((_2577 * _2610) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2610) + _2563) * _2577))) * _2577;
    float _4722 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2637 = _2301 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _837) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2342].x + _914;
    float _2651 = cbLight._m0[_2342].y + _915;
    float _2652 = cbLight._m0[_2342].z + _916;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2342].xyz));
    float _4733 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2664 = dot(vec3(_834, _835, _836), vec3(_2657, _2658, _2659));
    float _4744 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2657, _2658, _2659));
    float _4755 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
    float _2690 = 1.0 - _2649;
    float _2700 = (0.5 / (((_2578 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2690) + _2649) * _2663))) * _2663;
    float _4766 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2712 = (((((_2683 * _2600) + _985) * cbLight._m0[_2637].x) * _2702) * _2324) + ((((cbLight._m0[_2549].x * _2290) * ((_2599 * _2600) + _985)) * _2623) * _2338);
    float _2713 = (((((_2683 * _2602) + _987) * cbLight._m0[_2637].y) * _2702) * _2324) + ((((cbLight._m0[_2549].y * _2292) * ((_2599 * _2602) + _987)) * _2623) * _2338);
    float _2714 = (((((_2683 * _2603) + _988) * cbLight._m0[_2637].z) * _2702) * _2324) + ((((cbLight._m0[_2549].z * _2294) * ((_2599 * _2603) + _988)) * _2623) * _2338);
    float _2770;
    float _2772;
    float _2774;
    if (_2378)
    {
        _2770 = _2712;
        _2772 = _2713;
        _2774 = _2714;
    }
    else
    {
        uint _2776 = _2301 + 2u;
        uint _2780 = _2301 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _837) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _914;
        float _2797 = cbLight._m0[_2776].y + _915;
        float _2798 = cbLight._m0[_2776].z + _916;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2776].xyz));
        float _4777 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2810 = dot(vec3(_834, _835, _836), vec3(_2803, _2804, _2805));
        float _4788 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4799 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2578 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2836) + _2795) * _2809))) * _2809;
        float _4810 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2770 = (((((_2829 * _2600) + _985) * cbLight._m0[_2780].x) * _2848) * _2849) + _2712;
        _2772 = (((((_2829 * _2602) + _987) * cbLight._m0[_2780].y) * _2848) * _2849) + _2713;
        _2774 = (((((_2829 * _2603) + _988) * cbLight._m0[_2780].z) * _2848) * _2849) + _2714;
    }
    float _2880;
    float _2882;
    float _2884;
    if (_2487)
    {
        _2880 = _2770;
        _2882 = _2772;
        _2884 = _2774;
    }
    else
    {
        uint _2891 = _2301 + 3u;
        uint _2895 = _2301 + 11u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _837) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _914;
        float _2912 = cbLight._m0[_2891].y + _915;
        float _2913 = cbLight._m0[_2891].z + _916;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_834, _835, _836), vec3(cbLight._m0[_2891].xyz));
        float _4826 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2925 = dot(vec3(_834, _835, _836), vec3(_2918, _2919, _2920));
        float _4837 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4848 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2578 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2951) + _2910) * _2924))) * _2924;
        float _4859 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2880 = (((((_2944 * _2600) + _985) * cbLight._m0[_2895].x) * _2963) * _2964) + _2770;
        _2882 = (((((_2944 * _2602) + _987) * cbLight._m0[_2895].y) * _2963) * _2964) + _2772;
        _2884 = (((((_2944 * _2603) + _988) * cbLight._m0[_2895].z) * _2963) * _2964) + _2774;
    }
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_2299.y == 0u)
    {
        uvec4 _2985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2986 = _2985.x;
        uint _2997 = uint((float(_2985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2986))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2986)));
        float _3007 = (log2(_2077 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3008 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        uint _3011 = uint(isnan(14.0) ? _3008 : (isnan(_3008) ? 14.0 : min(_3008, 14.0)));
        uvec4 _3016 = texelFetch(g_lightClusterGridBuffer, int(((_3011 << 2u) + (_2997 << 6u)) >> 2u));
        uint _3017 = _3016.x;
        uint _3018 = _2985.z;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((((1u << ((_3018 >> 4u) & 15u)) + 4294967295u) & _3017) == 0u) || ((_3018 & 240u) == 0u))
        {
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
            _3150 = 0.0;
            _3152 = 0.0;
        }
        else
        {
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3151;
            float _3153;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            uint _3301 = 0u;
            uint _3310;
            bool _3311;
            for (;;)
            {
                _3310 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                _3311 = _3310 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3311)
                {
                    frontier_phi_66_pred = _3300;
                    frontier_phi_66_pred_1 = _3299;
                    frontier_phi_66_pred_2 = _3298;
                    frontier_phi_66_pred_3 = _3297;
                    frontier_phi_66_pred_4 = _3296;
                    frontier_phi_66_pred_5 = _3295;
                }
                else
                {
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    uint _3425;
                    _3419 = _3295;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3310;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    for (;;)
                    {
                        uint _3429 = uint(findLSB(_3425)) + (_3301 << 5u);
                        uint _3426 = (_3425 + 4294967295u) & _3425;
                        uint _3431 = _3429 * 48u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3451 = (_3429 * 48u) + 4u;
                        vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 3u)).x));
                        uint _3470 = (_3429 * 48u) + 8u;
                        vec3 _3481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3470)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 2u)).x));
                        float _3485 = _3445.x - _2075;
                        float _3486 = _3445.y - _2076;
                        float _3487 = _3445.z - _2077;
                        float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                        float _3491 = inversesqrt(_3488);
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3495 = dot(vec3(_941, _944, _947), vec3(_3492, _3493, _3494));
                        float _3500 = 1.0 - (_3488 * _3445.w);
                        float _4885 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3502 = sqrt(_3488) * _3464.w;
                        float _3505 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3495) + _3506;
                        float _3512 = _3502 * _3502;
                        float _3516 = ((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3501) / ((_3512 * 0.699999988079071044921875) + 1.0);
                        float _3520 = (-0.0) - _2075;
                        float _3521 = (-0.0) - _2076;
                        float _3522 = (-0.0) - _2077;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3536 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                        float _3537 = 1.0 - _1016;
                        float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                        float _3545 = _3544 * _3544;
                        float _3546 = _3545 * _3545;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3549 = _3529 + _3494;
                        float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                        float _3557 = dot(vec3(_941, _944, _947), vec3(_3527, _3528, _3529));
                        float _4901 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3560 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3561 = dot(vec3(_941, _944, _947), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                        float _4912 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                        float _3569 = _3505 * _3545;
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3495) + _3570;
                        float _4923 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3574 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3575 = 1.0 - _3545;
                        float _3585 = (0.5 / (((_3574 * ((_3560 * _3575) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3545) * _3560))) * _3574;
                        float _4934 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3596 = (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3568 * _3568) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125))) * _3501;
                        _3354 = (_3516 * _3464.x) + _3422;
                        _3355 = (_3516 * _3464.y) + _3423;
                        _3356 = (_3516 * _3464.z) + _3424;
                        _3351 = (_3596 * _3481.x) + _3419;
                        _3352 = (_3596 * _3481.y) + _3420;
                        _3353 = (_3596 * _3481.z) + _3421;
                        if (_3426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3419 = _3351;
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3426;
                        }
                    }
                    frontier_phi_66_pred = _3356;
                    frontier_phi_66_pred_1 = _3355;
                    frontier_phi_66_pred_2 = _3354;
                    frontier_phi_66_pred_3 = _3353;
                    frontier_phi_66_pred_4 = _3352;
                    frontier_phi_66_pred_5 = _3351;
                }
                _3153 = frontier_phi_66_pred;
                _3151 = frontier_phi_66_pred_1;
                _3149 = frontier_phi_66_pred_2;
                _3147 = frontier_phi_66_pred_3;
                _3145 = frontier_phi_66_pred_4;
                _3143 = frontier_phi_66_pred_5;
                uint _3302 = _3301 + 1u;
                if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3295 = _3143;
                    _3296 = _3145;
                    _3297 = _3147;
                    _3298 = _3149;
                    _3299 = _3151;
                    _3300 = _3153;
                    _3301 = _3302;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
            _3150 = _3151;
            _3152 = _3153;
        }
        uvec4 _3156 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3157 = _3156.z;
        uint _3159 = (_3157 >> 8u) & 15u;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        if (((4294967295u << _3159) & _3017) == 0u)
        {
            _3263 = _3142;
            _3265 = _3144;
            _3267 = _3146;
            _3269 = _3148;
            _3271 = _3150;
            _3273 = _3152;
        }
        else
        {
            float _3288 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
            float _3289 = _3288 * _2075;
            float _3290 = _3288 * _2076;
            float _3291 = _3288 * _2077;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3159 < ((_3157 >> 12u) & 15u))
            {
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3402 = _3142;
                float _3403 = _3144;
                float _3404 = _3146;
                float _3405 = _3148;
                float _3406 = _3150;
                float _3407 = _3152;
                uint _3408 = _3159;
                uint _3417;
                bool _3418;
                for (;;)
                {
                    _3417 = texelFetch(g_lightClassification, int((((_3011 << 5u) + (_2997 << 9u)) + (_3408 << 2u)) >> 2u)).x;
                    _3418 = _3417 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3418)
                    {
                        frontier_phi_72_pred = _3407;
                        frontier_phi_72_pred_1 = _3406;
                        frontier_phi_72_pred_2 = _3405;
                        frontier_phi_72_pred_3 = _3404;
                        frontier_phi_72_pred_4 = _3403;
                        frontier_phi_72_pred_5 = _3402;
                    }
                    else
                    {
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3614 = _3402;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        uint _3620 = _3417;
                        uint _3621;
                        vec4 _3646;
                        float _3647;
                        vec4 _3662;
                        vec3 _3674;
                        vec4 _3689;
                        vec4 _3704;
                        float _3751;
                        bool _3752;
                        for (;;)
                        {
                            uint _3631 = ((_3408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3620));
                            _3621 = (_3620 + 4294967295u) & _3620;
                            uint _3633 = _3631 * 40u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3647 = _3646.w;
                            uint _3649 = (_3631 * 40u) + 4u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3631 * 40u) + 8u;
                            _3674 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x));
                            uint _3676 = (_3631 * 40u) + 16u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3631 * 40u) + 20u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3707 = (_3631 * 40u) + 24u;
                            vec4 _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3726 = (_3631 * 40u) + 28u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            _3751 = fma(_2077, _3739.z, fma(_2076, _3739.y, _3739.x * _2075)) + _3739.w;
                            _3752 = !((fma(_2077, _3720.z, fma(_2076, _3720.y, _3720.x * _2075)) + _3720.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3752)
                            {
                                float _3779 = _3646.x - _2075;
                                float _3780 = _3646.y - _2076;
                                float _3781 = _3646.z - _2077;
                                float _3782 = dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781));
                                float _3785 = inversesqrt(_3782);
                                float _3786 = _3785 * _3779;
                                float _3787 = _3785 * _3780;
                                float _3788 = _3785 * _3781;
                                float _3792 = 1.0 - (_3782 / (_3647 * _3647));
                                float _4945 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3797 = sqrt(_3782) * _3662.w;
                                float _3799 = 1.39999997615814208984375 / (_3797 + 1.39999997615814208984375);
                                float _3800 = _3799 * _3799;
                                float _3803 = ((1.0 - _3800) * dot(vec3(_3786, _3787, _3788), vec3(_941, _944, _947))) + _3800;
                                float _3806 = _3797 * _3797;
                                float _3810 = (fma(_2077, _3689.z, fma(_2076, _3689.y, _3689.x * _2075)) + _3689.w) / _3751;
                                float _3811 = (fma(_2077, _3704.z, fma(_2076, _3704.y, _3704.x * _2075)) + _3704.w) / _3751;
                                float _3815 = 1.0 - dot(vec2(_3810, _3811), vec2(_3810, _3811));
                                float _4961 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3817 = _3816 * (((isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0))) * _3793) / ((_3806 * 0.699999988079071044921875) + 1.0));
                                float _3829 = exp2(log2(1.0 / ((_3806 * 3.5) + 5.0)) * 0.25);
                                float _3830 = 1.0 - _1016;
                                float _3837 = sqrt(1.0 - ((1.0 - (_3830 * _3830)) * (1.0 - (_3829 * _3829))));
                                float _3838 = _3837 * _3837;
                                float _3839 = _3838 * _3838;
                                float _3840 = _3786 - _3289;
                                float _3841 = _3787 - _3290;
                                float _3842 = _3788 - _3291;
                                float _3846 = inversesqrt(dot(vec3(_3840, _3841, _3842), vec3(_3840, _3841, _3842)));
                                float _3850 = dot(vec3(_941, _944, _947), vec3((-0.0) - _3289, (-0.0) - _3290, (-0.0) - _3291));
                                float _4972 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3854 = dot(vec3(_941, _944, _947), vec3(_3846 * _3840, _3846 * _3841, _3846 * _3842));
                                float _4983 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3861 = ((_3857 * _3857) * (_3839 + (-1.0))) + 1.0;
                                float _3862 = _3799 * _3838;
                                float _3863 = _3862 * _3862;
                                float _3869 = ((1.0 - _3863) * dot(vec3(_941, _944, _947), vec3(_3786, _3787, _3788))) + _3863;
                                float _4994 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3871 = 1.0 - _3838;
                                float _3881 = (0.5 / (((_3870 * ((_3853 * _3871) + _3838)) + 9.9999999392252902907785028219223e-09) + (((_3870 * _3871) + _3838) * _3853))) * _3870;
                                float _5005 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3891 = (_3816 * _3793) * (((_3839 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3861 * _3861) * ((_3806 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3817 * _3662.y;
                                frontier_phi_78_pred_1 = _3817 * _3662.x;
                                frontier_phi_78_pred_2 = _3891 * _3674.z;
                                frontier_phi_78_pred_3 = _3891 * _3674.y;
                                frontier_phi_78_pred_4 = _3891 * _3674.x;
                                frontier_phi_78_pred_5 = _3817 * _3662.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3899 = frontier_phi_78_pred;
                            _3898 = frontier_phi_78_pred_1;
                            _3897 = frontier_phi_78_pred_2;
                            _3896 = frontier_phi_78_pred_3;
                            _3895 = frontier_phi_78_pred_4;
                            _3900 = frontier_phi_78_pred_5;
                            _3604 = _3898 + _3617;
                            _3605 = _3899 + _3618;
                            _3606 = _3900 + _3619;
                            _3601 = _3895 + _3614;
                            _3602 = _3896 + _3615;
                            _3603 = _3897 + _3616;
                            if (_3621 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3621;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3606;
                        frontier_phi_72_pred_1 = _3605;
                        frontier_phi_72_pred_2 = _3604;
                        frontier_phi_72_pred_3 = _3603;
                        frontier_phi_72_pred_4 = _3602;
                        frontier_phi_72_pred_5 = _3601;
                    }
                    _3274 = frontier_phi_72_pred;
                    _3272 = frontier_phi_72_pred_1;
                    _3270 = frontier_phi_72_pred_2;
                    _3268 = frontier_phi_72_pred_3;
                    _3266 = frontier_phi_72_pred_4;
                    _3264 = frontier_phi_72_pred_5;
                    uint _3409 = _3408 + 1u;
                    if (_3409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3402 = _3264;
                        _3403 = _3266;
                        _3404 = _3268;
                        _3405 = _3270;
                        _3406 = _3272;
                        _3407 = _3274;
                        _3408 = _3409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3274;
                frontier_phi_60_61_ladder_1 = _3272;
                frontier_phi_60_61_ladder_2 = _3268;
                frontier_phi_60_61_ladder_3 = _3266;
                frontier_phi_60_61_ladder_4 = _3264;
                frontier_phi_60_61_ladder_5 = _3270;
            }
            else
            {
                frontier_phi_60_61_ladder = _3152;
                frontier_phi_60_61_ladder_1 = _3150;
                frontier_phi_60_61_ladder_2 = _3146;
                frontier_phi_60_61_ladder_3 = _3144;
                frontier_phi_60_61_ladder_4 = _3142;
                frontier_phi_60_61_ladder_5 = _3148;
            }
            _3263 = frontier_phi_60_61_ladder_4;
            _3265 = frontier_phi_60_61_ladder_3;
            _3267 = frontier_phi_60_61_ladder_2;
            _3269 = frontier_phi_60_61_ladder_5;
            _3271 = frontier_phi_60_61_ladder_1;
            _3273 = frontier_phi_60_61_ladder;
        }
        float _3278 = isnan(1.0) ? _1000 : (isnan(_1000) ? 1.0 : min(_1000, 1.0));
        _3030 = (_3278 * _3269) + _2542;
        _3032 = (_3278 * _3271) + _2544;
        _3034 = (_3278 * _3273) + _2546;
        _3036 = ((_3263 * _985) * _3278) + _2880;
        _3038 = ((_3265 * _987) * _3278) + _2882;
        _3040 = ((_3267 * _988) * _3278) + _2884;
    }
    else
    {
        _3030 = _2542;
        _3032 = _2544;
        _3034 = _2546;
        _3036 = _2880;
        _3038 = _2882;
        _3040 = _2884;
    }
    uint _3046 = _961 + uint(cbMatDynParam._m0[0u].w);
    float _3052 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3058 = (((((_3052 * cbMtdParam._m0[14u].x) * _695.x) * _718) * _796) * (((1.0 - _771) * cbMtdParam._m0[20u].w) + _771)) * cbInstanceData._m0[_3046].x;
    float _3064 = (((((_3052 * cbMtdParam._m0[14u].y) * _695.y) * _718) * _796) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_3046].y;
    float _3070 = (((((_3052 * cbMtdParam._m0[14u].z) * _695.z) * _718) * _796) * (((1.0 - _775) * cbMtdParam._m0[20u].w) + _775)) * cbInstanceData._m0[_3046].z;
    float _5021 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _5032 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _5043 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _3087 = (((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3030 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1000))) + ((_3036 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1809)) * cbPerFrame._m0[3u].x)) + _3058;
    float _3089 = (_3064 + ((_3038 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3032 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1000)));
    float _3091 = (_3070 + ((_3040 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3034 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1000)));
    float _5069 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3104 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
    uint _3105 = _960 + 6u;
    float _3113 = _922 / cbSceneParam._m0[86u].x;
    float _3114 = _923 / cbSceneParam._m0[86u].y;
    vec4 _3128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3130 = _3128.x;
    float _3131 = _3128.y;
    float _3132 = _3128.z;
    float _3133 = _3128.w;
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _3167 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _3168 = _3167 / _857;
        float _3179 = _3168 * _907;
        float _3180 = _908 * _3168;
        float _3181 = (-0.0) - _3180;
        float _3182 = _3168 * _909;
        float _3184 = (cbSceneParam._m0[77u].w * _3181) / _3167;
        float _3185 = _3184 + cbSceneParam._m0[79u].w;
        float _3186 = cbSceneParam._m0[79u].w - _3180;
        float _3192 = sqrt(((_3179 * _3179) + (_3180 * _3180)) + (_3182 * _3182));
        float _3195 = (1.0 - (cbSceneParam._m0[77u].w / _3167)) * _3192;
        float _3200 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3202 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3364;
        if (abs((_3181 - _3184) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3364 = ((((_3185 > 0.0) ? exp2(_3200 * _3185) : (2.0 - exp2(_3202 * _3185))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3195;
        }
        else
        {
            float _3324 = 1.0 / cbSceneParam._m0[80u].x;
            float _3325 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : max(_3185, _3186));
            float _3326 = isnan(_3186) ? _3185 : (isnan(_3185) ? _3186 : min(_3185, _3186));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            _3364 = ((abs(_3192 / _3181) * cbSceneParam._m0[80u].y) * ((((_3335 - _3336) * 2.0) - ((exp2(_3200 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0)))) - exp2(_3200 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))))) * _3324)) - ((exp2(_3202 * _3335) - exp2(_3202 * _3336)) * _3324))) + (_3195 * cbSceneParam._m0[80u].z);
        }
        vec4 _3366 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, 1.0), 0.0);
        float _3375 = exp2((_3364 * (-1.44269502162933349609375)) * (1.0 - _3366.w));
        float _3376 = log2(_3375);
        float _3392 = log2(_3133);
        _3204 = (exp2(_3392 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].x)) * _3366.x) / cbSceneParam._m0[78u].x)) + _3130;
        _3206 = (exp2(_3392 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].y)) * _3366.y) / cbSceneParam._m0[78u].y)) + _3131;
        _3208 = (exp2(_3392 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].z)) * _3366.z) / cbSceneParam._m0[78u].z)) + _3132;
        _3210 = _3375 * _3133;
    }
    else
    {
        _3204 = _3130;
        _3206 = _3131;
        _3208 = _3132;
        _3210 = _3133;
    }
    float _3222 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3223 = _3222 == 3.0;
    float _3224 = log2(_3210);
    float _3228 = exp2(_3224 * cbSceneParam._m0[78u].x);
    float _3229 = exp2(_3224 * cbSceneParam._m0[78u].y);
    float _3230 = exp2(_3224 * cbSceneParam._m0[78u].z);
    float _3231 = _3228 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)));
    float _3232 = _3229 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)));
    float _3233 = _3230 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)));
    float _3242 = (_3222 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3242 * (_3223 ? _3231 : (_3231 + (cbSceneParam._m0[72u].w * _3204)));
    SV_Target.y = _3242 * (_3223 ? _3232 : (_3232 + (cbSceneParam._m0[72u].w * _3206)));
    SV_Target.z = _3242 * (_3223 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3208)));
    SV_Target.w = cbInstanceData._m0[_3105].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3058) * _3104) * _3228) * _3242;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3064) * _3104) * _3229) * _3242;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3070) * _3104) * _3230) * _3242;
    SV_Target_1.w = cbInstanceData._m0[_3105].w;
}


