#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1341;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _4005 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4016 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4027 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401;
    vec4 _455 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _470 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _490 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _472) * _351) + _472;
    float _507 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _490) * _392) + _490;
    float _524 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _507) * _433) + _507;
    vec4 _537 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    vec4 _553 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _564 = ((_553.x - _539) * _351) + _539;
    float _565 = ((_553.y - _540) * _351) + _540;
    float _566 = ((_553.z - _541) * _351) + _541;
    vec4 _579 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _590 = ((_579.x - _564) * _392) + _564;
    float _591 = ((_579.y - _565) * _392) + _565;
    float _592 = ((_579.z - _566) * _392) + _566;
    vec4 _605 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _618 = ((_605.z - _592) * _433) + _592;
    float _621 = ((((_605.x - _590) * _433) + _590) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _591) * _433) + _591) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _4038 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))));
    vec4 _661 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _675 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4049 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _684 = (((_676 * _676) * (3.0 - (_676 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _692 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _700 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4060 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _705 = (_701 * _701) * (3.0 - (_701 * 2.0));
    float _706 = _705 * cbMtdParam._m0[22u].x;
    float _707 = _705 * cbMtdParam._m0[22u].y;
    float _708 = sin(_692);
    float _709 = cos(_692);
    float _710 = TEXCOORD.z - _706;
    float _711 = TEXCOORD.w - _707;
    vec4 _731 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_706 + fma(_711, (-0.0) - _708, _710 * _709))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_711, _709, _710 * _708) + _707)) + cbTextureTilingScale._m0[2u].w));
    float _737 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _731.x;
    float _739 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _731.y;
    float _741 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _731.z;
    float _761 = (TEXCOORD_5.x - (((_455.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4071 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    vec4 _775 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _785 = (((_775.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _621;
    float _786 = (((_775.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _623;
    float _789 = fma(_629, _237 * NORMAL.x, fma(_786, _244 * TANGENT.x, (_230 * _222) * _785));
    float _792 = fma(_629, _237 * NORMAL.y, fma(_786, _244 * TANGENT.y, (_230 * _223) * _785));
    float _795 = fma(_629, _237 * NORMAL.z, fma(_786, _244 * TANGENT.z, (_230 * _224) * _785));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _4082 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _803 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4104 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4115 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4126 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _807 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _873 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _863);
    float _874 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _863);
    float _875 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _863);
    float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
    float _880 = _873 * _879;
    float _881 = _874 * _879;
    float _882 = _875 * _879;
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _911 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _914 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _927 = uint(roundEven(NORMAL.w)) * 13u;
    uint _928 = _927 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * cbInstanceData._m0[_929].z;
    float _4137 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _941 = 1.0 - _807;
    float _942 = _938 * _941;
    float _943 = _939 * _941;
    float _944 = _940 * _941;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _807;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _807;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _807;
    float _952 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _967 = _964.x * TEXCOORD_5.w;
    float _968 = dot(vec3(_800, _801, _802), vec3(_880, _881, _882));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _800) - _880;
    float _976 = (_971 * _801) - _881;
    float _977 = (_971 * _802) - _882;
    float _981 = abs(dot(vec3(_880, _881, _882), vec3(_800, _801, _802)));
    float _4170 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_803);
    float _995 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1001 = (1.0 - _995) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _983;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1069 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1073 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1098 = _1030 + _800;
        float _1099 = _1034 + _801;
        float _1100 = _1038 + _802;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_800, _801, _802), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4218 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_800, _801, _802), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4251 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_800, _801, _802), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4284 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1381 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1385 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1389 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1412 = _1030 + _800;
        float _1413 = _1034 + _801;
        float _1414 = _1038 + _802;
        float _1424 = fma(_1414, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412)) - _1381;
        float _1425 = fma(_1414, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412)) - _1385;
        float _1426 = fma(_1414, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412)) - _1389;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1443 = ((_1430 * _1424) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1381 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1430 * _1425) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1385 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1430 * _1426) / cbModelParam._m0[35u].z) + ((((((_1389 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1480 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1447.x + (-0.5));
        float _1482 = _1480 * (_1447.y + (-0.5));
        float _1483 = _1480 * (_1447.z + (-0.5));
        float _1490 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1454.x + (-0.5));
        float _1492 = _1490 * (_1454.y + (-0.5));
        float _1493 = _1490 * (_1454.z + (-0.5));
        float _1500 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1461.x + (-0.5));
        float _1502 = _1500 * (_1461.y + (-0.5));
        float _1503 = _1500 * (_1461.z + (-0.5));
        float _1510 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1468.x + (-0.5));
        float _1512 = _1510 * (_1468.y + (-0.5));
        float _1513 = _1510 * (_1468.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_800, _801, _802), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4347 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1544 + 1.0))) + _1549) * _1514;
        float _1559 = _1482 * 0.5;
        float _1560 = _1492 * 0.5;
        float _1561 = _1502 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_800, _801, _802), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4380 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1586 + 1.0))) + _1591) * _1515;
        float _1601 = _1483 * 0.5;
        float _1602 = _1493 * 0.5;
        float _1603 = _1503 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_800, _801, _802), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4413 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1628 + 1.0))) + _1633) * _1516;
        _1650 = _1483;
        _1651 = _1482;
        _1652 = _1481;
        _1653 = _1493;
        _1654 = _1492;
        _1655 = _1491;
        _1656 = _1503;
        _1657 = _1502;
        _1658 = _1501;
        _1659 = _1516;
        _1660 = _1515;
        _1661 = _1514;
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1341;
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = _1341;
        _1662 = 0.0;
        _1663 = 0.0;
        _1664 = 0.0;
    }
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1353)) + _1353;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1354)) + _1354;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1355)) + _1355;
    float _1697 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1674 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1674 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1674));
    float _1718 = _975 * 0.5;
    float _1719 = _976 * 0.5;
    float _1720 = _977 * 0.5;
    float _1721 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1724 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1727 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1761;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1734 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1738 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1742 = dot(vec4(_1718, _1719, _1720, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1749 = dot(vec4(cbModelParam._m0[39u]), vec4(_1718, _1719, _1720, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1772;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1763 = dot(vec4(cbModelParam._m0[40u]), vec4(_1718, _1719, _1720, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1776 = (_1772 * cbModelParam._m0[1u].x) + (_1761 * (1.0 - cbModelParam._m0[1u].x));
    float _1786 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1786 : min(cbModelParam._m0[25u].z, _1786));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1834 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1838 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1842 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1845 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1848 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1851 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1879;
        if (_1845 > 0.0)
        {
            _1879 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1879 = frontier_phi_14_12_ladder;
        }
        float _2050;
        if (_1848 > 0.0)
        {
            _2050 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2050 = frontier_phi_23_19_ladder;
        }
        float _2346;
        if (_1851 > 0.0)
        {
            _2346 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2346 = frontier_phi_35_30_ladder;
        }
        float _2348 = isnan(_2050) ? _1879 : (isnan(_1879) ? _2050 : min(_1879, _2050));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1845) + _1834;
        float _2354 = (_2349 * _1848) + _1838;
        float _2355 = (_2349 * _1851) + _1842;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1787);
            frontier_phi_13_35_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1867 = frontier_phi_13_35_ladder_2;
        _1869 = frontier_phi_13_35_ladder_1;
        _1871 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1787);
        _1867 = _1855.x * cbModelParam._m0[1u].y;
        _1869 = _1855.y * cbModelParam._m0[1u].y;
        _1871 = _1855.z * cbModelParam._m0[1u].y;
    }
    float _1875 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1875 : min(cbModelParam._m0[25u].w, _1875));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1943 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1946 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2055;
        if (_1940 > 0.0)
        {
            _2055 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2055 = frontier_phi_25_21_ladder;
        }
        float _2373;
        if (_1943 > 0.0)
        {
            _2373 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2373 = frontier_phi_37_32_ladder;
        }
        float _2711;
        if (_1946 > 0.0)
        {
            _2711 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2711 = frontier_phi_47_44_ladder;
        }
        float _2713 = isnan(_2373) ? _2055 : (isnan(_2055) ? _2373 : min(_2055, _2373));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _1940) + _1929;
        float _2719 = (_2714 * _1943) + _1933;
        float _2720 = (_2714 * _1946) + _1937;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2720, cbModelParam._m0[17u].z, fma(_2719, cbModelParam._m0[17u].y, _2718 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2720, cbModelParam._m0[18u].z, fma(_2719, cbModelParam._m0[18u].y, _2718 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2720, cbModelParam._m0[19u].z, fma(_2719, cbModelParam._m0[19u].y, _2718 * cbModelParam._m0[19u].x))), _1876);
            frontier_phi_22_47_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_22_47_ladder_2;
        _1967 = frontier_phi_22_47_ladder_1;
        _1969 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1876);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1982 = (((_1001 * _952) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1984 = (((_1001 * _954) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1986 = (((_1001 * _955) + _1002) * _967) * ((cbModelParam._m0[1u].w * (_1969 - _1871)) + _1871);
    float _1989 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2042 = _2029 / _2041;
    float _2043 = _2033 / _2041;
    float _2044 = _2037 / _2041;
    float _2191;
    float _2192;
    float _2193;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2071 = ((uint(_2044 > cbSceneParam._m0[59u].y) + uint(_2044 > cbSceneParam._m0[59u].x)) + uint(_2044 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2072 = _2071 + 43u;
        uint _2080 = _2071 + 44u;
        uint _2088 = _2071 + 45u;
        uint _2096 = _2071 + 46u;
        float _2107 = fma(_2041, cbSceneParam._m0[_2072].w, fma(_2037, cbSceneParam._m0[_2072].z, fma(_2033, cbSceneParam._m0[_2072].y, _2029 * cbSceneParam._m0[_2072].x)));
        float _2111 = fma(_2041, cbSceneParam._m0[_2080].w, fma(_2037, cbSceneParam._m0[_2080].z, fma(_2033, cbSceneParam._m0[_2080].y, _2029 * cbSceneParam._m0[_2080].x)));
        float _2119 = fma(_2041, cbSceneParam._m0[_2096].w, fma(_2037, cbSceneParam._m0[_2096].z, fma(_2033, cbSceneParam._m0[_2096].y, _2029 * cbSceneParam._m0[_2096].x)));
        float _2124 = cbSceneParam._m0[33u].z * _2119;
        float _2126 = cbSceneParam._m0[33u].w * _2119;
        float _2129 = fma(_2041, cbSceneParam._m0[_2088].w, fma(_2037, cbSceneParam._m0[_2088].z, fma(_2033, cbSceneParam._m0[_2088].y, _2029 * cbSceneParam._m0[_2088].x))) / _2119;
        float _2177 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
        float _4539 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2184 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2107) / _2119, (_2126 + _2111) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2126 + _2107) / _2119, (_2111 - _2124) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2124) / _2119, (_2111 - _2126) / _2119), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 - _2126) / _2119, (_2124 + _2111) / _2119), _2129), 0.0)).x), vec4(0.25)));
        _2191 = 1.0 - (_2184 * cbSceneParam._m0[34u].x);
        _2192 = 1.0 - (_2184 * cbSceneParam._m0[34u].y);
        _2193 = 1.0 - (_2184 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2191 = 1.0;
        _2192 = 1.0;
        _2193 = 1.0;
    }
    float _2257;
    float _2259;
    float _2261;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2245 = fma(_2041, cbSceneParam._m0[63u].w, fma(_2037, cbSceneParam._m0[63u].z, fma(_2033, cbSceneParam._m0[63u].y, _2029 * cbSceneParam._m0[63u].x)));
        float _2246 = fma(_2041, cbSceneParam._m0[60u].w, fma(_2037, cbSceneParam._m0[60u].z, fma(_2033, cbSceneParam._m0[60u].y, _2029 * cbSceneParam._m0[60u].x))) / _2245;
        float _2247 = fma(_2041, cbSceneParam._m0[61u].w, fma(_2037, cbSceneParam._m0[61u].z, fma(_2033, cbSceneParam._m0[61u].y, _2029 * cbSceneParam._m0[61u].x))) / _2245;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2246 >= cbSceneParam._m0[64u].x) && (_2247 >= cbSceneParam._m0[64u].y)) && (_2246 <= cbSceneParam._m0[64u].z)) && (_2247 <= cbSceneParam._m0[64u].w))
        {
            float _2386 = fma(_2041, cbSceneParam._m0[62u].w, fma(_2037, cbSceneParam._m0[62u].z, fma(_2033, cbSceneParam._m0[62u].y, _2029 * cbSceneParam._m0[62u].x))) / _2245;
            float _2390 = isnan(cbSceneParam._m0[41u].w) ? _2386 : (isnan(_2386) ? cbSceneParam._m0[41u].w : max(_2386, cbSceneParam._m0[41u].w));
            float _2433 = (cbSceneParam._m0[33u].x - sqrt(((_2043 * _2043) + (_2042 * _2042)) + (_2044 * _2044))) * cbSceneParam._m0[33u].y;
            float _4555 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
            float _2440 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2246, cbSceneParam._m0[33u].w + _2247), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2246, _2247 - cbSceneParam._m0[33u].z), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].z, _2247 - cbSceneParam._m0[33u].w), _2390), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2246 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2247), _2390), 0.0)).x), vec4(0.25)));
            float _2444 = 1.0 - (_2440 * cbSceneParam._m0[34u].x);
            float _2445 = 1.0 - (_2440 * cbSceneParam._m0[34u].y);
            float _2446 = 1.0 - (_2440 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2446) ? _2193 : (isnan(_2193) ? _2446 : min(_2193, _2446));
            frontier_phi_34_33_ladder_1 = isnan(_2445) ? _2192 : (isnan(_2192) ? _2445 : min(_2192, _2445));
            frontier_phi_34_33_ladder_2 = isnan(_2444) ? _2191 : (isnan(_2191) ? _2444 : min(_2191, _2444));
        }
        else
        {
            frontier_phi_34_33_ladder = _2193;
            frontier_phi_34_33_ladder_1 = _2192;
            frontier_phi_34_33_ladder_2 = _2191;
        }
        _2257 = frontier_phi_34_33_ladder_2;
        _2259 = frontier_phi_34_33_ladder_1;
        _2261 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2257 = _2191;
        _2259 = _2192;
        _2261 = _2193;
    }
    uvec4 _2266 = floatBitsToUint(cbInstanceData._m0[_927 + 5u]);
    uint _2268 = _2266.x * 14u;
    uint _2269 = _2268 + 13u;
    float _2276 = _967 + (-1.0);
    float _2281 = (cbLight._m0[_2269].x * _2276) + 1.0;
    float _2282 = (cbLight._m0[_2269].y * _2276) + 1.0;
    float _2283 = (cbLight._m0[_2269].z * _2276) + 1.0;
    float _2284 = (cbLight._m0[_2269].w * _2276) + 1.0;
    uint _2285 = _2268 + 5u;
    float _2291 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2295 = _2268 + 4u;
    float _2305 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2309 = _2268 | 1u;
    float _2320 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_800, _801, _802));
    float _2323 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_800, _801, _802));
    float _4591 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _4602 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2328 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * 0.3183098733425140380859375;
    float _2330 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * 0.3183098733425140380859375;
    float _2337 = ((cbLight._m0[_2285].x * _2291) * _2330) + (((cbLight._m0[_2295].x * _2257) * _2305) * _2328);
    float _2338 = ((_2291 * cbLight._m0[_2285].y) * _2330) + (((cbLight._m0[_2295].y * _2259) * _2305) * _2328);
    float _2339 = ((_2291 * cbLight._m0[_2285].z) * _2330) + (((cbLight._m0[_2295].z * _2261) * _2305) * _2328);
    uvec4 _2343 = floatBitsToUint(cbLight._m0[_2268 + 12u]);
    bool _2345 = _2343.x == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2345)
    {
        _2447 = _2337;
        _2449 = _2338;
        _2451 = _2339;
    }
    else
    {
        uint _2455 = _2268 + 6u;
        float _2471 = (dot(vec3(cbLight._m0[_2268 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4613 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2474 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2447 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2337;
        _2449 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2338;
        _2451 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2339;
    }
    bool _2454 = _2343.y == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2454)
    {
        _2509 = _2447;
        _2511 = _2449;
        _2513 = _2451;
    }
    else
    {
        uint _2682 = _2268 + 7u;
        float _2698 = (dot(vec3(cbLight._m0[_2268 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2699 = _2698 * _2698;
        float _4629 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2700 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2701 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2509 = (((cbLight._m0[_2682].x * 0.3183098733425140380859375) * _2700) * _2701) + _2447;
        _2511 = (((cbLight._m0[_2682].y * 0.3183098733425140380859375) * _2700) * _2701) + _2449;
        _2513 = (((cbLight._m0[_2682].z * 0.3183098733425140380859375) * _2700) * _2701) + _2451;
    }
    uint _2516 = _2268 + 8u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _803) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2268].x + _880;
    float _2532 = cbLight._m0[_2268].y + _881;
    float _2533 = cbLight._m0[_2268].z + _882;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2268].xyz));
    float _4645 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _4656 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2545 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2546 = dot(vec3(_800, _801, _802), vec3(_2538, _2539, _2540));
    float _4667 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2550 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2538, _2539, _2540));
    float _4678 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2554 = _2530 * _2530;
    float _2558 = ((_2549 * _2549) * (_2554 + (-1.0))) + 1.0;
    float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2567 = 0.959999978542327880859375 - _949;
    float _2569 = 0.959999978542327880859375 - _950;
    float _2570 = 0.959999978542327880859375 - _951;
    float _2577 = 1.0 - _2530;
    float _2588 = (0.5 / (((_2545 * ((_2544 * _2577) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2577) + _2530) * _2544))) * _2544;
    float _4689 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2590 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2554 / ((_2558 * _2558) * 3.141590118408203125));
    uint _2604 = _2268 + 9u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _803) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2309].x + _880;
    float _2618 = cbLight._m0[_2309].y + _881;
    float _2619 = cbLight._m0[_2309].z + _882;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2309].xyz));
    float _4700 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2631 = dot(vec3(_800, _801, _802), vec3(_2624, _2625, _2626));
    float _4711 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2624, _2625, _2626));
    float _4722 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2616 * _2616;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2657 = 1.0 - _2616;
    float _2667 = (0.5 / (((_2545 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2657) + _2616) * _2630))) * _2630;
    float _4733 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2669 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    float _2679 = (((((_2650 * _2567) + _952) * cbLight._m0[_2604].x) * _2669) * _2291) + ((((cbLight._m0[_2516].x * _2257) * ((_2566 * _2567) + _952)) * _2590) * _2305);
    float _2680 = (((((_2650 * _2569) + _954) * cbLight._m0[_2604].y) * _2669) * _2291) + ((((cbLight._m0[_2516].y * _2259) * ((_2566 * _2569) + _954)) * _2590) * _2305);
    float _2681 = (((((_2650 * _2570) + _955) * cbLight._m0[_2604].z) * _2669) * _2291) + ((((cbLight._m0[_2516].z * _2261) * ((_2566 * _2570) + _955)) * _2590) * _2305);
    float _2737;
    float _2739;
    float _2741;
    if (_2345)
    {
        _2737 = _2679;
        _2739 = _2680;
        _2741 = _2681;
    }
    else
    {
        uint _2743 = _2268 + 2u;
        uint _2747 = _2268 + 10u;
        float _2761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2743].w)) * _803) * 0.949999988079071044921875);
        float _2762 = _2761 * _2761;
        float _2763 = cbLight._m0[_2743].x + _880;
        float _2764 = cbLight._m0[_2743].y + _881;
        float _2765 = cbLight._m0[_2743].z + _882;
        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
        float _2770 = _2769 * _2763;
        float _2771 = _2769 * _2764;
        float _2772 = _2769 * _2765;
        float _2773 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2743].xyz));
        float _4744 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2777 = dot(vec3(_800, _801, _802), vec3(_2770, _2771, _2772));
        float _4755 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2781 = dot(vec3(cbLight._m0[_2743].xyz), vec3(_2770, _2771, _2772));
        float _4766 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2785 = _2762 * _2762;
        float _2789 = ((_2780 * _2780) * (_2785 + (-1.0))) + 1.0;
        float _2796 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2803 = 1.0 - _2762;
        float _2813 = (0.5 / (((_2545 * ((_2776 * _2803) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2803) + _2762) * _2776))) * _2776;
        float _4777 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2815 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2785 / ((_2789 * _2789) * 3.141590118408203125));
        float _2816 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2737 = (((((_2796 * _2567) + _952) * cbLight._m0[_2747].x) * _2815) * _2816) + _2679;
        _2739 = (((((_2796 * _2569) + _954) * cbLight._m0[_2747].y) * _2815) * _2816) + _2680;
        _2741 = (((((_2796 * _2570) + _955) * cbLight._m0[_2747].z) * _2815) * _2816) + _2681;
    }
    float _2847;
    float _2849;
    float _2851;
    if (_2454)
    {
        _2847 = _2737;
        _2849 = _2739;
        _2851 = _2741;
    }
    else
    {
        uint _2858 = _2268 + 3u;
        uint _2862 = _2268 + 11u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _803) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _880;
        float _2879 = cbLight._m0[_2858].y + _881;
        float _2880 = cbLight._m0[_2858].z + _882;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2858].xyz));
        float _4793 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2892 = dot(vec3(_800, _801, _802), vec3(_2885, _2886, _2887));
        float _4804 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4815 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2911 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2918 = 1.0 - _2877;
        float _2928 = (0.5 / (((_2545 * ((_2891 * _2918) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2545 * _2918) + _2877) * _2891))) * _2891;
        float _4826 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2847 = (((((_2911 * _2567) + _952) * cbLight._m0[_2862].x) * _2930) * _2931) + _2737;
        _2849 = (((((_2911 * _2569) + _954) * cbLight._m0[_2862].y) * _2930) * _2931) + _2739;
        _2851 = (((((_2911 * _2570) + _955) * cbLight._m0[_2862].z) * _2930) * _2931) + _2741;
    }
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_2266.y == 0u)
    {
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.x;
        uint _2964 = uint((float(_2952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2953))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2953)));
        float _2974 = (log2(_2044 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2975 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        uint _2978 = uint(isnan(14.0) ? _2975 : (isnan(_2975) ? 14.0 : min(_2975, 14.0)));
        uvec4 _2983 = texelFetch(g_lightClusterGridBuffer, int(((_2978 << 2u) + (_2964 << 6u)) >> 2u));
        uint _2984 = _2983.x;
        uint _2985 = _2952.z;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((((1u << ((_2985 >> 4u) & 15u)) + 4294967295u) & _2984) == 0u) || ((_2985 & 240u) == 0u))
        {
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
        }
        else
        {
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            uint _3268 = 0u;
            uint _3277;
            bool _3278;
            for (;;)
            {
                _3277 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                _3278 = _3277 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3278)
                {
                    frontier_phi_66_pred = _3267;
                    frontier_phi_66_pred_1 = _3266;
                    frontier_phi_66_pred_2 = _3265;
                    frontier_phi_66_pred_3 = _3264;
                    frontier_phi_66_pred_4 = _3263;
                    frontier_phi_66_pred_5 = _3262;
                }
                else
                {
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    uint _3392;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3277;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    for (;;)
                    {
                        uint _3396 = uint(findLSB(_3392)) + (_3268 << 5u);
                        uint _3393 = (_3392 + 4294967295u) & _3392;
                        uint _3398 = _3396 * 48u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3418 = (_3396 * 48u) + 4u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3437 = (_3396 * 48u) + 8u;
                        vec3 _3448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x));
                        float _3452 = _3412.x - _2042;
                        float _3453 = _3412.y - _2043;
                        float _3454 = _3412.z - _2044;
                        float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                        float _3458 = inversesqrt(_3455);
                        float _3459 = _3458 * _3452;
                        float _3460 = _3458 * _3453;
                        float _3461 = _3458 * _3454;
                        float _3462 = dot(vec3(_908, _911, _914), vec3(_3459, _3460, _3461));
                        float _3467 = 1.0 - (_3455 * _3412.w);
                        float _4852 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3469 = sqrt(_3455) * _3431.w;
                        float _3472 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3462) + _3473;
                        float _3479 = _3469 * _3469;
                        float _3483 = ((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3468) / ((_3479 * 0.699999988079071044921875) + 1.0);
                        float _3487 = (-0.0) - _2042;
                        float _3488 = (-0.0) - _2043;
                        float _3489 = (-0.0) - _2044;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3503 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                        float _3504 = 1.0 - _983;
                        float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                        float _3512 = _3511 * _3511;
                        float _3513 = _3512 * _3512;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3524 = dot(vec3(_908, _911, _914), vec3(_3494, _3495, _3496));
                        float _4868 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3528 = dot(vec3(_908, _911, _914), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                        float _4879 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                        float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                        float _3536 = _3472 * _3512;
                        float _3537 = _3536 * _3536;
                        float _3540 = ((1.0 - _3537) * _3462) + _3537;
                        float _4890 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3542 = 1.0 - _3512;
                        float _3552 = (0.5 / (((_3541 * ((_3527 * _3542) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3512) * _3527))) * _3541;
                        float _4901 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3563 = (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3535 * _3535) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125))) * _3468;
                        _3321 = (_3483 * _3431.x) + _3389;
                        _3322 = (_3483 * _3431.y) + _3390;
                        _3323 = (_3483 * _3431.z) + _3391;
                        _3318 = (_3563 * _3448.x) + _3386;
                        _3319 = (_3563 * _3448.y) + _3387;
                        _3320 = (_3563 * _3448.z) + _3388;
                        if (_3393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3393;
                        }
                    }
                    frontier_phi_66_pred = _3323;
                    frontier_phi_66_pred_1 = _3322;
                    frontier_phi_66_pred_2 = _3321;
                    frontier_phi_66_pred_3 = _3320;
                    frontier_phi_66_pred_4 = _3319;
                    frontier_phi_66_pred_5 = _3318;
                }
                _3120 = frontier_phi_66_pred;
                _3118 = frontier_phi_66_pred_1;
                _3116 = frontier_phi_66_pred_2;
                _3114 = frontier_phi_66_pred_3;
                _3112 = frontier_phi_66_pred_4;
                _3110 = frontier_phi_66_pred_5;
                uint _3269 = _3268 + 1u;
                if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3262 = _3110;
                    _3263 = _3112;
                    _3264 = _3114;
                    _3265 = _3116;
                    _3266 = _3118;
                    _3267 = _3120;
                    _3268 = _3269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
        }
        uvec4 _3123 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3124 = _3123.z;
        uint _3126 = (_3124 >> 8u) & 15u;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        if (((4294967295u << _3126) & _2984) == 0u)
        {
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
        }
        else
        {
            float _3255 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
            float _3256 = _3255 * _2042;
            float _3257 = _3255 * _2043;
            float _3258 = _3255 * _2044;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3126 < ((_3124 >> 12u) & 15u))
            {
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3369 = _3109;
                float _3370 = _3111;
                float _3371 = _3113;
                float _3372 = _3115;
                float _3373 = _3117;
                float _3374 = _3119;
                uint _3375 = _3126;
                uint _3384;
                bool _3385;
                for (;;)
                {
                    _3384 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                    _3385 = _3384 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3385)
                    {
                        frontier_phi_72_pred = _3374;
                        frontier_phi_72_pred_1 = _3373;
                        frontier_phi_72_pred_2 = _3372;
                        frontier_phi_72_pred_3 = _3371;
                        frontier_phi_72_pred_4 = _3370;
                        frontier_phi_72_pred_5 = _3369;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3581 = _3369;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        uint _3587 = _3384;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3718;
                        bool _3719;
                        for (;;)
                        {
                            uint _3598 = ((_3375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3674 = (_3598 * 40u) + 24u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3693 = (_3598 * 40u) + 28u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3718 = fma(_2044, _3706.z, fma(_2043, _3706.y, _3706.x * _2042)) + _3706.w;
                            _3719 = !((fma(_2044, _3687.z, fma(_2043, _3687.y, _3687.x * _2042)) + _3687.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3719)
                            {
                                float _3746 = _3613.x - _2042;
                                float _3747 = _3613.y - _2043;
                                float _3748 = _3613.z - _2044;
                                float _3749 = dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748));
                                float _3752 = inversesqrt(_3749);
                                float _3753 = _3752 * _3746;
                                float _3754 = _3752 * _3747;
                                float _3755 = _3752 * _3748;
                                float _3759 = 1.0 - (_3749 / (_3614 * _3614));
                                float _4912 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3764 = sqrt(_3749) * _3629.w;
                                float _3766 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                                float _3767 = _3766 * _3766;
                                float _3770 = ((1.0 - _3767) * dot(vec3(_3753, _3754, _3755), vec3(_908, _911, _914))) + _3767;
                                float _3773 = _3764 * _3764;
                                float _3777 = (fma(_2044, _3656.z, fma(_2043, _3656.y, _3656.x * _2042)) + _3656.w) / _3718;
                                float _3778 = (fma(_2044, _3671.z, fma(_2043, _3671.y, _3671.x * _2042)) + _3671.w) / _3718;
                                float _3782 = 1.0 - dot(vec2(_3777, _3778), vec2(_3777, _3778));
                                float _4928 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3784 = _3783 * (((isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0))) * _3760) / ((_3773 * 0.699999988079071044921875) + 1.0));
                                float _3796 = exp2(log2(1.0 / ((_3773 * 3.5) + 5.0)) * 0.25);
                                float _3797 = 1.0 - _983;
                                float _3804 = sqrt(1.0 - ((1.0 - (_3797 * _3797)) * (1.0 - (_3796 * _3796))));
                                float _3805 = _3804 * _3804;
                                float _3806 = _3805 * _3805;
                                float _3807 = _3753 - _3256;
                                float _3808 = _3754 - _3257;
                                float _3809 = _3755 - _3258;
                                float _3813 = inversesqrt(dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809)));
                                float _3817 = dot(vec3(_908, _911, _914), vec3((-0.0) - _3256, (-0.0) - _3257, (-0.0) - _3258));
                                float _4939 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3821 = dot(vec3(_908, _911, _914), vec3(_3813 * _3807, _3813 * _3808, _3813 * _3809));
                                float _4950 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3828 = ((_3824 * _3824) * (_3806 + (-1.0))) + 1.0;
                                float _3829 = _3766 * _3805;
                                float _3830 = _3829 * _3829;
                                float _3836 = ((1.0 - _3830) * dot(vec3(_908, _911, _914), vec3(_3753, _3754, _3755))) + _3830;
                                float _4961 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3838 = 1.0 - _3805;
                                float _3848 = (0.5 / (((_3837 * ((_3820 * _3838) + _3805)) + 9.9999999392252902907785028219223e-09) + (((_3837 * _3838) + _3805) * _3820))) * _3837;
                                float _4972 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3858 = (_3783 * _3760) * (((_3806 * 3.1415927410125732421875) * (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) / ((_3828 * _3828) * ((_3773 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3784 * _3629.y;
                                frontier_phi_78_pred_1 = _3784 * _3629.x;
                                frontier_phi_78_pred_2 = _3858 * _3641.z;
                                frontier_phi_78_pred_3 = _3858 * _3641.y;
                                frontier_phi_78_pred_4 = _3858 * _3641.x;
                                frontier_phi_78_pred_5 = _3784 * _3629.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_78_pred;
                            _3865 = frontier_phi_78_pred_1;
                            _3864 = frontier_phi_78_pred_2;
                            _3863 = frontier_phi_78_pred_3;
                            _3862 = frontier_phi_78_pred_4;
                            _3867 = frontier_phi_78_pred_5;
                            _3571 = _3865 + _3584;
                            _3572 = _3866 + _3585;
                            _3573 = _3867 + _3586;
                            _3568 = _3862 + _3581;
                            _3569 = _3863 + _3582;
                            _3570 = _3864 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3573;
                        frontier_phi_72_pred_1 = _3572;
                        frontier_phi_72_pred_2 = _3571;
                        frontier_phi_72_pred_3 = _3570;
                        frontier_phi_72_pred_4 = _3569;
                        frontier_phi_72_pred_5 = _3568;
                    }
                    _3241 = frontier_phi_72_pred;
                    _3239 = frontier_phi_72_pred_1;
                    _3237 = frontier_phi_72_pred_2;
                    _3235 = frontier_phi_72_pred_3;
                    _3233 = frontier_phi_72_pred_4;
                    _3231 = frontier_phi_72_pred_5;
                    uint _3376 = _3375 + 1u;
                    if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3369 = _3231;
                        _3370 = _3233;
                        _3371 = _3235;
                        _3372 = _3237;
                        _3373 = _3239;
                        _3374 = _3241;
                        _3375 = _3376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3241;
                frontier_phi_60_61_ladder_1 = _3239;
                frontier_phi_60_61_ladder_2 = _3235;
                frontier_phi_60_61_ladder_3 = _3233;
                frontier_phi_60_61_ladder_4 = _3231;
                frontier_phi_60_61_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_60_61_ladder = _3119;
                frontier_phi_60_61_ladder_1 = _3117;
                frontier_phi_60_61_ladder_2 = _3113;
                frontier_phi_60_61_ladder_3 = _3111;
                frontier_phi_60_61_ladder_4 = _3109;
                frontier_phi_60_61_ladder_5 = _3115;
            }
            _3230 = frontier_phi_60_61_ladder_4;
            _3232 = frontier_phi_60_61_ladder_3;
            _3234 = frontier_phi_60_61_ladder_2;
            _3236 = frontier_phi_60_61_ladder_5;
            _3238 = frontier_phi_60_61_ladder_1;
            _3240 = frontier_phi_60_61_ladder;
        }
        float _3245 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2997 = (_3245 * _3236) + _2509;
        _2999 = (_3245 * _3238) + _2511;
        _3001 = (_3245 * _3240) + _2513;
        _3003 = ((_3230 * _952) * _3245) + _2847;
        _3005 = ((_3232 * _954) * _3245) + _2849;
        _3007 = ((_3234 * _955) * _3245) + _2851;
    }
    else
    {
        _2997 = _2509;
        _2999 = _2511;
        _3001 = _2513;
        _3003 = _2847;
        _3005 = _2849;
        _3007 = _2851;
    }
    uint _3013 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _3019 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3025 = (((((_3019 * cbMtdParam._m0[14u].x) * _661.x) * _684) * _762) * (((1.0 - _737) * cbMtdParam._m0[20u].w) + _737)) * cbInstanceData._m0[_3013].x;
    float _3031 = (((((_3019 * cbMtdParam._m0[14u].y) * _661.y) * _684) * _762) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_3013].y;
    float _3037 = (((((_3019 * cbMtdParam._m0[14u].z) * _661.z) * _684) * _762) * (((1.0 - _741) * cbMtdParam._m0[20u].w) + _741)) * cbInstanceData._m0[_3013].z;
    float _4988 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4999 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _5010 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _3054 = (((isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2997 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _967))) + ((_3003 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + _3025;
    float _3056 = (_3031 + ((_3005 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2999 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _967)));
    float _3058 = (_3037 + ((_3007 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1776)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_3001 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _967)));
    float _5036 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3071 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
    uint _3072 = _927 + 6u;
    float _3080 = _888 / cbSceneParam._m0[86u].x;
    float _3081 = _889 / cbSceneParam._m0[86u].y;
    vec4 _3095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3097 = _3095.x;
    float _3098 = _3095.y;
    float _3099 = _3095.z;
    float _3100 = _3095.w;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _3134 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _3135 = _3134 / _823;
        float _3146 = _3135 * _873;
        float _3147 = _874 * _3135;
        float _3148 = (-0.0) - _3147;
        float _3149 = _3135 * _875;
        float _3151 = (cbSceneParam._m0[77u].w * _3148) / _3134;
        float _3152 = _3151 + cbSceneParam._m0[79u].w;
        float _3153 = cbSceneParam._m0[79u].w - _3147;
        float _3159 = sqrt(((_3146 * _3146) + (_3147 * _3147)) + (_3149 * _3149));
        float _3162 = (1.0 - (cbSceneParam._m0[77u].w / _3134)) * _3159;
        float _3167 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3169 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3331;
        if (abs((_3148 - _3151) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3331 = ((((_3152 > 0.0) ? exp2(_3167 * _3152) : (2.0 - exp2(_3169 * _3152))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3162;
        }
        else
        {
            float _3291 = 1.0 / cbSceneParam._m0[80u].x;
            float _3292 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : max(_3152, _3153));
            float _3293 = isnan(_3153) ? _3152 : (isnan(_3152) ? _3153 : min(_3152, _3153));
            float _3302 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : min(_3292, 0.0));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            _3331 = ((abs(_3159 / _3148) * cbSceneParam._m0[80u].y) * ((((_3302 - _3303) * 2.0) - ((exp2(_3167 * (isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0)))) - exp2(_3167 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))))) * _3291)) - ((exp2(_3169 * _3302) - exp2(_3169 * _3303)) * _3291))) + (_3162 * cbSceneParam._m0[80u].z);
        }
        vec4 _3333 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, 1.0), 0.0);
        float _3342 = exp2((_3331 * (-1.44269502162933349609375)) * (1.0 - _3333.w));
        float _3343 = log2(_3342);
        float _3359 = log2(_3100);
        _3171 = (exp2(_3359 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].x)) * _3333.x) / cbSceneParam._m0[78u].x)) + _3097;
        _3173 = (exp2(_3359 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].y)) * _3333.y) / cbSceneParam._m0[78u].y)) + _3098;
        _3175 = (exp2(_3359 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3343 * cbSceneParam._m0[78u].z)) * _3333.z) / cbSceneParam._m0[78u].z)) + _3099;
        _3177 = _3342 * _3100;
    }
    else
    {
        _3171 = _3097;
        _3173 = _3098;
        _3175 = _3099;
        _3177 = _3100;
    }
    float _3189 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3190 = _3189 == 3.0;
    float _3191 = log2(_3177);
    float _3195 = exp2(_3191 * cbSceneParam._m0[78u].x);
    float _3196 = exp2(_3191 * cbSceneParam._m0[78u].y);
    float _3197 = exp2(_3191 * cbSceneParam._m0[78u].z);
    float _3198 = _3195 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0)));
    float _3199 = _3196 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0)));
    float _3200 = _3197 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)));
    float _3209 = (_3189 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3209 * (_3190 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3171)));
    SV_Target.y = _3209 * (_3190 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3173)));
    SV_Target.z = _3209 * (_3190 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3175)));
    SV_Target.w = cbInstanceData._m0[_3072].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3025) * _3071) * _3195) * _3209;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3031) * _3071) * _3196) * _3209;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3037) * _3071) * _3197) * _3209;
    SV_Target_1.w = cbInstanceData._m0[_3072].w;
}


