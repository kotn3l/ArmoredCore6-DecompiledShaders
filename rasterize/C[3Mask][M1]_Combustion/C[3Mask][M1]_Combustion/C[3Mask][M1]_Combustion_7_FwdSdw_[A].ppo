#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1359;
float _4077;
float _4078;
float _4079;
float _4080;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _352 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _342)) + 1.0;
    float _4089 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _360 = (_353 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _361 = (_353 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _362 = (_353 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4100 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4111 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _442 = (((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401;
    float _443 = (_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _444 = (_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _457 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _472 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _492 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _474) * _353) + _474;
    float _509 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _492) * _394) + _492;
    float _526 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _509) * _435) + _509;
    vec4 _539 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    vec4 _555 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _566 = ((_555.x - _541) * _353) + _541;
    float _567 = ((_555.y - _542) * _353) + _542;
    float _568 = ((_555.z - _543) * _353) + _543;
    vec4 _581 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _592 = ((_581.x - _566) * _394) + _566;
    float _593 = ((_581.y - _567) * _394) + _567;
    float _594 = ((_581.z - _568) * _394) + _568;
    vec4 _607 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _620 = ((_607.z - _594) * _435) + _594;
    float _623 = ((((_607.x - _592) * _435) + _592) * 2.0) + (-1.0);
    float _625 = ((((_607.y - _593) * _435) + _593) * 2.0) + (-1.0);
    float _626 = dot(vec2(_623, _625), vec2(_623, _625));
    float _4122 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    vec4 _663 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _677 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4133 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _686 = (((_678 * _678) * (3.0 - (_678 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _694 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _702 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4144 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _707 = (_703 * _703) * (3.0 - (_703 * 2.0));
    float _708 = _707 * cbMtdParam._m0[22u].x;
    float _709 = _707 * cbMtdParam._m0[22u].y;
    float _710 = sin(_694);
    float _711 = cos(_694);
    float _712 = TEXCOORD.z - _708;
    float _713 = TEXCOORD.w - _709;
    vec4 _733 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_708 + fma(_713, (-0.0) - _710, _712 * _711))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_713, _711, _712 * _710) + _709)) + cbTextureTilingScale._m0[2u].w));
    float _739 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _733.x;
    float _741 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _733.y;
    float _743 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _733.z;
    float _763 = (TEXCOORD_5.x - (((_457.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4155 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _767 = fma(_631, _239 * NORMAL.x, fma(_625, _246 * TANGENT.x, (_232 * _224) * _623));
    float _770 = fma(_631, _239 * NORMAL.y, fma(_625, _246 * TANGENT.y, (_232 * _225) * _623));
    float _773 = fma(_631, _239 * NORMAL.z, fma(_625, _246 * TANGENT.z, (_232 * _226) * _623));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _4166 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _781 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4188 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4199 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4210 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _785 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    vec4 _865 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _867 = _865.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1039 = sqrt(((_851 * _851) + (_852 * _852)) + (_853 * _853));
        float _1045 = (cbMatDynParam._m0[5u].x * _1039) + cbMatDynParam._m0[5u].y;
        float _4221 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1050 = (cbMatDynParam._m0[5u].z * _1039) + cbMatDynParam._m0[5u].w;
        float _4232 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) - _1046)) + _1046) < ((_867 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _878 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _879 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _901 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _904 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _917 = uint(roundEven(NORMAL.w)) * 13u;
    uint _918 = _917 + 9u;
    uint _919 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_919].z;
    float _4243 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _931 = 1.0 - _785;
    float _932 = _928 * _931;
    float _933 = _929 * _931;
    float _934 = _930 * _931;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _785;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _785;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _785;
    float _942 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _878, cbSceneParam._m0[86u].y * _879));
    float _957 = _954.x * TEXCOORD_5.w;
    float _958 = dot(vec3(_778, _779, _780), vec3(_858, _859, _860));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _778) - _858;
    float _966 = (_961 * _779) - _859;
    float _967 = (_961 * _780) - _860;
    float _971 = abs(dot(vec3(_858, _859, _860), vec3(_778, _779, _780)));
    float _4276 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_781);
    float _985 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _991 = (1.0 - _985) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _992 = _985 * _973;
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1028, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020));
        float _1087 = fma(_1028, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020));
        float _1091 = fma(_1028, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020));
        float _1116 = _1020 + _778;
        float _1117 = _1024 + _779;
        float _1118 = _1028 + _780;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_778, _779, _780), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4324 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_778, _779, _780), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4357 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_778, _779, _780), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4390 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1402 = fma(_1028, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1020));
        float _1406 = fma(_1028, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1020));
        float _1410 = fma(_1028, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1020));
        float _1433 = _1020 + _778;
        float _1434 = _1024 + _779;
        float _1435 = _1028 + _780;
        float _1445 = fma(_1435, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1433)) - _1402;
        float _1446 = fma(_1435, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1433)) - _1406;
        float _1447 = fma(_1435, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1433)) - _1410;
        float _1451 = inversesqrt(dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447)));
        float _1464 = ((_1451 * _1445) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1402 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1451 * _1446) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1406 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1451 * _1447) / cbModelParam._m0[35u].z) + ((((((_1410 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1464, _1465, _1466), 0.0);
        float _1501 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1468.x + (-0.5));
        float _1503 = _1501 * (_1468.y + (-0.5));
        float _1504 = _1501 * (_1468.z + (-0.5));
        float _1511 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1475.x + (-0.5));
        float _1513 = _1511 * (_1475.y + (-0.5));
        float _1514 = _1511 * (_1475.z + (-0.5));
        float _1521 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1482.x + (-0.5));
        float _1523 = _1521 * (_1482.y + (-0.5));
        float _1524 = _1521 * (_1482.z + (-0.5));
        float _1531 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1489.x + (-0.5));
        float _1533 = _1531 * (_1489.y + (-0.5));
        float _1534 = _1531 * (_1489.z + (-0.5));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = _1502 * 0.5;
        float _1539 = _1512 * 0.5;
        float _1540 = _1522 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_778, _779, _780), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4453 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1565 + 1.0))) + _1570) * _1535;
        float _1580 = _1503 * 0.5;
        float _1581 = _1513 * 0.5;
        float _1582 = _1523 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_778, _779, _780), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4486 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1607 + 1.0))) + _1612) * _1536;
        float _1622 = _1504 * 0.5;
        float _1623 = _1514 * 0.5;
        float _1624 = _1524 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_778, _779, _780), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4519 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1649 + 1.0))) + _1654) * _1537;
        _1671 = _1504;
        _1672 = _1503;
        _1673 = _1502;
        _1674 = _1514;
        _1675 = _1513;
        _1676 = _1512;
        _1677 = _1524;
        _1678 = _1523;
        _1679 = _1522;
        _1680 = _1537;
        _1681 = _1536;
        _1682 = _1535;
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
    }
    else
    {
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = _1359;
        _1679 = _1359;
        _1680 = _1359;
        _1681 = _1359;
        _1682 = _1359;
        _1683 = 0.0;
        _1684 = 0.0;
        _1685 = 0.0;
    }
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1371)) + _1371;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1372)) + _1372;
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1373)) + _1373;
    float _1718 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1696, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1696, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1696, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1695));
    float _1739 = _965 * 0.5;
    float _1740 = _966 * 0.5;
    float _1741 = _967 * 0.5;
    float _1742 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1745 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1748 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1782;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1755 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1759 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1763 = dot(vec4(_1739, _1740, _1741, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1770 = dot(vec4(cbModelParam._m0[39u]), vec4(_1739, _1740, _1741, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1793;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1784 = dot(vec4(cbModelParam._m0[40u]), vec4(_1739, _1740, _1741, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1797 = (_1793 * cbModelParam._m0[1u].x) + (_1782 * (1.0 - cbModelParam._m0[1u].x));
    float _1807 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1807 : min(cbModelParam._m0[25u].z, _1807));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1028, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1028, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1028, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1869 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1872 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1900 = frontier_phi_17_15_ladder;
        }
        float _2071;
        if (_1869 > 0.0)
        {
            _2071 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2071 = frontier_phi_26_22_ladder;
        }
        float _2367;
        if (_1872 > 0.0)
        {
            _2367 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2367 = frontier_phi_38_33_ladder;
        }
        float _2369 = isnan(_2071) ? _1900 : (isnan(_1900) ? _2071 : min(_1900, _2071));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1866) + _1855;
        float _2375 = (_2370 * _1869) + _1859;
        float _2376 = (_2370 * _1872) + _1863;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1808);
            frontier_phi_16_38_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_16_38_ladder_2;
        _1890 = frontier_phi_16_38_ladder_1;
        _1892 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1808);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1028, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1028, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1028, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1964 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1967 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2076;
        if (_1961 > 0.0)
        {
            _2076 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2076 = frontier_phi_28_24_ladder;
        }
        float _2394;
        if (_1964 > 0.0)
        {
            _2394 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2394 = frontier_phi_40_35_ladder;
        }
        float _2732;
        if (_1967 > 0.0)
        {
            _2732 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2732 = frontier_phi_50_47_ladder;
        }
        float _2734 = isnan(_2394) ? _2076 : (isnan(_2076) ? _2394 : min(_2076, _2394));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _1961) + _1950;
        float _2740 = (_2735 * _1964) + _1954;
        float _2741 = (_2735 * _1967) + _1958;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_25_50_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_25_50_ladder_2;
        _1988 = frontier_phi_25_50_ladder_1;
        _1990 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1897);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2003 = (((_991 * _942) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2005 = (((_991 * _944) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2007 = (((_991 * _945) + _992) * _957) * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2063 = _2050 / _2062;
    float _2064 = _2054 / _2062;
    float _2065 = _2058 / _2062;
    float _2212;
    float _2213;
    float _2214;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2092 = ((uint(_2065 > cbSceneParam._m0[59u].y) + uint(_2065 > cbSceneParam._m0[59u].x)) + uint(_2065 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2093 = _2092 + 43u;
        uint _2101 = _2092 + 44u;
        uint _2109 = _2092 + 45u;
        uint _2117 = _2092 + 46u;
        float _2128 = fma(_2062, cbSceneParam._m0[_2093].w, fma(_2058, cbSceneParam._m0[_2093].z, fma(_2054, cbSceneParam._m0[_2093].y, _2050 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2062, cbSceneParam._m0[_2101].w, fma(_2058, cbSceneParam._m0[_2101].z, fma(_2054, cbSceneParam._m0[_2101].y, _2050 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2062, cbSceneParam._m0[_2117].w, fma(_2058, cbSceneParam._m0[_2117].z, fma(_2054, cbSceneParam._m0[_2117].y, _2050 * cbSceneParam._m0[_2117].x)));
        float _2145 = cbSceneParam._m0[33u].z * _2140;
        float _2147 = cbSceneParam._m0[33u].w * _2140;
        float _2150 = fma(_2062, cbSceneParam._m0[_2109].w, fma(_2058, cbSceneParam._m0[_2109].z, fma(_2054, cbSceneParam._m0[_2109].y, _2050 * cbSceneParam._m0[_2109].x))) / _2140;
        float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
        float _4645 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2205 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2128) / _2140, (_2147 + _2132) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2128) / _2140, (_2132 - _2145) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2145) / _2140, (_2132 - _2147) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2147) / _2140, (_2145 + _2132) / _2140), _2150), 0.0)).x), vec4(0.25)));
        _2212 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
        _2213 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
        _2214 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2212 = 1.0;
        _2213 = 1.0;
        _2214 = 1.0;
    }
    float _2278;
    float _2280;
    float _2282;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2266 = fma(_2062, cbSceneParam._m0[63u].w, fma(_2058, cbSceneParam._m0[63u].z, fma(_2054, cbSceneParam._m0[63u].y, _2050 * cbSceneParam._m0[63u].x)));
        float _2267 = fma(_2062, cbSceneParam._m0[60u].w, fma(_2058, cbSceneParam._m0[60u].z, fma(_2054, cbSceneParam._m0[60u].y, _2050 * cbSceneParam._m0[60u].x))) / _2266;
        float _2268 = fma(_2062, cbSceneParam._m0[61u].w, fma(_2058, cbSceneParam._m0[61u].z, fma(_2054, cbSceneParam._m0[61u].y, _2050 * cbSceneParam._m0[61u].x))) / _2266;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2267 >= cbSceneParam._m0[64u].x) && (_2268 >= cbSceneParam._m0[64u].y)) && (_2267 <= cbSceneParam._m0[64u].z)) && (_2268 <= cbSceneParam._m0[64u].w))
        {
            float _2407 = fma(_2062, cbSceneParam._m0[62u].w, fma(_2058, cbSceneParam._m0[62u].z, fma(_2054, cbSceneParam._m0[62u].y, _2050 * cbSceneParam._m0[62u].x))) / _2266;
            float _2411 = isnan(cbSceneParam._m0[41u].w) ? _2407 : (isnan(_2407) ? cbSceneParam._m0[41u].w : max(_2407, cbSceneParam._m0[41u].w));
            float _2454 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
            float _4661 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
            float _2461 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2267, cbSceneParam._m0[33u].w + _2268), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2267, _2268 - cbSceneParam._m0[33u].z), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].z, _2268 - cbSceneParam._m0[33u].w), _2411), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2268), _2411), 0.0)).x), vec4(0.25)));
            float _2465 = 1.0 - (_2461 * cbSceneParam._m0[34u].x);
            float _2466 = 1.0 - (_2461 * cbSceneParam._m0[34u].y);
            float _2467 = 1.0 - (_2461 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2467) ? _2214 : (isnan(_2214) ? _2467 : min(_2214, _2467));
            frontier_phi_37_36_ladder_1 = isnan(_2466) ? _2213 : (isnan(_2213) ? _2466 : min(_2213, _2466));
            frontier_phi_37_36_ladder_2 = isnan(_2465) ? _2212 : (isnan(_2212) ? _2465 : min(_2212, _2465));
        }
        else
        {
            frontier_phi_37_36_ladder = _2214;
            frontier_phi_37_36_ladder_1 = _2213;
            frontier_phi_37_36_ladder_2 = _2212;
        }
        _2278 = frontier_phi_37_36_ladder_2;
        _2280 = frontier_phi_37_36_ladder_1;
        _2282 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2278 = _2212;
        _2280 = _2213;
        _2282 = _2214;
    }
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_917 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _957 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2326 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2330 = _2289 | 1u;
    float _2341 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_778, _779, _780));
    float _2344 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_778, _779, _780));
    float _4697 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _4708 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2351 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * 0.3183098733425140380859375;
    float _2358 = ((cbLight._m0[_2306].x * _2312) * _2351) + (((cbLight._m0[_2316].x * _2278) * _2326) * _2349);
    float _2359 = ((_2312 * cbLight._m0[_2306].y) * _2351) + (((cbLight._m0[_2316].y * _2280) * _2326) * _2349);
    float _2360 = ((_2312 * cbLight._m0[_2306].z) * _2351) + (((cbLight._m0[_2316].z * _2282) * _2326) * _2349);
    uvec4 _2364 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2366 = _2364.x == 0u;
    float _2468;
    float _2470;
    float _2472;
    if (_2366)
    {
        _2468 = _2358;
        _2470 = _2359;
        _2472 = _2360;
    }
    else
    {
        uint _2476 = _2289 + 6u;
        float _2492 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4719 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2495 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2468 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2358;
        _2470 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2359;
        _2472 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2360;
    }
    bool _2475 = _2364.y == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2475)
    {
        _2530 = _2468;
        _2532 = _2470;
        _2534 = _2472;
    }
    else
    {
        uint _2703 = _2289 + 7u;
        float _2719 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2720 = _2719 * _2719;
        float _4735 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2721 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2722 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2530 = (((cbLight._m0[_2703].x * 0.3183098733425140380859375) * _2721) * _2722) + _2468;
        _2532 = (((cbLight._m0[_2703].y * 0.3183098733425140380859375) * _2721) * _2722) + _2470;
        _2534 = (((cbLight._m0[_2703].z * 0.3183098733425140380859375) * _2721) * _2722) + _2472;
    }
    uint _2537 = _2289 + 8u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _781) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2289].x + _858;
    float _2553 = cbLight._m0[_2289].y + _859;
    float _2554 = cbLight._m0[_2289].z + _860;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2289].xyz));
    float _4751 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _4762 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2566 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2567 = dot(vec3(_778, _779, _780), vec3(_2559, _2560, _2561));
    float _4773 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2571 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2559, _2560, _2561));
    float _4784 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = _2551 * _2551;
    float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2588 = 0.959999978542327880859375 - _939;
    float _2590 = 0.959999978542327880859375 - _940;
    float _2591 = 0.959999978542327880859375 - _941;
    float _2598 = 1.0 - _2551;
    float _2609 = (0.5 / (((_2566 * ((_2565 * _2598) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2598) + _2551) * _2565))) * _2565;
    float _4795 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
    uint _2625 = _2289 + 9u;
    float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _781) * 0.949999988079071044921875);
    float _2637 = _2636 * _2636;
    float _2638 = cbLight._m0[_2330].x + _858;
    float _2639 = cbLight._m0[_2330].y + _859;
    float _2640 = cbLight._m0[_2330].z + _860;
    float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
    float _2645 = _2644 * _2638;
    float _2646 = _2644 * _2639;
    float _2647 = _2644 * _2640;
    float _2648 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2330].xyz));
    float _4806 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2652 = dot(vec3(_778, _779, _780), vec3(_2645, _2646, _2647));
    float _4817 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _2656 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2645, _2646, _2647));
    float _4828 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2660 = _2637 * _2637;
    float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
    float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
    float _2678 = 1.0 - _2637;
    float _2688 = (0.5 / (((_2566 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2678) + _2637) * _2651))) * _2651;
    float _4839 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2690 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
    float _2700 = (((((_2671 * _2588) + _942) * cbLight._m0[_2625].x) * _2690) * _2312) + ((((cbLight._m0[_2537].x * _2278) * ((_2587 * _2588) + _942)) * _2611) * _2326);
    float _2701 = (((((_2671 * _2590) + _944) * cbLight._m0[_2625].y) * _2690) * _2312) + ((((cbLight._m0[_2537].y * _2280) * ((_2587 * _2590) + _944)) * _2611) * _2326);
    float _2702 = (((((_2671 * _2591) + _945) * cbLight._m0[_2625].z) * _2690) * _2312) + ((((cbLight._m0[_2537].z * _2282) * ((_2587 * _2591) + _945)) * _2611) * _2326);
    float _2758;
    float _2760;
    float _2762;
    if (_2366)
    {
        _2758 = _2700;
        _2760 = _2701;
        _2762 = _2702;
    }
    else
    {
        uint _2764 = _2289 + 2u;
        uint _2768 = _2289 + 10u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _781) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _858;
        float _2785 = cbLight._m0[_2764].y + _859;
        float _2786 = cbLight._m0[_2764].z + _860;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2764].xyz));
        float _4850 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2798 = dot(vec3(_778, _779, _780), vec3(_2791, _2792, _2793));
        float _4861 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4872 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2566 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2824) + _2783) * _2797))) * _2797;
        float _4883 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2758 = (((((_2817 * _2588) + _942) * cbLight._m0[_2768].x) * _2836) * _2837) + _2700;
        _2760 = (((((_2817 * _2590) + _944) * cbLight._m0[_2768].y) * _2836) * _2837) + _2701;
        _2762 = (((((_2817 * _2591) + _945) * cbLight._m0[_2768].z) * _2836) * _2837) + _2702;
    }
    float _2868;
    float _2870;
    float _2872;
    if (_2475)
    {
        _2868 = _2758;
        _2870 = _2760;
        _2872 = _2762;
    }
    else
    {
        uint _2879 = _2289 + 3u;
        uint _2883 = _2289 + 11u;
        float _2897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2879].w)) * _781) * 0.949999988079071044921875);
        float _2898 = _2897 * _2897;
        float _2899 = cbLight._m0[_2879].x + _858;
        float _2900 = cbLight._m0[_2879].y + _859;
        float _2901 = cbLight._m0[_2879].z + _860;
        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
        float _2906 = _2905 * _2899;
        float _2907 = _2905 * _2900;
        float _2908 = _2905 * _2901;
        float _2909 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2879].xyz));
        float _4899 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2913 = dot(vec3(_778, _779, _780), vec3(_2906, _2907, _2908));
        float _4910 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2917 = dot(vec3(cbLight._m0[_2879].xyz), vec3(_2906, _2907, _2908));
        float _4921 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2921 = _2898 * _2898;
        float _2925 = ((_2916 * _2916) * (_2921 + (-1.0))) + 1.0;
        float _2932 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
        float _2939 = 1.0 - _2898;
        float _2949 = (0.5 / (((_2566 * ((_2912 * _2939) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2566 * _2939) + _2898) * _2912))) * _2912;
        float _4932 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2921 / ((_2925 * _2925) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2868 = (((((_2932 * _2588) + _942) * cbLight._m0[_2883].x) * _2951) * _2952) + _2758;
        _2870 = (((((_2932 * _2590) + _944) * cbLight._m0[_2883].y) * _2951) * _2952) + _2760;
        _2872 = (((((_2932 * _2591) + _945) * cbLight._m0[_2883].z) * _2951) * _2952) + _2762;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2287.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _879) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _878) / _2974)));
        float _2995 = (log2(_2065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
        }
        else
        {
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            uint _3297 = 0u;
            uint _3306;
            bool _3307;
            for (;;)
            {
                _3306 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                _3307 = _3306 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3307)
                {
                    frontier_phi_71_pred = _3296;
                    frontier_phi_71_pred_1 = _3295;
                    frontier_phi_71_pred_2 = _3294;
                    frontier_phi_71_pred_3 = _3293;
                    frontier_phi_71_pred_4 = _3292;
                    frontier_phi_71_pred_5 = _3291;
                }
                else
                {
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    uint _3442;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3306;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    for (;;)
                    {
                        uint _3446 = uint(findLSB(_3442)) + (_3297 << 5u);
                        uint _3443 = (_3442 + 4294967295u) & _3442;
                        uint _3448 = _3446 * 48u;
                        vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 3u)).x));
                        uint _3468 = (_3446 * 48u) + 4u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3468)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 3u)).x));
                        uint _3487 = (_3446 * 48u) + 8u;
                        vec3 _3498 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x));
                        float _3502 = _3462.x - _2063;
                        float _3503 = _3462.y - _2064;
                        float _3504 = _3462.z - _2065;
                        float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                        float _3508 = inversesqrt(_3505);
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3512 = dot(vec3(_898, _901, _904), vec3(_3509, _3510, _3511));
                        float _3517 = 1.0 - (_3505 * _3462.w);
                        float _4958 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3519 = sqrt(_3505) * _3481.w;
                        float _3522 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                        float _3523 = _3522 * _3522;
                        float _3526 = ((1.0 - _3523) * _3512) + _3523;
                        float _3529 = _3519 * _3519;
                        float _3533 = ((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3518) / ((_3529 * 0.699999988079071044921875) + 1.0);
                        float _3537 = (-0.0) - _2063;
                        float _3538 = (-0.0) - _2064;
                        float _3539 = (-0.0) - _2065;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3544 = _3543 * _3537;
                        float _3545 = _3543 * _3538;
                        float _3546 = _3543 * _3539;
                        float _3553 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                        float _3554 = 1.0 - _973;
                        float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                        float _3562 = _3561 * _3561;
                        float _3563 = _3562 * _3562;
                        float _3564 = _3544 + _3509;
                        float _3565 = _3545 + _3510;
                        float _3566 = _3546 + _3511;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3574 = dot(vec3(_898, _901, _904), vec3(_3544, _3545, _3546));
                        float _4974 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3578 = dot(vec3(_898, _901, _904), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                        float _4985 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                        float _3586 = _3522 * _3562;
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3512) + _3587;
                        float _4996 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                        float _3592 = 1.0 - _3562;
                        float _3602 = (0.5 / (((_3591 * ((_3577 * _3592) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3562) * _3577))) * _3591;
                        float _5007 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3613 = (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3585 * _3585) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125))) * _3518;
                        _3366 = (_3533 * _3481.x) + _3439;
                        _3367 = (_3533 * _3481.y) + _3440;
                        _3368 = (_3533 * _3481.z) + _3441;
                        _3363 = (_3613 * _3498.x) + _3436;
                        _3364 = (_3613 * _3498.y) + _3437;
                        _3365 = (_3613 * _3498.z) + _3438;
                        if (_3443 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3443;
                        }
                    }
                    frontier_phi_71_pred = _3368;
                    frontier_phi_71_pred_1 = _3367;
                    frontier_phi_71_pred_2 = _3366;
                    frontier_phi_71_pred_3 = _3365;
                    frontier_phi_71_pred_4 = _3364;
                    frontier_phi_71_pred_5 = _3363;
                }
                _3141 = frontier_phi_71_pred;
                _3139 = frontier_phi_71_pred_1;
                _3137 = frontier_phi_71_pred_2;
                _3135 = frontier_phi_71_pred_3;
                _3133 = frontier_phi_71_pred_4;
                _3131 = frontier_phi_71_pred_5;
                uint _3298 = _3297 + 1u;
                if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3291 = _3131;
                    _3292 = _3133;
                    _3293 = _3135;
                    _3294 = _3137;
                    _3295 = _3139;
                    _3296 = _3141;
                    _3297 = _3298;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
        }
        uvec4 _3144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3145 = _3144.z;
        uint _3147 = (_3145 >> 8u) & 15u;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        if (((4294967295u << _3147) & _3005) == 0u)
        {
            _3259 = _3130;
            _3261 = _3132;
            _3263 = _3134;
            _3265 = _3136;
            _3267 = _3138;
            _3269 = _3140;
        }
        else
        {
            float _3284 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
            float _3285 = _3284 * _2063;
            float _3286 = _3284 * _2064;
            float _3287 = _3284 * _2065;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3147 < ((_3145 >> 12u) & 15u))
            {
                float _3260;
                float _3262;
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3419 = _3130;
                float _3420 = _3132;
                float _3421 = _3134;
                float _3422 = _3136;
                float _3423 = _3138;
                float _3424 = _3140;
                uint _3425 = _3147;
                uint _3434;
                bool _3435;
                for (;;)
                {
                    _3434 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3425 << 2u)) >> 2u)).x;
                    _3435 = _3434 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3435)
                    {
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    else
                    {
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        uint _3646 = _3434;
                        uint _3647;
                        vec4 _3672;
                        float _3673;
                        vec4 _3688;
                        vec3 _3700;
                        vec4 _3715;
                        vec4 _3730;
                        float _3777;
                        bool _3778;
                        for (;;)
                        {
                            uint _3657 = ((_3425 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3646));
                            _3647 = (_3646 + 4294967295u) & _3646;
                            uint _3659 = _3657 * 40u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3673 = _3672.w;
                            uint _3675 = (_3657 * 40u) + 4u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3657 * 40u) + 8u;
                            _3700 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x));
                            uint _3702 = (_3657 * 40u) + 16u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3657 * 40u) + 20u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3733 = (_3657 * 40u) + 24u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3752 = (_3657 * 40u) + 28u;
                            vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3777 = fma(_2065, _3765.z, fma(_2064, _3765.y, _3765.x * _2063)) + _3765.w;
                            _3778 = !((fma(_2065, _3746.z, fma(_2064, _3746.y, _3746.x * _2063)) + _3746.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3778)
                            {
                                float _3805 = _3672.x - _2063;
                                float _3806 = _3672.y - _2064;
                                float _3807 = _3672.z - _2065;
                                float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                                float _3811 = inversesqrt(_3808);
                                float _3812 = _3811 * _3805;
                                float _3813 = _3811 * _3806;
                                float _3814 = _3811 * _3807;
                                float _3818 = 1.0 - (_3808 / (_3673 * _3673));
                                float _5018 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3823 = sqrt(_3808) * _3688.w;
                                float _3825 = 1.39999997615814208984375 / (_3823 + 1.39999997615814208984375);
                                float _3826 = _3825 * _3825;
                                float _3829 = ((1.0 - _3826) * dot(vec3(_3812, _3813, _3814), vec3(_898, _901, _904))) + _3826;
                                float _3832 = _3823 * _3823;
                                float _3836 = (fma(_2065, _3715.z, fma(_2064, _3715.y, _3715.x * _2063)) + _3715.w) / _3777;
                                float _3837 = (fma(_2065, _3730.z, fma(_2064, _3730.y, _3730.x * _2063)) + _3730.w) / _3777;
                                float _3841 = 1.0 - dot(vec2(_3836, _3837), vec2(_3836, _3837));
                                float _5034 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3843 = _3842 * (((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3819) / ((_3832 * 0.699999988079071044921875) + 1.0));
                                float _3855 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                                float _3856 = 1.0 - _973;
                                float _3863 = sqrt(1.0 - ((1.0 - (_3856 * _3856)) * (1.0 - (_3855 * _3855))));
                                float _3864 = _3863 * _3863;
                                float _3865 = _3864 * _3864;
                                float _3866 = _3812 - _3285;
                                float _3867 = _3813 - _3286;
                                float _3868 = _3814 - _3287;
                                float _3872 = inversesqrt(dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868)));
                                float _3876 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3285, (-0.0) - _3286, (-0.0) - _3287));
                                float _5045 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3880 = dot(vec3(_898, _901, _904), vec3(_3872 * _3866, _3872 * _3867, _3872 * _3868));
                                float _5056 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3883 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3887 = ((_3883 * _3883) * (_3865 + (-1.0))) + 1.0;
                                float _3888 = _3825 * _3864;
                                float _3889 = _3888 * _3888;
                                float _3895 = ((1.0 - _3889) * dot(vec3(_898, _901, _904), vec3(_3812, _3813, _3814))) + _3889;
                                float _5067 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3897 = 1.0 - _3864;
                                float _3907 = (0.5 / (((_3896 * ((_3879 * _3897) + _3864)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3864) * _3879))) * _3896;
                                float _5078 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3917 = (_3842 * _3819) * (((_3865 * 3.1415927410125732421875) * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) / ((_3887 * _3887) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3843 * _3688.z;
                                frontier_phi_88_pred_1 = _3843 * _3688.y;
                                frontier_phi_88_pred_2 = _3843 * _3688.x;
                                frontier_phi_88_pred_3 = _3917 * _3700.z;
                                frontier_phi_88_pred_4 = _3917 * _3700.y;
                                frontier_phi_88_pred_5 = _3917 * _3700.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3926 = frontier_phi_88_pred;
                            _3925 = frontier_phi_88_pred_1;
                            _3924 = frontier_phi_88_pred_2;
                            _3923 = frontier_phi_88_pred_3;
                            _3922 = frontier_phi_88_pred_4;
                            _3921 = frontier_phi_88_pred_5;
                            _3630 = _3924 + _3643;
                            _3631 = _3925 + _3644;
                            _3632 = _3926 + _3645;
                            _3627 = _3921 + _3640;
                            _3628 = _3922 + _3641;
                            _3629 = _3923 + _3642;
                            if (_3647 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3647;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3632;
                        frontier_phi_82_pred_1 = _3631;
                        frontier_phi_82_pred_2 = _3630;
                        frontier_phi_82_pred_3 = _3629;
                        frontier_phi_82_pred_4 = _3628;
                        frontier_phi_82_pred_5 = _3627;
                    }
                    _3270 = frontier_phi_82_pred;
                    _3268 = frontier_phi_82_pred_1;
                    _3266 = frontier_phi_82_pred_2;
                    _3264 = frontier_phi_82_pred_3;
                    _3262 = frontier_phi_82_pred_4;
                    _3260 = frontier_phi_82_pred_5;
                    uint _3426 = _3425 + 1u;
                    if (_3426 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3419 = _3260;
                        _3420 = _3262;
                        _3421 = _3264;
                        _3422 = _3266;
                        _3423 = _3268;
                        _3424 = _3270;
                        _3425 = _3426;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3266;
                frontier_phi_63_64_ladder_1 = _3270;
                frontier_phi_63_64_ladder_2 = _3268;
                frontier_phi_63_64_ladder_3 = _3264;
                frontier_phi_63_64_ladder_4 = _3262;
                frontier_phi_63_64_ladder_5 = _3260;
            }
            else
            {
                frontier_phi_63_64_ladder = _3136;
                frontier_phi_63_64_ladder_1 = _3140;
                frontier_phi_63_64_ladder_2 = _3138;
                frontier_phi_63_64_ladder_3 = _3134;
                frontier_phi_63_64_ladder_4 = _3132;
                frontier_phi_63_64_ladder_5 = _3130;
            }
            _3259 = frontier_phi_63_64_ladder_5;
            _3261 = frontier_phi_63_64_ladder_4;
            _3263 = frontier_phi_63_64_ladder_3;
            _3265 = frontier_phi_63_64_ladder;
            _3267 = frontier_phi_63_64_ladder_2;
            _3269 = frontier_phi_63_64_ladder_1;
        }
        float _3274 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _3018 = (_3274 * _3265) + _2530;
        _3020 = (_3274 * _3267) + _2532;
        _3022 = (_3274 * _3269) + _2534;
        _3024 = ((_3259 * _942) * _3274) + _2868;
        _3026 = ((_3261 * _944) * _3274) + _2870;
        _3028 = ((_3263 * _945) * _3274) + _2872;
    }
    else
    {
        _3018 = _2530;
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2868;
        _3026 = _2870;
        _3028 = _2872;
    }
    uint _3034 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _3040 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3046 = (((((_3040 * cbMtdParam._m0[14u].x) * _663.x) * _686) * _764) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_3034].x;
    float _3052 = (((((_3040 * cbMtdParam._m0[14u].y) * _663.y) * _686) * _764) * (((1.0 - _741) * cbMtdParam._m0[20u].w) + _741)) * cbInstanceData._m0[_3034].y;
    float _3058 = (((((_3040 * cbMtdParam._m0[14u].z) * _663.z) * _686) * _764) * (((1.0 - _743) * cbMtdParam._m0[20u].w) + _743)) * cbInstanceData._m0[_3034].z;
    float _5094 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _5105 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _5116 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _3075 = (((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3018 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _957))) + ((_3024 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + _3046;
    float _3077 = (_3052 + ((_3026 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3020 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _957)));
    float _3079 = (_3058 + ((_3028 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1797)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * (_3022 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _957)));
    float _3080 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
    float _3081 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
    float _3082 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
    float _3088 = cbMtdParam._m0[2u].x * _3046;
    float _3089 = cbMtdParam._m0[2u].y * _3052;
    float _3090 = cbMtdParam._m0[2u].z * _3058;
    float _5142 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3092 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
    uint _3093 = _917 + 6u;
    float _3101 = _878 / cbSceneParam._m0[86u].x;
    float _3102 = _879 / cbSceneParam._m0[86u].y;
    vec4 _3116 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3118 = _3116.x;
    float _3119 = _3116.y;
    float _3120 = _3116.z;
    float _3121 = _3116.w;
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3155 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3156 = _3155 / _801;
        float _3167 = _3156 * _851;
        float _3168 = _852 * _3156;
        float _3169 = (-0.0) - _3168;
        float _3170 = _3156 * _853;
        float _3172 = (cbSceneParam._m0[77u].w * _3169) / _3155;
        float _3173 = _3172 + cbSceneParam._m0[79u].w;
        float _3174 = cbSceneParam._m0[79u].w - _3168;
        float _3180 = sqrt(((_3167 * _3167) + (_3168 * _3168)) + (_3170 * _3170));
        float _3183 = (1.0 - (cbSceneParam._m0[77u].w / _3155)) * _3180;
        float _3188 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3190 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3376;
        if (abs((_3169 - _3172) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3376 = ((((_3173 > 0.0) ? exp2(_3188 * _3173) : (2.0 - exp2(_3190 * _3173))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3183;
        }
        else
        {
            float _3320 = 1.0 / cbSceneParam._m0[80u].x;
            float _3321 = isnan(_3174) ? _3173 : (isnan(_3173) ? _3174 : max(_3173, _3174));
            float _3322 = isnan(_3174) ? _3173 : (isnan(_3173) ? _3174 : min(_3173, _3174));
            float _3331 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : min(_3321, 0.0));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            _3376 = ((abs(_3180 / _3169) * cbSceneParam._m0[80u].y) * ((((_3331 - _3332) * 2.0) - ((exp2(_3188 * (isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0)))) - exp2(_3188 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))))) * _3320)) - ((exp2(_3190 * _3331) - exp2(_3190 * _3332)) * _3320))) + (_3183 * cbSceneParam._m0[80u].z);
        }
        vec4 _3378 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, 1.0), 0.0);
        float _3387 = exp2((_3376 * (-1.44269502162933349609375)) * (1.0 - _3378.w));
        float _3388 = log2(_3387);
        float _3404 = log2(_3121);
        _3192 = (exp2(_3404 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].x)) * _3378.x) / cbSceneParam._m0[78u].x)) + _3118;
        _3194 = (exp2(_3404 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].y)) * _3378.y) / cbSceneParam._m0[78u].y)) + _3119;
        _3196 = (exp2(_3404 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].z)) * _3378.z) / cbSceneParam._m0[78u].z)) + _3120;
        _3198 = _3387 * _3121;
    }
    else
    {
        _3192 = _3118;
        _3194 = _3119;
        _3196 = _3120;
        _3198 = _3121;
    }
    bool _3414;
    vec4 _3208;
    vec4 _3230;
    float _3232;
    float _3236;
    float _3237;
    float _3238;
    float _3241;
    float _3244;
    float _3247;
    float _3248;
    bool _3258;
    for (;;)
    {
        _3208 = cbMatDynParam._m0[0u];
        float _3210 = roundEven(_3208.y);
        bool _3211 = _3210 == 3.0;
        float _3212 = log2(_3198);
        float _3216 = exp2(_3212 * cbSceneParam._m0[78u].x);
        float _3217 = exp2(_3212 * cbSceneParam._m0[78u].y);
        float _3218 = exp2(_3212 * cbSceneParam._m0[78u].z);
        float _3219 = _3216 * _3080;
        float _3220 = _3217 * _3081;
        float _3221 = _3218 * _3082;
        float _3228 = _867 + (-0.5);
        _3230 = cbMtdParam._m0[1u];
        _3232 = _3230.y * _3228;
        float _3235 = (_3210 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3236 = _3235 * (_3211 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3192)));
        _3237 = _3235 * (_3211 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3194)));
        _3238 = _3235 * (_3211 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3196)));
        _3241 = ((_3088 * _3092) * _3216) * _3235;
        _3244 = ((_3089 * _3092) * _3217) * _3235;
        _3247 = ((_3090 * _3092) * _3218) * _3235;
        _3248 = _3228 * 0.999000012874603271484375;
        _3258 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3258)
        {
            if ((cbInstanceData._m0[_917 + 7u].x + _3248) < 0.5)
            {
                _3414 = true;
                break;
            }
        }
        uint _3355 = _918 + uint(_3208.w);
        if ((cbInstanceData._m0[_3355].w < 1.0) && ((cbInstanceData._m0[_3355].w + _3248) < 0.5))
        {
            _3414 = true;
            break;
        }
        if ((_3232 + 1.0) < _3230.x)
        {
            _3414 = true;
            break;
        }
        _3414 = false;
        break;
    }
    float _3618;
    if (_3414)
    {
        discard_state = true;
        _3618 = 0.0;
    }
    else
    {
        _3618 = cbInstanceData._m0[_3093].w;
    }
    SV_Target.x = _3236;
    SV_Target.y = _3237;
    SV_Target.z = _3238;
    SV_Target.w = _3618;
    SV_Target_1.x = _3241;
    SV_Target_1.y = _3244;
    SV_Target_1.z = _3247;
    SV_Target_1.w = cbInstanceData._m0[_3093].w;
    discard_exit();
}


