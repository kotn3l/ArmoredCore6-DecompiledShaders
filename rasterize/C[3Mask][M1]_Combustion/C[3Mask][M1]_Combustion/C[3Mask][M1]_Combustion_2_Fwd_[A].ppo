#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1471;
float _3905;
float _3906;
float _3907;
float _3908;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _299 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _318 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _346 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _356 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _318.x) * 2.0) - _346)) + 1.0;
    float _3917 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _364 = (_357 * ((_299.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _365 = (_357 * ((_299.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _366 = (_357 * ((_299.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _384 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _397 = (((((1.0 - _318.y) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3928 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _405 = (((_384.x * cbMtdParam._m0[12u].x) - _364) * _398) + _364;
    float _406 = (_398 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _407 = (_398 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _425 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _438 = (((((1.0 - _318.z) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3939 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    vec4 _467 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _475 = ((((((_425.x * cbMtdParam._m0[13u].x) - _405) * _439) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _467.x;
    float _478 = ((((_439 * ((_425.y * cbMtdParam._m0[13u].y) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _467.y;
    float _481 = ((((_439 * ((_425.z * cbMtdParam._m0[13u].z) - _407)) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _467.z;
    vec4 _506 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _525 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _528 = _525.x + 0.00999999977648258209228515625;
    float _535 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _528)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3950 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _543 = (_536 * ((_506.x * cbMtdParam._m0[16u].x) - _475)) + _475;
    float _544 = (_536 * ((_506.y * cbMtdParam._m0[16u].y) - _478)) + _478;
    float _545 = (_536 * ((_506.z * cbMtdParam._m0[16u].z) - _481)) + _481;
    vec4 _558 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = _558.x;
    float _577 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _560) * _357) + _560;
    float _594 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _577) * _398) + _577;
    float _611 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _594) * _439) + _594;
    float _613 = _611 - (_611 * TEXCOORD_8);
    vec4 _626 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    vec4 _663 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _674 = ((_663.x - _649) * _357) + _649;
    float _675 = ((_663.y - _650) * _357) + _650;
    float _676 = ((_663.z - _651) * _357) + _651;
    vec4 _689 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _700 = ((_689.x - _674) * _398) + _674;
    float _701 = ((_689.y - _675) * _398) + _675;
    float _702 = ((_689.z - _676) * _398) + _676;
    vec4 _715 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _728 = ((_715.z - _702) * _439) + _702;
    float _731 = ((((_715.x - _700) * _439) + _700) * 2.0) + (-1.0);
    float _732 = ((((_715.y - _701) * _439) + _701) * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3961 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _738 = sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))));
    float _743 = (((_626.z - _728) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _728;
    vec4 _773 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _787 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3972 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _796 = (((_788 * _788) * (3.0 - (_788 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _804 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _812 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3983 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _813 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _817 = (_813 * _813) * (3.0 - (_813 * 2.0));
    float _818 = _817 * cbMtdParam._m0[22u].x;
    float _819 = _817 * cbMtdParam._m0[22u].y;
    float _820 = sin(_804);
    float _821 = cos(_804);
    float _822 = TEXCOORD.z - _818;
    float _823 = TEXCOORD.w - _819;
    vec4 _843 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_818 + fma(_823, (-0.0) - _820, _822 * _821))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_823, _821, _822 * _820) + _819)) + cbTextureTilingScale._m0[2u].w));
    float _849 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _843.x;
    float _851 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _843.y;
    float _853 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _843.z;
    float _869 = (TEXCOORD_5.x - ((_528 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3994 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _876 = ((((_626.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _731;
    float _877 = ((((_626.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _732;
    float _880 = fma(_738, _243 * NORMAL.x, fma(_877, _250 * TANGENT.x, (_236 * _228) * _876));
    float _883 = fma(_738, _243 * NORMAL.y, fma(_877, _250 * TANGENT.y, (_236 * _229) * _876));
    float _886 = fma(_738, _243 * NORMAL.z, fma(_877, _250 * TANGENT.z, (_236 * _230) * _876));
    float _890 = inversesqrt(dot(vec3(_880, _883, _886), vec3(_880, _883, _886)));
    float _891 = _890 * _880;
    float _892 = _890 * _883;
    float _893 = _890 * _886;
    float _4005 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _894 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4027 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4038 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4049 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _898 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    vec4 _978 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _980 = _978.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1151 = sqrt(((_964 * _964) + (_965 * _965)) + (_966 * _966));
        float _1157 = (cbMatDynParam._m0[5u].x * _1151) + cbMatDynParam._m0[5u].y;
        float _4060 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1162 = (cbMatDynParam._m0[5u].z * _1151) + cbMatDynParam._m0[5u].w;
        float _4071 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) - _1158)) + _1158) < ((_980 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _991 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _992 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1010 = fma(_893, cbSceneParam._m0[5u].z, fma(_892, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _891));
    float _1013 = fma(_893, cbSceneParam._m0[6u].z, fma(_892, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _891));
    float _1016 = fma(_893, cbSceneParam._m0[7u].z, fma(_892, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _891));
    uint _1029 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1030 = _1029 + 9u;
    uint _1031 = _1030 + uint(cbMatDynParam._m0[0u].w);
    float _1037 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1031].x;
    float _1038 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1031].y;
    float _1039 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_1031].z;
    float _4082 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1043 = 1.0 - _898;
    float _1044 = _1040 * _1043;
    float _1045 = _1041 * _1043;
    float _1046 = _1042 * _1043;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _898;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _898;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _898;
    float _1054 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    vec4 _1066 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _991, cbSceneParam._m0[86u].y * _992));
    float _1069 = _1066.x * TEXCOORD_5.w;
    float _1070 = dot(vec3(_891, _892, _893), vec3(_971, _972, _973));
    float _1073 = _1070 * 2.0;
    float _1077 = (_1073 * _891) - _971;
    float _1078 = (_1073 * _892) - _972;
    float _1079 = (_1073 * _893) - _973;
    float _1083 = abs(dot(vec3(_971, _972, _973), vec3(_891, _892, _893)));
    float _4115 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1085 = sqrt(_894);
    float _1097 = exp2((_1085 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1085 * 3.0));
    float _1103 = (1.0 - _1097) * ((_1085 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1104 = _1097 * _1085;
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1140, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132));
        float _1199 = fma(_1140, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132));
        float _1203 = fma(_1140, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132));
        float _1228 = _1132 + _891;
        float _1229 = _1136 + _892;
        float _1230 = _1140 + _893;
        float _1240 = fma(_1230, cbModelParam._m0[26u].z, fma(_1229, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1228)) - _1195;
        float _1241 = fma(_1230, cbModelParam._m0[27u].z, fma(_1229, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1228)) - _1199;
        float _1242 = fma(_1230, cbModelParam._m0[28u].z, fma(_1229, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1228)) - _1203;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_891, _892, _893), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4163 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_891, _892, _893), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4196 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_891, _892, _893), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4229 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1514 = fma(_1140, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132));
        float _1518 = fma(_1140, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132));
        float _1522 = fma(_1140, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132));
        float _1545 = _1132 + _891;
        float _1546 = _1136 + _892;
        float _1547 = _1140 + _893;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1514;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1518;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1522;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1576 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1514 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1518 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1522 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        float _1613 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1580.x + (-0.5));
        float _1615 = _1613 * (_1580.y + (-0.5));
        float _1616 = _1613 * (_1580.z + (-0.5));
        float _1623 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1587.x + (-0.5));
        float _1625 = _1623 * (_1587.y + (-0.5));
        float _1626 = _1623 * (_1587.z + (-0.5));
        float _1633 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1594.x + (-0.5));
        float _1635 = _1633 * (_1594.y + (-0.5));
        float _1636 = _1633 * (_1594.z + (-0.5));
        float _1643 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1601.x + (-0.5));
        float _1645 = _1643 * (_1601.y + (-0.5));
        float _1646 = _1643 * (_1601.z + (-0.5));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = _1614 * 0.5;
        float _1651 = _1624 * 0.5;
        float _1652 = _1634 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_891, _892, _893), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4292 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1677 + 1.0))) + _1682) * _1647;
        float _1692 = _1615 * 0.5;
        float _1693 = _1625 * 0.5;
        float _1694 = _1635 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_891, _892, _893), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4325 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1719 + 1.0))) + _1724) * _1648;
        float _1734 = _1616 * 0.5;
        float _1735 = _1626 * 0.5;
        float _1736 = _1636 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_891, _892, _893), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4358 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1761 + 1.0))) + _1766) * _1649;
        _1783 = _1616;
        _1784 = _1615;
        _1785 = _1614;
        _1786 = _1626;
        _1787 = _1625;
        _1788 = _1624;
        _1789 = _1636;
        _1790 = _1635;
        _1791 = _1634;
        _1792 = _1649;
        _1793 = _1648;
        _1794 = _1647;
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
    }
    else
    {
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = _1471;
        _1790 = _1471;
        _1791 = _1471;
        _1792 = _1471;
        _1793 = _1471;
        _1794 = _1471;
        _1795 = 0.0;
        _1796 = 0.0;
        _1797 = 0.0;
    }
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1483)) + _1483;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1484)) + _1484;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1485)) + _1485;
    float _1830 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1807));
    float _1851 = _1077 * 0.5;
    float _1852 = _1078 * 0.5;
    float _1853 = _1079 * 0.5;
    float _1854 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1857 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1860 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1894;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1867 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1871 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1875 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1882 = dot(vec4(cbModelParam._m0[39u]), vec4(_1851, _1852, _1853, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1905;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1896 = dot(vec4(cbModelParam._m0[40u]), vec4(_1851, _1852, _1853, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1909 = (_1905 * cbModelParam._m0[1u].x) + (_1894 * (1.0 - cbModelParam._m0[1u].x));
    float _1919 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _894);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1919 : min(cbModelParam._m0[25u].z, _1919));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1140, cbModelParam._m0[13u].z, fma(_1136, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1132)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1140, cbModelParam._m0[14u].z, fma(_1136, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1132)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1140, cbModelParam._m0[15u].z, fma(_1136, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1132)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1079, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077));
        float _1981 = fma(_1079, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077));
        float _1984 = fma(_1079, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2012 = frontier_phi_17_15_ladder;
        }
        float _2214;
        if (_1981 > 0.0)
        {
            _2214 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2214 = frontier_phi_26_22_ladder;
        }
        float _2468;
        if (_1984 > 0.0)
        {
            _2468 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2468 = frontier_phi_38_33_ladder;
        }
        float _2470 = isnan(_2214) ? _2012 : (isnan(_2012) ? _2214 : min(_2012, _2214));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1978) + _1967;
        float _2476 = (_2471 * _1981) + _1971;
        float _2477 = (_2471 * _1984) + _1975;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1920);
            frontier_phi_16_38_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_16_38_ladder_2;
        _2002 = frontier_phi_16_38_ladder_1;
        _2004 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1077, _1078, _1079), _1920);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _894);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1140, cbModelParam._m0[21u].z, fma(_1136, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1132)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1140, cbModelParam._m0[22u].z, fma(_1136, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1132)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1140, cbModelParam._m0[23u].z, fma(_1136, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1132)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1079, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077));
        float _2076 = fma(_1079, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077));
        float _2079 = fma(_1079, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077));
        float _2219;
        if (_2073 > 0.0)
        {
            _2219 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2219 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2076 > 0.0)
        {
            _2495 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2708;
        if (_2079 > 0.0)
        {
            _2708 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2708 = frontier_phi_49_46_ladder;
        }
        float _2710 = isnan(_2495) ? _2219 : (isnan(_2219) ? _2495 : min(_2219, _2495));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _2073) + _2062;
        float _2716 = (_2711 * _2076) + _2066;
        float _2717 = (_2711 * _2079) + _2070;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_25_49_ladder = _2961.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2961.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2961.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_25_49_ladder_2;
        _2100 = frontier_phi_25_49_ladder_1;
        _2102 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1077, _1078, _1079), _2009);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2115 = (((_1103 * _1054) + _1104) * _1069) * ((cbModelParam._m0[1u].w * (_2098 - _2000)) + _2000);
    float _2117 = (((_1103 * _1056) + _1104) * _1069) * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2119 = (((_1103 * _1057) + _1104) * _1069) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    uvec4 _2138 = floatBitsToUint(cbInstanceData._m0[_1029 + 5u]);
    uint _2140 = _2138.x * 14u;
    uint _2141 = _2140 + 13u;
    float _2148 = _1069 + (-1.0);
    float _2153 = (cbLight._m0[_2141].x * _2148) + 1.0;
    float _2154 = (cbLight._m0[_2141].y * _2148) + 1.0;
    float _2155 = (cbLight._m0[_2141].z * _2148) + 1.0;
    float _2156 = (cbLight._m0[_2141].w * _2148) + 1.0;
    uint _2157 = _2140 + 5u;
    float _2163 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2167 = _2140 + 4u;
    float _2173 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2177 = _2140 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_891, _892, _893));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_891, _892, _893));
    float _4494 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4505 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2157].x * _2163) * _2198) + ((cbLight._m0[_2167].x * _2173) * _2196);
    float _2206 = ((_2163 * cbLight._m0[_2157].y) * _2198) + ((_2173 * cbLight._m0[_2167].y) * _2196);
    float _2207 = ((_2163 * cbLight._m0[_2157].z) * _2198) + ((_2173 * cbLight._m0[_2167].z) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2140 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2213)
    {
        _2224 = _2205;
        _2226 = _2206;
        _2228 = _2207;
    }
    else
    {
        uint _2232 = _2140 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2140 + 2u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4516 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2251 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2205;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2206;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2207;
    }
    bool _2231 = _2211.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2231)
    {
        _2269 = _2224;
        _2271 = _2226;
        _2273 = _2228;
    }
    else
    {
        uint _2439 = _2140 + 7u;
        float _2455 = (dot(vec3(cbLight._m0[_2140 + 3u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4532 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2458 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2269 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2224;
        _2271 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2226;
        _2273 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2228;
    }
    uint _2276 = _2140 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _894) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2140].x + _971;
    float _2292 = cbLight._m0[_2140].y + _972;
    float _2293 = cbLight._m0[_2140].z + _973;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2140].xyz));
    float _4548 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _4559 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2305 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2306 = dot(vec3(_891, _892, _893), vec3(_2298, _2299, _2300));
    float _4570 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2298, _2299, _2300));
    float _4581 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _1051;
    float _2329 = 0.959999978542327880859375 - _1052;
    float _2330 = 0.959999978542327880859375 - _1053;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4592 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2361 = _2140 + 9u;
    float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _894) * 0.949999988079071044921875);
    float _2373 = _2372 * _2372;
    float _2374 = cbLight._m0[_2177].x + _971;
    float _2375 = cbLight._m0[_2177].y + _972;
    float _2376 = cbLight._m0[_2177].z + _973;
    float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
    float _2381 = _2380 * _2374;
    float _2382 = _2380 * _2375;
    float _2383 = _2380 * _2376;
    float _2384 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2177].xyz));
    float _4603 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2388 = dot(vec3(_891, _892, _893), vec3(_2381, _2382, _2383));
    float _4614 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2381, _2382, _2383));
    float _4625 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2373 * _2373;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2414 = 1.0 - _2373;
    float _2424 = (0.5 / (((_2305 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2414) + _2373) * _2387))) * _2387;
    float _4636 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    float _2436 = (((((_2407 * _2327) + _1054) * cbLight._m0[_2361].x) * _2426) * _2163) + (((((_2326 * _2327) + _1054) * cbLight._m0[_2276].x) * _2350) * _2173);
    float _2437 = (((((_2407 * _2329) + _1056) * cbLight._m0[_2361].y) * _2426) * _2163) + (((((_2326 * _2329) + _1056) * cbLight._m0[_2276].y) * _2350) * _2173);
    float _2438 = (((((_2407 * _2330) + _1057) * cbLight._m0[_2361].z) * _2426) * _2163) + (((((_2326 * _2330) + _1057) * cbLight._m0[_2276].z) * _2350) * _2173);
    float _2500;
    float _2502;
    float _2504;
    if (_2213)
    {
        _2500 = _2436;
        _2502 = _2437;
        _2504 = _2438;
    }
    else
    {
        uint _2506 = _2140 + 2u;
        uint _2510 = _2140 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _894) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _971;
        float _2527 = cbLight._m0[_2506].y + _972;
        float _2528 = cbLight._m0[_2506].z + _973;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2506].xyz));
        float _4647 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2540 = dot(vec3(_891, _892, _893), vec3(_2533, _2534, _2535));
        float _4658 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4669 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2305 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2566) + _2525) * _2539))) * _2539;
        float _4680 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2500 = (((((_2559 * _2327) + _1054) * cbLight._m0[_2510].x) * _2578) * _2579) + _2436;
        _2502 = (((((_2559 * _2329) + _1056) * cbLight._m0[_2510].y) * _2578) * _2579) + _2437;
        _2504 = (((((_2559 * _2330) + _1057) * cbLight._m0[_2510].z) * _2578) * _2579) + _2438;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2231)
    {
        _2614 = _2500;
        _2616 = _2502;
        _2618 = _2504;
    }
    else
    {
        uint _2625 = _2140 + 3u;
        uint _2629 = _2140 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _894) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _971;
        float _2646 = cbLight._m0[_2625].y + _972;
        float _2647 = cbLight._m0[_2625].z + _973;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2625].xyz));
        float _4696 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2659 = dot(vec3(_891, _892, _893), vec3(_2652, _2653, _2654));
        float _4707 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4718 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2305 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2685) + _2644) * _2658))) * _2658;
        float _4729 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2614 = (((((_2678 * _2327) + _1054) * cbLight._m0[_2629].x) * _2697) * _2698) + _2500;
        _2616 = (((((_2678 * _2329) + _1056) * cbLight._m0[_2629].y) * _2697) * _2698) + _2502;
        _2618 = (((((_2678 * _2330) + _1057) * cbLight._m0[_2629].z) * _2697) * _2698) + _2504;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2138.y == 0u)
    {
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2773;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2773;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2773;
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _992) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _991) / _2789)));
        float _2810 = (log2(_2776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
        }
        else
        {
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3143)
                {
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2774;
                        float _3339 = _3298.y - _2775;
                        float _3340 = _3298.z - _2776;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1010, _1013, _1016), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4755 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2774;
                        float _3374 = (-0.0) - _2775;
                        float _3375 = (-0.0) - _2776;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1085;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1010, _1013, _1016), vec3(_3380, _3381, _3382));
                        float _4771 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3415 = dot(vec3(_1010, _1013, _1016), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4782 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4793 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4804 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3450 * _3334.x) + _3272;
                        _3200 = (_3450 * _3334.y) + _3273;
                        _3201 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                _2967 = frontier_phi_66_pred;
                _2977 = frontier_phi_66_pred_1;
                _2975 = frontier_phi_66_pred_2;
                _2973 = frontier_phi_66_pred_3;
                _2971 = frontier_phi_66_pred_4;
                _2969 = frontier_phi_66_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2967;
                    _3128 = _2969;
                    _3129 = _2971;
                    _3130 = _2973;
                    _3131 = _2975;
                    _3132 = _2977;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
        }
        uvec4 _2980 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2981 = _2980.z;
        uint _2983 = (_2981 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2983) & _2820) == 0u)
        {
            _3095 = _2966;
            _3097 = _2968;
            _3099 = _2970;
            _3101 = _2972;
            _3103 = _2974;
            _3105 = _2976;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
            float _3121 = _3120 * _2774;
            float _3122 = _3120 * _2775;
            float _3123 = _3120 * _2776;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2983 < ((_2981 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2966;
                float _3256 = _2968;
                float _3257 = _2970;
                float _3258 = _2972;
                float _3259 = _2974;
                float _3260 = _2976;
                uint _3261 = _2983;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3271)
                    {
                        frontier_phi_77_pred = _3260;
                        frontier_phi_77_pred_1 = _3259;
                        frontier_phi_77_pred_2 = _3258;
                        frontier_phi_77_pred_3 = _3257;
                        frontier_phi_77_pred_4 = _3256;
                        frontier_phi_77_pred_5 = _3255;
                    }
                    else
                    {
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        uint _3483 = _3270;
                        uint _3484;
                        vec4 _3509;
                        float _3510;
                        vec4 _3525;
                        vec3 _3537;
                        vec4 _3552;
                        vec4 _3567;
                        float _3614;
                        bool _3615;
                        for (;;)
                        {
                            uint _3494 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3483));
                            _3484 = (_3483 + 4294967295u) & _3483;
                            uint _3496 = _3494 * 40u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3510 = _3509.w;
                            uint _3512 = (_3494 * 40u) + 4u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3494 * 40u) + 8u;
                            _3537 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x));
                            uint _3539 = (_3494 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3494 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3570 = (_3494 * 40u) + 24u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3589 = (_3494 * 40u) + 28u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3614 = fma(_2776, _3602.z, fma(_2775, _3602.y, _3602.x * _2774)) + _3602.w;
                            _3615 = !((fma(_2776, _3583.z, fma(_2775, _3583.y, _3583.x * _2774)) + _3583.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3615)
                            {
                                float _3642 = _3509.x - _2774;
                                float _3643 = _3509.y - _2775;
                                float _3644 = _3509.z - _2776;
                                float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                                float _3648 = inversesqrt(_3645);
                                float _3649 = _3648 * _3642;
                                float _3650 = _3648 * _3643;
                                float _3651 = _3648 * _3644;
                                float _3655 = 1.0 - (_3645 / (_3510 * _3510));
                                float _4815 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3660 = sqrt(_3645) * _3525.w;
                                float _3662 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                                float _3663 = _3662 * _3662;
                                float _3666 = ((1.0 - _3663) * dot(vec3(_3649, _3650, _3651), vec3(_1010, _1013, _1016))) + _3663;
                                float _3669 = _3660 * _3660;
                                float _3673 = (fma(_2776, _3552.z, fma(_2775, _3552.y, _3552.x * _2774)) + _3552.w) / _3614;
                                float _3674 = (fma(_2776, _3567.z, fma(_2775, _3567.y, _3567.x * _2774)) + _3567.w) / _3614;
                                float _3678 = 1.0 - dot(vec2(_3673, _3674), vec2(_3673, _3674));
                                float _4831 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3680 = _3679 * (((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3656) / ((_3669 * 0.699999988079071044921875) + 1.0));
                                float _3692 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                                float _3693 = 1.0 - _1085;
                                float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                                float _3701 = _3700 * _3700;
                                float _3702 = _3701 * _3701;
                                float _3703 = _3649 - _3121;
                                float _3704 = _3650 - _3122;
                                float _3705 = _3651 - _3123;
                                float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                                float _3713 = dot(vec3(_1010, _1013, _1016), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4842 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3717 = dot(vec3(_1010, _1013, _1016), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                                float _4853 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                                float _3725 = _3662 * _3701;
                                float _3726 = _3725 * _3725;
                                float _3732 = ((1.0 - _3726) * dot(vec3(_1010, _1013, _1016), vec3(_3649, _3650, _3651))) + _3726;
                                float _4864 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3734 = 1.0 - _3701;
                                float _3744 = (0.5 / (((_3733 * ((_3716 * _3734) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3733 * _3734) + _3701) * _3716))) * _3733;
                                float _4875 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3754 = (_3679 * _3656) * (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3724 * _3724) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3680 * _3525.y;
                                frontier_phi_83_pred_1 = _3680 * _3525.x;
                                frontier_phi_83_pred_2 = _3754 * _3537.z;
                                frontier_phi_83_pred_3 = _3754 * _3537.y;
                                frontier_phi_83_pred_4 = _3754 * _3537.x;
                                frontier_phi_83_pred_5 = _3680 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_83_pred;
                            _3761 = frontier_phi_83_pred_1;
                            _3760 = frontier_phi_83_pred_2;
                            _3759 = frontier_phi_83_pred_3;
                            _3758 = frontier_phi_83_pred_4;
                            _3763 = frontier_phi_83_pred_5;
                            _3467 = _3761 + _3480;
                            _3468 = _3762 + _3481;
                            _3469 = _3763 + _3482;
                            _3464 = _3758 + _3477;
                            _3465 = _3759 + _3478;
                            _3466 = _3760 + _3479;
                            if (_3484 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3484;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3469;
                        frontier_phi_77_pred_1 = _3468;
                        frontier_phi_77_pred_2 = _3467;
                        frontier_phi_77_pred_3 = _3466;
                        frontier_phi_77_pred_4 = _3465;
                        frontier_phi_77_pred_5 = _3464;
                    }
                    _3106 = frontier_phi_77_pred;
                    _3104 = frontier_phi_77_pred_1;
                    _3102 = frontier_phi_77_pred_2;
                    _3100 = frontier_phi_77_pred_3;
                    _3098 = frontier_phi_77_pred_4;
                    _3096 = frontier_phi_77_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_58_59_ladder = _2970;
                frontier_phi_58_59_ladder_1 = _2976;
                frontier_phi_58_59_ladder_2 = _2974;
                frontier_phi_58_59_ladder_3 = _2972;
                frontier_phi_58_59_ladder_4 = _2968;
                frontier_phi_58_59_ladder_5 = _2966;
            }
            _3095 = frontier_phi_58_59_ladder_5;
            _3097 = frontier_phi_58_59_ladder_4;
            _3099 = frontier_phi_58_59_ladder;
            _3101 = frontier_phi_58_59_ladder_3;
            _3103 = frontier_phi_58_59_ladder_2;
            _3105 = frontier_phi_58_59_ladder_1;
        }
        float _3110 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _2833 = (_3110 * _3101) + _2269;
        _2835 = (_3110 * _3103) + _2271;
        _2837 = (_3110 * _3105) + _2273;
        _2839 = ((_3095 * _1054) * _3110) + _2614;
        _2841 = ((_3097 * _1056) * _3110) + _2616;
        _2843 = ((_3099 * _1057) * _3110) + _2618;
    }
    else
    {
        _2833 = _2269;
        _2835 = _2271;
        _2837 = _2273;
        _2839 = _2614;
        _2841 = _2616;
        _2843 = _2618;
    }
    uint _2849 = _1030 + uint(cbMatDynParam._m0[0u].w);
    float _2855 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2861 = (((((_2855 * cbMtdParam._m0[14u].x) * _773.x) * _796) * _870) * (((1.0 - _849) * cbMtdParam._m0[20u].w) + _849)) * cbInstanceData._m0[_2849].x;
    float _2867 = (((((_2855 * cbMtdParam._m0[14u].y) * _773.y) * _796) * _870) * (((1.0 - _851) * cbMtdParam._m0[20u].w) + _851)) * cbInstanceData._m0[_2849].y;
    float _2873 = (((((_2855 * cbMtdParam._m0[14u].z) * _773.z) * _796) * _870) * (((1.0 - _853) * cbMtdParam._m0[20u].w) + _853)) * cbInstanceData._m0[_2849].z;
    float _4891 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4902 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4913 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2890 = (((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2833 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1069))) + ((_2839 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1909)) * cbPerFrame._m0[3u].x)) + _2861;
    float _2892 = (_2867 + ((_2841 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1909)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2835 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1069)));
    float _2894 = (_2873 + ((_2843 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1909)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2837 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1069)));
    float _2895 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2896 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
    float _2897 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2903 = cbMtdParam._m0[2u].x * _2861;
    float _2904 = cbMtdParam._m0[2u].y * _2867;
    float _2905 = cbMtdParam._m0[2u].z * _2873;
    float _4939 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2907 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
    uint _2908 = _1029 + 6u;
    float _2916 = _991 / cbSceneParam._m0[86u].x;
    float _2917 = _992 / cbSceneParam._m0[86u].y;
    vec4 _2931 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2933 = _2931.x;
    float _2934 = _2931.y;
    float _2935 = _2931.z;
    float _2936 = _2931.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _2991 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _2992 = _2991 / _914;
        float _3003 = _2992 * _964;
        float _3004 = _965 * _2992;
        float _3005 = (-0.0) - _3004;
        float _3006 = _2992 * _966;
        float _3008 = (cbSceneParam._m0[77u].w * _3005) / _2991;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3004;
        float _3016 = sqrt(((_3003 * _3003) + (_3004 * _3004)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2991)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3005 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3158 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3016 / _3005) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3026 * _3167) - exp2(_3026 * _3168)) * _3156))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2916, _2917, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2936);
        _3028 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2933;
        _3030 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2934;
        _3032 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2935;
        _3034 = _3223 * _2936;
    }
    else
    {
        _3028 = _2933;
        _3030 = _2934;
        _3032 = _2935;
        _3034 = _2936;
    }
    bool _3250;
    vec4 _3044;
    vec4 _3066;
    float _3068;
    float _3072;
    float _3073;
    float _3074;
    float _3077;
    float _3080;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3044 = cbMatDynParam._m0[0u];
        float _3046 = roundEven(_3044.y);
        bool _3047 = _3046 == 3.0;
        float _3048 = log2(_3034);
        float _3052 = exp2(_3048 * cbSceneParam._m0[78u].x);
        float _3053 = exp2(_3048 * cbSceneParam._m0[78u].y);
        float _3054 = exp2(_3048 * cbSceneParam._m0[78u].z);
        float _3055 = _3052 * _2895;
        float _3056 = _3053 * _2896;
        float _3057 = _3054 * _2897;
        float _3064 = _980 + (-0.5);
        _3066 = cbMtdParam._m0[1u];
        _3068 = _3066.y * _3064;
        float _3071 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3072 = _3071 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
        _3073 = _3071 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
        _3074 = _3071 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = ((_2903 * _2907) * _3052) * _3071;
        _3080 = ((_2904 * _2907) * _3053) * _3071;
        _3083 = ((_2905 * _2907) * _3054) * _3071;
        _3084 = _3064 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_1029 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _1030 + uint(_3044.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3068 + 1.0) < _3066.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3455;
    if (_3250)
    {
        discard_state = true;
        _3455 = 0.0;
    }
    else
    {
        _3455 = cbInstanceData._m0[_2908].w;
    }
    SV_Target.x = _3072;
    SV_Target.y = _3073;
    SV_Target.z = _3074;
    SV_Target.w = _3455;
    SV_Target_1.x = _3077;
    SV_Target_1.y = _3080;
    SV_Target_1.z = _3083;
    SV_Target_1.w = cbInstanceData._m0[_2908].w;
    discard_exit();
}


