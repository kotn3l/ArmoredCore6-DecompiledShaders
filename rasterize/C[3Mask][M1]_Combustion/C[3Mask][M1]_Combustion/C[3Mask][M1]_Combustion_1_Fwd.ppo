#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1420;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _352 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _342)) + 1.0;
    float _3800 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _360 = (_353 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _361 = (_353 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _362 = (_353 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3811 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3822 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _442 = (((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401;
    float _443 = (_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _444 = (_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _469 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _488 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _491 = _488.x + 0.00999999977648258209228515625;
    float _498 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _491)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3833 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _506 = (_499 * ((_469.x * cbMtdParam._m0[16u].x) - _442)) + _442;
    float _507 = (_499 * ((_469.y * cbMtdParam._m0[16u].y) - _443)) + _443;
    float _508 = (_499 * ((_469.z * cbMtdParam._m0[16u].z) - _444)) + _444;
    vec4 _521 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _541 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _523) * _353) + _523;
    float _558 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _541) * _394) + _541;
    float _575 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _558) * _435) + _558;
    float _577 = _575 - (_575 * TEXCOORD_8);
    vec4 _590 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    vec4 _627 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _638 = ((_627.x - _613) * _353) + _613;
    float _639 = ((_627.y - _614) * _353) + _614;
    float _640 = ((_627.z - _615) * _353) + _615;
    vec4 _653 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _664 = ((_653.x - _638) * _394) + _638;
    float _665 = ((_653.y - _639) * _394) + _639;
    float _666 = ((_653.z - _640) * _394) + _640;
    vec4 _679 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _692 = ((_679.z - _666) * _435) + _666;
    float _695 = ((((_679.x - _664) * _435) + _664) * 2.0) + (-1.0);
    float _696 = ((((_679.y - _665) * _435) + _665) * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3844 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))));
    float _707 = (((_590.z - _692) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _692;
    vec4 _737 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _751 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3855 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _760 = (((_752 * _752) * (3.0 - (_752 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _768 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _776 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3866 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _781 = (_777 * _777) * (3.0 - (_777 * 2.0));
    float _782 = _781 * cbMtdParam._m0[22u].x;
    float _783 = _781 * cbMtdParam._m0[22u].y;
    float _784 = sin(_768);
    float _785 = cos(_768);
    float _786 = TEXCOORD.z - _782;
    float _787 = TEXCOORD.w - _783;
    vec4 _807 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_782 + fma(_787, (-0.0) - _784, _786 * _785))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_787, _785, _786 * _784) + _783)) + cbTextureTilingScale._m0[2u].w));
    float _813 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _807.x;
    float _815 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _807.y;
    float _817 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _807.z;
    float _833 = (TEXCOORD_5.x - ((_491 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3877 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _834 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    vec4 _847 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _863 = (((((_590.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _695) + (((_847.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _865 = (((((_590.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _696) + (((_847.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _868 = fma(_702, _239 * NORMAL.x, fma(_865, _246 * TANGENT.x, (_232 * _224) * _863));
    float _871 = fma(_702, _239 * NORMAL.y, fma(_865, _246 * TANGENT.y, (_232 * _225) * _863));
    float _874 = fma(_702, _239 * NORMAL.z, fma(_865, _246 * TANGENT.z, (_232 * _226) * _863));
    float _878 = inversesqrt(dot(vec3(_868, _871, _874), vec3(_868, _871, _874)));
    float _879 = _878 * _868;
    float _880 = _878 * _871;
    float _881 = _878 * _874;
    float _3888 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _882 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3910 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3921 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3932 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _886 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _902 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _952 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _942);
    float _953 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _942);
    float _954 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _942);
    float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
    float _959 = _952 * _958;
    float _960 = _953 * _958;
    float _961 = _954 * _958;
    float _967 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _968 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _987 = fma(_881, cbSceneParam._m0[5u].z, fma(_880, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _879));
    float _990 = fma(_881, cbSceneParam._m0[6u].z, fma(_880, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _879));
    float _993 = fma(_881, cbSceneParam._m0[7u].z, fma(_880, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _879));
    uint _1006 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1007 = _1006 + 9u;
    uint _1008 = _1007 + uint(cbMatDynParam._m0[0u].w);
    float _1014 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_1008].x;
    float _1015 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_1008].y;
    float _1016 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_1008].z;
    float _3943 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1020 = 1.0 - _886;
    float _1021 = _1017 * _1020;
    float _1022 = _1018 * _1020;
    float _1023 = _1019 * _1020;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _886;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _886;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _886;
    float _1031 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    vec4 _1043 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _967, cbSceneParam._m0[86u].y * _968));
    float _1046 = _1043.x * TEXCOORD_5.w;
    float _1047 = dot(vec3(_879, _880, _881), vec3(_959, _960, _961));
    float _1050 = _1047 * 2.0;
    float _1054 = (_1050 * _879) - _959;
    float _1055 = (_1050 * _880) - _960;
    float _1056 = (_1050 * _881) - _961;
    float _1060 = abs(dot(vec3(_959, _960, _961), vec3(_879, _880, _881)));
    float _3976 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1062 = sqrt(_882);
    float _1074 = exp2((_1062 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1062 * 3.0));
    float _1080 = (1.0 - _1074) * ((_1062 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1081 = _1074 * _1062;
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1419;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1144 = fma(_1117, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109));
        float _1148 = fma(_1117, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109));
        float _1152 = fma(_1117, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109));
        float _1177 = _1109 + _879;
        float _1178 = _1113 + _880;
        float _1179 = _1117 + _881;
        float _1189 = fma(_1179, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177)) - _1144;
        float _1190 = fma(_1179, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177)) - _1148;
        float _1191 = fma(_1179, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177)) - _1152;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1144 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1148 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[34u].z) + ((((((_1152 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1247 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1213.x + (-0.5));
        float _1249 = _1247 * (_1213.y + (-0.5));
        float _1250 = _1247 * (_1213.z + (-0.5));
        float _1257 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1220.x + (-0.5));
        float _1259 = _1257 * (_1220.y + (-0.5));
        float _1260 = _1257 * (_1220.z + (-0.5));
        float _1267 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1227.x + (-0.5));
        float _1269 = _1267 * (_1227.y + (-0.5));
        float _1270 = _1267 * (_1227.z + (-0.5));
        float _1277 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1234.x + (-0.5));
        float _1279 = _1277 * (_1234.y + (-0.5));
        float _1280 = _1277 * (_1234.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1301 = (dot(vec3(_879, _880, _881), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1311 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4024 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1313 + 1.0))) + _1318) * _1281;
        float _1328 = _1249 * 0.5;
        float _1329 = _1259 * 0.5;
        float _1330 = _1269 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_879, _880, _881), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4057 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1355 + 1.0))) + _1360) * _1282;
        float _1370 = _1250 * 0.5;
        float _1371 = _1260 * 0.5;
        float _1372 = _1270 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_879, _880, _881), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _4090 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1397 + 1.0))) + _1402) * _1283;
        _1419 = _1250;
        _1421 = _1249;
        _1422 = _1248;
        _1423 = _1260;
        _1424 = _1259;
        _1425 = _1258;
        _1426 = _1270;
        _1427 = _1269;
        _1428 = _1268;
        _1429 = _1283;
        _1430 = _1282;
        _1431 = _1281;
        _1432 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1420;
        _1421 = _1420;
        _1422 = _1420;
        _1423 = _1420;
        _1424 = _1420;
        _1425 = _1420;
        _1426 = _1420;
        _1427 = _1420;
        _1428 = _1420;
        _1429 = _1420;
        _1430 = _1420;
        _1431 = _1420;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1460 = fma(_1117, cbModelParam._m0[30u].z, fma(_1113, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109));
        float _1464 = fma(_1117, cbModelParam._m0[31u].z, fma(_1113, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109));
        float _1468 = fma(_1117, cbModelParam._m0[32u].z, fma(_1113, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109));
        float _1491 = _1109 + _879;
        float _1492 = _1113 + _880;
        float _1493 = _1117 + _881;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1460;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1464;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1468;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1522 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1460 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1464 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1468 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1559 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1526.x + (-0.5));
        float _1561 = _1559 * (_1526.y + (-0.5));
        float _1562 = _1559 * (_1526.z + (-0.5));
        float _1569 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1533.x + (-0.5));
        float _1571 = _1569 * (_1533.y + (-0.5));
        float _1572 = _1569 * (_1533.z + (-0.5));
        float _1579 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1540.x + (-0.5));
        float _1581 = _1579 * (_1540.y + (-0.5));
        float _1582 = _1579 * (_1540.z + (-0.5));
        float _1589 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1547.x + (-0.5));
        float _1591 = _1589 * (_1547.y + (-0.5));
        float _1592 = _1589 * (_1547.z + (-0.5));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1560 * 0.5;
        float _1597 = _1570 * 0.5;
        float _1598 = _1580 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_879, _880, _881), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4153 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1623 + 1.0))) + _1628) * _1593;
        float _1638 = _1561 * 0.5;
        float _1639 = _1571 * 0.5;
        float _1640 = _1581 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_879, _880, _881), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4186 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1665 + 1.0))) + _1670) * _1594;
        float _1680 = _1562 * 0.5;
        float _1681 = _1572 * 0.5;
        float _1682 = _1582 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_879, _880, _881), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4219 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1707 + 1.0))) + _1712) * _1595;
        _1729 = _1562;
        _1730 = _1561;
        _1731 = _1560;
        _1732 = _1572;
        _1733 = _1571;
        _1734 = _1570;
        _1735 = _1582;
        _1736 = _1581;
        _1737 = _1580;
        _1738 = _1595;
        _1739 = _1594;
        _1740 = _1593;
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
    }
    else
    {
        _1729 = _1420;
        _1730 = _1420;
        _1731 = _1420;
        _1732 = _1420;
        _1733 = _1420;
        _1734 = _1420;
        _1735 = _1420;
        _1736 = _1420;
        _1737 = _1420;
        _1738 = _1420;
        _1739 = _1420;
        _1740 = _1420;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1432)) + _1432;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1433)) + _1433;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1434)) + _1434;
    float _1776 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1753));
    float _1797 = _1054 * 0.5;
    float _1798 = _1055 * 0.5;
    float _1799 = _1056 * 0.5;
    float _1800 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1803 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1806 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1813 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1419, _1423, _1426, _1429));
        float _1817 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1421, _1424, _1427, _1430));
        float _1821 = dot(vec4(_1797, _1798, _1799, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1828 = dot(vec4(cbModelParam._m0[39u]), vec4(_1797, _1798, _1799, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1828) ? 0.0 : (isnan(0.0) ? _1828 : max(0.0, _1828))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1797, _1798, _1799, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1865 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _882);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1865 : min(cbModelParam._m0[25u].z, _1865));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1913 = fma(_1117, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109)) + cbModelParam._m0[13u].w;
        float _1917 = fma(_1117, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109)) + cbModelParam._m0[14u].w;
        float _1921 = fma(_1117, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109)) + cbModelParam._m0[15u].w;
        float _1924 = fma(_1056, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054));
        float _1927 = fma(_1056, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054));
        float _1930 = fma(_1056, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054));
        float _1958;
        if (_1924 > 0.0)
        {
            _1958 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1958 = frontier_phi_14_12_ladder;
        }
        float _2160;
        if (_1927 > 0.0)
        {
            _2160 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2160 = frontier_phi_23_19_ladder;
        }
        float _2414;
        if (_1930 > 0.0)
        {
            _2414 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2414 = frontier_phi_35_30_ladder;
        }
        float _2416 = isnan(_2160) ? _1958 : (isnan(_1958) ? _2160 : min(_1958, _2160));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1924) + _1913;
        float _2422 = (_2417 * _1927) + _1917;
        float _2423 = (_2417 * _1930) + _1921;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1866);
            frontier_phi_13_35_ladder = _2551.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2551.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2551.x * cbModelParam._m0[1u].y;
        }
        _1946 = frontier_phi_13_35_ladder_2;
        _1948 = frontier_phi_13_35_ladder_1;
        _1950 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1054, _1055, _1056), _1866);
        _1946 = _1934.x * cbModelParam._m0[1u].y;
        _1948 = _1934.y * cbModelParam._m0[1u].y;
        _1950 = _1934.z * cbModelParam._m0[1u].y;
    }
    float _1954 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _882);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1954 : min(cbModelParam._m0[25u].w, _1954));
    float _2044;
    float _2046;
    float _2048;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2008 = fma(_1117, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109)) + cbModelParam._m0[21u].w;
        float _2012 = fma(_1117, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109)) + cbModelParam._m0[22u].w;
        float _2016 = fma(_1117, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109)) + cbModelParam._m0[23u].w;
        float _2019 = fma(_1056, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054));
        float _2022 = fma(_1056, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054));
        float _2025 = fma(_1056, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054));
        float _2165;
        if (_2019 > 0.0)
        {
            _2165 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2165 = frontier_phi_25_21_ladder;
        }
        float _2441;
        if (_2022 > 0.0)
        {
            _2441 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2441 = frontier_phi_37_32_ladder;
        }
        float _2654;
        if (_2025 > 0.0)
        {
            _2654 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2654 = frontier_phi_46_43_ladder;
        }
        float _2656 = isnan(_2441) ? _2165 : (isnan(_2165) ? _2441 : min(_2165, _2441));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2019) + _2008;
        float _2662 = (_2657 * _2022) + _2012;
        float _2663 = (_2657 * _2025) + _2016;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1955);
            frontier_phi_22_46_ladder = _2907.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2907.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2907.x * cbModelParam._m0[1u].z;
        }
        _2044 = frontier_phi_22_46_ladder_2;
        _2046 = frontier_phi_22_46_ladder_1;
        _2048 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1054, _1055, _1056), _1955);
        _2044 = _2028.x * cbModelParam._m0[1u].z;
        _2046 = _2028.y * cbModelParam._m0[1u].z;
        _2048 = _2028.z * cbModelParam._m0[1u].z;
    }
    float _2061 = (((_1080 * _1031) + _1081) * _1046) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2063 = (((_1080 * _1033) + _1081) * _1046) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1080 * _1034) + _1081) * _1046) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2068 = fma(_2065, cbSceneParam._m0[89u].z, fma(_2063, cbSceneParam._m0[89u].y, _2061 * cbSceneParam._m0[89u].x));
    float _2071 = fma(_2065, cbSceneParam._m0[90u].z, fma(_2063, cbSceneParam._m0[90u].y, _2061 * cbSceneParam._m0[90u].x));
    float _2074 = fma(_2065, cbSceneParam._m0[91u].z, fma(_2063, cbSceneParam._m0[91u].y, _2061 * cbSceneParam._m0[91u].x));
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_1006 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _1046 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2119 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2123 = _2086 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_879, _880, _881));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_879, _880, _881));
    float _4355 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4366 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2103].x * _2109) * _2144) + ((cbLight._m0[_2113].x * _2119) * _2142);
    float _2152 = ((_2109 * cbLight._m0[_2103].y) * _2144) + ((_2119 * cbLight._m0[_2113].y) * _2142);
    float _2153 = ((_2109 * cbLight._m0[_2103].z) * _2144) + ((_2119 * cbLight._m0[_2113].z) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2159)
    {
        _2170 = _2151;
        _2172 = _2152;
        _2174 = _2153;
    }
    else
    {
        uint _2178 = _2086 + 6u;
        float _2194 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4377 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2197 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2170 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _2151;
        _2172 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _2152;
        _2174 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _2153;
    }
    bool _2177 = _2157.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2177)
    {
        _2215 = _2170;
        _2217 = _2172;
        _2219 = _2174;
    }
    else
    {
        uint _2385 = _2086 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_879, _880, _881)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4393 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2404 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2215 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2170;
        _2217 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2172;
        _2219 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2174;
    }
    uint _2222 = _2086 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _882) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_2086].x + _959;
    float _2238 = cbLight._m0[_2086].y + _960;
    float _2239 = cbLight._m0[_2086].z + _961;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2086].xyz));
    float _4409 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _4420 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2251 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2252 = dot(vec3(_879, _880, _881), vec3(_2244, _2245, _2246));
    float _4431 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2244, _2245, _2246));
    float _4442 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2273 = 0.959999978542327880859375 - _1028;
    float _2275 = 0.959999978542327880859375 - _1029;
    float _2276 = 0.959999978542327880859375 - _1030;
    float _2283 = 1.0 - _2236;
    float _2294 = (0.5 / (((_2251 * ((_2250 * _2283) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2283) + _2236) * _2250))) * _2250;
    float _4453 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2307 = _2086 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _882) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2123].x + _959;
    float _2321 = cbLight._m0[_2123].y + _960;
    float _2322 = cbLight._m0[_2123].z + _961;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2123].xyz));
    float _4464 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2334 = dot(vec3(_879, _880, _881), vec3(_2327, _2328, _2329));
    float _4475 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2327, _2328, _2329));
    float _4486 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
    float _2360 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2251 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2360) + _2319) * _2333))) * _2333;
    float _4497 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2382 = (((((_2353 * _2273) + _1031) * cbLight._m0[_2307].x) * _2372) * _2109) + (((((_2272 * _2273) + _1031) * cbLight._m0[_2222].x) * _2296) * _2119);
    float _2383 = (((((_2353 * _2275) + _1033) * cbLight._m0[_2307].y) * _2372) * _2109) + (((((_2272 * _2275) + _1033) * cbLight._m0[_2222].y) * _2296) * _2119);
    float _2384 = (((((_2353 * _2276) + _1034) * cbLight._m0[_2307].z) * _2372) * _2109) + (((((_2272 * _2276) + _1034) * cbLight._m0[_2222].z) * _2296) * _2119);
    float _2446;
    float _2448;
    float _2450;
    if (_2159)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2086 + 2u;
        uint _2456 = _2086 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _882) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _959;
        float _2473 = cbLight._m0[_2452].y + _960;
        float _2474 = cbLight._m0[_2452].z + _961;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2452].xyz));
        float _4508 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2486 = dot(vec3(_879, _880, _881), vec3(_2479, _2480, _2481));
        float _4519 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4530 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2251 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2512) + _2471) * _2485))) * _2485;
        float _4541 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2446 = (((((_2505 * _2273) + _1031) * cbLight._m0[_2456].x) * _2524) * _2525) + _2382;
        _2448 = (((((_2505 * _2275) + _1033) * cbLight._m0[_2456].y) * _2524) * _2525) + _2383;
        _2450 = (((((_2505 * _2276) + _1034) * cbLight._m0[_2456].z) * _2524) * _2525) + _2384;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2177)
    {
        _2560 = _2446;
        _2562 = _2448;
        _2564 = _2450;
    }
    else
    {
        uint _2571 = _2086 + 3u;
        uint _2575 = _2086 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _882) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _959;
        float _2592 = cbLight._m0[_2571].y + _960;
        float _2593 = cbLight._m0[_2571].z + _961;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_879, _880, _881), vec3(cbLight._m0[_2571].xyz));
        float _4557 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2605 = dot(vec3(_879, _880, _881), vec3(_2598, _2599, _2600));
        float _4568 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4579 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
        float _2631 = 1.0 - _2590;
        float _2641 = (0.5 / (((_2251 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2631) + _2590) * _2604))) * _2604;
        float _4590 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2560 = (((((_2624 * _2273) + _1031) * cbLight._m0[_2575].x) * _2643) * _2644) + _2446;
        _2562 = (((((_2624 * _2275) + _1033) * cbLight._m0[_2575].y) * _2643) * _2644) + _2448;
        _2564 = (((((_2624 * _2276) + _1034) * cbLight._m0[_2575].z) * _2643) * _2644) + _2450;
    }
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_2084.y == 0u)
    {
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2719;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2719;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2719;
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.x;
        uint _2746 = uint((float(_2734.y) * floor(float(uint(cbSceneParam._m0[85u].y * _968) / _2735))) + floor(float(uint(cbSceneParam._m0[85u].x * _967) / _2735)));
        float _2756 = (log2(_2722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        uint _2760 = uint(isnan(14.0) ? _2757 : (isnan(_2757) ? 14.0 : min(_2757, 14.0)));
        uvec4 _2765 = texelFetch(g_lightClusterGridBuffer, int(((_2760 << 2u) + (_2746 << 6u)) >> 2u));
        uint _2766 = _2765.x;
        uint _2767 = _2734.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2767 >> 4u) & 15u)) + 4294967295u) & _2766) == 0u) || ((_2767 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            uint _3071 = 0u;
            uint _3080;
            bool _3081;
            for (;;)
            {
                _3080 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                _3081 = _3080 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3081)
                {
                    frontier_phi_61_pred = _3065;
                    frontier_phi_61_pred_1 = _3070;
                    frontier_phi_61_pred_2 = _3069;
                    frontier_phi_61_pred_3 = _3068;
                    frontier_phi_61_pred_4 = _3067;
                    frontier_phi_61_pred_5 = _3066;
                }
                else
                {
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    uint _3195;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3080;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    for (;;)
                    {
                        uint _3199 = uint(findLSB(_3195)) + (_3071 << 5u);
                        uint _3196 = (_3195 + 4294967295u) & _3195;
                        uint _3201 = _3199 * 48u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3221 = (_3199 * 48u) + 4u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3240 = (_3199 * 48u) + 8u;
                        vec3 _3251 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x));
                        float _3255 = _3215.x - _2720;
                        float _3256 = _3215.y - _2721;
                        float _3257 = _3215.z - _2722;
                        float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                        float _3261 = inversesqrt(_3258);
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3265 = dot(vec3(_987, _990, _993), vec3(_3262, _3263, _3264));
                        float _3270 = 1.0 - (_3258 * _3215.w);
                        float _4616 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3272 = sqrt(_3258) * _3234.w;
                        float _3275 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3265) + _3276;
                        float _3282 = _3272 * _3272;
                        float _3286 = ((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3271) / ((_3282 * 0.699999988079071044921875) + 1.0);
                        float _3290 = (-0.0) - _2720;
                        float _3291 = (-0.0) - _2721;
                        float _3292 = (-0.0) - _2722;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3307 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _1062;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3320 = _3299 + _3264;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_987, _990, _993), vec3(_3297, _3298, _3299));
                        float _4632 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3332 = dot(vec3(_987, _990, _993), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4643 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3275 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3265) + _3341;
                        float _4654 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4665 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3339 * _3339) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125))) * _3271;
                        _3124 = (_3286 * _3234.x) + _3192;
                        _3125 = (_3286 * _3234.y) + _3193;
                        _3126 = (_3286 * _3234.z) + _3194;
                        _3121 = (_3367 * _3251.x) + _3189;
                        _3122 = (_3367 * _3251.y) + _3190;
                        _3123 = (_3367 * _3251.z) + _3191;
                        if (_3196 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3196;
                        }
                    }
                    frontier_phi_61_pred = _3121;
                    frontier_phi_61_pred_1 = _3126;
                    frontier_phi_61_pred_2 = _3125;
                    frontier_phi_61_pred_3 = _3124;
                    frontier_phi_61_pred_4 = _3123;
                    frontier_phi_61_pred_5 = _3122;
                }
                _2913 = frontier_phi_61_pred;
                _2923 = frontier_phi_61_pred_1;
                _2921 = frontier_phi_61_pred_2;
                _2919 = frontier_phi_61_pred_3;
                _2917 = frontier_phi_61_pred_4;
                _2915 = frontier_phi_61_pred_5;
                uint _3072 = _3071 + 1u;
                if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3065 = _2913;
                    _3066 = _2915;
                    _3067 = _2917;
                    _3068 = _2919;
                    _3069 = _2921;
                    _3070 = _2923;
                    _3071 = _3072;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((4294967295u << _2929) & _2766) == 0u)
        {
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
            _3043 = _2922;
        }
        else
        {
            float _3058 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
            float _3059 = _3058 * _2720;
            float _3060 = _3058 * _2721;
            float _3061 = _3058 * _2722;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3172 = _2912;
                float _3173 = _2914;
                float _3174 = _2916;
                float _3175 = _2918;
                float _3176 = _2920;
                float _3177 = _2922;
                uint _3178 = _2929;
                uint _3187;
                bool _3188;
                for (;;)
                {
                    _3187 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                    _3188 = _3187 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3188)
                    {
                        frontier_phi_67_pred = _3175;
                        frontier_phi_67_pred_1 = _3176;
                        frontier_phi_67_pred_2 = _3177;
                        frontier_phi_67_pred_3 = _3174;
                        frontier_phi_67_pred_4 = _3173;
                        frontier_phi_67_pred_5 = _3172;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        uint _3391 = _3187;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3475;
                        float _3522;
                        bool _3523;
                        for (;;)
                        {
                            uint _3402 = ((_3178 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3402 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3478 = (_3402 * 40u) + 24u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3497 = (_3402 * 40u) + 28u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3522 = fma(_2722, _3510.z, fma(_2721, _3510.y, _3510.x * _2720)) + _3510.w;
                            _3523 = !((fma(_2722, _3491.z, fma(_2721, _3491.y, _3491.x * _2720)) + _3491.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3523)
                            {
                                float _3550 = _3417.x - _2720;
                                float _3551 = _3417.y - _2721;
                                float _3552 = _3417.z - _2722;
                                float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                                float _3556 = inversesqrt(_3553);
                                float _3557 = _3556 * _3550;
                                float _3558 = _3556 * _3551;
                                float _3559 = _3556 * _3552;
                                float _3563 = 1.0 - (_3553 / (_3418 * _3418));
                                float _4676 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3568 = sqrt(_3553) * _3433.w;
                                float _3570 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                                float _3571 = _3570 * _3570;
                                float _3574 = ((1.0 - _3571) * dot(vec3(_3557, _3558, _3559), vec3(_987, _990, _993))) + _3571;
                                float _3577 = _3568 * _3568;
                                float _3581 = (fma(_2722, _3460.z, fma(_2721, _3460.y, _3460.x * _2720)) + _3460.w) / _3522;
                                float _3582 = (fma(_2722, _3475.z, fma(_2721, _3475.y, _3475.x * _2720)) + _3475.w) / _3522;
                                float _3586 = 1.0 - dot(vec2(_3581, _3582), vec2(_3581, _3582));
                                float _4692 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3588 = _3587 * (((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3564) / ((_3577 * 0.699999988079071044921875) + 1.0));
                                float _3600 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                                float _3601 = 1.0 - _1062;
                                float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                                float _3609 = _3608 * _3608;
                                float _3610 = _3609 * _3609;
                                float _3611 = _3557 - _3059;
                                float _3612 = _3558 - _3060;
                                float _3613 = _3559 - _3061;
                                float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                                float _3621 = dot(vec3(_987, _990, _993), vec3((-0.0) - _3059, (-0.0) - _3060, (-0.0) - _3061));
                                float _4703 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3625 = dot(vec3(_987, _990, _993), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                                float _4714 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                                float _3633 = _3570 * _3609;
                                float _3634 = _3633 * _3633;
                                float _3640 = ((1.0 - _3634) * dot(vec3(_987, _990, _993), vec3(_3557, _3558, _3559))) + _3634;
                                float _4725 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3642 = 1.0 - _3609;
                                float _3652 = (0.5 / (((_3641 * ((_3624 * _3642) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3609) * _3624))) * _3641;
                                float _4736 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3662 = (_3587 * _3564) * (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) / ((_3632 * _3632) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3662 * _3445.x;
                                frontier_phi_73_pred_1 = _3662 * _3445.y;
                                frontier_phi_73_pred_2 = _3588 * _3433.z;
                                frontier_phi_73_pred_3 = _3588 * _3433.y;
                                frontier_phi_73_pred_4 = _3588 * _3433.x;
                                frontier_phi_73_pred_5 = _3662 * _3445.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3666 = frontier_phi_73_pred;
                            _3667 = frontier_phi_73_pred_1;
                            _3671 = frontier_phi_73_pred_2;
                            _3670 = frontier_phi_73_pred_3;
                            _3669 = frontier_phi_73_pred_4;
                            _3668 = frontier_phi_73_pred_5;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3375;
                        frontier_phi_67_pred_1 = _3376;
                        frontier_phi_67_pred_2 = _3377;
                        frontier_phi_67_pred_3 = _3374;
                        frontier_phi_67_pred_4 = _3373;
                        frontier_phi_67_pred_5 = _3372;
                    }
                    _3040 = frontier_phi_67_pred;
                    _3042 = frontier_phi_67_pred_1;
                    _3044 = frontier_phi_67_pred_2;
                    _3038 = frontier_phi_67_pred_3;
                    _3036 = frontier_phi_67_pred_4;
                    _3034 = frontier_phi_67_pred_5;
                    uint _3179 = _3178 + 1u;
                    if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3172 = _3034;
                        _3173 = _3036;
                        _3174 = _3038;
                        _3175 = _3040;
                        _3176 = _3042;
                        _3177 = _3044;
                        _3178 = _3179;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3042;
                frontier_phi_55_56_ladder_1 = _3044;
                frontier_phi_55_56_ladder_2 = _3040;
                frontier_phi_55_56_ladder_3 = _3038;
                frontier_phi_55_56_ladder_4 = _3036;
                frontier_phi_55_56_ladder_5 = _3034;
            }
            else
            {
                frontier_phi_55_56_ladder = _2920;
                frontier_phi_55_56_ladder_1 = _2922;
                frontier_phi_55_56_ladder_2 = _2918;
                frontier_phi_55_56_ladder_3 = _2916;
                frontier_phi_55_56_ladder_4 = _2914;
                frontier_phi_55_56_ladder_5 = _2912;
            }
            _3033 = frontier_phi_55_56_ladder_5;
            _3035 = frontier_phi_55_56_ladder_4;
            _3037 = frontier_phi_55_56_ladder_3;
            _3039 = frontier_phi_55_56_ladder_2;
            _3041 = frontier_phi_55_56_ladder;
            _3043 = frontier_phi_55_56_ladder_1;
        }
        float _3048 = isnan(1.0) ? _1046 : (isnan(_1046) ? 1.0 : min(_1046, 1.0));
        _2779 = (_3048 * _3039) + _2215;
        _2781 = (_3048 * _3041) + _2217;
        _2783 = (_3048 * _3043) + _2219;
        _2785 = ((_3033 * _1031) * _3048) + _2560;
        _2787 = ((_3035 * _1033) * _3048) + _2562;
        _2789 = ((_3037 * _1034) * _3048) + _2564;
    }
    else
    {
        _2779 = _2215;
        _2781 = _2217;
        _2783 = _2219;
        _2785 = _2560;
        _2787 = _2562;
        _2789 = _2564;
    }
    uint _2795 = _1007 + uint(cbMatDynParam._m0[0u].w);
    float _2801 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2807 = (((((_2801 * cbMtdParam._m0[14u].x) * _737.x) * _760) * _834) * (((1.0 - _813) * cbMtdParam._m0[20u].w) + _813)) * cbInstanceData._m0[_2795].x;
    float _2813 = (((((_2801 * cbMtdParam._m0[14u].y) * _737.y) * _760) * _834) * (((1.0 - _815) * cbMtdParam._m0[20u].w) + _815)) * cbInstanceData._m0[_2795].y;
    float _2819 = (((((_2801 * cbMtdParam._m0[14u].z) * _737.z) * _760) * _834) * (((1.0 - _817) * cbMtdParam._m0[20u].w) + _817)) * cbInstanceData._m0[_2795].z;
    float _4752 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _4763 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4774 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2836 = (((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2779 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1046))) + ((_2785 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + _2807;
    float _2838 = (_2813 + ((_2787 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2781 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1046)));
    float _2840 = (_2819 + ((_2789 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2783 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1046)));
    float _4800 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2853 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    uint _2854 = _1006 + 6u;
    float _2862 = _967 / cbSceneParam._m0[86u].x;
    float _2863 = _968 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _902 : (isnan(_902) ? cbSceneParam._m0[77u].w : min(_902, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_902 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_902) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _902 : min(cbSceneParam._m0[80u].w, _902));
        float _2938 = _2937 / _902;
        float _2949 = _2938 * _952;
        float _2950 = _953 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2952 = _2938 * _954;
        float _2954 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2950;
        float _2962 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3134;
        if (abs((_2951 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3134 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3094 = 1.0 / cbSceneParam._m0[80u].x;
            float _3095 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3096 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            _3134 = ((abs(_2962 / _2951) * cbSceneParam._m0[80u].y) * ((((_3105 - _3106) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0))))) * _3094)) - ((exp2(_2972 * _3105) - exp2(_2972 * _3106)) * _3094))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3136 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3145 = exp2((_3134 * (-1.44269502162933349609375)) * (1.0 - _3136.w));
        float _3146 = log2(_3145);
        float _3162 = log2(_2882);
        _2974 = (exp2(_3162 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].x)) * _3136.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2976 = (exp2(_3162 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].y)) * _3136.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2978 = (exp2(_3162 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3146 * cbSceneParam._m0[78u].z)) * _3136.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2980 = _3145 * _2882;
    }
    else
    {
        _2974 = _2879;
        _2976 = _2880;
        _2978 = _2881;
        _2980 = _2882;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _2998 = exp2(_2994 * cbSceneParam._m0[78u].x);
    float _2999 = exp2(_2994 * cbSceneParam._m0[78u].y);
    float _3000 = exp2(_2994 * cbSceneParam._m0[78u].z);
    float _3001 = _2998 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)));
    float _3002 = _2999 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)));
    float _3003 = _3000 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0)));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2854].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2807) * _2853) * _2998) * _3012;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2813) * _2853) * _2999) * _3012;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2819) * _2853) * _3000) * _3012;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
}


