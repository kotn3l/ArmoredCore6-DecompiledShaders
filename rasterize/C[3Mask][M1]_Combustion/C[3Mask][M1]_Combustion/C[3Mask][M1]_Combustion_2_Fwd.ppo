#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1427;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _342 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _352 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _342)) + 1.0;
    float _3807 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _360 = (_353 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _361 = (_353 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _362 = (_353 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3818 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _360) * _394) + _360;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _361)) + _361;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _362)) + _362;
    vec4 _421 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _342) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3829 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    vec4 _463 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _471 = ((((((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _463.x;
    float _474 = ((((_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _463.y;
    float _477 = ((((_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _463.z;
    vec4 _502 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _521 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _524 = _521.x + 0.00999999977648258209228515625;
    float _531 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _524)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3840 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _539 = (_532 * ((_502.x * cbMtdParam._m0[16u].x) - _471)) + _471;
    float _540 = (_532 * ((_502.y * cbMtdParam._m0[16u].y) - _474)) + _474;
    float _541 = (_532 * ((_502.z * cbMtdParam._m0[16u].z) - _477)) + _477;
    vec4 _554 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _556 = _554.x;
    float _573 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _556) * _353) + _556;
    float _590 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _573) * _394) + _573;
    float _607 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _590) * _435) + _590;
    float _609 = _607 - (_607 * TEXCOORD_8);
    vec4 _622 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    vec4 _659 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _670 = ((_659.x - _645) * _353) + _645;
    float _671 = ((_659.y - _646) * _353) + _646;
    float _672 = ((_659.z - _647) * _353) + _647;
    vec4 _685 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _696 = ((_685.x - _670) * _394) + _670;
    float _697 = ((_685.y - _671) * _394) + _671;
    float _698 = ((_685.z - _672) * _394) + _672;
    vec4 _711 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _724 = ((_711.z - _698) * _435) + _698;
    float _727 = ((((_711.x - _696) * _435) + _696) * 2.0) + (-1.0);
    float _728 = ((((_711.y - _697) * _435) + _697) * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3851 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _734 = sqrt(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))));
    float _739 = (((_622.z - _724) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _724;
    vec4 _769 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _783 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3862 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _784 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _792 = (((_784 * _784) * (3.0 - (_784 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _800 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _808 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3873 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _809 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _813 = (_809 * _809) * (3.0 - (_809 * 2.0));
    float _814 = _813 * cbMtdParam._m0[22u].x;
    float _815 = _813 * cbMtdParam._m0[22u].y;
    float _816 = sin(_800);
    float _817 = cos(_800);
    float _818 = TEXCOORD.z - _814;
    float _819 = TEXCOORD.w - _815;
    vec4 _839 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_814 + fma(_819, (-0.0) - _816, _818 * _817))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_819, _817, _818 * _816) + _815)) + cbTextureTilingScale._m0[2u].w));
    float _845 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _839.x;
    float _847 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _839.y;
    float _849 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _839.z;
    float _865 = (TEXCOORD_5.x - ((_524 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3884 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _872 = ((((_622.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _727;
    float _873 = ((((_622.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _728;
    float _876 = fma(_734, _239 * NORMAL.x, fma(_873, _246 * TANGENT.x, (_232 * _224) * _872));
    float _879 = fma(_734, _239 * NORMAL.y, fma(_873, _246 * TANGENT.y, (_232 * _225) * _872));
    float _882 = fma(_734, _239 * NORMAL.z, fma(_873, _246 * TANGENT.z, (_232 * _226) * _872));
    float _886 = inversesqrt(dot(vec3(_876, _879, _882), vec3(_876, _879, _882)));
    float _887 = _886 * _876;
    float _888 = _886 * _879;
    float _889 = _886 * _882;
    float _3895 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _890 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3917 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3928 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3939 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _894 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_889, cbSceneParam._m0[5u].z, fma(_888, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _887));
    float _997 = fma(_889, cbSceneParam._m0[6u].z, fma(_888, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _887));
    float _1000 = fma(_889, cbSceneParam._m0[7u].z, fma(_888, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _887));
    uint _1013 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1014 = _1013 + 9u;
    uint _1015 = _1014 + uint(cbMatDynParam._m0[0u].w);
    float _1021 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_1015].x;
    float _1022 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_1015].y;
    float _1023 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_1015].z;
    float _3950 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1027 = 1.0 - _894;
    float _1028 = _1024 * _1027;
    float _1029 = _1025 * _1027;
    float _1030 = _1026 * _1027;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _894;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _894;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _894;
    float _1038 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    vec4 _1050 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1053 = _1050.x * TEXCOORD_5.w;
    float _1054 = dot(vec3(_887, _888, _889), vec3(_967, _968, _969));
    float _1057 = _1054 * 2.0;
    float _1061 = (_1057 * _887) - _967;
    float _1062 = (_1057 * _888) - _968;
    float _1063 = (_1057 * _889) - _969;
    float _1067 = abs(dot(vec3(_967, _968, _969), vec3(_887, _888, _889)));
    float _3983 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1069 = sqrt(_890);
    float _1081 = exp2((_1069 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1069 * 3.0));
    float _1087 = (1.0 - _1081) * ((_1069 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1088 = _1081 * _1069;
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1155 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1159 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1184 = _1116 + _887;
        float _1185 = _1120 + _888;
        float _1186 = _1124 + _889;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_887, _888, _889), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4031 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_887, _888, _889), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4064 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_887, _888, _889), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4097 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1471 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1475 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1498 = _1116 + _887;
        float _1499 = _1120 + _888;
        float _1500 = _1124 + _889;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_887, _888, _889), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4160 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_887, _888, _889), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4193 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_887, _888, _889), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4226 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1427;
        _1737 = _1427;
        _1738 = _1427;
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = _1427;
        _1747 = _1427;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1439)) + _1439;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1440)) + _1440;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1441)) + _1441;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1061 * 0.5;
    float _1805 = _1062 * 0.5;
    float _1806 = _1063 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _890);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1063, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061));
        float _1934 = fma(_1063, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061));
        float _1937 = fma(_1063, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1965 = frontier_phi_14_12_ladder;
        }
        float _2167;
        if (_1934 > 0.0)
        {
            _2167 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2167 = frontier_phi_23_19_ladder;
        }
        float _2421;
        if (_1937 > 0.0)
        {
            _2421 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2421 = frontier_phi_35_30_ladder;
        }
        float _2423 = isnan(_2167) ? _1965 : (isnan(_1965) ? _2167 : min(_1965, _2167));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1931) + _1920;
        float _2429 = (_2424 * _1934) + _1924;
        float _2430 = (_2424 * _1937) + _1928;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_13_35_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_13_35_ladder_2;
        _1955 = frontier_phi_13_35_ladder_1;
        _1957 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1061, _1062, _1063), _1873);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _890);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1063, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061));
        float _2029 = fma(_1063, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061));
        float _2032 = fma(_1063, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061));
        float _2172;
        if (_2026 > 0.0)
        {
            _2172 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2172 = frontier_phi_25_21_ladder;
        }
        float _2448;
        if (_2029 > 0.0)
        {
            _2448 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2448 = frontier_phi_37_32_ladder;
        }
        float _2661;
        if (_2032 > 0.0)
        {
            _2661 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2661 = frontier_phi_46_43_ladder;
        }
        float _2663 = isnan(_2448) ? _2172 : (isnan(_2172) ? _2448 : min(_2172, _2448));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _2026) + _2015;
        float _2669 = (_2664 * _2029) + _2019;
        float _2670 = (_2664 * _2032) + _2023;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_22_46_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_22_46_ladder_2;
        _2053 = frontier_phi_22_46_ladder_1;
        _2055 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1061, _1062, _1063), _1962);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2068 = (((_1087 * _1038) + _1088) * _1053) * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2070 = (((_1087 * _1040) + _1088) * _1053) * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2072 = (((_1087 * _1041) + _1088) * _1053) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_1013 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2101 = _1053 + (-1.0);
    float _2106 = (cbLight._m0[_2094].x * _2101) + 1.0;
    float _2107 = (cbLight._m0[_2094].y * _2101) + 1.0;
    float _2108 = (cbLight._m0[_2094].z * _2101) + 1.0;
    float _2109 = (cbLight._m0[_2094].w * _2101) + 1.0;
    uint _2110 = _2093 + 5u;
    float _2116 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2120 = _2093 + 4u;
    float _2126 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2130 = _2093 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_887, _888, _889));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_887, _888, _889));
    float _4362 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4373 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2110].x * _2116) * _2151) + ((cbLight._m0[_2120].x * _2126) * _2149);
    float _2159 = ((_2116 * cbLight._m0[_2110].y) * _2151) + ((_2126 * cbLight._m0[_2120].y) * _2149);
    float _2160 = ((_2116 * cbLight._m0[_2110].z) * _2151) + ((_2126 * cbLight._m0[_2120].z) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2093 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2166)
    {
        _2177 = _2158;
        _2179 = _2159;
        _2181 = _2160;
    }
    else
    {
        uint _2185 = _2093 + 6u;
        float _2201 = (dot(vec3(cbLight._m0[_2093 + 2u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4384 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2204 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2177 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _2158;
        _2179 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _2159;
        _2181 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _2160;
    }
    bool _2184 = _2164.y == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2184)
    {
        _2222 = _2177;
        _2224 = _2179;
        _2226 = _2181;
    }
    else
    {
        uint _2392 = _2093 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_2093 + 3u].xyz), vec3(_887, _888, _889)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4400 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2411 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2222 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2177;
        _2224 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2179;
        _2226 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2181;
    }
    uint _2229 = _2093 + 8u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _890) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2093].x + _967;
    float _2245 = cbLight._m0[_2093].y + _968;
    float _2246 = cbLight._m0[_2093].z + _969;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2093].xyz));
    float _4416 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _2258 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2259 = dot(vec3(_887, _888, _889), vec3(_2251, _2252, _2253));
    float _4438 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2251, _2252, _2253));
    float _4449 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2243 * _2243;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
    float _2280 = 0.959999978542327880859375 - _1035;
    float _2282 = 0.959999978542327880859375 - _1036;
    float _2283 = 0.959999978542327880859375 - _1037;
    float _2290 = 1.0 - _2243;
    float _2301 = (0.5 / (((_2258 * ((_2257 * _2290) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2290) + _2243) * _2257))) * _2257;
    float _4460 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    uint _2314 = _2093 + 9u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _890) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2130].x + _967;
    float _2328 = cbLight._m0[_2130].y + _968;
    float _2329 = cbLight._m0[_2130].z + _969;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2130].xyz));
    float _4471 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2341 = dot(vec3(_887, _888, _889), vec3(_2334, _2335, _2336));
    float _4482 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2334, _2335, _2336));
    float _4493 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2326 * _2326;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
    float _2367 = 1.0 - _2326;
    float _2377 = (0.5 / (((_2258 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2367) + _2326) * _2340))) * _2340;
    float _4504 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    float _2389 = (((((_2360 * _2280) + _1038) * cbLight._m0[_2314].x) * _2379) * _2116) + (((((_2279 * _2280) + _1038) * cbLight._m0[_2229].x) * _2303) * _2126);
    float _2390 = (((((_2360 * _2282) + _1040) * cbLight._m0[_2314].y) * _2379) * _2116) + (((((_2279 * _2282) + _1040) * cbLight._m0[_2229].y) * _2303) * _2126);
    float _2391 = (((((_2360 * _2283) + _1041) * cbLight._m0[_2314].z) * _2379) * _2116) + (((((_2279 * _2283) + _1041) * cbLight._m0[_2229].z) * _2303) * _2126);
    float _2453;
    float _2455;
    float _2457;
    if (_2166)
    {
        _2453 = _2389;
        _2455 = _2390;
        _2457 = _2391;
    }
    else
    {
        uint _2459 = _2093 + 2u;
        uint _2463 = _2093 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _890) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _967;
        float _2480 = cbLight._m0[_2459].y + _968;
        float _2481 = cbLight._m0[_2459].z + _969;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2459].xyz));
        float _4515 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2493 = dot(vec3(_887, _888, _889), vec3(_2486, _2487, _2488));
        float _4526 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4537 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2258 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2519) + _2478) * _2492))) * _2492;
        float _4548 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2453 = (((((_2512 * _2280) + _1038) * cbLight._m0[_2463].x) * _2531) * _2532) + _2389;
        _2455 = (((((_2512 * _2282) + _1040) * cbLight._m0[_2463].y) * _2531) * _2532) + _2390;
        _2457 = (((((_2512 * _2283) + _1041) * cbLight._m0[_2463].z) * _2531) * _2532) + _2391;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2184)
    {
        _2567 = _2453;
        _2569 = _2455;
        _2571 = _2457;
    }
    else
    {
        uint _2578 = _2093 + 3u;
        uint _2582 = _2093 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _890) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _967;
        float _2599 = cbLight._m0[_2578].y + _968;
        float _2600 = cbLight._m0[_2578].z + _969;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_887, _888, _889), vec3(cbLight._m0[_2578].xyz));
        float _4564 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2612 = dot(vec3(_887, _888, _889), vec3(_2605, _2606, _2607));
        float _4575 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4586 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2258 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2638) + _2597) * _2611))) * _2611;
        float _4597 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2567 = (((((_2631 * _2280) + _1038) * cbLight._m0[_2582].x) * _2650) * _2651) + _2453;
        _2569 = (((((_2631 * _2282) + _1040) * cbLight._m0[_2582].y) * _2650) * _2651) + _2455;
        _2571 = (((((_2631 * _2283) + _1041) * cbLight._m0[_2582].z) * _2650) * _2651) + _2457;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2091.y == 0u)
    {
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2726;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2726;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2726;
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.x;
        uint _2753 = uint((float(_2741.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _2742))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _2742)));
        float _2763 = (log2(_2729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2764 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        uint _2767 = uint(isnan(14.0) ? _2764 : (isnan(_2764) ? 14.0 : min(_2764, 14.0)));
        uvec4 _2772 = texelFetch(g_lightClusterGridBuffer, int(((_2767 << 2u) + (_2753 << 6u)) >> 2u));
        uint _2773 = _2772.x;
        uint _2774 = _2741.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2774 >> 4u) & 15u)) + 4294967295u) & _2773) == 0u) || ((_2774 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3088)
                {
                    frontier_phi_61_pred = _3072;
                    frontier_phi_61_pred_1 = _3077;
                    frontier_phi_61_pred_2 = _3076;
                    frontier_phi_61_pred_3 = _3075;
                    frontier_phi_61_pred_4 = _3074;
                    frontier_phi_61_pred_5 = _3073;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3087;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3078 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _2727;
                        float _3263 = _3222.y - _2728;
                        float _3264 = _3222.z - _2729;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_994, _997, _1000), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4623 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _2727;
                        float _3298 = (-0.0) - _2728;
                        float _3299 = (-0.0) - _2729;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3314 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _1069;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3327 = _3306 + _3271;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_994, _997, _1000), vec3(_3304, _3305, _3306));
                        float _4639 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3339 = dot(vec3(_994, _997, _1000), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4650 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3282 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3272) + _3348;
                        float _4661 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4672 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3346 * _3346) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3131 = (_3293 * _3241.x) + _3199;
                        _3132 = (_3293 * _3241.y) + _3200;
                        _3133 = (_3293 * _3241.z) + _3201;
                        _3128 = (_3374 * _3258.x) + _3196;
                        _3129 = (_3374 * _3258.y) + _3197;
                        _3130 = (_3374 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_61_pred = _3128;
                    frontier_phi_61_pred_1 = _3133;
                    frontier_phi_61_pred_2 = _3132;
                    frontier_phi_61_pred_3 = _3131;
                    frontier_phi_61_pred_4 = _3130;
                    frontier_phi_61_pred_5 = _3129;
                }
                _2920 = frontier_phi_61_pred;
                _2930 = frontier_phi_61_pred_1;
                _2928 = frontier_phi_61_pred_2;
                _2926 = frontier_phi_61_pred_3;
                _2924 = frontier_phi_61_pred_4;
                _2922 = frontier_phi_61_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2920;
                    _3073 = _2922;
                    _3074 = _2924;
                    _3075 = _2926;
                    _3076 = _2928;
                    _3077 = _2930;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2936) & _2773) == 0u)
        {
            _3040 = _2919;
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
            float _3066 = _3065 * _2727;
            float _3067 = _3065 * _2728;
            float _3068 = _3065 * _2729;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3179 = _2919;
                float _3180 = _2921;
                float _3181 = _2923;
                float _3182 = _2925;
                float _3183 = _2927;
                float _3184 = _2929;
                uint _3185 = _2936;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3195)
                    {
                        frontier_phi_67_pred = _3182;
                        frontier_phi_67_pred_1 = _3183;
                        frontier_phi_67_pred_2 = _3184;
                        frontier_phi_67_pred_3 = _3181;
                        frontier_phi_67_pred_4 = _3180;
                        frontier_phi_67_pred_5 = _3179;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        uint _3398 = _3194;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3529;
                        bool _3530;
                        for (;;)
                        {
                            uint _3409 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3485 = (_3409 * 40u) + 24u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3504 = (_3409 * 40u) + 28u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3529 = fma(_2729, _3517.z, fma(_2728, _3517.y, _3517.x * _2727)) + _3517.w;
                            _3530 = !((fma(_2729, _3498.z, fma(_2728, _3498.y, _3498.x * _2727)) + _3498.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3530)
                            {
                                float _3557 = _3424.x - _2727;
                                float _3558 = _3424.y - _2728;
                                float _3559 = _3424.z - _2729;
                                float _3560 = dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559));
                                float _3563 = inversesqrt(_3560);
                                float _3564 = _3563 * _3557;
                                float _3565 = _3563 * _3558;
                                float _3566 = _3563 * _3559;
                                float _3570 = 1.0 - (_3560 / (_3425 * _3425));
                                float _4683 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3575 = sqrt(_3560) * _3440.w;
                                float _3577 = 1.39999997615814208984375 / (_3575 + 1.39999997615814208984375);
                                float _3578 = _3577 * _3577;
                                float _3581 = ((1.0 - _3578) * dot(vec3(_3564, _3565, _3566), vec3(_994, _997, _1000))) + _3578;
                                float _3584 = _3575 * _3575;
                                float _3588 = (fma(_2729, _3467.z, fma(_2728, _3467.y, _3467.x * _2727)) + _3467.w) / _3529;
                                float _3589 = (fma(_2729, _3482.z, fma(_2728, _3482.y, _3482.x * _2727)) + _3482.w) / _3529;
                                float _3593 = 1.0 - dot(vec2(_3588, _3589), vec2(_3588, _3589));
                                float _4699 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3595 = _3594 * (((isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0))) * _3571) / ((_3584 * 0.699999988079071044921875) + 1.0));
                                float _3607 = exp2(log2(1.0 / ((_3584 * 3.5) + 5.0)) * 0.25);
                                float _3608 = 1.0 - _1069;
                                float _3615 = sqrt(1.0 - ((1.0 - (_3608 * _3608)) * (1.0 - (_3607 * _3607))));
                                float _3616 = _3615 * _3615;
                                float _3617 = _3616 * _3616;
                                float _3618 = _3564 - _3066;
                                float _3619 = _3565 - _3067;
                                float _3620 = _3566 - _3068;
                                float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                                float _3628 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4710 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3632 = dot(vec3(_994, _997, _1000), vec3(_3624 * _3618, _3624 * _3619, _3624 * _3620));
                                float _4721 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3635 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3639 = ((_3635 * _3635) * (_3617 + (-1.0))) + 1.0;
                                float _3640 = _3577 * _3616;
                                float _3641 = _3640 * _3640;
                                float _3647 = ((1.0 - _3641) * dot(vec3(_994, _997, _1000), vec3(_3564, _3565, _3566))) + _3641;
                                float _4732 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3649 = 1.0 - _3616;
                                float _3659 = (0.5 / (((_3648 * ((_3631 * _3649) + _3616)) + 9.9999999392252902907785028219223e-09) + (((_3648 * _3649) + _3616) * _3631))) * _3648;
                                float _4743 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3669 = (_3594 * _3571) * (((_3617 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3639 * _3639) * ((_3584 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3669 * _3452.x;
                                frontier_phi_73_pred_1 = _3669 * _3452.y;
                                frontier_phi_73_pred_2 = _3595 * _3440.z;
                                frontier_phi_73_pred_3 = _3595 * _3440.y;
                                frontier_phi_73_pred_4 = _3595 * _3440.x;
                                frontier_phi_73_pred_5 = _3669 * _3452.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3673 = frontier_phi_73_pred;
                            _3674 = frontier_phi_73_pred_1;
                            _3678 = frontier_phi_73_pred_2;
                            _3677 = frontier_phi_73_pred_3;
                            _3676 = frontier_phi_73_pred_4;
                            _3675 = frontier_phi_73_pred_5;
                            _3382 = _3676 + _3395;
                            _3383 = _3677 + _3396;
                            _3384 = _3678 + _3397;
                            _3379 = _3673 + _3392;
                            _3380 = _3674 + _3393;
                            _3381 = _3675 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3382;
                        frontier_phi_67_pred_1 = _3383;
                        frontier_phi_67_pred_2 = _3384;
                        frontier_phi_67_pred_3 = _3381;
                        frontier_phi_67_pred_4 = _3380;
                        frontier_phi_67_pred_5 = _3379;
                    }
                    _3047 = frontier_phi_67_pred;
                    _3049 = frontier_phi_67_pred_1;
                    _3051 = frontier_phi_67_pred_2;
                    _3045 = frontier_phi_67_pred_3;
                    _3043 = frontier_phi_67_pred_4;
                    _3041 = frontier_phi_67_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3041;
                        _3180 = _3043;
                        _3181 = _3045;
                        _3182 = _3047;
                        _3183 = _3049;
                        _3184 = _3051;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3049;
                frontier_phi_55_56_ladder_1 = _3051;
                frontier_phi_55_56_ladder_2 = _3047;
                frontier_phi_55_56_ladder_3 = _3045;
                frontier_phi_55_56_ladder_4 = _3043;
                frontier_phi_55_56_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            _3040 = frontier_phi_55_56_ladder_5;
            _3042 = frontier_phi_55_56_ladder_4;
            _3044 = frontier_phi_55_56_ladder_3;
            _3046 = frontier_phi_55_56_ladder_2;
            _3048 = frontier_phi_55_56_ladder;
            _3050 = frontier_phi_55_56_ladder_1;
        }
        float _3055 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
        _2786 = (_3055 * _3046) + _2222;
        _2788 = (_3055 * _3048) + _2224;
        _2790 = (_3055 * _3050) + _2226;
        _2792 = ((_3040 * _1038) * _3055) + _2567;
        _2794 = ((_3042 * _1040) * _3055) + _2569;
        _2796 = ((_3044 * _1041) * _3055) + _2571;
    }
    else
    {
        _2786 = _2222;
        _2788 = _2224;
        _2790 = _2226;
        _2792 = _2567;
        _2794 = _2569;
        _2796 = _2571;
    }
    uint _2802 = _1014 + uint(cbMatDynParam._m0[0u].w);
    float _2808 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2814 = (((((_2808 * cbMtdParam._m0[14u].x) * _769.x) * _792) * _866) * (((1.0 - _845) * cbMtdParam._m0[20u].w) + _845)) * cbInstanceData._m0[_2802].x;
    float _2820 = (((((_2808 * cbMtdParam._m0[14u].y) * _769.y) * _792) * _866) * (((1.0 - _847) * cbMtdParam._m0[20u].w) + _847)) * cbInstanceData._m0[_2802].y;
    float _2826 = (((((_2808 * cbMtdParam._m0[14u].z) * _769.z) * _792) * _866) * (((1.0 - _849) * cbMtdParam._m0[20u].w) + _849)) * cbInstanceData._m0[_2802].z;
    float _4759 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4770 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4781 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2843 = (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2786 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1053))) + ((_2792 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + _2814;
    float _2845 = (_2820 + ((_2794 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2788 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1053)));
    float _2847 = (_2826 + ((_2796 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1862)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2790 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1053)));
    float _4807 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2860 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    uint _2861 = _1013 + 6u;
    float _2869 = _975 / cbSceneParam._m0[86u].x;
    float _2870 = _976 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _2945 = _2944 / _910;
        float _2956 = _2945 * _960;
        float _2957 = _961 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2959 = _2945 * _962;
        float _2961 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2957;
        float _2969 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2958 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3103 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3141 = ((abs(_2969 / _2958) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2979 * _3112) - exp2(_2979 * _3113)) * _3101))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2889);
        _2981 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2983 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2985 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2987 = _3152 * _2889;
    }
    else
    {
        _2981 = _2886;
        _2983 = _2887;
        _2985 = _2888;
        _2987 = _2889;
    }
    float _2999 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3000 = _2999 == 3.0;
    float _3001 = log2(_2987);
    float _3005 = exp2(_3001 * cbSceneParam._m0[78u].x);
    float _3006 = exp2(_3001 * cbSceneParam._m0[78u].y);
    float _3007 = exp2(_3001 * cbSceneParam._m0[78u].z);
    float _3008 = _3005 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)));
    float _3009 = _3006 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0)));
    float _3010 = _3007 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)));
    float _3019 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3019 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.y = _3019 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.z = _3019 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.w = cbInstanceData._m0[_2861].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2814) * _2860) * _3005) * _3019;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2820) * _2860) * _3006) * _3019;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2826) * _2860) * _3007) * _3019;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
}


