#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1457;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _301 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _320 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _348 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _358 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _320.x) * 2.0) - _348)) + 1.0;
    float _4120 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _366 = (_359 * ((_301.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _367 = (_359 * ((_301.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _368 = (_359 * ((_301.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _386 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _399 = (((((1.0 - _320.y) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4131 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _407 = (((_386.x * cbMtdParam._m0[12u].x) - _366) * _400) + _366;
    float _408 = (_400 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _409 = (_400 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _427 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _440 = (((((1.0 - _320.z) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4142 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    vec4 _469 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _477 = ((((((_427.x * cbMtdParam._m0[13u].x) - _407) * _441) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _469.x;
    float _480 = ((((_441 * ((_427.y * cbMtdParam._m0[13u].y) - _408)) + _408) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _469.y;
    float _483 = ((((_441 * ((_427.z * cbMtdParam._m0[13u].z) - _409)) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _469.z;
    vec4 _508 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _527 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _530 = _527.x + 0.00999999977648258209228515625;
    float _537 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _530)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4153 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _545 = (_538 * ((_508.x * cbMtdParam._m0[16u].x) - _477)) + _477;
    float _546 = (_538 * ((_508.y * cbMtdParam._m0[16u].y) - _480)) + _480;
    float _547 = (_538 * ((_508.z * cbMtdParam._m0[16u].z) - _483)) + _483;
    vec4 _560 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = _560.x;
    float _579 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _562) * _359) + _562;
    float _596 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _579) * _400) + _579;
    float _613 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _596) * _441) + _596;
    float _615 = _613 - (_613 * TEXCOORD_8);
    vec4 _628 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    vec4 _665 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _676 = ((_665.x - _651) * _359) + _651;
    float _677 = ((_665.y - _652) * _359) + _652;
    float _678 = ((_665.z - _653) * _359) + _653;
    vec4 _691 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = ((_691.x - _676) * _400) + _676;
    float _703 = ((_691.y - _677) * _400) + _677;
    float _704 = ((_691.z - _678) * _400) + _678;
    vec4 _717 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _730 = ((_717.z - _704) * _441) + _704;
    float _733 = ((((_717.x - _702) * _441) + _702) * 2.0) + (-1.0);
    float _734 = ((((_717.y - _703) * _441) + _703) * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4164 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _740 = sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))));
    float _745 = (((_628.z - _730) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _730;
    vec4 _775 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _789 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4175 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _798 = (((_790 * _790) * (3.0 - (_790 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _806 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _814 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4186 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _815 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _819 = (_815 * _815) * (3.0 - (_815 * 2.0));
    float _820 = _819 * cbMtdParam._m0[22u].x;
    float _821 = _819 * cbMtdParam._m0[22u].y;
    float _822 = sin(_806);
    float _823 = cos(_806);
    float _824 = TEXCOORD.z - _820;
    float _825 = TEXCOORD.w - _821;
    vec4 _845 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_820 + fma(_825, (-0.0) - _822, _824 * _823))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_825, _823, _824 * _822) + _821)) + cbTextureTilingScale._m0[2u].w));
    float _851 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _845.x;
    float _853 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _845.y;
    float _855 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _845.z;
    float _871 = (TEXCOORD_5.x - ((_530 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4197 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    vec4 _885 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _901 = (((((_628.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _733) + (((_885.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _903 = (((((_628.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _734) + (((_885.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _906 = fma(_740, _245 * NORMAL.x, fma(_903, _252 * TANGENT.x, (_238 * _230) * _901));
    float _909 = fma(_740, _245 * NORMAL.y, fma(_903, _252 * TANGENT.y, (_238 * _231) * _901));
    float _912 = fma(_740, _245 * NORMAL.z, fma(_903, _252 * TANGENT.z, (_238 * _232) * _901));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4208 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _920 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4230 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4241 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4252 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _924 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    float _1005 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1006 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1024 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1027 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1030 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1043 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1044 = _1043 + 9u;
    uint _1045 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * cbInstanceData._m0[_1045].z;
    float _4263 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _1057 = 1.0 - _924;
    float _1058 = _1054 * _1057;
    float _1059 = _1055 * _1057;
    float _1060 = _1056 * _1057;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _924;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _924;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _924;
    float _1068 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    vec4 _1080 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1005, cbSceneParam._m0[86u].y * _1006));
    float _1083 = _1080.x * TEXCOORD_5.w;
    float _1084 = dot(vec3(_917, _918, _919), vec3(_997, _998, _999));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _917) - _997;
    float _1092 = (_1087 * _918) - _998;
    float _1093 = (_1087 * _919) - _999;
    float _1097 = abs(dot(vec3(_997, _998, _999), vec3(_917, _918, _919)));
    float _4296 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_920);
    float _1111 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1099;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1185 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1189 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1214 = _1146 + _917;
        float _1215 = _1150 + _918;
        float _1216 = _1154 + _919;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_917, _918, _919), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4344 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_917, _918, _919), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4377 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_917, _918, _919), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4410 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1501 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1505 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1528 = _1146 + _917;
        float _1529 = _1150 + _918;
        float _1530 = _1154 + _919;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_917, _918, _919), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4473 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_917, _918, _919), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4484 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4495 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4506 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_917, _918, _919), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4517 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4528 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4539 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1457;
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = _1457;
        _1776 = _1457;
        _1777 = _1457;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1469)) + _1469;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1470)) + _1470;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1471)) + _1471;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1091 * 0.5;
    float _1835 = _1092 * 0.5;
    float _1836 = _1093 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1964 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1967 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1995 = frontier_phi_14_12_ladder;
        }
        float _2166;
        if (_1964 > 0.0)
        {
            _2166 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2166 = frontier_phi_23_19_ladder;
        }
        float _2461;
        if (_1967 > 0.0)
        {
            _2461 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2461 = frontier_phi_35_30_ladder;
        }
        float _2463 = isnan(_2166) ? _1995 : (isnan(_1995) ? _2166 : min(_1995, _2166));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1961) + _1950;
        float _2469 = (_2464 * _1964) + _1954;
        float _2470 = (_2464 * _1967) + _1958;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_13_35_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_13_35_ladder_2;
        _1985 = frontier_phi_13_35_ladder_1;
        _1987 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1903);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2059 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2062 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2171;
        if (_2056 > 0.0)
        {
            _2171 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2171 = frontier_phi_25_21_ladder;
        }
        float _2488;
        if (_2059 > 0.0)
        {
            _2488 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2488 = frontier_phi_37_32_ladder;
        }
        float _2826;
        if (_2062 > 0.0)
        {
            _2826 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2826 = frontier_phi_47_44_ladder;
        }
        float _2828 = isnan(_2488) ? _2171 : (isnan(_2171) ? _2488 : min(_2171, _2488));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _2056) + _2045;
        float _2834 = (_2829 * _2059) + _2049;
        float _2835 = (_2829 * _2062) + _2053;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_22_47_ladder = _2957.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2957.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_22_47_ladder_2;
        _2083 = frontier_phi_22_47_ladder_1;
        _2085 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _1992);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1117 * _1068) + _1118) * _1083) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1117 * _1070) + _1118) * _1083) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1117 * _1071) + _1118) * _1083) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2158 = _2145 / _2157;
    float _2159 = _2149 / _2157;
    float _2160 = _2153 / _2157;
    float _2307;
    float _2308;
    float _2309;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2187 = ((uint(_2160 > cbSceneParam._m0[59u].y) + uint(_2160 > cbSceneParam._m0[59u].x)) + uint(_2160 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2188 = _2187 + 43u;
        uint _2196 = _2187 + 44u;
        uint _2204 = _2187 + 45u;
        uint _2212 = _2187 + 46u;
        float _2223 = fma(_2157, cbSceneParam._m0[_2188].w, fma(_2153, cbSceneParam._m0[_2188].z, fma(_2149, cbSceneParam._m0[_2188].y, _2145 * cbSceneParam._m0[_2188].x)));
        float _2227 = fma(_2157, cbSceneParam._m0[_2196].w, fma(_2153, cbSceneParam._m0[_2196].z, fma(_2149, cbSceneParam._m0[_2196].y, _2145 * cbSceneParam._m0[_2196].x)));
        float _2235 = fma(_2157, cbSceneParam._m0[_2212].w, fma(_2153, cbSceneParam._m0[_2212].z, fma(_2149, cbSceneParam._m0[_2212].y, _2145 * cbSceneParam._m0[_2212].x)));
        float _2240 = cbSceneParam._m0[33u].z * _2235;
        float _2242 = cbSceneParam._m0[33u].w * _2235;
        float _2245 = fma(_2157, cbSceneParam._m0[_2204].w, fma(_2153, cbSceneParam._m0[_2204].z, fma(_2149, cbSceneParam._m0[_2204].y, _2145 * cbSceneParam._m0[_2204].x))) / _2235;
        float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
        float _4665 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2300 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2223) / _2235, (_2242 + _2227) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2223) / _2235, (_2227 - _2240) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2240) / _2235, (_2227 - _2242) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2242) / _2235, (_2240 + _2227) / _2235), _2245), 0.0)).x), vec4(0.25)));
        _2307 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
        _2308 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
        _2309 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2307 = 1.0;
        _2308 = 1.0;
        _2309 = 1.0;
    }
    float _2373;
    float _2375;
    float _2377;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2361 = fma(_2157, cbSceneParam._m0[63u].w, fma(_2153, cbSceneParam._m0[63u].z, fma(_2149, cbSceneParam._m0[63u].y, _2145 * cbSceneParam._m0[63u].x)));
        float _2362 = fma(_2157, cbSceneParam._m0[60u].w, fma(_2153, cbSceneParam._m0[60u].z, fma(_2149, cbSceneParam._m0[60u].y, _2145 * cbSceneParam._m0[60u].x))) / _2361;
        float _2363 = fma(_2157, cbSceneParam._m0[61u].w, fma(_2153, cbSceneParam._m0[61u].z, fma(_2149, cbSceneParam._m0[61u].y, _2145 * cbSceneParam._m0[61u].x))) / _2361;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2362 >= cbSceneParam._m0[64u].x) && (_2363 >= cbSceneParam._m0[64u].y)) && (_2362 <= cbSceneParam._m0[64u].z)) && (_2363 <= cbSceneParam._m0[64u].w))
        {
            float _2501 = fma(_2157, cbSceneParam._m0[62u].w, fma(_2153, cbSceneParam._m0[62u].z, fma(_2149, cbSceneParam._m0[62u].y, _2145 * cbSceneParam._m0[62u].x))) / _2361;
            float _2505 = isnan(cbSceneParam._m0[41u].w) ? _2501 : (isnan(_2501) ? cbSceneParam._m0[41u].w : max(_2501, cbSceneParam._m0[41u].w));
            float _2548 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
            float _4681 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
            float _2555 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2362, cbSceneParam._m0[33u].w + _2363), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2362, _2363 - cbSceneParam._m0[33u].z), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].z, _2363 - cbSceneParam._m0[33u].w), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2363), _2505), 0.0)).x), vec4(0.25)));
            float _2559 = 1.0 - (_2555 * cbSceneParam._m0[34u].x);
            float _2560 = 1.0 - (_2555 * cbSceneParam._m0[34u].y);
            float _2561 = 1.0 - (_2555 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
            frontier_phi_34_33_ladder_1 = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_34_33_ladder_2 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
        }
        else
        {
            frontier_phi_34_33_ladder = _2309;
            frontier_phi_34_33_ladder_1 = _2308;
            frontier_phi_34_33_ladder_2 = _2307;
        }
        _2373 = frontier_phi_34_33_ladder_2;
        _2375 = frontier_phi_34_33_ladder_1;
        _2377 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2373 = _2307;
        _2375 = _2308;
        _2377 = _2309;
    }
    uvec4 _2382 = floatBitsToUint(cbInstanceData._m0[_1043 + 5u]);
    uint _2384 = _2382.x * 14u;
    uint _2385 = _2384 + 13u;
    float _2392 = _1083 + (-1.0);
    float _2397 = (cbLight._m0[_2385].x * _2392) + 1.0;
    float _2398 = (cbLight._m0[_2385].y * _2392) + 1.0;
    float _2399 = (cbLight._m0[_2385].z * _2392) + 1.0;
    float _2400 = (cbLight._m0[_2385].w * _2392) + 1.0;
    uint _2401 = _2384 + 5u;
    float _2407 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
    uint _2411 = _2384 + 4u;
    float _2420 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2424 = _2384 | 1u;
    float _2435 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_917, _918, _919));
    float _2438 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_917, _918, _919));
    float _4717 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _4728 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * 0.3183098733425140380859375;
    float _2445 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * 0.3183098733425140380859375;
    float _2452 = ((cbLight._m0[_2401].x * _2407) * _2445) + (((cbLight._m0[_2411].x * _2373) * _2420) * _2443);
    float _2453 = ((_2407 * cbLight._m0[_2401].y) * _2445) + (((cbLight._m0[_2411].y * _2375) * _2420) * _2443);
    float _2454 = ((_2407 * cbLight._m0[_2401].z) * _2445) + (((cbLight._m0[_2411].z * _2377) * _2420) * _2443);
    uvec4 _2458 = floatBitsToUint(cbLight._m0[_2384 + 12u]);
    bool _2460 = _2458.x == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2460)
    {
        _2562 = _2452;
        _2564 = _2453;
        _2566 = _2454;
    }
    else
    {
        uint _2570 = _2384 + 6u;
        float _2586 = (dot(vec3(cbLight._m0[_2384 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4739 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2589 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2562 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2452;
        _2564 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2453;
        _2566 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2454;
    }
    bool _2569 = _2458.y == 0u;
    float _2624;
    float _2626;
    float _2628;
    if (_2569)
    {
        _2624 = _2562;
        _2626 = _2564;
        _2628 = _2566;
    }
    else
    {
        uint _2797 = _2384 + 7u;
        float _2813 = (dot(vec3(cbLight._m0[_2384 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2814 = _2813 * _2813;
        float _4755 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2815 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2816 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2624 = (((cbLight._m0[_2797].x * 0.3183098733425140380859375) * _2815) * _2816) + _2562;
        _2626 = (((cbLight._m0[_2797].y * 0.3183098733425140380859375) * _2815) * _2816) + _2564;
        _2628 = (((cbLight._m0[_2797].z * 0.3183098733425140380859375) * _2815) * _2816) + _2566;
    }
    uint _2631 = _2384 + 8u;
    float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _920) * 0.949999988079071044921875);
    float _2645 = _2644 * _2644;
    float _2646 = cbLight._m0[_2384].x + _997;
    float _2647 = cbLight._m0[_2384].y + _998;
    float _2648 = cbLight._m0[_2384].z + _999;
    float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
    float _2653 = _2652 * _2646;
    float _2654 = _2652 * _2647;
    float _2655 = _2652 * _2648;
    float _2656 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2384].xyz));
    float _4771 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _4782 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2660 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2661 = dot(vec3(_917, _918, _919), vec3(_2653, _2654, _2655));
    float _4793 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2653, _2654, _2655));
    float _4804 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2645 * _2645;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0);
    float _2682 = 0.959999978542327880859375 - _1065;
    float _2684 = 0.959999978542327880859375 - _1066;
    float _2685 = 0.959999978542327880859375 - _1067;
    float _2692 = 1.0 - _2645;
    float _2703 = (0.5 / (((_2660 * ((_2659 * _2692) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2692) + _2645) * _2659))) * _2659;
    float _4815 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    uint _2719 = _2384 + 9u;
    float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _920) * 0.949999988079071044921875);
    float _2731 = _2730 * _2730;
    float _2732 = cbLight._m0[_2424].x + _997;
    float _2733 = cbLight._m0[_2424].y + _998;
    float _2734 = cbLight._m0[_2424].z + _999;
    float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
    float _2739 = _2738 * _2732;
    float _2740 = _2738 * _2733;
    float _2741 = _2738 * _2734;
    float _2742 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2424].xyz));
    float _4826 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2746 = dot(vec3(_917, _918, _919), vec3(_2739, _2740, _2741));
    float _4837 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2749 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _2750 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2739, _2740, _2741));
    float _4848 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2754 = _2731 * _2731;
    float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
    float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
    float _2772 = 1.0 - _2731;
    float _2782 = (0.5 / (((_2660 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2772) + _2731) * _2745))) * _2745;
    float _4859 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2784 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
    float _2794 = (((((_2765 * _2682) + _1068) * cbLight._m0[_2719].x) * _2784) * _2407) + ((((cbLight._m0[_2631].x * _2373) * ((_2681 * _2682) + _1068)) * _2705) * _2420);
    float _2795 = (((((_2765 * _2684) + _1070) * cbLight._m0[_2719].y) * _2784) * _2407) + ((((cbLight._m0[_2631].y * _2375) * ((_2681 * _2684) + _1070)) * _2705) * _2420);
    float _2796 = (((((_2765 * _2685) + _1071) * cbLight._m0[_2719].z) * _2784) * _2407) + ((((cbLight._m0[_2631].z * _2377) * ((_2681 * _2685) + _1071)) * _2705) * _2420);
    float _2852;
    float _2854;
    float _2856;
    if (_2460)
    {
        _2852 = _2794;
        _2854 = _2795;
        _2856 = _2796;
    }
    else
    {
        uint _2858 = _2384 + 2u;
        uint _2862 = _2384 + 10u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _920) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _997;
        float _2879 = cbLight._m0[_2858].y + _998;
        float _2880 = cbLight._m0[_2858].z + _999;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2858].xyz));
        float _4870 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2892 = dot(vec3(_917, _918, _919), vec3(_2885, _2886, _2887));
        float _4881 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4892 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2911 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
        float _2918 = 1.0 - _2877;
        float _2928 = (0.5 / (((_2660 * ((_2891 * _2918) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2918) + _2877) * _2891))) * _2891;
        float _4903 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2852 = (((((_2911 * _2682) + _1068) * cbLight._m0[_2862].x) * _2930) * _2931) + _2794;
        _2854 = (((((_2911 * _2684) + _1070) * cbLight._m0[_2862].y) * _2930) * _2931) + _2795;
        _2856 = (((((_2911 * _2685) + _1071) * cbLight._m0[_2862].z) * _2930) * _2931) + _2796;
    }
    float _2962;
    float _2964;
    float _2966;
    if (_2569)
    {
        _2962 = _2852;
        _2964 = _2854;
        _2966 = _2856;
    }
    else
    {
        uint _2973 = _2384 + 3u;
        uint _2977 = _2384 + 11u;
        float _2991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2973].w)) * _920) * 0.949999988079071044921875);
        float _2992 = _2991 * _2991;
        float _2993 = cbLight._m0[_2973].x + _997;
        float _2994 = cbLight._m0[_2973].y + _998;
        float _2995 = cbLight._m0[_2973].z + _999;
        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
        float _3000 = _2999 * _2993;
        float _3001 = _2999 * _2994;
        float _3002 = _2999 * _2995;
        float _3003 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2973].xyz));
        float _4919 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _3007 = dot(vec3(_917, _918, _919), vec3(_3000, _3001, _3002));
        float _4930 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
        float _3011 = dot(vec3(cbLight._m0[_2973].xyz), vec3(_3000, _3001, _3002));
        float _4941 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3015 = _2992 * _2992;
        float _3019 = ((_3010 * _3010) * (_3015 + (-1.0))) + 1.0;
        float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) * 5.0);
        float _3033 = 1.0 - _2992;
        float _3043 = (0.5 / (((_2660 * ((_3006 * _3033) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _3033) + _2992) * _3006))) * _3006;
        float _4952 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_3015 / ((_3019 * _3019) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2962 = (((((_3026 * _2682) + _1068) * cbLight._m0[_2977].x) * _3045) * _3046) + _2852;
        _2964 = (((((_3026 * _2684) + _1070) * cbLight._m0[_2977].y) * _3045) * _3046) + _2854;
        _2966 = (((((_3026 * _2685) + _1071) * cbLight._m0[_2977].z) * _3045) * _3046) + _2856;
    }
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_2382.y == 0u)
    {
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.x;
        uint _3079 = uint((float(_3067.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1006) / _3068))) + floor(float(uint(cbSceneParam._m0[85u].x * _1005) / _3068)));
        float _3089 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3090 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        uint _3093 = uint(isnan(14.0) ? _3090 : (isnan(_3090) ? 14.0 : min(_3090, 14.0)));
        uvec4 _3098 = texelFetch(g_lightClusterGridBuffer, int(((_3093 << 2u) + (_3079 << 6u)) >> 2u));
        uint _3099 = _3098.x;
        uint _3100 = _3067.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3100 >> 4u) & 15u)) + 4294967295u) & _3099) == 0u) || ((_3100 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            uint _3383 = 0u;
            uint _3392;
            bool _3393;
            for (;;)
            {
                _3392 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                _3393 = _3392 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3393)
                {
                    frontier_phi_66_pred = _3382;
                    frontier_phi_66_pred_1 = _3381;
                    frontier_phi_66_pred_2 = _3380;
                    frontier_phi_66_pred_3 = _3379;
                    frontier_phi_66_pred_4 = _3378;
                    frontier_phi_66_pred_5 = _3377;
                }
                else
                {
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    uint _3507;
                    _3501 = _3377;
                    _3502 = _3378;
                    _3503 = _3379;
                    _3504 = _3380;
                    _3505 = _3381;
                    _3506 = _3382;
                    _3507 = _3392;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    for (;;)
                    {
                        uint _3511 = uint(findLSB(_3507)) + (_3383 << 5u);
                        uint _3508 = (_3507 + 4294967295u) & _3507;
                        uint _3513 = _3511 * 48u;
                        vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3533 = (_3511 * 48u) + 4u;
                        vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 3u)).x));
                        uint _3552 = (_3511 * 48u) + 8u;
                        vec3 _3563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3552)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 2u)).x));
                        float _3567 = _3527.x - _2158;
                        float _3568 = _3527.y - _2159;
                        float _3569 = _3527.z - _2160;
                        float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                        float _3573 = inversesqrt(_3570);
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3577 = dot(vec3(_1024, _1027, _1030), vec3(_3574, _3575, _3576));
                        float _3582 = 1.0 - (_3570 * _3527.w);
                        float _4978 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3584 = sqrt(_3570) * _3546.w;
                        float _3587 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3577) + _3588;
                        float _3594 = _3584 * _3584;
                        float _3598 = ((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3583) / ((_3594 * 0.699999988079071044921875) + 1.0);
                        float _3602 = (-0.0) - _2158;
                        float _3603 = (-0.0) - _2159;
                        float _3604 = (-0.0) - _2160;
                        float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                        float _3609 = _3608 * _3602;
                        float _3610 = _3608 * _3603;
                        float _3611 = _3608 * _3604;
                        float _3618 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                        float _3619 = 1.0 - _1099;
                        float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                        float _3627 = _3626 * _3626;
                        float _3628 = _3627 * _3627;
                        float _3629 = _3609 + _3574;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                        float _3639 = dot(vec3(_1024, _1027, _1030), vec3(_3609, _3610, _3611));
                        float _4994 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3643 = dot(vec3(_1024, _1027, _1030), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                        float _5005 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                        float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                        float _3651 = _3587 * _3627;
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3577) + _3652;
                        float _5016 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                        float _3657 = 1.0 - _3627;
                        float _3667 = (0.5 / (((_3656 * ((_3642 * _3657) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3627) * _3642))) * _3656;
                        float _5027 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3678 = (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) / ((_3650 * _3650) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125))) * _3583;
                        _3436 = (_3598 * _3546.x) + _3504;
                        _3437 = (_3598 * _3546.y) + _3505;
                        _3438 = (_3598 * _3546.z) + _3506;
                        _3433 = (_3678 * _3563.x) + _3501;
                        _3434 = (_3678 * _3563.y) + _3502;
                        _3435 = (_3678 * _3563.z) + _3503;
                        if (_3508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3501 = _3433;
                            _3502 = _3434;
                            _3503 = _3435;
                            _3504 = _3436;
                            _3505 = _3437;
                            _3506 = _3438;
                            _3507 = _3508;
                        }
                    }
                    frontier_phi_66_pred = _3438;
                    frontier_phi_66_pred_1 = _3437;
                    frontier_phi_66_pred_2 = _3436;
                    frontier_phi_66_pred_3 = _3435;
                    frontier_phi_66_pred_4 = _3434;
                    frontier_phi_66_pred_5 = _3433;
                }
                _3235 = frontier_phi_66_pred;
                _3233 = frontier_phi_66_pred_1;
                _3231 = frontier_phi_66_pred_2;
                _3229 = frontier_phi_66_pred_3;
                _3227 = frontier_phi_66_pred_4;
                _3225 = frontier_phi_66_pred_5;
                uint _3384 = _3383 + 1u;
                if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3377 = _3225;
                    _3378 = _3227;
                    _3379 = _3229;
                    _3380 = _3231;
                    _3381 = _3233;
                    _3382 = _3235;
                    _3383 = _3384;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        if (((4294967295u << _3241) & _3099) == 0u)
        {
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
            _3353 = _3232;
            _3355 = _3234;
        }
        else
        {
            float _3370 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _3371 = _3370 * _2158;
            float _3372 = _3370 * _2159;
            float _3373 = _3370 * _2160;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3484 = _3224;
                float _3485 = _3226;
                float _3486 = _3228;
                float _3487 = _3230;
                float _3488 = _3232;
                float _3489 = _3234;
                uint _3490 = _3241;
                uint _3499;
                bool _3500;
                for (;;)
                {
                    _3499 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                    _3500 = _3499 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3500)
                    {
                        frontier_phi_72_pred = _3489;
                        frontier_phi_72_pred_1 = _3488;
                        frontier_phi_72_pred_2 = _3487;
                        frontier_phi_72_pred_3 = _3486;
                        frontier_phi_72_pred_4 = _3485;
                        frontier_phi_72_pred_5 = _3484;
                    }
                    else
                    {
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3696 = _3484;
                        float _3697 = _3485;
                        float _3698 = _3486;
                        float _3699 = _3487;
                        float _3700 = _3488;
                        float _3701 = _3489;
                        uint _3702 = _3499;
                        uint _3703;
                        vec4 _3728;
                        float _3729;
                        vec4 _3744;
                        vec3 _3756;
                        vec4 _3771;
                        vec4 _3786;
                        float _3833;
                        bool _3834;
                        for (;;)
                        {
                            uint _3713 = ((_3490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3702));
                            _3703 = (_3702 + 4294967295u) & _3702;
                            uint _3715 = _3713 * 40u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3729 = _3728.w;
                            uint _3731 = (_3713 * 40u) + 4u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3713 * 40u) + 8u;
                            _3756 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x));
                            uint _3758 = (_3713 * 40u) + 16u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3773 = (_3713 * 40u) + 20u;
                            _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3789 = (_3713 * 40u) + 24u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3808 = (_3713 * 40u) + 28u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            _3833 = fma(_2160, _3821.z, fma(_2159, _3821.y, _3821.x * _2158)) + _3821.w;
                            _3834 = !((fma(_2160, _3802.z, fma(_2159, _3802.y, _3802.x * _2158)) + _3802.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3834)
                            {
                                float _3861 = _3728.x - _2158;
                                float _3862 = _3728.y - _2159;
                                float _3863 = _3728.z - _2160;
                                float _3864 = dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863));
                                float _3867 = inversesqrt(_3864);
                                float _3868 = _3867 * _3861;
                                float _3869 = _3867 * _3862;
                                float _3870 = _3867 * _3863;
                                float _3874 = 1.0 - (_3864 / (_3729 * _3729));
                                float _5038 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3879 = sqrt(_3864) * _3744.w;
                                float _3881 = 1.39999997615814208984375 / (_3879 + 1.39999997615814208984375);
                                float _3882 = _3881 * _3881;
                                float _3885 = ((1.0 - _3882) * dot(vec3(_3868, _3869, _3870), vec3(_1024, _1027, _1030))) + _3882;
                                float _3888 = _3879 * _3879;
                                float _3892 = (fma(_2160, _3771.z, fma(_2159, _3771.y, _3771.x * _2158)) + _3771.w) / _3833;
                                float _3893 = (fma(_2160, _3786.z, fma(_2159, _3786.y, _3786.x * _2158)) + _3786.w) / _3833;
                                float _3897 = 1.0 - dot(vec2(_3892, _3893), vec2(_3892, _3893));
                                float _5054 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3899 = _3898 * (((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3875) / ((_3888 * 0.699999988079071044921875) + 1.0));
                                float _3911 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                                float _3912 = 1.0 - _1099;
                                float _3919 = sqrt(1.0 - ((1.0 - (_3912 * _3912)) * (1.0 - (_3911 * _3911))));
                                float _3920 = _3919 * _3919;
                                float _3921 = _3920 * _3920;
                                float _3922 = _3868 - _3371;
                                float _3923 = _3869 - _3372;
                                float _3924 = _3870 - _3373;
                                float _3928 = inversesqrt(dot(vec3(_3922, _3923, _3924), vec3(_3922, _3923, _3924)));
                                float _3932 = dot(vec3(_1024, _1027, _1030), vec3((-0.0) - _3371, (-0.0) - _3372, (-0.0) - _3373));
                                float _5065 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3936 = dot(vec3(_1024, _1027, _1030), vec3(_3928 * _3922, _3928 * _3923, _3928 * _3924));
                                float _5076 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3939 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                                float _3943 = ((_3939 * _3939) * (_3921 + (-1.0))) + 1.0;
                                float _3944 = _3881 * _3920;
                                float _3945 = _3944 * _3944;
                                float _3951 = ((1.0 - _3945) * dot(vec3(_1024, _1027, _1030), vec3(_3868, _3869, _3870))) + _3945;
                                float _5087 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3952 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                                float _3953 = 1.0 - _3920;
                                float _3963 = (0.5 / (((_3952 * ((_3935 * _3953) + _3920)) + 9.9999999392252902907785028219223e-09) + (((_3952 * _3953) + _3920) * _3935))) * _3952;
                                float _5098 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3973 = (_3898 * _3875) * (((_3921 * 3.1415927410125732421875) * (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) / ((_3943 * _3943) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3899 * _3744.y;
                                frontier_phi_78_pred_1 = _3899 * _3744.x;
                                frontier_phi_78_pred_2 = _3973 * _3756.z;
                                frontier_phi_78_pred_3 = _3973 * _3756.y;
                                frontier_phi_78_pred_4 = _3973 * _3756.x;
                                frontier_phi_78_pred_5 = _3899 * _3744.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3981 = frontier_phi_78_pred;
                            _3980 = frontier_phi_78_pred_1;
                            _3979 = frontier_phi_78_pred_2;
                            _3978 = frontier_phi_78_pred_3;
                            _3977 = frontier_phi_78_pred_4;
                            _3982 = frontier_phi_78_pred_5;
                            _3686 = _3980 + _3699;
                            _3687 = _3981 + _3700;
                            _3688 = _3982 + _3701;
                            _3683 = _3977 + _3696;
                            _3684 = _3978 + _3697;
                            _3685 = _3979 + _3698;
                            if (_3703 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3703;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3688;
                        frontier_phi_72_pred_1 = _3687;
                        frontier_phi_72_pred_2 = _3686;
                        frontier_phi_72_pred_3 = _3685;
                        frontier_phi_72_pred_4 = _3684;
                        frontier_phi_72_pred_5 = _3683;
                    }
                    _3356 = frontier_phi_72_pred;
                    _3354 = frontier_phi_72_pred_1;
                    _3352 = frontier_phi_72_pred_2;
                    _3350 = frontier_phi_72_pred_3;
                    _3348 = frontier_phi_72_pred_4;
                    _3346 = frontier_phi_72_pred_5;
                    uint _3491 = _3490 + 1u;
                    if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3484 = _3346;
                        _3485 = _3348;
                        _3486 = _3350;
                        _3487 = _3352;
                        _3488 = _3354;
                        _3489 = _3356;
                        _3490 = _3491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3356;
                frontier_phi_60_61_ladder_1 = _3354;
                frontier_phi_60_61_ladder_2 = _3350;
                frontier_phi_60_61_ladder_3 = _3348;
                frontier_phi_60_61_ladder_4 = _3346;
                frontier_phi_60_61_ladder_5 = _3352;
            }
            else
            {
                frontier_phi_60_61_ladder = _3234;
                frontier_phi_60_61_ladder_1 = _3232;
                frontier_phi_60_61_ladder_2 = _3228;
                frontier_phi_60_61_ladder_3 = _3226;
                frontier_phi_60_61_ladder_4 = _3224;
                frontier_phi_60_61_ladder_5 = _3230;
            }
            _3345 = frontier_phi_60_61_ladder_4;
            _3347 = frontier_phi_60_61_ladder_3;
            _3349 = frontier_phi_60_61_ladder_2;
            _3351 = frontier_phi_60_61_ladder_5;
            _3353 = frontier_phi_60_61_ladder_1;
            _3355 = frontier_phi_60_61_ladder;
        }
        float _3360 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _3112 = (_3360 * _3351) + _2624;
        _3114 = (_3360 * _3353) + _2626;
        _3116 = (_3360 * _3355) + _2628;
        _3118 = ((_3345 * _1068) * _3360) + _2962;
        _3120 = ((_3347 * _1070) * _3360) + _2964;
        _3122 = ((_3349 * _1071) * _3360) + _2966;
    }
    else
    {
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2962;
        _3120 = _2964;
        _3122 = _2966;
    }
    uint _3128 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _3134 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3140 = (((((_3134 * cbMtdParam._m0[14u].x) * _775.x) * _798) * _872) * (((1.0 - _851) * cbMtdParam._m0[20u].w) + _851)) * cbInstanceData._m0[_3128].x;
    float _3146 = (((((_3134 * cbMtdParam._m0[14u].y) * _775.y) * _798) * _872) * (((1.0 - _853) * cbMtdParam._m0[20u].w) + _853)) * cbInstanceData._m0[_3128].y;
    float _3152 = (((((_3134 * cbMtdParam._m0[14u].z) * _775.z) * _798) * _872) * (((1.0 - _855) * cbMtdParam._m0[20u].w) + _855)) * cbInstanceData._m0[_3128].z;
    float _5114 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _5125 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _5136 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _3169 = (((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3112 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1083))) + ((_3118 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + _3140;
    float _3171 = (_3146 + ((_3120 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_3114 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1083)));
    float _3173 = (_3152 + ((_3122 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0))) * (_3116 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1083)));
    float _5162 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3186 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
    uint _3187 = _1043 + 6u;
    float _3195 = _1005 / cbSceneParam._m0[86u].x;
    float _3196 = _1006 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _3250 = _3249 / _940;
        float _3261 = _3250 * _990;
        float _3262 = _991 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3264 = _3250 * _992;
        float _3266 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3267 = _3266 + cbSceneParam._m0[79u].w;
        float _3268 = cbSceneParam._m0[79u].w - _3262;
        float _3274 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3264 * _3264));
        float _3277 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3274;
        float _3282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3446;
        if (abs((_3263 - _3266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3446 = ((((_3267 > 0.0) ? exp2(_3282 * _3267) : (2.0 - exp2(_3284 * _3267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3277;
        }
        else
        {
            float _3406 = 1.0 / cbSceneParam._m0[80u].x;
            float _3407 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : max(_3267, _3268));
            float _3408 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : min(_3267, _3268));
            float _3417 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : min(_3407, 0.0));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            _3446 = ((abs(_3274 / _3263) * cbSceneParam._m0[80u].y) * ((((_3417 - _3418) * 2.0) - ((exp2(_3282 * (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0)))) - exp2(_3282 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))))) * _3406)) - ((exp2(_3284 * _3417) - exp2(_3284 * _3418)) * _3406))) + (_3277 * cbSceneParam._m0[80u].z);
        }
        vec4 _3448 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3457 = exp2((_3446 * (-1.44269502162933349609375)) * (1.0 - _3448.w));
        float _3458 = log2(_3457);
        float _3474 = log2(_3215);
        _3286 = (exp2(_3474 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].x)) * _3448.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3288 = (exp2(_3474 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].y)) * _3448.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3290 = (exp2(_3474 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3458 * cbSceneParam._m0[78u].z)) * _3448.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3292 = _3457 * _3215;
    }
    else
    {
        _3286 = _3212;
        _3288 = _3213;
        _3290 = _3214;
        _3292 = _3215;
    }
    float _3304 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3305 = _3304 == 3.0;
    float _3306 = log2(_3292);
    float _3310 = exp2(_3306 * cbSceneParam._m0[78u].x);
    float _3311 = exp2(_3306 * cbSceneParam._m0[78u].y);
    float _3312 = exp2(_3306 * cbSceneParam._m0[78u].z);
    float _3313 = _3310 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)));
    float _3314 = _3311 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)));
    float _3315 = _3312 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)));
    float _3324 = (_3304 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3324 * (_3305 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3286)));
    SV_Target.y = _3324 * (_3305 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3288)));
    SV_Target.z = _3324 * (_3305 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3290)));
    SV_Target.w = cbInstanceData._m0[_3187].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3140) * _3186) * _3310) * _3324;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3146) * _3186) * _3311) * _3324;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3152) * _3186) * _3312) * _3324;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
}


