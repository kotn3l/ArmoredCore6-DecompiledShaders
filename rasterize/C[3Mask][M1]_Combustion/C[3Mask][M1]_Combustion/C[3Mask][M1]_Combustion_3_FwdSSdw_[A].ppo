#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1440;
float _3898;
float _3899;
float _3900;
float _3901;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _272.x * cbMtdParam._m0[10u].x;
    float _279 = _272.y * cbMtdParam._m0[10u].y;
    float _280 = _272.z * cbMtdParam._m0[10u].z;
    vec4 _299 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _318 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _346 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _356 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _318.x) * 2.0) - _346)) + 1.0;
    float _3910 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _364 = (_357 * ((_299.x * cbMtdParam._m0[11u].x) - _278)) + _278;
    float _365 = (_357 * ((_299.y * cbMtdParam._m0[11u].y) - _279)) + _279;
    float _366 = (_357 * ((_299.z * cbMtdParam._m0[11u].z) - _280)) + _280;
    vec4 _384 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _397 = (((((1.0 - _318.y) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3921 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _405 = (((_384.x * cbMtdParam._m0[12u].x) - _364) * _398) + _364;
    float _406 = (_398 * ((_384.y * cbMtdParam._m0[12u].y) - _365)) + _365;
    float _407 = (_398 * ((_384.z * cbMtdParam._m0[12u].z) - _366)) + _366;
    vec4 _425 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _438 = (((((1.0 - _318.z) * 2.0) - _346) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3932 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _446 = (((_425.x * cbMtdParam._m0[13u].x) - _405) * _439) + _405;
    float _447 = (_439 * ((_425.y * cbMtdParam._m0[13u].y) - _406)) + _406;
    float _448 = (_439 * ((_425.z * cbMtdParam._m0[13u].z) - _407)) + _407;
    vec4 _473 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _492 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _495 = _492.x + 0.00999999977648258209228515625;
    float _502 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _495)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3943 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _510 = (_503 * ((_473.x * cbMtdParam._m0[16u].x) - _446)) + _446;
    float _511 = (_503 * ((_473.y * cbMtdParam._m0[16u].y) - _447)) + _447;
    float _512 = (_503 * ((_473.z * cbMtdParam._m0[16u].z) - _448)) + _448;
    vec4 _525 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _545 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _527) * _357) + _527;
    float _562 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _545) * _398) + _545;
    float _579 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _562) * _439) + _562;
    float _581 = _579 - (_579 * TEXCOORD_8);
    vec4 _594 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    vec4 _631 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _642 = ((_631.x - _617) * _357) + _617;
    float _643 = ((_631.y - _618) * _357) + _618;
    float _644 = ((_631.z - _619) * _357) + _619;
    vec4 _657 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _668 = ((_657.x - _642) * _398) + _642;
    float _669 = ((_657.y - _643) * _398) + _643;
    float _670 = ((_657.z - _644) * _398) + _644;
    vec4 _683 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _696 = ((_683.z - _670) * _439) + _670;
    float _699 = ((((_683.x - _668) * _439) + _668) * 2.0) + (-1.0);
    float _700 = ((((_683.y - _669) * _439) + _669) * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _3954 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))));
    float _711 = (((_594.z - _696) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _696;
    vec4 _741 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _755 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3965 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _764 = (((_756 * _756) * (3.0 - (_756 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _772 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _780 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3976 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _785 = (_781 * _781) * (3.0 - (_781 * 2.0));
    float _786 = _785 * cbMtdParam._m0[22u].x;
    float _787 = _785 * cbMtdParam._m0[22u].y;
    float _788 = sin(_772);
    float _789 = cos(_772);
    float _790 = TEXCOORD.z - _786;
    float _791 = TEXCOORD.w - _787;
    vec4 _811 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_786 + fma(_791, (-0.0) - _788, _790 * _789))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_791, _789, _790 * _788) + _787)) + cbTextureTilingScale._m0[2u].w));
    float _817 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _811.x;
    float _819 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _811.y;
    float _821 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _811.z;
    float _837 = (TEXCOORD_5.x - ((_495 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3987 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _838 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _844 = ((((_594.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _699;
    float _845 = ((((_594.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _700;
    float _848 = fma(_706, _243 * NORMAL.x, fma(_845, _250 * TANGENT.x, (_236 * _228) * _844));
    float _851 = fma(_706, _243 * NORMAL.y, fma(_845, _250 * TANGENT.y, (_236 * _229) * _844));
    float _854 = fma(_706, _243 * NORMAL.z, fma(_845, _250 * TANGENT.z, (_236 * _230) * _844));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3998 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _862 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4020 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4031 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4042 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _866 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _932 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _922);
    float _933 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _922);
    float _934 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _922);
    float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
    float _939 = _932 * _938;
    float _940 = _933 * _938;
    float _941 = _934 * _938;
    vec4 _946 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _948 = _946.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1120 = sqrt(((_932 * _932) + (_933 * _933)) + (_934 * _934));
        float _1126 = (cbMatDynParam._m0[5u].x * _1120) + cbMatDynParam._m0[5u].y;
        float _4053 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1131 = (cbMatDynParam._m0[5u].z * _1120) + cbMatDynParam._m0[5u].w;
        float _4064 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) - _1127)) + _1127) < ((_948 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _959 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _960 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _979 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _982 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _985 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    uint _998 = uint(roundEven(NORMAL.w)) * 13u;
    uint _999 = _998 + 9u;
    uint _1000 = _999 + uint(cbMatDynParam._m0[0u].w);
    float _1006 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_1000].x;
    float _1007 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1000].y;
    float _1008 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1000].z;
    float _4075 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1012 = 1.0 - _866;
    float _1013 = _1009 * _1012;
    float _1014 = _1010 * _1012;
    float _1015 = _1011 * _1012;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _866;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _866;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _866;
    float _1023 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    vec4 _1035 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _959, cbSceneParam._m0[86u].y * _960));
    float _1038 = _1035.x * TEXCOORD_5.w;
    float _1039 = dot(vec3(_859, _860, _861), vec3(_939, _940, _941));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _859) - _939;
    float _1047 = (_1042 * _860) - _940;
    float _1048 = (_1042 * _861) - _941;
    float _1052 = abs(dot(vec3(_939, _940, _941), vec3(_859, _860, _861)));
    float _4108 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_862);
    float _1066 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1054;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1164 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1168 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1172 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1197 = _1101 + _859;
        float _1198 = _1105 + _860;
        float _1199 = _1109 + _861;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1164;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1168;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1172;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1164 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1168 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1172 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_859, _860, _861), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4156 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_859, _860, _861), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4189 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_859, _860, _861), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4222 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1483 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1487 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1491 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1514 = _1101 + _859;
        float _1515 = _1105 + _860;
        float _1516 = _1109 + _861;
        float _1526 = fma(_1516, cbModelParam._m0[30u].z, fma(_1515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1514)) - _1483;
        float _1527 = fma(_1516, cbModelParam._m0[31u].z, fma(_1515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1514)) - _1487;
        float _1528 = fma(_1516, cbModelParam._m0[32u].z, fma(_1515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1514)) - _1491;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1545 = ((_1532 * _1526) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1483 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1527) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1487 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1532 * _1528) / cbModelParam._m0[35u].z) + ((((((_1491 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        float _1582 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1549.x + (-0.5));
        float _1584 = _1582 * (_1549.y + (-0.5));
        float _1585 = _1582 * (_1549.z + (-0.5));
        float _1592 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1556.x + (-0.5));
        float _1594 = _1592 * (_1556.y + (-0.5));
        float _1595 = _1592 * (_1556.z + (-0.5));
        float _1602 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1563.x + (-0.5));
        float _1604 = _1602 * (_1563.y + (-0.5));
        float _1605 = _1602 * (_1563.z + (-0.5));
        float _1612 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1570.x + (-0.5));
        float _1614 = _1612 * (_1570.y + (-0.5));
        float _1615 = _1612 * (_1570.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_859, _860, _861), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4285 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1646 + 1.0))) + _1651) * _1616;
        float _1661 = _1584 * 0.5;
        float _1662 = _1594 * 0.5;
        float _1663 = _1604 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_859, _860, _861), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4318 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1688 + 1.0))) + _1693) * _1617;
        float _1703 = _1585 * 0.5;
        float _1704 = _1595 * 0.5;
        float _1705 = _1605 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_859, _860, _861), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4351 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1730 + 1.0))) + _1735) * _1618;
        _1752 = _1585;
        _1753 = _1584;
        _1754 = _1583;
        _1755 = _1595;
        _1756 = _1594;
        _1757 = _1593;
        _1758 = _1605;
        _1759 = _1604;
        _1760 = _1603;
        _1761 = _1618;
        _1762 = _1617;
        _1763 = _1616;
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = _1440;
        _1760 = _1440;
        _1761 = _1440;
        _1762 = _1440;
        _1763 = _1440;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1452)) + _1452;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1453)) + _1453;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1454)) + _1454;
    float _1799 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1776));
    float _1820 = _1046 * 0.5;
    float _1821 = _1047 * 0.5;
    float _1822 = _1048 * 0.5;
    float _1823 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1826 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1829 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1863;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1836 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1840 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1844 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1851 = dot(vec4(cbModelParam._m0[39u]), vec4(_1820, _1821, _1822, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1874;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1865 = dot(vec4(cbModelParam._m0[40u]), vec4(_1820, _1821, _1822, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1878 = (_1874 * cbModelParam._m0[1u].x) + (_1863 * (1.0 - cbModelParam._m0[1u].x));
    float _1888 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _862);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1888 : min(cbModelParam._m0[25u].z, _1888));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1950 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1953 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1981 = frontier_phi_17_15_ladder;
        }
        float _2204;
        if (_1950 > 0.0)
        {
            _2204 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2204 = frontier_phi_26_22_ladder;
        }
        float _2461;
        if (_1953 > 0.0)
        {
            _2461 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2461 = frontier_phi_38_33_ladder;
        }
        float _2463 = isnan(_2204) ? _1981 : (isnan(_1981) ? _2204 : min(_1981, _2204));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1947) + _1936;
        float _2469 = (_2464 * _1950) + _1940;
        float _2470 = (_2464 * _1953) + _1944;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1889);
            frontier_phi_16_38_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_16_38_ladder_2;
        _1971 = frontier_phi_16_38_ladder_1;
        _1973 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1889);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _862);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2067;
    float _2069;
    float _2071;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2031 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2035 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2039 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2042 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2045 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2048 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2209;
        if (_2042 > 0.0)
        {
            _2209 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2209 = frontier_phi_28_24_ladder;
        }
        float _2488;
        if (_2045 > 0.0)
        {
            _2488 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2488 = frontier_phi_40_35_ladder;
        }
        float _2701;
        if (_2048 > 0.0)
        {
            _2701 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2701 = frontier_phi_49_46_ladder;
        }
        float _2703 = isnan(_2488) ? _2209 : (isnan(_2209) ? _2488 : min(_2209, _2488));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _2042) + _2031;
        float _2709 = (_2704 * _2045) + _2035;
        float _2710 = (_2704 * _2048) + _2039;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_25_49_ladder = _2954.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2954.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2954.x * cbModelParam._m0[1u].z;
        }
        _2067 = frontier_phi_25_49_ladder_2;
        _2069 = frontier_phi_25_49_ladder_1;
        _2071 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1978);
        _2067 = _2051.x * cbModelParam._m0[1u].z;
        _2069 = _2051.y * cbModelParam._m0[1u].z;
        _2071 = _2051.z * cbModelParam._m0[1u].z;
    }
    float _2084 = (((_1072 * _1023) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1072 * _1025) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1072 * _1026) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2091 = fma(_2088, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2084 * cbSceneParam._m0[89u].x));
    float _2094 = fma(_2088, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2084 * cbSceneParam._m0[90u].x));
    float _2097 = fma(_2088, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, _2084 * cbSceneParam._m0[91u].x));
    vec4 _2105 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_959, _960));
    float _2107 = _2105.w;
    float _2119 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2107);
    float _2120 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2107);
    float _2121 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2107);
    uvec4 _2125 = floatBitsToUint(cbInstanceData._m0[_998 + 5u]);
    uint _2127 = _2125.x * 14u;
    uint _2128 = _2127 + 13u;
    float _2135 = _1038 + (-1.0);
    float _2140 = (cbLight._m0[_2128].x * _2135) + 1.0;
    float _2141 = (cbLight._m0[_2128].y * _2135) + 1.0;
    float _2142 = (cbLight._m0[_2128].z * _2135) + 1.0;
    float _2143 = (cbLight._m0[_2128].w * _2135) + 1.0;
    uint _2144 = _2127 + 5u;
    float _2150 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2154 = _2127 + 4u;
    float _2163 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2167 = _2127 | 1u;
    float _2178 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_859, _860, _861));
    float _2181 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_859, _860, _861));
    float _4487 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _4498 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2186 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2188 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2195 = ((cbLight._m0[_2144].x * _2150) * _2188) + (((cbLight._m0[_2154].x * _2119) * _2163) * _2186);
    float _2196 = ((_2150 * cbLight._m0[_2144].y) * _2188) + (((cbLight._m0[_2154].y * _2120) * _2163) * _2186);
    float _2197 = ((_2150 * cbLight._m0[_2144].z) * _2188) + (((cbLight._m0[_2154].z * _2121) * _2163) * _2186);
    uvec4 _2201 = floatBitsToUint(cbLight._m0[_2127 + 12u]);
    bool _2203 = _2201.x == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2203)
    {
        _2214 = _2195;
        _2216 = _2196;
        _2218 = _2197;
    }
    else
    {
        uint _2222 = _2127 + 6u;
        float _2238 = (dot(vec3(cbLight._m0[_2127 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4509 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2241 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2214 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2195;
        _2216 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2196;
        _2218 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2197;
    }
    bool _2221 = _2201.y == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2221)
    {
        _2259 = _2214;
        _2261 = _2216;
        _2263 = _2218;
    }
    else
    {
        uint _2432 = _2127 + 7u;
        float _2448 = (dot(vec3(cbLight._m0[_2127 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4525 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2451 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2259 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2214;
        _2261 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2216;
        _2263 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2218;
    }
    uint _2266 = _2127 + 8u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _862) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2127].x + _939;
    float _2282 = cbLight._m0[_2127].y + _940;
    float _2283 = cbLight._m0[_2127].z + _941;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2127].xyz));
    float _4541 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _4552 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2295 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2296 = dot(vec3(_859, _860, _861), vec3(_2288, _2289, _2290));
    float _4563 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2288, _2289, _2290));
    float _4574 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2280 * _2280;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
    float _2317 = 0.959999978542327880859375 - _1020;
    float _2319 = 0.959999978542327880859375 - _1021;
    float _2320 = 0.959999978542327880859375 - _1022;
    float _2327 = 1.0 - _2280;
    float _2338 = (0.5 / (((_2295 * ((_2294 * _2327) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2327) + _2280) * _2294))) * _2294;
    float _4585 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    uint _2354 = _2127 + 9u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _862) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2167].x + _939;
    float _2368 = cbLight._m0[_2167].y + _940;
    float _2369 = cbLight._m0[_2167].z + _941;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2167].xyz));
    float _4596 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2381 = dot(vec3(_859, _860, _861), vec3(_2374, _2375, _2376));
    float _4607 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2374, _2375, _2376));
    float _4618 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2366 * _2366;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2407 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2295 * ((_2380 * _2407) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2407) + _2366) * _2380))) * _2380;
    float _4629 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    float _2429 = (((((_2400 * _2317) + _1023) * cbLight._m0[_2354].x) * _2419) * _2150) + ((((cbLight._m0[_2266].x * _2119) * ((_2316 * _2317) + _1023)) * _2340) * _2163);
    float _2430 = (((((_2400 * _2319) + _1025) * cbLight._m0[_2354].y) * _2419) * _2150) + ((((cbLight._m0[_2266].y * _2120) * ((_2316 * _2319) + _1025)) * _2340) * _2163);
    float _2431 = (((((_2400 * _2320) + _1026) * cbLight._m0[_2354].z) * _2419) * _2150) + ((((cbLight._m0[_2266].z * _2121) * ((_2316 * _2320) + _1026)) * _2340) * _2163);
    float _2493;
    float _2495;
    float _2497;
    if (_2203)
    {
        _2493 = _2429;
        _2495 = _2430;
        _2497 = _2431;
    }
    else
    {
        uint _2499 = _2127 + 2u;
        uint _2503 = _2127 + 10u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _862) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _939;
        float _2520 = cbLight._m0[_2499].y + _940;
        float _2521 = cbLight._m0[_2499].z + _941;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2499].xyz));
        float _4640 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2533 = dot(vec3(_859, _860, _861), vec3(_2526, _2527, _2528));
        float _4651 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4662 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
        float _2559 = 1.0 - _2518;
        float _2569 = (0.5 / (((_2295 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2559) + _2518) * _2532))) * _2532;
        float _4673 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2493 = (((((_2552 * _2317) + _1023) * cbLight._m0[_2503].x) * _2571) * _2572) + _2429;
        _2495 = (((((_2552 * _2319) + _1025) * cbLight._m0[_2503].y) * _2571) * _2572) + _2430;
        _2497 = (((((_2552 * _2320) + _1026) * cbLight._m0[_2503].z) * _2571) * _2572) + _2431;
    }
    float _2607;
    float _2609;
    float _2611;
    if (_2221)
    {
        _2607 = _2493;
        _2609 = _2495;
        _2611 = _2497;
    }
    else
    {
        uint _2618 = _2127 + 3u;
        uint _2622 = _2127 + 11u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _862) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _939;
        float _2639 = cbLight._m0[_2618].y + _940;
        float _2640 = cbLight._m0[_2618].z + _941;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2618].xyz));
        float _4689 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2652 = dot(vec3(_859, _860, _861), vec3(_2645, _2646, _2647));
        float _4700 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4711 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2678 = 1.0 - _2637;
        float _2688 = (0.5 / (((_2295 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2678) + _2637) * _2651))) * _2651;
        float _4722 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2607 = (((((_2671 * _2317) + _1023) * cbLight._m0[_2622].x) * _2690) * _2691) + _2493;
        _2609 = (((((_2671 * _2319) + _1025) * cbLight._m0[_2622].y) * _2690) * _2691) + _2495;
        _2611 = (((((_2671 * _2320) + _1026) * cbLight._m0[_2622].z) * _2690) * _2691) + _2497;
    }
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_2125.y == 0u)
    {
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2766;
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2766;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2766;
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.x;
        uint _2793 = uint((float(_2781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _960) / _2782))) + floor(float(uint(cbSceneParam._m0[85u].x * _959) / _2782)));
        float _2803 = (log2(_2769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        uint _2807 = uint(isnan(14.0) ? _2804 : (isnan(_2804) ? 14.0 : min(_2804, 14.0)));
        uvec4 _2812 = texelFetch(g_lightClusterGridBuffer, int(((_2807 << 2u) + (_2793 << 6u)) >> 2u));
        uint _2813 = _2812.x;
        uint _2814 = _2781.z;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((((1u << ((_2814 >> 4u) & 15u)) + 4294967295u) & _2813) == 0u) || ((_2814 & 240u) == 0u))
        {
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
        }
        else
        {
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            uint _3126 = 0u;
            uint _3135;
            bool _3136;
            for (;;)
            {
                _3135 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                _3136 = _3135 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3136)
                {
                    frontier_phi_66_pred = _3120;
                    frontier_phi_66_pred_1 = _3125;
                    frontier_phi_66_pred_2 = _3124;
                    frontier_phi_66_pred_3 = _3123;
                    frontier_phi_66_pred_4 = _3122;
                    frontier_phi_66_pred_5 = _3121;
                }
                else
                {
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    uint _3271;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3135;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    for (;;)
                    {
                        uint _3275 = uint(findLSB(_3271)) + (_3126 << 5u);
                        uint _3272 = (_3271 + 4294967295u) & _3271;
                        uint _3277 = _3275 * 48u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3297 = (_3275 * 48u) + 4u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3316 = (_3275 * 48u) + 8u;
                        vec3 _3327 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x));
                        float _3331 = _3291.x - _2767;
                        float _3332 = _3291.y - _2768;
                        float _3333 = _3291.z - _2769;
                        float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                        float _3337 = inversesqrt(_3334);
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3341 = dot(vec3(_979, _982, _985), vec3(_3338, _3339, _3340));
                        float _3346 = 1.0 - (_3334 * _3291.w);
                        float _4748 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3348 = sqrt(_3334) * _3310.w;
                        float _3351 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3341) + _3352;
                        float _3358 = _3348 * _3348;
                        float _3362 = ((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3347) / ((_3358 * 0.699999988079071044921875) + 1.0);
                        float _3366 = (-0.0) - _2767;
                        float _3367 = (-0.0) - _2768;
                        float _3368 = (-0.0) - _2769;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3383 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                        float _3384 = 1.0 - _1054;
                        float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                        float _3392 = _3391 * _3391;
                        float _3393 = _3392 * _3392;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3396 = _3375 + _3340;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3404 = dot(vec3(_979, _982, _985), vec3(_3373, _3374, _3375));
                        float _4764 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3408 = dot(vec3(_979, _982, _985), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                        float _4775 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                        float _3416 = _3351 * _3392;
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3341) + _3417;
                        float _4786 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3422 = 1.0 - _3392;
                        float _3432 = (0.5 / (((_3421 * ((_3407 * _3422) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3392) * _3407))) * _3421;
                        float _4797 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3443 = (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3415 * _3415) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125))) * _3347;
                        _3195 = (_3362 * _3310.x) + _3268;
                        _3196 = (_3362 * _3310.y) + _3269;
                        _3197 = (_3362 * _3310.z) + _3270;
                        _3192 = (_3443 * _3327.x) + _3265;
                        _3193 = (_3443 * _3327.y) + _3266;
                        _3194 = (_3443 * _3327.z) + _3267;
                        if (_3272 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3272;
                        }
                    }
                    frontier_phi_66_pred = _3192;
                    frontier_phi_66_pred_1 = _3197;
                    frontier_phi_66_pred_2 = _3196;
                    frontier_phi_66_pred_3 = _3195;
                    frontier_phi_66_pred_4 = _3194;
                    frontier_phi_66_pred_5 = _3193;
                }
                _2960 = frontier_phi_66_pred;
                _2970 = frontier_phi_66_pred_1;
                _2968 = frontier_phi_66_pred_2;
                _2966 = frontier_phi_66_pred_3;
                _2964 = frontier_phi_66_pred_4;
                _2962 = frontier_phi_66_pred_5;
                uint _3127 = _3126 + 1u;
                if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3120 = _2960;
                    _3121 = _2962;
                    _3122 = _2964;
                    _3123 = _2966;
                    _3124 = _2968;
                    _3125 = _2970;
                    _3126 = _3127;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
        }
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.z;
        uint _2976 = (_2974 >> 8u) & 15u;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((4294967295u << _2976) & _2813) == 0u)
        {
            _3088 = _2959;
            _3090 = _2961;
            _3092 = _2963;
            _3094 = _2965;
            _3096 = _2967;
            _3098 = _2969;
        }
        else
        {
            float _3113 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
            float _3114 = _3113 * _2767;
            float _3115 = _3113 * _2768;
            float _3116 = _3113 * _2769;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2976 < ((_2974 >> 12u) & 15u))
            {
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3248 = _2959;
                float _3249 = _2961;
                float _3250 = _2963;
                float _3251 = _2965;
                float _3252 = _2967;
                float _3253 = _2969;
                uint _3254 = _2976;
                uint _3263;
                bool _3264;
                for (;;)
                {
                    _3263 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                    _3264 = _3263 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3264)
                    {
                        frontier_phi_77_pred = _3253;
                        frontier_phi_77_pred_1 = _3252;
                        frontier_phi_77_pred_2 = _3251;
                        frontier_phi_77_pred_3 = _3250;
                        frontier_phi_77_pred_4 = _3249;
                        frontier_phi_77_pred_5 = _3248;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        uint _3476 = _3263;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3607;
                        bool _3608;
                        for (;;)
                        {
                            uint _3487 = ((_3254 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3563 = (_3487 * 40u) + 24u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3582 = (_3487 * 40u) + 28u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3607 = fma(_2769, _3595.z, fma(_2768, _3595.y, _3595.x * _2767)) + _3595.w;
                            _3608 = !((fma(_2769, _3576.z, fma(_2768, _3576.y, _3576.x * _2767)) + _3576.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3608)
                            {
                                float _3635 = _3502.x - _2767;
                                float _3636 = _3502.y - _2768;
                                float _3637 = _3502.z - _2769;
                                float _3638 = dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637));
                                float _3641 = inversesqrt(_3638);
                                float _3642 = _3641 * _3635;
                                float _3643 = _3641 * _3636;
                                float _3644 = _3641 * _3637;
                                float _3648 = 1.0 - (_3638 / (_3503 * _3503));
                                float _4808 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3653 = sqrt(_3638) * _3518.w;
                                float _3655 = 1.39999997615814208984375 / (_3653 + 1.39999997615814208984375);
                                float _3656 = _3655 * _3655;
                                float _3659 = ((1.0 - _3656) * dot(vec3(_3642, _3643, _3644), vec3(_979, _982, _985))) + _3656;
                                float _3662 = _3653 * _3653;
                                float _3666 = (fma(_2769, _3545.z, fma(_2768, _3545.y, _3545.x * _2767)) + _3545.w) / _3607;
                                float _3667 = (fma(_2769, _3560.z, fma(_2768, _3560.y, _3560.x * _2767)) + _3560.w) / _3607;
                                float _3671 = 1.0 - dot(vec2(_3666, _3667), vec2(_3666, _3667));
                                float _4824 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3673 = _3672 * (((isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0))) * _3649) / ((_3662 * 0.699999988079071044921875) + 1.0));
                                float _3685 = exp2(log2(1.0 / ((_3662 * 3.5) + 5.0)) * 0.25);
                                float _3686 = 1.0 - _1054;
                                float _3693 = sqrt(1.0 - ((1.0 - (_3686 * _3686)) * (1.0 - (_3685 * _3685))));
                                float _3694 = _3693 * _3693;
                                float _3695 = _3694 * _3694;
                                float _3696 = _3642 - _3114;
                                float _3697 = _3643 - _3115;
                                float _3698 = _3644 - _3116;
                                float _3702 = inversesqrt(dot(vec3(_3696, _3697, _3698), vec3(_3696, _3697, _3698)));
                                float _3706 = dot(vec3(_979, _982, _985), vec3((-0.0) - _3114, (-0.0) - _3115, (-0.0) - _3116));
                                float _4835 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3710 = dot(vec3(_979, _982, _985), vec3(_3702 * _3696, _3702 * _3697, _3702 * _3698));
                                float _4846 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3717 = ((_3713 * _3713) * (_3695 + (-1.0))) + 1.0;
                                float _3718 = _3655 * _3694;
                                float _3719 = _3718 * _3718;
                                float _3725 = ((1.0 - _3719) * dot(vec3(_979, _982, _985), vec3(_3642, _3643, _3644))) + _3719;
                                float _4857 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3727 = 1.0 - _3694;
                                float _3737 = (0.5 / (((_3726 * ((_3709 * _3727) + _3694)) + 9.9999999392252902907785028219223e-09) + (((_3726 * _3727) + _3694) * _3709))) * _3726;
                                float _4868 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3747 = (_3672 * _3649) * (((_3695 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3717 * _3717) * ((_3662 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3673 * _3518.y;
                                frontier_phi_83_pred_1 = _3673 * _3518.x;
                                frontier_phi_83_pred_2 = _3747 * _3530.z;
                                frontier_phi_83_pred_3 = _3747 * _3530.y;
                                frontier_phi_83_pred_4 = _3747 * _3530.x;
                                frontier_phi_83_pred_5 = _3673 * _3518.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3755 = frontier_phi_83_pred;
                            _3754 = frontier_phi_83_pred_1;
                            _3753 = frontier_phi_83_pred_2;
                            _3752 = frontier_phi_83_pred_3;
                            _3751 = frontier_phi_83_pred_4;
                            _3756 = frontier_phi_83_pred_5;
                            _3460 = _3754 + _3473;
                            _3461 = _3755 + _3474;
                            _3462 = _3756 + _3475;
                            _3457 = _3751 + _3470;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3462;
                        frontier_phi_77_pred_1 = _3461;
                        frontier_phi_77_pred_2 = _3460;
                        frontier_phi_77_pred_3 = _3459;
                        frontier_phi_77_pred_4 = _3458;
                        frontier_phi_77_pred_5 = _3457;
                    }
                    _3099 = frontier_phi_77_pred;
                    _3097 = frontier_phi_77_pred_1;
                    _3095 = frontier_phi_77_pred_2;
                    _3093 = frontier_phi_77_pred_3;
                    _3091 = frontier_phi_77_pred_4;
                    _3089 = frontier_phi_77_pred_5;
                    uint _3255 = _3254 + 1u;
                    if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3248 = _3089;
                        _3249 = _3091;
                        _3250 = _3093;
                        _3251 = _3095;
                        _3252 = _3097;
                        _3253 = _3099;
                        _3254 = _3255;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3093;
                frontier_phi_58_59_ladder_1 = _3099;
                frontier_phi_58_59_ladder_2 = _3097;
                frontier_phi_58_59_ladder_3 = _3095;
                frontier_phi_58_59_ladder_4 = _3091;
                frontier_phi_58_59_ladder_5 = _3089;
            }
            else
            {
                frontier_phi_58_59_ladder = _2963;
                frontier_phi_58_59_ladder_1 = _2969;
                frontier_phi_58_59_ladder_2 = _2967;
                frontier_phi_58_59_ladder_3 = _2965;
                frontier_phi_58_59_ladder_4 = _2961;
                frontier_phi_58_59_ladder_5 = _2959;
            }
            _3088 = frontier_phi_58_59_ladder_5;
            _3090 = frontier_phi_58_59_ladder_4;
            _3092 = frontier_phi_58_59_ladder;
            _3094 = frontier_phi_58_59_ladder_3;
            _3096 = frontier_phi_58_59_ladder_2;
            _3098 = frontier_phi_58_59_ladder_1;
        }
        float _3103 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2826 = (_3103 * _3094) + _2259;
        _2828 = (_3103 * _3096) + _2261;
        _2830 = (_3103 * _3098) + _2263;
        _2832 = ((_3088 * _1023) * _3103) + _2607;
        _2834 = ((_3090 * _1025) * _3103) + _2609;
        _2836 = ((_3092 * _1026) * _3103) + _2611;
    }
    else
    {
        _2826 = _2259;
        _2828 = _2261;
        _2830 = _2263;
        _2832 = _2607;
        _2834 = _2609;
        _2836 = _2611;
    }
    uint _2842 = _999 + uint(cbMatDynParam._m0[0u].w);
    float _2848 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2854 = (((((_2848 * cbMtdParam._m0[14u].x) * _741.x) * _764) * _838) * (((1.0 - _817) * cbMtdParam._m0[20u].w) + _817)) * cbInstanceData._m0[_2842].x;
    float _2860 = (((((_2848 * cbMtdParam._m0[14u].y) * _741.y) * _764) * _838) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_2842].y;
    float _2866 = (((((_2848 * cbMtdParam._m0[14u].z) * _741.z) * _764) * _838) * (((1.0 - _821) * cbMtdParam._m0[20u].w) + _821)) * cbInstanceData._m0[_2842].z;
    float _4884 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4895 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4906 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2883 = (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2826 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1038))) + ((_2832 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + _2854;
    float _2885 = (_2860 + ((_2834 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2828 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1038)));
    float _2887 = (_2866 + ((_2836 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2830 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1038)));
    float _2888 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2889 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
    float _2890 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2896 = cbMtdParam._m0[2u].x * _2854;
    float _2897 = cbMtdParam._m0[2u].y * _2860;
    float _2898 = cbMtdParam._m0[2u].z * _2866;
    float _4932 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2900 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    uint _2901 = _998 + 6u;
    float _2909 = _959 / cbSceneParam._m0[86u].x;
    float _2910 = _960 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2984 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2985 = _2984 / _882;
        float _2996 = _2985 * _932;
        float _2997 = _933 * _2985;
        float _2998 = (-0.0) - _2997;
        float _2999 = _2985 * _934;
        float _3001 = (cbSceneParam._m0[77u].w * _2998) / _2984;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2997;
        float _3009 = sqrt(((_2996 * _2996) + (_2997 * _2997)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2984)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3205;
        if (abs((_2998 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3205 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3149 = 1.0 / cbSceneParam._m0[80u].x;
            float _3150 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3151 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            _3205 = ((abs(_3009 / _2998) * cbSceneParam._m0[80u].y) * ((((_3160 - _3161) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))))) * _3149)) - ((exp2(_3019 * _3160) - exp2(_3019 * _3161)) * _3149))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3216 = exp2((_3205 * (-1.44269502162933349609375)) * (1.0 - _3207.w));
        float _3217 = log2(_3216);
        float _3233 = log2(_2929);
        _3021 = (exp2(_3233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].x)) * _3207.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3023 = (exp2(_3233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].y)) * _3207.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3025 = (exp2(_3233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].z)) * _3207.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3027 = _3216 * _2929;
    }
    else
    {
        _3021 = _2926;
        _3023 = _2927;
        _3025 = _2928;
        _3027 = _2929;
    }
    bool _3243;
    vec4 _3037;
    vec4 _3059;
    float _3061;
    float _3065;
    float _3066;
    float _3067;
    float _3070;
    float _3073;
    float _3076;
    float _3077;
    bool _3087;
    for (;;)
    {
        _3037 = cbMatDynParam._m0[0u];
        float _3039 = roundEven(_3037.y);
        bool _3040 = _3039 == 3.0;
        float _3041 = log2(_3027);
        float _3045 = exp2(_3041 * cbSceneParam._m0[78u].x);
        float _3046 = exp2(_3041 * cbSceneParam._m0[78u].y);
        float _3047 = exp2(_3041 * cbSceneParam._m0[78u].z);
        float _3048 = _3045 * _2888;
        float _3049 = _3046 * _2889;
        float _3050 = _3047 * _2890;
        float _3057 = _948 + (-0.5);
        _3059 = cbMtdParam._m0[1u];
        _3061 = _3059.y * _3057;
        float _3064 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3065 = _3064 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
        _3066 = _3064 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
        _3067 = _3064 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
        _3070 = ((_2896 * _2900) * _3045) * _3064;
        _3073 = ((_2897 * _2900) * _3046) * _3064;
        _3076 = ((_2898 * _2900) * _3047) * _3064;
        _3077 = _3057 * 0.999000012874603271484375;
        _3087 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3087)
        {
            if ((cbInstanceData._m0[_998 + 7u].x + _3077) < 0.5)
            {
                _3243 = true;
                break;
            }
        }
        uint _3184 = _999 + uint(_3037.w);
        if ((cbInstanceData._m0[_3184].w < 1.0) && ((cbInstanceData._m0[_3184].w + _3077) < 0.5))
        {
            _3243 = true;
            break;
        }
        if ((_3061 + 1.0) < _3059.x)
        {
            _3243 = true;
            break;
        }
        _3243 = false;
        break;
    }
    float _3448;
    if (_3243)
    {
        discard_state = true;
        _3448 = 0.0;
    }
    else
    {
        _3448 = cbInstanceData._m0[_2901].w;
    }
    SV_Target.x = _3065;
    SV_Target.y = _3066;
    SV_Target.z = _3067;
    SV_Target.w = _3448;
    SV_Target_1.x = _3070;
    SV_Target_1.y = _3073;
    SV_Target_1.z = _3076;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
    discard_exit();
}


