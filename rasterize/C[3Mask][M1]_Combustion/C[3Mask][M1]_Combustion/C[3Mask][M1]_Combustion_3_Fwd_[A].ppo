#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _3872;
float _3873;
float _3874;
float _3875;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _297 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _316 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _354 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _316.x) * 2.0) - _344)) + 1.0;
    float _3884 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _362 = (_355 * ((_297.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _363 = (_355 * ((_297.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _364 = (_355 * ((_297.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _382 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _395 = (((((1.0 - _316.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3895 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _403 = (((_382.x * cbMtdParam._m0[12u].x) - _362) * _396) + _362;
    float _404 = (_396 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _405 = (_396 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _423 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = (((((1.0 - _316.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3906 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _444 = (((_423.x * cbMtdParam._m0[13u].x) - _403) * _437) + _403;
    float _445 = (_437 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404;
    float _446 = (_437 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405;
    vec4 _471 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _490 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _493 = _490.x + 0.00999999977648258209228515625;
    float _500 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _493)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3917 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _508 = (_501 * ((_471.x * cbMtdParam._m0[16u].x) - _444)) + _444;
    float _509 = (_501 * ((_471.y * cbMtdParam._m0[16u].y) - _445)) + _445;
    float _510 = (_501 * ((_471.z * cbMtdParam._m0[16u].z) - _446)) + _446;
    vec4 _523 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _543 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _525) * _355) + _525;
    float _560 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _543) * _396) + _543;
    float _577 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _560) * _437) + _560;
    float _579 = _577 - (_577 * TEXCOORD_8);
    vec4 _592 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    vec4 _629 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _640 = ((_629.x - _615) * _355) + _615;
    float _641 = ((_629.y - _616) * _355) + _616;
    float _642 = ((_629.z - _617) * _355) + _617;
    vec4 _655 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _666 = ((_655.x - _640) * _396) + _640;
    float _667 = ((_655.y - _641) * _396) + _641;
    float _668 = ((_655.z - _642) * _396) + _642;
    vec4 _681 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _694 = ((_681.z - _668) * _437) + _668;
    float _697 = ((((_681.x - _666) * _437) + _666) * 2.0) + (-1.0);
    float _698 = ((((_681.y - _667) * _437) + _667) * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3928 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))));
    float _709 = (((_592.z - _694) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _694;
    vec4 _739 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _753 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3939 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _762 = (((_754 * _754) * (3.0 - (_754 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _770 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _778 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3950 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _783 = (_779 * _779) * (3.0 - (_779 * 2.0));
    float _784 = _783 * cbMtdParam._m0[22u].x;
    float _785 = _783 * cbMtdParam._m0[22u].y;
    float _786 = sin(_770);
    float _787 = cos(_770);
    float _788 = TEXCOORD.z - _784;
    float _789 = TEXCOORD.w - _785;
    vec4 _809 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_784 + fma(_789, (-0.0) - _786, _788 * _787))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_789, _787, _788 * _786) + _785)) + cbTextureTilingScale._m0[2u].w));
    float _815 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _809.x;
    float _817 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _809.y;
    float _819 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _809.z;
    float _835 = (TEXCOORD_5.x - ((_493 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3961 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _842 = ((((_592.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _697;
    float _843 = ((((_592.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _698;
    float _846 = fma(_704, _241 * NORMAL.x, fma(_843, _248 * TANGENT.x, (_234 * _226) * _842));
    float _849 = fma(_704, _241 * NORMAL.y, fma(_843, _248 * TANGENT.y, (_234 * _227) * _842));
    float _852 = fma(_704, _241 * NORMAL.z, fma(_843, _248 * TANGENT.z, (_234 * _228) * _842));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _3972 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _860 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3994 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4005 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4016 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _864 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _930 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _920);
    float _931 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _920);
    float _932 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _920);
    float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
    float _937 = _930 * _936;
    float _938 = _931 * _936;
    float _939 = _932 * _936;
    vec4 _944 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _946 = _944.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1118 = sqrt(((_930 * _930) + (_931 * _931)) + (_932 * _932));
        float _1124 = (cbMatDynParam._m0[5u].x * _1118) + cbMatDynParam._m0[5u].y;
        float _4027 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1129 = (cbMatDynParam._m0[5u].z * _1118) + cbMatDynParam._m0[5u].w;
        float _4038 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) - _1125)) + _1125) < ((_946 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _957 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _958 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _977 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _980 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _983 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _996 = uint(roundEven(NORMAL.w)) * 13u;
    uint _997 = _996 + 9u;
    uint _998 = _997 + uint(cbMatDynParam._m0[0u].w);
    float _1004 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_998].x;
    float _1005 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_998].y;
    float _1006 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_998].z;
    float _4049 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1007 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1008 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1010 = 1.0 - _864;
    float _1011 = _1007 * _1010;
    float _1012 = _1008 * _1010;
    float _1013 = _1009 * _1010;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _864;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _864;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _864;
    float _1021 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _957, cbSceneParam._m0[86u].y * _958));
    float _1036 = _1033.x * TEXCOORD_5.w;
    float _1037 = dot(vec3(_857, _858, _859), vec3(_937, _938, _939));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _857) - _937;
    float _1045 = (_1040 * _858) - _938;
    float _1046 = (_1040 * _859) - _939;
    float _1050 = abs(dot(vec3(_937, _938, _939), vec3(_857, _858, _859)));
    float _4082 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_860);
    float _1064 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1070 = (1.0 - _1064) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1071 = _1064 * _1052;
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1162 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1166 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1170 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1195 = _1099 + _857;
        float _1196 = _1103 + _858;
        float _1197 = _1107 + _859;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1162;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1166;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1170;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1162 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1166 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1170 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_857, _858, _859), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4130 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_857, _858, _859), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4163 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_857, _858, _859), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4196 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1481 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1485 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1489 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1512 = _1099 + _857;
        float _1513 = _1103 + _858;
        float _1514 = _1107 + _859;
        float _1524 = fma(_1514, cbModelParam._m0[30u].z, fma(_1513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1512)) - _1481;
        float _1525 = fma(_1514, cbModelParam._m0[31u].z, fma(_1513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1512)) - _1485;
        float _1526 = fma(_1514, cbModelParam._m0[32u].z, fma(_1513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1512)) - _1489;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1481 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1485 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[35u].z) + ((((((_1489 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1580 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1547.x + (-0.5));
        float _1582 = _1580 * (_1547.y + (-0.5));
        float _1583 = _1580 * (_1547.z + (-0.5));
        float _1590 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1554.x + (-0.5));
        float _1592 = _1590 * (_1554.y + (-0.5));
        float _1593 = _1590 * (_1554.z + (-0.5));
        float _1600 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1561.x + (-0.5));
        float _1602 = _1600 * (_1561.y + (-0.5));
        float _1603 = _1600 * (_1561.z + (-0.5));
        float _1610 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1568.x + (-0.5));
        float _1612 = _1610 * (_1568.y + (-0.5));
        float _1613 = _1610 * (_1568.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_857, _858, _859), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4259 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1644 + 1.0))) + _1649) * _1614;
        float _1659 = _1582 * 0.5;
        float _1660 = _1592 * 0.5;
        float _1661 = _1602 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_857, _858, _859), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4292 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1686 + 1.0))) + _1691) * _1615;
        float _1701 = _1583 * 0.5;
        float _1702 = _1593 * 0.5;
        float _1703 = _1603 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_857, _858, _859), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4325 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1728 + 1.0))) + _1733) * _1616;
        _1750 = _1583;
        _1751 = _1582;
        _1752 = _1581;
        _1753 = _1593;
        _1754 = _1592;
        _1755 = _1591;
        _1756 = _1603;
        _1757 = _1602;
        _1758 = _1601;
        _1759 = _1616;
        _1760 = _1615;
        _1761 = _1614;
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = _1438;
        _1761 = _1438;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1450)) + _1450;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1451)) + _1451;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1452)) + _1452;
    float _1797 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1774));
    float _1818 = _1044 * 0.5;
    float _1819 = _1045 * 0.5;
    float _1820 = _1046 * 0.5;
    float _1821 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1824 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1827 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1834 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1838 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1842 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1849 = dot(vec4(cbModelParam._m0[39u]), vec4(_1818, _1819, _1820, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1863 = dot(vec4(cbModelParam._m0[40u]), vec4(_1818, _1819, _1820, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1876 = (_1872 * cbModelParam._m0[1u].x) + (_1861 * (1.0 - cbModelParam._m0[1u].x));
    float _1886 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1886 : min(cbModelParam._m0[25u].z, _1886));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1948 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1951 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1979 = frontier_phi_17_15_ladder;
        }
        float _2181;
        if (_1948 > 0.0)
        {
            _2181 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2181 = frontier_phi_26_22_ladder;
        }
        float _2435;
        if (_1951 > 0.0)
        {
            _2435 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2435 = frontier_phi_38_33_ladder;
        }
        float _2437 = isnan(_2181) ? _1979 : (isnan(_1979) ? _2181 : min(_1979, _2181));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1945) + _1934;
        float _2443 = (_2438 * _1948) + _1938;
        float _2444 = (_2438 * _1951) + _1942;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2445;
        float _2449 = _2445 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 > _2449) || ((_2443 < _2447) || ((_2442 < _2447) || (_2442 > _2449))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2444, cbModelParam._m0[9u].z, fma(_2443, cbModelParam._m0[9u].y, _2442 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2444, cbModelParam._m0[10u].z, fma(_2443, cbModelParam._m0[10u].y, _2442 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2444, cbModelParam._m0[11u].z, fma(_2443, cbModelParam._m0[11u].y, _2442 * cbModelParam._m0[11u].x))), _1887);
            frontier_phi_16_38_ladder = _2572.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2572.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2572.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_16_38_ladder_2;
        _1969 = frontier_phi_16_38_ladder_1;
        _1971 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1887);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2029 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2033 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2037 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2040 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2043 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2046 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2186;
        if (_2040 > 0.0)
        {
            _2186 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2186 = frontier_phi_28_24_ladder;
        }
        float _2462;
        if (_2043 > 0.0)
        {
            _2462 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2462 = frontier_phi_40_35_ladder;
        }
        float _2675;
        if (_2046 > 0.0)
        {
            _2675 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2675 = frontier_phi_49_46_ladder;
        }
        float _2677 = isnan(_2462) ? _2186 : (isnan(_2186) ? _2462 : min(_2186, _2462));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _2040) + _2029;
        float _2683 = (_2678 * _2043) + _2033;
        float _2684 = (_2678 * _2046) + _2037;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_25_49_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2065 = frontier_phi_25_49_ladder_2;
        _2067 = frontier_phi_25_49_ladder_1;
        _2069 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1976);
        _2065 = _2049.x * cbModelParam._m0[1u].z;
        _2067 = _2049.y * cbModelParam._m0[1u].z;
        _2069 = _2049.z * cbModelParam._m0[1u].z;
    }
    float _2082 = (((_1070 * _1021) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1070 * _1023) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1070 * _1024) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2089 = fma(_2086, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2082 * cbSceneParam._m0[89u].x));
    float _2092 = fma(_2086, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2082 * cbSceneParam._m0[90u].x));
    float _2095 = fma(_2086, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2082 * cbSceneParam._m0[91u].x));
    uvec4 _2105 = floatBitsToUint(cbInstanceData._m0[_996 + 5u]);
    uint _2107 = _2105.x * 14u;
    uint _2108 = _2107 + 13u;
    float _2115 = _1036 + (-1.0);
    float _2120 = (cbLight._m0[_2108].x * _2115) + 1.0;
    float _2121 = (cbLight._m0[_2108].y * _2115) + 1.0;
    float _2122 = (cbLight._m0[_2108].z * _2115) + 1.0;
    float _2123 = (cbLight._m0[_2108].w * _2115) + 1.0;
    uint _2124 = _2107 + 5u;
    float _2130 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2134 = _2107 + 4u;
    float _2140 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2144 = _2107 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_857, _858, _859));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_857, _858, _859));
    float _4461 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4472 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2124].x * _2130) * _2165) + ((cbLight._m0[_2134].x * _2140) * _2163);
    float _2173 = ((_2130 * cbLight._m0[_2124].y) * _2165) + ((_2140 * cbLight._m0[_2134].y) * _2163);
    float _2174 = ((_2130 * cbLight._m0[_2124].z) * _2165) + ((_2140 * cbLight._m0[_2134].z) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2107 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2107 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2107 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4483 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2218 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2406 = _2107 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_2107 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4499 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2425 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2236 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2191;
        _2238 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2193;
        _2240 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2195;
    }
    uint _2243 = _2107 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _860) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2107].x + _937;
    float _2259 = cbLight._m0[_2107].y + _938;
    float _2260 = cbLight._m0[_2107].z + _939;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2107].xyz));
    float _4515 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _4526 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2272 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2273 = dot(vec3(_857, _858, _859), vec3(_2265, _2266, _2267));
    float _4537 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2265, _2266, _2267));
    float _4548 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _1018;
    float _2296 = 0.959999978542327880859375 - _1019;
    float _2297 = 0.959999978542327880859375 - _1020;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4559 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2328 = _2107 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _860) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2144].x + _937;
    float _2342 = cbLight._m0[_2144].y + _938;
    float _2343 = cbLight._m0[_2144].z + _939;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2144].xyz));
    float _4570 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2355 = dot(vec3(_857, _858, _859), vec3(_2348, _2349, _2350));
    float _4581 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2348, _2349, _2350));
    float _4592 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
    float _2381 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2272 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2381) + _2340) * _2354))) * _2354;
    float _4603 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2403 = (((((_2374 * _2294) + _1021) * cbLight._m0[_2328].x) * _2393) * _2130) + (((((_2293 * _2294) + _1021) * cbLight._m0[_2243].x) * _2317) * _2140);
    float _2404 = (((((_2374 * _2296) + _1023) * cbLight._m0[_2328].y) * _2393) * _2130) + (((((_2293 * _2296) + _1023) * cbLight._m0[_2243].y) * _2317) * _2140);
    float _2405 = (((((_2374 * _2297) + _1024) * cbLight._m0[_2328].z) * _2393) * _2130) + (((((_2293 * _2297) + _1024) * cbLight._m0[_2243].z) * _2317) * _2140);
    float _2467;
    float _2469;
    float _2471;
    if (_2180)
    {
        _2467 = _2403;
        _2469 = _2404;
        _2471 = _2405;
    }
    else
    {
        uint _2473 = _2107 + 2u;
        uint _2477 = _2107 + 10u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _860) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _937;
        float _2494 = cbLight._m0[_2473].y + _938;
        float _2495 = cbLight._m0[_2473].z + _939;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2473].xyz));
        float _4614 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2507 = dot(vec3(_857, _858, _859), vec3(_2500, _2501, _2502));
        float _4625 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4636 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2272 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2533) + _2492) * _2506))) * _2506;
        float _4647 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2467 = (((((_2526 * _2294) + _1021) * cbLight._m0[_2477].x) * _2545) * _2546) + _2403;
        _2469 = (((((_2526 * _2296) + _1023) * cbLight._m0[_2477].y) * _2545) * _2546) + _2404;
        _2471 = (((((_2526 * _2297) + _1024) * cbLight._m0[_2477].z) * _2545) * _2546) + _2405;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2198)
    {
        _2581 = _2467;
        _2583 = _2469;
        _2585 = _2471;
    }
    else
    {
        uint _2592 = _2107 + 3u;
        uint _2596 = _2107 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _860) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _937;
        float _2613 = cbLight._m0[_2592].y + _938;
        float _2614 = cbLight._m0[_2592].z + _939;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2592].xyz));
        float _4663 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2626 = dot(vec3(_857, _858, _859), vec3(_2619, _2620, _2621));
        float _4674 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4685 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
        float _2652 = 1.0 - _2611;
        float _2662 = (0.5 / (((_2272 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2652) + _2611) * _2625))) * _2625;
        float _4696 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2581 = (((((_2645 * _2294) + _1021) * cbLight._m0[_2596].x) * _2664) * _2665) + _2467;
        _2583 = (((((_2645 * _2296) + _1023) * cbLight._m0[_2596].y) * _2664) * _2665) + _2469;
        _2585 = (((((_2645 * _2297) + _1024) * cbLight._m0[_2596].z) * _2664) * _2665) + _2471;
    }
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_2105.y == 0u)
    {
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2740;
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2740;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2740;
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.x;
        uint _2767 = uint((float(_2755.y) * floor(float(uint(cbSceneParam._m0[85u].y * _958) / _2756))) + floor(float(uint(cbSceneParam._m0[85u].x * _957) / _2756)));
        float _2777 = (log2(_2743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2778 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        uint _2781 = uint(isnan(14.0) ? _2778 : (isnan(_2778) ? 14.0 : min(_2778, 14.0)));
        uvec4 _2786 = texelFetch(g_lightClusterGridBuffer, int(((_2781 << 2u) + (_2767 << 6u)) >> 2u));
        uint _2787 = _2786.x;
        uint _2788 = _2755.z;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((((1u << ((_2788 >> 4u) & 15u)) + 4294967295u) & _2787) == 0u) || ((_2788 & 240u) == 0u))
        {
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
        }
        else
        {
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            uint _3100 = 0u;
            uint _3109;
            bool _3110;
            for (;;)
            {
                _3109 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                _3110 = _3109 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3110)
                {
                    frontier_phi_66_pred = _3094;
                    frontier_phi_66_pred_1 = _3099;
                    frontier_phi_66_pred_2 = _3098;
                    frontier_phi_66_pred_3 = _3097;
                    frontier_phi_66_pred_4 = _3096;
                    frontier_phi_66_pred_5 = _3095;
                }
                else
                {
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    uint _3245;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3109;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3249 = uint(findLSB(_3245)) + (_3100 << 5u);
                        uint _3246 = (_3245 + 4294967295u) & _3245;
                        uint _3251 = _3249 * 48u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3271 = (_3249 * 48u) + 4u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3290 = (_3249 * 48u) + 8u;
                        vec3 _3301 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x));
                        float _3305 = _3265.x - _2741;
                        float _3306 = _3265.y - _2742;
                        float _3307 = _3265.z - _2743;
                        float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                        float _3311 = inversesqrt(_3308);
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3315 = dot(vec3(_977, _980, _983), vec3(_3312, _3313, _3314));
                        float _3320 = 1.0 - (_3308 * _3265.w);
                        float _4722 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3322 = sqrt(_3308) * _3284.w;
                        float _3325 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3315) + _3326;
                        float _3332 = _3322 * _3322;
                        float _3336 = ((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3321) / ((_3332 * 0.699999988079071044921875) + 1.0);
                        float _3340 = (-0.0) - _2741;
                        float _3341 = (-0.0) - _2742;
                        float _3342 = (-0.0) - _2743;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3357 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                        float _3358 = 1.0 - _1052;
                        float _3365 = sqrt(1.0 - ((1.0 - (_3358 * _3358)) * (1.0 - (_3357 * _3357))));
                        float _3366 = _3365 * _3365;
                        float _3367 = _3366 * _3366;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3370 = _3349 + _3314;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3378 = dot(vec3(_977, _980, _983), vec3(_3347, _3348, _3349));
                        float _4738 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3382 = dot(vec3(_977, _980, _983), vec3(_3374 * _3368, _3374 * _3369, _3374 * _3370));
                        float _4749 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3389 = ((_3385 * _3385) * (_3367 + (-1.0))) + 1.0;
                        float _3390 = _3325 * _3366;
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3315) + _3391;
                        float _4760 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3395 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3396 = 1.0 - _3366;
                        float _3406 = (0.5 / (((_3395 * ((_3381 * _3396) + _3366)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3366) * _3381))) * _3395;
                        float _4771 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3417 = (((_3367 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3389 * _3389) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125))) * _3321;
                        _3169 = (_3336 * _3284.x) + _3242;
                        _3170 = (_3336 * _3284.y) + _3243;
                        _3171 = (_3336 * _3284.z) + _3244;
                        _3166 = (_3417 * _3301.x) + _3239;
                        _3167 = (_3417 * _3301.y) + _3240;
                        _3168 = (_3417 * _3301.z) + _3241;
                        if (_3246 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3246;
                        }
                    }
                    frontier_phi_66_pred = _3166;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                _2934 = frontier_phi_66_pred;
                _2944 = frontier_phi_66_pred_1;
                _2942 = frontier_phi_66_pred_2;
                _2940 = frontier_phi_66_pred_3;
                _2938 = frontier_phi_66_pred_4;
                _2936 = frontier_phi_66_pred_5;
                uint _3101 = _3100 + 1u;
                if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3094 = _2934;
                    _3095 = _2936;
                    _3096 = _2938;
                    _3097 = _2940;
                    _3098 = _2942;
                    _3099 = _2944;
                    _3100 = _3101;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
        }
        uvec4 _2947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2948 = _2947.z;
        uint _2950 = (_2948 >> 8u) & 15u;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((4294967295u << _2950) & _2787) == 0u)
        {
            _3062 = _2933;
            _3064 = _2935;
            _3066 = _2937;
            _3068 = _2939;
            _3070 = _2941;
            _3072 = _2943;
        }
        else
        {
            float _3087 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
            float _3088 = _3087 * _2741;
            float _3089 = _3087 * _2742;
            float _3090 = _3087 * _2743;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2950 < ((_2948 >> 12u) & 15u))
            {
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3222 = _2933;
                float _3223 = _2935;
                float _3224 = _2937;
                float _3225 = _2939;
                float _3226 = _2941;
                float _3227 = _2943;
                uint _3228 = _2950;
                uint _3237;
                bool _3238;
                for (;;)
                {
                    _3237 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                    _3238 = _3237 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3238)
                    {
                        frontier_phi_77_pred = _3227;
                        frontier_phi_77_pred_1 = _3226;
                        frontier_phi_77_pred_2 = _3225;
                        frontier_phi_77_pred_3 = _3224;
                        frontier_phi_77_pred_4 = _3223;
                        frontier_phi_77_pred_5 = _3222;
                    }
                    else
                    {
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        uint _3450 = _3237;
                        uint _3451;
                        vec4 _3476;
                        float _3477;
                        vec4 _3492;
                        vec3 _3504;
                        vec4 _3519;
                        vec4 _3534;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3461 = ((_3228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3450));
                            _3451 = (_3450 + 4294967295u) & _3450;
                            uint _3463 = _3461 * 40u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3477 = _3476.w;
                            uint _3479 = (_3461 * 40u) + 4u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3461 * 40u) + 8u;
                            _3504 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x));
                            uint _3506 = (_3461 * 40u) + 16u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3461 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3537 = (_3461 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3461 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_2743, _3569.z, fma(_2742, _3569.y, _3569.x * _2741)) + _3569.w;
                            _3582 = !((fma(_2743, _3550.z, fma(_2742, _3550.y, _3550.x * _2741)) + _3550.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3476.x - _2741;
                                float _3610 = _3476.y - _2742;
                                float _3611 = _3476.z - _2743;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3477 * _3477));
                                float _4782 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3627 = sqrt(_3612) * _3492.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_977, _980, _983))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_2743, _3519.z, fma(_2742, _3519.y, _3519.x * _2741)) + _3519.w) / _3581;
                                float _3641 = (fma(_2743, _3534.z, fma(_2742, _3534.y, _3534.x * _2741)) + _3534.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4798 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _1052;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3088;
                                float _3671 = _3617 - _3089;
                                float _3672 = _3618 - _3090;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_977, _980, _983), vec3((-0.0) - _3088, (-0.0) - _3089, (-0.0) - _3090));
                                float _4809 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3684 = dot(vec3(_977, _980, _983), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4820 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_977, _980, _983), vec3(_3616, _3617, _3618))) + _3693;
                                float _4831 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4842 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3647 * _3492.y;
                                frontier_phi_83_pred_1 = _3647 * _3492.x;
                                frontier_phi_83_pred_2 = _3721 * _3504.z;
                                frontier_phi_83_pred_3 = _3721 * _3504.y;
                                frontier_phi_83_pred_4 = _3721 * _3504.x;
                                frontier_phi_83_pred_5 = _3647 * _3492.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3729 = frontier_phi_83_pred;
                            _3728 = frontier_phi_83_pred_1;
                            _3727 = frontier_phi_83_pred_2;
                            _3726 = frontier_phi_83_pred_3;
                            _3725 = frontier_phi_83_pred_4;
                            _3730 = frontier_phi_83_pred_5;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            _3436 = _3730 + _3449;
                            _3431 = _3725 + _3444;
                            _3432 = _3726 + _3445;
                            _3433 = _3727 + _3446;
                            if (_3451 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3451;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3436;
                        frontier_phi_77_pred_1 = _3435;
                        frontier_phi_77_pred_2 = _3434;
                        frontier_phi_77_pred_3 = _3433;
                        frontier_phi_77_pred_4 = _3432;
                        frontier_phi_77_pred_5 = _3431;
                    }
                    _3073 = frontier_phi_77_pred;
                    _3071 = frontier_phi_77_pred_1;
                    _3069 = frontier_phi_77_pred_2;
                    _3067 = frontier_phi_77_pred_3;
                    _3065 = frontier_phi_77_pred_4;
                    _3063 = frontier_phi_77_pred_5;
                    uint _3229 = _3228 + 1u;
                    if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3222 = _3063;
                        _3223 = _3065;
                        _3224 = _3067;
                        _3225 = _3069;
                        _3226 = _3071;
                        _3227 = _3073;
                        _3228 = _3229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3067;
                frontier_phi_58_59_ladder_1 = _3073;
                frontier_phi_58_59_ladder_2 = _3071;
                frontier_phi_58_59_ladder_3 = _3069;
                frontier_phi_58_59_ladder_4 = _3065;
                frontier_phi_58_59_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_58_59_ladder = _2937;
                frontier_phi_58_59_ladder_1 = _2943;
                frontier_phi_58_59_ladder_2 = _2941;
                frontier_phi_58_59_ladder_3 = _2939;
                frontier_phi_58_59_ladder_4 = _2935;
                frontier_phi_58_59_ladder_5 = _2933;
            }
            _3062 = frontier_phi_58_59_ladder_5;
            _3064 = frontier_phi_58_59_ladder_4;
            _3066 = frontier_phi_58_59_ladder;
            _3068 = frontier_phi_58_59_ladder_3;
            _3070 = frontier_phi_58_59_ladder_2;
            _3072 = frontier_phi_58_59_ladder_1;
        }
        float _3077 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2800 = (_3077 * _3068) + _2236;
        _2802 = (_3077 * _3070) + _2238;
        _2804 = (_3077 * _3072) + _2240;
        _2806 = ((_3062 * _1021) * _3077) + _2581;
        _2808 = ((_3064 * _1023) * _3077) + _2583;
        _2810 = ((_3066 * _1024) * _3077) + _2585;
    }
    else
    {
        _2800 = _2236;
        _2802 = _2238;
        _2804 = _2240;
        _2806 = _2581;
        _2808 = _2583;
        _2810 = _2585;
    }
    uint _2816 = _997 + uint(cbMatDynParam._m0[0u].w);
    float _2822 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2828 = (((((_2822 * cbMtdParam._m0[14u].x) * _739.x) * _762) * _836) * (((1.0 - _815) * cbMtdParam._m0[20u].w) + _815)) * cbInstanceData._m0[_2816].x;
    float _2834 = (((((_2822 * cbMtdParam._m0[14u].y) * _739.y) * _762) * _836) * (((1.0 - _817) * cbMtdParam._m0[20u].w) + _817)) * cbInstanceData._m0[_2816].y;
    float _2840 = (((((_2822 * cbMtdParam._m0[14u].z) * _739.z) * _762) * _836) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_2816].z;
    float _4858 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4869 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4880 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2857 = (((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2800 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1036))) + ((_2806 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + _2828;
    float _2859 = (_2834 + ((_2808 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2802 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1036)));
    float _2861 = (_2840 + ((_2810 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2804 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1036)));
    float _2862 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2863 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
    float _2864 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2870 = cbMtdParam._m0[2u].x * _2828;
    float _2871 = cbMtdParam._m0[2u].y * _2834;
    float _2872 = cbMtdParam._m0[2u].z * _2840;
    float _4906 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2874 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    uint _2875 = _996 + 6u;
    float _2883 = _957 / cbSceneParam._m0[86u].x;
    float _2884 = _958 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _2958 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _2959 = _2958 / _880;
        float _2970 = _2959 * _930;
        float _2971 = _931 * _2959;
        float _2972 = (-0.0) - _2971;
        float _2973 = _2959 * _932;
        float _2975 = (cbSceneParam._m0[77u].w * _2972) / _2958;
        float _2976 = _2975 + cbSceneParam._m0[79u].w;
        float _2977 = cbSceneParam._m0[79u].w - _2971;
        float _2983 = sqrt(((_2970 * _2970) + (_2971 * _2971)) + (_2973 * _2973));
        float _2986 = (1.0 - (cbSceneParam._m0[77u].w / _2958)) * _2983;
        float _2991 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2993 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_2972 - _2975) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_2976 > 0.0) ? exp2(_2991 * _2976) : (2.0 - exp2(_2993 * _2976))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2986;
        }
        else
        {
            float _3123 = 1.0 / cbSceneParam._m0[80u].x;
            float _3124 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : max(_2976, _2977));
            float _3125 = isnan(_2977) ? _2976 : (isnan(_2976) ? _2977 : min(_2976, _2977));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            _3179 = ((abs(_2983 / _2972) * cbSceneParam._m0[80u].y) * ((((_3134 - _3135) * 2.0) - ((exp2(_2991 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0)))) - exp2(_2991 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))))) * _3123)) - ((exp2(_2993 * _3134) - exp2(_2993 * _3135)) * _3123))) + (_2986 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2903);
        _2995 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2997 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2901;
        _2999 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2902;
        _3001 = _3190 * _2903;
    }
    else
    {
        _2995 = _2900;
        _2997 = _2901;
        _2999 = _2902;
        _3001 = _2903;
    }
    bool _3217;
    vec4 _3011;
    vec4 _3033;
    float _3035;
    float _3039;
    float _3040;
    float _3041;
    float _3044;
    float _3047;
    float _3050;
    float _3051;
    bool _3061;
    for (;;)
    {
        _3011 = cbMatDynParam._m0[0u];
        float _3013 = roundEven(_3011.y);
        bool _3014 = _3013 == 3.0;
        float _3015 = log2(_3001);
        float _3019 = exp2(_3015 * cbSceneParam._m0[78u].x);
        float _3020 = exp2(_3015 * cbSceneParam._m0[78u].y);
        float _3021 = exp2(_3015 * cbSceneParam._m0[78u].z);
        float _3022 = _3019 * _2862;
        float _3023 = _3020 * _2863;
        float _3024 = _3021 * _2864;
        float _3031 = _946 + (-0.5);
        _3033 = cbMtdParam._m0[1u];
        _3035 = _3033.y * _3031;
        float _3038 = (_3013 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3039 = _3038 * (_3014 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2995)));
        _3040 = _3038 * (_3014 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2997)));
        _3041 = _3038 * (_3014 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2999)));
        _3044 = ((_2870 * _2874) * _3019) * _3038;
        _3047 = ((_2871 * _2874) * _3020) * _3038;
        _3050 = ((_2872 * _2874) * _3021) * _3038;
        _3051 = _3031 * 0.999000012874603271484375;
        _3061 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3061)
        {
            if ((cbInstanceData._m0[_996 + 7u].x + _3051) < 0.5)
            {
                _3217 = true;
                break;
            }
        }
        uint _3158 = _997 + uint(_3011.w);
        if ((cbInstanceData._m0[_3158].w < 1.0) && ((cbInstanceData._m0[_3158].w + _3051) < 0.5))
        {
            _3217 = true;
            break;
        }
        if ((_3035 + 1.0) < _3033.x)
        {
            _3217 = true;
            break;
        }
        _3217 = false;
        break;
    }
    float _3422;
    if (_3217)
    {
        discard_state = true;
        _3422 = 0.0;
    }
    else
    {
        _3422 = cbInstanceData._m0[_2875].w;
    }
    SV_Target.x = _3039;
    SV_Target.y = _3040;
    SV_Target.z = _3041;
    SV_Target.w = _3422;
    SV_Target_1.x = _3044;
    SV_Target_1.y = _3047;
    SV_Target_1.z = _3050;
    SV_Target_1.w = cbInstanceData._m0[_2875].w;
    discard_exit();
}


