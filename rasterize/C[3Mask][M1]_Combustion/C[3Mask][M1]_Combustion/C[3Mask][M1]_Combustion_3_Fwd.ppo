#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1394;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _3774 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3785 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3796 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _440 = (((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399;
    float _441 = (_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400;
    float _442 = (_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401;
    vec4 _467 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _486 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _489 = _486.x + 0.00999999977648258209228515625;
    float _496 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _489)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3807 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _504 = (_497 * ((_467.x * cbMtdParam._m0[16u].x) - _440)) + _440;
    float _505 = (_497 * ((_467.y * cbMtdParam._m0[16u].y) - _441)) + _441;
    float _506 = (_497 * ((_467.z * cbMtdParam._m0[16u].z) - _442)) + _442;
    vec4 _519 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _539 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _521) * _351) + _521;
    float _556 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _539) * _392) + _539;
    float _573 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _556) * _433) + _556;
    float _575 = _573 - (_573 * TEXCOORD_8);
    vec4 _588 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _609 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _613 = _609.z;
    vec4 _625 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _636 = ((_625.x - _611) * _351) + _611;
    float _637 = ((_625.y - _612) * _351) + _612;
    float _638 = ((_625.z - _613) * _351) + _613;
    vec4 _651 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _662 = ((_651.x - _636) * _392) + _636;
    float _663 = ((_651.y - _637) * _392) + _637;
    float _664 = ((_651.z - _638) * _392) + _638;
    vec4 _677 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _690 = ((_677.z - _664) * _433) + _664;
    float _693 = ((((_677.x - _662) * _433) + _662) * 2.0) + (-1.0);
    float _694 = ((((_677.y - _663) * _433) + _663) * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3818 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _705 = (((_588.z - _690) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _690;
    vec4 _735 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _749 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3829 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _758 = (((_750 * _750) * (3.0 - (_750 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _766 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _774 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3840 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _779 = (_775 * _775) * (3.0 - (_775 * 2.0));
    float _780 = _779 * cbMtdParam._m0[22u].x;
    float _781 = _779 * cbMtdParam._m0[22u].y;
    float _782 = sin(_766);
    float _783 = cos(_766);
    float _784 = TEXCOORD.z - _780;
    float _785 = TEXCOORD.w - _781;
    vec4 _805 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_780 + fma(_785, (-0.0) - _782, _784 * _783))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_785, _783, _784 * _782) + _781)) + cbTextureTilingScale._m0[2u].w));
    float _811 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _805.x;
    float _813 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _805.y;
    float _815 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _805.z;
    float _831 = (TEXCOORD_5.x - ((_489 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3851 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _832 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _838 = ((((_588.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _693;
    float _839 = ((((_588.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _694;
    float _842 = fma(_700, _237 * NORMAL.x, fma(_839, _244 * TANGENT.x, (_230 * _222) * _838));
    float _845 = fma(_700, _237 * NORMAL.y, fma(_839, _244 * TANGENT.y, (_230 * _223) * _838));
    float _848 = fma(_700, _237 * NORMAL.z, fma(_839, _244 * TANGENT.z, (_230 * _224) * _838));
    float _852 = inversesqrt(dot(vec3(_842, _845, _848), vec3(_842, _845, _848)));
    float _853 = _852 * _842;
    float _854 = _852 * _845;
    float _855 = _852 * _848;
    float _3862 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _856 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3884 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3895 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3906 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _860 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _876 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _926 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _916);
    float _927 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _916);
    float _928 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _916);
    float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
    float _933 = _926 * _932;
    float _934 = _927 * _932;
    float _935 = _928 * _932;
    float _941 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _942 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _961 = fma(_855, cbSceneParam._m0[5u].z, fma(_854, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _853));
    float _964 = fma(_855, cbSceneParam._m0[6u].z, fma(_854, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _853));
    float _967 = fma(_855, cbSceneParam._m0[7u].z, fma(_854, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _853));
    uint _980 = uint(roundEven(NORMAL.w)) * 13u;
    uint _981 = _980 + 9u;
    uint _982 = _981 + uint(cbMatDynParam._m0[0u].w);
    float _988 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_982].x;
    float _989 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_982].y;
    float _990 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_982].z;
    float _3917 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _994 = 1.0 - _860;
    float _995 = _991 * _994;
    float _996 = _992 * _994;
    float _997 = _993 * _994;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _860;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _860;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _860;
    float _1005 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _941, cbSceneParam._m0[86u].y * _942));
    float _1020 = _1017.x * TEXCOORD_5.w;
    float _1021 = dot(vec3(_853, _854, _855), vec3(_933, _934, _935));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _853) - _933;
    float _1029 = (_1024 * _854) - _934;
    float _1030 = (_1024 * _855) - _935;
    float _1034 = abs(dot(vec3(_933, _934, _935), vec3(_853, _854, _855)));
    float _3950 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_856);
    float _1048 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1054 = (1.0 - _1048) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1055 = _1048 * _1036;
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1393;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1122 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1126 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1151 = _1083 + _853;
        float _1152 = _1087 + _854;
        float _1153 = _1091 + _855;
        float _1163 = fma(_1153, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151)) - _1118;
        float _1164 = fma(_1153, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151)) - _1122;
        float _1165 = fma(_1153, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151)) - _1126;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1221 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1187.x + (-0.5));
        float _1223 = _1221 * (_1187.y + (-0.5));
        float _1224 = _1221 * (_1187.z + (-0.5));
        float _1231 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1194.x + (-0.5));
        float _1233 = _1231 * (_1194.y + (-0.5));
        float _1234 = _1231 * (_1194.z + (-0.5));
        float _1241 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1201.x + (-0.5));
        float _1243 = _1241 * (_1201.y + (-0.5));
        float _1244 = _1241 * (_1201.z + (-0.5));
        float _1251 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1208.x + (-0.5));
        float _1253 = _1251 * (_1208.y + (-0.5));
        float _1254 = _1251 * (_1208.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1275 = (dot(vec3(_853, _854, _855), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1285 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3998 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1287 + 1.0))) + _1292) * _1255;
        float _1302 = _1223 * 0.5;
        float _1303 = _1233 * 0.5;
        float _1304 = _1243 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_853, _854, _855), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4031 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1329 + 1.0))) + _1334) * _1256;
        float _1344 = _1224 * 0.5;
        float _1345 = _1234 * 0.5;
        float _1346 = _1244 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_853, _854, _855), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4064 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1371 + 1.0))) + _1376) * _1257;
        _1393 = _1224;
        _1395 = _1223;
        _1396 = _1222;
        _1397 = _1234;
        _1398 = _1233;
        _1399 = _1232;
        _1400 = _1244;
        _1401 = _1243;
        _1402 = _1242;
        _1403 = _1257;
        _1404 = _1256;
        _1405 = _1255;
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1394;
        _1395 = _1394;
        _1396 = _1394;
        _1397 = _1394;
        _1398 = _1394;
        _1399 = _1394;
        _1400 = _1394;
        _1401 = _1394;
        _1402 = _1394;
        _1403 = _1394;
        _1404 = _1394;
        _1405 = _1394;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1438 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1442 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1465 = _1083 + _853;
        float _1466 = _1087 + _854;
        float _1467 = _1091 + _855;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_853, _854, _855), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4127 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_853, _854, _855), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4160 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_853, _854, _855), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4193 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1394;
        _1704 = _1394;
        _1705 = _1394;
        _1706 = _1394;
        _1707 = _1394;
        _1708 = _1394;
        _1709 = _1394;
        _1710 = _1394;
        _1711 = _1394;
        _1712 = _1394;
        _1713 = _1394;
        _1714 = _1394;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1406)) + _1406;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1407)) + _1407;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _1028 * 0.5;
    float _1772 = _1029 * 0.5;
    float _1773 = _1030 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1393, _1397, _1400, _1403));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _856);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1901 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1904 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1932 = frontier_phi_14_12_ladder;
        }
        float _2134;
        if (_1901 > 0.0)
        {
            _2134 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2134 = frontier_phi_23_19_ladder;
        }
        float _2388;
        if (_1904 > 0.0)
        {
            _2388 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2388 = frontier_phi_35_30_ladder;
        }
        float _2390 = isnan(_2134) ? _1932 : (isnan(_1932) ? _2134 : min(_1932, _2134));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1898) + _1887;
        float _2396 = (_2391 * _1901) + _1891;
        float _2397 = (_2391 * _1904) + _1895;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_13_35_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_13_35_ladder_2;
        _1922 = frontier_phi_13_35_ladder_1;
        _1924 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1840);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _856);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1982 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1986 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1990 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1993 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1996 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1999 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2139;
        if (_1993 > 0.0)
        {
            _2139 = abs((1.0 - _1982) / _1993);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1982 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2139 = frontier_phi_25_21_ladder;
        }
        float _2415;
        if (_1996 > 0.0)
        {
            _2415 = abs((1.0 - _1986) / _1996);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1986 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2415 = frontier_phi_37_32_ladder;
        }
        float _2628;
        if (_1999 > 0.0)
        {
            _2628 = abs((1.0 - _1990) / _1999);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1990 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2628 = frontier_phi_46_43_ladder;
        }
        float _2630 = isnan(_2415) ? _2139 : (isnan(_2139) ? _2415 : min(_2139, _2415));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _1993) + _1982;
        float _2636 = (_2631 * _1996) + _1986;
        float _2637 = (_2631 * _1999) + _1990;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2638;
        float _2641 = _2638 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2637 > _2641) || ((_2637 < _2639) || ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 < _2639) || (_2635 > _2641))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2637, cbModelParam._m0[17u].z, fma(_2636, cbModelParam._m0[17u].y, _2635 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2637, cbModelParam._m0[18u].z, fma(_2636, cbModelParam._m0[18u].y, _2635 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2637, cbModelParam._m0[19u].z, fma(_2636, cbModelParam._m0[19u].y, _2635 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_22_46_ladder = _2881.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2881.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2881.x * cbModelParam._m0[1u].z;
        }
        _2018 = frontier_phi_22_46_ladder_2;
        _2020 = frontier_phi_22_46_ladder_1;
        _2022 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1929);
        _2018 = _2002.x * cbModelParam._m0[1u].z;
        _2020 = _2002.y * cbModelParam._m0[1u].z;
        _2022 = _2002.z * cbModelParam._m0[1u].z;
    }
    float _2035 = (((_1054 * _1005) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2037 = (((_1054 * _1007) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1054 * _1008) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2042 = fma(_2039, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2035 * cbSceneParam._m0[89u].x));
    float _2045 = fma(_2039, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2035 * cbSceneParam._m0[90u].x));
    float _2048 = fma(_2039, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2035 * cbSceneParam._m0[91u].x));
    uvec4 _2058 = floatBitsToUint(cbInstanceData._m0[_980 + 5u]);
    uint _2060 = _2058.x * 14u;
    uint _2061 = _2060 + 13u;
    float _2068 = _1020 + (-1.0);
    float _2073 = (cbLight._m0[_2061].x * _2068) + 1.0;
    float _2074 = (cbLight._m0[_2061].y * _2068) + 1.0;
    float _2075 = (cbLight._m0[_2061].z * _2068) + 1.0;
    float _2076 = (cbLight._m0[_2061].w * _2068) + 1.0;
    uint _2077 = _2060 + 5u;
    float _2083 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2087 = _2060 + 4u;
    float _2093 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2097 = _2060 | 1u;
    float _2108 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_853, _854, _855));
    float _2111 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_853, _854, _855));
    float _4329 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _4340 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2116 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2118 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2125 = ((cbLight._m0[_2077].x * _2083) * _2118) + ((cbLight._m0[_2087].x * _2093) * _2116);
    float _2126 = ((_2083 * cbLight._m0[_2077].y) * _2118) + ((_2093 * cbLight._m0[_2087].y) * _2116);
    float _2127 = ((_2083 * cbLight._m0[_2077].z) * _2118) + ((_2093 * cbLight._m0[_2087].z) * _2116);
    uvec4 _2131 = floatBitsToUint(cbLight._m0[_2060 + 12u]);
    bool _2133 = _2131.x == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2133)
    {
        _2144 = _2125;
        _2146 = _2126;
        _2148 = _2127;
    }
    else
    {
        uint _2152 = _2060 + 6u;
        float _2168 = (dot(vec3(cbLight._m0[_2060 + 2u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4351 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2171 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2144 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _2125;
        _2146 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _2126;
        _2148 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _2127;
    }
    bool _2151 = _2131.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2151)
    {
        _2189 = _2144;
        _2191 = _2146;
        _2193 = _2148;
    }
    else
    {
        uint _2359 = _2060 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_2060 + 3u].xyz), vec3(_853, _854, _855)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4367 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2378 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2189 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2144;
        _2191 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2146;
        _2193 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2148;
    }
    uint _2196 = _2060 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _856) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2060].x + _933;
    float _2212 = cbLight._m0[_2060].y + _934;
    float _2213 = cbLight._m0[_2060].z + _935;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2060].xyz));
    float _4383 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2225 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2226 = dot(vec3(_853, _854, _855), vec3(_2218, _2219, _2220));
    float _4405 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2218, _2219, _2220));
    float _4416 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2247 = 0.959999978542327880859375 - _1002;
    float _2249 = 0.959999978542327880859375 - _1003;
    float _2250 = 0.959999978542327880859375 - _1004;
    float _2257 = 1.0 - _2210;
    float _2268 = (0.5 / (((_2225 * ((_2224 * _2257) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2257) + _2210) * _2224))) * _2224;
    float _4427 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2281 = _2060 + 9u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _856) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2097].x + _933;
    float _2295 = cbLight._m0[_2097].y + _934;
    float _2296 = cbLight._m0[_2097].z + _935;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2097].xyz));
    float _4438 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2308 = dot(vec3(_853, _854, _855), vec3(_2301, _2302, _2303));
    float _4449 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2301, _2302, _2303));
    float _4460 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2293 * _2293;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2334 = 1.0 - _2293;
    float _2344 = (0.5 / (((_2225 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2334) + _2293) * _2307))) * _2307;
    float _4471 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    float _2356 = (((((_2327 * _2247) + _1005) * cbLight._m0[_2281].x) * _2346) * _2083) + (((((_2246 * _2247) + _1005) * cbLight._m0[_2196].x) * _2270) * _2093);
    float _2357 = (((((_2327 * _2249) + _1007) * cbLight._m0[_2281].y) * _2346) * _2083) + (((((_2246 * _2249) + _1007) * cbLight._m0[_2196].y) * _2270) * _2093);
    float _2358 = (((((_2327 * _2250) + _1008) * cbLight._m0[_2281].z) * _2346) * _2083) + (((((_2246 * _2250) + _1008) * cbLight._m0[_2196].z) * _2270) * _2093);
    float _2420;
    float _2422;
    float _2424;
    if (_2133)
    {
        _2420 = _2356;
        _2422 = _2357;
        _2424 = _2358;
    }
    else
    {
        uint _2426 = _2060 + 2u;
        uint _2430 = _2060 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _856) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _933;
        float _2447 = cbLight._m0[_2426].y + _934;
        float _2448 = cbLight._m0[_2426].z + _935;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2426].xyz));
        float _4482 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2460 = dot(vec3(_853, _854, _855), vec3(_2453, _2454, _2455));
        float _4493 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4504 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2225 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2486) + _2445) * _2459))) * _2459;
        float _4515 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2420 = (((((_2479 * _2247) + _1005) * cbLight._m0[_2430].x) * _2498) * _2499) + _2356;
        _2422 = (((((_2479 * _2249) + _1007) * cbLight._m0[_2430].y) * _2498) * _2499) + _2357;
        _2424 = (((((_2479 * _2250) + _1008) * cbLight._m0[_2430].z) * _2498) * _2499) + _2358;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2151)
    {
        _2534 = _2420;
        _2536 = _2422;
        _2538 = _2424;
    }
    else
    {
        uint _2545 = _2060 + 3u;
        uint _2549 = _2060 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _856) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _933;
        float _2566 = cbLight._m0[_2545].y + _934;
        float _2567 = cbLight._m0[_2545].z + _935;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_853, _854, _855), vec3(cbLight._m0[_2545].xyz));
        float _4531 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2579 = dot(vec3(_853, _854, _855), vec3(_2572, _2573, _2574));
        float _4542 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4553 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2605 = 1.0 - _2564;
        float _2615 = (0.5 / (((_2225 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2605) + _2564) * _2578))) * _2578;
        float _4564 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2534 = (((((_2598 * _2247) + _1005) * cbLight._m0[_2549].x) * _2617) * _2618) + _2420;
        _2536 = (((((_2598 * _2249) + _1007) * cbLight._m0[_2549].y) * _2617) * _2618) + _2422;
        _2538 = (((((_2598 * _2250) + _1008) * cbLight._m0[_2549].z) * _2617) * _2618) + _2424;
    }
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_2058.y == 0u)
    {
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2693;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2693;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2693;
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.x;
        uint _2720 = uint((float(_2708.y) * floor(float(uint(cbSceneParam._m0[85u].y * _942) / _2709))) + floor(float(uint(cbSceneParam._m0[85u].x * _941) / _2709)));
        float _2730 = (log2(_2696 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2731 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        uint _2734 = uint(isnan(14.0) ? _2731 : (isnan(_2731) ? 14.0 : min(_2731, 14.0)));
        uvec4 _2739 = texelFetch(g_lightClusterGridBuffer, int(((_2734 << 2u) + (_2720 << 6u)) >> 2u));
        uint _2740 = _2739.x;
        uint _2741 = _2708.z;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((((1u << ((_2741 >> 4u) & 15u)) + 4294967295u) & _2740) == 0u) || ((_2741 & 240u) == 0u))
        {
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
        }
        else
        {
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _2897;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3055)
                {
                    frontier_phi_61_pred = _3039;
                    frontier_phi_61_pred_1 = _3044;
                    frontier_phi_61_pred_2 = _3043;
                    frontier_phi_61_pred_3 = _3042;
                    frontier_phi_61_pred_4 = _3041;
                    frontier_phi_61_pred_5 = _3040;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3054;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3045 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2694;
                        float _3230 = _3189.y - _2695;
                        float _3231 = _3189.z - _2696;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_961, _964, _967), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4590 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2694;
                        float _3265 = (-0.0) - _2695;
                        float _3266 = (-0.0) - _2696;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3281 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _1036;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_961, _964, _967), vec3(_3271, _3272, _3273));
                        float _4606 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3306 = dot(vec3(_961, _964, _967), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4617 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3249 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3239) + _3315;
                        float _4628 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4639 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3313 * _3313) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3098 = (_3260 * _3208.x) + _3166;
                        _3099 = (_3260 * _3208.y) + _3167;
                        _3100 = (_3260 * _3208.z) + _3168;
                        _3095 = (_3341 * _3225.x) + _3163;
                        _3096 = (_3341 * _3225.y) + _3164;
                        _3097 = (_3341 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_61_pred = _3095;
                    frontier_phi_61_pred_1 = _3100;
                    frontier_phi_61_pred_2 = _3099;
                    frontier_phi_61_pred_3 = _3098;
                    frontier_phi_61_pred_4 = _3097;
                    frontier_phi_61_pred_5 = _3096;
                }
                _2887 = frontier_phi_61_pred;
                _2897 = frontier_phi_61_pred_1;
                _2895 = frontier_phi_61_pred_2;
                _2893 = frontier_phi_61_pred_3;
                _2891 = frontier_phi_61_pred_4;
                _2889 = frontier_phi_61_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2887;
                    _3040 = _2889;
                    _3041 = _2891;
                    _3042 = _2893;
                    _3043 = _2895;
                    _3044 = _2897;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
        }
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.z;
        uint _2903 = (_2901 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2903) & _2740) == 0u)
        {
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
            _3015 = _2894;
            _3017 = _2896;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
            float _3033 = _3032 * _2694;
            float _3034 = _3032 * _2695;
            float _3035 = _3032 * _2696;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2903 < ((_2901 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3146 = _2886;
                float _3147 = _2888;
                float _3148 = _2890;
                float _3149 = _2892;
                float _3150 = _2894;
                float _3151 = _2896;
                uint _3152 = _2903;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3162)
                    {
                        frontier_phi_67_pred = _3149;
                        frontier_phi_67_pred_1 = _3150;
                        frontier_phi_67_pred_2 = _3151;
                        frontier_phi_67_pred_3 = _3148;
                        frontier_phi_67_pred_4 = _3147;
                        frontier_phi_67_pred_5 = _3146;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3359 = _3146;
                        float _3360 = _3147;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        uint _3365 = _3161;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3434;
                        vec4 _3449;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3376 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3421 = (_3376 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3376 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3452 = (_3376 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3376 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_2696, _3484.z, fma(_2695, _3484.y, _3484.x * _2694)) + _3484.w;
                            _3497 = !((fma(_2696, _3465.z, fma(_2695, _3465.y, _3465.x * _2694)) + _3465.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3391.x - _2694;
                                float _3525 = _3391.y - _2695;
                                float _3526 = _3391.z - _2696;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3392 * _3392));
                                float _4650 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3542 = sqrt(_3527) * _3407.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_961, _964, _967))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_2696, _3434.z, fma(_2695, _3434.y, _3434.x * _2694)) + _3434.w) / _3496;
                                float _3556 = (fma(_2696, _3449.z, fma(_2695, _3449.y, _3449.x * _2694)) + _3449.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4666 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _1036;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3033;
                                float _3586 = _3532 - _3034;
                                float _3587 = _3533 - _3035;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_961, _964, _967), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4677 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3599 = dot(vec3(_961, _964, _967), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4688 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_961, _964, _967), vec3(_3531, _3532, _3533))) + _3608;
                                float _4699 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4710 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3636 * _3419.x;
                                frontier_phi_73_pred_1 = _3636 * _3419.y;
                                frontier_phi_73_pred_2 = _3562 * _3407.z;
                                frontier_phi_73_pred_3 = _3562 * _3407.y;
                                frontier_phi_73_pred_4 = _3562 * _3407.x;
                                frontier_phi_73_pred_5 = _3636 * _3419.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_73_pred;
                            _3641 = frontier_phi_73_pred_1;
                            _3645 = frontier_phi_73_pred_2;
                            _3644 = frontier_phi_73_pred_3;
                            _3643 = frontier_phi_73_pred_4;
                            _3642 = frontier_phi_73_pred_5;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3346 = _3640 + _3359;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3349;
                        frontier_phi_67_pred_1 = _3350;
                        frontier_phi_67_pred_2 = _3351;
                        frontier_phi_67_pred_3 = _3348;
                        frontier_phi_67_pred_4 = _3347;
                        frontier_phi_67_pred_5 = _3346;
                    }
                    _3014 = frontier_phi_67_pred;
                    _3016 = frontier_phi_67_pred_1;
                    _3018 = frontier_phi_67_pred_2;
                    _3012 = frontier_phi_67_pred_3;
                    _3010 = frontier_phi_67_pred_4;
                    _3008 = frontier_phi_67_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _3008;
                        _3147 = _3010;
                        _3148 = _3012;
                        _3149 = _3014;
                        _3150 = _3016;
                        _3151 = _3018;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3016;
                frontier_phi_55_56_ladder_1 = _3018;
                frontier_phi_55_56_ladder_2 = _3014;
                frontier_phi_55_56_ladder_3 = _3012;
                frontier_phi_55_56_ladder_4 = _3010;
                frontier_phi_55_56_ladder_5 = _3008;
            }
            else
            {
                frontier_phi_55_56_ladder = _2894;
                frontier_phi_55_56_ladder_1 = _2896;
                frontier_phi_55_56_ladder_2 = _2892;
                frontier_phi_55_56_ladder_3 = _2890;
                frontier_phi_55_56_ladder_4 = _2888;
                frontier_phi_55_56_ladder_5 = _2886;
            }
            _3007 = frontier_phi_55_56_ladder_5;
            _3009 = frontier_phi_55_56_ladder_4;
            _3011 = frontier_phi_55_56_ladder_3;
            _3013 = frontier_phi_55_56_ladder_2;
            _3015 = frontier_phi_55_56_ladder;
            _3017 = frontier_phi_55_56_ladder_1;
        }
        float _3022 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2753 = (_3022 * _3013) + _2189;
        _2755 = (_3022 * _3015) + _2191;
        _2757 = (_3022 * _3017) + _2193;
        _2759 = ((_3007 * _1005) * _3022) + _2534;
        _2761 = ((_3009 * _1007) * _3022) + _2536;
        _2763 = ((_3011 * _1008) * _3022) + _2538;
    }
    else
    {
        _2753 = _2189;
        _2755 = _2191;
        _2757 = _2193;
        _2759 = _2534;
        _2761 = _2536;
        _2763 = _2538;
    }
    uint _2769 = _981 + uint(cbMatDynParam._m0[0u].w);
    float _2775 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2781 = (((((_2775 * cbMtdParam._m0[14u].x) * _735.x) * _758) * _832) * (((1.0 - _811) * cbMtdParam._m0[20u].w) + _811)) * cbInstanceData._m0[_2769].x;
    float _2787 = (((((_2775 * cbMtdParam._m0[14u].y) * _735.y) * _758) * _832) * (((1.0 - _813) * cbMtdParam._m0[20u].w) + _813)) * cbInstanceData._m0[_2769].y;
    float _2793 = (((((_2775 * cbMtdParam._m0[14u].z) * _735.z) * _758) * _832) * (((1.0 - _815) * cbMtdParam._m0[20u].w) + _815)) * cbInstanceData._m0[_2769].z;
    float _4726 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4737 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4748 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2810 = (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2753 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1020))) + ((_2759 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + _2781;
    float _2812 = (_2787 + ((_2761 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2755 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1020)));
    float _2814 = (_2793 + ((_2763 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2757 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1020)));
    float _4774 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2827 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    uint _2828 = _980 + 6u;
    float _2836 = _941 / cbSceneParam._m0[86u].x;
    float _2837 = _942 / cbSceneParam._m0[86u].y;
    vec4 _2851 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, (log2((isnan(cbSceneParam._m0[77u].w) ? _876 : (isnan(_876) ? cbSceneParam._m0[77u].w : min(_876, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2853 = _2851.x;
    float _2854 = _2851.y;
    float _2855 = _2851.z;
    float _2856 = _2851.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_876 > cbSceneParam._m0[78u].w)
    {
        float _2911 = isnan(_876) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _876 : min(cbSceneParam._m0[80u].w, _876));
        float _2912 = _2911 / _876;
        float _2923 = _2912 * _926;
        float _2924 = _927 * _2912;
        float _2925 = (-0.0) - _2924;
        float _2926 = _2912 * _928;
        float _2928 = (cbSceneParam._m0[77u].w * _2925) / _2911;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2924;
        float _2936 = sqrt(((_2923 * _2923) + (_2924 * _2924)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2911)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2925 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3070 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3108 = ((abs(_2936 / _2925) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2946 * _3079) - exp2(_2946 * _3080)) * _3068))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2836, _2837, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2856);
        _2948 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2853;
        _2950 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2854;
        _2952 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2855;
        _2954 = _3119 * _2856;
    }
    else
    {
        _2948 = _2853;
        _2950 = _2854;
        _2952 = _2855;
        _2954 = _2856;
    }
    float _2966 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2967 = _2966 == 3.0;
    float _2968 = log2(_2954);
    float _2972 = exp2(_2968 * cbSceneParam._m0[78u].x);
    float _2973 = exp2(_2968 * cbSceneParam._m0[78u].y);
    float _2974 = exp2(_2968 * cbSceneParam._m0[78u].z);
    float _2975 = _2972 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)));
    float _2976 = _2973 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)));
    float _2977 = _2974 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0)));
    float _2986 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2986 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.y = _2986 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.z = _2986 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.w = cbInstanceData._m0[_2828].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2781) * _2827) * _2972) * _2986;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2787) * _2827) * _2973) * _2986;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2793) * _2827) * _2974) * _2986;
    SV_Target_1.w = cbInstanceData._m0[_2828].w;
}


