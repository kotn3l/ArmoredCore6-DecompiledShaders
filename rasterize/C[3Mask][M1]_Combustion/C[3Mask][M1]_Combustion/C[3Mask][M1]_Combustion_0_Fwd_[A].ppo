#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _3931;
float _3932;
float _3933;
float _3934;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _301 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _320 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _348 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _358 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _320.x) * 2.0) - _348)) + 1.0;
    float _3943 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _366 = (_359 * ((_301.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _367 = (_359 * ((_301.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _368 = (_359 * ((_301.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _386 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _399 = (((((1.0 - _320.y) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3954 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _407 = (((_386.x * cbMtdParam._m0[12u].x) - _366) * _400) + _366;
    float _408 = (_400 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _409 = (_400 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _427 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _440 = (((((1.0 - _320.z) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3965 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    vec4 _469 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _477 = ((((((_427.x * cbMtdParam._m0[13u].x) - _407) * _441) + _407) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _469.x;
    float _480 = ((((_441 * ((_427.y * cbMtdParam._m0[13u].y) - _408)) + _408) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _469.y;
    float _483 = ((((_441 * ((_427.z * cbMtdParam._m0[13u].z) - _409)) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _469.z;
    vec4 _508 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _527 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _530 = _527.x + 0.00999999977648258209228515625;
    float _537 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _530)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3976 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _545 = (_538 * ((_508.x * cbMtdParam._m0[16u].x) - _477)) + _477;
    float _546 = (_538 * ((_508.y * cbMtdParam._m0[16u].y) - _480)) + _480;
    float _547 = (_538 * ((_508.z * cbMtdParam._m0[16u].z) - _483)) + _483;
    vec4 _560 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = _560.x;
    float _579 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _562) * _359) + _562;
    float _596 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _579) * _400) + _579;
    float _613 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _596) * _441) + _596;
    float _615 = _613 - (_613 * TEXCOORD_8);
    vec4 _628 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    vec4 _665 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _676 = ((_665.x - _651) * _359) + _651;
    float _677 = ((_665.y - _652) * _359) + _652;
    float _678 = ((_665.z - _653) * _359) + _653;
    vec4 _691 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = ((_691.x - _676) * _400) + _676;
    float _703 = ((_691.y - _677) * _400) + _677;
    float _704 = ((_691.z - _678) * _400) + _678;
    vec4 _717 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _730 = ((_717.z - _704) * _441) + _704;
    float _733 = ((((_717.x - _702) * _441) + _702) * 2.0) + (-1.0);
    float _734 = ((((_717.y - _703) * _441) + _703) * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3987 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _740 = sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))));
    float _745 = (((_628.z - _730) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _730;
    vec4 _775 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _789 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3998 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _798 = (((_790 * _790) * (3.0 - (_790 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _806 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _814 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4009 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _815 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _819 = (_815 * _815) * (3.0 - (_815 * 2.0));
    float _820 = _819 * cbMtdParam._m0[22u].x;
    float _821 = _819 * cbMtdParam._m0[22u].y;
    float _822 = sin(_806);
    float _823 = cos(_806);
    float _824 = TEXCOORD.z - _820;
    float _825 = TEXCOORD.w - _821;
    vec4 _845 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_820 + fma(_825, (-0.0) - _822, _824 * _823))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_825, _823, _824 * _822) + _821)) + cbTextureTilingScale._m0[2u].w));
    float _851 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _845.x;
    float _853 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _845.y;
    float _855 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _845.z;
    float _871 = (TEXCOORD_5.x - ((_530 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4020 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    vec4 _885 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _901 = (((((_628.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _733) + (((_885.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _903 = (((((_628.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _734) + (((_885.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _906 = fma(_740, _245 * NORMAL.x, fma(_903, _252 * TANGENT.x, (_238 * _230) * _901));
    float _909 = fma(_740, _245 * NORMAL.y, fma(_903, _252 * TANGENT.y, (_238 * _231) * _901));
    float _912 = fma(_740, _245 * NORMAL.z, fma(_903, _252 * TANGENT.z, (_238 * _232) * _901));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4031 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _920 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4053 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4064 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4075 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _924 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    vec4 _1004 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1006 = _1004.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1177 = sqrt(((_990 * _990) + (_991 * _991)) + (_992 * _992));
        float _1183 = (cbMatDynParam._m0[5u].x * _1177) + cbMatDynParam._m0[5u].y;
        float _4086 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1188 = (cbMatDynParam._m0[5u].z * _1177) + cbMatDynParam._m0[5u].w;
        float _4097 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) - _1184)) + _1184) < ((_1006 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1039 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1042 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1055 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1056 = _1055 + 9u;
    uint _1057 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4108 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1069 = 1.0 - _924;
    float _1070 = _1066 * _1069;
    float _1071 = _1067 * _1069;
    float _1072 = _1068 * _1069;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _924;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _924;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _924;
    float _1080 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1095 = _1092.x * TEXCOORD_5.w;
    float _1096 = dot(vec3(_917, _918, _919), vec3(_997, _998, _999));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _917) - _997;
    float _1104 = (_1099 * _918) - _998;
    float _1105 = (_1099 * _919) - _999;
    float _1109 = abs(dot(vec3(_997, _998, _999), vec3(_917, _918, _919)));
    float _4141 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_920);
    float _1123 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1129 = (1.0 - _1123) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1130 = _1123 * _1111;
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1166, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158));
        float _1225 = fma(_1166, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158));
        float _1229 = fma(_1166, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158));
        float _1254 = _1158 + _917;
        float _1255 = _1162 + _918;
        float _1256 = _1166 + _919;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_917, _918, _919), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4189 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_917, _918, _919), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4222 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_917, _918, _919), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4255 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1166, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158));
        float _1544 = fma(_1166, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158));
        float _1548 = fma(_1166, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158));
        float _1571 = _1158 + _917;
        float _1572 = _1162 + _918;
        float _1573 = _1166 + _919;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_917, _918, _919), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4318 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_917, _918, _919), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4351 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_917, _918, _919), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4384 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = _1497;
        _1819 = _1497;
        _1820 = _1497;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1509)) + _1509;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1510)) + _1510;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1511)) + _1511;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1103 * 0.5;
    float _1878 = _1104 * 0.5;
    float _1879 = _1105 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1920;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1920 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1920 = 1.0;
    }
    float _1931;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1922 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1935 = (_1931 * cbModelParam._m0[1u].x) + (_1920 * (1.0 - cbModelParam._m0[1u].x));
    float _1945 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1945 : min(cbModelParam._m0[25u].z, _1945));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1993 = fma(_1166, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1158)) + cbModelParam._m0[13u].w;
        float _1997 = fma(_1166, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1158)) + cbModelParam._m0[14u].w;
        float _2001 = fma(_1166, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1158)) + cbModelParam._m0[15u].w;
        float _2004 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _2007 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _2010 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2038;
        if (_2004 > 0.0)
        {
            _2038 = abs((1.0 - _1993) / _2004);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1993 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2038 = frontier_phi_17_15_ladder;
        }
        float _2240;
        if (_2007 > 0.0)
        {
            _2240 = abs((1.0 - _1997) / _2007);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1997 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2240 = frontier_phi_26_22_ladder;
        }
        float _2494;
        if (_2010 > 0.0)
        {
            _2494 = abs((1.0 - _2001) / _2010);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2001 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2494 = frontier_phi_38_33_ladder;
        }
        float _2496 = isnan(_2240) ? _2038 : (isnan(_2038) ? _2240 : min(_2038, _2240));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _2004) + _1993;
        float _2502 = (_2497 * _2007) + _1997;
        float _2503 = (_2497 * _2010) + _2001;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2504;
        float _2508 = _2504 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 > _2508) || ((_2502 < _2506) || ((_2501 < _2506) || (_2501 > _2508))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2503, cbModelParam._m0[9u].z, fma(_2502, cbModelParam._m0[9u].y, _2501 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2503, cbModelParam._m0[10u].z, fma(_2502, cbModelParam._m0[10u].y, _2501 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2503, cbModelParam._m0[11u].z, fma(_2502, cbModelParam._m0[11u].y, _2501 * cbModelParam._m0[11u].x))), _1946);
            frontier_phi_16_38_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _2026 = frontier_phi_16_38_ladder_2;
        _2028 = frontier_phi_16_38_ladder_1;
        _2030 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1946);
        _2026 = _2014.x * cbModelParam._m0[1u].y;
        _2028 = _2014.y * cbModelParam._m0[1u].y;
        _2030 = _2014.z * cbModelParam._m0[1u].y;
    }
    float _2034 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _2035 = isnan(_2034) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2034 : min(cbModelParam._m0[25u].w, _2034));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2088 = fma(_1166, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1158)) + cbModelParam._m0[21u].w;
        float _2092 = fma(_1166, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1158)) + cbModelParam._m0[22u].w;
        float _2096 = fma(_1166, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1158)) + cbModelParam._m0[23u].w;
        float _2099 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2102 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2105 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2245;
        if (_2099 > 0.0)
        {
            _2245 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2245 = frontier_phi_28_24_ladder;
        }
        float _2521;
        if (_2102 > 0.0)
        {
            _2521 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2521 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_2105 > 0.0)
        {
            _2734 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2734 = frontier_phi_49_46_ladder;
        }
        float _2736 = isnan(_2521) ? _2245 : (isnan(_2245) ? _2521 : min(_2245, _2521));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _2099) + _2088;
        float _2742 = (_2737 * _2102) + _2092;
        float _2743 = (_2737 * _2105) + _2096;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _2035);
            frontier_phi_25_49_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2124 = frontier_phi_25_49_ladder_2;
        _2126 = frontier_phi_25_49_ladder_1;
        _2128 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2035);
        _2124 = _2108.x * cbModelParam._m0[1u].z;
        _2126 = _2108.y * cbModelParam._m0[1u].z;
        _2128 = _2108.z * cbModelParam._m0[1u].z;
    }
    float _2141 = (((_1129 * _1080) + _1130) * _1095) * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2143 = (((_1129 * _1082) + _1130) * _1095) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1129 * _1083) + _1130) * _1095) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2148 = fma(_2145, cbSceneParam._m0[89u].z, fma(_2143, cbSceneParam._m0[89u].y, _2141 * cbSceneParam._m0[89u].x));
    float _2151 = fma(_2145, cbSceneParam._m0[90u].z, fma(_2143, cbSceneParam._m0[90u].y, _2141 * cbSceneParam._m0[90u].x));
    float _2154 = fma(_2145, cbSceneParam._m0[91u].z, fma(_2143, cbSceneParam._m0[91u].y, _2141 * cbSceneParam._m0[91u].x));
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_1055 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _1095 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2199 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2203 = _2166 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_917, _918, _919));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_917, _918, _919));
    float _4520 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4531 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2183].x * _2189) * _2224) + ((cbLight._m0[_2193].x * _2199) * _2222);
    float _2232 = ((_2189 * cbLight._m0[_2183].y) * _2224) + ((_2199 * cbLight._m0[_2193].y) * _2222);
    float _2233 = ((_2189 * cbLight._m0[_2183].z) * _2224) + ((_2199 * cbLight._m0[_2193].z) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2239)
    {
        _2250 = _2231;
        _2252 = _2232;
        _2254 = _2233;
    }
    else
    {
        uint _2258 = _2166 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4542 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2277 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2231;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2232;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2233;
    }
    bool _2257 = _2237.y == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2257)
    {
        _2295 = _2250;
        _2297 = _2252;
        _2299 = _2254;
    }
    else
    {
        uint _2465 = _2166 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4558 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2484 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2295 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2250;
        _2297 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2252;
        _2299 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2254;
    }
    uint _2302 = _2166 + 8u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _920) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2166].x + _997;
    float _2318 = cbLight._m0[_2166].y + _998;
    float _2319 = cbLight._m0[_2166].z + _999;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2166].xyz));
    float _4574 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2331 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2332 = dot(vec3(_917, _918, _919), vec3(_2324, _2325, _2326));
    float _4596 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2324, _2325, _2326));
    float _4607 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2316 * _2316;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2353 = 0.959999978542327880859375 - _1077;
    float _2355 = 0.959999978542327880859375 - _1078;
    float _2356 = 0.959999978542327880859375 - _1079;
    float _2363 = 1.0 - _2316;
    float _2374 = (0.5 / (((_2331 * ((_2330 * _2363) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2363) + _2316) * _2330))) * _2330;
    float _4618 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    uint _2387 = _2166 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _920) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2203].x + _997;
    float _2401 = cbLight._m0[_2203].y + _998;
    float _2402 = cbLight._m0[_2203].z + _999;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2203].xyz));
    float _4629 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2414 = dot(vec3(_917, _918, _919), vec3(_2407, _2408, _2409));
    float _4640 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2407, _2408, _2409));
    float _4651 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2331 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2440) + _2399) * _2413))) * _2413;
    float _4662 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2353) + _1080) * cbLight._m0[_2387].x) * _2452) * _2189) + (((((_2352 * _2353) + _1080) * cbLight._m0[_2302].x) * _2376) * _2199);
    float _2463 = (((((_2433 * _2355) + _1082) * cbLight._m0[_2387].y) * _2452) * _2189) + (((((_2352 * _2355) + _1082) * cbLight._m0[_2302].y) * _2376) * _2199);
    float _2464 = (((((_2433 * _2356) + _1083) * cbLight._m0[_2387].z) * _2452) * _2189) + (((((_2352 * _2356) + _1083) * cbLight._m0[_2302].z) * _2376) * _2199);
    float _2526;
    float _2528;
    float _2530;
    if (_2239)
    {
        _2526 = _2462;
        _2528 = _2463;
        _2530 = _2464;
    }
    else
    {
        uint _2532 = _2166 + 2u;
        uint _2536 = _2166 + 10u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _920) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _997;
        float _2553 = cbLight._m0[_2532].y + _998;
        float _2554 = cbLight._m0[_2532].z + _999;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2532].xyz));
        float _4673 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2566 = dot(vec3(_917, _918, _919), vec3(_2559, _2560, _2561));
        float _4684 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4695 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2331 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2592) + _2551) * _2565))) * _2565;
        float _4706 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2526 = (((((_2585 * _2353) + _1080) * cbLight._m0[_2536].x) * _2604) * _2605) + _2462;
        _2528 = (((((_2585 * _2355) + _1082) * cbLight._m0[_2536].y) * _2604) * _2605) + _2463;
        _2530 = (((((_2585 * _2356) + _1083) * cbLight._m0[_2536].z) * _2604) * _2605) + _2464;
    }
    float _2640;
    float _2642;
    float _2644;
    if (_2257)
    {
        _2640 = _2526;
        _2642 = _2528;
        _2644 = _2530;
    }
    else
    {
        uint _2651 = _2166 + 3u;
        uint _2655 = _2166 + 11u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _920) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _997;
        float _2672 = cbLight._m0[_2651].y + _998;
        float _2673 = cbLight._m0[_2651].z + _999;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2651].xyz));
        float _4722 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2685 = dot(vec3(_917, _918, _919), vec3(_2678, _2679, _2680));
        float _4733 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4744 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2711 = 1.0 - _2670;
        float _2721 = (0.5 / (((_2331 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2711) + _2670) * _2684))) * _2684;
        float _4755 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2640 = (((((_2704 * _2353) + _1080) * cbLight._m0[_2655].x) * _2723) * _2724) + _2526;
        _2642 = (((((_2704 * _2355) + _1082) * cbLight._m0[_2655].y) * _2723) * _2724) + _2528;
        _2644 = (((((_2704 * _2356) + _1083) * cbLight._m0[_2655].z) * _2723) * _2724) + _2530;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2164.y == 0u)
    {
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2799;
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2799;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2799;
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _2815)));
        float _2836 = (log2(_2802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
        }
        else
        {
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3169)
                {
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3168;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3159 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2800;
                        float _3365 = _3324.y - _2801;
                        float _3366 = _3324.z - _2802;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_1036, _1039, _1042), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4781 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2800;
                        float _3400 = (-0.0) - _2801;
                        float _3401 = (-0.0) - _2802;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3416 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _1111;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_1036, _1039, _1042), vec3(_3406, _3407, _3408));
                        float _4797 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3441 = dot(vec3(_1036, _1039, _1042), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4808 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3384 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3374) + _3450;
                        float _4819 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4830 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3448 * _3448) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3228 = (_3395 * _3343.x) + _3301;
                        _3229 = (_3395 * _3343.y) + _3302;
                        _3230 = (_3395 * _3343.z) + _3303;
                        _3225 = (_3476 * _3360.x) + _3298;
                        _3226 = (_3476 * _3360.y) + _3299;
                        _3227 = (_3476 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                _2993 = frontier_phi_66_pred;
                _3003 = frontier_phi_66_pred_1;
                _3001 = frontier_phi_66_pred_2;
                _2999 = frontier_phi_66_pred_3;
                _2997 = frontier_phi_66_pred_4;
                _2995 = frontier_phi_66_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _2993;
                    _3154 = _2995;
                    _3155 = _2997;
                    _3156 = _2999;
                    _3157 = _3001;
                    _3158 = _3003;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
        }
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.z;
        uint _3009 = (_3007 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3009) & _2846) == 0u)
        {
            _3121 = _2992;
            _3123 = _2994;
            _3125 = _2996;
            _3127 = _2998;
            _3129 = _3000;
            _3131 = _3002;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
            float _3147 = _3146 * _2800;
            float _3148 = _3146 * _2801;
            float _3149 = _3146 * _2802;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3009 < ((_3007 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3281 = _2992;
                float _3282 = _2994;
                float _3283 = _2996;
                float _3284 = _2998;
                float _3285 = _3000;
                float _3286 = _3002;
                uint _3287 = _3009;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3297)
                    {
                        frontier_phi_77_pred = _3286;
                        frontier_phi_77_pred_1 = _3285;
                        frontier_phi_77_pred_2 = _3284;
                        frontier_phi_77_pred_3 = _3283;
                        frontier_phi_77_pred_4 = _3282;
                        frontier_phi_77_pred_5 = _3281;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3503 = _3281;
                        float _3504 = _3282;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        uint _3509 = _3296;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3640;
                        bool _3641;
                        for (;;)
                        {
                            uint _3520 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3596 = (_3520 * 40u) + 24u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3615 = (_3520 * 40u) + 28u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            _3640 = fma(_2802, _3628.z, fma(_2801, _3628.y, _3628.x * _2800)) + _3628.w;
                            _3641 = !((fma(_2802, _3609.z, fma(_2801, _3609.y, _3609.x * _2800)) + _3609.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3641)
                            {
                                float _3668 = _3535.x - _2800;
                                float _3669 = _3535.y - _2801;
                                float _3670 = _3535.z - _2802;
                                float _3671 = dot(vec3(_3668, _3669, _3670), vec3(_3668, _3669, _3670));
                                float _3674 = inversesqrt(_3671);
                                float _3675 = _3674 * _3668;
                                float _3676 = _3674 * _3669;
                                float _3677 = _3674 * _3670;
                                float _3681 = 1.0 - (_3671 / (_3536 * _3536));
                                float _4841 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3686 = sqrt(_3671) * _3551.w;
                                float _3688 = 1.39999997615814208984375 / (_3686 + 1.39999997615814208984375);
                                float _3689 = _3688 * _3688;
                                float _3692 = ((1.0 - _3689) * dot(vec3(_3675, _3676, _3677), vec3(_1036, _1039, _1042))) + _3689;
                                float _3695 = _3686 * _3686;
                                float _3699 = (fma(_2802, _3578.z, fma(_2801, _3578.y, _3578.x * _2800)) + _3578.w) / _3640;
                                float _3700 = (fma(_2802, _3593.z, fma(_2801, _3593.y, _3593.x * _2800)) + _3593.w) / _3640;
                                float _3704 = 1.0 - dot(vec2(_3699, _3700), vec2(_3699, _3700));
                                float _4857 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3706 = _3705 * (((isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0))) * _3682) / ((_3695 * 0.699999988079071044921875) + 1.0));
                                float _3718 = exp2(log2(1.0 / ((_3695 * 3.5) + 5.0)) * 0.25);
                                float _3719 = 1.0 - _1111;
                                float _3726 = sqrt(1.0 - ((1.0 - (_3719 * _3719)) * (1.0 - (_3718 * _3718))));
                                float _3727 = _3726 * _3726;
                                float _3728 = _3727 * _3727;
                                float _3729 = _3675 - _3147;
                                float _3730 = _3676 - _3148;
                                float _3731 = _3677 - _3149;
                                float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                                float _3739 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4868 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3743 = dot(vec3(_1036, _1039, _1042), vec3(_3735 * _3729, _3735 * _3730, _3735 * _3731));
                                float _4879 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3750 = ((_3746 * _3746) * (_3728 + (-1.0))) + 1.0;
                                float _3751 = _3688 * _3727;
                                float _3752 = _3751 * _3751;
                                float _3758 = ((1.0 - _3752) * dot(vec3(_1036, _1039, _1042), vec3(_3675, _3676, _3677))) + _3752;
                                float _4890 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3760 = 1.0 - _3727;
                                float _3770 = (0.5 / (((_3759 * ((_3742 * _3760) + _3727)) + 9.9999999392252902907785028219223e-09) + (((_3759 * _3760) + _3727) * _3742))) * _3759;
                                float _4901 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3780 = (_3705 * _3682) * (((_3728 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3750 * _3750) * ((_3695 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3706 * _3551.y;
                                frontier_phi_83_pred_1 = _3706 * _3551.x;
                                frontier_phi_83_pred_2 = _3780 * _3563.z;
                                frontier_phi_83_pred_3 = _3780 * _3563.y;
                                frontier_phi_83_pred_4 = _3780 * _3563.x;
                                frontier_phi_83_pred_5 = _3706 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3788 = frontier_phi_83_pred;
                            _3787 = frontier_phi_83_pred_1;
                            _3786 = frontier_phi_83_pred_2;
                            _3785 = frontier_phi_83_pred_3;
                            _3784 = frontier_phi_83_pred_4;
                            _3789 = frontier_phi_83_pred_5;
                            _3493 = _3787 + _3506;
                            _3494 = _3788 + _3507;
                            _3495 = _3789 + _3508;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            _3492 = _3786 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3495;
                        frontier_phi_77_pred_1 = _3494;
                        frontier_phi_77_pred_2 = _3493;
                        frontier_phi_77_pred_3 = _3492;
                        frontier_phi_77_pred_4 = _3491;
                        frontier_phi_77_pred_5 = _3490;
                    }
                    _3132 = frontier_phi_77_pred;
                    _3130 = frontier_phi_77_pred_1;
                    _3128 = frontier_phi_77_pred_2;
                    _3126 = frontier_phi_77_pred_3;
                    _3124 = frontier_phi_77_pred_4;
                    _3122 = frontier_phi_77_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3122;
                        _3282 = _3124;
                        _3283 = _3126;
                        _3284 = _3128;
                        _3285 = _3130;
                        _3286 = _3132;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3126;
                frontier_phi_58_59_ladder_1 = _3132;
                frontier_phi_58_59_ladder_2 = _3130;
                frontier_phi_58_59_ladder_3 = _3128;
                frontier_phi_58_59_ladder_4 = _3124;
                frontier_phi_58_59_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_58_59_ladder = _2996;
                frontier_phi_58_59_ladder_1 = _3002;
                frontier_phi_58_59_ladder_2 = _3000;
                frontier_phi_58_59_ladder_3 = _2998;
                frontier_phi_58_59_ladder_4 = _2994;
                frontier_phi_58_59_ladder_5 = _2992;
            }
            _3121 = frontier_phi_58_59_ladder_5;
            _3123 = frontier_phi_58_59_ladder_4;
            _3125 = frontier_phi_58_59_ladder;
            _3127 = frontier_phi_58_59_ladder_3;
            _3129 = frontier_phi_58_59_ladder_2;
            _3131 = frontier_phi_58_59_ladder_1;
        }
        float _3136 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _2859 = (_3136 * _3127) + _2295;
        _2861 = (_3136 * _3129) + _2297;
        _2863 = (_3136 * _3131) + _2299;
        _2865 = ((_3121 * _1080) * _3136) + _2640;
        _2867 = ((_3123 * _1082) * _3136) + _2642;
        _2869 = ((_3125 * _1083) * _3136) + _2644;
    }
    else
    {
        _2859 = _2295;
        _2861 = _2297;
        _2863 = _2299;
        _2865 = _2640;
        _2867 = _2642;
        _2869 = _2644;
    }
    uint _2875 = _1056 + uint(cbMatDynParam._m0[0u].w);
    float _2881 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2887 = (((((_2881 * cbMtdParam._m0[14u].x) * _775.x) * _798) * _872) * (((1.0 - _851) * cbMtdParam._m0[20u].w) + _851)) * cbInstanceData._m0[_2875].x;
    float _2893 = (((((_2881 * cbMtdParam._m0[14u].y) * _775.y) * _798) * _872) * (((1.0 - _853) * cbMtdParam._m0[20u].w) + _853)) * cbInstanceData._m0[_2875].y;
    float _2899 = (((((_2881 * cbMtdParam._m0[14u].z) * _775.z) * _798) * _872) * (((1.0 - _855) * cbMtdParam._m0[20u].w) + _855)) * cbInstanceData._m0[_2875].z;
    float _4917 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4928 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4939 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _2916 = (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2859 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1095))) + ((_2865 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1935)) * cbPerFrame._m0[3u].x)) + _2887;
    float _2918 = (_2893 + ((_2867 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1935)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2861 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1095)));
    float _2920 = (_2899 + ((_2869 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1935)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2863 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1095)));
    float _2921 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
    float _2922 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
    float _2923 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
    float _2929 = cbMtdParam._m0[2u].x * _2887;
    float _2930 = cbMtdParam._m0[2u].y * _2893;
    float _2931 = cbMtdParam._m0[2u].z * _2899;
    float _4965 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2933 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
    uint _2934 = _1055 + 6u;
    float _2942 = _1017 / cbSceneParam._m0[86u].x;
    float _2943 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _2957 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2942, _2943, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2959 = _2957.x;
    float _2960 = _2957.y;
    float _2961 = _2957.z;
    float _2962 = _2957.w;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _3017 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _3018 = _3017 / _940;
        float _3029 = _3018 * _990;
        float _3030 = _991 * _3018;
        float _3031 = (-0.0) - _3030;
        float _3032 = _3018 * _992;
        float _3034 = (cbSceneParam._m0[77u].w * _3031) / _3017;
        float _3035 = _3034 + cbSceneParam._m0[79u].w;
        float _3036 = cbSceneParam._m0[79u].w - _3030;
        float _3042 = sqrt(((_3029 * _3029) + (_3030 * _3030)) + (_3032 * _3032));
        float _3045 = (1.0 - (cbSceneParam._m0[77u].w / _3017)) * _3042;
        float _3050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3238;
        if (abs((_3031 - _3034) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3238 = ((((_3035 > 0.0) ? exp2(_3050 * _3035) : (2.0 - exp2(_3052 * _3035))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3045;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : max(_3035, _3036));
            float _3184 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : min(_3035, _3036));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3238 = ((abs(_3042 / _3031) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3050 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3050 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3052 * _3193) - exp2(_3052 * _3194)) * _3182))) + (_3045 * cbSceneParam._m0[80u].z);
        }
        vec4 _3240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2942, _2943, 1.0), 0.0);
        float _3249 = exp2((_3238 * (-1.44269502162933349609375)) * (1.0 - _3240.w));
        float _3250 = log2(_3249);
        float _3266 = log2(_2962);
        _3054 = (exp2(_3266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].x)) * _3240.x) / cbSceneParam._m0[78u].x)) + _2959;
        _3056 = (exp2(_3266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].y)) * _3240.y) / cbSceneParam._m0[78u].y)) + _2960;
        _3058 = (exp2(_3266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].z)) * _3240.z) / cbSceneParam._m0[78u].z)) + _2961;
        _3060 = _3249 * _2962;
    }
    else
    {
        _3054 = _2959;
        _3056 = _2960;
        _3058 = _2961;
        _3060 = _2962;
    }
    bool _3276;
    vec4 _3070;
    vec4 _3092;
    float _3094;
    float _3098;
    float _3099;
    float _3100;
    float _3103;
    float _3106;
    float _3109;
    float _3110;
    bool _3120;
    for (;;)
    {
        _3070 = cbMatDynParam._m0[0u];
        float _3072 = roundEven(_3070.y);
        bool _3073 = _3072 == 3.0;
        float _3074 = log2(_3060);
        float _3078 = exp2(_3074 * cbSceneParam._m0[78u].x);
        float _3079 = exp2(_3074 * cbSceneParam._m0[78u].y);
        float _3080 = exp2(_3074 * cbSceneParam._m0[78u].z);
        float _3081 = _3078 * _2921;
        float _3082 = _3079 * _2922;
        float _3083 = _3080 * _2923;
        float _3090 = _1006 + (-0.5);
        _3092 = cbMtdParam._m0[1u];
        _3094 = _3092.y * _3090;
        float _3097 = (_3072 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3098 = _3097 * (_3073 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3054)));
        _3099 = _3097 * (_3073 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3056)));
        _3100 = _3097 * (_3073 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3058)));
        _3103 = ((_2929 * _2933) * _3078) * _3097;
        _3106 = ((_2930 * _2933) * _3079) * _3097;
        _3109 = ((_2931 * _2933) * _3080) * _3097;
        _3110 = _3090 * 0.999000012874603271484375;
        _3120 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3120)
        {
            if ((cbInstanceData._m0[_1055 + 7u].x + _3110) < 0.5)
            {
                _3276 = true;
                break;
            }
        }
        uint _3217 = _1056 + uint(_3070.w);
        if ((cbInstanceData._m0[_3217].w < 1.0) && ((cbInstanceData._m0[_3217].w + _3110) < 0.5))
        {
            _3276 = true;
            break;
        }
        if ((_3094 + 1.0) < _3092.x)
        {
            _3276 = true;
            break;
        }
        _3276 = false;
        break;
    }
    float _3481;
    if (_3276)
    {
        discard_state = true;
        _3481 = 0.0;
    }
    else
    {
        _3481 = cbInstanceData._m0[_2934].w;
    }
    SV_Target.x = _3098;
    SV_Target.y = _3099;
    SV_Target.z = _3100;
    SV_Target.w = _3481;
    SV_Target_1.x = _3103;
    SV_Target_1.y = _3106;
    SV_Target_1.z = _3109;
    SV_Target_1.w = cbInstanceData._m0[_2934].w;
    discard_exit();
}


