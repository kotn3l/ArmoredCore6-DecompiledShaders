#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1388;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _3835 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3846 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3857 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    vec4 _461 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = ((((((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _461.x;
    float _472 = ((((_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _461.y;
    float _475 = ((((_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _461.z;
    vec4 _488 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _522 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _505) * _351) + _505;
    float _539 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _522) * _392) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _539) * _433) + _539;
    vec4 _569 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _585 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _596 = ((_585.x - _571) * _351) + _571;
    float _597 = ((_585.y - _572) * _351) + _572;
    float _598 = ((_585.z - _573) * _351) + _573;
    vec4 _611 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _622 = ((_611.x - _596) * _392) + _596;
    float _623 = ((_611.y - _597) * _392) + _597;
    float _624 = ((_611.z - _598) * _392) + _598;
    vec4 _637 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _650 = ((_637.z - _624) * _433) + _624;
    float _653 = ((((_637.x - _622) * _433) + _622) * 2.0) + (-1.0);
    float _655 = ((((_637.y - _623) * _433) + _623) * 2.0) + (-1.0);
    float _656 = dot(vec2(_653, _655), vec2(_653, _655));
    float _3868 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))));
    vec4 _693 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _707 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3879 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _716 = (((_708 * _708) * (3.0 - (_708 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _724 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _732 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3890 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _737 = (_733 * _733) * (3.0 - (_733 * 2.0));
    float _738 = _737 * cbMtdParam._m0[22u].x;
    float _739 = _737 * cbMtdParam._m0[22u].y;
    float _740 = sin(_724);
    float _741 = cos(_724);
    float _742 = TEXCOORD.z - _738;
    float _743 = TEXCOORD.w - _739;
    vec4 _763 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_738 + fma(_743, (-0.0) - _740, _742 * _741))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_743, _741, _742 * _740) + _739)) + cbTextureTilingScale._m0[2u].w));
    float _769 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _763.x;
    float _771 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _763.y;
    float _773 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _763.z;
    float _793 = (TEXCOORD_5.x - (((_488.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3901 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _797 = fma(_661, _237 * NORMAL.x, fma(_655, _244 * TANGENT.x, (_230 * _222) * _653));
    float _800 = fma(_661, _237 * NORMAL.y, fma(_655, _244 * TANGENT.y, (_230 * _223) * _653));
    float _803 = fma(_661, _237 * NORMAL.z, fma(_655, _244 * TANGENT.z, (_230 * _224) * _653));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _3912 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _811 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3934 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3945 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3956 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _815 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    vec4 _895 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _897 = _895.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1068 = sqrt(((_881 * _881) + (_882 * _882)) + (_883 * _883));
        float _1074 = (cbMatDynParam._m0[5u].x * _1068) + cbMatDynParam._m0[5u].y;
        float _3967 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1079 = (cbMatDynParam._m0[5u].z * _1068) + cbMatDynParam._m0[5u].w;
        float _3978 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) - _1075)) + _1075) < ((_897 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _930 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _933 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _946 = uint(roundEven(NORMAL.w)) * 13u;
    uint _947 = _946 + 9u;
    uint _948 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_948].z;
    float _3989 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _960 = 1.0 - _815;
    float _961 = _957 * _960;
    float _962 = _958 * _960;
    float _963 = _959 * _960;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _815;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _815;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _815;
    float _971 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    float _974 = _970 + 0.039999999105930328369140625;
    vec4 _983 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _986 = _983.x * TEXCOORD_5.w;
    float _987 = dot(vec3(_808, _809, _810), vec3(_888, _889, _890));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _808) - _888;
    float _995 = (_990 * _809) - _889;
    float _996 = (_990 * _810) - _890;
    float _1000 = abs(dot(vec3(_888, _889, _890), vec3(_808, _809, _810)));
    float _4022 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_811);
    float _1014 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1020 = (1.0 - _1014) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1021 = _1014 * _1002;
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1387;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1112 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1116 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1120 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1145 = _1049 + _808;
        float _1146 = _1053 + _809;
        float _1147 = _1057 + _810;
        float _1157 = fma(_1147, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145)) - _1112;
        float _1158 = fma(_1147, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145)) - _1116;
        float _1159 = fma(_1147, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145)) - _1120;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1112 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1116 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[34u].z) + ((((((_1120 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1215 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1181.x + (-0.5));
        float _1217 = _1215 * (_1181.y + (-0.5));
        float _1218 = _1215 * (_1181.z + (-0.5));
        float _1225 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1188.x + (-0.5));
        float _1227 = _1225 * (_1188.y + (-0.5));
        float _1228 = _1225 * (_1188.z + (-0.5));
        float _1235 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1195.x + (-0.5));
        float _1237 = _1235 * (_1195.y + (-0.5));
        float _1238 = _1235 * (_1195.z + (-0.5));
        float _1245 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1202.x + (-0.5));
        float _1247 = _1245 * (_1202.y + (-0.5));
        float _1248 = _1245 * (_1202.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1269 = (dot(vec3(_808, _809, _810), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1279 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4070 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1281 + 1.0))) + _1286) * _1249;
        float _1296 = _1217 * 0.5;
        float _1297 = _1227 * 0.5;
        float _1298 = _1237 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_808, _809, _810), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4103 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1323 + 1.0))) + _1328) * _1250;
        float _1338 = _1218 * 0.5;
        float _1339 = _1228 * 0.5;
        float _1340 = _1238 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_808, _809, _810), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4136 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1365 + 1.0))) + _1370) * _1251;
        _1387 = _1218;
        _1389 = _1217;
        _1390 = _1216;
        _1391 = _1228;
        _1392 = _1227;
        _1393 = _1226;
        _1394 = _1238;
        _1395 = _1237;
        _1396 = _1236;
        _1397 = _1251;
        _1398 = _1250;
        _1399 = _1249;
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1388;
        _1389 = _1388;
        _1390 = _1388;
        _1391 = _1388;
        _1392 = _1388;
        _1393 = _1388;
        _1394 = _1388;
        _1395 = _1388;
        _1396 = _1388;
        _1397 = _1388;
        _1398 = _1388;
        _1399 = _1388;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1431 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1435 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1439 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1462 = _1049 + _808;
        float _1463 = _1053 + _809;
        float _1464 = _1057 + _810;
        float _1474 = fma(_1464, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1462)) - _1431;
        float _1475 = fma(_1464, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1462)) - _1435;
        float _1476 = fma(_1464, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1462)) - _1439;
        float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
        float _1493 = ((_1480 * _1474) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1431 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1480 * _1475) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1435 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1480 * _1476) / cbModelParam._m0[35u].z) + ((((((_1439 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1493, _1494, _1495), 0.0);
        float _1530 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1497.x + (-0.5));
        float _1532 = _1530 * (_1497.y + (-0.5));
        float _1533 = _1530 * (_1497.z + (-0.5));
        float _1540 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1504.x + (-0.5));
        float _1542 = _1540 * (_1504.y + (-0.5));
        float _1543 = _1540 * (_1504.z + (-0.5));
        float _1550 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1511.x + (-0.5));
        float _1552 = _1550 * (_1511.y + (-0.5));
        float _1553 = _1550 * (_1511.z + (-0.5));
        float _1560 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1518.x + (-0.5));
        float _1562 = _1560 * (_1518.y + (-0.5));
        float _1563 = _1560 * (_1518.z + (-0.5));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = _1531 * 0.5;
        float _1568 = _1541 * 0.5;
        float _1569 = _1551 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_808, _809, _810), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4199 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1594 + 1.0))) + _1599) * _1564;
        float _1609 = _1532 * 0.5;
        float _1610 = _1542 * 0.5;
        float _1611 = _1552 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_808, _809, _810), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4232 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1636 + 1.0))) + _1641) * _1565;
        float _1651 = _1533 * 0.5;
        float _1652 = _1543 * 0.5;
        float _1653 = _1553 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_808, _809, _810), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4265 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1678 + 1.0))) + _1683) * _1566;
        _1700 = _1533;
        _1701 = _1532;
        _1702 = _1531;
        _1703 = _1543;
        _1704 = _1542;
        _1705 = _1541;
        _1706 = _1553;
        _1707 = _1552;
        _1708 = _1551;
        _1709 = _1566;
        _1710 = _1565;
        _1711 = _1564;
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
    }
    else
    {
        _1700 = _1388;
        _1701 = _1388;
        _1702 = _1388;
        _1703 = _1388;
        _1704 = _1388;
        _1705 = _1388;
        _1706 = _1388;
        _1707 = _1388;
        _1708 = _1388;
        _1709 = _1388;
        _1710 = _1388;
        _1711 = _1388;
        _1712 = 0.0;
        _1713 = 0.0;
        _1714 = 0.0;
    }
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1400)) + _1400;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1401)) + _1401;
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1402)) + _1402;
    float _1747 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1750 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1753 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1724));
    float _1768 = _994 * 0.5;
    float _1769 = _995 * 0.5;
    float _1770 = _996 * 0.5;
    float _1771 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1774 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1777 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1811;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1784 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1387, _1391, _1394, _1397));
        float _1788 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1792 = dot(vec4(_1768, _1769, _1770, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1799 = dot(vec4(cbModelParam._m0[39u]), vec4(_1768, _1769, _1770, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1822;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1813 = dot(vec4(cbModelParam._m0[40u]), vec4(_1768, _1769, _1770, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1826 = (_1822 * cbModelParam._m0[1u].x) + (_1811 * (1.0 - cbModelParam._m0[1u].x));
    float _1836 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1837 = isnan(_1836) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1836 : min(cbModelParam._m0[25u].z, _1836));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1884 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1888 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1892 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1895 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1898 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1901 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1929;
        if (_1895 > 0.0)
        {
            _1929 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1929 = frontier_phi_17_15_ladder;
        }
        float _2132;
        if (_1898 > 0.0)
        {
            _2132 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2132 = frontier_phi_26_22_ladder;
        }
        float _2386;
        if (_1901 > 0.0)
        {
            _2386 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2386 = frontier_phi_38_33_ladder;
        }
        float _2388 = isnan(_2132) ? _1929 : (isnan(_1929) ? _2132 : min(_1929, _2132));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1895) + _1884;
        float _2394 = (_2389 * _1898) + _1888;
        float _2395 = (_2389 * _1901) + _1892;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1837);
            frontier_phi_16_38_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1917 = frontier_phi_16_38_ladder_2;
        _1919 = frontier_phi_16_38_ladder_1;
        _1921 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1837);
        _1917 = _1905.x * cbModelParam._m0[1u].y;
        _1919 = _1905.y * cbModelParam._m0[1u].y;
        _1921 = _1905.z * cbModelParam._m0[1u].y;
    }
    float _1925 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1925 : min(cbModelParam._m0[25u].w, _1925));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1993 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1996 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2137;
        if (_1990 > 0.0)
        {
            _2137 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2137 = frontier_phi_28_24_ladder;
        }
        float _2413;
        if (_1993 > 0.0)
        {
            _2413 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2413 = frontier_phi_40_35_ladder;
        }
        float _2626;
        if (_1996 > 0.0)
        {
            _2626 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2626 = frontier_phi_49_46_ladder;
        }
        float _2628 = isnan(_2413) ? _2137 : (isnan(_2137) ? _2413 : min(_2137, _2413));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1990) + _1979;
        float _2634 = (_2629 * _1993) + _1983;
        float _2635 = (_2629 * _1996) + _1987;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1926);
            frontier_phi_25_49_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_25_49_ladder_2;
        _2017 = frontier_phi_25_49_ladder_1;
        _2019 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1926);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1020 * _971) + _1021) * _986) * ((cbModelParam._m0[1u].w * (_2015 - _1917)) + _1917);
    float _2034 = (((_1020 * _973) + _1021) * _986) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1020 * _974) + _1021) * _986) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_946 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _986 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2091 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2095 = _2057 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_808, _809, _810));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_808, _809, _810));
    float _4401 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4412 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2074].x * _2080) * _2116) + ((cbLight._m0[_2084].x * _2091) * _2114);
    float _2124 = ((_2080 * cbLight._m0[_2074].y) * _2116) + ((_2091 * cbLight._m0[_2084].y) * _2114);
    float _2125 = ((_2080 * cbLight._m0[_2074].z) * _2116) + ((_2091 * cbLight._m0[_2084].z) * _2114);
    uvec4 _2129 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2131 = _2129.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2131)
    {
        _2142 = _2123;
        _2144 = _2124;
        _2146 = _2125;
    }
    else
    {
        uint _2150 = _2057 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4423 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2169 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2123;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2124;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2125;
    }
    bool _2149 = _2129.y == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2149)
    {
        _2187 = _2142;
        _2189 = _2144;
        _2191 = _2146;
    }
    else
    {
        uint _2357 = _2057 + 7u;
        float _2373 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4439 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2376 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2187 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2142;
        _2189 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2144;
        _2191 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2146;
    }
    uint _2194 = _2057 + 8u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _811) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2057].x + _888;
    float _2210 = cbLight._m0[_2057].y + _889;
    float _2211 = cbLight._m0[_2057].z + _890;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2057].xyz));
    float _4455 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2223 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2224 = dot(vec3(_808, _809, _810), vec3(_2216, _2217, _2218));
    float _4477 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2216, _2217, _2218));
    float _4488 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2208 * _2208;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2245 = 0.959999978542327880859375 - _968;
    float _2247 = 0.959999978542327880859375 - _969;
    float _2248 = 0.959999978542327880859375 - _970;
    float _2255 = 1.0 - _2208;
    float _2266 = (0.5 / (((_2223 * ((_2222 * _2255) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2255) + _2208) * _2222))) * _2222;
    float _4499 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    uint _2279 = _2057 + 9u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _811) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2095].x + _888;
    float _2293 = cbLight._m0[_2095].y + _889;
    float _2294 = cbLight._m0[_2095].z + _890;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2095].xyz));
    float _4510 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2306 = dot(vec3(_808, _809, _810), vec3(_2299, _2300, _2301));
    float _4521 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2299, _2300, _2301));
    float _4532 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2291 * _2291;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2325 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2332 = 1.0 - _2291;
    float _2342 = (0.5 / (((_2223 * ((_2305 * _2332) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2332) + _2291) * _2305))) * _2305;
    float _4543 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2344 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    float _2354 = (((((_2325 * _2245) + _971) * cbLight._m0[_2279].x) * _2344) * _2080) + (((((_2244 * _2245) + _971) * cbLight._m0[_2194].x) * _2268) * _2091);
    float _2355 = (((((_2325 * _2247) + _973) * cbLight._m0[_2279].y) * _2344) * _2080) + (((((_2244 * _2247) + _973) * cbLight._m0[_2194].y) * _2268) * _2091);
    float _2356 = (((((_2325 * _2248) + _974) * cbLight._m0[_2279].z) * _2344) * _2080) + (((((_2244 * _2248) + _974) * cbLight._m0[_2194].z) * _2268) * _2091);
    float _2418;
    float _2420;
    float _2422;
    if (_2131)
    {
        _2418 = _2354;
        _2420 = _2355;
        _2422 = _2356;
    }
    else
    {
        uint _2424 = _2057 + 2u;
        uint _2428 = _2057 + 10u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _811) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _888;
        float _2445 = cbLight._m0[_2424].y + _889;
        float _2446 = cbLight._m0[_2424].z + _890;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2424].xyz));
        float _4554 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2458 = dot(vec3(_808, _809, _810), vec3(_2451, _2452, _2453));
        float _4565 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4576 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2223 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2484) + _2443) * _2457))) * _2457;
        float _4587 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2418 = (((((_2477 * _2245) + _971) * cbLight._m0[_2428].x) * _2496) * _2497) + _2354;
        _2420 = (((((_2477 * _2247) + _973) * cbLight._m0[_2428].y) * _2496) * _2497) + _2355;
        _2422 = (((((_2477 * _2248) + _974) * cbLight._m0[_2428].z) * _2496) * _2497) + _2356;
    }
    float _2532;
    float _2534;
    float _2536;
    if (_2149)
    {
        _2532 = _2418;
        _2534 = _2420;
        _2536 = _2422;
    }
    else
    {
        uint _2543 = _2057 + 3u;
        uint _2547 = _2057 + 11u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _811) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _888;
        float _2564 = cbLight._m0[_2543].y + _889;
        float _2565 = cbLight._m0[_2543].z + _890;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2543].xyz));
        float _4603 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2577 = dot(vec3(_808, _809, _810), vec3(_2570, _2571, _2572));
        float _4614 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4625 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2223 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2603) + _2562) * _2576))) * _2576;
        float _4636 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2532 = (((((_2596 * _2245) + _971) * cbLight._m0[_2547].x) * _2615) * _2616) + _2418;
        _2534 = (((((_2596 * _2247) + _973) * cbLight._m0[_2547].y) * _2615) * _2616) + _2420;
        _2536 = (((((_2596 * _2248) + _974) * cbLight._m0[_2547].z) * _2615) * _2616) + _2422;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2055.y == 0u)
    {
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2691;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2691;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2691;
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.x;
        uint _2718 = uint((float(_2706.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2707))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2707)));
        float _2728 = (log2(_2694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2729 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        uint _2732 = uint(isnan(14.0) ? _2729 : (isnan(_2729) ? 14.0 : min(_2729, 14.0)));
        uvec4 _2737 = texelFetch(g_lightClusterGridBuffer, int(((_2732 << 2u) + (_2718 << 6u)) >> 2u));
        uint _2738 = _2737.x;
        uint _2739 = _2706.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2739 >> 4u) & 15u)) + 4294967295u) & _2738) == 0u) || ((_2739 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3061)
                {
                    frontier_phi_66_pred = _3045;
                    frontier_phi_66_pred_1 = _3050;
                    frontier_phi_66_pred_2 = _3049;
                    frontier_phi_66_pred_3 = _3048;
                    frontier_phi_66_pred_4 = _3047;
                    frontier_phi_66_pred_5 = _3046;
                }
                else
                {
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    uint _3196;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3050;
                    _3196 = _3060;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    for (;;)
                    {
                        uint _3200 = uint(findLSB(_3196)) + (_3051 << 5u);
                        uint _3197 = (_3196 + 4294967295u) & _3196;
                        uint _3202 = _3200 * 48u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3222 = (_3200 * 48u) + 4u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3241 = (_3200 * 48u) + 8u;
                        vec3 _3252 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x));
                        float _3256 = _3216.x - _2692;
                        float _3257 = _3216.y - _2693;
                        float _3258 = _3216.z - _2694;
                        float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                        float _3262 = inversesqrt(_3259);
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3266 = dot(vec3(_927, _930, _933), vec3(_3263, _3264, _3265));
                        float _3271 = 1.0 - (_3259 * _3216.w);
                        float _4662 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3273 = sqrt(_3259) * _3235.w;
                        float _3276 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3266) + _3277;
                        float _3283 = _3273 * _3273;
                        float _3287 = ((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3272) / ((_3283 * 0.699999988079071044921875) + 1.0);
                        float _3291 = (-0.0) - _2692;
                        float _3292 = (-0.0) - _2693;
                        float _3293 = (-0.0) - _2694;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3308 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                        float _3309 = 1.0 - _1002;
                        float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                        float _3317 = _3316 * _3316;
                        float _3318 = _3317 * _3317;
                        float _3319 = _3298 + _3263;
                        float _3320 = _3299 + _3264;
                        float _3321 = _3300 + _3265;
                        float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                        float _3329 = dot(vec3(_927, _930, _933), vec3(_3298, _3299, _3300));
                        float _4678 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3333 = dot(vec3(_927, _930, _933), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                        float _4689 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                        float _3341 = _3276 * _3317;
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3266) + _3342;
                        float _4700 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3347 = 1.0 - _3317;
                        float _3357 = (0.5 / (((_3346 * ((_3332 * _3347) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3317) * _3332))) * _3346;
                        float _4711 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3368 = (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3340 * _3340) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125))) * _3272;
                        _3120 = (_3287 * _3235.x) + _3193;
                        _3121 = (_3287 * _3235.y) + _3194;
                        _3122 = (_3287 * _3235.z) + _3195;
                        _3117 = (_3368 * _3252.x) + _3190;
                        _3118 = (_3368 * _3252.y) + _3191;
                        _3119 = (_3368 * _3252.z) + _3192;
                        if (_3197 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3122;
                            _3196 = _3197;
                        }
                    }
                    frontier_phi_66_pred = _3117;
                    frontier_phi_66_pred_1 = _3122;
                    frontier_phi_66_pred_2 = _3121;
                    frontier_phi_66_pred_3 = _3120;
                    frontier_phi_66_pred_4 = _3119;
                    frontier_phi_66_pred_5 = _3118;
                }
                _2885 = frontier_phi_66_pred;
                _2895 = frontier_phi_66_pred_1;
                _2893 = frontier_phi_66_pred_2;
                _2891 = frontier_phi_66_pred_3;
                _2889 = frontier_phi_66_pred_4;
                _2887 = frontier_phi_66_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2885;
                    _3046 = _2887;
                    _3047 = _2889;
                    _3048 = _2891;
                    _3049 = _2893;
                    _3050 = _2895;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2901) & _2738) == 0u)
        {
            _3013 = _2884;
            _3015 = _2886;
            _3017 = _2888;
            _3019 = _2890;
            _3021 = _2892;
            _3023 = _2894;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
            float _3039 = _3038 * _2692;
            float _3040 = _3038 * _2693;
            float _3041 = _3038 * _2694;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3173 = _2884;
                float _3174 = _2886;
                float _3175 = _2888;
                float _3176 = _2890;
                float _3177 = _2892;
                float _3178 = _2894;
                uint _3179 = _2901;
                uint _3188;
                bool _3189;
                for (;;)
                {
                    _3188 = texelFetch(g_lightClassification, int((((_2732 << 5u) + (_2718 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                    _3189 = _3188 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3189)
                    {
                        frontier_phi_77_pred = _3178;
                        frontier_phi_77_pred_1 = _3177;
                        frontier_phi_77_pred_2 = _3176;
                        frontier_phi_77_pred_3 = _3175;
                        frontier_phi_77_pred_4 = _3174;
                        frontier_phi_77_pred_5 = _3173;
                    }
                    else
                    {
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3395 = _3173;
                        float _3396 = _3174;
                        float _3397 = _3175;
                        float _3398 = _3176;
                        float _3399 = _3177;
                        float _3400 = _3178;
                        uint _3401 = _3188;
                        uint _3402;
                        vec4 _3427;
                        float _3428;
                        vec4 _3443;
                        vec3 _3455;
                        vec4 _3470;
                        vec4 _3485;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3412 = ((_3179 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3401));
                            _3402 = (_3401 + 4294967295u) & _3401;
                            uint _3414 = _3412 * 40u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3428 = _3427.w;
                            uint _3430 = (_3412 * 40u) + 4u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3412 * 40u) + 8u;
                            _3455 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x));
                            uint _3457 = (_3412 * 40u) + 16u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3412 * 40u) + 20u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3488 = (_3412 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3412 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2694, _3520.z, fma(_2693, _3520.y, _3520.x * _2692)) + _3520.w;
                            _3533 = !((fma(_2694, _3501.z, fma(_2693, _3501.y, _3501.x * _2692)) + _3501.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3427.x - _2692;
                                float _3561 = _3427.y - _2693;
                                float _3562 = _3427.z - _2694;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3428 * _3428));
                                float _4722 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3578 = sqrt(_3563) * _3443.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_927, _930, _933))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2694, _3470.z, fma(_2693, _3470.y, _3470.x * _2692)) + _3470.w) / _3532;
                                float _3592 = (fma(_2694, _3485.z, fma(_2693, _3485.y, _3485.x * _2692)) + _3485.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4738 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _1002;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3039;
                                float _3622 = _3568 - _3040;
                                float _3623 = _3569 - _3041;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_927, _930, _933), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4749 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3635 = dot(vec3(_927, _930, _933), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4760 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_927, _930, _933), vec3(_3567, _3568, _3569))) + _3644;
                                float _4771 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4782 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3598 * _3443.y;
                                frontier_phi_83_pred_1 = _3598 * _3443.x;
                                frontier_phi_83_pred_2 = _3672 * _3455.z;
                                frontier_phi_83_pred_3 = _3672 * _3455.y;
                                frontier_phi_83_pred_4 = _3672 * _3455.x;
                                frontier_phi_83_pred_5 = _3598 * _3443.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_83_pred;
                            _3679 = frontier_phi_83_pred_1;
                            _3678 = frontier_phi_83_pred_2;
                            _3677 = frontier_phi_83_pred_3;
                            _3676 = frontier_phi_83_pred_4;
                            _3681 = frontier_phi_83_pred_5;
                            _3385 = _3679 + _3398;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3382 = _3676 + _3395;
                            _3383 = _3677 + _3396;
                            _3384 = _3678 + _3397;
                            if (_3402 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3402;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3387;
                        frontier_phi_77_pred_1 = _3386;
                        frontier_phi_77_pred_2 = _3385;
                        frontier_phi_77_pred_3 = _3384;
                        frontier_phi_77_pred_4 = _3383;
                        frontier_phi_77_pred_5 = _3382;
                    }
                    _3024 = frontier_phi_77_pred;
                    _3022 = frontier_phi_77_pred_1;
                    _3020 = frontier_phi_77_pred_2;
                    _3018 = frontier_phi_77_pred_3;
                    _3016 = frontier_phi_77_pred_4;
                    _3014 = frontier_phi_77_pred_5;
                    uint _3180 = _3179 + 1u;
                    if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3173 = _3014;
                        _3174 = _3016;
                        _3175 = _3018;
                        _3176 = _3020;
                        _3177 = _3022;
                        _3178 = _3024;
                        _3179 = _3180;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3018;
                frontier_phi_58_59_ladder_1 = _3024;
                frontier_phi_58_59_ladder_2 = _3022;
                frontier_phi_58_59_ladder_3 = _3020;
                frontier_phi_58_59_ladder_4 = _3016;
                frontier_phi_58_59_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_58_59_ladder = _2888;
                frontier_phi_58_59_ladder_1 = _2894;
                frontier_phi_58_59_ladder_2 = _2892;
                frontier_phi_58_59_ladder_3 = _2890;
                frontier_phi_58_59_ladder_4 = _2886;
                frontier_phi_58_59_ladder_5 = _2884;
            }
            _3013 = frontier_phi_58_59_ladder_5;
            _3015 = frontier_phi_58_59_ladder_4;
            _3017 = frontier_phi_58_59_ladder;
            _3019 = frontier_phi_58_59_ladder_3;
            _3021 = frontier_phi_58_59_ladder_2;
            _3023 = frontier_phi_58_59_ladder_1;
        }
        float _3028 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2751 = (_3028 * _3019) + _2187;
        _2753 = (_3028 * _3021) + _2189;
        _2755 = (_3028 * _3023) + _2191;
        _2757 = ((_3013 * _971) * _3028) + _2532;
        _2759 = ((_3015 * _973) * _3028) + _2534;
        _2761 = ((_3017 * _974) * _3028) + _2536;
    }
    else
    {
        _2751 = _2187;
        _2753 = _2189;
        _2755 = _2191;
        _2757 = _2532;
        _2759 = _2534;
        _2761 = _2536;
    }
    uint _2767 = _947 + uint(cbMatDynParam._m0[0u].w);
    float _2773 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2779 = (((((_2773 * cbMtdParam._m0[14u].x) * _693.x) * _716) * _794) * (((1.0 - _769) * cbMtdParam._m0[20u].w) + _769)) * cbInstanceData._m0[_2767].x;
    float _2785 = (((((_2773 * cbMtdParam._m0[14u].y) * _693.y) * _716) * _794) * (((1.0 - _771) * cbMtdParam._m0[20u].w) + _771)) * cbInstanceData._m0[_2767].y;
    float _2791 = (((((_2773 * cbMtdParam._m0[14u].z) * _693.z) * _716) * _794) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_2767].z;
    float _4798 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4809 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4820 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2808 = (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2751 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _986))) + ((_2757 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + _2779;
    float _2810 = (_2785 + ((_2759 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2753 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _986)));
    float _2812 = (_2791 + ((_2761 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1826)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2755 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _986)));
    float _2813 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2814 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2815 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2821 = cbMtdParam._m0[2u].x * _2779;
    float _2822 = cbMtdParam._m0[2u].y * _2785;
    float _2823 = cbMtdParam._m0[2u].z * _2791;
    float _4846 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2825 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    uint _2826 = _946 + 6u;
    float _2834 = _908 / cbSceneParam._m0[86u].x;
    float _2835 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _2910 = _2909 / _831;
        float _2921 = _2910 * _881;
        float _2922 = _882 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2924 = _2910 * _883;
        float _2926 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2922;
        float _2934 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3130;
        if (abs((_2923 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3130 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3076 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3130 = ((abs(_2934 / _2923) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2944 * _3085) - exp2(_2944 * _3086)) * _3074))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3132 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3141 = exp2((_3130 * (-1.44269502162933349609375)) * (1.0 - _3132.w));
        float _3142 = log2(_3141);
        float _3158 = log2(_2854);
        _2946 = (exp2(_3158 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].x)) * _3132.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2948 = (exp2(_3158 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].y)) * _3132.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2950 = (exp2(_3158 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3142 * cbSceneParam._m0[78u].z)) * _3132.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2952 = _3141 * _2854;
    }
    else
    {
        _2946 = _2851;
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
    }
    bool _3168;
    vec4 _2962;
    vec4 _2984;
    float _2986;
    float _2990;
    float _2991;
    float _2992;
    float _2995;
    float _2998;
    float _3001;
    float _3002;
    bool _3012;
    for (;;)
    {
        _2962 = cbMatDynParam._m0[0u];
        float _2964 = roundEven(_2962.y);
        bool _2965 = _2964 == 3.0;
        float _2966 = log2(_2952);
        float _2970 = exp2(_2966 * cbSceneParam._m0[78u].x);
        float _2971 = exp2(_2966 * cbSceneParam._m0[78u].y);
        float _2972 = exp2(_2966 * cbSceneParam._m0[78u].z);
        float _2973 = _2970 * _2813;
        float _2974 = _2971 * _2814;
        float _2975 = _2972 * _2815;
        float _2982 = _897 + (-0.5);
        _2984 = cbMtdParam._m0[1u];
        _2986 = _2984.y * _2982;
        float _2989 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2990 = _2989 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
        _2991 = _2989 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
        _2992 = _2989 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
        _2995 = ((_2821 * _2825) * _2970) * _2989;
        _2998 = ((_2822 * _2825) * _2971) * _2989;
        _3001 = ((_2823 * _2825) * _2972) * _2989;
        _3002 = _2982 * 0.999000012874603271484375;
        _3012 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3012)
        {
            if ((cbInstanceData._m0[_946 + 7u].x + _3002) < 0.5)
            {
                _3168 = true;
                break;
            }
        }
        uint _3109 = _947 + uint(_2962.w);
        if ((cbInstanceData._m0[_3109].w < 1.0) && ((cbInstanceData._m0[_3109].w + _3002) < 0.5))
        {
            _3168 = true;
            break;
        }
        if ((_2986 + 1.0) < _2984.x)
        {
            _3168 = true;
            break;
        }
        _3168 = false;
        break;
    }
    float _3373;
    if (_3168)
    {
        discard_state = true;
        _3373 = 0.0;
    }
    else
    {
        _3373 = cbInstanceData._m0[_2826].w;
    }
    SV_Target.x = _2990;
    SV_Target.y = _2991;
    SV_Target.z = _2992;
    SV_Target.w = _3373;
    SV_Target_1.x = _2995;
    SV_Target_1.y = _2998;
    SV_Target_1.z = _3001;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
    discard_exit();
}


