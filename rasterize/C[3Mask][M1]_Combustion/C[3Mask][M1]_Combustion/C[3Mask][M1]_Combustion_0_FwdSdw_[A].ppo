#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _4218;
float _4219;
float _4220;
float _4221;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.x * cbMtdParam._m0[10u].x;
    float _285 = _278.y * cbMtdParam._m0[10u].y;
    float _286 = _278.z * cbMtdParam._m0[10u].z;
    vec4 _305 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _324 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _352 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _362 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _324.x) * 2.0) - _352)) + 1.0;
    float _4230 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _370 = (_363 * ((_305.x * cbMtdParam._m0[11u].x) - _284)) + _284;
    float _371 = (_363 * ((_305.y * cbMtdParam._m0[11u].y) - _285)) + _285;
    float _372 = (_363 * ((_305.z * cbMtdParam._m0[11u].z) - _286)) + _286;
    vec4 _390 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _403 = (((((1.0 - _324.y) * 2.0) - _352) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4241 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _411 = (((_390.x * cbMtdParam._m0[12u].x) - _370) * _404) + _370;
    float _412 = (_404 * ((_390.y * cbMtdParam._m0[12u].y) - _371)) + _371;
    float _413 = (_404 * ((_390.z * cbMtdParam._m0[12u].z) - _372)) + _372;
    vec4 _431 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _444 = (((((1.0 - _324.z) * 2.0) - _352) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4252 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    vec4 _473 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _481 = ((((((_431.x * cbMtdParam._m0[13u].x) - _411) * _445) + _411) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _473.x;
    float _484 = ((((_445 * ((_431.y * cbMtdParam._m0[13u].y) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _473.y;
    float _487 = ((((_445 * ((_431.z * cbMtdParam._m0[13u].z) - _413)) + _413) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _473.z;
    vec4 _512 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _531 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _534 = _531.x + 0.00999999977648258209228515625;
    float _541 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _534)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4263 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _549 = (_542 * ((_512.x * cbMtdParam._m0[16u].x) - _481)) + _481;
    float _550 = (_542 * ((_512.y * cbMtdParam._m0[16u].y) - _484)) + _484;
    float _551 = (_542 * ((_512.z * cbMtdParam._m0[16u].z) - _487)) + _487;
    vec4 _564 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _566 = _564.x;
    float _583 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _566) * _363) + _566;
    float _600 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _583) * _404) + _583;
    float _617 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _600) * _445) + _600;
    float _619 = _617 - (_617 * TEXCOORD_8);
    vec4 _632 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _653 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _655 = _653.x;
    float _656 = _653.y;
    float _657 = _653.z;
    vec4 _669 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _680 = ((_669.x - _655) * _363) + _655;
    float _681 = ((_669.y - _656) * _363) + _656;
    float _682 = ((_669.z - _657) * _363) + _657;
    vec4 _695 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _706 = ((_695.x - _680) * _404) + _680;
    float _707 = ((_695.y - _681) * _404) + _681;
    float _708 = ((_695.z - _682) * _404) + _682;
    vec4 _721 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _734 = ((_721.z - _708) * _445) + _708;
    float _737 = ((((_721.x - _706) * _445) + _706) * 2.0) + (-1.0);
    float _738 = ((((_721.y - _707) * _445) + _707) * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _4274 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _744 = sqrt(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))));
    float _749 = (((_632.z - _734) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _734;
    vec4 _779 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _793 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4285 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _802 = (((_794 * _794) * (3.0 - (_794 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _810 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _818 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4296 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _819 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _823 = (_819 * _819) * (3.0 - (_819 * 2.0));
    float _824 = _823 * cbMtdParam._m0[22u].x;
    float _825 = _823 * cbMtdParam._m0[22u].y;
    float _826 = sin(_810);
    float _827 = cos(_810);
    float _828 = TEXCOORD.z - _824;
    float _829 = TEXCOORD.w - _825;
    vec4 _849 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_824 + fma(_829, (-0.0) - _826, _828 * _827))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_829, _827, _828 * _826) + _825)) + cbTextureTilingScale._m0[2u].w));
    float _855 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _849.x;
    float _857 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _849.y;
    float _859 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _849.z;
    float _875 = (TEXCOORD_5.x - ((_534 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4307 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    vec4 _889 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _905 = (((((_632.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _737) + (((_889.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _907 = (((((_632.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _738) + (((_889.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _910 = fma(_744, _249 * NORMAL.x, fma(_907, _256 * TANGENT.x, (_242 * _234) * _905));
    float _913 = fma(_744, _249 * NORMAL.y, fma(_907, _256 * TANGENT.y, (_242 * _235) * _905));
    float _916 = fma(_744, _249 * NORMAL.z, fma(_907, _256 * TANGENT.z, (_242 * _236) * _905));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _4318 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _924 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4340 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4351 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4362 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _928 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1181 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1187 = (cbMatDynParam._m0[5u].x * _1181) + cbMatDynParam._m0[5u].y;
        float _4373 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1192 = (cbMatDynParam._m0[5u].z * _1181) + cbMatDynParam._m0[5u].w;
        float _4384 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) - _1188)) + _1188) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1043 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1046 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1059 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1060 = _1059 + 9u;
    uint _1061 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _4395 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _4417 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _1073 = 1.0 - _928;
    float _1074 = _1070 * _1073;
    float _1075 = _1071 * _1073;
    float _1076 = _1072 * _1073;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _928;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _928;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _928;
    float _1084 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = _1096.x * TEXCOORD_5.w;
    float _1100 = dot(vec3(_921, _922, _923), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _921) - _1001;
    float _1108 = (_1103 * _922) - _1002;
    float _1109 = (_1103 * _923) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_921, _922, _923)));
    float _4428 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_924);
    float _1127 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1133 = (1.0 - _1127) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1134 = _1127 * _1115;
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1170, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162));
        float _1229 = fma(_1170, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162));
        float _1233 = fma(_1170, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162));
        float _1258 = _1162 + _921;
        float _1259 = _1166 + _922;
        float _1260 = _1170 + _923;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_921, _922, _923), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4476 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_921, _922, _923), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4509 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_921, _922, _923), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4542 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1170, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162));
        float _1548 = fma(_1170, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162));
        float _1552 = fma(_1170, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162));
        float _1575 = _1162 + _921;
        float _1576 = _1166 + _922;
        float _1577 = _1170 + _923;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_921, _922, _923), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4583 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4594 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4605 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_921, _922, _923), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4616 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4627 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4638 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_921, _922, _923), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4649 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4660 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4671 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = _1501;
        _1823 = _1501;
        _1824 = _1501;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1513)) + _1513;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1514)) + _1514;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1515)) + _1515;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1107 * 0.5;
    float _1882 = _1108 * 0.5;
    float _1883 = _1109 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1170, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1162)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1170, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1162)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1170, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1162)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2011 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2014 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2042 = frontier_phi_17_15_ladder;
        }
        float _2213;
        if (_2011 > 0.0)
        {
            _2213 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2213 = frontier_phi_26_22_ladder;
        }
        float _2508;
        if (_2014 > 0.0)
        {
            _2508 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2508 = frontier_phi_38_33_ladder;
        }
        float _2510 = isnan(_2213) ? _2042 : (isnan(_2042) ? _2213 : min(_2042, _2213));
        float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
        float _2515 = (_2511 * _2008) + _1997;
        float _2516 = (_2511 * _2011) + _2001;
        float _2517 = (_2511 * _2014) + _2005;
        float _2518 = _2511 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2518;
        float _2522 = _2518 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 > _2522) || ((_2516 < _2520) || ((_2515 < _2520) || (_2515 > _2522))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2517, cbModelParam._m0[9u].z, fma(_2516, cbModelParam._m0[9u].y, _2515 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2517, cbModelParam._m0[10u].z, fma(_2516, cbModelParam._m0[10u].y, _2515 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2517, cbModelParam._m0[11u].z, fma(_2516, cbModelParam._m0[11u].y, _2515 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_16_38_ladder = _2662.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2662.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2662.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_16_38_ladder_2;
        _2032 = frontier_phi_16_38_ladder_1;
        _2034 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1950);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1170, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1162)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1170, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1162)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1170, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1162)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2106 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2109 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2218;
        if (_2103 > 0.0)
        {
            _2218 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2218 = frontier_phi_28_24_ladder;
        }
        float _2535;
        if (_2106 > 0.0)
        {
            _2535 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2535 = frontier_phi_40_35_ladder;
        }
        float _2873;
        if (_2109 > 0.0)
        {
            _2873 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2873 = frontier_phi_50_47_ladder;
        }
        float _2875 = isnan(_2535) ? _2218 : (isnan(_2218) ? _2535 : min(_2218, _2535));
        float _2876 = isnan(_2873) ? _2875 : (isnan(_2875) ? _2873 : min(_2875, _2873));
        float _2880 = (_2876 * _2103) + _2092;
        float _2881 = (_2876 * _2106) + _2096;
        float _2882 = (_2876 * _2109) + _2100;
        float _2883 = _2876 * 9.9999997473787516355514526367188e-05;
        float _2884 = (-1.0) - _2883;
        float _2886 = _2883 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2882 > _2886) || ((_2882 < _2884) || ((_2881 > _2886) || ((_2881 < _2884) || ((_2880 < _2884) || (_2880 > _2886))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2882, cbModelParam._m0[17u].z, fma(_2881, cbModelParam._m0[17u].y, _2880 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2882, cbModelParam._m0[18u].z, fma(_2881, cbModelParam._m0[18u].y, _2880 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2882, cbModelParam._m0[19u].z, fma(_2881, cbModelParam._m0[19u].y, _2880 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_25_50_ladder = _3004.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3004.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3004.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_25_50_ladder_2;
        _2130 = frontier_phi_25_50_ladder_1;
        _2132 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2039);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2145 = (((_1133 * _1084) + _1134) * _1099) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1133 * _1086) + _1134) * _1099) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1133 * _1087) + _1134) * _1099) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2147, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2147, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2147, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    float _2192 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2200 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2204 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2205 = _2192 / _2204;
    float _2206 = _2196 / _2204;
    float _2207 = _2200 / _2204;
    float _2354;
    float _2355;
    float _2356;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2234 = ((uint(_2207 > cbSceneParam._m0[59u].y) + uint(_2207 > cbSceneParam._m0[59u].x)) + uint(_2207 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2235 = _2234 + 43u;
        uint _2243 = _2234 + 44u;
        uint _2251 = _2234 + 45u;
        uint _2259 = _2234 + 46u;
        float _2270 = fma(_2204, cbSceneParam._m0[_2235].w, fma(_2200, cbSceneParam._m0[_2235].z, fma(_2196, cbSceneParam._m0[_2235].y, _2192 * cbSceneParam._m0[_2235].x)));
        float _2274 = fma(_2204, cbSceneParam._m0[_2243].w, fma(_2200, cbSceneParam._m0[_2243].z, fma(_2196, cbSceneParam._m0[_2243].y, _2192 * cbSceneParam._m0[_2243].x)));
        float _2282 = fma(_2204, cbSceneParam._m0[_2259].w, fma(_2200, cbSceneParam._m0[_2259].z, fma(_2196, cbSceneParam._m0[_2259].y, _2192 * cbSceneParam._m0[_2259].x)));
        float _2287 = cbSceneParam._m0[33u].z * _2282;
        float _2289 = cbSceneParam._m0[33u].w * _2282;
        float _2292 = fma(_2204, cbSceneParam._m0[_2251].w, fma(_2200, cbSceneParam._m0[_2251].z, fma(_2196, cbSceneParam._m0[_2251].y, _2192 * cbSceneParam._m0[_2251].x))) / _2282;
        float _2340 = (cbSceneParam._m0[33u].x - sqrt(((_2206 * _2206) + (_2205 * _2205)) + (_2207 * _2207))) * cbSceneParam._m0[33u].y;
        float _4797 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2347 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2270) / _2282, (_2289 + _2274) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 + _2270) / _2282, (_2274 - _2287) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 - _2287) / _2282, (_2274 - _2289) / _2282), _2292), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 - _2289) / _2282, (_2287 + _2274) / _2282), _2292), 0.0)).x), vec4(0.25)));
        _2354 = 1.0 - (_2347 * cbSceneParam._m0[34u].x);
        _2355 = 1.0 - (_2347 * cbSceneParam._m0[34u].y);
        _2356 = 1.0 - (_2347 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2354 = 1.0;
        _2355 = 1.0;
        _2356 = 1.0;
    }
    float _2420;
    float _2422;
    float _2424;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2408 = fma(_2204, cbSceneParam._m0[63u].w, fma(_2200, cbSceneParam._m0[63u].z, fma(_2196, cbSceneParam._m0[63u].y, _2192 * cbSceneParam._m0[63u].x)));
        float _2409 = fma(_2204, cbSceneParam._m0[60u].w, fma(_2200, cbSceneParam._m0[60u].z, fma(_2196, cbSceneParam._m0[60u].y, _2192 * cbSceneParam._m0[60u].x))) / _2408;
        float _2410 = fma(_2204, cbSceneParam._m0[61u].w, fma(_2200, cbSceneParam._m0[61u].z, fma(_2196, cbSceneParam._m0[61u].y, _2192 * cbSceneParam._m0[61u].x))) / _2408;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2409 >= cbSceneParam._m0[64u].x) && (_2410 >= cbSceneParam._m0[64u].y)) && (_2409 <= cbSceneParam._m0[64u].z)) && (_2410 <= cbSceneParam._m0[64u].w))
        {
            float _2548 = fma(_2204, cbSceneParam._m0[62u].w, fma(_2200, cbSceneParam._m0[62u].z, fma(_2196, cbSceneParam._m0[62u].y, _2192 * cbSceneParam._m0[62u].x))) / _2408;
            float _2552 = isnan(cbSceneParam._m0[41u].w) ? _2548 : (isnan(_2548) ? cbSceneParam._m0[41u].w : max(_2548, cbSceneParam._m0[41u].w));
            float _2595 = (cbSceneParam._m0[33u].x - sqrt(((_2206 * _2206) + (_2205 * _2205)) + (_2207 * _2207))) * cbSceneParam._m0[33u].y;
            float _4813 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
            float _2602 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2409, cbSceneParam._m0[33u].w + _2410), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2409, _2410 - cbSceneParam._m0[33u].z), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2409 - cbSceneParam._m0[33u].z, _2410 - cbSceneParam._m0[33u].w), _2552), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2409 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2410), _2552), 0.0)).x), vec4(0.25)));
            float _2606 = 1.0 - (_2602 * cbSceneParam._m0[34u].x);
            float _2607 = 1.0 - (_2602 * cbSceneParam._m0[34u].y);
            float _2608 = 1.0 - (_2602 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
            frontier_phi_37_36_ladder_1 = isnan(_2607) ? _2355 : (isnan(_2355) ? _2607 : min(_2355, _2607));
            frontier_phi_37_36_ladder_2 = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
        }
        else
        {
            frontier_phi_37_36_ladder = _2356;
            frontier_phi_37_36_ladder_1 = _2355;
            frontier_phi_37_36_ladder_2 = _2354;
        }
        _2420 = frontier_phi_37_36_ladder_2;
        _2422 = frontier_phi_37_36_ladder_1;
        _2424 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2420 = _2354;
        _2422 = _2355;
        _2424 = _2356;
    }
    uvec4 _2429 = floatBitsToUint(cbInstanceData._m0[_1059 + 5u]);
    uint _2431 = _2429.x * 14u;
    uint _2432 = _2431 + 13u;
    float _2439 = _1099 + (-1.0);
    float _2444 = (cbLight._m0[_2432].x * _2439) + 1.0;
    float _2445 = (cbLight._m0[_2432].y * _2439) + 1.0;
    float _2446 = (cbLight._m0[_2432].z * _2439) + 1.0;
    float _2447 = (cbLight._m0[_2432].w * _2439) + 1.0;
    uint _2448 = _2431 + 5u;
    float _2454 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
    uint _2458 = _2431 + 4u;
    float _2467 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
    uint _2471 = _2431 | 1u;
    float _2482 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_921, _922, _923));
    float _2485 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_921, _922, _923));
    float _4849 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _4860 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2490 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * 0.3183098733425140380859375;
    float _2492 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * 0.3183098733425140380859375;
    float _2499 = ((cbLight._m0[_2448].x * _2454) * _2492) + (((cbLight._m0[_2458].x * _2420) * _2467) * _2490);
    float _2500 = ((_2454 * cbLight._m0[_2448].y) * _2492) + (((cbLight._m0[_2458].y * _2422) * _2467) * _2490);
    float _2501 = ((_2454 * cbLight._m0[_2448].z) * _2492) + (((cbLight._m0[_2458].z * _2424) * _2467) * _2490);
    uvec4 _2505 = floatBitsToUint(cbLight._m0[_2431 + 12u]);
    bool _2507 = _2505.x == 0u;
    float _2609;
    float _2611;
    float _2613;
    if (_2507)
    {
        _2609 = _2499;
        _2611 = _2500;
        _2613 = _2501;
    }
    else
    {
        uint _2617 = _2431 + 6u;
        float _2633 = (dot(vec3(cbLight._m0[_2431 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2634 = _2633 * _2633;
        float _4871 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2635 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2636 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2609 = (((cbLight._m0[_2617].x * 0.3183098733425140380859375) * _2635) * _2636) + _2499;
        _2611 = (((cbLight._m0[_2617].y * 0.3183098733425140380859375) * _2635) * _2636) + _2500;
        _2613 = (((cbLight._m0[_2617].z * 0.3183098733425140380859375) * _2635) * _2636) + _2501;
    }
    bool _2616 = _2505.y == 0u;
    float _2671;
    float _2673;
    float _2675;
    if (_2616)
    {
        _2671 = _2609;
        _2673 = _2611;
        _2675 = _2613;
    }
    else
    {
        uint _2844 = _2431 + 7u;
        float _2860 = (dot(vec3(cbLight._m0[_2431 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2861 = _2860 * _2860;
        float _4887 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2862 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2863 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2671 = (((cbLight._m0[_2844].x * 0.3183098733425140380859375) * _2862) * _2863) + _2609;
        _2673 = (((cbLight._m0[_2844].y * 0.3183098733425140380859375) * _2862) * _2863) + _2611;
        _2675 = (((cbLight._m0[_2844].z * 0.3183098733425140380859375) * _2862) * _2863) + _2613;
    }
    uint _2678 = _2431 + 8u;
    float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2431].w)) * _924) * 0.949999988079071044921875);
    float _2692 = _2691 * _2691;
    float _2693 = cbLight._m0[_2431].x + _1001;
    float _2694 = cbLight._m0[_2431].y + _1002;
    float _2695 = cbLight._m0[_2431].z + _1003;
    float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
    float _2700 = _2699 * _2693;
    float _2701 = _2699 * _2694;
    float _2702 = _2699 * _2695;
    float _2703 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2431].xyz));
    float _4903 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2706 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _4914 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2707 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2708 = dot(vec3(_921, _922, _923), vec3(_2700, _2701, _2702));
    float _4925 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
    float _2712 = dot(vec3(cbLight._m0[_2431].xyz), vec3(_2700, _2701, _2702));
    float _4936 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2716 = _2692 * _2692;
    float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
    float _2728 = exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0);
    float _2729 = 0.959999978542327880859375 - _1081;
    float _2731 = 0.959999978542327880859375 - _1082;
    float _2732 = 0.959999978542327880859375 - _1083;
    float _2739 = 1.0 - _2692;
    float _2750 = (0.5 / (((_2707 * ((_2706 * _2739) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2739) + _2692) * _2706))) * _2706;
    float _4947 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2752 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
    uint _2766 = _2431 + 9u;
    float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _924) * 0.949999988079071044921875);
    float _2778 = _2777 * _2777;
    float _2779 = cbLight._m0[_2471].x + _1001;
    float _2780 = cbLight._m0[_2471].y + _1002;
    float _2781 = cbLight._m0[_2471].z + _1003;
    float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
    float _2786 = _2785 * _2779;
    float _2787 = _2785 * _2780;
    float _2788 = _2785 * _2781;
    float _2789 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2471].xyz));
    float _4958 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2792 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
    float _2793 = dot(vec3(_921, _922, _923), vec3(_2786, _2787, _2788));
    float _4969 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2796 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
    float _2797 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2786, _2787, _2788));
    float _4980 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2801 = _2778 * _2778;
    float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
    float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) * 5.0);
    float _2819 = 1.0 - _2778;
    float _2829 = (0.5 / (((_2707 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2819) + _2778) * _2792))) * _2792;
    float _4991 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2831 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
    float _2841 = (((((_2812 * _2729) + _1084) * cbLight._m0[_2766].x) * _2831) * _2454) + ((((cbLight._m0[_2678].x * _2420) * ((_2728 * _2729) + _1084)) * _2752) * _2467);
    float _2842 = (((((_2812 * _2731) + _1086) * cbLight._m0[_2766].y) * _2831) * _2454) + ((((cbLight._m0[_2678].y * _2422) * ((_2728 * _2731) + _1086)) * _2752) * _2467);
    float _2843 = (((((_2812 * _2732) + _1087) * cbLight._m0[_2766].z) * _2831) * _2454) + ((((cbLight._m0[_2678].z * _2424) * ((_2728 * _2732) + _1087)) * _2752) * _2467);
    float _2899;
    float _2901;
    float _2903;
    if (_2507)
    {
        _2899 = _2841;
        _2901 = _2842;
        _2903 = _2843;
    }
    else
    {
        uint _2905 = _2431 + 2u;
        uint _2909 = _2431 + 10u;
        float _2923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2905].w)) * _924) * 0.949999988079071044921875);
        float _2924 = _2923 * _2923;
        float _2925 = cbLight._m0[_2905].x + _1001;
        float _2926 = cbLight._m0[_2905].y + _1002;
        float _2927 = cbLight._m0[_2905].z + _1003;
        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
        float _2932 = _2931 * _2925;
        float _2933 = _2931 * _2926;
        float _2934 = _2931 * _2927;
        float _2935 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2905].xyz));
        float _5002 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _2939 = dot(vec3(_921, _922, _923), vec3(_2932, _2933, _2934));
        float _5013 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _2943 = dot(vec3(cbLight._m0[_2905].xyz), vec3(_2932, _2933, _2934));
        float _5024 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2947 = _2924 * _2924;
        float _2951 = ((_2942 * _2942) * (_2947 + (-1.0))) + 1.0;
        float _2958 = exp2(log2(1.0 - (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0)))) * 5.0);
        float _2965 = 1.0 - _2924;
        float _2975 = (0.5 / (((_2707 * ((_2938 * _2965) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _2965) + _2924) * _2938))) * _2938;
        float _5035 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2977 = (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_2947 / ((_2951 * _2951) * 3.141590118408203125));
        float _2978 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2899 = (((((_2958 * _2729) + _1084) * cbLight._m0[_2909].x) * _2977) * _2978) + _2841;
        _2901 = (((((_2958 * _2731) + _1086) * cbLight._m0[_2909].y) * _2977) * _2978) + _2842;
        _2903 = (((((_2958 * _2732) + _1087) * cbLight._m0[_2909].z) * _2977) * _2978) + _2843;
    }
    float _3009;
    float _3011;
    float _3013;
    if (_2616)
    {
        _3009 = _2899;
        _3011 = _2901;
        _3013 = _2903;
    }
    else
    {
        uint _3020 = _2431 + 3u;
        uint _3024 = _2431 + 11u;
        float _3038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3020].w)) * _924) * 0.949999988079071044921875);
        float _3039 = _3038 * _3038;
        float _3040 = cbLight._m0[_3020].x + _1001;
        float _3041 = cbLight._m0[_3020].y + _1002;
        float _3042 = cbLight._m0[_3020].z + _1003;
        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
        float _3047 = _3046 * _3040;
        float _3048 = _3046 * _3041;
        float _3049 = _3046 * _3042;
        float _3050 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_3020].xyz));
        float _5051 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3053 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
        float _3054 = dot(vec3(_921, _922, _923), vec3(_3047, _3048, _3049));
        float _5062 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3057 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
        float _3058 = dot(vec3(cbLight._m0[_3020].xyz), vec3(_3047, _3048, _3049));
        float _5073 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        float _3062 = _3039 * _3039;
        float _3066 = ((_3057 * _3057) * (_3062 + (-1.0))) + 1.0;
        float _3073 = exp2(log2(1.0 - (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) * 5.0);
        float _3080 = 1.0 - _3039;
        float _3090 = (0.5 / (((_2707 * ((_3053 * _3080) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_2707 * _3080) + _3039) * _3053))) * _3053;
        float _5084 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
        float _3092 = (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3062 / ((_3066 * _3066) * 3.141590118408203125));
        float _3093 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _3009 = (((((_3073 * _2729) + _1084) * cbLight._m0[_3024].x) * _3092) * _3093) + _2899;
        _3011 = (((((_3073 * _2731) + _1086) * cbLight._m0[_3024].y) * _3092) * _3093) + _2901;
        _3013 = (((((_3073 * _2732) + _1087) * cbLight._m0[_3024].z) * _3092) * _3093) + _2903;
    }
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_2429.y == 0u)
    {
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.x;
        uint _3126 = uint((float(_3114.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _3115))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _3115)));
        float _3136 = (log2(_2207 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3137 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        uint _3140 = uint(isnan(14.0) ? _3137 : (isnan(_3137) ? 14.0 : min(_3137, 14.0)));
        uvec4 _3145 = texelFetch(g_lightClusterGridBuffer, int(((_3140 << 2u) + (_3126 << 6u)) >> 2u));
        uint _3146 = _3145.x;
        uint _3147 = _3114.z;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        if (((((1u << ((_3147 >> 4u) & 15u)) + 4294967295u) & _3146) == 0u) || ((_3147 & 240u) == 0u))
        {
            _3271 = 0.0;
            _3273 = 0.0;
            _3275 = 0.0;
            _3277 = 0.0;
            _3279 = 0.0;
            _3281 = 0.0;
        }
        else
        {
            float _3272;
            float _3274;
            float _3276;
            float _3278;
            float _3280;
            float _3282;
            float _3432 = 0.0;
            float _3433 = 0.0;
            float _3434 = 0.0;
            float _3435 = 0.0;
            float _3436 = 0.0;
            float _3437 = 0.0;
            uint _3438 = 0u;
            uint _3447;
            bool _3448;
            for (;;)
            {
                _3447 = texelFetch(g_lightClassification, int((((_3140 << 5u) + (_3126 << 9u)) + (_3438 << 2u)) >> 2u)).x;
                _3448 = _3447 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3448)
                {
                    frontier_phi_71_pred = _3437;
                    frontier_phi_71_pred_1 = _3436;
                    frontier_phi_71_pred_2 = _3435;
                    frontier_phi_71_pred_3 = _3434;
                    frontier_phi_71_pred_4 = _3433;
                    frontier_phi_71_pred_5 = _3432;
                }
                else
                {
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    uint _3583;
                    _3577 = _3432;
                    _3578 = _3433;
                    _3579 = _3434;
                    _3580 = _3435;
                    _3581 = _3436;
                    _3582 = _3437;
                    _3583 = _3447;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    for (;;)
                    {
                        uint _3587 = uint(findLSB(_3583)) + (_3438 << 5u);
                        uint _3584 = (_3583 + 4294967295u) & _3583;
                        uint _3589 = _3587 * 48u;
                        vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3589)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3589 + 3u)).x));
                        uint _3609 = (_3587 * 48u) + 4u;
                        vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3609)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 3u)).x));
                        uint _3628 = (_3587 * 48u) + 8u;
                        vec3 _3639 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3628)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 2u)).x));
                        float _3643 = _3603.x - _2205;
                        float _3644 = _3603.y - _2206;
                        float _3645 = _3603.z - _2207;
                        float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                        float _3649 = inversesqrt(_3646);
                        float _3650 = _3649 * _3643;
                        float _3651 = _3649 * _3644;
                        float _3652 = _3649 * _3645;
                        float _3653 = dot(vec3(_1040, _1043, _1046), vec3(_3650, _3651, _3652));
                        float _3658 = 1.0 - (_3646 * _3603.w);
                        float _5110 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3659 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3660 = sqrt(_3646) * _3622.w;
                        float _3663 = 1.39999997615814208984375 / (_3660 + 1.39999997615814208984375);
                        float _3664 = _3663 * _3663;
                        float _3667 = ((1.0 - _3664) * _3653) + _3664;
                        float _3670 = _3660 * _3660;
                        float _3674 = ((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3659) / ((_3670 * 0.699999988079071044921875) + 1.0);
                        float _3678 = (-0.0) - _2205;
                        float _3679 = (-0.0) - _2206;
                        float _3680 = (-0.0) - _2207;
                        float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                        float _3685 = _3684 * _3678;
                        float _3686 = _3684 * _3679;
                        float _3687 = _3684 * _3680;
                        float _3694 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                        float _3695 = 1.0 - _1115;
                        float _3702 = sqrt(1.0 - ((1.0 - (_3695 * _3695)) * (1.0 - (_3694 * _3694))));
                        float _3703 = _3702 * _3702;
                        float _3704 = _3703 * _3703;
                        float _3705 = _3685 + _3650;
                        float _3706 = _3686 + _3651;
                        float _3707 = _3687 + _3652;
                        float _3711 = inversesqrt(dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707)));
                        float _3715 = dot(vec3(_1040, _1043, _1046), vec3(_3685, _3686, _3687));
                        float _5126 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3718 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                        float _3719 = dot(vec3(_1040, _1043, _1046), vec3(_3711 * _3705, _3711 * _3706, _3711 * _3707));
                        float _5137 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3722 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                        float _3726 = ((_3722 * _3722) * (_3704 + (-1.0))) + 1.0;
                        float _3727 = _3663 * _3703;
                        float _3728 = _3727 * _3727;
                        float _3731 = ((1.0 - _3728) * _3653) + _3728;
                        float _5148 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3732 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                        float _3733 = 1.0 - _3703;
                        float _3743 = (0.5 / (((_3732 * ((_3718 * _3733) + _3703)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3703) * _3718))) * _3732;
                        float _5159 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3754 = (((_3704 * 3.1415927410125732421875) * (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0)))) / ((_3726 * _3726) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125))) * _3659;
                        _3507 = (_3674 * _3622.x) + _3580;
                        _3508 = (_3674 * _3622.y) + _3581;
                        _3509 = (_3674 * _3622.z) + _3582;
                        _3504 = (_3754 * _3639.x) + _3577;
                        _3505 = (_3754 * _3639.y) + _3578;
                        _3506 = (_3754 * _3639.z) + _3579;
                        if (_3584 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3577 = _3504;
                            _3578 = _3505;
                            _3579 = _3506;
                            _3580 = _3507;
                            _3581 = _3508;
                            _3582 = _3509;
                            _3583 = _3584;
                        }
                    }
                    frontier_phi_71_pred = _3509;
                    frontier_phi_71_pred_1 = _3508;
                    frontier_phi_71_pred_2 = _3507;
                    frontier_phi_71_pred_3 = _3506;
                    frontier_phi_71_pred_4 = _3505;
                    frontier_phi_71_pred_5 = _3504;
                }
                _3282 = frontier_phi_71_pred;
                _3280 = frontier_phi_71_pred_1;
                _3278 = frontier_phi_71_pred_2;
                _3276 = frontier_phi_71_pred_3;
                _3274 = frontier_phi_71_pred_4;
                _3272 = frontier_phi_71_pred_5;
                uint _3439 = _3438 + 1u;
                if (_3439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3432 = _3272;
                    _3433 = _3274;
                    _3434 = _3276;
                    _3435 = _3278;
                    _3436 = _3280;
                    _3437 = _3282;
                    _3438 = _3439;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3271 = _3272;
            _3273 = _3274;
            _3275 = _3276;
            _3277 = _3278;
            _3279 = _3280;
            _3281 = _3282;
        }
        uvec4 _3285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3286 = _3285.z;
        uint _3288 = (_3286 >> 8u) & 15u;
        float _3400;
        float _3402;
        float _3404;
        float _3406;
        float _3408;
        float _3410;
        if (((4294967295u << _3288) & _3146) == 0u)
        {
            _3400 = _3271;
            _3402 = _3273;
            _3404 = _3275;
            _3406 = _3277;
            _3408 = _3279;
            _3410 = _3281;
        }
        else
        {
            float _3425 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
            float _3426 = _3425 * _2205;
            float _3427 = _3425 * _2206;
            float _3428 = _3425 * _2207;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3288 < ((_3286 >> 12u) & 15u))
            {
                float _3401;
                float _3403;
                float _3405;
                float _3407;
                float _3409;
                float _3411;
                float _3560 = _3271;
                float _3561 = _3273;
                float _3562 = _3275;
                float _3563 = _3277;
                float _3564 = _3279;
                float _3565 = _3281;
                uint _3566 = _3288;
                uint _3575;
                bool _3576;
                for (;;)
                {
                    _3575 = texelFetch(g_lightClassification, int((((_3140 << 5u) + (_3126 << 9u)) + (_3566 << 2u)) >> 2u)).x;
                    _3576 = _3575 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3576)
                    {
                        frontier_phi_82_pred = _3565;
                        frontier_phi_82_pred_1 = _3564;
                        frontier_phi_82_pred_2 = _3563;
                        frontier_phi_82_pred_3 = _3562;
                        frontier_phi_82_pred_4 = _3561;
                        frontier_phi_82_pred_5 = _3560;
                    }
                    else
                    {
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _4062;
                        float _4063;
                        float _4064;
                        float _4065;
                        float _4066;
                        float _4067;
                        float _3781 = _3560;
                        float _3782 = _3561;
                        float _3783 = _3562;
                        float _3784 = _3563;
                        float _3785 = _3564;
                        float _3786 = _3565;
                        uint _3787 = _3575;
                        uint _3788;
                        vec4 _3813;
                        float _3814;
                        vec4 _3829;
                        vec3 _3841;
                        vec4 _3856;
                        vec4 _3871;
                        float _3918;
                        bool _3919;
                        for (;;)
                        {
                            uint _3798 = ((_3566 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3787));
                            _3788 = (_3787 + 4294967295u) & _3787;
                            uint _3800 = _3798 * 40u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            _3814 = _3813.w;
                            uint _3816 = (_3798 * 40u) + 4u;
                            _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            uint _3831 = (_3798 * 40u) + 8u;
                            _3841 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x));
                            uint _3843 = (_3798 * 40u) + 16u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            uint _3858 = (_3798 * 40u) + 20u;
                            _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3874 = (_3798 * 40u) + 24u;
                            vec4 _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            uint _3893 = (_3798 * 40u) + 28u;
                            vec4 _3906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 3u)).x));
                            _3918 = fma(_2207, _3906.z, fma(_2206, _3906.y, _3906.x * _2205)) + _3906.w;
                            _3919 = !((fma(_2207, _3887.z, fma(_2206, _3887.y, _3887.x * _2205)) + _3887.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3919)
                            {
                                float _3946 = _3813.x - _2205;
                                float _3947 = _3813.y - _2206;
                                float _3948 = _3813.z - _2207;
                                float _3949 = dot(vec3(_3946, _3947, _3948), vec3(_3946, _3947, _3948));
                                float _3952 = inversesqrt(_3949);
                                float _3953 = _3952 * _3946;
                                float _3954 = _3952 * _3947;
                                float _3955 = _3952 * _3948;
                                float _3959 = 1.0 - (_3949 / (_3814 * _3814));
                                float _5170 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3960 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3964 = sqrt(_3949) * _3829.w;
                                float _3966 = 1.39999997615814208984375 / (_3964 + 1.39999997615814208984375);
                                float _3967 = _3966 * _3966;
                                float _3970 = ((1.0 - _3967) * dot(vec3(_3953, _3954, _3955), vec3(_1040, _1043, _1046))) + _3967;
                                float _3973 = _3964 * _3964;
                                float _3977 = (fma(_2207, _3856.z, fma(_2206, _3856.y, _3856.x * _2205)) + _3856.w) / _3918;
                                float _3978 = (fma(_2207, _3871.z, fma(_2206, _3871.y, _3871.x * _2205)) + _3871.w) / _3918;
                                float _3982 = 1.0 - dot(vec2(_3977, _3978), vec2(_3977, _3978));
                                float _5186 = isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0));
                                float _3983 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
                                float _3984 = _3983 * (((isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0))) * _3960) / ((_3973 * 0.699999988079071044921875) + 1.0));
                                float _3996 = exp2(log2(1.0 / ((_3973 * 3.5) + 5.0)) * 0.25);
                                float _3997 = 1.0 - _1115;
                                float _4004 = sqrt(1.0 - ((1.0 - (_3997 * _3997)) * (1.0 - (_3996 * _3996))));
                                float _4005 = _4004 * _4004;
                                float _4006 = _4005 * _4005;
                                float _4007 = _3953 - _3426;
                                float _4008 = _3954 - _3427;
                                float _4009 = _3955 - _3428;
                                float _4013 = inversesqrt(dot(vec3(_4007, _4008, _4009), vec3(_4007, _4008, _4009)));
                                float _4017 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3426, (-0.0) - _3427, (-0.0) - _3428));
                                float _5197 = isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0));
                                float _4020 = isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0));
                                float _4021 = dot(vec3(_1040, _1043, _1046), vec3(_4013 * _4007, _4013 * _4008, _4013 * _4009));
                                float _5208 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                                float _4024 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
                                float _4028 = ((_4024 * _4024) * (_4006 + (-1.0))) + 1.0;
                                float _4029 = _3966 * _4005;
                                float _4030 = _4029 * _4029;
                                float _4036 = ((1.0 - _4030) * dot(vec3(_1040, _1043, _1046), vec3(_3953, _3954, _3955))) + _4030;
                                float _5219 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4037 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
                                float _4038 = 1.0 - _4005;
                                float _4048 = (0.5 / (((_4037 * ((_4020 * _4038) + _4005)) + 9.9999999392252902907785028219223e-09) + (((_4037 * _4038) + _4005) * _4020))) * _4037;
                                float _5230 = isnan(0.0) ? _4048 : (isnan(_4048) ? 0.0 : max(_4048, 0.0));
                                float _4058 = (_3983 * _3960) * (((_4006 * 3.1415927410125732421875) * (isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0)))) / ((_4028 * _4028) * ((_3973 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3984 * _3829.z;
                                frontier_phi_88_pred_1 = _3984 * _3829.y;
                                frontier_phi_88_pred_2 = _3984 * _3829.x;
                                frontier_phi_88_pred_3 = _4058 * _3841.z;
                                frontier_phi_88_pred_4 = _4058 * _3841.y;
                                frontier_phi_88_pred_5 = _4058 * _3841.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4067 = frontier_phi_88_pred;
                            _4066 = frontier_phi_88_pred_1;
                            _4065 = frontier_phi_88_pred_2;
                            _4064 = frontier_phi_88_pred_3;
                            _4063 = frontier_phi_88_pred_4;
                            _4062 = frontier_phi_88_pred_5;
                            _3771 = _4065 + _3784;
                            _3772 = _4066 + _3785;
                            _3773 = _4067 + _3786;
                            _3768 = _4062 + _3781;
                            _3769 = _4063 + _3782;
                            _3770 = _4064 + _3783;
                            if (_3788 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3781 = _3768;
                                _3782 = _3769;
                                _3783 = _3770;
                                _3784 = _3771;
                                _3785 = _3772;
                                _3786 = _3773;
                                _3787 = _3788;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3773;
                        frontier_phi_82_pred_1 = _3772;
                        frontier_phi_82_pred_2 = _3771;
                        frontier_phi_82_pred_3 = _3770;
                        frontier_phi_82_pred_4 = _3769;
                        frontier_phi_82_pred_5 = _3768;
                    }
                    _3411 = frontier_phi_82_pred;
                    _3409 = frontier_phi_82_pred_1;
                    _3407 = frontier_phi_82_pred_2;
                    _3405 = frontier_phi_82_pred_3;
                    _3403 = frontier_phi_82_pred_4;
                    _3401 = frontier_phi_82_pred_5;
                    uint _3567 = _3566 + 1u;
                    if (_3567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3560 = _3401;
                        _3561 = _3403;
                        _3562 = _3405;
                        _3563 = _3407;
                        _3564 = _3409;
                        _3565 = _3411;
                        _3566 = _3567;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3407;
                frontier_phi_63_64_ladder_1 = _3411;
                frontier_phi_63_64_ladder_2 = _3409;
                frontier_phi_63_64_ladder_3 = _3405;
                frontier_phi_63_64_ladder_4 = _3403;
                frontier_phi_63_64_ladder_5 = _3401;
            }
            else
            {
                frontier_phi_63_64_ladder = _3277;
                frontier_phi_63_64_ladder_1 = _3281;
                frontier_phi_63_64_ladder_2 = _3279;
                frontier_phi_63_64_ladder_3 = _3275;
                frontier_phi_63_64_ladder_4 = _3273;
                frontier_phi_63_64_ladder_5 = _3271;
            }
            _3400 = frontier_phi_63_64_ladder_5;
            _3402 = frontier_phi_63_64_ladder_4;
            _3404 = frontier_phi_63_64_ladder_3;
            _3406 = frontier_phi_63_64_ladder;
            _3408 = frontier_phi_63_64_ladder_2;
            _3410 = frontier_phi_63_64_ladder_1;
        }
        float _3415 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _3159 = (_3415 * _3406) + _2671;
        _3161 = (_3415 * _3408) + _2673;
        _3163 = (_3415 * _3410) + _2675;
        _3165 = ((_3400 * _1084) * _3415) + _3009;
        _3167 = ((_3402 * _1086) * _3415) + _3011;
        _3169 = ((_3404 * _1087) * _3415) + _3013;
    }
    else
    {
        _3159 = _2671;
        _3161 = _2673;
        _3163 = _2675;
        _3165 = _3009;
        _3167 = _3011;
        _3169 = _3013;
    }
    uint _3175 = _1060 + uint(cbMatDynParam._m0[0u].w);
    float _3181 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3187 = (((((_3181 * cbMtdParam._m0[14u].x) * _779.x) * _802) * _876) * (((1.0 - _855) * cbMtdParam._m0[20u].w) + _855)) * cbInstanceData._m0[_3175].x;
    float _3193 = (((((_3181 * cbMtdParam._m0[14u].y) * _779.y) * _802) * _876) * (((1.0 - _857) * cbMtdParam._m0[20u].w) + _857)) * cbInstanceData._m0[_3175].y;
    float _3199 = (((((_3181 * cbMtdParam._m0[14u].z) * _779.z) * _802) * _876) * (((1.0 - _859) * cbMtdParam._m0[20u].w) + _859)) * cbInstanceData._m0[_3175].z;
    float _5246 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _5257 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _5268 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _3216 = (((isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0))) * (_3159 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1099))) + ((_3165 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1939)) * cbPerFrame._m0[3u].x)) + _3187;
    float _3218 = (_3193 + ((_3167 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1939)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5257 : (isnan(_5257) ? 1.0 : min(_5257, 1.0))) * (_3161 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1099)));
    float _3220 = (_3199 + ((_3169 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1939)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0))) * (_3163 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1099)));
    float _3221 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
    float _3222 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
    float _3223 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
    float _3229 = cbMtdParam._m0[2u].x * _3187;
    float _3230 = cbMtdParam._m0[2u].y * _3193;
    float _3231 = cbMtdParam._m0[2u].z * _3199;
    float _5294 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3233 = isnan(1.0) ? _5294 : (isnan(_5294) ? 1.0 : min(_5294, 1.0));
    uint _3234 = _1059 + 6u;
    float _3242 = _1021 / cbSceneParam._m0[86u].x;
    float _3243 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _3257 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3242, _3243, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3259 = _3257.x;
    float _3260 = _3257.y;
    float _3261 = _3257.z;
    float _3262 = _3257.w;
    float _3333;
    float _3335;
    float _3337;
    float _3339;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _3296 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _3297 = _3296 / _944;
        float _3308 = _3297 * _994;
        float _3309 = _995 * _3297;
        float _3310 = (-0.0) - _3309;
        float _3311 = _3297 * _996;
        float _3313 = (cbSceneParam._m0[77u].w * _3310) / _3296;
        float _3314 = _3313 + cbSceneParam._m0[79u].w;
        float _3315 = cbSceneParam._m0[79u].w - _3309;
        float _3321 = sqrt(((_3308 * _3308) + (_3309 * _3309)) + (_3311 * _3311));
        float _3324 = (1.0 - (cbSceneParam._m0[77u].w / _3296)) * _3321;
        float _3329 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3331 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3517;
        if (abs((_3310 - _3313) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3517 = ((((_3314 > 0.0) ? exp2(_3329 * _3314) : (2.0 - exp2(_3331 * _3314))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3324;
        }
        else
        {
            float _3461 = 1.0 / cbSceneParam._m0[80u].x;
            float _3462 = isnan(_3315) ? _3314 : (isnan(_3314) ? _3315 : max(_3314, _3315));
            float _3463 = isnan(_3315) ? _3314 : (isnan(_3314) ? _3315 : min(_3314, _3315));
            float _3472 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : min(_3462, 0.0));
            float _3473 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : min(_3463, 0.0));
            _3517 = ((abs(_3321 / _3310) * cbSceneParam._m0[80u].y) * ((((_3472 - _3473) * 2.0) - ((exp2(_3329 * (isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0)))) - exp2(_3329 * (isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))))) * _3461)) - ((exp2(_3331 * _3472) - exp2(_3331 * _3473)) * _3461))) + (_3324 * cbSceneParam._m0[80u].z);
        }
        vec4 _3519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3242, _3243, 1.0), 0.0);
        float _3528 = exp2((_3517 * (-1.44269502162933349609375)) * (1.0 - _3519.w));
        float _3529 = log2(_3528);
        float _3545 = log2(_3262);
        _3333 = (exp2(_3545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].x)) * _3519.x) / cbSceneParam._m0[78u].x)) + _3259;
        _3335 = (exp2(_3545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].y)) * _3519.y) / cbSceneParam._m0[78u].y)) + _3260;
        _3337 = (exp2(_3545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3529 * cbSceneParam._m0[78u].z)) * _3519.z) / cbSceneParam._m0[78u].z)) + _3261;
        _3339 = _3528 * _3262;
    }
    else
    {
        _3333 = _3259;
        _3335 = _3260;
        _3337 = _3261;
        _3339 = _3262;
    }
    bool _3555;
    vec4 _3349;
    vec4 _3371;
    float _3373;
    float _3377;
    float _3378;
    float _3379;
    float _3382;
    float _3385;
    float _3388;
    float _3389;
    bool _3399;
    for (;;)
    {
        _3349 = cbMatDynParam._m0[0u];
        float _3351 = roundEven(_3349.y);
        bool _3352 = _3351 == 3.0;
        float _3353 = log2(_3339);
        float _3357 = exp2(_3353 * cbSceneParam._m0[78u].x);
        float _3358 = exp2(_3353 * cbSceneParam._m0[78u].y);
        float _3359 = exp2(_3353 * cbSceneParam._m0[78u].z);
        float _3360 = _3357 * _3221;
        float _3361 = _3358 * _3222;
        float _3362 = _3359 * _3223;
        float _3369 = _1010 + (-0.5);
        _3371 = cbMtdParam._m0[1u];
        _3373 = _3371.y * _3369;
        float _3376 = (_3351 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3377 = _3376 * (_3352 ? _3360 : (_3360 + (cbSceneParam._m0[72u].w * _3333)));
        _3378 = _3376 * (_3352 ? _3361 : (_3361 + (cbSceneParam._m0[72u].w * _3335)));
        _3379 = _3376 * (_3352 ? _3362 : (_3362 + (cbSceneParam._m0[72u].w * _3337)));
        _3382 = ((_3229 * _3233) * _3357) * _3376;
        _3385 = ((_3230 * _3233) * _3358) * _3376;
        _3388 = ((_3231 * _3233) * _3359) * _3376;
        _3389 = _3369 * 0.999000012874603271484375;
        _3399 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3399)
        {
            if ((cbInstanceData._m0[_1059 + 7u].x + _3389) < 0.5)
            {
                _3555 = true;
                break;
            }
        }
        uint _3496 = _1060 + uint(_3349.w);
        if ((cbInstanceData._m0[_3496].w < 1.0) && ((cbInstanceData._m0[_3496].w + _3389) < 0.5))
        {
            _3555 = true;
            break;
        }
        if ((_3373 + 1.0) < _3371.x)
        {
            _3555 = true;
            break;
        }
        _3555 = false;
        break;
    }
    float _3759;
    if (_3555)
    {
        discard_state = true;
        _3759 = 0.0;
    }
    else
    {
        _3759 = cbInstanceData._m0[_3234].w;
    }
    SV_Target.x = _3377;
    SV_Target.y = _3378;
    SV_Target.z = _3379;
    SV_Target.w = _3759;
    SV_Target_1.x = _3382;
    SV_Target_1.y = _3385;
    SV_Target_1.z = _3388;
    SV_Target_1.w = cbInstanceData._m0[_3234].w;
    discard_exit();
}


