#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1466;
float _3924;
float _3925;
float _3926;
float _3927;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _301 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _320 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _348 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _358 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _320.x) * 2.0) - _348)) + 1.0;
    float _3936 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _366 = (_359 * ((_301.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _367 = (_359 * ((_301.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _368 = (_359 * ((_301.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _386 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _399 = (((((1.0 - _320.y) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3947 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _407 = (((_386.x * cbMtdParam._m0[12u].x) - _366) * _400) + _366;
    float _408 = (_400 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _409 = (_400 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _427 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _440 = (((((1.0 - _320.z) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3958 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _448 = (((_427.x * cbMtdParam._m0[13u].x) - _407) * _441) + _407;
    float _449 = (_441 * ((_427.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _450 = (_441 * ((_427.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _475 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _494 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _497 = _494.x + 0.00999999977648258209228515625;
    float _504 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _497)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3969 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _512 = (_505 * ((_475.x * cbMtdParam._m0[16u].x) - _448)) + _448;
    float _513 = (_505 * ((_475.y * cbMtdParam._m0[16u].y) - _449)) + _449;
    float _514 = (_505 * ((_475.z * cbMtdParam._m0[16u].z) - _450)) + _450;
    vec4 _527 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _547 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _529) * _359) + _529;
    float _564 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _547) * _400) + _547;
    float _581 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _564) * _441) + _564;
    float _583 = _581 - (_581 * TEXCOORD_8);
    vec4 _596 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    vec4 _633 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _644 = ((_633.x - _619) * _359) + _619;
    float _645 = ((_633.y - _620) * _359) + _620;
    float _646 = ((_633.z - _621) * _359) + _621;
    vec4 _659 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _670 = ((_659.x - _644) * _400) + _644;
    float _671 = ((_659.y - _645) * _400) + _645;
    float _672 = ((_659.z - _646) * _400) + _646;
    vec4 _685 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _698 = ((_685.z - _672) * _441) + _672;
    float _701 = ((((_685.x - _670) * _441) + _670) * 2.0) + (-1.0);
    float _702 = ((((_685.y - _671) * _441) + _671) * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3980 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    float _713 = (((_596.z - _698) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _698;
    vec4 _743 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _757 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3991 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _766 = (((_758 * _758) * (3.0 - (_758 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _774 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _782 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4002 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _787 = (_783 * _783) * (3.0 - (_783 * 2.0));
    float _788 = _787 * cbMtdParam._m0[22u].x;
    float _789 = _787 * cbMtdParam._m0[22u].y;
    float _790 = sin(_774);
    float _791 = cos(_774);
    float _792 = TEXCOORD.z - _788;
    float _793 = TEXCOORD.w - _789;
    vec4 _813 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_788 + fma(_793, (-0.0) - _790, _792 * _791))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_793, _791, _792 * _790) + _789)) + cbTextureTilingScale._m0[2u].w));
    float _819 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _813.x;
    float _821 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _813.y;
    float _823 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _813.z;
    float _839 = (TEXCOORD_5.x - ((_497 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4013 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    vec4 _853 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _869 = (((((_596.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _701) + (((_853.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _871 = (((((_596.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _702) + (((_853.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _874 = fma(_708, _245 * NORMAL.x, fma(_871, _252 * TANGENT.x, (_238 * _230) * _869));
    float _877 = fma(_708, _245 * NORMAL.y, fma(_871, _252 * TANGENT.y, (_238 * _231) * _869));
    float _880 = fma(_708, _245 * NORMAL.z, fma(_871, _252 * TANGENT.z, (_238 * _232) * _869));
    float _884 = inversesqrt(dot(vec3(_874, _877, _880), vec3(_874, _877, _880)));
    float _885 = _884 * _874;
    float _886 = _884 * _877;
    float _887 = _884 * _880;
    float _4024 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _888 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4046 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4057 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4068 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _892 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _908 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    vec4 _972 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _974 = _972.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1146 = sqrt(((_958 * _958) + (_959 * _959)) + (_960 * _960));
        float _1152 = (cbMatDynParam._m0[5u].x * _1146) + cbMatDynParam._m0[5u].y;
        float _4079 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1157 = (cbMatDynParam._m0[5u].z * _1146) + cbMatDynParam._m0[5u].w;
        float _4090 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) - _1153)) + _1153) < ((_974 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1005 = fma(_887, cbSceneParam._m0[5u].z, fma(_886, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _885));
    float _1008 = fma(_887, cbSceneParam._m0[6u].z, fma(_886, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _885));
    float _1011 = fma(_887, cbSceneParam._m0[7u].z, fma(_886, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _885));
    uint _1024 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1025 = _1024 + 9u;
    uint _1026 = _1025 + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4101 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1038 = 1.0 - _892;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _892;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _892;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _892;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1064 = _1061.x * TEXCOORD_5.w;
    float _1065 = dot(vec3(_885, _886, _887), vec3(_965, _966, _967));
    float _1068 = _1065 * 2.0;
    float _1072 = (_1068 * _885) - _965;
    float _1073 = (_1068 * _886) - _966;
    float _1074 = (_1068 * _887) - _967;
    float _1078 = abs(dot(vec3(_965, _966, _967), vec3(_885, _886, _887)));
    float _4134 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1080 = sqrt(_888);
    float _1092 = exp2((_1080 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1080 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1080 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1080;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1465;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1190 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1194 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1198 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1223 = _1127 + _885;
        float _1224 = _1131 + _886;
        float _1225 = _1135 + _887;
        float _1235 = fma(_1225, cbModelParam._m0[26u].z, fma(_1224, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223)) - _1190;
        float _1236 = fma(_1225, cbModelParam._m0[27u].z, fma(_1224, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223)) - _1194;
        float _1237 = fma(_1225, cbModelParam._m0[28u].z, fma(_1224, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223)) - _1198;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1190 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1194 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[34u].z) + ((((((_1198 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1293 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1259.x + (-0.5));
        float _1295 = _1293 * (_1259.y + (-0.5));
        float _1296 = _1293 * (_1259.z + (-0.5));
        float _1303 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1266.x + (-0.5));
        float _1305 = _1303 * (_1266.y + (-0.5));
        float _1306 = _1303 * (_1266.z + (-0.5));
        float _1313 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1273.x + (-0.5));
        float _1315 = _1313 * (_1273.y + (-0.5));
        float _1316 = _1313 * (_1273.z + (-0.5));
        float _1323 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1280.x + (-0.5));
        float _1325 = _1323 * (_1280.y + (-0.5));
        float _1326 = _1323 * (_1280.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1347 = (dot(vec3(_885, _886, _887), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1357 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4182 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1359 + 1.0))) + _1364) * _1327;
        float _1374 = _1295 * 0.5;
        float _1375 = _1305 * 0.5;
        float _1376 = _1315 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_885, _886, _887), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4215 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1401 + 1.0))) + _1406) * _1328;
        float _1416 = _1296 * 0.5;
        float _1417 = _1306 * 0.5;
        float _1418 = _1316 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_885, _886, _887), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4248 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1443 + 1.0))) + _1448) * _1329;
        _1465 = _1296;
        _1467 = _1295;
        _1468 = _1294;
        _1469 = _1306;
        _1470 = _1305;
        _1471 = _1304;
        _1472 = _1316;
        _1473 = _1315;
        _1474 = _1314;
        _1475 = _1329;
        _1476 = _1328;
        _1477 = _1327;
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1466;
        _1467 = _1466;
        _1468 = _1466;
        _1469 = _1466;
        _1470 = _1466;
        _1471 = _1466;
        _1472 = _1466;
        _1473 = _1466;
        _1474 = _1466;
        _1475 = _1466;
        _1476 = _1466;
        _1477 = _1466;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1509 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1513 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1517 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1540 = _1127 + _885;
        float _1541 = _1131 + _886;
        float _1542 = _1135 + _887;
        float _1552 = fma(_1542, cbModelParam._m0[30u].z, fma(_1541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1540)) - _1509;
        float _1553 = fma(_1542, cbModelParam._m0[31u].z, fma(_1541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1540)) - _1513;
        float _1554 = fma(_1542, cbModelParam._m0[32u].z, fma(_1541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1540)) - _1517;
        float _1558 = inversesqrt(dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554)));
        float _1571 = ((_1558 * _1552) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1509 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1558 * _1553) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1513 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1558 * _1554) / cbModelParam._m0[35u].z) + ((((((_1517 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        float _1608 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1575.x + (-0.5));
        float _1610 = _1608 * (_1575.y + (-0.5));
        float _1611 = _1608 * (_1575.z + (-0.5));
        float _1618 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1582.x + (-0.5));
        float _1620 = _1618 * (_1582.y + (-0.5));
        float _1621 = _1618 * (_1582.z + (-0.5));
        float _1628 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1589.x + (-0.5));
        float _1630 = _1628 * (_1589.y + (-0.5));
        float _1631 = _1628 * (_1589.z + (-0.5));
        float _1638 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1596.x + (-0.5));
        float _1640 = _1638 * (_1596.y + (-0.5));
        float _1641 = _1638 * (_1596.z + (-0.5));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = _1609 * 0.5;
        float _1646 = _1619 * 0.5;
        float _1647 = _1629 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_885, _886, _887), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4311 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1672 + 1.0))) + _1677) * _1642;
        float _1687 = _1610 * 0.5;
        float _1688 = _1620 * 0.5;
        float _1689 = _1630 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_885, _886, _887), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4344 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1714 + 1.0))) + _1719) * _1643;
        float _1729 = _1611 * 0.5;
        float _1730 = _1621 * 0.5;
        float _1731 = _1631 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_885, _886, _887), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4377 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1756 + 1.0))) + _1761) * _1644;
        _1778 = _1611;
        _1779 = _1610;
        _1780 = _1609;
        _1781 = _1621;
        _1782 = _1620;
        _1783 = _1619;
        _1784 = _1631;
        _1785 = _1630;
        _1786 = _1629;
        _1787 = _1644;
        _1788 = _1643;
        _1789 = _1642;
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
    }
    else
    {
        _1778 = _1466;
        _1779 = _1466;
        _1780 = _1466;
        _1781 = _1466;
        _1782 = _1466;
        _1783 = _1466;
        _1784 = _1466;
        _1785 = _1466;
        _1786 = _1466;
        _1787 = _1466;
        _1788 = _1466;
        _1789 = _1466;
        _1790 = 0.0;
        _1791 = 0.0;
        _1792 = 0.0;
    }
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1478)) + _1478;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1479)) + _1479;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1480)) + _1480;
    float _1825 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1802));
    float _1846 = _1072 * 0.5;
    float _1847 = _1073 * 0.5;
    float _1848 = _1074 * 0.5;
    float _1849 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1852 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1855 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1889;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1862 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1465, _1469, _1472, _1475));
        float _1866 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1870 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1877 = dot(vec4(cbModelParam._m0[39u]), vec4(_1846, _1847, _1848, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1900;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1891 = dot(vec4(cbModelParam._m0[40u]), vec4(_1846, _1847, _1848, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1904 = (_1900 * cbModelParam._m0[1u].x) + (_1889 * (1.0 - cbModelParam._m0[1u].x));
    float _1914 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1914 : min(cbModelParam._m0[25u].z, _1914));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1962 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1966 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1970 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1973 = fma(_1074, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072));
        float _1976 = fma(_1074, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072));
        float _1979 = fma(_1074, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072));
        float _2007;
        if (_1973 > 0.0)
        {
            _2007 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2007 = frontier_phi_17_15_ladder;
        }
        float _2230;
        if (_1976 > 0.0)
        {
            _2230 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2230 = frontier_phi_26_22_ladder;
        }
        float _2487;
        if (_1979 > 0.0)
        {
            _2487 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2487 = frontier_phi_38_33_ladder;
        }
        float _2489 = isnan(_2230) ? _2007 : (isnan(_2007) ? _2230 : min(_2007, _2230));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1973) + _1962;
        float _2495 = (_2490 * _1976) + _1966;
        float _2496 = (_2490 * _1979) + _1970;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1915);
            frontier_phi_16_38_ladder = _2624.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2624.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2624.x * cbModelParam._m0[1u].y;
        }
        _1995 = frontier_phi_16_38_ladder_2;
        _1997 = frontier_phi_16_38_ladder_1;
        _1999 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1072, _1073, _1074), _1915);
        _1995 = _1983.x * cbModelParam._m0[1u].y;
        _1997 = _1983.y * cbModelParam._m0[1u].y;
        _1999 = _1983.z * cbModelParam._m0[1u].y;
    }
    float _2003 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2003 : min(cbModelParam._m0[25u].w, _2003));
    float _2093;
    float _2095;
    float _2097;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2057 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2061 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2065 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2068 = fma(_1074, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072));
        float _2071 = fma(_1074, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072));
        float _2074 = fma(_1074, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072));
        float _2235;
        if (_2068 > 0.0)
        {
            _2235 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2235 = frontier_phi_28_24_ladder;
        }
        float _2514;
        if (_2071 > 0.0)
        {
            _2514 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2514 = frontier_phi_40_35_ladder;
        }
        float _2727;
        if (_2074 > 0.0)
        {
            _2727 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2727 = frontier_phi_49_46_ladder;
        }
        float _2729 = isnan(_2514) ? _2235 : (isnan(_2235) ? _2514 : min(_2235, _2514));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _2068) + _2057;
        float _2735 = (_2730 * _2071) + _2061;
        float _2736 = (_2730 * _2074) + _2065;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _2004);
            frontier_phi_25_49_ladder = _2980.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2980.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2980.x * cbModelParam._m0[1u].z;
        }
        _2093 = frontier_phi_25_49_ladder_2;
        _2095 = frontier_phi_25_49_ladder_1;
        _2097 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1072, _1073, _1074), _2004);
        _2093 = _2077.x * cbModelParam._m0[1u].z;
        _2095 = _2077.y * cbModelParam._m0[1u].z;
        _2097 = _2077.z * cbModelParam._m0[1u].z;
    }
    float _2110 = (((_1098 * _1049) + _1099) * _1064) * ((cbModelParam._m0[1u].w * (_2093 - _1995)) + _1995);
    float _2112 = (((_1098 * _1051) + _1099) * _1064) * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2114 = (((_1098 * _1052) + _1099) * _1064) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2117 = fma(_2114, cbSceneParam._m0[89u].z, fma(_2112, cbSceneParam._m0[89u].y, _2110 * cbSceneParam._m0[89u].x));
    float _2120 = fma(_2114, cbSceneParam._m0[90u].z, fma(_2112, cbSceneParam._m0[90u].y, _2110 * cbSceneParam._m0[90u].x));
    float _2123 = fma(_2114, cbSceneParam._m0[91u].z, fma(_2112, cbSceneParam._m0[91u].y, _2110 * cbSceneParam._m0[91u].x));
    vec4 _2131 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_985, _986));
    float _2133 = _2131.w;
    float _2145 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2133);
    float _2146 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2133);
    float _2147 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2133);
    uvec4 _2151 = floatBitsToUint(cbInstanceData._m0[_1024 + 5u]);
    uint _2153 = _2151.x * 14u;
    uint _2154 = _2153 + 13u;
    float _2161 = _1064 + (-1.0);
    float _2166 = (cbLight._m0[_2154].x * _2161) + 1.0;
    float _2167 = (cbLight._m0[_2154].y * _2161) + 1.0;
    float _2168 = (cbLight._m0[_2154].z * _2161) + 1.0;
    float _2169 = (cbLight._m0[_2154].w * _2161) + 1.0;
    uint _2170 = _2153 + 5u;
    float _2176 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2180 = _2153 + 4u;
    float _2189 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
    uint _2193 = _2153 | 1u;
    float _2204 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_885, _886, _887));
    float _2207 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_885, _886, _887));
    float _4513 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _4524 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2212 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2214 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2221 = ((cbLight._m0[_2170].x * _2176) * _2214) + (((cbLight._m0[_2180].x * _2145) * _2189) * _2212);
    float _2222 = ((_2176 * cbLight._m0[_2170].y) * _2214) + (((cbLight._m0[_2180].y * _2146) * _2189) * _2212);
    float _2223 = ((_2176 * cbLight._m0[_2170].z) * _2214) + (((cbLight._m0[_2180].z * _2147) * _2189) * _2212);
    uvec4 _2227 = floatBitsToUint(cbLight._m0[_2153 + 12u]);
    bool _2229 = _2227.x == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2229)
    {
        _2240 = _2221;
        _2242 = _2222;
        _2244 = _2223;
    }
    else
    {
        uint _2248 = _2153 + 6u;
        float _2264 = (dot(vec3(cbLight._m0[_2153 + 2u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4535 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2267 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2240 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2221;
        _2242 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2222;
        _2244 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2223;
    }
    bool _2247 = _2227.y == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2247)
    {
        _2285 = _2240;
        _2287 = _2242;
        _2289 = _2244;
    }
    else
    {
        uint _2458 = _2153 + 7u;
        float _2474 = (dot(vec3(cbLight._m0[_2153 + 3u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2475 = _2474 * _2474;
        float _4551 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2476 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2477 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2285 = (((cbLight._m0[_2458].x * 0.3183098733425140380859375) * _2476) * _2477) + _2240;
        _2287 = (((cbLight._m0[_2458].y * 0.3183098733425140380859375) * _2476) * _2477) + _2242;
        _2289 = (((cbLight._m0[_2458].z * 0.3183098733425140380859375) * _2476) * _2477) + _2244;
    }
    uint _2292 = _2153 + 8u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _888) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2153].x + _965;
    float _2308 = cbLight._m0[_2153].y + _966;
    float _2309 = cbLight._m0[_2153].z + _967;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2153].xyz));
    float _4567 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _4578 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _2321 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2322 = dot(vec3(_885, _886, _887), vec3(_2314, _2315, _2316));
    float _4589 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2314, _2315, _2316));
    float _4600 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2306 * _2306;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
    float _2343 = 0.959999978542327880859375 - _1046;
    float _2345 = 0.959999978542327880859375 - _1047;
    float _2346 = 0.959999978542327880859375 - _1048;
    float _2353 = 1.0 - _2306;
    float _2364 = (0.5 / (((_2321 * ((_2320 * _2353) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2353) + _2306) * _2320))) * _2320;
    float _4611 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    uint _2380 = _2153 + 9u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _888) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2193].x + _965;
    float _2394 = cbLight._m0[_2193].y + _966;
    float _2395 = cbLight._m0[_2193].z + _967;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2193].xyz));
    float _4622 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2407 = dot(vec3(_885, _886, _887), vec3(_2400, _2401, _2402));
    float _4633 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2400, _2401, _2402));
    float _4644 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2392 * _2392;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2426 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
    float _2433 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2321 * ((_2406 * _2433) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2433) + _2392) * _2406))) * _2406;
    float _4655 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    float _2455 = (((((_2426 * _2343) + _1049) * cbLight._m0[_2380].x) * _2445) * _2176) + ((((cbLight._m0[_2292].x * _2145) * ((_2342 * _2343) + _1049)) * _2366) * _2189);
    float _2456 = (((((_2426 * _2345) + _1051) * cbLight._m0[_2380].y) * _2445) * _2176) + ((((cbLight._m0[_2292].y * _2146) * ((_2342 * _2345) + _1051)) * _2366) * _2189);
    float _2457 = (((((_2426 * _2346) + _1052) * cbLight._m0[_2380].z) * _2445) * _2176) + ((((cbLight._m0[_2292].z * _2147) * ((_2342 * _2346) + _1052)) * _2366) * _2189);
    float _2519;
    float _2521;
    float _2523;
    if (_2229)
    {
        _2519 = _2455;
        _2521 = _2456;
        _2523 = _2457;
    }
    else
    {
        uint _2525 = _2153 + 2u;
        uint _2529 = _2153 + 10u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _888) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _965;
        float _2546 = cbLight._m0[_2525].y + _966;
        float _2547 = cbLight._m0[_2525].z + _967;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2525].xyz));
        float _4666 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2559 = dot(vec3(_885, _886, _887), vec3(_2552, _2553, _2554));
        float _4677 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4688 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2585 = 1.0 - _2544;
        float _2595 = (0.5 / (((_2321 * ((_2558 * _2585) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2585) + _2544) * _2558))) * _2558;
        float _4699 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
        _2519 = (((((_2578 * _2343) + _1049) * cbLight._m0[_2529].x) * _2597) * _2598) + _2455;
        _2521 = (((((_2578 * _2345) + _1051) * cbLight._m0[_2529].y) * _2597) * _2598) + _2456;
        _2523 = (((((_2578 * _2346) + _1052) * cbLight._m0[_2529].z) * _2597) * _2598) + _2457;
    }
    float _2633;
    float _2635;
    float _2637;
    if (_2247)
    {
        _2633 = _2519;
        _2635 = _2521;
        _2637 = _2523;
    }
    else
    {
        uint _2644 = _2153 + 3u;
        uint _2648 = _2153 + 11u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _888) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _965;
        float _2665 = cbLight._m0[_2644].y + _966;
        float _2666 = cbLight._m0[_2644].z + _967;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2644].xyz));
        float _4715 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2678 = dot(vec3(_885, _886, _887), vec3(_2671, _2672, _2673));
        float _4726 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4737 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2321 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2704) + _2663) * _2677))) * _2677;
        float _4748 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2633 = (((((_2697 * _2343) + _1049) * cbLight._m0[_2648].x) * _2716) * _2717) + _2519;
        _2635 = (((((_2697 * _2345) + _1051) * cbLight._m0[_2648].y) * _2716) * _2717) + _2521;
        _2637 = (((((_2697 * _2346) + _1052) * cbLight._m0[_2648].z) * _2716) * _2717) + _2523;
    }
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    if (_2151.y == 0u)
    {
        float _2792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2792;
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2792;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2792;
        uvec4 _2807 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2808 = _2807.x;
        uint _2819 = uint((float(_2807.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _2808))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _2808)));
        float _2829 = (log2(_2795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2830 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        uint _2833 = uint(isnan(14.0) ? _2830 : (isnan(_2830) ? 14.0 : min(_2830, 14.0)));
        uvec4 _2838 = texelFetch(g_lightClusterGridBuffer, int(((_2833 << 2u) + (_2819 << 6u)) >> 2u));
        uint _2839 = _2838.x;
        uint _2840 = _2807.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2840 >> 4u) & 15u)) + 4294967295u) & _2839) == 0u) || ((_2840 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            uint _3152 = 0u;
            uint _3161;
            bool _3162;
            for (;;)
            {
                _3161 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                _3162 = _3161 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3162)
                {
                    frontier_phi_66_pred = _3146;
                    frontier_phi_66_pred_1 = _3151;
                    frontier_phi_66_pred_2 = _3150;
                    frontier_phi_66_pred_3 = _3149;
                    frontier_phi_66_pred_4 = _3148;
                    frontier_phi_66_pred_5 = _3147;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3161;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3152 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2793;
                        float _3358 = _3317.y - _2794;
                        float _3359 = _3317.z - _2795;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_1005, _1008, _1011), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4774 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2793;
                        float _3393 = (-0.0) - _2794;
                        float _3394 = (-0.0) - _2795;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3409 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3410 = 1.0 - _1080;
                        float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                        float _3418 = _3417 * _3417;
                        float _3419 = _3418 * _3418;
                        float _3420 = _3399 + _3364;
                        float _3421 = _3400 + _3365;
                        float _3422 = _3401 + _3366;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3430 = dot(vec3(_1005, _1008, _1011), vec3(_3399, _3400, _3401));
                        float _4790 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3434 = dot(vec3(_1005, _1008, _1011), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                        float _4801 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                        float _3442 = _3377 * _3418;
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3367) + _3443;
                        float _4812 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3448 = 1.0 - _3418;
                        float _3458 = (0.5 / (((_3447 * ((_3433 * _3448) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3418) * _3433))) * _3447;
                        float _4823 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3469 = (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3441 * _3441) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3221 = (_3388 * _3336.x) + _3294;
                        _3222 = (_3388 * _3336.y) + _3295;
                        _3223 = (_3388 * _3336.z) + _3296;
                        _3218 = (_3469 * _3353.x) + _3291;
                        _3219 = (_3469 * _3353.y) + _3292;
                        _3220 = (_3469 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_66_pred = _3218;
                    frontier_phi_66_pred_1 = _3223;
                    frontier_phi_66_pred_2 = _3222;
                    frontier_phi_66_pred_3 = _3221;
                    frontier_phi_66_pred_4 = _3220;
                    frontier_phi_66_pred_5 = _3219;
                }
                _2986 = frontier_phi_66_pred;
                _2996 = frontier_phi_66_pred_1;
                _2994 = frontier_phi_66_pred_2;
                _2992 = frontier_phi_66_pred_3;
                _2990 = frontier_phi_66_pred_4;
                _2988 = frontier_phi_66_pred_5;
                uint _3153 = _3152 + 1u;
                if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3146 = _2986;
                    _3147 = _2988;
                    _3148 = _2990;
                    _3149 = _2992;
                    _3150 = _2994;
                    _3151 = _2996;
                    _3152 = _3153;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        if (((4294967295u << _3002) & _2839) == 0u)
        {
            _3114 = _2985;
            _3116 = _2987;
            _3118 = _2989;
            _3120 = _2991;
            _3122 = _2993;
            _3124 = _2995;
        }
        else
        {
            float _3139 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
            float _3140 = _3139 * _2793;
            float _3141 = _3139 * _2794;
            float _3142 = _3139 * _2795;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3274 = _2985;
                float _3275 = _2987;
                float _3276 = _2989;
                float _3277 = _2991;
                float _3278 = _2993;
                float _3279 = _2995;
                uint _3280 = _3002;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2833 << 5u) + (_2819 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3290)
                    {
                        frontier_phi_77_pred = _3279;
                        frontier_phi_77_pred_1 = _3278;
                        frontier_phi_77_pred_2 = _3277;
                        frontier_phi_77_pred_3 = _3276;
                        frontier_phi_77_pred_4 = _3275;
                        frontier_phi_77_pred_5 = _3274;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3496 = _3274;
                        float _3497 = _3275;
                        float _3498 = _3276;
                        float _3499 = _3277;
                        float _3500 = _3278;
                        float _3501 = _3279;
                        uint _3502 = _3289;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3586;
                        float _3633;
                        bool _3634;
                        for (;;)
                        {
                            uint _3513 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3513 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3589 = (_3513 * 40u) + 24u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3608 = (_3513 * 40u) + 28u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3633 = fma(_2795, _3621.z, fma(_2794, _3621.y, _3621.x * _2793)) + _3621.w;
                            _3634 = !((fma(_2795, _3602.z, fma(_2794, _3602.y, _3602.x * _2793)) + _3602.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3634)
                            {
                                float _3661 = _3528.x - _2793;
                                float _3662 = _3528.y - _2794;
                                float _3663 = _3528.z - _2795;
                                float _3664 = dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663));
                                float _3667 = inversesqrt(_3664);
                                float _3668 = _3667 * _3661;
                                float _3669 = _3667 * _3662;
                                float _3670 = _3667 * _3663;
                                float _3674 = 1.0 - (_3664 / (_3529 * _3529));
                                float _4834 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3679 = sqrt(_3664) * _3544.w;
                                float _3681 = 1.39999997615814208984375 / (_3679 + 1.39999997615814208984375);
                                float _3682 = _3681 * _3681;
                                float _3685 = ((1.0 - _3682) * dot(vec3(_3668, _3669, _3670), vec3(_1005, _1008, _1011))) + _3682;
                                float _3688 = _3679 * _3679;
                                float _3692 = (fma(_2795, _3571.z, fma(_2794, _3571.y, _3571.x * _2793)) + _3571.w) / _3633;
                                float _3693 = (fma(_2795, _3586.z, fma(_2794, _3586.y, _3586.x * _2793)) + _3586.w) / _3633;
                                float _3697 = 1.0 - dot(vec2(_3692, _3693), vec2(_3692, _3693));
                                float _4850 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3699 = _3698 * (((isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0))) * _3675) / ((_3688 * 0.699999988079071044921875) + 1.0));
                                float _3711 = exp2(log2(1.0 / ((_3688 * 3.5) + 5.0)) * 0.25);
                                float _3712 = 1.0 - _1080;
                                float _3719 = sqrt(1.0 - ((1.0 - (_3712 * _3712)) * (1.0 - (_3711 * _3711))));
                                float _3720 = _3719 * _3719;
                                float _3721 = _3720 * _3720;
                                float _3722 = _3668 - _3140;
                                float _3723 = _3669 - _3141;
                                float _3724 = _3670 - _3142;
                                float _3728 = inversesqrt(dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724)));
                                float _3732 = dot(vec3(_1005, _1008, _1011), vec3((-0.0) - _3140, (-0.0) - _3141, (-0.0) - _3142));
                                float _4861 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3736 = dot(vec3(_1005, _1008, _1011), vec3(_3728 * _3722, _3728 * _3723, _3728 * _3724));
                                float _4872 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3743 = ((_3739 * _3739) * (_3721 + (-1.0))) + 1.0;
                                float _3744 = _3681 * _3720;
                                float _3745 = _3744 * _3744;
                                float _3751 = ((1.0 - _3745) * dot(vec3(_1005, _1008, _1011), vec3(_3668, _3669, _3670))) + _3745;
                                float _4883 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3753 = 1.0 - _3720;
                                float _3763 = (0.5 / (((_3752 * ((_3735 * _3753) + _3720)) + 9.9999999392252902907785028219223e-09) + (((_3752 * _3753) + _3720) * _3735))) * _3752;
                                float _4894 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3773 = (_3698 * _3675) * (((_3721 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3743 * _3743) * ((_3688 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3699 * _3544.y;
                                frontier_phi_83_pred_1 = _3699 * _3544.x;
                                frontier_phi_83_pred_2 = _3773 * _3556.z;
                                frontier_phi_83_pred_3 = _3773 * _3556.y;
                                frontier_phi_83_pred_4 = _3773 * _3556.x;
                                frontier_phi_83_pred_5 = _3699 * _3544.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3781 = frontier_phi_83_pred;
                            _3780 = frontier_phi_83_pred_1;
                            _3779 = frontier_phi_83_pred_2;
                            _3778 = frontier_phi_83_pred_3;
                            _3777 = frontier_phi_83_pred_4;
                            _3782 = frontier_phi_83_pred_5;
                            _3486 = _3780 + _3499;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            _3483 = _3777 + _3496;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3488;
                        frontier_phi_77_pred_1 = _3487;
                        frontier_phi_77_pred_2 = _3486;
                        frontier_phi_77_pred_3 = _3485;
                        frontier_phi_77_pred_4 = _3484;
                        frontier_phi_77_pred_5 = _3483;
                    }
                    _3125 = frontier_phi_77_pred;
                    _3123 = frontier_phi_77_pred_1;
                    _3121 = frontier_phi_77_pred_2;
                    _3119 = frontier_phi_77_pred_3;
                    _3117 = frontier_phi_77_pred_4;
                    _3115 = frontier_phi_77_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3115;
                        _3275 = _3117;
                        _3276 = _3119;
                        _3277 = _3121;
                        _3278 = _3123;
                        _3279 = _3125;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3119;
                frontier_phi_58_59_ladder_1 = _3125;
                frontier_phi_58_59_ladder_2 = _3123;
                frontier_phi_58_59_ladder_3 = _3121;
                frontier_phi_58_59_ladder_4 = _3117;
                frontier_phi_58_59_ladder_5 = _3115;
            }
            else
            {
                frontier_phi_58_59_ladder = _2989;
                frontier_phi_58_59_ladder_1 = _2995;
                frontier_phi_58_59_ladder_2 = _2993;
                frontier_phi_58_59_ladder_3 = _2991;
                frontier_phi_58_59_ladder_4 = _2987;
                frontier_phi_58_59_ladder_5 = _2985;
            }
            _3114 = frontier_phi_58_59_ladder_5;
            _3116 = frontier_phi_58_59_ladder_4;
            _3118 = frontier_phi_58_59_ladder;
            _3120 = frontier_phi_58_59_ladder_3;
            _3122 = frontier_phi_58_59_ladder_2;
            _3124 = frontier_phi_58_59_ladder_1;
        }
        float _3129 = isnan(1.0) ? _1064 : (isnan(_1064) ? 1.0 : min(_1064, 1.0));
        _2852 = (_3129 * _3120) + _2285;
        _2854 = (_3129 * _3122) + _2287;
        _2856 = (_3129 * _3124) + _2289;
        _2858 = ((_3114 * _1049) * _3129) + _2633;
        _2860 = ((_3116 * _1051) * _3129) + _2635;
        _2862 = ((_3118 * _1052) * _3129) + _2637;
    }
    else
    {
        _2852 = _2285;
        _2854 = _2287;
        _2856 = _2289;
        _2858 = _2633;
        _2860 = _2635;
        _2862 = _2637;
    }
    uint _2868 = _1025 + uint(cbMatDynParam._m0[0u].w);
    float _2874 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2880 = (((((_2874 * cbMtdParam._m0[14u].x) * _743.x) * _766) * _840) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_2868].x;
    float _2886 = (((((_2874 * cbMtdParam._m0[14u].y) * _743.y) * _766) * _840) * (((1.0 - _821) * cbMtdParam._m0[20u].w) + _821)) * cbInstanceData._m0[_2868].y;
    float _2892 = (((((_2874 * cbMtdParam._m0[14u].z) * _743.z) * _766) * _840) * (((1.0 - _823) * cbMtdParam._m0[20u].w) + _823)) * cbInstanceData._m0[_2868].z;
    float _4910 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4921 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4932 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2909 = (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2852 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1064))) + ((_2858 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + _2880;
    float _2911 = (_2886 + ((_2860 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2854 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1064)));
    float _2913 = (_2892 + ((_2862 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2856 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1064)));
    float _2914 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2915 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2916 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
    float _2922 = cbMtdParam._m0[2u].x * _2880;
    float _2923 = cbMtdParam._m0[2u].y * _2886;
    float _2924 = cbMtdParam._m0[2u].z * _2892;
    float _4958 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2926 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
    uint _2927 = _1024 + 6u;
    float _2935 = _985 / cbSceneParam._m0[86u].x;
    float _2936 = _986 / cbSceneParam._m0[86u].y;
    vec4 _2950 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, (log2((isnan(cbSceneParam._m0[77u].w) ? _908 : (isnan(_908) ? cbSceneParam._m0[77u].w : min(_908, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2952 = _2950.x;
    float _2953 = _2950.y;
    float _2954 = _2950.z;
    float _2955 = _2950.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_908 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_908) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _908 : min(cbSceneParam._m0[80u].w, _908));
        float _3011 = _3010 / _908;
        float _3022 = _3011 * _958;
        float _3023 = _959 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3025 = _3011 * _960;
        float _3027 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3023;
        float _3035 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3231;
        if (abs((_3024 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3231 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3175 = 1.0 / cbSceneParam._m0[80u].x;
            float _3176 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3177 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3186 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : min(_3176, 0.0));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            _3231 = ((abs(_3035 / _3024) * cbSceneParam._m0[80u].y) * ((((_3186 - _3187) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0))))) * _3175)) - ((exp2(_3045 * _3186) - exp2(_3045 * _3187)) * _3175))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3233 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2935, _2936, 1.0), 0.0);
        float _3242 = exp2((_3231 * (-1.44269502162933349609375)) * (1.0 - _3233.w));
        float _3243 = log2(_3242);
        float _3259 = log2(_2955);
        _3047 = (exp2(_3259 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].x)) * _3233.x) / cbSceneParam._m0[78u].x)) + _2952;
        _3049 = (exp2(_3259 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].y)) * _3233.y) / cbSceneParam._m0[78u].y)) + _2953;
        _3051 = (exp2(_3259 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].z)) * _3233.z) / cbSceneParam._m0[78u].z)) + _2954;
        _3053 = _3242 * _2955;
    }
    else
    {
        _3047 = _2952;
        _3049 = _2953;
        _3051 = _2954;
        _3053 = _2955;
    }
    bool _3269;
    vec4 _3063;
    vec4 _3085;
    float _3087;
    float _3091;
    float _3092;
    float _3093;
    float _3096;
    float _3099;
    float _3102;
    float _3103;
    bool _3113;
    for (;;)
    {
        _3063 = cbMatDynParam._m0[0u];
        float _3065 = roundEven(_3063.y);
        bool _3066 = _3065 == 3.0;
        float _3067 = log2(_3053);
        float _3071 = exp2(_3067 * cbSceneParam._m0[78u].x);
        float _3072 = exp2(_3067 * cbSceneParam._m0[78u].y);
        float _3073 = exp2(_3067 * cbSceneParam._m0[78u].z);
        float _3074 = _3071 * _2914;
        float _3075 = _3072 * _2915;
        float _3076 = _3073 * _2916;
        float _3083 = _974 + (-0.5);
        _3085 = cbMtdParam._m0[1u];
        _3087 = _3085.y * _3083;
        float _3090 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3091 = _3090 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
        _3092 = _3090 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
        _3093 = _3090 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
        _3096 = ((_2922 * _2926) * _3071) * _3090;
        _3099 = ((_2923 * _2926) * _3072) * _3090;
        _3102 = ((_2924 * _2926) * _3073) * _3090;
        _3103 = _3083 * 0.999000012874603271484375;
        _3113 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3113)
        {
            if ((cbInstanceData._m0[_1024 + 7u].x + _3103) < 0.5)
            {
                _3269 = true;
                break;
            }
        }
        uint _3210 = _1025 + uint(_3063.w);
        if ((cbInstanceData._m0[_3210].w < 1.0) && ((cbInstanceData._m0[_3210].w + _3103) < 0.5))
        {
            _3269 = true;
            break;
        }
        if ((_3087 + 1.0) < _3085.x)
        {
            _3269 = true;
            break;
        }
        _3269 = false;
        break;
    }
    float _3474;
    if (_3269)
    {
        discard_state = true;
        _3474 = 0.0;
    }
    else
    {
        _3474 = cbInstanceData._m0[_2927].w;
    }
    SV_Target.x = _3091;
    SV_Target.y = _3092;
    SV_Target.z = _3093;
    SV_Target.w = _3474;
    SV_Target_1.x = _3096;
    SV_Target_1.y = _3099;
    SV_Target_1.z = _3102;
    SV_Target_1.w = cbInstanceData._m0[_2927].w;
    discard_exit();
}


