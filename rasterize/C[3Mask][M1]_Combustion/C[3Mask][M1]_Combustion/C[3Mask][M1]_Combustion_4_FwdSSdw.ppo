#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1372;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _3777 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3788 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3799 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    vec4 _461 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = ((((((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _461.x;
    float _472 = ((((_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _461.y;
    float _475 = ((((_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _461.z;
    vec4 _488 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _522 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _505) * _351) + _505;
    float _539 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _522) * _392) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _539) * _433) + _539;
    vec4 _569 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _585 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _596 = ((_585.x - _571) * _351) + _571;
    float _597 = ((_585.y - _572) * _351) + _572;
    float _598 = ((_585.z - _573) * _351) + _573;
    vec4 _611 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _622 = ((_611.x - _596) * _392) + _596;
    float _623 = ((_611.y - _597) * _392) + _597;
    float _624 = ((_611.z - _598) * _392) + _598;
    vec4 _637 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _650 = ((_637.z - _624) * _433) + _624;
    float _653 = ((((_637.x - _622) * _433) + _622) * 2.0) + (-1.0);
    float _655 = ((((_637.y - _623) * _433) + _623) * 2.0) + (-1.0);
    float _656 = dot(vec2(_653, _655), vec2(_653, _655));
    float _3810 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    vec4 _693 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _707 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3821 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _716 = (((_708 * _708) * (3.0 - (_708 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _724 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _732 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3832 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _737 = (_733 * _733) * (3.0 - (_733 * 2.0));
    float _738 = _737 * cbMtdParam._m0[22u].x;
    float _739 = _737 * cbMtdParam._m0[22u].y;
    float _740 = sin(_724);
    float _741 = cos(_724);
    float _742 = TEXCOORD.z - _738;
    float _743 = TEXCOORD.w - _739;
    vec4 _763 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_738 + fma(_743, (-0.0) - _740, _742 * _741))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_743, _741, _742 * _740) + _739)) + cbTextureTilingScale._m0[2u].w));
    float _769 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _763.x;
    float _771 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _763.y;
    float _773 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _763.z;
    float _793 = (TEXCOORD_5.x - (((_488.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3843 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    vec4 _807 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _817 = (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _653;
    float _818 = (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _655;
    float _821 = fma(_661, _237 * NORMAL.x, fma(_818, _244 * TANGENT.x, (_230 * _222) * _817));
    float _824 = fma(_661, _237 * NORMAL.y, fma(_818, _244 * TANGENT.y, (_230 * _223) * _817));
    float _827 = fma(_661, _237 * NORMAL.z, fma(_818, _244 * TANGENT.z, (_230 * _224) * _817));
    float _831 = inversesqrt(dot(vec3(_821, _824, _827), vec3(_821, _824, _827)));
    float _832 = _831 * _821;
    float _833 = _831 * _824;
    float _834 = _831 * _827;
    float _3854 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _835 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3876 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3887 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3898 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _839 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _905 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _895);
    float _906 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _895);
    float _907 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _895);
    float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
    float _912 = _905 * _911;
    float _913 = _906 * _911;
    float _914 = _907 * _911;
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _939 = fma(_834, cbSceneParam._m0[5u].z, fma(_833, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _832));
    float _942 = fma(_834, cbSceneParam._m0[6u].z, fma(_833, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _832));
    float _945 = fma(_834, cbSceneParam._m0[7u].z, fma(_833, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _832));
    uint _958 = uint(roundEven(NORMAL.w)) * 13u;
    uint _959 = _958 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_960].z;
    float _3909 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _972 = 1.0 - _839;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _839;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _839;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _839;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _998 = _995.x * TEXCOORD_5.w;
    float _999 = dot(vec3(_832, _833, _834), vec3(_912, _913, _914));
    float _1002 = _999 * 2.0;
    float _1006 = (_1002 * _832) - _912;
    float _1007 = (_1002 * _833) - _913;
    float _1008 = (_1002 * _834) - _914;
    float _1012 = abs(dot(vec3(_912, _913, _914), vec3(_832, _833, _834)));
    float _3942 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1014 = sqrt(_835);
    float _1026 = exp2((_1014 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1014 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1014 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1014;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1371;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1096 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1100 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1104 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1129 = _1061 + _832;
        float _1130 = _1065 + _833;
        float _1131 = _1069 + _834;
        float _1141 = fma(_1131, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129)) - _1096;
        float _1142 = fma(_1131, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129)) - _1100;
        float _1143 = fma(_1131, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129)) - _1104;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1096 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1100 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[34u].z) + ((((((_1104 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1199 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1165.x + (-0.5));
        float _1201 = _1199 * (_1165.y + (-0.5));
        float _1202 = _1199 * (_1165.z + (-0.5));
        float _1209 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1172.x + (-0.5));
        float _1211 = _1209 * (_1172.y + (-0.5));
        float _1212 = _1209 * (_1172.z + (-0.5));
        float _1219 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1179.x + (-0.5));
        float _1221 = _1219 * (_1179.y + (-0.5));
        float _1222 = _1219 * (_1179.z + (-0.5));
        float _1229 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1186.x + (-0.5));
        float _1231 = _1229 * (_1186.y + (-0.5));
        float _1232 = _1229 * (_1186.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1253 = (dot(vec3(_832, _833, _834), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1263 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3990 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1265 + 1.0))) + _1270) * _1233;
        float _1280 = _1201 * 0.5;
        float _1281 = _1211 * 0.5;
        float _1282 = _1221 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_832, _833, _834), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4023 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1307 + 1.0))) + _1312) * _1234;
        float _1322 = _1202 * 0.5;
        float _1323 = _1212 * 0.5;
        float _1324 = _1222 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_832, _833, _834), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4056 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1349 + 1.0))) + _1354) * _1235;
        _1371 = _1202;
        _1373 = _1201;
        _1374 = _1200;
        _1375 = _1212;
        _1376 = _1211;
        _1377 = _1210;
        _1378 = _1222;
        _1379 = _1221;
        _1380 = _1220;
        _1381 = _1235;
        _1382 = _1234;
        _1383 = _1233;
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
    }
    else
    {
        _1371 = _1372;
        _1373 = _1372;
        _1374 = _1372;
        _1375 = _1372;
        _1376 = _1372;
        _1377 = _1372;
        _1378 = _1372;
        _1379 = _1372;
        _1380 = _1372;
        _1381 = _1372;
        _1382 = _1372;
        _1383 = _1372;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1416 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1420 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1443 = _1061 + _832;
        float _1444 = _1065 + _833;
        float _1445 = _1069 + _834;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_832, _833, _834), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4119 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_832, _833, _834), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4152 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_832, _833, _834), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4185 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1372;
        _1682 = _1372;
        _1683 = _1372;
        _1684 = _1372;
        _1685 = _1372;
        _1686 = _1372;
        _1687 = _1372;
        _1688 = _1372;
        _1689 = _1372;
        _1690 = _1372;
        _1691 = _1372;
        _1692 = _1372;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1384)) + _1384;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1385)) + _1385;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1386)) + _1386;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _1006 * 0.5;
    float _1750 = _1007 * 0.5;
    float _1751 = _1008 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1375, _1378, _1381));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _835);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_1008, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006));
        float _1879 = fma(_1008, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006));
        float _1882 = fma(_1008, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1910 = frontier_phi_14_12_ladder;
        }
        float _2134;
        if (_1879 > 0.0)
        {
            _2134 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2134 = frontier_phi_23_19_ladder;
        }
        float _2391;
        if (_1882 > 0.0)
        {
            _2391 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2391 = frontier_phi_35_30_ladder;
        }
        float _2393 = isnan(_2134) ? _1910 : (isnan(_1910) ? _2134 : min(_1910, _2134));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1876) + _1865;
        float _2399 = (_2394 * _1879) + _1869;
        float _2400 = (_2394 * _1882) + _1873;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_13_35_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_13_35_ladder_2;
        _1900 = frontier_phi_13_35_ladder_1;
        _1902 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1006, _1007, _1008), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _835);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_1008, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006));
        float _1974 = fma(_1008, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006));
        float _1977 = fma(_1008, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006));
        float _2139;
        if (_1971 > 0.0)
        {
            _2139 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2139 = frontier_phi_25_21_ladder;
        }
        float _2418;
        if (_1974 > 0.0)
        {
            _2418 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2418 = frontier_phi_37_32_ladder;
        }
        float _2631;
        if (_1977 > 0.0)
        {
            _2631 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2631 = frontier_phi_46_43_ladder;
        }
        float _2633 = isnan(_2418) ? _2139 : (isnan(_2139) ? _2418 : min(_2139, _2418));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1971) + _1960;
        float _2639 = (_2634 * _1974) + _1964;
        float _2640 = (_2634 * _1977) + _1968;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_22_46_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_22_46_ladder_2;
        _1998 = frontier_phi_22_46_ladder_1;
        _2000 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1006, _1007, _1008), _1907);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_1032 * _983) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1032 * _985) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2017 = (((_1032 * _986) + _1033) * _998) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    vec4 _2034 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_920, _921));
    float _2036 = _2034.w;
    float _2048 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2036);
    float _2049 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2036);
    float _2050 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2036);
    uvec4 _2054 = floatBitsToUint(cbInstanceData._m0[_958 + 5u]);
    uint _2056 = _2054.x * 14u;
    uint _2057 = _2056 + 13u;
    float _2064 = _998 + (-1.0);
    float _2069 = (cbLight._m0[_2057].x * _2064) + 1.0;
    float _2070 = (cbLight._m0[_2057].y * _2064) + 1.0;
    float _2071 = (cbLight._m0[_2057].z * _2064) + 1.0;
    float _2072 = (cbLight._m0[_2057].w * _2064) + 1.0;
    uint _2073 = _2056 + 5u;
    float _2079 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2083 = _2056 + 4u;
    float _2093 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
    uint _2097 = _2056 | 1u;
    float _2108 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_832, _833, _834));
    float _2111 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_832, _833, _834));
    float _4321 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _4332 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2116 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2118 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * 0.3183098733425140380859375;
    float _2125 = ((cbLight._m0[_2073].x * _2079) * _2118) + (((cbLight._m0[_2083].x * _2048) * _2093) * _2116);
    float _2126 = ((_2079 * cbLight._m0[_2073].y) * _2118) + (((cbLight._m0[_2083].y * _2049) * _2093) * _2116);
    float _2127 = ((_2079 * cbLight._m0[_2073].z) * _2118) + (((cbLight._m0[_2083].z * _2050) * _2093) * _2116);
    uvec4 _2131 = floatBitsToUint(cbLight._m0[_2056 + 12u]);
    bool _2133 = _2131.x == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2133)
    {
        _2144 = _2125;
        _2146 = _2126;
        _2148 = _2127;
    }
    else
    {
        uint _2152 = _2056 + 6u;
        float _2168 = (dot(vec3(cbLight._m0[_2056 + 2u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4343 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2171 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2144 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _2125;
        _2146 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _2126;
        _2148 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _2127;
    }
    bool _2151 = _2131.y == 0u;
    float _2189;
    float _2191;
    float _2193;
    if (_2151)
    {
        _2189 = _2144;
        _2191 = _2146;
        _2193 = _2148;
    }
    else
    {
        uint _2362 = _2056 + 7u;
        float _2378 = (dot(vec3(cbLight._m0[_2056 + 3u].xyz), vec3(_832, _833, _834)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4359 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2381 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2189 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2144;
        _2191 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2146;
        _2193 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2148;
    }
    uint _2196 = _2056 + 8u;
    float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _835) * 0.949999988079071044921875);
    float _2210 = _2209 * _2209;
    float _2211 = cbLight._m0[_2056].x + _912;
    float _2212 = cbLight._m0[_2056].y + _913;
    float _2213 = cbLight._m0[_2056].z + _914;
    float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
    float _2218 = _2217 * _2211;
    float _2219 = _2217 * _2212;
    float _2220 = _2217 * _2213;
    float _2221 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2056].xyz));
    float _4375 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _2225 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2226 = dot(vec3(_832, _833, _834), vec3(_2218, _2219, _2220));
    float _4397 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2218, _2219, _2220));
    float _4408 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2210 * _2210;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
    float _2247 = 0.959999978542327880859375 - _980;
    float _2249 = 0.959999978542327880859375 - _981;
    float _2250 = 0.959999978542327880859375 - _982;
    float _2257 = 1.0 - _2210;
    float _2268 = (0.5 / (((_2225 * ((_2224 * _2257) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2257) + _2210) * _2224))) * _2224;
    float _4419 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    uint _2284 = _2056 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _835) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2097].x + _912;
    float _2298 = cbLight._m0[_2097].y + _913;
    float _2299 = cbLight._m0[_2097].z + _914;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2097].xyz));
    float _4430 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2311 = dot(vec3(_832, _833, _834), vec3(_2304, _2305, _2306));
    float _4441 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2304, _2305, _2306));
    float _4452 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2337 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2225 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2337) + _2296) * _2310))) * _2310;
    float _4463 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2359 = (((((_2330 * _2247) + _983) * cbLight._m0[_2284].x) * _2349) * _2079) + ((((cbLight._m0[_2196].x * _2048) * ((_2246 * _2247) + _983)) * _2270) * _2093);
    float _2360 = (((((_2330 * _2249) + _985) * cbLight._m0[_2284].y) * _2349) * _2079) + ((((cbLight._m0[_2196].y * _2049) * ((_2246 * _2249) + _985)) * _2270) * _2093);
    float _2361 = (((((_2330 * _2250) + _986) * cbLight._m0[_2284].z) * _2349) * _2079) + ((((cbLight._m0[_2196].z * _2050) * ((_2246 * _2250) + _986)) * _2270) * _2093);
    float _2423;
    float _2425;
    float _2427;
    if (_2133)
    {
        _2423 = _2359;
        _2425 = _2360;
        _2427 = _2361;
    }
    else
    {
        uint _2429 = _2056 + 2u;
        uint _2433 = _2056 + 10u;
        float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _835) * 0.949999988079071044921875);
        float _2448 = _2447 * _2447;
        float _2449 = cbLight._m0[_2429].x + _912;
        float _2450 = cbLight._m0[_2429].y + _913;
        float _2451 = cbLight._m0[_2429].z + _914;
        float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
        float _2456 = _2455 * _2449;
        float _2457 = _2455 * _2450;
        float _2458 = _2455 * _2451;
        float _2459 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2429].xyz));
        float _4474 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2463 = dot(vec3(_832, _833, _834), vec3(_2456, _2457, _2458));
        float _4485 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2467 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2456, _2457, _2458));
        float _4496 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2471 = _2448 * _2448;
        float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
        float _2482 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
        float _2489 = 1.0 - _2448;
        float _2499 = (0.5 / (((_2225 * ((_2462 * _2489) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2489) + _2448) * _2462))) * _2462;
        float _4507 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
        _2423 = (((((_2482 * _2247) + _983) * cbLight._m0[_2433].x) * _2501) * _2502) + _2359;
        _2425 = (((((_2482 * _2249) + _985) * cbLight._m0[_2433].y) * _2501) * _2502) + _2360;
        _2427 = (((((_2482 * _2250) + _986) * cbLight._m0[_2433].z) * _2501) * _2502) + _2361;
    }
    float _2537;
    float _2539;
    float _2541;
    if (_2151)
    {
        _2537 = _2423;
        _2539 = _2425;
        _2541 = _2427;
    }
    else
    {
        uint _2548 = _2056 + 3u;
        uint _2552 = _2056 + 11u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _835) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _912;
        float _2569 = cbLight._m0[_2548].y + _913;
        float _2570 = cbLight._m0[_2548].z + _914;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_832, _833, _834), vec3(cbLight._m0[_2548].xyz));
        float _4523 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2582 = dot(vec3(_832, _833, _834), vec3(_2575, _2576, _2577));
        float _4534 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4545 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2225 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2225 * _2608) + _2567) * _2581))) * _2581;
        float _4556 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2537 = (((((_2601 * _2247) + _983) * cbLight._m0[_2552].x) * _2620) * _2621) + _2423;
        _2539 = (((((_2601 * _2249) + _985) * cbLight._m0[_2552].y) * _2620) * _2621) + _2425;
        _2541 = (((((_2601 * _2250) + _986) * cbLight._m0[_2552].z) * _2620) * _2621) + _2427;
    }
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_2054.y == 0u)
    {
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2696;
        float _2698 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2696;
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2696;
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.x;
        uint _2723 = uint((float(_2711.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _2712))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _2712)));
        float _2733 = (log2(_2699 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2734 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        uint _2737 = uint(isnan(14.0) ? _2734 : (isnan(_2734) ? 14.0 : min(_2734, 14.0)));
        uvec4 _2742 = texelFetch(g_lightClusterGridBuffer, int(((_2737 << 2u) + (_2723 << 6u)) >> 2u));
        uint _2743 = _2742.x;
        uint _2744 = _2711.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2744 >> 4u) & 15u)) + 4294967295u) & _2743) == 0u) || ((_2744 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3058)
                {
                    frontier_phi_61_pred = _3042;
                    frontier_phi_61_pred_1 = _3047;
                    frontier_phi_61_pred_2 = _3046;
                    frontier_phi_61_pred_3 = _3045;
                    frontier_phi_61_pred_4 = _3044;
                    frontier_phi_61_pred_5 = _3043;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3057;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3048 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2697;
                        float _3233 = _3192.y - _2698;
                        float _3234 = _3192.z - _2699;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_939, _942, _945), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4582 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2697;
                        float _3268 = (-0.0) - _2698;
                        float _3269 = (-0.0) - _2699;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _1014;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_939, _942, _945), vec3(_3274, _3275, _3276));
                        float _4598 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3309 = dot(vec3(_939, _942, _945), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4609 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4620 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4631 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3101 = (_3263 * _3211.x) + _3169;
                        _3102 = (_3263 * _3211.y) + _3170;
                        _3103 = (_3263 * _3211.z) + _3171;
                        _3098 = (_3344 * _3228.x) + _3166;
                        _3099 = (_3344 * _3228.y) + _3167;
                        _3100 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_61_pred = _3098;
                    frontier_phi_61_pred_1 = _3103;
                    frontier_phi_61_pred_2 = _3102;
                    frontier_phi_61_pred_3 = _3101;
                    frontier_phi_61_pred_4 = _3100;
                    frontier_phi_61_pred_5 = _3099;
                }
                _2890 = frontier_phi_61_pred;
                _2900 = frontier_phi_61_pred_1;
                _2898 = frontier_phi_61_pred_2;
                _2896 = frontier_phi_61_pred_3;
                _2894 = frontier_phi_61_pred_4;
                _2892 = frontier_phi_61_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2890;
                    _3043 = _2892;
                    _3044 = _2894;
                    _3045 = _2896;
                    _3046 = _2898;
                    _3047 = _2900;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2906) & _2743) == 0u)
        {
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
            float _3036 = _3035 * _2697;
            float _3037 = _3035 * _2698;
            float _3038 = _3035 * _2699;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3149 = _2889;
                float _3150 = _2891;
                float _3151 = _2893;
                float _3152 = _2895;
                float _3153 = _2897;
                float _3154 = _2899;
                uint _3155 = _2906;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2737 << 5u) + (_2723 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3165)
                    {
                        frontier_phi_67_pred = _3152;
                        frontier_phi_67_pred_1 = _3153;
                        frontier_phi_67_pred_2 = _3154;
                        frontier_phi_67_pred_3 = _3151;
                        frontier_phi_67_pred_4 = _3150;
                        frontier_phi_67_pred_5 = _3149;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        uint _3368 = _3164;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3379 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3455 = (_3379 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3379 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2699, _3487.z, fma(_2698, _3487.y, _3487.x * _2697)) + _3487.w;
                            _3500 = !((fma(_2699, _3468.z, fma(_2698, _3468.y, _3468.x * _2697)) + _3468.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3394.x - _2697;
                                float _3528 = _3394.y - _2698;
                                float _3529 = _3394.z - _2699;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3395 * _3395));
                                float _4642 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3545 = sqrt(_3530) * _3410.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_939, _942, _945))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2699, _3437.z, fma(_2698, _3437.y, _3437.x * _2697)) + _3437.w) / _3499;
                                float _3559 = (fma(_2699, _3452.z, fma(_2698, _3452.y, _3452.x * _2697)) + _3452.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4658 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1014;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3036;
                                float _3589 = _3535 - _3037;
                                float _3590 = _3536 - _3038;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_939, _942, _945), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4669 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3602 = dot(vec3(_939, _942, _945), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4680 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_939, _942, _945), vec3(_3534, _3535, _3536))) + _3611;
                                float _4691 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4702 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3639 * _3422.x;
                                frontier_phi_73_pred_1 = _3639 * _3422.y;
                                frontier_phi_73_pred_2 = _3565 * _3410.z;
                                frontier_phi_73_pred_3 = _3565 * _3410.y;
                                frontier_phi_73_pred_4 = _3565 * _3410.x;
                                frontier_phi_73_pred_5 = _3639 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_73_pred;
                            _3644 = frontier_phi_73_pred_1;
                            _3648 = frontier_phi_73_pred_2;
                            _3647 = frontier_phi_73_pred_3;
                            _3646 = frontier_phi_73_pred_4;
                            _3645 = frontier_phi_73_pred_5;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3352;
                        frontier_phi_67_pred_1 = _3353;
                        frontier_phi_67_pred_2 = _3354;
                        frontier_phi_67_pred_3 = _3351;
                        frontier_phi_67_pred_4 = _3350;
                        frontier_phi_67_pred_5 = _3349;
                    }
                    _3017 = frontier_phi_67_pred;
                    _3019 = frontier_phi_67_pred_1;
                    _3021 = frontier_phi_67_pred_2;
                    _3015 = frontier_phi_67_pred_3;
                    _3013 = frontier_phi_67_pred_4;
                    _3011 = frontier_phi_67_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _3011;
                        _3150 = _3013;
                        _3151 = _3015;
                        _3152 = _3017;
                        _3153 = _3019;
                        _3154 = _3021;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3019;
                frontier_phi_55_56_ladder_1 = _3021;
                frontier_phi_55_56_ladder_2 = _3017;
                frontier_phi_55_56_ladder_3 = _3015;
                frontier_phi_55_56_ladder_4 = _3013;
                frontier_phi_55_56_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_55_56_ladder = _2897;
                frontier_phi_55_56_ladder_1 = _2899;
                frontier_phi_55_56_ladder_2 = _2895;
                frontier_phi_55_56_ladder_3 = _2893;
                frontier_phi_55_56_ladder_4 = _2891;
                frontier_phi_55_56_ladder_5 = _2889;
            }
            _3010 = frontier_phi_55_56_ladder_5;
            _3012 = frontier_phi_55_56_ladder_4;
            _3014 = frontier_phi_55_56_ladder_3;
            _3016 = frontier_phi_55_56_ladder_2;
            _3018 = frontier_phi_55_56_ladder;
            _3020 = frontier_phi_55_56_ladder_1;
        }
        float _3025 = isnan(1.0) ? _998 : (isnan(_998) ? 1.0 : min(_998, 1.0));
        _2756 = (_3025 * _3016) + _2189;
        _2758 = (_3025 * _3018) + _2191;
        _2760 = (_3025 * _3020) + _2193;
        _2762 = ((_3010 * _983) * _3025) + _2537;
        _2764 = ((_3012 * _985) * _3025) + _2539;
        _2766 = ((_3014 * _986) * _3025) + _2541;
    }
    else
    {
        _2756 = _2189;
        _2758 = _2191;
        _2760 = _2193;
        _2762 = _2537;
        _2764 = _2539;
        _2766 = _2541;
    }
    uint _2772 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _2778 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2784 = (((((_2778 * cbMtdParam._m0[14u].x) * _693.x) * _716) * _794) * (((1.0 - _769) * cbMtdParam._m0[20u].w) + _769)) * cbInstanceData._m0[_2772].x;
    float _2790 = (((((_2778 * cbMtdParam._m0[14u].y) * _693.y) * _716) * _794) * (((1.0 - _771) * cbMtdParam._m0[20u].w) + _771)) * cbInstanceData._m0[_2772].y;
    float _2796 = (((((_2778 * cbMtdParam._m0[14u].z) * _693.z) * _716) * _794) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_2772].z;
    float _4718 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4729 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4740 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2813 = (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2756 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _998))) + ((_2762 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1807)) * cbPerFrame._m0[3u].x)) + _2784;
    float _2815 = (_2790 + ((_2764 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1807)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2758 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _998)));
    float _2817 = (_2796 + ((_2766 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1807)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2760 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _998)));
    float _4766 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2830 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    uint _2831 = _958 + 6u;
    float _2839 = _920 / cbSceneParam._m0[86u].x;
    float _2840 = _921 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _2915 = _2914 / _855;
        float _2926 = _2915 * _905;
        float _2927 = _906 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2929 = _2915 * _907;
        float _2931 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2927;
        float _2939 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2928 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3073 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3111 = ((abs(_2939 / _2928) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2949 * _3082) - exp2(_2949 * _3083)) * _3071))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2859);
        _2951 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2953 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2955 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2957 = _3122 * _2859;
    }
    else
    {
        _2951 = _2856;
        _2953 = _2857;
        _2955 = _2858;
        _2957 = _2859;
    }
    float _2969 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2970 = _2969 == 3.0;
    float _2971 = log2(_2957);
    float _2975 = exp2(_2971 * cbSceneParam._m0[78u].x);
    float _2976 = exp2(_2971 * cbSceneParam._m0[78u].y);
    float _2977 = exp2(_2971 * cbSceneParam._m0[78u].z);
    float _2978 = _2975 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)));
    float _2979 = _2976 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)));
    float _2980 = _2977 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)));
    float _2989 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2989 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.y = _2989 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
    SV_Target.z = _2989 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
    SV_Target.w = cbInstanceData._m0[_2831].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2784) * _2830) * _2975) * _2989;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2790) * _2830) * _2976) * _2989;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2796) * _2830) * _2977) * _2989;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
}


