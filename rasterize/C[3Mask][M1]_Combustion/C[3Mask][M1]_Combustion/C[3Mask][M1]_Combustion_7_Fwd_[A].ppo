#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1355;
float _3790;
float _3791;
float _3792;
float _3793;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _291 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _310 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _338 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _348 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _310.x) * 2.0) - _338)) + 1.0;
    float _3802 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _356 = (_349 * ((_291.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _357 = (_349 * ((_291.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _358 = (_349 * ((_291.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _376 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _389 = (((((1.0 - _310.y) * 2.0) - _338) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3813 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _356) * _390) + _356;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _357)) + _357;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _358)) + _358;
    vec4 _417 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _430 = (((((1.0 - _310.z) * 2.0) - _338) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3824 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _453 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _468 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _488 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _470) * _349) + _470;
    float _505 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _488) * _390) + _488;
    float _522 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _505) * _431) + _505;
    vec4 _535 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    vec4 _551 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _562 = ((_551.x - _537) * _349) + _537;
    float _563 = ((_551.y - _538) * _349) + _538;
    float _564 = ((_551.z - _539) * _349) + _539;
    vec4 _577 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _588 = ((_577.x - _562) * _390) + _562;
    float _589 = ((_577.y - _563) * _390) + _563;
    float _590 = ((_577.z - _564) * _390) + _564;
    vec4 _603 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _616 = ((_603.z - _590) * _431) + _590;
    float _619 = ((((_603.x - _588) * _431) + _588) * 2.0) + (-1.0);
    float _621 = ((((_603.y - _589) * _431) + _589) * 2.0) + (-1.0);
    float _622 = dot(vec2(_619, _621), vec2(_619, _621));
    float _3835 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    vec4 _659 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _673 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3846 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _682 = (((_674 * _674) * (3.0 - (_674 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _690 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _698 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3857 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _703 = (_699 * _699) * (3.0 - (_699 * 2.0));
    float _704 = _703 * cbMtdParam._m0[22u].x;
    float _705 = _703 * cbMtdParam._m0[22u].y;
    float _706 = sin(_690);
    float _707 = cos(_690);
    float _708 = TEXCOORD.z - _704;
    float _709 = TEXCOORD.w - _705;
    vec4 _729 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_704 + fma(_709, (-0.0) - _706, _708 * _707))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_709, _707, _708 * _706) + _705)) + cbTextureTilingScale._m0[2u].w));
    float _735 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _729.x;
    float _737 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _729.y;
    float _739 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _729.z;
    float _759 = (TEXCOORD_5.x - (((_453.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3868 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _763 = fma(_627, _235 * NORMAL.x, fma(_621, _242 * TANGENT.x, (_228 * _220) * _619));
    float _766 = fma(_627, _235 * NORMAL.y, fma(_621, _242 * TANGENT.y, (_228 * _221) * _619));
    float _769 = fma(_627, _235 * NORMAL.z, fma(_621, _242 * TANGENT.z, (_228 * _222) * _619));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _3879 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _777 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3901 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3912 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3923 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _781 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1035 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1041 = (cbMatDynParam._m0[5u].x * _1035) + cbMatDynParam._m0[5u].y;
        float _3934 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1046 = (cbMatDynParam._m0[5u].z * _1035) + cbMatDynParam._m0[5u].w;
        float _3945 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _1042)) + _1042) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _894 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _897 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _900 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _913 = uint(roundEven(NORMAL.w)) * 13u;
    uint _914 = _913 + 9u;
    uint _915 = _914 + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_915].z;
    float _3956 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _927 = 1.0 - _781;
    float _928 = _924 * _927;
    float _929 = _925 * _927;
    float _930 = _926 * _927;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _781;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _781;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _781;
    float _938 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _953 = _950.x * TEXCOORD_5.w;
    float _954 = dot(vec3(_774, _775, _776), vec3(_854, _855, _856));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _774) - _854;
    float _962 = (_957 * _775) - _855;
    float _963 = (_957 * _776) - _856;
    float _967 = abs(dot(vec3(_854, _855, _856), vec3(_774, _775, _776)));
    float _3989 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_777);
    float _981 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _987 = (1.0 - _981) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _969;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1083 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1087 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1112 = _1016 + _774;
        float _1113 = _1020 + _775;
        float _1114 = _1024 + _776;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_774, _775, _776), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _4037 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_774, _775, _776), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4070 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_774, _775, _776), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4103 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1402 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1406 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1429 = _1016 + _774;
        float _1430 = _1020 + _775;
        float _1431 = _1024 + _776;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_774, _775, _776), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4166 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_774, _775, _776), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4199 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_774, _775, _776), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4232 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = _1355;
        _1676 = _1355;
        _1677 = _1355;
        _1678 = _1355;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1367)) + _1367;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1368)) + _1368;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1369)) + _1369;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _961 * 0.5;
    float _1736 = _962 * 0.5;
    float _1737 = _963 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1865 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1868 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1896 = frontier_phi_17_15_ladder;
        }
        float _2099;
        if (_1865 > 0.0)
        {
            _2099 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2099 = frontier_phi_26_22_ladder;
        }
        float _2353;
        if (_1868 > 0.0)
        {
            _2353 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2353 = frontier_phi_38_33_ladder;
        }
        float _2355 = isnan(_2099) ? _1896 : (isnan(_1896) ? _2099 : min(_1896, _2099));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1862) + _1851;
        float _2361 = (_2356 * _1865) + _1855;
        float _2362 = (_2356 * _1868) + _1859;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_16_38_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_16_38_ladder_2;
        _1886 = frontier_phi_16_38_ladder_1;
        _1888 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1804);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1960 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1963 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2104;
        if (_1957 > 0.0)
        {
            _2104 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2104 = frontier_phi_28_24_ladder;
        }
        float _2380;
        if (_1960 > 0.0)
        {
            _2380 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2380 = frontier_phi_40_35_ladder;
        }
        float _2593;
        if (_1963 > 0.0)
        {
            _2593 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2593 = frontier_phi_49_46_ladder;
        }
        float _2595 = isnan(_2380) ? _2104 : (isnan(_2104) ? _2380 : min(_2104, _2380));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1957) + _1946;
        float _2601 = (_2596 * _1960) + _1950;
        float _2602 = (_2596 * _1963) + _1954;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_25_49_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_25_49_ladder_2;
        _1984 = frontier_phi_25_49_ladder_1;
        _1986 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1893);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1999 = (((_987 * _938) + _988) * _953) * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2001 = (((_987 * _940) + _988) * _953) * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2003 = (((_987 * _941) + _988) * _953) * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    uvec4 _2022 = floatBitsToUint(cbInstanceData._m0[_913 + 5u]);
    uint _2024 = _2022.x * 14u;
    uint _2025 = _2024 + 13u;
    float _2032 = _953 + (-1.0);
    float _2037 = (cbLight._m0[_2025].x * _2032) + 1.0;
    float _2038 = (cbLight._m0[_2025].y * _2032) + 1.0;
    float _2039 = (cbLight._m0[_2025].z * _2032) + 1.0;
    float _2040 = (cbLight._m0[_2025].w * _2032) + 1.0;
    uint _2041 = _2024 + 5u;
    float _2047 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2051 = _2024 + 4u;
    float _2058 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2062 = _2024 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_774, _775, _776));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_774, _775, _776));
    float _4368 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4379 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2041].x * _2047) * _2083) + ((cbLight._m0[_2051].x * _2058) * _2081);
    float _2091 = ((_2047 * cbLight._m0[_2041].y) * _2083) + ((_2058 * cbLight._m0[_2051].y) * _2081);
    float _2092 = ((_2047 * cbLight._m0[_2041].z) * _2083) + ((_2058 * cbLight._m0[_2051].z) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2024 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2024 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2024 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4390 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2136 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2324 = _2024 + 7u;
        float _2340 = (dot(vec3(cbLight._m0[_2024 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4406 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2343 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2154 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2109;
        _2156 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2111;
        _2158 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2113;
    }
    uint _2161 = _2024 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _777) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2024].x + _854;
    float _2177 = cbLight._m0[_2024].y + _855;
    float _2178 = cbLight._m0[_2024].z + _856;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2024].xyz));
    float _4422 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2190 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2191 = dot(vec3(_774, _775, _776), vec3(_2183, _2184, _2185));
    float _4444 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2183, _2184, _2185));
    float _4455 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _935;
    float _2214 = 0.959999978542327880859375 - _936;
    float _2215 = 0.959999978542327880859375 - _937;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4466 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2246 = _2024 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _777) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2062].x + _854;
    float _2260 = cbLight._m0[_2062].y + _855;
    float _2261 = cbLight._m0[_2062].z + _856;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2062].xyz));
    float _4477 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2273 = dot(vec3(_774, _775, _776), vec3(_2266, _2267, _2268));
    float _4488 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2266, _2267, _2268));
    float _4499 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2299 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2190 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2299) + _2258) * _2272))) * _2272;
    float _4510 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2321 = (((((_2292 * _2212) + _938) * cbLight._m0[_2246].x) * _2311) * _2047) + (((((_2211 * _2212) + _938) * cbLight._m0[_2161].x) * _2235) * _2058);
    float _2322 = (((((_2292 * _2214) + _940) * cbLight._m0[_2246].y) * _2311) * _2047) + (((((_2211 * _2214) + _940) * cbLight._m0[_2161].y) * _2235) * _2058);
    float _2323 = (((((_2292 * _2215) + _941) * cbLight._m0[_2246].z) * _2311) * _2047) + (((((_2211 * _2215) + _941) * cbLight._m0[_2161].z) * _2235) * _2058);
    float _2385;
    float _2387;
    float _2389;
    if (_2098)
    {
        _2385 = _2321;
        _2387 = _2322;
        _2389 = _2323;
    }
    else
    {
        uint _2391 = _2024 + 2u;
        uint _2395 = _2024 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _777) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _854;
        float _2412 = cbLight._m0[_2391].y + _855;
        float _2413 = cbLight._m0[_2391].z + _856;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2391].xyz));
        float _4521 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2425 = dot(vec3(_774, _775, _776), vec3(_2418, _2419, _2420));
        float _4532 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4543 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2190 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2451) + _2410) * _2424))) * _2424;
        float _4554 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2385 = (((((_2444 * _2212) + _938) * cbLight._m0[_2395].x) * _2463) * _2464) + _2321;
        _2387 = (((((_2444 * _2214) + _940) * cbLight._m0[_2395].y) * _2463) * _2464) + _2322;
        _2389 = (((((_2444 * _2215) + _941) * cbLight._m0[_2395].z) * _2463) * _2464) + _2323;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2116)
    {
        _2499 = _2385;
        _2501 = _2387;
        _2503 = _2389;
    }
    else
    {
        uint _2510 = _2024 + 3u;
        uint _2514 = _2024 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _777) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _854;
        float _2531 = cbLight._m0[_2510].y + _855;
        float _2532 = cbLight._m0[_2510].z + _856;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2510].xyz));
        float _4570 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2544 = dot(vec3(_774, _775, _776), vec3(_2537, _2538, _2539));
        float _4581 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4592 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2190 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2570) + _2529) * _2543))) * _2543;
        float _4603 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2499 = (((((_2563 * _2212) + _938) * cbLight._m0[_2514].x) * _2582) * _2583) + _2385;
        _2501 = (((((_2563 * _2214) + _940) * cbLight._m0[_2514].y) * _2582) * _2583) + _2387;
        _2503 = (((((_2563 * _2215) + _941) * cbLight._m0[_2514].z) * _2582) * _2583) + _2389;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2022.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
        }
        else
        {
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            uint _3018 = 0u;
            uint _3027;
            bool _3028;
            for (;;)
            {
                _3027 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                _3028 = _3027 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3028)
                {
                    frontier_phi_66_pred = _3012;
                    frontier_phi_66_pred_1 = _3017;
                    frontier_phi_66_pred_2 = _3016;
                    frontier_phi_66_pred_3 = _3015;
                    frontier_phi_66_pred_4 = _3014;
                    frontier_phi_66_pred_5 = _3013;
                }
                else
                {
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    uint _3163;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3027;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3167 = uint(findLSB(_3163)) + (_3018 << 5u);
                        uint _3164 = (_3163 + 4294967295u) & _3163;
                        uint _3169 = _3167 * 48u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 3u)).x));
                        uint _3189 = (_3167 * 48u) + 4u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3208 = (_3167 * 48u) + 8u;
                        vec3 _3219 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x));
                        float _3223 = _3183.x - _2659;
                        float _3224 = _3183.y - _2660;
                        float _3225 = _3183.z - _2661;
                        float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                        float _3229 = inversesqrt(_3226);
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3233 = dot(vec3(_894, _897, _900), vec3(_3230, _3231, _3232));
                        float _3238 = 1.0 - (_3226 * _3183.w);
                        float _4629 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3240 = sqrt(_3226) * _3202.w;
                        float _3243 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                        float _3244 = _3243 * _3243;
                        float _3247 = ((1.0 - _3244) * _3233) + _3244;
                        float _3250 = _3240 * _3240;
                        float _3254 = ((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3239) / ((_3250 * 0.699999988079071044921875) + 1.0);
                        float _3258 = (-0.0) - _2659;
                        float _3259 = (-0.0) - _2660;
                        float _3260 = (-0.0) - _2661;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3275 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                        float _3276 = 1.0 - _969;
                        float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                        float _3284 = _3283 * _3283;
                        float _3285 = _3284 * _3284;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                        float _3296 = dot(vec3(_894, _897, _900), vec3(_3265, _3266, _3267));
                        float _4645 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3300 = dot(vec3(_894, _897, _900), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                        float _4656 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                        float _3308 = _3243 * _3284;
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3233) + _3309;
                        float _4667 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3314 = 1.0 - _3284;
                        float _3324 = (0.5 / (((_3313 * ((_3299 * _3314) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3284) * _3299))) * _3313;
                        float _4678 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3335 = (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3307 * _3307) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125))) * _3239;
                        _3087 = (_3254 * _3202.x) + _3160;
                        _3088 = (_3254 * _3202.y) + _3161;
                        _3089 = (_3254 * _3202.z) + _3162;
                        _3084 = (_3335 * _3219.x) + _3157;
                        _3085 = (_3335 * _3219.y) + _3158;
                        _3086 = (_3335 * _3219.z) + _3159;
                        if (_3164 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3164;
                        }
                    }
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3089;
                    frontier_phi_66_pred_2 = _3088;
                    frontier_phi_66_pred_3 = _3087;
                    frontier_phi_66_pred_4 = _3086;
                    frontier_phi_66_pred_5 = _3085;
                }
                _2852 = frontier_phi_66_pred;
                _2862 = frontier_phi_66_pred_1;
                _2860 = frontier_phi_66_pred_2;
                _2858 = frontier_phi_66_pred_3;
                _2856 = frontier_phi_66_pred_4;
                _2854 = frontier_phi_66_pred_5;
                uint _3019 = _3018 + 1u;
                if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3012 = _2852;
                    _3013 = _2854;
                    _3014 = _2856;
                    _3015 = _2858;
                    _3016 = _2860;
                    _3017 = _2862;
                    _3018 = _3019;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
        }
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.z;
        uint _2868 = (_2866 >> 8u) & 15u;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((4294967295u << _2868) & _2705) == 0u)
        {
            _2980 = _2851;
            _2982 = _2853;
            _2984 = _2855;
            _2986 = _2857;
            _2988 = _2859;
            _2990 = _2861;
        }
        else
        {
            float _3005 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _3006 = _3005 * _2659;
            float _3007 = _3005 * _2660;
            float _3008 = _3005 * _2661;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2868 < ((_2866 >> 12u) & 15u))
            {
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _3140 = _2851;
                float _3141 = _2853;
                float _3142 = _2855;
                float _3143 = _2857;
                float _3144 = _2859;
                float _3145 = _2861;
                uint _3146 = _2868;
                uint _3155;
                bool _3156;
                for (;;)
                {
                    _3155 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                    _3156 = _3155 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3156)
                    {
                        frontier_phi_77_pred = _3145;
                        frontier_phi_77_pred_1 = _3144;
                        frontier_phi_77_pred_2 = _3143;
                        frontier_phi_77_pred_3 = _3142;
                        frontier_phi_77_pred_4 = _3141;
                        frontier_phi_77_pred_5 = _3140;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        uint _3368 = _3155;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3379 = ((_3146 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3455 = (_3379 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3379 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2661, _3487.z, fma(_2660, _3487.y, _3487.x * _2659)) + _3487.w;
                            _3500 = !((fma(_2661, _3468.z, fma(_2660, _3468.y, _3468.x * _2659)) + _3468.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3394.x - _2659;
                                float _3528 = _3394.y - _2660;
                                float _3529 = _3394.z - _2661;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3395 * _3395));
                                float _4689 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3545 = sqrt(_3530) * _3410.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_894, _897, _900))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2661, _3437.z, fma(_2660, _3437.y, _3437.x * _2659)) + _3437.w) / _3499;
                                float _3559 = (fma(_2661, _3452.z, fma(_2660, _3452.y, _3452.x * _2659)) + _3452.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4705 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _969;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3006;
                                float _3589 = _3535 - _3007;
                                float _3590 = _3536 - _3008;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_894, _897, _900), vec3((-0.0) - _3006, (-0.0) - _3007, (-0.0) - _3008));
                                float _4716 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3602 = dot(vec3(_894, _897, _900), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4727 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_894, _897, _900), vec3(_3534, _3535, _3536))) + _3611;
                                float _4738 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4749 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3565 * _3410.y;
                                frontier_phi_83_pred_1 = _3565 * _3410.x;
                                frontier_phi_83_pred_2 = _3639 * _3422.z;
                                frontier_phi_83_pred_3 = _3639 * _3422.y;
                                frontier_phi_83_pred_4 = _3639 * _3422.x;
                                frontier_phi_83_pred_5 = _3565 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_83_pred;
                            _3646 = frontier_phi_83_pred_1;
                            _3645 = frontier_phi_83_pred_2;
                            _3644 = frontier_phi_83_pred_3;
                            _3643 = frontier_phi_83_pred_4;
                            _3648 = frontier_phi_83_pred_5;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3354;
                        frontier_phi_77_pred_1 = _3353;
                        frontier_phi_77_pred_2 = _3352;
                        frontier_phi_77_pred_3 = _3351;
                        frontier_phi_77_pred_4 = _3350;
                        frontier_phi_77_pred_5 = _3349;
                    }
                    _2991 = frontier_phi_77_pred;
                    _2989 = frontier_phi_77_pred_1;
                    _2987 = frontier_phi_77_pred_2;
                    _2985 = frontier_phi_77_pred_3;
                    _2983 = frontier_phi_77_pred_4;
                    _2981 = frontier_phi_77_pred_5;
                    uint _3147 = _3146 + 1u;
                    if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3140 = _2981;
                        _3141 = _2983;
                        _3142 = _2985;
                        _3143 = _2987;
                        _3144 = _2989;
                        _3145 = _2991;
                        _3146 = _3147;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2985;
                frontier_phi_58_59_ladder_1 = _2991;
                frontier_phi_58_59_ladder_2 = _2989;
                frontier_phi_58_59_ladder_3 = _2987;
                frontier_phi_58_59_ladder_4 = _2983;
                frontier_phi_58_59_ladder_5 = _2981;
            }
            else
            {
                frontier_phi_58_59_ladder = _2855;
                frontier_phi_58_59_ladder_1 = _2861;
                frontier_phi_58_59_ladder_2 = _2859;
                frontier_phi_58_59_ladder_3 = _2857;
                frontier_phi_58_59_ladder_4 = _2853;
                frontier_phi_58_59_ladder_5 = _2851;
            }
            _2980 = frontier_phi_58_59_ladder_5;
            _2982 = frontier_phi_58_59_ladder_4;
            _2984 = frontier_phi_58_59_ladder;
            _2986 = frontier_phi_58_59_ladder_3;
            _2988 = frontier_phi_58_59_ladder_2;
            _2990 = frontier_phi_58_59_ladder_1;
        }
        float _2995 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2718 = (_2995 * _2986) + _2154;
        _2720 = (_2995 * _2988) + _2156;
        _2722 = (_2995 * _2990) + _2158;
        _2724 = ((_2980 * _938) * _2995) + _2499;
        _2726 = ((_2982 * _940) * _2995) + _2501;
        _2728 = ((_2984 * _941) * _2995) + _2503;
    }
    else
    {
        _2718 = _2154;
        _2720 = _2156;
        _2722 = _2158;
        _2724 = _2499;
        _2726 = _2501;
        _2728 = _2503;
    }
    uint _2734 = _914 + uint(cbMatDynParam._m0[0u].w);
    float _2740 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2746 = (((((_2740 * cbMtdParam._m0[14u].x) * _659.x) * _682) * _760) * (((1.0 - _735) * cbMtdParam._m0[20u].w) + _735)) * cbInstanceData._m0[_2734].x;
    float _2752 = (((((_2740 * cbMtdParam._m0[14u].y) * _659.y) * _682) * _760) * (((1.0 - _737) * cbMtdParam._m0[20u].w) + _737)) * cbInstanceData._m0[_2734].y;
    float _2758 = (((((_2740 * cbMtdParam._m0[14u].z) * _659.z) * _682) * _760) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_2734].z;
    float _4765 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4776 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4787 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2775 = (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2718 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _953))) + ((_2724 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1793)) * cbPerFrame._m0[3u].x)) + _2746;
    float _2777 = (_2752 + ((_2726 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1793)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2720 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _953)));
    float _2779 = (_2758 + ((_2728 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1793)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2722 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _953)));
    float _2780 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2781 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2782 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2788 = cbMtdParam._m0[2u].x * _2746;
    float _2789 = cbMtdParam._m0[2u].y * _2752;
    float _2790 = cbMtdParam._m0[2u].z * _2758;
    float _4813 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2792 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    uint _2793 = _913 + 6u;
    float _2801 = _874 / cbSceneParam._m0[86u].x;
    float _2802 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2816 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2818 = _2816.x;
    float _2819 = _2816.y;
    float _2820 = _2816.z;
    float _2821 = _2816.w;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _2876 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _2877 = _2876 / _797;
        float _2888 = _2877 * _847;
        float _2889 = _848 * _2877;
        float _2890 = (-0.0) - _2889;
        float _2891 = _2877 * _849;
        float _2893 = (cbSceneParam._m0[77u].w * _2890) / _2876;
        float _2894 = _2893 + cbSceneParam._m0[79u].w;
        float _2895 = cbSceneParam._m0[79u].w - _2889;
        float _2901 = sqrt(((_2888 * _2888) + (_2889 * _2889)) + (_2891 * _2891));
        float _2904 = (1.0 - (cbSceneParam._m0[77u].w / _2876)) * _2901;
        float _2909 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2911 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2890 - _2893) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2894 > 0.0) ? exp2(_2909 * _2894) : (2.0 - exp2(_2911 * _2894))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2904;
        }
        else
        {
            float _3041 = 1.0 / cbSceneParam._m0[80u].x;
            float _3042 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : max(_2894, _2895));
            float _3043 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : min(_2894, _2895));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            _3097 = ((abs(_2901 / _2890) * cbSceneParam._m0[80u].y) * ((((_3052 - _3053) * 2.0) - ((exp2(_2909 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0)))) - exp2(_2909 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))))) * _3041)) - ((exp2(_2911 * _3052) - exp2(_2911 * _3053)) * _3041))) + (_2904 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2821);
        _2913 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2818;
        _2915 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2819;
        _2917 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2820;
        _2919 = _3108 * _2821;
    }
    else
    {
        _2913 = _2818;
        _2915 = _2819;
        _2917 = _2820;
        _2919 = _2821;
    }
    bool _3135;
    vec4 _2929;
    vec4 _2951;
    float _2953;
    float _2957;
    float _2958;
    float _2959;
    float _2962;
    float _2965;
    float _2968;
    float _2969;
    bool _2979;
    for (;;)
    {
        _2929 = cbMatDynParam._m0[0u];
        float _2931 = roundEven(_2929.y);
        bool _2932 = _2931 == 3.0;
        float _2933 = log2(_2919);
        float _2937 = exp2(_2933 * cbSceneParam._m0[78u].x);
        float _2938 = exp2(_2933 * cbSceneParam._m0[78u].y);
        float _2939 = exp2(_2933 * cbSceneParam._m0[78u].z);
        float _2940 = _2937 * _2780;
        float _2941 = _2938 * _2781;
        float _2942 = _2939 * _2782;
        float _2949 = _863 + (-0.5);
        _2951 = cbMtdParam._m0[1u];
        _2953 = _2951.y * _2949;
        float _2956 = (_2931 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2957 = _2956 * (_2932 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2913)));
        _2958 = _2956 * (_2932 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2915)));
        _2959 = _2956 * (_2932 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2917)));
        _2962 = ((_2788 * _2792) * _2937) * _2956;
        _2965 = ((_2789 * _2792) * _2938) * _2956;
        _2968 = ((_2790 * _2792) * _2939) * _2956;
        _2969 = _2949 * 0.999000012874603271484375;
        _2979 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2979)
        {
            if ((cbInstanceData._m0[_913 + 7u].x + _2969) < 0.5)
            {
                _3135 = true;
                break;
            }
        }
        uint _3076 = _914 + uint(_2929.w);
        if ((cbInstanceData._m0[_3076].w < 1.0) && ((cbInstanceData._m0[_3076].w + _2969) < 0.5))
        {
            _3135 = true;
            break;
        }
        if ((_2953 + 1.0) < _2951.x)
        {
            _3135 = true;
            break;
        }
        _3135 = false;
        break;
    }
    float _3340;
    if (_3135)
    {
        discard_state = true;
        _3340 = 0.0;
    }
    else
    {
        _3340 = cbInstanceData._m0[_2793].w;
    }
    SV_Target.x = _2957;
    SV_Target.y = _2958;
    SV_Target.z = _2959;
    SV_Target.w = _3340;
    SV_Target_1.x = _2962;
    SV_Target_1.y = _2965;
    SV_Target_1.z = _2968;
    SV_Target_1.w = cbInstanceData._m0[_2793].w;
    discard_exit();
}


