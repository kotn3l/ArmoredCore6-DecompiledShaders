#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1339;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _291 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _310 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _338 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _348 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _310.x) * 2.0) - _338)) + 1.0;
    float _3744 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _356 = (_349 * ((_291.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _357 = (_349 * ((_291.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _358 = (_349 * ((_291.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _376 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _389 = (((((1.0 - _310.y) * 2.0) - _338) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3755 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _356) * _390) + _356;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _357)) + _357;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _358)) + _358;
    vec4 _417 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _430 = (((((1.0 - _310.z) * 2.0) - _338) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3766 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _453 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _468 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _488 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _470) * _349) + _470;
    float _505 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _488) * _390) + _488;
    float _522 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _505) * _431) + _505;
    vec4 _535 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    vec4 _551 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _562 = ((_551.x - _537) * _349) + _537;
    float _563 = ((_551.y - _538) * _349) + _538;
    float _564 = ((_551.z - _539) * _349) + _539;
    vec4 _577 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _588 = ((_577.x - _562) * _390) + _562;
    float _589 = ((_577.y - _563) * _390) + _563;
    float _590 = ((_577.z - _564) * _390) + _564;
    vec4 _603 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _616 = ((_603.z - _590) * _431) + _590;
    float _619 = ((((_603.x - _588) * _431) + _588) * 2.0) + (-1.0);
    float _621 = ((((_603.y - _589) * _431) + _589) * 2.0) + (-1.0);
    float _622 = dot(vec2(_619, _621), vec2(_619, _621));
    float _3777 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))));
    vec4 _659 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _673 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3788 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _682 = (((_674 * _674) * (3.0 - (_674 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _690 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _698 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3799 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _703 = (_699 * _699) * (3.0 - (_699 * 2.0));
    float _704 = _703 * cbMtdParam._m0[22u].x;
    float _705 = _703 * cbMtdParam._m0[22u].y;
    float _706 = sin(_690);
    float _707 = cos(_690);
    float _708 = TEXCOORD.z - _704;
    float _709 = TEXCOORD.w - _705;
    vec4 _729 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_704 + fma(_709, (-0.0) - _706, _708 * _707))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_709, _707, _708 * _706) + _705)) + cbTextureTilingScale._m0[2u].w));
    float _735 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _729.x;
    float _737 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _729.y;
    float _739 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _729.z;
    float _759 = (TEXCOORD_5.x - (((_453.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3810 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    vec4 _773 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _783 = (((_773.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _619;
    float _784 = (((_773.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _621;
    float _787 = fma(_627, _235 * NORMAL.x, fma(_784, _242 * TANGENT.x, (_228 * _220) * _783));
    float _790 = fma(_627, _235 * NORMAL.y, fma(_784, _242 * TANGENT.y, (_228 * _221) * _783));
    float _793 = fma(_627, _235 * NORMAL.z, fma(_784, _242 * TANGENT.z, (_228 * _222) * _783));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3821 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _801 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3843 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3854 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3865 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _805 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _909 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _912 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _925 = uint(roundEven(NORMAL.w)) * 13u;
    uint _926 = _925 + 9u;
    uint _927 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _933 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_927].x;
    float _934 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_927].y;
    float _935 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_927].z;
    float _3876 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _939 = 1.0 - _805;
    float _940 = _936 * _939;
    float _941 = _937 * _939;
    float _942 = _938 * _939;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _805;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _805;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _805;
    float _950 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    vec4 _962 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _965 = _962.x * TEXCOORD_5.w;
    float _966 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _798) - _878;
    float _974 = (_969 * _799) - _879;
    float _975 = (_969 * _800) - _880;
    float _979 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _3909 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_801);
    float _993 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _999 = (1.0 - _993) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _981;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1067 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1071 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1096 = _1028 + _798;
        float _1097 = _1032 + _799;
        float _1098 = _1036 + _800;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_798, _799, _800), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3957 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_798, _799, _800), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3990 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_798, _799, _800), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4023 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1379 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1383 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1387 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1410 = _1028 + _798;
        float _1411 = _1032 + _799;
        float _1412 = _1036 + _800;
        float _1422 = fma(_1412, cbModelParam._m0[30u].z, fma(_1411, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410)) - _1379;
        float _1423 = fma(_1412, cbModelParam._m0[31u].z, fma(_1411, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410)) - _1383;
        float _1424 = fma(_1412, cbModelParam._m0[32u].z, fma(_1411, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410)) - _1387;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1379 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1383 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[35u].z) + ((((((_1387 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1478 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1445.x + (-0.5));
        float _1480 = _1478 * (_1445.y + (-0.5));
        float _1481 = _1478 * (_1445.z + (-0.5));
        float _1488 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1452.x + (-0.5));
        float _1490 = _1488 * (_1452.y + (-0.5));
        float _1491 = _1488 * (_1452.z + (-0.5));
        float _1498 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1459.x + (-0.5));
        float _1500 = _1498 * (_1459.y + (-0.5));
        float _1501 = _1498 * (_1459.z + (-0.5));
        float _1508 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1466.x + (-0.5));
        float _1510 = _1508 * (_1466.y + (-0.5));
        float _1511 = _1508 * (_1466.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_798, _799, _800), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4086 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1542 + 1.0))) + _1547) * _1512;
        float _1557 = _1480 * 0.5;
        float _1558 = _1490 * 0.5;
        float _1559 = _1500 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_798, _799, _800), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4119 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1584 + 1.0))) + _1589) * _1513;
        float _1599 = _1481 * 0.5;
        float _1600 = _1491 * 0.5;
        float _1601 = _1501 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_798, _799, _800), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4152 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1626 + 1.0))) + _1631) * _1514;
        _1648 = _1481;
        _1649 = _1480;
        _1650 = _1479;
        _1651 = _1491;
        _1652 = _1490;
        _1653 = _1489;
        _1654 = _1501;
        _1655 = _1500;
        _1656 = _1499;
        _1657 = _1514;
        _1658 = _1513;
        _1659 = _1512;
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1339;
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = _1339;
        _1660 = 0.0;
        _1661 = 0.0;
        _1662 = 0.0;
    }
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1351)) + _1351;
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1352)) + _1352;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1353)) + _1353;
    float _1695 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1672));
    float _1716 = _973 * 0.5;
    float _1717 = _974 * 0.5;
    float _1718 = _975 * 0.5;
    float _1719 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1722 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1725 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1759;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1732 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1736 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1740 = dot(vec4(_1716, _1717, _1718, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1747 = dot(vec4(cbModelParam._m0[39u]), vec4(_1716, _1717, _1718, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1770;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1761 = dot(vec4(cbModelParam._m0[40u]), vec4(_1716, _1717, _1718, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1774 = (_1770 * cbModelParam._m0[1u].x) + (_1759 * (1.0 - cbModelParam._m0[1u].x));
    float _1784 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1785 = isnan(_1784) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1784 : min(cbModelParam._m0[25u].z, _1784));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1846 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1849 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1877 = frontier_phi_14_12_ladder;
        }
        float _2101;
        if (_1846 > 0.0)
        {
            _2101 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2101 = frontier_phi_23_19_ladder;
        }
        float _2358;
        if (_1849 > 0.0)
        {
            _2358 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2358 = frontier_phi_35_30_ladder;
        }
        float _2360 = isnan(_2101) ? _1877 : (isnan(_1877) ? _2101 : min(_1877, _2101));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1843) + _1832;
        float _2366 = (_2361 * _1846) + _1836;
        float _2367 = (_2361 * _1849) + _1840;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2368;
        float _2372 = _2368 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 > _2372) || ((_2366 < _2370) || ((_2365 < _2370) || (_2365 > _2372))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1785);
            frontier_phi_13_35_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_13_35_ladder_2;
        _1867 = frontier_phi_13_35_ladder_1;
        _1869 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1785);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1941 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1944 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2106;
        if (_1938 > 0.0)
        {
            _2106 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2106 = frontier_phi_25_21_ladder;
        }
        float _2385;
        if (_1941 > 0.0)
        {
            _2385 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2385 = frontier_phi_37_32_ladder;
        }
        float _2598;
        if (_1944 > 0.0)
        {
            _2598 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2598 = frontier_phi_46_43_ladder;
        }
        float _2600 = isnan(_2385) ? _2106 : (isnan(_2106) ? _2385 : min(_2106, _2385));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1938) + _1927;
        float _2606 = (_2601 * _1941) + _1931;
        float _2607 = (_2601 * _1944) + _1935;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_22_46_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_22_46_ladder_2;
        _1965 = frontier_phi_22_46_ladder_1;
        _1967 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1874);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1980 = (((_999 * _950) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1963 - _1865)) + _1865);
    float _1982 = (((_999 * _952) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1965 - _1867)) + _1867);
    float _1984 = (((_999 * _953) + _1000) * _965) * ((cbModelParam._m0[1u].w * (_1967 - _1869)) + _1869);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    vec4 _2001 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_886, _887));
    float _2003 = _2001.w;
    float _2015 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2003);
    float _2016 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2003);
    float _2017 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2003);
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_925 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _965 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2060 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2064 = _2023 | 1u;
    float _2075 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_798, _799, _800));
    float _2078 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_798, _799, _800));
    float _4288 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _4299 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2083 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2085 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2092 = ((cbLight._m0[_2040].x * _2046) * _2085) + (((cbLight._m0[_2050].x * _2015) * _2060) * _2083);
    float _2093 = ((_2046 * cbLight._m0[_2040].y) * _2085) + (((cbLight._m0[_2050].y * _2016) * _2060) * _2083);
    float _2094 = ((_2046 * cbLight._m0[_2040].z) * _2085) + (((cbLight._m0[_2050].z * _2017) * _2060) * _2083);
    uvec4 _2098 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2100 = _2098.x == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2100)
    {
        _2111 = _2092;
        _2113 = _2093;
        _2115 = _2094;
    }
    else
    {
        uint _2119 = _2023 + 6u;
        float _2135 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2136 = _2135 * _2135;
        float _4310 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2137 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2138 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2111 = (((cbLight._m0[_2119].x * 0.3183098733425140380859375) * _2137) * _2138) + _2092;
        _2113 = (((cbLight._m0[_2119].y * 0.3183098733425140380859375) * _2137) * _2138) + _2093;
        _2115 = (((cbLight._m0[_2119].z * 0.3183098733425140380859375) * _2137) * _2138) + _2094;
    }
    bool _2118 = _2098.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2118)
    {
        _2156 = _2111;
        _2158 = _2113;
        _2160 = _2115;
    }
    else
    {
        uint _2329 = _2023 + 7u;
        float _2345 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4326 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2348 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2156 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2111;
        _2158 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2113;
        _2160 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2115;
    }
    uint _2163 = _2023 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _801) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_2023].x + _878;
    float _2179 = cbLight._m0[_2023].y + _879;
    float _2180 = cbLight._m0[_2023].z + _880;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2023].xyz));
    float _4342 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2192 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2193 = dot(vec3(_798, _799, _800), vec3(_2185, _2186, _2187));
    float _4364 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2185, _2186, _2187));
    float _4375 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2214 = 0.959999978542327880859375 - _947;
    float _2216 = 0.959999978542327880859375 - _948;
    float _2217 = 0.959999978542327880859375 - _949;
    float _2224 = 1.0 - _2177;
    float _2235 = (0.5 / (((_2192 * ((_2191 * _2224) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2224) + _2177) * _2191))) * _2191;
    float _4386 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2251 = _2023 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _801) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2064].x + _878;
    float _2265 = cbLight._m0[_2064].y + _879;
    float _2266 = cbLight._m0[_2064].z + _880;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2064].xyz));
    float _4397 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2278 = dot(vec3(_798, _799, _800), vec3(_2271, _2272, _2273));
    float _4408 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2271, _2272, _2273));
    float _4419 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
    float _2304 = 1.0 - _2263;
    float _2314 = (0.5 / (((_2192 * ((_2277 * _2304) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2304) + _2263) * _2277))) * _2277;
    float _4430 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2316 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2326 = (((((_2297 * _2214) + _950) * cbLight._m0[_2251].x) * _2316) * _2046) + ((((cbLight._m0[_2163].x * _2015) * ((_2213 * _2214) + _950)) * _2237) * _2060);
    float _2327 = (((((_2297 * _2216) + _952) * cbLight._m0[_2251].y) * _2316) * _2046) + ((((cbLight._m0[_2163].y * _2016) * ((_2213 * _2216) + _952)) * _2237) * _2060);
    float _2328 = (((((_2297 * _2217) + _953) * cbLight._m0[_2251].z) * _2316) * _2046) + ((((cbLight._m0[_2163].z * _2017) * ((_2213 * _2217) + _953)) * _2237) * _2060);
    float _2390;
    float _2392;
    float _2394;
    if (_2100)
    {
        _2390 = _2326;
        _2392 = _2327;
        _2394 = _2328;
    }
    else
    {
        uint _2396 = _2023 + 2u;
        uint _2400 = _2023 + 10u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _801) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _878;
        float _2417 = cbLight._m0[_2396].y + _879;
        float _2418 = cbLight._m0[_2396].z + _880;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2396].xyz));
        float _4441 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2430 = dot(vec3(_798, _799, _800), vec3(_2423, _2424, _2425));
        float _4452 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4463 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2192 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2456) + _2415) * _2429))) * _2429;
        float _4474 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2390 = (((((_2449 * _2214) + _950) * cbLight._m0[_2400].x) * _2468) * _2469) + _2326;
        _2392 = (((((_2449 * _2216) + _952) * cbLight._m0[_2400].y) * _2468) * _2469) + _2327;
        _2394 = (((((_2449 * _2217) + _953) * cbLight._m0[_2400].z) * _2468) * _2469) + _2328;
    }
    float _2504;
    float _2506;
    float _2508;
    if (_2118)
    {
        _2504 = _2390;
        _2506 = _2392;
        _2508 = _2394;
    }
    else
    {
        uint _2515 = _2023 + 3u;
        uint _2519 = _2023 + 11u;
        float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2515].w)) * _801) * 0.949999988079071044921875);
        float _2534 = _2533 * _2533;
        float _2535 = cbLight._m0[_2515].x + _878;
        float _2536 = cbLight._m0[_2515].y + _879;
        float _2537 = cbLight._m0[_2515].z + _880;
        float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
        float _2542 = _2541 * _2535;
        float _2543 = _2541 * _2536;
        float _2544 = _2541 * _2537;
        float _2545 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2515].xyz));
        float _4490 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2549 = dot(vec3(_798, _799, _800), vec3(_2542, _2543, _2544));
        float _4501 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2553 = dot(vec3(cbLight._m0[_2515].xyz), vec3(_2542, _2543, _2544));
        float _4512 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2557 = _2534 * _2534;
        float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
        float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
        float _2575 = 1.0 - _2534;
        float _2585 = (0.5 / (((_2192 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2575) + _2534) * _2548))) * _2548;
        float _4523 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2504 = (((((_2568 * _2214) + _950) * cbLight._m0[_2519].x) * _2587) * _2588) + _2390;
        _2506 = (((((_2568 * _2216) + _952) * cbLight._m0[_2519].y) * _2587) * _2588) + _2392;
        _2508 = (((((_2568 * _2217) + _953) * cbLight._m0[_2519].z) * _2587) * _2588) + _2394;
    }
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_2021.y == 0u)
    {
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2663;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2663;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2663;
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2679)));
        float _2700 = (log2(_2666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
        }
        else
        {
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            uint _3015 = 0u;
            uint _3024;
            bool _3025;
            for (;;)
            {
                _3024 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                _3025 = _3024 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3025)
                {
                    frontier_phi_61_pred = _3009;
                    frontier_phi_61_pred_1 = _3014;
                    frontier_phi_61_pred_2 = _3013;
                    frontier_phi_61_pred_3 = _3012;
                    frontier_phi_61_pred_4 = _3011;
                    frontier_phi_61_pred_5 = _3010;
                }
                else
                {
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    uint _3139;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3024;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3143 = uint(findLSB(_3139)) + (_3015 << 5u);
                        uint _3140 = (_3139 + 4294967295u) & _3139;
                        uint _3145 = _3143 * 48u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 3u)).x));
                        uint _3165 = (_3143 * 48u) + 4u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3184 = (_3143 * 48u) + 8u;
                        vec3 _3195 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x));
                        float _3199 = _3159.x - _2664;
                        float _3200 = _3159.y - _2665;
                        float _3201 = _3159.z - _2666;
                        float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                        float _3205 = inversesqrt(_3202);
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3209 = dot(vec3(_906, _909, _912), vec3(_3206, _3207, _3208));
                        float _3214 = 1.0 - (_3202 * _3159.w);
                        float _4549 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3216 = sqrt(_3202) * _3178.w;
                        float _3219 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3209) + _3220;
                        float _3226 = _3216 * _3216;
                        float _3230 = ((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3215) / ((_3226 * 0.699999988079071044921875) + 1.0);
                        float _3234 = (-0.0) - _2664;
                        float _3235 = (-0.0) - _2665;
                        float _3236 = (-0.0) - _2666;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3251 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _981;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3264 = _3243 + _3208;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_906, _909, _912), vec3(_3241, _3242, _3243));
                        float _4565 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3276 = dot(vec3(_906, _909, _912), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4576 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3219 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3209) + _3285;
                        float _4587 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4598 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3283 * _3283) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125))) * _3215;
                        _3068 = (_3230 * _3178.x) + _3136;
                        _3069 = (_3230 * _3178.y) + _3137;
                        _3070 = (_3230 * _3178.z) + _3138;
                        _3065 = (_3311 * _3195.x) + _3133;
                        _3066 = (_3311 * _3195.y) + _3134;
                        _3067 = (_3311 * _3195.z) + _3135;
                        if (_3140 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3140;
                        }
                    }
                    frontier_phi_61_pred = _3065;
                    frontier_phi_61_pred_1 = _3070;
                    frontier_phi_61_pred_2 = _3069;
                    frontier_phi_61_pred_3 = _3068;
                    frontier_phi_61_pred_4 = _3067;
                    frontier_phi_61_pred_5 = _3066;
                }
                _2857 = frontier_phi_61_pred;
                _2867 = frontier_phi_61_pred_1;
                _2865 = frontier_phi_61_pred_2;
                _2863 = frontier_phi_61_pred_3;
                _2861 = frontier_phi_61_pred_4;
                _2859 = frontier_phi_61_pred_5;
                uint _3016 = _3015 + 1u;
                if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3009 = _2857;
                    _3010 = _2859;
                    _3011 = _2861;
                    _3012 = _2863;
                    _3013 = _2865;
                    _3014 = _2867;
                    _3015 = _3016;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
        }
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.z;
        uint _2873 = (_2871 >> 8u) & 15u;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((4294967295u << _2873) & _2710) == 0u)
        {
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
        }
        else
        {
            float _3002 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
            float _3003 = _3002 * _2664;
            float _3004 = _3002 * _2665;
            float _3005 = _3002 * _2666;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2873 < ((_2871 >> 12u) & 15u))
            {
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _3116 = _2856;
                float _3117 = _2858;
                float _3118 = _2860;
                float _3119 = _2862;
                float _3120 = _2864;
                float _3121 = _2866;
                uint _3122 = _2873;
                uint _3131;
                bool _3132;
                for (;;)
                {
                    _3131 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                    _3132 = _3131 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3132)
                    {
                        frontier_phi_67_pred = _3119;
                        frontier_phi_67_pred_1 = _3120;
                        frontier_phi_67_pred_2 = _3121;
                        frontier_phi_67_pred_3 = _3118;
                        frontier_phi_67_pred_4 = _3117;
                        frontier_phi_67_pred_5 = _3116;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3329 = _3116;
                        float _3330 = _3117;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        float _3334 = _3121;
                        uint _3335 = _3131;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3346 = ((_3122 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3422 = (_3346 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3346 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_2666, _3454.z, fma(_2665, _3454.y, _3454.x * _2664)) + _3454.w;
                            _3467 = !((fma(_2666, _3435.z, fma(_2665, _3435.y, _3435.x * _2664)) + _3435.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3361.x - _2664;
                                float _3495 = _3361.y - _2665;
                                float _3496 = _3361.z - _2666;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3362 * _3362));
                                float _4609 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3512 = sqrt(_3497) * _3377.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_906, _909, _912))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_2666, _3404.z, fma(_2665, _3404.y, _3404.x * _2664)) + _3404.w) / _3466;
                                float _3526 = (fma(_2666, _3419.z, fma(_2665, _3419.y, _3419.x * _2664)) + _3419.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4625 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _981;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _3003;
                                float _3556 = _3502 - _3004;
                                float _3557 = _3503 - _3005;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_906, _909, _912), vec3((-0.0) - _3003, (-0.0) - _3004, (-0.0) - _3005));
                                float _4636 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3569 = dot(vec3(_906, _909, _912), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4647 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_906, _909, _912), vec3(_3501, _3502, _3503))) + _3578;
                                float _4658 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4669 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3606 * _3389.x;
                                frontier_phi_73_pred_1 = _3606 * _3389.y;
                                frontier_phi_73_pred_2 = _3532 * _3377.z;
                                frontier_phi_73_pred_3 = _3532 * _3377.y;
                                frontier_phi_73_pred_4 = _3532 * _3377.x;
                                frontier_phi_73_pred_5 = _3606 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_73_pred;
                            _3611 = frontier_phi_73_pred_1;
                            _3615 = frontier_phi_73_pred_2;
                            _3614 = frontier_phi_73_pred_3;
                            _3613 = frontier_phi_73_pred_4;
                            _3612 = frontier_phi_73_pred_5;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3319;
                        frontier_phi_67_pred_1 = _3320;
                        frontier_phi_67_pred_2 = _3321;
                        frontier_phi_67_pred_3 = _3318;
                        frontier_phi_67_pred_4 = _3317;
                        frontier_phi_67_pred_5 = _3316;
                    }
                    _2984 = frontier_phi_67_pred;
                    _2986 = frontier_phi_67_pred_1;
                    _2988 = frontier_phi_67_pred_2;
                    _2982 = frontier_phi_67_pred_3;
                    _2980 = frontier_phi_67_pred_4;
                    _2978 = frontier_phi_67_pred_5;
                    uint _3123 = _3122 + 1u;
                    if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3116 = _2978;
                        _3117 = _2980;
                        _3118 = _2982;
                        _3119 = _2984;
                        _3120 = _2986;
                        _3121 = _2988;
                        _3122 = _3123;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2986;
                frontier_phi_55_56_ladder_1 = _2988;
                frontier_phi_55_56_ladder_2 = _2984;
                frontier_phi_55_56_ladder_3 = _2982;
                frontier_phi_55_56_ladder_4 = _2980;
                frontier_phi_55_56_ladder_5 = _2978;
            }
            else
            {
                frontier_phi_55_56_ladder = _2864;
                frontier_phi_55_56_ladder_1 = _2866;
                frontier_phi_55_56_ladder_2 = _2862;
                frontier_phi_55_56_ladder_3 = _2860;
                frontier_phi_55_56_ladder_4 = _2858;
                frontier_phi_55_56_ladder_5 = _2856;
            }
            _2977 = frontier_phi_55_56_ladder_5;
            _2979 = frontier_phi_55_56_ladder_4;
            _2981 = frontier_phi_55_56_ladder_3;
            _2983 = frontier_phi_55_56_ladder_2;
            _2985 = frontier_phi_55_56_ladder;
            _2987 = frontier_phi_55_56_ladder_1;
        }
        float _2992 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2723 = (_2992 * _2983) + _2156;
        _2725 = (_2992 * _2985) + _2158;
        _2727 = (_2992 * _2987) + _2160;
        _2729 = ((_2977 * _950) * _2992) + _2504;
        _2731 = ((_2979 * _952) * _2992) + _2506;
        _2733 = ((_2981 * _953) * _2992) + _2508;
    }
    else
    {
        _2723 = _2156;
        _2725 = _2158;
        _2727 = _2160;
        _2729 = _2504;
        _2731 = _2506;
        _2733 = _2508;
    }
    uint _2739 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _2745 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2751 = (((((_2745 * cbMtdParam._m0[14u].x) * _659.x) * _682) * _760) * (((1.0 - _735) * cbMtdParam._m0[20u].w) + _735)) * cbInstanceData._m0[_2739].x;
    float _2757 = (((((_2745 * cbMtdParam._m0[14u].y) * _659.y) * _682) * _760) * (((1.0 - _737) * cbMtdParam._m0[20u].w) + _737)) * cbInstanceData._m0[_2739].y;
    float _2763 = (((((_2745 * cbMtdParam._m0[14u].z) * _659.z) * _682) * _760) * (((1.0 - _739) * cbMtdParam._m0[20u].w) + _739)) * cbInstanceData._m0[_2739].z;
    float _4685 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4696 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4707 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2780 = (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2723 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _965))) + ((_2729 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1774)) * cbPerFrame._m0[3u].x)) + _2751;
    float _2782 = (_2757 + ((_2731 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1774)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2725 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _965)));
    float _2784 = (_2763 + ((_2733 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1774)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2727 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _965)));
    float _4733 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2797 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    uint _2798 = _925 + 6u;
    float _2806 = _886 / cbSceneParam._m0[86u].x;
    float _2807 = _887 / cbSceneParam._m0[86u].y;
    vec4 _2821 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2823 = _2821.x;
    float _2824 = _2821.y;
    float _2825 = _2821.z;
    float _2826 = _2821.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2881 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2882 = _2881 / _821;
        float _2893 = _2882 * _871;
        float _2894 = _872 * _2882;
        float _2895 = (-0.0) - _2894;
        float _2896 = _2882 * _873;
        float _2898 = (cbSceneParam._m0[77u].w * _2895) / _2881;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2894;
        float _2906 = sqrt(((_2893 * _2893) + (_2894 * _2894)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2881)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2895 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3038 = 1.0 / cbSceneParam._m0[80u].x;
            float _3039 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3040 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            _3078 = ((abs(_2906 / _2895) * cbSceneParam._m0[80u].y) * ((((_3049 - _3050) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))))) * _3038)) - ((exp2(_2916 * _3049) - exp2(_2916 * _3050)) * _3038))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2826);
        _2918 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2823;
        _2920 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2824;
        _2922 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2825;
        _2924 = _3089 * _2826;
    }
    else
    {
        _2918 = _2823;
        _2920 = _2824;
        _2922 = _2825;
        _2924 = _2826;
    }
    float _2936 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2937 = _2936 == 3.0;
    float _2938 = log2(_2924);
    float _2942 = exp2(_2938 * cbSceneParam._m0[78u].x);
    float _2943 = exp2(_2938 * cbSceneParam._m0[78u].y);
    float _2944 = exp2(_2938 * cbSceneParam._m0[78u].z);
    float _2945 = _2942 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)));
    float _2946 = _2943 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)));
    float _2947 = _2944 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)));
    float _2956 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2956 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.y = _2956 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.z = _2956 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.w = cbInstanceData._m0[_2798].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2751) * _2797) * _2942) * _2956;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2757) * _2797) * _2943) * _2956;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2763) * _2797) * _2944) * _2956;
    SV_Target_1.w = cbInstanceData._m0[_2798].w;
}


