#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1422;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _297 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _316 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _354 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _316.x) * 2.0) - _344)) + 1.0;
    float _3826 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _362 = (_355 * ((_297.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _363 = (_355 * ((_297.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _364 = (_355 * ((_297.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _382 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _395 = (((((1.0 - _316.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3837 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _403 = (((_382.x * cbMtdParam._m0[12u].x) - _362) * _396) + _362;
    float _404 = (_396 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _405 = (_396 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _423 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = (((((1.0 - _316.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3848 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _444 = (((_423.x * cbMtdParam._m0[13u].x) - _403) * _437) + _403;
    float _445 = (_437 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404;
    float _446 = (_437 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405;
    vec4 _471 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _490 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _493 = _490.x + 0.00999999977648258209228515625;
    float _500 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _493)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3859 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _508 = (_501 * ((_471.x * cbMtdParam._m0[16u].x) - _444)) + _444;
    float _509 = (_501 * ((_471.y * cbMtdParam._m0[16u].y) - _445)) + _445;
    float _510 = (_501 * ((_471.z * cbMtdParam._m0[16u].z) - _446)) + _446;
    vec4 _523 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _543 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _525) * _355) + _525;
    float _560 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _543) * _396) + _543;
    float _577 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _560) * _437) + _560;
    float _579 = _577 - (_577 * TEXCOORD_8);
    vec4 _592 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    vec4 _629 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _640 = ((_629.x - _615) * _355) + _615;
    float _641 = ((_629.y - _616) * _355) + _616;
    float _642 = ((_629.z - _617) * _355) + _617;
    vec4 _655 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _666 = ((_655.x - _640) * _396) + _640;
    float _667 = ((_655.y - _641) * _396) + _641;
    float _668 = ((_655.z - _642) * _396) + _642;
    vec4 _681 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _694 = ((_681.z - _668) * _437) + _668;
    float _697 = ((((_681.x - _666) * _437) + _666) * 2.0) + (-1.0);
    float _698 = ((((_681.y - _667) * _437) + _667) * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3870 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    float _709 = (((_592.z - _694) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _694;
    vec4 _739 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _753 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3881 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _762 = (((_754 * _754) * (3.0 - (_754 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _770 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _778 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3892 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _783 = (_779 * _779) * (3.0 - (_779 * 2.0));
    float _784 = _783 * cbMtdParam._m0[22u].x;
    float _785 = _783 * cbMtdParam._m0[22u].y;
    float _786 = sin(_770);
    float _787 = cos(_770);
    float _788 = TEXCOORD.z - _784;
    float _789 = TEXCOORD.w - _785;
    vec4 _809 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_784 + fma(_789, (-0.0) - _786, _788 * _787))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_789, _787, _788 * _786) + _785)) + cbTextureTilingScale._m0[2u].w));
    float _815 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _809.x;
    float _817 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _809.y;
    float _819 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _809.z;
    float _835 = (TEXCOORD_5.x - ((_493 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3903 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    vec4 _849 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _865 = (((((_592.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _697) + (((_849.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _867 = (((((_592.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _698) + (((_849.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _870 = fma(_704, _241 * NORMAL.x, fma(_867, _248 * TANGENT.x, (_234 * _226) * _865));
    float _873 = fma(_704, _241 * NORMAL.y, fma(_867, _248 * TANGENT.y, (_234 * _227) * _865));
    float _876 = fma(_704, _241 * NORMAL.z, fma(_867, _248 * TANGENT.z, (_234 * _228) * _865));
    float _880 = inversesqrt(dot(vec3(_870, _873, _876), vec3(_870, _873, _876)));
    float _881 = _880 * _870;
    float _882 = _880 * _873;
    float _883 = _880 * _876;
    float _3914 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _884 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3936 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3947 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3958 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _888 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _904 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _954 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _944);
    float _955 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _944);
    float _956 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _944);
    float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
    float _961 = _954 * _960;
    float _962 = _955 * _960;
    float _963 = _956 * _960;
    float _969 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _970 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _989 = fma(_883, cbSceneParam._m0[5u].z, fma(_882, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _881));
    float _992 = fma(_883, cbSceneParam._m0[6u].z, fma(_882, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _881));
    float _995 = fma(_883, cbSceneParam._m0[7u].z, fma(_882, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _881));
    uint _1008 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1009 = _1008 + 9u;
    uint _1010 = _1009 + uint(cbMatDynParam._m0[0u].w);
    float _1016 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_1010].x;
    float _1017 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1010].y;
    float _1018 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_1010].z;
    float _3969 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1022 = 1.0 - _888;
    float _1023 = _1019 * _1022;
    float _1024 = _1020 * _1022;
    float _1025 = _1021 * _1022;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _888;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _888;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _888;
    float _1033 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    vec4 _1045 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _969, cbSceneParam._m0[86u].y * _970));
    float _1048 = _1045.x * TEXCOORD_5.w;
    float _1049 = dot(vec3(_881, _882, _883), vec3(_961, _962, _963));
    float _1052 = _1049 * 2.0;
    float _1056 = (_1052 * _881) - _961;
    float _1057 = (_1052 * _882) - _962;
    float _1058 = (_1052 * _883) - _963;
    float _1062 = abs(dot(vec3(_961, _962, _963), vec3(_881, _882, _883)));
    float _4002 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1064 = sqrt(_884);
    float _1076 = exp2((_1064 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1064 * 3.0));
    float _1082 = (1.0 - _1076) * ((_1064 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1083 = _1076 * _1064;
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1421;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1119, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111));
        float _1150 = fma(_1119, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111));
        float _1154 = fma(_1119, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111));
        float _1179 = _1111 + _881;
        float _1180 = _1115 + _882;
        float _1181 = _1119 + _883;
        float _1191 = fma(_1181, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1179)) - _1146;
        float _1192 = fma(_1181, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1179)) - _1150;
        float _1193 = fma(_1181, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1179)) - _1154;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1249 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1215.x + (-0.5));
        float _1251 = _1249 * (_1215.y + (-0.5));
        float _1252 = _1249 * (_1215.z + (-0.5));
        float _1259 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1222.x + (-0.5));
        float _1261 = _1259 * (_1222.y + (-0.5));
        float _1262 = _1259 * (_1222.z + (-0.5));
        float _1269 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1229.x + (-0.5));
        float _1271 = _1269 * (_1229.y + (-0.5));
        float _1272 = _1269 * (_1229.z + (-0.5));
        float _1279 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1236.x + (-0.5));
        float _1281 = _1279 * (_1236.y + (-0.5));
        float _1282 = _1279 * (_1236.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1303 = (dot(vec3(_881, _882, _883), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1313 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4050 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1315 + 1.0))) + _1320) * _1283;
        float _1330 = _1251 * 0.5;
        float _1331 = _1261 * 0.5;
        float _1332 = _1271 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_881, _882, _883), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4083 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1357 + 1.0))) + _1362) * _1284;
        float _1372 = _1252 * 0.5;
        float _1373 = _1262 * 0.5;
        float _1374 = _1272 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_881, _882, _883), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4116 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1399 + 1.0))) + _1404) * _1285;
        _1421 = _1252;
        _1423 = _1251;
        _1424 = _1250;
        _1425 = _1262;
        _1426 = _1261;
        _1427 = _1260;
        _1428 = _1272;
        _1429 = _1271;
        _1430 = _1270;
        _1431 = _1285;
        _1432 = _1284;
        _1433 = _1283;
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1422;
        _1423 = _1422;
        _1424 = _1422;
        _1425 = _1422;
        _1426 = _1422;
        _1427 = _1422;
        _1428 = _1422;
        _1429 = _1422;
        _1430 = _1422;
        _1431 = _1422;
        _1432 = _1422;
        _1433 = _1422;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1462 = fma(_1119, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111));
        float _1466 = fma(_1119, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111));
        float _1470 = fma(_1119, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111));
        float _1493 = _1111 + _881;
        float _1494 = _1115 + _882;
        float _1495 = _1119 + _883;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1462;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1466;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1470;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1524 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1462 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1466 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1470 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1561 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1528.x + (-0.5));
        float _1563 = _1561 * (_1528.y + (-0.5));
        float _1564 = _1561 * (_1528.z + (-0.5));
        float _1571 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1535.x + (-0.5));
        float _1573 = _1571 * (_1535.y + (-0.5));
        float _1574 = _1571 * (_1535.z + (-0.5));
        float _1581 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1542.x + (-0.5));
        float _1583 = _1581 * (_1542.y + (-0.5));
        float _1584 = _1581 * (_1542.z + (-0.5));
        float _1591 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1549.x + (-0.5));
        float _1593 = _1591 * (_1549.y + (-0.5));
        float _1594 = _1591 * (_1549.z + (-0.5));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = _1562 * 0.5;
        float _1599 = _1572 * 0.5;
        float _1600 = _1582 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_881, _882, _883), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4179 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1625 + 1.0))) + _1630) * _1595;
        float _1640 = _1563 * 0.5;
        float _1641 = _1573 * 0.5;
        float _1642 = _1583 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_881, _882, _883), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4212 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1667 + 1.0))) + _1672) * _1596;
        float _1682 = _1564 * 0.5;
        float _1683 = _1574 * 0.5;
        float _1684 = _1584 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_881, _882, _883), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4245 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1709 + 1.0))) + _1714) * _1597;
        _1731 = _1564;
        _1732 = _1563;
        _1733 = _1562;
        _1734 = _1574;
        _1735 = _1573;
        _1736 = _1572;
        _1737 = _1584;
        _1738 = _1583;
        _1739 = _1582;
        _1740 = _1597;
        _1741 = _1596;
        _1742 = _1595;
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
    }
    else
    {
        _1731 = _1422;
        _1732 = _1422;
        _1733 = _1422;
        _1734 = _1422;
        _1735 = _1422;
        _1736 = _1422;
        _1737 = _1422;
        _1738 = _1422;
        _1739 = _1422;
        _1740 = _1422;
        _1741 = _1422;
        _1742 = _1422;
        _1743 = 0.0;
        _1744 = 0.0;
        _1745 = 0.0;
    }
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1434)) + _1434;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1435)) + _1435;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1436)) + _1436;
    float _1778 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1755));
    float _1799 = _1056 * 0.5;
    float _1800 = _1057 * 0.5;
    float _1801 = _1058 * 0.5;
    float _1802 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1805 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1808 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1815 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1421, _1425, _1428, _1431));
        float _1819 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1823 = dot(vec4(_1799, _1800, _1801, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1830 = dot(vec4(cbModelParam._m0[39u]), vec4(_1799, _1800, _1801, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1799, _1800, _1801, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1867 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _884);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1867 : min(cbModelParam._m0[25u].z, _1867));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1119, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1119, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1119, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1058, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056));
        float _1929 = fma(_1058, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056));
        float _1932 = fma(_1058, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1960 = frontier_phi_14_12_ladder;
        }
        float _2183;
        if (_1929 > 0.0)
        {
            _2183 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2183 = frontier_phi_23_19_ladder;
        }
        float _2440;
        if (_1932 > 0.0)
        {
            _2440 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2440 = frontier_phi_35_30_ladder;
        }
        float _2442 = isnan(_2183) ? _1960 : (isnan(_1960) ? _2183 : min(_1960, _2183));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1926) + _1915;
        float _2448 = (_2443 * _1929) + _1919;
        float _2449 = (_2443 * _1932) + _1923;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1868);
            frontier_phi_13_35_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_13_35_ladder_2;
        _1950 = frontier_phi_13_35_ladder_1;
        _1952 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1056, _1057, _1058), _1868);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _884);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1119, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1119, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1119, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1058, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056));
        float _2024 = fma(_1058, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056));
        float _2027 = fma(_1058, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056));
        float _2188;
        if (_2021 > 0.0)
        {
            _2188 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2188 = frontier_phi_25_21_ladder;
        }
        float _2467;
        if (_2024 > 0.0)
        {
            _2467 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2467 = frontier_phi_37_32_ladder;
        }
        float _2680;
        if (_2027 > 0.0)
        {
            _2680 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2680 = frontier_phi_46_43_ladder;
        }
        float _2682 = isnan(_2467) ? _2188 : (isnan(_2188) ? _2467 : min(_2188, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2021) + _2010;
        float _2688 = (_2683 * _2024) + _2014;
        float _2689 = (_2683 * _2027) + _2018;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_22_46_ladder = _2933.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2933.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2933.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_22_46_ladder_2;
        _2048 = frontier_phi_22_46_ladder_1;
        _2050 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1056, _1057, _1058), _1957);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1082 * _1033) + _1083) * _1048) * ((cbModelParam._m0[1u].w * (_2046 - _1948)) + _1948);
    float _2065 = (((_1082 * _1035) + _1083) * _1048) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1082 * _1036) + _1083) * _1048) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    vec4 _2084 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_969, _970));
    float _2086 = _2084.w;
    float _2098 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2086);
    float _2099 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2086);
    float _2100 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2086);
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_1008 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _1048 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_881, _882, _883));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_881, _882, _883));
    float _4381 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4392 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2098) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2099) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2100) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2182)
    {
        _2193 = _2174;
        _2195 = _2175;
        _2197 = _2176;
    }
    else
    {
        uint _2201 = _2106 + 6u;
        float _2217 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4403 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2220 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2193 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _2174;
        _2195 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _2175;
        _2197 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _2176;
    }
    bool _2200 = _2180.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2200)
    {
        _2238 = _2193;
        _2240 = _2195;
        _2242 = _2197;
    }
    else
    {
        uint _2411 = _2106 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_881, _882, _883)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4419 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2430 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2238 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2193;
        _2240 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2195;
        _2242 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2197;
    }
    uint _2245 = _2106 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _884) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2106].x + _961;
    float _2261 = cbLight._m0[_2106].y + _962;
    float _2262 = cbLight._m0[_2106].z + _963;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2106].xyz));
    float _4435 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2274 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2275 = dot(vec3(_881, _882, _883), vec3(_2267, _2268, _2269));
    float _4457 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2267, _2268, _2269));
    float _4468 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2296 = 0.959999978542327880859375 - _1030;
    float _2298 = 0.959999978542327880859375 - _1031;
    float _2299 = 0.959999978542327880859375 - _1032;
    float _2306 = 1.0 - _2259;
    float _2317 = (0.5 / (((_2274 * ((_2273 * _2306) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2306) + _2259) * _2273))) * _2273;
    float _4479 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2333 = _2106 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _884) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2146].x + _961;
    float _2347 = cbLight._m0[_2146].y + _962;
    float _2348 = cbLight._m0[_2146].z + _963;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2146].xyz));
    float _4490 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2360 = dot(vec3(_881, _882, _883), vec3(_2353, _2354, _2355));
    float _4501 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2353, _2354, _2355));
    float _4512 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2274 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2386) + _2345) * _2359))) * _2359;
    float _4523 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2296) + _1033) * cbLight._m0[_2333].x) * _2398) * _2129) + ((((cbLight._m0[_2245].x * _2098) * ((_2295 * _2296) + _1033)) * _2319) * _2142);
    float _2409 = (((((_2379 * _2298) + _1035) * cbLight._m0[_2333].y) * _2398) * _2129) + ((((cbLight._m0[_2245].y * _2099) * ((_2295 * _2298) + _1035)) * _2319) * _2142);
    float _2410 = (((((_2379 * _2299) + _1036) * cbLight._m0[_2333].z) * _2398) * _2129) + ((((cbLight._m0[_2245].z * _2100) * ((_2295 * _2299) + _1036)) * _2319) * _2142);
    float _2472;
    float _2474;
    float _2476;
    if (_2182)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2106 + 2u;
        uint _2482 = _2106 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _884) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _961;
        float _2499 = cbLight._m0[_2478].y + _962;
        float _2500 = cbLight._m0[_2478].z + _963;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2478].xyz));
        float _4534 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2512 = dot(vec3(_881, _882, _883), vec3(_2505, _2506, _2507));
        float _4545 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4556 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2274 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2538) + _2497) * _2511))) * _2511;
        float _4567 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2472 = (((((_2531 * _2296) + _1033) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2298) + _1035) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2299) + _1036) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2200)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2106 + 3u;
        uint _2601 = _2106 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _884) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _961;
        float _2618 = cbLight._m0[_2597].y + _962;
        float _2619 = cbLight._m0[_2597].z + _963;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_881, _882, _883), vec3(cbLight._m0[_2597].xyz));
        float _4583 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2631 = dot(vec3(_881, _882, _883), vec3(_2624, _2625, _2626));
        float _4594 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4605 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2274 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2657) + _2616) * _2630))) * _2630;
        float _4616 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2586 = (((((_2650 * _2296) + _1033) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2298) + _1035) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2299) + _1036) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_2104.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _970) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _969) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            uint _3097 = 0u;
            uint _3106;
            bool _3107;
            for (;;)
            {
                _3106 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                _3107 = _3106 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3107)
                {
                    frontier_phi_61_pred = _3091;
                    frontier_phi_61_pred_1 = _3096;
                    frontier_phi_61_pred_2 = _3095;
                    frontier_phi_61_pred_3 = _3094;
                    frontier_phi_61_pred_4 = _3093;
                    frontier_phi_61_pred_5 = _3092;
                }
                else
                {
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    uint _3221;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3106;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3225 = uint(findLSB(_3221)) + (_3097 << 5u);
                        uint _3222 = (_3221 + 4294967295u) & _3221;
                        uint _3227 = _3225 * 48u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 3u)).x));
                        uint _3247 = (_3225 * 48u) + 4u;
                        vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 3u)).x));
                        uint _3266 = (_3225 * 48u) + 8u;
                        vec3 _3277 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x));
                        float _3281 = _3241.x - _2746;
                        float _3282 = _3241.y - _2747;
                        float _3283 = _3241.z - _2748;
                        float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                        float _3287 = inversesqrt(_3284);
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3291 = dot(vec3(_989, _992, _995), vec3(_3288, _3289, _3290));
                        float _3296 = 1.0 - (_3284 * _3241.w);
                        float _4642 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3297 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3298 = sqrt(_3284) * _3260.w;
                        float _3301 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                        float _3302 = _3301 * _3301;
                        float _3305 = ((1.0 - _3302) * _3291) + _3302;
                        float _3308 = _3298 * _3298;
                        float _3312 = ((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3297) / ((_3308 * 0.699999988079071044921875) + 1.0);
                        float _3316 = (-0.0) - _2746;
                        float _3317 = (-0.0) - _2747;
                        float _3318 = (-0.0) - _2748;
                        float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                        float _3323 = _3322 * _3316;
                        float _3324 = _3322 * _3317;
                        float _3325 = _3322 * _3318;
                        float _3333 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                        float _3334 = 1.0 - _1064;
                        float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                        float _3342 = _3341 * _3341;
                        float _3343 = _3342 * _3342;
                        float _3344 = _3323 + _3288;
                        float _3345 = _3324 + _3289;
                        float _3346 = _3325 + _3290;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3354 = dot(vec3(_989, _992, _995), vec3(_3323, _3324, _3325));
                        float _4658 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3358 = dot(vec3(_989, _992, _995), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                        float _4669 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                        float _3366 = _3301 * _3342;
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3291) + _3367;
                        float _4680 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3372 = 1.0 - _3342;
                        float _3382 = (0.5 / (((_3371 * ((_3357 * _3372) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3342) * _3357))) * _3371;
                        float _4691 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3393 = (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3365 * _3365) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125))) * _3297;
                        _3150 = (_3312 * _3260.x) + _3218;
                        _3151 = (_3312 * _3260.y) + _3219;
                        _3152 = (_3312 * _3260.z) + _3220;
                        _3147 = (_3393 * _3277.x) + _3215;
                        _3148 = (_3393 * _3277.y) + _3216;
                        _3149 = (_3393 * _3277.z) + _3217;
                        if (_3222 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3222;
                        }
                    }
                    frontier_phi_61_pred = _3147;
                    frontier_phi_61_pred_1 = _3152;
                    frontier_phi_61_pred_2 = _3151;
                    frontier_phi_61_pred_3 = _3150;
                    frontier_phi_61_pred_4 = _3149;
                    frontier_phi_61_pred_5 = _3148;
                }
                _2939 = frontier_phi_61_pred;
                _2949 = frontier_phi_61_pred_1;
                _2947 = frontier_phi_61_pred_2;
                _2945 = frontier_phi_61_pred_3;
                _2943 = frontier_phi_61_pred_4;
                _2941 = frontier_phi_61_pred_5;
                uint _3098 = _3097 + 1u;
                if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3091 = _2939;
                    _3092 = _2941;
                    _3093 = _2943;
                    _3094 = _2945;
                    _3095 = _2947;
                    _3096 = _2949;
                    _3097 = _3098;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        if (((4294967295u << _2955) & _2792) == 0u)
        {
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
        }
        else
        {
            float _3084 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3085 = _3084 * _2746;
            float _3086 = _3084 * _2747;
            float _3087 = _3084 * _2748;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3068;
                float _3070;
                float _3198 = _2938;
                float _3199 = _2940;
                float _3200 = _2942;
                float _3201 = _2944;
                float _3202 = _2946;
                float _3203 = _2948;
                uint _3204 = _2955;
                uint _3213;
                bool _3214;
                for (;;)
                {
                    _3213 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                    _3214 = _3213 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3214)
                    {
                        frontier_phi_67_pred = _3201;
                        frontier_phi_67_pred_1 = _3202;
                        frontier_phi_67_pred_2 = _3203;
                        frontier_phi_67_pred_3 = _3200;
                        frontier_phi_67_pred_4 = _3199;
                        frontier_phi_67_pred_5 = _3198;
                    }
                    else
                    {
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3411 = _3198;
                        float _3412 = _3199;
                        float _3413 = _3200;
                        float _3414 = _3201;
                        float _3415 = _3202;
                        float _3416 = _3203;
                        uint _3417 = _3213;
                        uint _3418;
                        vec4 _3443;
                        float _3444;
                        vec4 _3459;
                        vec3 _3471;
                        vec4 _3486;
                        vec4 _3501;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3428 = ((_3204 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3417));
                            _3418 = (_3417 + 4294967295u) & _3417;
                            uint _3430 = _3428 * 40u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            _3444 = _3443.w;
                            uint _3446 = (_3428 * 40u) + 4u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3428 * 40u) + 8u;
                            _3471 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x));
                            uint _3473 = (_3428 * 40u) + 16u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3428 * 40u) + 20u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3504 = (_3428 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3428 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_2748, _3536.z, fma(_2747, _3536.y, _3536.x * _2746)) + _3536.w;
                            _3549 = !((fma(_2748, _3517.z, fma(_2747, _3517.y, _3517.x * _2746)) + _3517.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3443.x - _2746;
                                float _3577 = _3443.y - _2747;
                                float _3578 = _3443.z - _2748;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3444 * _3444));
                                float _4702 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3594 = sqrt(_3579) * _3459.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_989, _992, _995))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_2748, _3486.z, fma(_2747, _3486.y, _3486.x * _2746)) + _3486.w) / _3548;
                                float _3608 = (fma(_2748, _3501.z, fma(_2747, _3501.y, _3501.x * _2746)) + _3501.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4718 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _1064;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3085;
                                float _3638 = _3584 - _3086;
                                float _3639 = _3585 - _3087;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_989, _992, _995), vec3((-0.0) - _3085, (-0.0) - _3086, (-0.0) - _3087));
                                float _4729 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3651 = dot(vec3(_989, _992, _995), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4740 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_989, _992, _995), vec3(_3583, _3584, _3585))) + _3660;
                                float _4751 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4762 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3688 * _3471.x;
                                frontier_phi_73_pred_1 = _3688 * _3471.y;
                                frontier_phi_73_pred_2 = _3614 * _3459.z;
                                frontier_phi_73_pred_3 = _3614 * _3459.y;
                                frontier_phi_73_pred_4 = _3614 * _3459.x;
                                frontier_phi_73_pred_5 = _3688 * _3471.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3692 = frontier_phi_73_pred;
                            _3693 = frontier_phi_73_pred_1;
                            _3697 = frontier_phi_73_pred_2;
                            _3696 = frontier_phi_73_pred_3;
                            _3695 = frontier_phi_73_pred_4;
                            _3694 = frontier_phi_73_pred_5;
                            _3401 = _3695 + _3414;
                            _3402 = _3696 + _3415;
                            _3403 = _3697 + _3416;
                            _3398 = _3692 + _3411;
                            _3399 = _3693 + _3412;
                            _3400 = _3694 + _3413;
                            if (_3418 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3418;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3401;
                        frontier_phi_67_pred_1 = _3402;
                        frontier_phi_67_pred_2 = _3403;
                        frontier_phi_67_pred_3 = _3400;
                        frontier_phi_67_pred_4 = _3399;
                        frontier_phi_67_pred_5 = _3398;
                    }
                    _3066 = frontier_phi_67_pred;
                    _3068 = frontier_phi_67_pred_1;
                    _3070 = frontier_phi_67_pred_2;
                    _3064 = frontier_phi_67_pred_3;
                    _3062 = frontier_phi_67_pred_4;
                    _3060 = frontier_phi_67_pred_5;
                    uint _3205 = _3204 + 1u;
                    if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3198 = _3060;
                        _3199 = _3062;
                        _3200 = _3064;
                        _3201 = _3066;
                        _3202 = _3068;
                        _3203 = _3070;
                        _3204 = _3205;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3068;
                frontier_phi_55_56_ladder_1 = _3070;
                frontier_phi_55_56_ladder_2 = _3066;
                frontier_phi_55_56_ladder_3 = _3064;
                frontier_phi_55_56_ladder_4 = _3062;
                frontier_phi_55_56_ladder_5 = _3060;
            }
            else
            {
                frontier_phi_55_56_ladder = _2946;
                frontier_phi_55_56_ladder_1 = _2948;
                frontier_phi_55_56_ladder_2 = _2944;
                frontier_phi_55_56_ladder_3 = _2942;
                frontier_phi_55_56_ladder_4 = _2940;
                frontier_phi_55_56_ladder_5 = _2938;
            }
            _3059 = frontier_phi_55_56_ladder_5;
            _3061 = frontier_phi_55_56_ladder_4;
            _3063 = frontier_phi_55_56_ladder_3;
            _3065 = frontier_phi_55_56_ladder_2;
            _3067 = frontier_phi_55_56_ladder;
            _3069 = frontier_phi_55_56_ladder_1;
        }
        float _3074 = isnan(1.0) ? _1048 : (isnan(_1048) ? 1.0 : min(_1048, 1.0));
        _2805 = (_3074 * _3065) + _2238;
        _2807 = (_3074 * _3067) + _2240;
        _2809 = (_3074 * _3069) + _2242;
        _2811 = ((_3059 * _1033) * _3074) + _2586;
        _2813 = ((_3061 * _1035) * _3074) + _2588;
        _2815 = ((_3063 * _1036) * _3074) + _2590;
    }
    else
    {
        _2805 = _2238;
        _2807 = _2240;
        _2809 = _2242;
        _2811 = _2586;
        _2813 = _2588;
        _2815 = _2590;
    }
    uint _2821 = _1009 + uint(cbMatDynParam._m0[0u].w);
    float _2827 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2833 = (((((_2827 * cbMtdParam._m0[14u].x) * _739.x) * _762) * _836) * (((1.0 - _815) * cbMtdParam._m0[20u].w) + _815)) * cbInstanceData._m0[_2821].x;
    float _2839 = (((((_2827 * cbMtdParam._m0[14u].y) * _739.y) * _762) * _836) * (((1.0 - _817) * cbMtdParam._m0[20u].w) + _817)) * cbInstanceData._m0[_2821].y;
    float _2845 = (((((_2827 * cbMtdParam._m0[14u].z) * _739.z) * _762) * _836) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_2821].z;
    float _4778 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4789 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4800 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2862 = (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2805 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1048))) + ((_2811 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + _2833;
    float _2864 = (_2839 + ((_2813 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2807 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1048)));
    float _2866 = (_2845 + ((_2815 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2809 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1048)));
    float _4826 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2879 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    uint _2880 = _1008 + 6u;
    float _2888 = _969 / cbSceneParam._m0[86u].x;
    float _2889 = _970 / cbSceneParam._m0[86u].y;
    vec4 _2903 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, (log2((isnan(cbSceneParam._m0[77u].w) ? _904 : (isnan(_904) ? cbSceneParam._m0[77u].w : min(_904, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2905 = _2903.x;
    float _2906 = _2903.y;
    float _2907 = _2903.z;
    float _2908 = _2903.w;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    if (_904 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_904) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _904 : min(cbSceneParam._m0[80u].w, _904));
        float _2964 = _2963 / _904;
        float _2975 = _2964 * _954;
        float _2976 = _955 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2978 = _2964 * _956;
        float _2980 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2981 = _2980 + cbSceneParam._m0[79u].w;
        float _2982 = cbSceneParam._m0[79u].w - _2976;
        float _2988 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2978 * _2978));
        float _2991 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2988;
        float _2996 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2998 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2977 - _2980) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2981 > 0.0) ? exp2(_2996 * _2981) : (2.0 - exp2(_2998 * _2981))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2991;
        }
        else
        {
            float _3120 = 1.0 / cbSceneParam._m0[80u].x;
            float _3121 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : max(_2981, _2982));
            float _3122 = isnan(_2982) ? _2981 : (isnan(_2981) ? _2982 : min(_2981, _2982));
            float _3131 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : min(_3121, 0.0));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            _3160 = ((abs(_2988 / _2977) * cbSceneParam._m0[80u].y) * ((((_3131 - _3132) * 2.0) - ((exp2(_2996 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)))) - exp2(_2996 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))))) * _3120)) - ((exp2(_2998 * _3131) - exp2(_2998 * _3132)) * _3120))) + (_2991 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2888, _2889, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2908);
        _3000 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2905;
        _3002 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2906;
        _3004 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2907;
        _3006 = _3171 * _2908;
    }
    else
    {
        _3000 = _2905;
        _3002 = _2906;
        _3004 = _2907;
        _3006 = _2908;
    }
    float _3018 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3019 = _3018 == 3.0;
    float _3020 = log2(_3006);
    float _3024 = exp2(_3020 * cbSceneParam._m0[78u].x);
    float _3025 = exp2(_3020 * cbSceneParam._m0[78u].y);
    float _3026 = exp2(_3020 * cbSceneParam._m0[78u].z);
    float _3027 = _3024 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)));
    float _3028 = _3025 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)));
    float _3029 = _3026 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)));
    float _3038 = (_3018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3038 * (_3019 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3000)));
    SV_Target.y = _3038 * (_3019 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3002)));
    SV_Target.z = _3038 * (_3019 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3004)));
    SV_Target.w = cbInstanceData._m0[_2880].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2833) * _2879) * _3024) * _3038;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2839) * _2879) * _3025) * _3038;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2845) * _2879) * _3026) * _3038;
    SV_Target_1.w = cbInstanceData._m0[_2880].w;
}


