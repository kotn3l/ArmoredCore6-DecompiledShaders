#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1416;
float _3875;
float _3876;
float _3877;
float _3878;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _297 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _316 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _354 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _316.x) * 2.0) - _344)) + 1.0;
    float _3887 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _362 = (_355 * ((_297.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _363 = (_355 * ((_297.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _364 = (_355 * ((_297.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _382 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _395 = (((((1.0 - _316.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3898 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _403 = (((_382.x * cbMtdParam._m0[12u].x) - _362) * _396) + _362;
    float _404 = (_396 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _405 = (_396 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _423 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = (((((1.0 - _316.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3909 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    vec4 _465 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _473 = ((((((_423.x * cbMtdParam._m0[13u].x) - _403) * _437) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _465.x;
    float _476 = ((((_437 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _465.y;
    float _479 = ((((_437 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _465.z;
    vec4 _492 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _507 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _526 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _509) * _355) + _509;
    float _543 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _526) * _396) + _526;
    float _560 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _543) * _437) + _543;
    vec4 _573 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    vec4 _589 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _600 = ((_589.x - _575) * _355) + _575;
    float _601 = ((_589.y - _576) * _355) + _576;
    float _602 = ((_589.z - _577) * _355) + _577;
    vec4 _615 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _626 = ((_615.x - _600) * _396) + _600;
    float _627 = ((_615.y - _601) * _396) + _601;
    float _628 = ((_615.z - _602) * _396) + _602;
    vec4 _641 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _654 = ((_641.z - _628) * _437) + _628;
    float _657 = ((((_641.x - _626) * _437) + _626) * 2.0) + (-1.0);
    float _659 = ((((_641.y - _627) * _437) + _627) * 2.0) + (-1.0);
    float _660 = dot(vec2(_657, _659), vec2(_657, _659));
    float _3920 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))));
    vec4 _697 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _711 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3931 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _720 = (((_712 * _712) * (3.0 - (_712 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _728 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _736 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3942 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _741 = (_737 * _737) * (3.0 - (_737 * 2.0));
    float _742 = _741 * cbMtdParam._m0[22u].x;
    float _743 = _741 * cbMtdParam._m0[22u].y;
    float _744 = sin(_728);
    float _745 = cos(_728);
    float _746 = TEXCOORD.z - _742;
    float _747 = TEXCOORD.w - _743;
    vec4 _767 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_742 + fma(_747, (-0.0) - _744, _746 * _745))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_747, _745, _746 * _744) + _743)) + cbTextureTilingScale._m0[2u].w));
    float _773 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _767.x;
    float _775 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _767.y;
    float _777 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _767.z;
    float _797 = (TEXCOORD_5.x - (((_492.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3953 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _811 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _821 = (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _657;
    float _822 = (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _659;
    float _825 = fma(_665, _241 * NORMAL.x, fma(_822, _248 * TANGENT.x, (_234 * _226) * _821));
    float _828 = fma(_665, _241 * NORMAL.y, fma(_822, _248 * TANGENT.y, (_234 * _227) * _821));
    float _831 = fma(_665, _241 * NORMAL.z, fma(_822, _248 * TANGENT.z, (_234 * _228) * _821));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    float _836 = _835 * _825;
    float _837 = _835 * _828;
    float _838 = _835 * _831;
    float _3964 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _839 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3986 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3997 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4008 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _843 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _859 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _909 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _899);
    float _910 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _899);
    float _911 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _899);
    float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
    float _916 = _909 * _915;
    float _917 = _910 * _915;
    float _918 = _911 * _915;
    vec4 _923 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _925 = _923.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1096 = sqrt(((_909 * _909) + (_910 * _910)) + (_911 * _911));
        float _1102 = (cbMatDynParam._m0[5u].x * _1096) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1107 = (cbMatDynParam._m0[5u].z * _1096) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _1103)) + _1103) < ((_925 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _936 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _937 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _955 = fma(_838, cbSceneParam._m0[5u].z, fma(_837, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _836));
    float _958 = fma(_838, cbSceneParam._m0[6u].z, fma(_837, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _836));
    float _961 = fma(_838, cbSceneParam._m0[7u].z, fma(_837, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _836));
    uint _974 = uint(roundEven(NORMAL.w)) * 13u;
    uint _975 = _974 + 9u;
    uint _976 = _975 + uint(cbMatDynParam._m0[0u].w);
    float _982 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_976].x;
    float _983 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_976].y;
    float _984 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_976].z;
    float _4041 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _988 = 1.0 - _843;
    float _989 = _985 * _988;
    float _990 = _986 * _988;
    float _991 = _987 * _988;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _843;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _843;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _843;
    float _999 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _936, cbSceneParam._m0[86u].y * _937));
    float _1014 = _1011.x * TEXCOORD_5.w;
    float _1015 = dot(vec3(_836, _837, _838), vec3(_916, _917, _918));
    float _1018 = _1015 * 2.0;
    float _1022 = (_1018 * _836) - _916;
    float _1023 = (_1018 * _837) - _917;
    float _1024 = (_1018 * _838) - _918;
    float _1028 = abs(dot(vec3(_916, _917, _918), vec3(_836, _837, _838)));
    float _4074 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_839);
    float _1042 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1030;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1415;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1140 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1144 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1148 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1173 = _1077 + _836;
        float _1174 = _1081 + _837;
        float _1175 = _1085 + _838;
        float _1185 = fma(_1175, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173)) - _1140;
        float _1186 = fma(_1175, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173)) - _1144;
        float _1187 = fma(_1175, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173)) - _1148;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1140 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1144 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[34u].z) + ((((((_1148 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1243 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1209.x + (-0.5));
        float _1245 = _1243 * (_1209.y + (-0.5));
        float _1246 = _1243 * (_1209.z + (-0.5));
        float _1253 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1216.x + (-0.5));
        float _1255 = _1253 * (_1216.y + (-0.5));
        float _1256 = _1253 * (_1216.z + (-0.5));
        float _1263 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1223.x + (-0.5));
        float _1265 = _1263 * (_1223.y + (-0.5));
        float _1266 = _1263 * (_1223.z + (-0.5));
        float _1273 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1230.x + (-0.5));
        float _1275 = _1273 * (_1230.y + (-0.5));
        float _1276 = _1273 * (_1230.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1297 = (dot(vec3(_836, _837, _838), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1307 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4122 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1309 + 1.0))) + _1314) * _1277;
        float _1324 = _1245 * 0.5;
        float _1325 = _1255 * 0.5;
        float _1326 = _1265 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_836, _837, _838), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4155 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1351 + 1.0))) + _1356) * _1278;
        float _1366 = _1246 * 0.5;
        float _1367 = _1256 * 0.5;
        float _1368 = _1266 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_836, _837, _838), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4188 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1393 + 1.0))) + _1398) * _1279;
        _1415 = _1246;
        _1417 = _1245;
        _1418 = _1244;
        _1419 = _1256;
        _1420 = _1255;
        _1421 = _1254;
        _1422 = _1266;
        _1423 = _1265;
        _1424 = _1264;
        _1425 = _1279;
        _1426 = _1278;
        _1427 = _1277;
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1430 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1416;
        _1417 = _1416;
        _1418 = _1416;
        _1419 = _1416;
        _1420 = _1416;
        _1421 = _1416;
        _1422 = _1416;
        _1423 = _1416;
        _1424 = _1416;
        _1425 = _1416;
        _1426 = _1416;
        _1427 = _1416;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1459 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1463 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1467 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1490 = _1077 + _836;
        float _1491 = _1081 + _837;
        float _1492 = _1085 + _838;
        float _1502 = fma(_1492, cbModelParam._m0[30u].z, fma(_1491, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1490)) - _1459;
        float _1503 = fma(_1492, cbModelParam._m0[31u].z, fma(_1491, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1490)) - _1463;
        float _1504 = fma(_1492, cbModelParam._m0[32u].z, fma(_1491, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1490)) - _1467;
        float _1508 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
        float _1521 = ((_1508 * _1502) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1459 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1508 * _1503) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1463 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1508 * _1504) / cbModelParam._m0[35u].z) + ((((((_1467 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        float _1558 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1525.x + (-0.5));
        float _1560 = _1558 * (_1525.y + (-0.5));
        float _1561 = _1558 * (_1525.z + (-0.5));
        float _1568 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1532.x + (-0.5));
        float _1570 = _1568 * (_1532.y + (-0.5));
        float _1571 = _1568 * (_1532.z + (-0.5));
        float _1578 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1539.x + (-0.5));
        float _1580 = _1578 * (_1539.y + (-0.5));
        float _1581 = _1578 * (_1539.z + (-0.5));
        float _1588 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1546.x + (-0.5));
        float _1590 = _1588 * (_1546.y + (-0.5));
        float _1591 = _1588 * (_1546.z + (-0.5));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = _1559 * 0.5;
        float _1596 = _1569 * 0.5;
        float _1597 = _1579 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_836, _837, _838), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4251 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1622 + 1.0))) + _1627) * _1592;
        float _1637 = _1560 * 0.5;
        float _1638 = _1570 * 0.5;
        float _1639 = _1580 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_836, _837, _838), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4284 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1664 + 1.0))) + _1669) * _1593;
        float _1679 = _1561 * 0.5;
        float _1680 = _1571 * 0.5;
        float _1681 = _1581 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_836, _837, _838), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4317 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1706 + 1.0))) + _1711) * _1594;
        _1728 = _1561;
        _1729 = _1560;
        _1730 = _1559;
        _1731 = _1571;
        _1732 = _1570;
        _1733 = _1569;
        _1734 = _1581;
        _1735 = _1580;
        _1736 = _1579;
        _1737 = _1594;
        _1738 = _1593;
        _1739 = _1592;
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
    }
    else
    {
        _1728 = _1416;
        _1729 = _1416;
        _1730 = _1416;
        _1731 = _1416;
        _1732 = _1416;
        _1733 = _1416;
        _1734 = _1416;
        _1735 = _1416;
        _1736 = _1416;
        _1737 = _1416;
        _1738 = _1416;
        _1739 = _1416;
        _1740 = 0.0;
        _1741 = 0.0;
        _1742 = 0.0;
    }
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1428)) + _1428;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1429)) + _1429;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1430)) + _1430;
    float _1775 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1752));
    float _1796 = _1022 * 0.5;
    float _1797 = _1023 * 0.5;
    float _1798 = _1024 * 0.5;
    float _1799 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1802 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1805 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1839;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1812 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1415, _1419, _1422, _1425));
        float _1816 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1820 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1418, _1421, _1424, _1427));
        float _1827 = dot(vec4(cbModelParam._m0[39u]), vec4(_1796, _1797, _1798, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1850;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1841 = dot(vec4(cbModelParam._m0[40u]), vec4(_1796, _1797, _1798, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1854 = (_1850 * cbModelParam._m0[1u].x) + (_1839 * (1.0 - cbModelParam._m0[1u].x));
    float _1864 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _839);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1864 : min(cbModelParam._m0[25u].z, _1864));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1024, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022));
        float _1926 = fma(_1024, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022));
        float _1929 = fma(_1024, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1957 = frontier_phi_17_15_ladder;
        }
        float _2181;
        if (_1926 > 0.0)
        {
            _2181 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2181 = frontier_phi_26_22_ladder;
        }
        float _2438;
        if (_1929 > 0.0)
        {
            _2438 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2438 = frontier_phi_38_33_ladder;
        }
        float _2440 = isnan(_2181) ? _1957 : (isnan(_1957) ? _2181 : min(_1957, _2181));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1923) + _1912;
        float _2446 = (_2441 * _1926) + _1916;
        float _2447 = (_2441 * _1929) + _1920;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2448;
        float _2452 = _2448 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 > _2452) || ((_2446 < _2450) || ((_2445 < _2450) || (_2445 > _2452))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2447, cbModelParam._m0[9u].z, fma(_2446, cbModelParam._m0[9u].y, _2445 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2447, cbModelParam._m0[10u].z, fma(_2446, cbModelParam._m0[10u].y, _2445 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2447, cbModelParam._m0[11u].z, fma(_2446, cbModelParam._m0[11u].y, _2445 * cbModelParam._m0[11u].x))), _1865);
            frontier_phi_16_38_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_16_38_ladder_2;
        _1947 = frontier_phi_16_38_ladder_1;
        _1949 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1022, _1023, _1024), _1865);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _839);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1024, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022));
        float _2021 = fma(_1024, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022));
        float _2024 = fma(_1024, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022));
        float _2186;
        if (_2018 > 0.0)
        {
            _2186 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2186 = frontier_phi_28_24_ladder;
        }
        float _2465;
        if (_2021 > 0.0)
        {
            _2465 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2465 = frontier_phi_40_35_ladder;
        }
        float _2678;
        if (_2024 > 0.0)
        {
            _2678 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2678 = frontier_phi_49_46_ladder;
        }
        float _2680 = isnan(_2465) ? _2186 : (isnan(_2186) ? _2465 : min(_2186, _2465));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _2018) + _2007;
        float _2686 = (_2681 * _2021) + _2011;
        float _2687 = (_2681 * _2024) + _2015;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2688;
        float _2691 = _2688 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2687 > _2691) || ((_2687 < _2689) || ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 < _2689) || (_2685 > _2691))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2687, cbModelParam._m0[17u].z, fma(_2686, cbModelParam._m0[17u].y, _2685 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2687, cbModelParam._m0[18u].z, fma(_2686, cbModelParam._m0[18u].y, _2685 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2687, cbModelParam._m0[19u].z, fma(_2686, cbModelParam._m0[19u].y, _2685 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_25_49_ladder = _2931.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2931.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2931.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_25_49_ladder_2;
        _2045 = frontier_phi_25_49_ladder_1;
        _2047 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1022, _1023, _1024), _1954);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2060 = (((_1048 * _999) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2062 = (((_1048 * _1001) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2064 = (((_1048 * _1002) + _1049) * _1014) * ((cbModelParam._m0[1u].w * (_2047 - _1949)) + _1949);
    float _2067 = fma(_2064, cbSceneParam._m0[89u].z, fma(_2062, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2070 = fma(_2064, cbSceneParam._m0[90u].z, fma(_2062, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2073 = fma(_2064, cbSceneParam._m0[91u].z, fma(_2062, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    vec4 _2081 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_936, _937));
    float _2083 = _2081.w;
    float _2095 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2083);
    float _2096 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2083);
    float _2097 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2083);
    uvec4 _2101 = floatBitsToUint(cbInstanceData._m0[_974 + 5u]);
    uint _2103 = _2101.x * 14u;
    uint _2104 = _2103 + 13u;
    float _2111 = _1014 + (-1.0);
    float _2116 = (cbLight._m0[_2104].x * _2111) + 1.0;
    float _2117 = (cbLight._m0[_2104].y * _2111) + 1.0;
    float _2118 = (cbLight._m0[_2104].z * _2111) + 1.0;
    float _2119 = (cbLight._m0[_2104].w * _2111) + 1.0;
    uint _2120 = _2103 + 5u;
    float _2126 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2130 = _2103 + 4u;
    float _2140 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2144 = _2103 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_836, _837, _838));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_836, _837, _838));
    float _4453 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4464 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2120].x * _2126) * _2165) + (((cbLight._m0[_2130].x * _2095) * _2140) * _2163);
    float _2173 = ((_2126 * cbLight._m0[_2120].y) * _2165) + (((cbLight._m0[_2130].y * _2096) * _2140) * _2163);
    float _2174 = ((_2126 * cbLight._m0[_2120].z) * _2165) + (((cbLight._m0[_2130].z * _2097) * _2140) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2103 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2103 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2103 + 2u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4475 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2218 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2409 = _2103 + 7u;
        float _2425 = (dot(vec3(cbLight._m0[_2103 + 3u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4491 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2428 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2236 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2191;
        _2238 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2193;
        _2240 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2195;
    }
    uint _2243 = _2103 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _839) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2103].x + _916;
    float _2259 = cbLight._m0[_2103].y + _917;
    float _2260 = cbLight._m0[_2103].z + _918;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2103].xyz));
    float _4507 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2272 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2273 = dot(vec3(_836, _837, _838), vec3(_2265, _2266, _2267));
    float _4529 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2265, _2266, _2267));
    float _4540 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _996;
    float _2296 = 0.959999978542327880859375 - _997;
    float _2297 = 0.959999978542327880859375 - _998;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4551 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2331 = _2103 + 9u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _839) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2144].x + _916;
    float _2345 = cbLight._m0[_2144].y + _917;
    float _2346 = cbLight._m0[_2144].z + _918;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2144].xyz));
    float _4562 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2358 = dot(vec3(_836, _837, _838), vec3(_2351, _2352, _2353));
    float _4573 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2351, _2352, _2353));
    float _4584 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2343 * _2343;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2384 = 1.0 - _2343;
    float _2394 = (0.5 / (((_2272 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2384) + _2343) * _2357))) * _2357;
    float _4595 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    float _2406 = (((((_2377 * _2294) + _999) * cbLight._m0[_2331].x) * _2396) * _2126) + ((((cbLight._m0[_2243].x * _2095) * ((_2293 * _2294) + _999)) * _2317) * _2140);
    float _2407 = (((((_2377 * _2296) + _1001) * cbLight._m0[_2331].y) * _2396) * _2126) + ((((cbLight._m0[_2243].y * _2096) * ((_2293 * _2296) + _1001)) * _2317) * _2140);
    float _2408 = (((((_2377 * _2297) + _1002) * cbLight._m0[_2331].z) * _2396) * _2126) + ((((cbLight._m0[_2243].z * _2097) * ((_2293 * _2297) + _1002)) * _2317) * _2140);
    float _2470;
    float _2472;
    float _2474;
    if (_2180)
    {
        _2470 = _2406;
        _2472 = _2407;
        _2474 = _2408;
    }
    else
    {
        uint _2476 = _2103 + 2u;
        uint _2480 = _2103 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _839) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _916;
        float _2497 = cbLight._m0[_2476].y + _917;
        float _2498 = cbLight._m0[_2476].z + _918;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2476].xyz));
        float _4606 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2510 = dot(vec3(_836, _837, _838), vec3(_2503, _2504, _2505));
        float _4617 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4628 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2529 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2536 = 1.0 - _2495;
        float _2546 = (0.5 / (((_2272 * ((_2509 * _2536) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2536) + _2495) * _2509))) * _2509;
        float _4639 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2548 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2549 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2470 = (((((_2529 * _2294) + _999) * cbLight._m0[_2480].x) * _2548) * _2549) + _2406;
        _2472 = (((((_2529 * _2296) + _1001) * cbLight._m0[_2480].y) * _2548) * _2549) + _2407;
        _2474 = (((((_2529 * _2297) + _1002) * cbLight._m0[_2480].z) * _2548) * _2549) + _2408;
    }
    float _2584;
    float _2586;
    float _2588;
    if (_2198)
    {
        _2584 = _2470;
        _2586 = _2472;
        _2588 = _2474;
    }
    else
    {
        uint _2595 = _2103 + 3u;
        uint _2599 = _2103 + 11u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _839) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _916;
        float _2616 = cbLight._m0[_2595].y + _917;
        float _2617 = cbLight._m0[_2595].z + _918;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2595].xyz));
        float _4655 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2629 = dot(vec3(_836, _837, _838), vec3(_2622, _2623, _2624));
        float _4666 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4677 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2655 = 1.0 - _2614;
        float _2665 = (0.5 / (((_2272 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2655) + _2614) * _2628))) * _2628;
        float _4688 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2584 = (((((_2648 * _2294) + _999) * cbLight._m0[_2599].x) * _2667) * _2668) + _2470;
        _2586 = (((((_2648 * _2296) + _1001) * cbLight._m0[_2599].y) * _2667) * _2668) + _2472;
        _2588 = (((((_2648 * _2297) + _1002) * cbLight._m0[_2599].z) * _2667) * _2668) + _2474;
    }
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    if (_2101.y == 0u)
    {
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2743;
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2743;
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2743;
        uvec4 _2758 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2759 = _2758.x;
        uint _2770 = uint((float(_2758.y) * floor(float(uint(cbSceneParam._m0[85u].y * _937) / _2759))) + floor(float(uint(cbSceneParam._m0[85u].x * _936) / _2759)));
        float _2780 = (log2(_2746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2781 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        uint _2784 = uint(isnan(14.0) ? _2781 : (isnan(_2781) ? 14.0 : min(_2781, 14.0)));
        uvec4 _2789 = texelFetch(g_lightClusterGridBuffer, int(((_2784 << 2u) + (_2770 << 6u)) >> 2u));
        uint _2790 = _2789.x;
        uint _2791 = _2758.z;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((((1u << ((_2791 >> 4u) & 15u)) + 4294967295u) & _2790) == 0u) || ((_2791 & 240u) == 0u))
        {
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
        }
        else
        {
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            uint _3103 = 0u;
            uint _3112;
            bool _3113;
            for (;;)
            {
                _3112 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                _3113 = _3112 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3113)
                {
                    frontier_phi_66_pred = _3097;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3112;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3103 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _2744;
                        float _3309 = _3268.y - _2745;
                        float _3310 = _3268.z - _2746;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_955, _958, _961), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4714 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _2744;
                        float _3344 = (-0.0) - _2745;
                        float _3345 = (-0.0) - _2746;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3360 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3361 = 1.0 - _1030;
                        float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                        float _3369 = _3368 * _3368;
                        float _3370 = _3369 * _3369;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3373 = _3352 + _3317;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3381 = dot(vec3(_955, _958, _961), vec3(_3350, _3351, _3352));
                        float _4730 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3385 = dot(vec3(_955, _958, _961), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                        float _4741 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                        float _3393 = _3328 * _3369;
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3318) + _3394;
                        float _4752 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3399 = 1.0 - _3369;
                        float _3409 = (0.5 / (((_3398 * ((_3384 * _3399) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3369) * _3384))) * _3398;
                        float _4763 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3420 = (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3392 * _3392) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3172 = (_3339 * _3287.x) + _3245;
                        _3173 = (_3339 * _3287.y) + _3246;
                        _3174 = (_3339 * _3287.z) + _3247;
                        _3169 = (_3420 * _3304.x) + _3242;
                        _3170 = (_3420 * _3304.y) + _3243;
                        _3171 = (_3420 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_66_pred = _3169;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                _2937 = frontier_phi_66_pred;
                _2947 = frontier_phi_66_pred_1;
                _2945 = frontier_phi_66_pred_2;
                _2943 = frontier_phi_66_pred_3;
                _2941 = frontier_phi_66_pred_4;
                _2939 = frontier_phi_66_pred_5;
                uint _3104 = _3103 + 1u;
                if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3097 = _2937;
                    _3098 = _2939;
                    _3099 = _2941;
                    _3100 = _2943;
                    _3101 = _2945;
                    _3102 = _2947;
                    _3103 = _3104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
        }
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.z;
        uint _2953 = (_2951 >> 8u) & 15u;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((4294967295u << _2953) & _2790) == 0u)
        {
            _3065 = _2936;
            _3067 = _2938;
            _3069 = _2940;
            _3071 = _2942;
            _3073 = _2944;
            _3075 = _2946;
        }
        else
        {
            float _3090 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
            float _3091 = _3090 * _2744;
            float _3092 = _3090 * _2745;
            float _3093 = _3090 * _2746;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2953 < ((_2951 >> 12u) & 15u))
            {
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3225 = _2936;
                float _3226 = _2938;
                float _3227 = _2940;
                float _3228 = _2942;
                float _3229 = _2944;
                float _3230 = _2946;
                uint _3231 = _2953;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2784 << 5u) + (_2770 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3241)
                    {
                        frontier_phi_77_pred = _3230;
                        frontier_phi_77_pred_1 = _3229;
                        frontier_phi_77_pred_2 = _3228;
                        frontier_phi_77_pred_3 = _3227;
                        frontier_phi_77_pred_4 = _3226;
                        frontier_phi_77_pred_5 = _3225;
                    }
                    else
                    {
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        uint _3453 = _3240;
                        uint _3454;
                        vec4 _3479;
                        float _3480;
                        vec4 _3495;
                        vec3 _3507;
                        vec4 _3522;
                        vec4 _3537;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3464 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3453));
                            _3454 = (_3453 + 4294967295u) & _3453;
                            uint _3466 = _3464 * 40u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3480 = _3479.w;
                            uint _3482 = (_3464 * 40u) + 4u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3464 * 40u) + 8u;
                            _3507 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x));
                            uint _3509 = (_3464 * 40u) + 16u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3464 * 40u) + 20u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3540 = (_3464 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3464 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_2746, _3572.z, fma(_2745, _3572.y, _3572.x * _2744)) + _3572.w;
                            _3585 = !((fma(_2746, _3553.z, fma(_2745, _3553.y, _3553.x * _2744)) + _3553.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3479.x - _2744;
                                float _3613 = _3479.y - _2745;
                                float _3614 = _3479.z - _2746;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3480 * _3480));
                                float _4774 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3630 = sqrt(_3615) * _3495.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_955, _958, _961))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_2746, _3522.z, fma(_2745, _3522.y, _3522.x * _2744)) + _3522.w) / _3584;
                                float _3644 = (fma(_2746, _3537.z, fma(_2745, _3537.y, _3537.x * _2744)) + _3537.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4790 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _1030;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3091;
                                float _3674 = _3620 - _3092;
                                float _3675 = _3621 - _3093;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_955, _958, _961), vec3((-0.0) - _3091, (-0.0) - _3092, (-0.0) - _3093));
                                float _4801 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3687 = dot(vec3(_955, _958, _961), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4812 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_955, _958, _961), vec3(_3619, _3620, _3621))) + _3696;
                                float _4823 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4834 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3650 * _3495.y;
                                frontier_phi_83_pred_1 = _3650 * _3495.x;
                                frontier_phi_83_pred_2 = _3724 * _3507.z;
                                frontier_phi_83_pred_3 = _3724 * _3507.y;
                                frontier_phi_83_pred_4 = _3724 * _3507.x;
                                frontier_phi_83_pred_5 = _3650 * _3495.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_83_pred;
                            _3731 = frontier_phi_83_pred_1;
                            _3730 = frontier_phi_83_pred_2;
                            _3729 = frontier_phi_83_pred_3;
                            _3728 = frontier_phi_83_pred_4;
                            _3733 = frontier_phi_83_pred_5;
                            _3437 = _3731 + _3450;
                            _3438 = _3732 + _3451;
                            _3439 = _3733 + _3452;
                            _3434 = _3728 + _3447;
                            _3435 = _3729 + _3448;
                            _3436 = _3730 + _3449;
                            if (_3454 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3454;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3439;
                        frontier_phi_77_pred_1 = _3438;
                        frontier_phi_77_pred_2 = _3437;
                        frontier_phi_77_pred_3 = _3436;
                        frontier_phi_77_pred_4 = _3435;
                        frontier_phi_77_pred_5 = _3434;
                    }
                    _3076 = frontier_phi_77_pred;
                    _3074 = frontier_phi_77_pred_1;
                    _3072 = frontier_phi_77_pred_2;
                    _3070 = frontier_phi_77_pred_3;
                    _3068 = frontier_phi_77_pred_4;
                    _3066 = frontier_phi_77_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3066;
                        _3226 = _3068;
                        _3227 = _3070;
                        _3228 = _3072;
                        _3229 = _3074;
                        _3230 = _3076;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3070;
                frontier_phi_58_59_ladder_1 = _3076;
                frontier_phi_58_59_ladder_2 = _3074;
                frontier_phi_58_59_ladder_3 = _3072;
                frontier_phi_58_59_ladder_4 = _3068;
                frontier_phi_58_59_ladder_5 = _3066;
            }
            else
            {
                frontier_phi_58_59_ladder = _2940;
                frontier_phi_58_59_ladder_1 = _2946;
                frontier_phi_58_59_ladder_2 = _2944;
                frontier_phi_58_59_ladder_3 = _2942;
                frontier_phi_58_59_ladder_4 = _2938;
                frontier_phi_58_59_ladder_5 = _2936;
            }
            _3065 = frontier_phi_58_59_ladder_5;
            _3067 = frontier_phi_58_59_ladder_4;
            _3069 = frontier_phi_58_59_ladder;
            _3071 = frontier_phi_58_59_ladder_3;
            _3073 = frontier_phi_58_59_ladder_2;
            _3075 = frontier_phi_58_59_ladder_1;
        }
        float _3080 = isnan(1.0) ? _1014 : (isnan(_1014) ? 1.0 : min(_1014, 1.0));
        _2803 = (_3080 * _3071) + _2236;
        _2805 = (_3080 * _3073) + _2238;
        _2807 = (_3080 * _3075) + _2240;
        _2809 = ((_3065 * _999) * _3080) + _2584;
        _2811 = ((_3067 * _1001) * _3080) + _2586;
        _2813 = ((_3069 * _1002) * _3080) + _2588;
    }
    else
    {
        _2803 = _2236;
        _2805 = _2238;
        _2807 = _2240;
        _2809 = _2584;
        _2811 = _2586;
        _2813 = _2588;
    }
    uint _2819 = _975 + uint(cbMatDynParam._m0[0u].w);
    float _2825 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2831 = (((((_2825 * cbMtdParam._m0[14u].x) * _697.x) * _720) * _798) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_2819].x;
    float _2837 = (((((_2825 * cbMtdParam._m0[14u].y) * _697.y) * _720) * _798) * (((1.0 - _775) * cbMtdParam._m0[20u].w) + _775)) * cbInstanceData._m0[_2819].y;
    float _2843 = (((((_2825 * cbMtdParam._m0[14u].z) * _697.z) * _720) * _798) * (((1.0 - _777) * cbMtdParam._m0[20u].w) + _777)) * cbInstanceData._m0[_2819].z;
    float _4850 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4861 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4872 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2860 = (((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2803 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1014))) + ((_2809 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + _2831;
    float _2862 = (_2837 + ((_2811 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2805 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1014)));
    float _2864 = (_2843 + ((_2813 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2807 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1014)));
    float _2865 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2866 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2867 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2873 = cbMtdParam._m0[2u].x * _2831;
    float _2874 = cbMtdParam._m0[2u].y * _2837;
    float _2875 = cbMtdParam._m0[2u].z * _2843;
    float _4898 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2877 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    uint _2878 = _974 + 6u;
    float _2886 = _936 / cbSceneParam._m0[86u].x;
    float _2887 = _937 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _859 : (isnan(_859) ? cbSceneParam._m0[77u].w : min(_859, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_859 > cbSceneParam._m0[78u].w)
    {
        float _2961 = isnan(_859) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _859 : min(cbSceneParam._m0[80u].w, _859));
        float _2962 = _2961 / _859;
        float _2973 = _2962 * _909;
        float _2974 = _910 * _2962;
        float _2975 = (-0.0) - _2974;
        float _2976 = _2962 * _911;
        float _2978 = (cbSceneParam._m0[77u].w * _2975) / _2961;
        float _2979 = _2978 + cbSceneParam._m0[79u].w;
        float _2980 = cbSceneParam._m0[79u].w - _2974;
        float _2986 = sqrt(((_2973 * _2973) + (_2974 * _2974)) + (_2976 * _2976));
        float _2989 = (1.0 - (cbSceneParam._m0[77u].w / _2961)) * _2986;
        float _2994 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2996 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3182;
        if (abs((_2975 - _2978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3182 = ((((_2979 > 0.0) ? exp2(_2994 * _2979) : (2.0 - exp2(_2996 * _2979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2989;
        }
        else
        {
            float _3126 = 1.0 / cbSceneParam._m0[80u].x;
            float _3127 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : max(_2979, _2980));
            float _3128 = isnan(_2980) ? _2979 : (isnan(_2979) ? _2980 : min(_2979, _2980));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            _3182 = ((abs(_2986 / _2975) * cbSceneParam._m0[80u].y) * ((((_3137 - _3138) * 2.0) - ((exp2(_2994 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)))) - exp2(_2994 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))))) * _3126)) - ((exp2(_2996 * _3137) - exp2(_2996 * _3138)) * _3126))) + (_2989 * cbSceneParam._m0[80u].z);
        }
        vec4 _3184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3193 = exp2((_3182 * (-1.44269502162933349609375)) * (1.0 - _3184.w));
        float _3194 = log2(_3193);
        float _3210 = log2(_2906);
        _2998 = (exp2(_3210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].x)) * _3184.x) / cbSceneParam._m0[78u].x)) + _2903;
        _3000 = (exp2(_3210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].y)) * _3184.y) / cbSceneParam._m0[78u].y)) + _2904;
        _3002 = (exp2(_3210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].z)) * _3184.z) / cbSceneParam._m0[78u].z)) + _2905;
        _3004 = _3193 * _2906;
    }
    else
    {
        _2998 = _2903;
        _3000 = _2904;
        _3002 = _2905;
        _3004 = _2906;
    }
    bool _3220;
    vec4 _3014;
    vec4 _3036;
    float _3038;
    float _3042;
    float _3043;
    float _3044;
    float _3047;
    float _3050;
    float _3053;
    float _3054;
    bool _3064;
    for (;;)
    {
        _3014 = cbMatDynParam._m0[0u];
        float _3016 = roundEven(_3014.y);
        bool _3017 = _3016 == 3.0;
        float _3018 = log2(_3004);
        float _3022 = exp2(_3018 * cbSceneParam._m0[78u].x);
        float _3023 = exp2(_3018 * cbSceneParam._m0[78u].y);
        float _3024 = exp2(_3018 * cbSceneParam._m0[78u].z);
        float _3025 = _3022 * _2865;
        float _3026 = _3023 * _2866;
        float _3027 = _3024 * _2867;
        float _3034 = _925 + (-0.5);
        _3036 = cbMtdParam._m0[1u];
        _3038 = _3036.y * _3034;
        float _3041 = (_3016 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3042 = _3041 * (_3017 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2998)));
        _3043 = _3041 * (_3017 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3000)));
        _3044 = _3041 * (_3017 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3002)));
        _3047 = ((_2873 * _2877) * _3022) * _3041;
        _3050 = ((_2874 * _2877) * _3023) * _3041;
        _3053 = ((_2875 * _2877) * _3024) * _3041;
        _3054 = _3034 * 0.999000012874603271484375;
        _3064 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3064)
        {
            if ((cbInstanceData._m0[_974 + 7u].x + _3054) < 0.5)
            {
                _3220 = true;
                break;
            }
        }
        uint _3161 = _975 + uint(_3014.w);
        if ((cbInstanceData._m0[_3161].w < 1.0) && ((cbInstanceData._m0[_3161].w + _3054) < 0.5))
        {
            _3220 = true;
            break;
        }
        if ((_3038 + 1.0) < _3036.x)
        {
            _3220 = true;
            break;
        }
        _3220 = false;
        break;
    }
    float _3425;
    if (_3220)
    {
        discard_state = true;
        _3425 = 0.0;
    }
    else
    {
        _3425 = cbInstanceData._m0[_2878].w;
    }
    SV_Target.x = _3042;
    SV_Target.y = _3043;
    SV_Target.z = _3044;
    SV_Target.w = _3425;
    SV_Target_1.x = _3047;
    SV_Target_1.y = _3050;
    SV_Target_1.z = _3053;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
    discard_exit();
}


