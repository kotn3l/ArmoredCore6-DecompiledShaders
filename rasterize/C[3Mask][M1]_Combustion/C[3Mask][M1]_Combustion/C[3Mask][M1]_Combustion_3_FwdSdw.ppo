#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1398;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _297 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _316 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _354 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _316.x) * 2.0) - _344)) + 1.0;
    float _4061 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _362 = (_355 * ((_297.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _363 = (_355 * ((_297.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _364 = (_355 * ((_297.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _382 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _395 = (((((1.0 - _316.y) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4072 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _403 = (((_382.x * cbMtdParam._m0[12u].x) - _362) * _396) + _362;
    float _404 = (_396 * ((_382.y * cbMtdParam._m0[12u].y) - _363)) + _363;
    float _405 = (_396 * ((_382.z * cbMtdParam._m0[12u].z) - _364)) + _364;
    vec4 _423 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = (((((1.0 - _316.z) * 2.0) - _344) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4083 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _444 = (((_423.x * cbMtdParam._m0[13u].x) - _403) * _437) + _403;
    float _445 = (_437 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404;
    float _446 = (_437 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405;
    vec4 _471 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _490 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _493 = _490.x + 0.00999999977648258209228515625;
    float _500 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _493)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4094 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _508 = (_501 * ((_471.x * cbMtdParam._m0[16u].x) - _444)) + _444;
    float _509 = (_501 * ((_471.y * cbMtdParam._m0[16u].y) - _445)) + _445;
    float _510 = (_501 * ((_471.z * cbMtdParam._m0[16u].z) - _446)) + _446;
    vec4 _523 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _543 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _525) * _355) + _525;
    float _560 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _543) * _396) + _543;
    float _577 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _560) * _437) + _560;
    float _579 = _577 - (_577 * TEXCOORD_8);
    vec4 _592 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    vec4 _629 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _640 = ((_629.x - _615) * _355) + _615;
    float _641 = ((_629.y - _616) * _355) + _616;
    float _642 = ((_629.z - _617) * _355) + _617;
    vec4 _655 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _666 = ((_655.x - _640) * _396) + _640;
    float _667 = ((_655.y - _641) * _396) + _641;
    float _668 = ((_655.z - _642) * _396) + _642;
    vec4 _681 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _694 = ((_681.z - _668) * _437) + _668;
    float _697 = ((((_681.x - _666) * _437) + _666) * 2.0) + (-1.0);
    float _698 = ((((_681.y - _667) * _437) + _667) * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _4105 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))));
    float _709 = (((_592.z - _694) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _694;
    vec4 _739 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _753 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4116 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _762 = (((_754 * _754) * (3.0 - (_754 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _770 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _778 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4127 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _783 = (_779 * _779) * (3.0 - (_779 * 2.0));
    float _784 = _783 * cbMtdParam._m0[22u].x;
    float _785 = _783 * cbMtdParam._m0[22u].y;
    float _786 = sin(_770);
    float _787 = cos(_770);
    float _788 = TEXCOORD.z - _784;
    float _789 = TEXCOORD.w - _785;
    vec4 _809 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_784 + fma(_789, (-0.0) - _786, _788 * _787))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_789, _787, _788 * _786) + _785)) + cbTextureTilingScale._m0[2u].w));
    float _815 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _809.x;
    float _817 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _809.y;
    float _819 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _809.z;
    float _835 = (TEXCOORD_5.x - ((_493 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4138 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _842 = ((((_592.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _697;
    float _843 = ((((_592.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _698;
    float _846 = fma(_704, _241 * NORMAL.x, fma(_843, _248 * TANGENT.x, (_234 * _226) * _842));
    float _849 = fma(_704, _241 * NORMAL.y, fma(_843, _248 * TANGENT.y, (_234 * _227) * _842));
    float _852 = fma(_704, _241 * NORMAL.z, fma(_843, _248 * TANGENT.z, (_234 * _228) * _842));
    float _856 = inversesqrt(dot(vec3(_846, _849, _852), vec3(_846, _849, _852)));
    float _857 = _856 * _846;
    float _858 = _856 * _849;
    float _859 = _856 * _852;
    float _4149 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _860 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4171 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4182 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4193 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _864 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _880 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _930 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _920);
    float _931 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _920);
    float _932 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _920);
    float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
    float _937 = _930 * _936;
    float _938 = _931 * _936;
    float _939 = _932 * _936;
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _965 = fma(_859, cbSceneParam._m0[5u].z, fma(_858, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _857));
    float _968 = fma(_859, cbSceneParam._m0[6u].z, fma(_858, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _857));
    float _971 = fma(_859, cbSceneParam._m0[7u].z, fma(_858, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _857));
    uint _984 = uint(roundEven(NORMAL.w)) * 13u;
    uint _985 = _984 + 9u;
    uint _986 = _985 + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_986].z;
    float _4204 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _998 = 1.0 - _864;
    float _999 = _995 * _998;
    float _1000 = _996 * _998;
    float _1001 = _997 * _998;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _864;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _864;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _864;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    vec4 _1021 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1024 = _1021.x * TEXCOORD_5.w;
    float _1025 = dot(vec3(_857, _858, _859), vec3(_937, _938, _939));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _857) - _937;
    float _1033 = (_1028 * _858) - _938;
    float _1034 = (_1028 * _859) - _939;
    float _1038 = abs(dot(vec3(_937, _938, _939), vec3(_857, _858, _859)));
    float _4237 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_860);
    float _1052 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1058 = (1.0 - _1052) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1059 = _1052 * _1040;
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1126 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1130 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1155 = _1087 + _857;
        float _1156 = _1091 + _858;
        float _1157 = _1095 + _859;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1122;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1126;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1130;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_857, _858, _859), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4285 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_857, _858, _859), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4318 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_857, _858, _859), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4351 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1438 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1442 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1446 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1469 = _1087 + _857;
        float _1470 = _1091 + _858;
        float _1471 = _1095 + _859;
        float _1481 = fma(_1471, cbModelParam._m0[30u].z, fma(_1470, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1469)) - _1438;
        float _1482 = fma(_1471, cbModelParam._m0[31u].z, fma(_1470, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1469)) - _1442;
        float _1483 = fma(_1471, cbModelParam._m0[32u].z, fma(_1470, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1469)) - _1446;
        float _1487 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
        float _1500 = ((_1487 * _1481) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1438 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1487 * _1482) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1442 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1487 * _1483) / cbModelParam._m0[35u].z) + ((((((_1446 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1537 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1504.x + (-0.5));
        float _1539 = _1537 * (_1504.y + (-0.5));
        float _1540 = _1537 * (_1504.z + (-0.5));
        float _1547 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1511.x + (-0.5));
        float _1549 = _1547 * (_1511.y + (-0.5));
        float _1550 = _1547 * (_1511.z + (-0.5));
        float _1557 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1518.x + (-0.5));
        float _1559 = _1557 * (_1518.y + (-0.5));
        float _1560 = _1557 * (_1518.z + (-0.5));
        float _1567 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1525.x + (-0.5));
        float _1569 = _1567 * (_1525.y + (-0.5));
        float _1570 = _1567 * (_1525.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_857, _858, _859), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4414 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1601 + 1.0))) + _1606) * _1571;
        float _1616 = _1539 * 0.5;
        float _1617 = _1549 * 0.5;
        float _1618 = _1559 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_857, _858, _859), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4447 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1643 + 1.0))) + _1648) * _1572;
        float _1658 = _1540 * 0.5;
        float _1659 = _1550 * 0.5;
        float _1660 = _1560 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_857, _858, _859), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4480 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1685 + 1.0))) + _1690) * _1573;
        _1707 = _1540;
        _1708 = _1539;
        _1709 = _1538;
        _1710 = _1550;
        _1711 = _1549;
        _1712 = _1548;
        _1713 = _1560;
        _1714 = _1559;
        _1715 = _1558;
        _1716 = _1573;
        _1717 = _1572;
        _1718 = _1571;
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1398;
        _1708 = _1398;
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = _1398;
        _1718 = _1398;
        _1719 = 0.0;
        _1720 = 0.0;
        _1721 = 0.0;
    }
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1410)) + _1410;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1411)) + _1411;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1412)) + _1412;
    float _1754 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1731));
    float _1775 = _1032 * 0.5;
    float _1776 = _1033 * 0.5;
    float _1777 = _1034 * 0.5;
    float _1778 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1781 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1784 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1818;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1791 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1795 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1799 = dot(vec4(_1775, _1776, _1777, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1806 = dot(vec4(cbModelParam._m0[39u]), vec4(_1775, _1776, _1777, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1829;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1820 = dot(vec4(cbModelParam._m0[40u]), vec4(_1775, _1776, _1777, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1833 = (_1829 * cbModelParam._m0[1u].x) + (_1818 * (1.0 - cbModelParam._m0[1u].x));
    float _1843 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _860);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1843 : min(cbModelParam._m0[25u].z, _1843));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1891 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1895 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1899 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1902 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1905 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1908 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1936;
        if (_1902 > 0.0)
        {
            _1936 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1936 = frontier_phi_14_12_ladder;
        }
        float _2107;
        if (_1905 > 0.0)
        {
            _2107 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2107 = frontier_phi_23_19_ladder;
        }
        float _2402;
        if (_1908 > 0.0)
        {
            _2402 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2402 = frontier_phi_35_30_ladder;
        }
        float _2404 = isnan(_2107) ? _1936 : (isnan(_1936) ? _2107 : min(_1936, _2107));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1902) + _1891;
        float _2410 = (_2405 * _1905) + _1895;
        float _2411 = (_2405 * _1908) + _1899;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2412;
        float _2416 = _2412 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 > _2416) || ((_2410 < _2414) || ((_2409 < _2414) || (_2409 > _2416))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1844);
            frontier_phi_13_35_ladder = _2556.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2556.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2556.x * cbModelParam._m0[1u].y;
        }
        _1924 = frontier_phi_13_35_ladder_2;
        _1926 = frontier_phi_13_35_ladder_1;
        _1928 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1844);
        _1924 = _1912.x * cbModelParam._m0[1u].y;
        _1926 = _1912.y * cbModelParam._m0[1u].y;
        _1928 = _1912.z * cbModelParam._m0[1u].y;
    }
    float _1932 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _860);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1932 : min(cbModelParam._m0[25u].w, _1932));
    float _2022;
    float _2024;
    float _2026;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1986 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _1990 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _1994 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _1997 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2000 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2003 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2112;
        if (_1997 > 0.0)
        {
            _2112 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2112 = frontier_phi_25_21_ladder;
        }
        float _2429;
        if (_2000 > 0.0)
        {
            _2429 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2429 = frontier_phi_37_32_ladder;
        }
        float _2767;
        if (_2003 > 0.0)
        {
            _2767 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2767 = frontier_phi_47_44_ladder;
        }
        float _2769 = isnan(_2429) ? _2112 : (isnan(_2112) ? _2429 : min(_2112, _2429));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _1997) + _1986;
        float _2775 = (_2770 * _2000) + _1990;
        float _2776 = (_2770 * _2003) + _1994;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _1933);
            frontier_phi_22_47_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2022 = frontier_phi_22_47_ladder_2;
        _2024 = frontier_phi_22_47_ladder_1;
        _2026 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2006 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1933);
        _2022 = _2006.x * cbModelParam._m0[1u].z;
        _2024 = _2006.y * cbModelParam._m0[1u].z;
        _2026 = _2006.z * cbModelParam._m0[1u].z;
    }
    float _2039 = (((_1058 * _1009) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1058 * _1011) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2043 = (((_1058 * _1012) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2046 = fma(_2043, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2039 * cbSceneParam._m0[89u].x));
    float _2049 = fma(_2043, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2039 * cbSceneParam._m0[90u].x));
    float _2052 = fma(_2043, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, _2039 * cbSceneParam._m0[91u].x));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2099 = _2086 / _2098;
    float _2100 = _2090 / _2098;
    float _2101 = _2094 / _2098;
    float _2248;
    float _2249;
    float _2250;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2128 = ((uint(_2101 > cbSceneParam._m0[59u].y) + uint(_2101 > cbSceneParam._m0[59u].x)) + uint(_2101 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2129 = _2128 + 43u;
        uint _2137 = _2128 + 44u;
        uint _2145 = _2128 + 45u;
        uint _2153 = _2128 + 46u;
        float _2164 = fma(_2098, cbSceneParam._m0[_2129].w, fma(_2094, cbSceneParam._m0[_2129].z, fma(_2090, cbSceneParam._m0[_2129].y, _2086 * cbSceneParam._m0[_2129].x)));
        float _2168 = fma(_2098, cbSceneParam._m0[_2137].w, fma(_2094, cbSceneParam._m0[_2137].z, fma(_2090, cbSceneParam._m0[_2137].y, _2086 * cbSceneParam._m0[_2137].x)));
        float _2176 = fma(_2098, cbSceneParam._m0[_2153].w, fma(_2094, cbSceneParam._m0[_2153].z, fma(_2090, cbSceneParam._m0[_2153].y, _2086 * cbSceneParam._m0[_2153].x)));
        float _2181 = cbSceneParam._m0[33u].z * _2176;
        float _2183 = cbSceneParam._m0[33u].w * _2176;
        float _2186 = fma(_2098, cbSceneParam._m0[_2145].w, fma(_2094, cbSceneParam._m0[_2145].z, fma(_2090, cbSceneParam._m0[_2145].y, _2086 * cbSceneParam._m0[_2145].x))) / _2176;
        float _2234 = (cbSceneParam._m0[33u].x - sqrt(((_2100 * _2100) + (_2099 * _2099)) + (_2101 * _2101))) * cbSceneParam._m0[33u].y;
        float _4606 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2241 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 + _2164) / _2176, (_2183 + _2168) / _2176), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 + _2164) / _2176, (_2168 - _2181) / _2176), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 - _2181) / _2176, (_2168 - _2183) / _2176), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 - _2183) / _2176, (_2181 + _2168) / _2176), _2186), 0.0)).x), vec4(0.25)));
        _2248 = 1.0 - (_2241 * cbSceneParam._m0[34u].x);
        _2249 = 1.0 - (_2241 * cbSceneParam._m0[34u].y);
        _2250 = 1.0 - (_2241 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2248 = 1.0;
        _2249 = 1.0;
        _2250 = 1.0;
    }
    float _2314;
    float _2316;
    float _2318;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2302 = fma(_2098, cbSceneParam._m0[63u].w, fma(_2094, cbSceneParam._m0[63u].z, fma(_2090, cbSceneParam._m0[63u].y, _2086 * cbSceneParam._m0[63u].x)));
        float _2303 = fma(_2098, cbSceneParam._m0[60u].w, fma(_2094, cbSceneParam._m0[60u].z, fma(_2090, cbSceneParam._m0[60u].y, _2086 * cbSceneParam._m0[60u].x))) / _2302;
        float _2304 = fma(_2098, cbSceneParam._m0[61u].w, fma(_2094, cbSceneParam._m0[61u].z, fma(_2090, cbSceneParam._m0[61u].y, _2086 * cbSceneParam._m0[61u].x))) / _2302;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2303 >= cbSceneParam._m0[64u].x) && (_2304 >= cbSceneParam._m0[64u].y)) && (_2303 <= cbSceneParam._m0[64u].z)) && (_2304 <= cbSceneParam._m0[64u].w))
        {
            float _2442 = fma(_2098, cbSceneParam._m0[62u].w, fma(_2094, cbSceneParam._m0[62u].z, fma(_2090, cbSceneParam._m0[62u].y, _2086 * cbSceneParam._m0[62u].x))) / _2302;
            float _2446 = isnan(cbSceneParam._m0[41u].w) ? _2442 : (isnan(_2442) ? cbSceneParam._m0[41u].w : max(_2442, cbSceneParam._m0[41u].w));
            float _2489 = (cbSceneParam._m0[33u].x - sqrt(((_2100 * _2100) + (_2099 * _2099)) + (_2101 * _2101))) * cbSceneParam._m0[33u].y;
            float _4622 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
            float _2496 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2303, cbSceneParam._m0[33u].w + _2304), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2303, _2304 - cbSceneParam._m0[33u].z), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2303 - cbSceneParam._m0[33u].z, _2304 - cbSceneParam._m0[33u].w), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2303 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2304), _2446), 0.0)).x), vec4(0.25)));
            float _2500 = 1.0 - (_2496 * cbSceneParam._m0[34u].x);
            float _2501 = 1.0 - (_2496 * cbSceneParam._m0[34u].y);
            float _2502 = 1.0 - (_2496 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2502) ? _2250 : (isnan(_2250) ? _2502 : min(_2250, _2502));
            frontier_phi_34_33_ladder_1 = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
            frontier_phi_34_33_ladder_2 = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
        }
        else
        {
            frontier_phi_34_33_ladder = _2250;
            frontier_phi_34_33_ladder_1 = _2249;
            frontier_phi_34_33_ladder_2 = _2248;
        }
        _2314 = frontier_phi_34_33_ladder_2;
        _2316 = frontier_phi_34_33_ladder_1;
        _2318 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2314 = _2248;
        _2316 = _2249;
        _2318 = _2250;
    }
    uvec4 _2323 = floatBitsToUint(cbInstanceData._m0[_984 + 5u]);
    uint _2325 = _2323.x * 14u;
    uint _2326 = _2325 + 13u;
    float _2333 = _1024 + (-1.0);
    float _2338 = (cbLight._m0[_2326].x * _2333) + 1.0;
    float _2339 = (cbLight._m0[_2326].y * _2333) + 1.0;
    float _2340 = (cbLight._m0[_2326].z * _2333) + 1.0;
    float _2341 = (cbLight._m0[_2326].w * _2333) + 1.0;
    uint _2342 = _2325 + 5u;
    float _2348 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2352 = _2325 + 4u;
    float _2361 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
    uint _2365 = _2325 | 1u;
    float _2376 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_857, _858, _859));
    float _2379 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_857, _858, _859));
    float _4658 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _4669 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2384 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2386 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2393 = ((cbLight._m0[_2342].x * _2348) * _2386) + (((cbLight._m0[_2352].x * _2314) * _2361) * _2384);
    float _2394 = ((_2348 * cbLight._m0[_2342].y) * _2386) + (((cbLight._m0[_2352].y * _2316) * _2361) * _2384);
    float _2395 = ((_2348 * cbLight._m0[_2342].z) * _2386) + (((cbLight._m0[_2352].z * _2318) * _2361) * _2384);
    uvec4 _2399 = floatBitsToUint(cbLight._m0[_2325 + 12u]);
    bool _2401 = _2399.x == 0u;
    float _2503;
    float _2505;
    float _2507;
    if (_2401)
    {
        _2503 = _2393;
        _2505 = _2394;
        _2507 = _2395;
    }
    else
    {
        uint _2511 = _2325 + 6u;
        float _2527 = (dot(vec3(cbLight._m0[_2325 + 2u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4680 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2530 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
        _2503 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2393;
        _2505 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2394;
        _2507 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2395;
    }
    bool _2510 = _2399.y == 0u;
    float _2565;
    float _2567;
    float _2569;
    if (_2510)
    {
        _2565 = _2503;
        _2567 = _2505;
        _2569 = _2507;
    }
    else
    {
        uint _2738 = _2325 + 7u;
        float _2754 = (dot(vec3(cbLight._m0[_2325 + 3u].xyz), vec3(_857, _858, _859)) * 0.5) + 0.5;
        float _2755 = _2754 * _2754;
        float _4696 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2756 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2757 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2565 = (((cbLight._m0[_2738].x * 0.3183098733425140380859375) * _2756) * _2757) + _2503;
        _2567 = (((cbLight._m0[_2738].y * 0.3183098733425140380859375) * _2756) * _2757) + _2505;
        _2569 = (((cbLight._m0[_2738].z * 0.3183098733425140380859375) * _2756) * _2757) + _2507;
    }
    uint _2572 = _2325 + 8u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _860) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2325].x + _937;
    float _2588 = cbLight._m0[_2325].y + _938;
    float _2589 = cbLight._m0[_2325].z + _939;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2325].xyz));
    float _4712 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _4723 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2601 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2602 = dot(vec3(_857, _858, _859), vec3(_2594, _2595, _2596));
    float _4734 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2606 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2594, _2595, _2596));
    float _4745 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2610 = _2586 * _2586;
    float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
    float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2623 = 0.959999978542327880859375 - _1006;
    float _2625 = 0.959999978542327880859375 - _1007;
    float _2626 = 0.959999978542327880859375 - _1008;
    float _2633 = 1.0 - _2586;
    float _2644 = (0.5 / (((_2601 * ((_2600 * _2633) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2633) + _2586) * _2600))) * _2600;
    float _4756 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
    uint _2660 = _2325 + 9u;
    float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _860) * 0.949999988079071044921875);
    float _2672 = _2671 * _2671;
    float _2673 = cbLight._m0[_2365].x + _937;
    float _2674 = cbLight._m0[_2365].y + _938;
    float _2675 = cbLight._m0[_2365].z + _939;
    float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
    float _2680 = _2679 * _2673;
    float _2681 = _2679 * _2674;
    float _2682 = _2679 * _2675;
    float _2683 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2365].xyz));
    float _4767 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2687 = dot(vec3(_857, _858, _859), vec3(_2680, _2681, _2682));
    float _4778 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2691 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2680, _2681, _2682));
    float _4789 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2695 = _2672 * _2672;
    float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
    float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
    float _2713 = 1.0 - _2672;
    float _2723 = (0.5 / (((_2601 * ((_2686 * _2713) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2713) + _2672) * _2686))) * _2686;
    float _4800 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2725 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
    float _2735 = (((((_2706 * _2623) + _1009) * cbLight._m0[_2660].x) * _2725) * _2348) + ((((cbLight._m0[_2572].x * _2314) * ((_2622 * _2623) + _1009)) * _2646) * _2361);
    float _2736 = (((((_2706 * _2625) + _1011) * cbLight._m0[_2660].y) * _2725) * _2348) + ((((cbLight._m0[_2572].y * _2316) * ((_2622 * _2625) + _1011)) * _2646) * _2361);
    float _2737 = (((((_2706 * _2626) + _1012) * cbLight._m0[_2660].z) * _2725) * _2348) + ((((cbLight._m0[_2572].z * _2318) * ((_2622 * _2626) + _1012)) * _2646) * _2361);
    float _2793;
    float _2795;
    float _2797;
    if (_2401)
    {
        _2793 = _2735;
        _2795 = _2736;
        _2797 = _2737;
    }
    else
    {
        uint _2799 = _2325 + 2u;
        uint _2803 = _2325 + 10u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _860) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _937;
        float _2820 = cbLight._m0[_2799].y + _938;
        float _2821 = cbLight._m0[_2799].z + _939;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2799].xyz));
        float _4811 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2833 = dot(vec3(_857, _858, _859), vec3(_2826, _2827, _2828));
        float _4822 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4833 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2852 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2859 = 1.0 - _2818;
        float _2869 = (0.5 / (((_2601 * ((_2832 * _2859) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2859) + _2818) * _2832))) * _2832;
        float _4844 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
        _2793 = (((((_2852 * _2623) + _1009) * cbLight._m0[_2803].x) * _2871) * _2872) + _2735;
        _2795 = (((((_2852 * _2625) + _1011) * cbLight._m0[_2803].y) * _2871) * _2872) + _2736;
        _2797 = (((((_2852 * _2626) + _1012) * cbLight._m0[_2803].z) * _2871) * _2872) + _2737;
    }
    float _2903;
    float _2905;
    float _2907;
    if (_2510)
    {
        _2903 = _2793;
        _2905 = _2795;
        _2907 = _2797;
    }
    else
    {
        uint _2914 = _2325 + 3u;
        uint _2918 = _2325 + 11u;
        float _2932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2914].w)) * _860) * 0.949999988079071044921875);
        float _2933 = _2932 * _2932;
        float _2934 = cbLight._m0[_2914].x + _937;
        float _2935 = cbLight._m0[_2914].y + _938;
        float _2936 = cbLight._m0[_2914].z + _939;
        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
        float _2941 = _2940 * _2934;
        float _2942 = _2940 * _2935;
        float _2943 = _2940 * _2936;
        float _2944 = dot(vec3(_857, _858, _859), vec3(cbLight._m0[_2914].xyz));
        float _4860 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2948 = dot(vec3(_857, _858, _859), vec3(_2941, _2942, _2943));
        float _4871 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2952 = dot(vec3(cbLight._m0[_2914].xyz), vec3(_2941, _2942, _2943));
        float _4882 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2956 = _2933 * _2933;
        float _2960 = ((_2951 * _2951) * (_2956 + (-1.0))) + 1.0;
        float _2967 = exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0);
        float _2974 = 1.0 - _2933;
        float _2984 = (0.5 / (((_2601 * ((_2947 * _2974) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2974) + _2933) * _2947))) * _2947;
        float _4893 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2986 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2956 / ((_2960 * _2960) * 3.141590118408203125));
        float _2987 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2903 = (((((_2967 * _2623) + _1009) * cbLight._m0[_2918].x) * _2986) * _2987) + _2793;
        _2905 = (((((_2967 * _2625) + _1011) * cbLight._m0[_2918].y) * _2986) * _2987) + _2795;
        _2907 = (((((_2967 * _2626) + _1012) * cbLight._m0[_2918].z) * _2986) * _2987) + _2797;
    }
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    if (_2323.y == 0u)
    {
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.x;
        uint _3020 = uint((float(_3008.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _3009))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _3009)));
        float _3030 = (log2(_2101 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3031 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        uint _3034 = uint(isnan(14.0) ? _3031 : (isnan(_3031) ? 14.0 : min(_3031, 14.0)));
        uvec4 _3039 = texelFetch(g_lightClusterGridBuffer, int(((_3034 << 2u) + (_3020 << 6u)) >> 2u));
        uint _3040 = _3039.x;
        uint _3041 = _3008.z;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((((1u << ((_3041 >> 4u) & 15u)) + 4294967295u) & _3040) == 0u) || ((_3041 & 240u) == 0u))
        {
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
            _3175 = 0.0;
        }
        else
        {
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3174;
            float _3176;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            uint _3324 = 0u;
            uint _3333;
            bool _3334;
            for (;;)
            {
                _3333 = texelFetch(g_lightClassification, int((((_3034 << 5u) + (_3020 << 9u)) + (_3324 << 2u)) >> 2u)).x;
                _3334 = _3333 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3334)
                {
                    frontier_phi_66_pred = _3323;
                    frontier_phi_66_pred_1 = _3322;
                    frontier_phi_66_pred_2 = _3321;
                    frontier_phi_66_pred_3 = _3320;
                    frontier_phi_66_pred_4 = _3319;
                    frontier_phi_66_pred_5 = _3318;
                }
                else
                {
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    uint _3448;
                    _3442 = _3318;
                    _3443 = _3319;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3333;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    for (;;)
                    {
                        uint _3452 = uint(findLSB(_3448)) + (_3324 << 5u);
                        uint _3449 = (_3448 + 4294967295u) & _3448;
                        uint _3454 = _3452 * 48u;
                        vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3474 = (_3452 * 48u) + 4u;
                        vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3493 = (_3452 * 48u) + 8u;
                        vec3 _3504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x));
                        float _3508 = _3468.x - _2099;
                        float _3509 = _3468.y - _2100;
                        float _3510 = _3468.z - _2101;
                        float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                        float _3514 = inversesqrt(_3511);
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3518 = dot(vec3(_965, _968, _971), vec3(_3515, _3516, _3517));
                        float _3523 = 1.0 - (_3511 * _3468.w);
                        float _4919 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3525 = sqrt(_3511) * _3487.w;
                        float _3528 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3518) + _3529;
                        float _3535 = _3525 * _3525;
                        float _3539 = ((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3524) / ((_3535 * 0.699999988079071044921875) + 1.0);
                        float _3543 = (-0.0) - _2099;
                        float _3544 = (-0.0) - _2100;
                        float _3545 = (-0.0) - _2101;
                        float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3559 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                        float _3560 = 1.0 - _1040;
                        float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                        float _3568 = _3567 * _3567;
                        float _3569 = _3568 * _3568;
                        float _3570 = _3550 + _3515;
                        float _3571 = _3551 + _3516;
                        float _3572 = _3552 + _3517;
                        float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                        float _3580 = dot(vec3(_965, _968, _971), vec3(_3550, _3551, _3552));
                        float _4935 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3584 = dot(vec3(_965, _968, _971), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                        float _4946 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                        float _3592 = _3528 * _3568;
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3518) + _3593;
                        float _4957 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3597 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3598 = 1.0 - _3568;
                        float _3608 = (0.5 / (((_3597 * ((_3583 * _3598) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3568) * _3583))) * _3597;
                        float _4968 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3619 = (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3591 * _3591) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125))) * _3524;
                        _3377 = (_3539 * _3487.x) + _3445;
                        _3378 = (_3539 * _3487.y) + _3446;
                        _3379 = (_3539 * _3487.z) + _3447;
                        _3374 = (_3619 * _3504.x) + _3442;
                        _3375 = (_3619 * _3504.y) + _3443;
                        _3376 = (_3619 * _3504.z) + _3444;
                        if (_3449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3442 = _3374;
                            _3443 = _3375;
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3449;
                        }
                    }
                    frontier_phi_66_pred = _3379;
                    frontier_phi_66_pred_1 = _3378;
                    frontier_phi_66_pred_2 = _3377;
                    frontier_phi_66_pred_3 = _3376;
                    frontier_phi_66_pred_4 = _3375;
                    frontier_phi_66_pred_5 = _3374;
                }
                _3176 = frontier_phi_66_pred;
                _3174 = frontier_phi_66_pred_1;
                _3172 = frontier_phi_66_pred_2;
                _3170 = frontier_phi_66_pred_3;
                _3168 = frontier_phi_66_pred_4;
                _3166 = frontier_phi_66_pred_5;
                uint _3325 = _3324 + 1u;
                if (_3325 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3318 = _3166;
                    _3319 = _3168;
                    _3320 = _3170;
                    _3321 = _3172;
                    _3322 = _3174;
                    _3323 = _3176;
                    _3324 = _3325;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
            _3175 = _3176;
        }
        uvec4 _3179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3180 = _3179.z;
        uint _3182 = (_3180 >> 8u) & 15u;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        if (((4294967295u << _3182) & _3040) == 0u)
        {
            _3286 = _3165;
            _3288 = _3167;
            _3290 = _3169;
            _3292 = _3171;
            _3294 = _3173;
            _3296 = _3175;
        }
        else
        {
            float _3311 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
            float _3312 = _3311 * _2099;
            float _3313 = _3311 * _2100;
            float _3314 = _3311 * _2101;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3182 < ((_3180 >> 12u) & 15u))
            {
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3425 = _3165;
                float _3426 = _3167;
                float _3427 = _3169;
                float _3428 = _3171;
                float _3429 = _3173;
                float _3430 = _3175;
                uint _3431 = _3182;
                uint _3440;
                bool _3441;
                for (;;)
                {
                    _3440 = texelFetch(g_lightClassification, int((((_3034 << 5u) + (_3020 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                    _3441 = _3440 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3441)
                    {
                        frontier_phi_72_pred = _3430;
                        frontier_phi_72_pred_1 = _3429;
                        frontier_phi_72_pred_2 = _3428;
                        frontier_phi_72_pred_3 = _3427;
                        frontier_phi_72_pred_4 = _3426;
                        frontier_phi_72_pred_5 = _3425;
                    }
                    else
                    {
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3637 = _3425;
                        float _3638 = _3426;
                        float _3639 = _3427;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        uint _3643 = _3440;
                        uint _3644;
                        vec4 _3669;
                        float _3670;
                        vec4 _3685;
                        vec3 _3697;
                        vec4 _3712;
                        vec4 _3727;
                        float _3774;
                        bool _3775;
                        for (;;)
                        {
                            uint _3654 = ((_3431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3643));
                            _3644 = (_3643 + 4294967295u) & _3643;
                            uint _3656 = _3654 * 40u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3670 = _3669.w;
                            uint _3672 = (_3654 * 40u) + 4u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3654 * 40u) + 8u;
                            _3697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x));
                            uint _3699 = (_3654 * 40u) + 16u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3654 * 40u) + 20u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3730 = (_3654 * 40u) + 24u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3749 = (_3654 * 40u) + 28u;
                            vec4 _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            _3774 = fma(_2101, _3762.z, fma(_2100, _3762.y, _3762.x * _2099)) + _3762.w;
                            _3775 = !((fma(_2101, _3743.z, fma(_2100, _3743.y, _3743.x * _2099)) + _3743.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3775)
                            {
                                float _3802 = _3669.x - _2099;
                                float _3803 = _3669.y - _2100;
                                float _3804 = _3669.z - _2101;
                                float _3805 = dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804));
                                float _3808 = inversesqrt(_3805);
                                float _3809 = _3808 * _3802;
                                float _3810 = _3808 * _3803;
                                float _3811 = _3808 * _3804;
                                float _3815 = 1.0 - (_3805 / (_3670 * _3670));
                                float _4979 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3820 = sqrt(_3805) * _3685.w;
                                float _3822 = 1.39999997615814208984375 / (_3820 + 1.39999997615814208984375);
                                float _3823 = _3822 * _3822;
                                float _3826 = ((1.0 - _3823) * dot(vec3(_3809, _3810, _3811), vec3(_965, _968, _971))) + _3823;
                                float _3829 = _3820 * _3820;
                                float _3833 = (fma(_2101, _3712.z, fma(_2100, _3712.y, _3712.x * _2099)) + _3712.w) / _3774;
                                float _3834 = (fma(_2101, _3727.z, fma(_2100, _3727.y, _3727.x * _2099)) + _3727.w) / _3774;
                                float _3838 = 1.0 - dot(vec2(_3833, _3834), vec2(_3833, _3834));
                                float _4995 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3840 = _3839 * (((isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0))) * _3816) / ((_3829 * 0.699999988079071044921875) + 1.0));
                                float _3852 = exp2(log2(1.0 / ((_3829 * 3.5) + 5.0)) * 0.25);
                                float _3853 = 1.0 - _1040;
                                float _3860 = sqrt(1.0 - ((1.0 - (_3853 * _3853)) * (1.0 - (_3852 * _3852))));
                                float _3861 = _3860 * _3860;
                                float _3862 = _3861 * _3861;
                                float _3863 = _3809 - _3312;
                                float _3864 = _3810 - _3313;
                                float _3865 = _3811 - _3314;
                                float _3869 = inversesqrt(dot(vec3(_3863, _3864, _3865), vec3(_3863, _3864, _3865)));
                                float _3873 = dot(vec3(_965, _968, _971), vec3((-0.0) - _3312, (-0.0) - _3313, (-0.0) - _3314));
                                float _5006 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3877 = dot(vec3(_965, _968, _971), vec3(_3869 * _3863, _3869 * _3864, _3869 * _3865));
                                float _5017 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3880 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3884 = ((_3880 * _3880) * (_3862 + (-1.0))) + 1.0;
                                float _3885 = _3822 * _3861;
                                float _3886 = _3885 * _3885;
                                float _3892 = ((1.0 - _3886) * dot(vec3(_965, _968, _971), vec3(_3809, _3810, _3811))) + _3886;
                                float _5028 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3894 = 1.0 - _3861;
                                float _3904 = (0.5 / (((_3893 * ((_3876 * _3894) + _3861)) + 9.9999999392252902907785028219223e-09) + (((_3893 * _3894) + _3861) * _3876))) * _3893;
                                float _5039 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3914 = (_3839 * _3816) * (((_3862 * 3.1415927410125732421875) * (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0)))) / ((_3884 * _3884) * ((_3829 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3840 * _3685.y;
                                frontier_phi_78_pred_1 = _3840 * _3685.x;
                                frontier_phi_78_pred_2 = _3914 * _3697.z;
                                frontier_phi_78_pred_3 = _3914 * _3697.y;
                                frontier_phi_78_pred_4 = _3914 * _3697.x;
                                frontier_phi_78_pred_5 = _3840 * _3685.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_78_pred;
                            _3921 = frontier_phi_78_pred_1;
                            _3920 = frontier_phi_78_pred_2;
                            _3919 = frontier_phi_78_pred_3;
                            _3918 = frontier_phi_78_pred_4;
                            _3923 = frontier_phi_78_pred_5;
                            _3627 = _3921 + _3640;
                            _3628 = _3922 + _3641;
                            _3629 = _3923 + _3642;
                            _3624 = _3918 + _3637;
                            _3625 = _3919 + _3638;
                            _3626 = _3920 + _3639;
                            if (_3644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3644;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3629;
                        frontier_phi_72_pred_1 = _3628;
                        frontier_phi_72_pred_2 = _3627;
                        frontier_phi_72_pred_3 = _3626;
                        frontier_phi_72_pred_4 = _3625;
                        frontier_phi_72_pred_5 = _3624;
                    }
                    _3297 = frontier_phi_72_pred;
                    _3295 = frontier_phi_72_pred_1;
                    _3293 = frontier_phi_72_pred_2;
                    _3291 = frontier_phi_72_pred_3;
                    _3289 = frontier_phi_72_pred_4;
                    _3287 = frontier_phi_72_pred_5;
                    uint _3432 = _3431 + 1u;
                    if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3425 = _3287;
                        _3426 = _3289;
                        _3427 = _3291;
                        _3428 = _3293;
                        _3429 = _3295;
                        _3430 = _3297;
                        _3431 = _3432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3297;
                frontier_phi_60_61_ladder_1 = _3295;
                frontier_phi_60_61_ladder_2 = _3291;
                frontier_phi_60_61_ladder_3 = _3289;
                frontier_phi_60_61_ladder_4 = _3287;
                frontier_phi_60_61_ladder_5 = _3293;
            }
            else
            {
                frontier_phi_60_61_ladder = _3175;
                frontier_phi_60_61_ladder_1 = _3173;
                frontier_phi_60_61_ladder_2 = _3169;
                frontier_phi_60_61_ladder_3 = _3167;
                frontier_phi_60_61_ladder_4 = _3165;
                frontier_phi_60_61_ladder_5 = _3171;
            }
            _3286 = frontier_phi_60_61_ladder_4;
            _3288 = frontier_phi_60_61_ladder_3;
            _3290 = frontier_phi_60_61_ladder_2;
            _3292 = frontier_phi_60_61_ladder_5;
            _3294 = frontier_phi_60_61_ladder_1;
            _3296 = frontier_phi_60_61_ladder;
        }
        float _3301 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3053 = (_3301 * _3292) + _2565;
        _3055 = (_3301 * _3294) + _2567;
        _3057 = (_3301 * _3296) + _2569;
        _3059 = ((_3286 * _1009) * _3301) + _2903;
        _3061 = ((_3288 * _1011) * _3301) + _2905;
        _3063 = ((_3290 * _1012) * _3301) + _2907;
    }
    else
    {
        _3053 = _2565;
        _3055 = _2567;
        _3057 = _2569;
        _3059 = _2903;
        _3061 = _2905;
        _3063 = _2907;
    }
    uint _3069 = _985 + uint(cbMatDynParam._m0[0u].w);
    float _3075 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3081 = (((((_3075 * cbMtdParam._m0[14u].x) * _739.x) * _762) * _836) * (((1.0 - _815) * cbMtdParam._m0[20u].w) + _815)) * cbInstanceData._m0[_3069].x;
    float _3087 = (((((_3075 * cbMtdParam._m0[14u].y) * _739.y) * _762) * _836) * (((1.0 - _817) * cbMtdParam._m0[20u].w) + _817)) * cbInstanceData._m0[_3069].y;
    float _3093 = (((((_3075 * cbMtdParam._m0[14u].z) * _739.z) * _762) * _836) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_3069].z;
    float _5055 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5066 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _5077 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _3110 = (((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3053 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1024))) + ((_3059 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1833)) * cbPerFrame._m0[3u].x)) + _3081;
    float _3112 = (_3087 + ((_3061 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1833)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3055 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1024)));
    float _3114 = (_3093 + ((_3063 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1833)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3057 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1024)));
    float _5103 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3127 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
    uint _3128 = _984 + 6u;
    float _3136 = _945 / cbSceneParam._m0[86u].x;
    float _3137 = _946 / cbSceneParam._m0[86u].y;
    vec4 _3151 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, (log2((isnan(cbSceneParam._m0[77u].w) ? _880 : (isnan(_880) ? cbSceneParam._m0[77u].w : min(_880, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3153 = _3151.x;
    float _3154 = _3151.y;
    float _3155 = _3151.z;
    float _3156 = _3151.w;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_880 > cbSceneParam._m0[78u].w)
    {
        float _3190 = isnan(_880) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _880 : min(cbSceneParam._m0[80u].w, _880));
        float _3191 = _3190 / _880;
        float _3202 = _3191 * _930;
        float _3203 = _931 * _3191;
        float _3204 = (-0.0) - _3203;
        float _3205 = _3191 * _932;
        float _3207 = (cbSceneParam._m0[77u].w * _3204) / _3190;
        float _3208 = _3207 + cbSceneParam._m0[79u].w;
        float _3209 = cbSceneParam._m0[79u].w - _3203;
        float _3215 = sqrt(((_3202 * _3202) + (_3203 * _3203)) + (_3205 * _3205));
        float _3218 = (1.0 - (cbSceneParam._m0[77u].w / _3190)) * _3215;
        float _3223 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3225 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3387;
        if (abs((_3204 - _3207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3387 = ((((_3208 > 0.0) ? exp2(_3223 * _3208) : (2.0 - exp2(_3225 * _3208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3218;
        }
        else
        {
            float _3347 = 1.0 / cbSceneParam._m0[80u].x;
            float _3348 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : max(_3208, _3209));
            float _3349 = isnan(_3209) ? _3208 : (isnan(_3208) ? _3209 : min(_3208, _3209));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            float _3359 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : min(_3349, 0.0));
            _3387 = ((abs(_3215 / _3204) * cbSceneParam._m0[80u].y) * ((((_3358 - _3359) * 2.0) - ((exp2(_3223 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0)))) - exp2(_3223 * (isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))))) * _3347)) - ((exp2(_3225 * _3358) - exp2(_3225 * _3359)) * _3347))) + (_3218 * cbSceneParam._m0[80u].z);
        }
        vec4 _3389 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3136, _3137, 1.0), 0.0);
        float _3398 = exp2((_3387 * (-1.44269502162933349609375)) * (1.0 - _3389.w));
        float _3399 = log2(_3398);
        float _3415 = log2(_3156);
        _3227 = (exp2(_3415 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].x)) * _3389.x) / cbSceneParam._m0[78u].x)) + _3153;
        _3229 = (exp2(_3415 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].y)) * _3389.y) / cbSceneParam._m0[78u].y)) + _3154;
        _3231 = (exp2(_3415 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3399 * cbSceneParam._m0[78u].z)) * _3389.z) / cbSceneParam._m0[78u].z)) + _3155;
        _3233 = _3398 * _3156;
    }
    else
    {
        _3227 = _3153;
        _3229 = _3154;
        _3231 = _3155;
        _3233 = _3156;
    }
    float _3245 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3246 = _3245 == 3.0;
    float _3247 = log2(_3233);
    float _3251 = exp2(_3247 * cbSceneParam._m0[78u].x);
    float _3252 = exp2(_3247 * cbSceneParam._m0[78u].y);
    float _3253 = exp2(_3247 * cbSceneParam._m0[78u].z);
    float _3254 = _3251 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0)));
    float _3255 = _3252 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0)));
    float _3256 = _3253 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)));
    float _3265 = (_3245 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3265 * (_3246 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3227)));
    SV_Target.y = _3265 * (_3246 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3229)));
    SV_Target.z = _3265 * (_3246 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.w = cbInstanceData._m0[_3128].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3081) * _3127) * _3251) * _3265;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3087) * _3127) * _3252) * _3265;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3093) * _3127) * _3253) * _3265;
    SV_Target_1.w = cbInstanceData._m0[_3128].w;
}


