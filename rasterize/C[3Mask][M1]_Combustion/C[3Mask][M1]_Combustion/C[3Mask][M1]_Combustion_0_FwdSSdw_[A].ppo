#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1499;
float _3957;
float _3958;
float _3959;
float _3960;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _282 = _276.x * cbMtdParam._m0[10u].x;
    float _283 = _276.y * cbMtdParam._m0[10u].y;
    float _284 = _276.z * cbMtdParam._m0[10u].z;
    vec4 _303 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _322 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _350 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _360 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _322.x) * 2.0) - _350)) + 1.0;
    float _3969 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _368 = (_361 * ((_303.x * cbMtdParam._m0[11u].x) - _282)) + _282;
    float _369 = (_361 * ((_303.y * cbMtdParam._m0[11u].y) - _283)) + _283;
    float _370 = (_361 * ((_303.z * cbMtdParam._m0[11u].z) - _284)) + _284;
    vec4 _388 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _401 = (((((1.0 - _322.y) * 2.0) - _350) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3980 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _409 = (((_388.x * cbMtdParam._m0[12u].x) - _368) * _402) + _368;
    float _410 = (_402 * ((_388.y * cbMtdParam._m0[12u].y) - _369)) + _369;
    float _411 = (_402 * ((_388.z * cbMtdParam._m0[12u].z) - _370)) + _370;
    vec4 _429 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _442 = (((((1.0 - _322.z) * 2.0) - _350) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3991 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _471 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _479 = ((((((_429.x * cbMtdParam._m0[13u].x) - _409) * _443) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _471.x;
    float _482 = ((((_443 * ((_429.y * cbMtdParam._m0[13u].y) - _410)) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _471.y;
    float _485 = ((((_443 * ((_429.z * cbMtdParam._m0[13u].z) - _411)) + _411) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _471.z;
    vec4 _510 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _529 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _532 = _529.x + 0.00999999977648258209228515625;
    float _539 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _532)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4002 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _547 = (_540 * ((_510.x * cbMtdParam._m0[16u].x) - _479)) + _479;
    float _548 = (_540 * ((_510.y * cbMtdParam._m0[16u].y) - _482)) + _482;
    float _549 = (_540 * ((_510.z * cbMtdParam._m0[16u].z) - _485)) + _485;
    vec4 _562 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = _562.x;
    float _581 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _564) * _361) + _564;
    float _598 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _581) * _402) + _581;
    float _615 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _598) * _443) + _598;
    float _617 = _615 - (_615 * TEXCOORD_8);
    vec4 _630 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _651 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _655 = _651.z;
    vec4 _667 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _678 = ((_667.x - _653) * _361) + _653;
    float _679 = ((_667.y - _654) * _361) + _654;
    float _680 = ((_667.z - _655) * _361) + _655;
    vec4 _693 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _704 = ((_693.x - _678) * _402) + _678;
    float _705 = ((_693.y - _679) * _402) + _679;
    float _706 = ((_693.z - _680) * _402) + _680;
    vec4 _719 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _732 = ((_719.z - _706) * _443) + _706;
    float _735 = ((((_719.x - _704) * _443) + _704) * 2.0) + (-1.0);
    float _736 = ((((_719.y - _705) * _443) + _705) * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4013 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _742 = sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))));
    float _747 = (((_630.z - _732) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _732;
    vec4 _777 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _791 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4024 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _800 = (((_792 * _792) * (3.0 - (_792 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _808 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _816 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4035 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _817 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _821 = (_817 * _817) * (3.0 - (_817 * 2.0));
    float _822 = _821 * cbMtdParam._m0[22u].x;
    float _823 = _821 * cbMtdParam._m0[22u].y;
    float _824 = sin(_808);
    float _825 = cos(_808);
    float _826 = TEXCOORD.z - _822;
    float _827 = TEXCOORD.w - _823;
    vec4 _847 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_822 + fma(_827, (-0.0) - _824, _826 * _825))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_827, _825, _826 * _824) + _823)) + cbTextureTilingScale._m0[2u].w));
    float _853 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _847.x;
    float _855 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _847.y;
    float _857 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _847.z;
    float _873 = (TEXCOORD_5.x - ((_532 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4046 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    vec4 _887 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.x) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.y) + cbTextureTilingScale._m0[18u].w));
    float _903 = (((((_630.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _735) + (((_887.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _905 = (((((_630.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _736) + (((_887.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _908 = fma(_742, _247 * NORMAL.x, fma(_905, _254 * TANGENT.x, (_240 * _232) * _903));
    float _911 = fma(_742, _247 * NORMAL.y, fma(_905, _254 * TANGENT.y, (_240 * _233) * _903));
    float _914 = fma(_742, _247 * NORMAL.z, fma(_905, _254 * TANGENT.z, (_240 * _234) * _903));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    float _919 = _918 * _908;
    float _920 = _918 * _911;
    float _921 = _918 * _914;
    float _4057 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _922 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4079 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4090 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4101 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _926 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1179 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1185 = (cbMatDynParam._m0[5u].x * _1179) + cbMatDynParam._m0[5u].y;
        float _4112 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1190 = (cbMatDynParam._m0[5u].z * _1179) + cbMatDynParam._m0[5u].w;
        float _4123 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) - _1186)) + _1186) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_921, cbSceneParam._m0[5u].z, fma(_920, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _919));
    float _1041 = fma(_921, cbSceneParam._m0[6u].z, fma(_920, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _919));
    float _1044 = fma(_921, cbSceneParam._m0[7u].z, fma(_920, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _919));
    uint _1057 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1058 = _1057 + 9u;
    uint _1059 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _1065 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_1059].x;
    float _1066 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * cbInstanceData._m0[_1059].y;
    float _1067 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * cbInstanceData._m0[_1059].z;
    float _4134 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _1071 = 1.0 - _926;
    float _1072 = _1068 * _1071;
    float _1073 = _1069 * _1071;
    float _1074 = _1070 * _1071;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _926;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _926;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _926;
    float _1082 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    vec4 _1094 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = _1094.x * TEXCOORD_5.w;
    float _1098 = dot(vec3(_919, _920, _921), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _919) - _999;
    float _1106 = (_1101 * _920) - _1000;
    float _1107 = (_1101 * _921) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_919, _920, _921)));
    float _4167 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_922);
    float _1125 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1131 = (1.0 - _1125) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1132 = _1125 * _1113;
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1168, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160));
        float _1227 = fma(_1168, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160));
        float _1231 = fma(_1168, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160));
        float _1256 = _1160 + _919;
        float _1257 = _1164 + _920;
        float _1258 = _1168 + _921;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1223;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1227;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1231;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_919, _920, _921), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4215 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_919, _920, _921), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4248 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_919, _920, _921), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4281 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1168, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160));
        float _1546 = fma(_1168, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160));
        float _1550 = fma(_1168, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160));
        float _1573 = _1160 + _919;
        float _1574 = _1164 + _920;
        float _1575 = _1168 + _921;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_919, _920, _921), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4344 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_919, _920, _921), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4377 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_919, _920, _921), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4410 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = _1499;
        _1820 = _1499;
        _1821 = _1499;
        _1822 = _1499;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1511)) + _1511;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1512)) + _1512;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1513)) + _1513;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1105 * 0.5;
    float _1880 = _1106 * 0.5;
    float _1881 = _1107 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1168, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1168, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1168, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2009 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2012 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2263;
        if (_2009 > 0.0)
        {
            _2263 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2263 = frontier_phi_26_22_ladder;
        }
        float _2520;
        if (_2012 > 0.0)
        {
            _2520 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2520 = frontier_phi_38_33_ladder;
        }
        float _2522 = isnan(_2263) ? _2040 : (isnan(_2040) ? _2263 : min(_2040, _2263));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2006) + _1995;
        float _2528 = (_2523 * _2009) + _1999;
        float _2529 = (_2523 * _2012) + _2003;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2657.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2657.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2657.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1948);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1168, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1168, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1168, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2104 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2107 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2268;
        if (_2101 > 0.0)
        {
            _2268 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2268 = frontier_phi_28_24_ladder;
        }
        float _2547;
        if (_2104 > 0.0)
        {
            _2547 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2547 = frontier_phi_40_35_ladder;
        }
        float _2760;
        if (_2107 > 0.0)
        {
            _2760 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2760 = frontier_phi_49_46_ladder;
        }
        float _2762 = isnan(_2547) ? _2268 : (isnan(_2268) ? _2547 : min(_2268, _2547));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _2101) + _2090;
        float _2768 = (_2763 * _2104) + _2094;
        float _2769 = (_2763 * _2107) + _2098;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2771 = (-1.0) - _2770;
        float _2773 = _2770 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2769 > _2773) || ((_2769 < _2771) || ((_2768 > _2773) || ((_2768 < _2771) || ((_2767 < _2771) || (_2767 > _2773))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2769, cbModelParam._m0[17u].z, fma(_2768, cbModelParam._m0[17u].y, _2767 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2769, cbModelParam._m0[18u].z, fma(_2768, cbModelParam._m0[18u].y, _2767 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2769, cbModelParam._m0[19u].z, fma(_2768, cbModelParam._m0[19u].y, _2767 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_49_ladder = _3013.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3013.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3013.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_49_ladder_2;
        _2128 = frontier_phi_25_49_ladder_1;
        _2130 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2037);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2143 = (((_1131 * _1082) + _1132) * _1097) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1131 * _1084) + _1132) * _1097) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1131 * _1085) + _1132) * _1097) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2145, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2145, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2145, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    vec4 _2164 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1019, _1020));
    float _2166 = _2164.w;
    float _2178 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2166);
    float _2179 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2166);
    float _2180 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2166);
    uvec4 _2184 = floatBitsToUint(cbInstanceData._m0[_1057 + 5u]);
    uint _2186 = _2184.x * 14u;
    uint _2187 = _2186 + 13u;
    float _2194 = _1097 + (-1.0);
    float _2199 = (cbLight._m0[_2187].x * _2194) + 1.0;
    float _2200 = (cbLight._m0[_2187].y * _2194) + 1.0;
    float _2201 = (cbLight._m0[_2187].z * _2194) + 1.0;
    float _2202 = (cbLight._m0[_2187].w * _2194) + 1.0;
    uint _2203 = _2186 + 5u;
    float _2209 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2213 = _2186 + 4u;
    float _2222 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2226 = _2186 | 1u;
    float _2237 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_919, _920, _921));
    float _2240 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_919, _920, _921));
    float _4546 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _4557 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2245 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2247 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * 0.3183098733425140380859375;
    float _2254 = ((cbLight._m0[_2203].x * _2209) * _2247) + (((cbLight._m0[_2213].x * _2178) * _2222) * _2245);
    float _2255 = ((_2209 * cbLight._m0[_2203].y) * _2247) + (((cbLight._m0[_2213].y * _2179) * _2222) * _2245);
    float _2256 = ((_2209 * cbLight._m0[_2203].z) * _2247) + (((cbLight._m0[_2213].z * _2180) * _2222) * _2245);
    uvec4 _2260 = floatBitsToUint(cbLight._m0[_2186 + 12u]);
    bool _2262 = _2260.x == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2262)
    {
        _2273 = _2254;
        _2275 = _2255;
        _2277 = _2256;
    }
    else
    {
        uint _2281 = _2186 + 6u;
        float _2297 = (dot(vec3(cbLight._m0[_2186 + 2u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4568 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2300 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2273 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2254;
        _2275 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2255;
        _2277 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2256;
    }
    bool _2280 = _2260.y == 0u;
    float _2318;
    float _2320;
    float _2322;
    if (_2280)
    {
        _2318 = _2273;
        _2320 = _2275;
        _2322 = _2277;
    }
    else
    {
        uint _2491 = _2186 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2186 + 3u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4584 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2510 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2318 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2273;
        _2320 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2275;
        _2322 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2277;
    }
    uint _2325 = _2186 + 8u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _922) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2186].x + _999;
    float _2341 = cbLight._m0[_2186].y + _1000;
    float _2342 = cbLight._m0[_2186].z + _1001;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2186].xyz));
    float _4600 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _4611 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2354 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2355 = dot(vec3(_919, _920, _921), vec3(_2347, _2348, _2349));
    float _4622 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2347, _2348, _2349));
    float _4633 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2339 * _2339;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2376 = 0.959999978542327880859375 - _1079;
    float _2378 = 0.959999978542327880859375 - _1080;
    float _2379 = 0.959999978542327880859375 - _1081;
    float _2386 = 1.0 - _2339;
    float _2397 = (0.5 / (((_2354 * ((_2353 * _2386) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2386) + _2339) * _2353))) * _2353;
    float _4644 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    uint _2413 = _2186 + 9u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _922) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2226].x + _999;
    float _2427 = cbLight._m0[_2226].y + _1000;
    float _2428 = cbLight._m0[_2226].z + _1001;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2226].xyz));
    float _4655 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2440 = dot(vec3(_919, _920, _921), vec3(_2433, _2434, _2435));
    float _4666 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2433, _2434, _2435));
    float _4677 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2425 * _2425;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
    float _2466 = 1.0 - _2425;
    float _2476 = (0.5 / (((_2354 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2466) + _2425) * _2439))) * _2439;
    float _4688 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    float _2488 = (((((_2459 * _2376) + _1082) * cbLight._m0[_2413].x) * _2478) * _2209) + ((((cbLight._m0[_2325].x * _2178) * ((_2375 * _2376) + _1082)) * _2399) * _2222);
    float _2489 = (((((_2459 * _2378) + _1084) * cbLight._m0[_2413].y) * _2478) * _2209) + ((((cbLight._m0[_2325].y * _2179) * ((_2375 * _2378) + _1084)) * _2399) * _2222);
    float _2490 = (((((_2459 * _2379) + _1085) * cbLight._m0[_2413].z) * _2478) * _2209) + ((((cbLight._m0[_2325].z * _2180) * ((_2375 * _2379) + _1085)) * _2399) * _2222);
    float _2552;
    float _2554;
    float _2556;
    if (_2262)
    {
        _2552 = _2488;
        _2554 = _2489;
        _2556 = _2490;
    }
    else
    {
        uint _2558 = _2186 + 2u;
        uint _2562 = _2186 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _922) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _999;
        float _2579 = cbLight._m0[_2558].y + _1000;
        float _2580 = cbLight._m0[_2558].z + _1001;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2558].xyz));
        float _4699 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2592 = dot(vec3(_919, _920, _921), vec3(_2585, _2586, _2587));
        float _4710 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4721 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2354 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2618) + _2577) * _2591))) * _2591;
        float _4732 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2552 = (((((_2611 * _2376) + _1082) * cbLight._m0[_2562].x) * _2630) * _2631) + _2488;
        _2554 = (((((_2611 * _2378) + _1084) * cbLight._m0[_2562].y) * _2630) * _2631) + _2489;
        _2556 = (((((_2611 * _2379) + _1085) * cbLight._m0[_2562].z) * _2630) * _2631) + _2490;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2280)
    {
        _2666 = _2552;
        _2668 = _2554;
        _2670 = _2556;
    }
    else
    {
        uint _2677 = _2186 + 3u;
        uint _2681 = _2186 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _922) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _999;
        float _2698 = cbLight._m0[_2677].y + _1000;
        float _2699 = cbLight._m0[_2677].z + _1001;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2677].xyz));
        float _4748 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2711 = dot(vec3(_919, _920, _921), vec3(_2704, _2705, _2706));
        float _4759 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4770 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
        float _2737 = 1.0 - _2696;
        float _2747 = (0.5 / (((_2354 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2737) + _2696) * _2710))) * _2710;
        float _4781 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2666 = (((((_2730 * _2376) + _1082) * cbLight._m0[_2681].x) * _2749) * _2750) + _2552;
        _2668 = (((((_2730 * _2378) + _1084) * cbLight._m0[_2681].y) * _2749) * _2750) + _2554;
        _2670 = (((((_2730 * _2379) + _1085) * cbLight._m0[_2681].z) * _2749) * _2750) + _2556;
    }
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_2184.y == 0u)
    {
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2825;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2825;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2825;
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.x;
        uint _2852 = uint((float(_2840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2841))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2841)));
        float _2862 = (log2(_2828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2863 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        uint _2866 = uint(isnan(14.0) ? _2863 : (isnan(_2863) ? 14.0 : min(_2863, 14.0)));
        uvec4 _2871 = texelFetch(g_lightClusterGridBuffer, int(((_2866 << 2u) + (_2852 << 6u)) >> 2u));
        uint _2872 = _2871.x;
        uint _2873 = _2840.z;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((((1u << ((_2873 >> 4u) & 15u)) + 4294967295u) & _2872) == 0u) || ((_2873 & 240u) == 0u))
        {
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
        }
        else
        {
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            uint _3185 = 0u;
            uint _3194;
            bool _3195;
            for (;;)
            {
                _3194 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                _3195 = _3194 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3195)
                {
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3194;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3185 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2826;
                        float _3391 = _3350.y - _2827;
                        float _3392 = _3350.z - _2828;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_1038, _1041, _1044), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4807 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2826;
                        float _3426 = (-0.0) - _2827;
                        float _3427 = (-0.0) - _2828;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3442 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3443 = 1.0 - _1113;
                        float _3450 = sqrt(1.0 - ((1.0 - (_3443 * _3443)) * (1.0 - (_3442 * _3442))));
                        float _3451 = _3450 * _3450;
                        float _3452 = _3451 * _3451;
                        float _3453 = _3432 + _3397;
                        float _3454 = _3433 + _3398;
                        float _3455 = _3434 + _3399;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3463 = dot(vec3(_1038, _1041, _1044), vec3(_3432, _3433, _3434));
                        float _4823 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3467 = dot(vec3(_1038, _1041, _1044), vec3(_3459 * _3453, _3459 * _3454, _3459 * _3455));
                        float _4834 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3474 = ((_3470 * _3470) * (_3452 + (-1.0))) + 1.0;
                        float _3475 = _3410 * _3451;
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3400) + _3476;
                        float _4845 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3481 = 1.0 - _3451;
                        float _3491 = (0.5 / (((_3480 * ((_3466 * _3481) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3451) * _3466))) * _3480;
                        float _4856 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3502 = (((_3452 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3474 * _3474) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3254 = (_3421 * _3369.x) + _3327;
                        _3255 = (_3421 * _3369.y) + _3328;
                        _3256 = (_3421 * _3369.z) + _3329;
                        _3251 = (_3502 * _3386.x) + _3324;
                        _3252 = (_3502 * _3386.y) + _3325;
                        _3253 = (_3502 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_66_pred = _3251;
                    frontier_phi_66_pred_1 = _3256;
                    frontier_phi_66_pred_2 = _3255;
                    frontier_phi_66_pred_3 = _3254;
                    frontier_phi_66_pred_4 = _3253;
                    frontier_phi_66_pred_5 = _3252;
                }
                _3019 = frontier_phi_66_pred;
                _3029 = frontier_phi_66_pred_1;
                _3027 = frontier_phi_66_pred_2;
                _3025 = frontier_phi_66_pred_3;
                _3023 = frontier_phi_66_pred_4;
                _3021 = frontier_phi_66_pred_5;
                uint _3186 = _3185 + 1u;
                if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3179 = _3019;
                    _3180 = _3021;
                    _3181 = _3023;
                    _3182 = _3025;
                    _3183 = _3027;
                    _3184 = _3029;
                    _3185 = _3186;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
        }
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.z;
        uint _3035 = (_3033 >> 8u) & 15u;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((4294967295u << _3035) & _2872) == 0u)
        {
            _3147 = _3018;
            _3149 = _3020;
            _3151 = _3022;
            _3153 = _3024;
            _3155 = _3026;
            _3157 = _3028;
        }
        else
        {
            float _3172 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
            float _3173 = _3172 * _2826;
            float _3174 = _3172 * _2827;
            float _3175 = _3172 * _2828;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3035 < ((_3033 >> 12u) & 15u))
            {
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3307 = _3018;
                float _3308 = _3020;
                float _3309 = _3022;
                float _3310 = _3024;
                float _3311 = _3026;
                float _3312 = _3028;
                uint _3313 = _3035;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3323)
                    {
                        frontier_phi_77_pred = _3312;
                        frontier_phi_77_pred_1 = _3311;
                        frontier_phi_77_pred_2 = _3310;
                        frontier_phi_77_pred_3 = _3309;
                        frontier_phi_77_pred_4 = _3308;
                        frontier_phi_77_pred_5 = _3307;
                    }
                    else
                    {
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3529 = _3307;
                        float _3530 = _3308;
                        float _3531 = _3309;
                        float _3532 = _3310;
                        float _3533 = _3311;
                        float _3534 = _3312;
                        uint _3535 = _3322;
                        uint _3536;
                        vec4 _3561;
                        float _3562;
                        vec4 _3577;
                        vec3 _3589;
                        vec4 _3604;
                        vec4 _3619;
                        float _3666;
                        bool _3667;
                        for (;;)
                        {
                            uint _3546 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3535));
                            _3536 = (_3535 + 4294967295u) & _3535;
                            uint _3548 = _3546 * 40u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3562 = _3561.w;
                            uint _3564 = (_3546 * 40u) + 4u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3546 * 40u) + 8u;
                            _3589 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x));
                            uint _3591 = (_3546 * 40u) + 16u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3546 * 40u) + 20u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3622 = (_3546 * 40u) + 24u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3641 = (_3546 * 40u) + 28u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3666 = fma(_2828, _3654.z, fma(_2827, _3654.y, _3654.x * _2826)) + _3654.w;
                            _3667 = !((fma(_2828, _3635.z, fma(_2827, _3635.y, _3635.x * _2826)) + _3635.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3667)
                            {
                                float _3694 = _3561.x - _2826;
                                float _3695 = _3561.y - _2827;
                                float _3696 = _3561.z - _2828;
                                float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                                float _3700 = inversesqrt(_3697);
                                float _3701 = _3700 * _3694;
                                float _3702 = _3700 * _3695;
                                float _3703 = _3700 * _3696;
                                float _3707 = 1.0 - (_3697 / (_3562 * _3562));
                                float _4867 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3712 = sqrt(_3697) * _3577.w;
                                float _3714 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                                float _3715 = _3714 * _3714;
                                float _3718 = ((1.0 - _3715) * dot(vec3(_3701, _3702, _3703), vec3(_1038, _1041, _1044))) + _3715;
                                float _3721 = _3712 * _3712;
                                float _3725 = (fma(_2828, _3604.z, fma(_2827, _3604.y, _3604.x * _2826)) + _3604.w) / _3666;
                                float _3726 = (fma(_2828, _3619.z, fma(_2827, _3619.y, _3619.x * _2826)) + _3619.w) / _3666;
                                float _3730 = 1.0 - dot(vec2(_3725, _3726), vec2(_3725, _3726));
                                float _4883 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3732 = _3731 * (((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3708) / ((_3721 * 0.699999988079071044921875) + 1.0));
                                float _3744 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                                float _3745 = 1.0 - _1113;
                                float _3752 = sqrt(1.0 - ((1.0 - (_3745 * _3745)) * (1.0 - (_3744 * _3744))));
                                float _3753 = _3752 * _3752;
                                float _3754 = _3753 * _3753;
                                float _3755 = _3701 - _3173;
                                float _3756 = _3702 - _3174;
                                float _3757 = _3703 - _3175;
                                float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                                float _3765 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3173, (-0.0) - _3174, (-0.0) - _3175));
                                float _4894 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3768 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3769 = dot(vec3(_1038, _1041, _1044), vec3(_3761 * _3755, _3761 * _3756, _3761 * _3757));
                                float _4905 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3776 = ((_3772 * _3772) * (_3754 + (-1.0))) + 1.0;
                                float _3777 = _3714 * _3753;
                                float _3778 = _3777 * _3777;
                                float _3784 = ((1.0 - _3778) * dot(vec3(_1038, _1041, _1044), vec3(_3701, _3702, _3703))) + _3778;
                                float _4916 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3786 = 1.0 - _3753;
                                float _3796 = (0.5 / (((_3785 * ((_3768 * _3786) + _3753)) + 9.9999999392252902907785028219223e-09) + (((_3785 * _3786) + _3753) * _3768))) * _3785;
                                float _4927 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3806 = (_3731 * _3708) * (((_3754 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3776 * _3776) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3732 * _3577.y;
                                frontier_phi_83_pred_1 = _3732 * _3577.x;
                                frontier_phi_83_pred_2 = _3806 * _3589.z;
                                frontier_phi_83_pred_3 = _3806 * _3589.y;
                                frontier_phi_83_pred_4 = _3806 * _3589.x;
                                frontier_phi_83_pred_5 = _3732 * _3577.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3814 = frontier_phi_83_pred;
                            _3813 = frontier_phi_83_pred_1;
                            _3812 = frontier_phi_83_pred_2;
                            _3811 = frontier_phi_83_pred_3;
                            _3810 = frontier_phi_83_pred_4;
                            _3815 = frontier_phi_83_pred_5;
                            _3519 = _3813 + _3532;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            _3516 = _3810 + _3529;
                            _3517 = _3811 + _3530;
                            _3518 = _3812 + _3531;
                            if (_3536 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3536;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3521;
                        frontier_phi_77_pred_1 = _3520;
                        frontier_phi_77_pred_2 = _3519;
                        frontier_phi_77_pred_3 = _3518;
                        frontier_phi_77_pred_4 = _3517;
                        frontier_phi_77_pred_5 = _3516;
                    }
                    _3158 = frontier_phi_77_pred;
                    _3156 = frontier_phi_77_pred_1;
                    _3154 = frontier_phi_77_pred_2;
                    _3152 = frontier_phi_77_pred_3;
                    _3150 = frontier_phi_77_pred_4;
                    _3148 = frontier_phi_77_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3148;
                        _3308 = _3150;
                        _3309 = _3152;
                        _3310 = _3154;
                        _3311 = _3156;
                        _3312 = _3158;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3152;
                frontier_phi_58_59_ladder_1 = _3158;
                frontier_phi_58_59_ladder_2 = _3156;
                frontier_phi_58_59_ladder_3 = _3154;
                frontier_phi_58_59_ladder_4 = _3150;
                frontier_phi_58_59_ladder_5 = _3148;
            }
            else
            {
                frontier_phi_58_59_ladder = _3022;
                frontier_phi_58_59_ladder_1 = _3028;
                frontier_phi_58_59_ladder_2 = _3026;
                frontier_phi_58_59_ladder_3 = _3024;
                frontier_phi_58_59_ladder_4 = _3020;
                frontier_phi_58_59_ladder_5 = _3018;
            }
            _3147 = frontier_phi_58_59_ladder_5;
            _3149 = frontier_phi_58_59_ladder_4;
            _3151 = frontier_phi_58_59_ladder;
            _3153 = frontier_phi_58_59_ladder_3;
            _3155 = frontier_phi_58_59_ladder_2;
            _3157 = frontier_phi_58_59_ladder_1;
        }
        float _3162 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _2885 = (_3162 * _3153) + _2318;
        _2887 = (_3162 * _3155) + _2320;
        _2889 = (_3162 * _3157) + _2322;
        _2891 = ((_3147 * _1082) * _3162) + _2666;
        _2893 = ((_3149 * _1084) * _3162) + _2668;
        _2895 = ((_3151 * _1085) * _3162) + _2670;
    }
    else
    {
        _2885 = _2318;
        _2887 = _2320;
        _2889 = _2322;
        _2891 = _2666;
        _2893 = _2668;
        _2895 = _2670;
    }
    uint _2901 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _2907 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2913 = (((((_2907 * cbMtdParam._m0[14u].x) * _777.x) * _800) * _874) * (((1.0 - _853) * cbMtdParam._m0[20u].w) + _853)) * cbInstanceData._m0[_2901].x;
    float _2919 = (((((_2907 * cbMtdParam._m0[14u].y) * _777.y) * _800) * _874) * (((1.0 - _855) * cbMtdParam._m0[20u].w) + _855)) * cbInstanceData._m0[_2901].y;
    float _2925 = (((((_2907 * cbMtdParam._m0[14u].z) * _777.z) * _800) * _874) * (((1.0 - _857) * cbMtdParam._m0[20u].w) + _857)) * cbInstanceData._m0[_2901].z;
    float _4943 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4954 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _4965 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2942 = (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2885 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1097))) + ((_2891 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1937)) * cbPerFrame._m0[3u].x)) + _2913;
    float _2944 = (_2919 + ((_2893 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2887 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1097)));
    float _2946 = (_2925 + ((_2895 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2889 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1097)));
    float _2947 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
    float _2948 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
    float _2949 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
    float _2955 = cbMtdParam._m0[2u].x * _2913;
    float _2956 = cbMtdParam._m0[2u].y * _2919;
    float _2957 = cbMtdParam._m0[2u].z * _2925;
    float _4991 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2959 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
    uint _2960 = _1057 + 6u;
    float _2968 = _1019 / cbSceneParam._m0[86u].x;
    float _2969 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2983 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2985 = _2983.x;
    float _2986 = _2983.y;
    float _2987 = _2983.z;
    float _2988 = _2983.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _3043 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _3044 = _3043 / _942;
        float _3055 = _3044 * _992;
        float _3056 = _993 * _3044;
        float _3057 = (-0.0) - _3056;
        float _3058 = _3044 * _994;
        float _3060 = (cbSceneParam._m0[77u].w * _3057) / _3043;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3056;
        float _3068 = sqrt(((_3055 * _3055) + (_3056 * _3056)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3043)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3264;
        if (abs((_3057 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3264 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3208 = 1.0 / cbSceneParam._m0[80u].x;
            float _3209 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3210 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            _3264 = ((abs(_3068 / _3057) * cbSceneParam._m0[80u].y) * ((((_3219 - _3220) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))))) * _3208)) - ((exp2(_3078 * _3219) - exp2(_3078 * _3220)) * _3208))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3266 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, 1.0), 0.0);
        float _3275 = exp2((_3264 * (-1.44269502162933349609375)) * (1.0 - _3266.w));
        float _3276 = log2(_3275);
        float _3292 = log2(_2988);
        _3080 = (exp2(_3292 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].x)) * _3266.x) / cbSceneParam._m0[78u].x)) + _2985;
        _3082 = (exp2(_3292 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].y)) * _3266.y) / cbSceneParam._m0[78u].y)) + _2986;
        _3084 = (exp2(_3292 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3276 * cbSceneParam._m0[78u].z)) * _3266.z) / cbSceneParam._m0[78u].z)) + _2987;
        _3086 = _3275 * _2988;
    }
    else
    {
        _3080 = _2985;
        _3082 = _2986;
        _3084 = _2987;
        _3086 = _2988;
    }
    bool _3302;
    vec4 _3096;
    vec4 _3118;
    float _3120;
    float _3124;
    float _3125;
    float _3126;
    float _3129;
    float _3132;
    float _3135;
    float _3136;
    bool _3146;
    for (;;)
    {
        _3096 = cbMatDynParam._m0[0u];
        float _3098 = roundEven(_3096.y);
        bool _3099 = _3098 == 3.0;
        float _3100 = log2(_3086);
        float _3104 = exp2(_3100 * cbSceneParam._m0[78u].x);
        float _3105 = exp2(_3100 * cbSceneParam._m0[78u].y);
        float _3106 = exp2(_3100 * cbSceneParam._m0[78u].z);
        float _3107 = _3104 * _2947;
        float _3108 = _3105 * _2948;
        float _3109 = _3106 * _2949;
        float _3116 = _1008 + (-0.5);
        _3118 = cbMtdParam._m0[1u];
        _3120 = _3118.y * _3116;
        float _3123 = (_3098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3124 = _3123 * (_3099 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3080)));
        _3125 = _3123 * (_3099 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3082)));
        _3126 = _3123 * (_3099 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3084)));
        _3129 = ((_2955 * _2959) * _3104) * _3123;
        _3132 = ((_2956 * _2959) * _3105) * _3123;
        _3135 = ((_2957 * _2959) * _3106) * _3123;
        _3136 = _3116 * 0.999000012874603271484375;
        _3146 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3146)
        {
            if ((cbInstanceData._m0[_1057 + 7u].x + _3136) < 0.5)
            {
                _3302 = true;
                break;
            }
        }
        uint _3243 = _1058 + uint(_3096.w);
        if ((cbInstanceData._m0[_3243].w < 1.0) && ((cbInstanceData._m0[_3243].w + _3136) < 0.5))
        {
            _3302 = true;
            break;
        }
        if ((_3120 + 1.0) < _3118.x)
        {
            _3302 = true;
            break;
        }
        _3302 = false;
        break;
    }
    float _3507;
    if (_3302)
    {
        discard_state = true;
        _3507 = 0.0;
    }
    else
    {
        _3507 = cbInstanceData._m0[_2960].w;
    }
    SV_Target.x = _3124;
    SV_Target.y = _3125;
    SV_Target.z = _3126;
    SV_Target.w = _3507;
    SV_Target_1.x = _3129;
    SV_Target_1.y = _3132;
    SV_Target_1.z = _3135;
    SV_Target_1.w = cbInstanceData._m0[_2960].w;
    discard_exit();
}


