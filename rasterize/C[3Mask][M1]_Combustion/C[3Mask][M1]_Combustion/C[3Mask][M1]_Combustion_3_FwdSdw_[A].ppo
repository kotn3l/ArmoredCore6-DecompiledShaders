#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1442;
float _4159;
float _4160;
float _4161;
float _4162;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _280 = _274.x * cbMtdParam._m0[10u].x;
    float _281 = _274.y * cbMtdParam._m0[10u].y;
    float _282 = _274.z * cbMtdParam._m0[10u].z;
    vec4 _301 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _320 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _348 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _358 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _320.x) * 2.0) - _348)) + 1.0;
    float _4171 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _366 = (_359 * ((_301.x * cbMtdParam._m0[11u].x) - _280)) + _280;
    float _367 = (_359 * ((_301.y * cbMtdParam._m0[11u].y) - _281)) + _281;
    float _368 = (_359 * ((_301.z * cbMtdParam._m0[11u].z) - _282)) + _282;
    vec4 _386 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _399 = (((((1.0 - _320.y) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4182 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _407 = (((_386.x * cbMtdParam._m0[12u].x) - _366) * _400) + _366;
    float _408 = (_400 * ((_386.y * cbMtdParam._m0[12u].y) - _367)) + _367;
    float _409 = (_400 * ((_386.z * cbMtdParam._m0[12u].z) - _368)) + _368;
    vec4 _427 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _440 = (((((1.0 - _320.z) * 2.0) - _348) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4193 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _448 = (((_427.x * cbMtdParam._m0[13u].x) - _407) * _441) + _407;
    float _449 = (_441 * ((_427.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _450 = (_441 * ((_427.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _475 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _494 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    float _497 = _494.x + 0.00999999977648258209228515625;
    float _504 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _497)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4204 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _512 = (_505 * ((_475.x * cbMtdParam._m0[16u].x) - _448)) + _448;
    float _513 = (_505 * ((_475.y * cbMtdParam._m0[16u].y) - _449)) + _449;
    float _514 = (_505 * ((_475.z * cbMtdParam._m0[16u].z) - _450)) + _450;
    vec4 _527 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _547 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _529) * _359) + _529;
    float _564 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _547) * _400) + _547;
    float _581 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _564) * _441) + _564;
    float _583 = _581 - (_581 * TEXCOORD_8);
    vec4 _596 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    vec4 _633 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _644 = ((_633.x - _619) * _359) + _619;
    float _645 = ((_633.y - _620) * _359) + _620;
    float _646 = ((_633.z - _621) * _359) + _621;
    vec4 _659 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _670 = ((_659.x - _644) * _400) + _644;
    float _671 = ((_659.y - _645) * _400) + _645;
    float _672 = ((_659.z - _646) * _400) + _646;
    vec4 _685 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _698 = ((_685.z - _672) * _441) + _672;
    float _701 = ((((_685.x - _670) * _441) + _670) * 2.0) + (-1.0);
    float _702 = ((((_685.y - _671) * _441) + _671) * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _4215 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))));
    float _713 = (((_596.z - _698) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _698;
    vec4 _743 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _757 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4226 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _766 = (((_758 * _758) * (3.0 - (_758 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _774 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _782 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4237 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _787 = (_783 * _783) * (3.0 - (_783 * 2.0));
    float _788 = _787 * cbMtdParam._m0[22u].x;
    float _789 = _787 * cbMtdParam._m0[22u].y;
    float _790 = sin(_774);
    float _791 = cos(_774);
    float _792 = TEXCOORD.z - _788;
    float _793 = TEXCOORD.w - _789;
    vec4 _813 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_788 + fma(_793, (-0.0) - _790, _792 * _791))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_793, _791, _792 * _790) + _789)) + cbTextureTilingScale._m0[2u].w));
    float _819 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _813.x;
    float _821 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _813.y;
    float _823 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _813.z;
    float _839 = (TEXCOORD_5.x - ((_497 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4248 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _846 = ((((_596.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _701;
    float _847 = ((((_596.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _702;
    float _850 = fma(_708, _245 * NORMAL.x, fma(_847, _252 * TANGENT.x, (_238 * _230) * _846));
    float _853 = fma(_708, _245 * NORMAL.y, fma(_847, _252 * TANGENT.y, (_238 * _231) * _846));
    float _856 = fma(_708, _245 * NORMAL.z, fma(_847, _252 * TANGENT.z, (_238 * _232) * _846));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _4259 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _864 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4281 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4292 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4303 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _868 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    vec4 _948 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _950 = _948.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1122 = sqrt(((_934 * _934) + (_935 * _935)) + (_936 * _936));
        float _1128 = (cbMatDynParam._m0[5u].x * _1122) + cbMatDynParam._m0[5u].y;
        float _4314 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1133 = (cbMatDynParam._m0[5u].z * _1122) + cbMatDynParam._m0[5u].w;
        float _4325 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) - _1129)) + _1129) < ((_950 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _981 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _984 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _987 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    uint _1000 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1001 = _1000 + 9u;
    uint _1002 = _1001 + uint(cbMatDynParam._m0[0u].w);
    float _1008 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * cbInstanceData._m0[_1002].x;
    float _1009 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1002].y;
    float _1010 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1002].z;
    float _4336 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _1014 = 1.0 - _868;
    float _1015 = _1011 * _1014;
    float _1016 = _1012 * _1014;
    float _1017 = _1013 * _1014;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _868;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _868;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _868;
    float _1025 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    vec4 _1037 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1040 = _1037.x * TEXCOORD_5.w;
    float _1041 = dot(vec3(_861, _862, _863), vec3(_941, _942, _943));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _861) - _941;
    float _1049 = (_1044 * _862) - _942;
    float _1050 = (_1044 * _863) - _943;
    float _1054 = abs(dot(vec3(_941, _942, _943), vec3(_861, _862, _863)));
    float _4369 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_864);
    float _1068 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1074 = (1.0 - _1068) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1075 = _1068 * _1056;
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1441;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1166 = fma(_1111, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103));
        float _1170 = fma(_1111, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103));
        float _1174 = fma(_1111, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103));
        float _1199 = _1103 + _861;
        float _1200 = _1107 + _862;
        float _1201 = _1111 + _863;
        float _1211 = fma(_1201, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199)) - _1166;
        float _1212 = fma(_1201, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199)) - _1170;
        float _1213 = fma(_1201, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199)) - _1174;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1166 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1170 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[34u].z) + ((((((_1174 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1269 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1235.x + (-0.5));
        float _1271 = _1269 * (_1235.y + (-0.5));
        float _1272 = _1269 * (_1235.z + (-0.5));
        float _1279 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1242.x + (-0.5));
        float _1281 = _1279 * (_1242.y + (-0.5));
        float _1282 = _1279 * (_1242.z + (-0.5));
        float _1289 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1249.x + (-0.5));
        float _1291 = _1289 * (_1249.y + (-0.5));
        float _1292 = _1289 * (_1249.z + (-0.5));
        float _1299 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1256.x + (-0.5));
        float _1301 = _1299 * (_1256.y + (-0.5));
        float _1302 = _1299 * (_1256.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1323 = (dot(vec3(_861, _862, _863), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1333 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4417 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1335 + 1.0))) + _1340) * _1303;
        float _1350 = _1271 * 0.5;
        float _1351 = _1281 * 0.5;
        float _1352 = _1291 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_861, _862, _863), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4450 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1377 + 1.0))) + _1382) * _1304;
        float _1392 = _1272 * 0.5;
        float _1393 = _1282 * 0.5;
        float _1394 = _1292 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_861, _862, _863), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4483 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1419 + 1.0))) + _1424) * _1305;
        _1441 = _1272;
        _1443 = _1271;
        _1444 = _1270;
        _1445 = _1282;
        _1446 = _1281;
        _1447 = _1280;
        _1448 = _1292;
        _1449 = _1291;
        _1450 = _1290;
        _1451 = _1305;
        _1452 = _1304;
        _1453 = _1303;
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1442;
        _1443 = _1442;
        _1444 = _1442;
        _1445 = _1442;
        _1446 = _1442;
        _1447 = _1442;
        _1448 = _1442;
        _1449 = _1442;
        _1450 = _1442;
        _1451 = _1442;
        _1452 = _1442;
        _1453 = _1442;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1485 = fma(_1111, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103));
        float _1489 = fma(_1111, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103));
        float _1493 = fma(_1111, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103));
        float _1516 = _1103 + _861;
        float _1517 = _1107 + _862;
        float _1518 = _1111 + _863;
        float _1528 = fma(_1518, cbModelParam._m0[30u].z, fma(_1517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1516)) - _1485;
        float _1529 = fma(_1518, cbModelParam._m0[31u].z, fma(_1517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1516)) - _1489;
        float _1530 = fma(_1518, cbModelParam._m0[32u].z, fma(_1517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1516)) - _1493;
        float _1534 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
        float _1547 = ((_1534 * _1528) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1485 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1534 * _1529) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1489 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1534 * _1530) / cbModelParam._m0[35u].z) + ((((((_1493 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        float _1584 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1551.x + (-0.5));
        float _1586 = _1584 * (_1551.y + (-0.5));
        float _1587 = _1584 * (_1551.z + (-0.5));
        float _1594 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1558.x + (-0.5));
        float _1596 = _1594 * (_1558.y + (-0.5));
        float _1597 = _1594 * (_1558.z + (-0.5));
        float _1604 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1565.x + (-0.5));
        float _1606 = _1604 * (_1565.y + (-0.5));
        float _1607 = _1604 * (_1565.z + (-0.5));
        float _1614 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1572.x + (-0.5));
        float _1616 = _1614 * (_1572.y + (-0.5));
        float _1617 = _1614 * (_1572.z + (-0.5));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = _1585 * 0.5;
        float _1622 = _1595 * 0.5;
        float _1623 = _1605 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_861, _862, _863), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4546 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1648 + 1.0))) + _1653) * _1618;
        float _1663 = _1586 * 0.5;
        float _1664 = _1596 * 0.5;
        float _1665 = _1606 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_861, _862, _863), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4579 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1690 + 1.0))) + _1695) * _1619;
        float _1705 = _1587 * 0.5;
        float _1706 = _1597 * 0.5;
        float _1707 = _1607 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_861, _862, _863), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4612 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1732 + 1.0))) + _1737) * _1620;
        _1754 = _1587;
        _1755 = _1586;
        _1756 = _1585;
        _1757 = _1597;
        _1758 = _1596;
        _1759 = _1595;
        _1760 = _1607;
        _1761 = _1606;
        _1762 = _1605;
        _1763 = _1620;
        _1764 = _1619;
        _1765 = _1618;
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
    }
    else
    {
        _1754 = _1442;
        _1755 = _1442;
        _1756 = _1442;
        _1757 = _1442;
        _1758 = _1442;
        _1759 = _1442;
        _1760 = _1442;
        _1761 = _1442;
        _1762 = _1442;
        _1763 = _1442;
        _1764 = _1442;
        _1765 = _1442;
        _1766 = 0.0;
        _1767 = 0.0;
        _1768 = 0.0;
    }
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1454)) + _1454;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1455)) + _1455;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1456)) + _1456;
    float _1801 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1778));
    float _1822 = _1048 * 0.5;
    float _1823 = _1049 * 0.5;
    float _1824 = _1050 * 0.5;
    float _1825 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1828 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1831 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1865;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1838 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1441, _1445, _1448, _1451));
        float _1842 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1846 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1853 = dot(vec4(cbModelParam._m0[39u]), vec4(_1822, _1823, _1824, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1876;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1867 = dot(vec4(cbModelParam._m0[40u]), vec4(_1822, _1823, _1824, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1880 = (_1876 * cbModelParam._m0[1u].x) + (_1865 * (1.0 - cbModelParam._m0[1u].x));
    float _1890 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _864);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1890 : min(cbModelParam._m0[25u].z, _1890));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1111, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1111, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1111, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1952 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1955 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1983 = frontier_phi_17_15_ladder;
        }
        float _2154;
        if (_1952 > 0.0)
        {
            _2154 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2154 = frontier_phi_26_22_ladder;
        }
        float _2449;
        if (_1955 > 0.0)
        {
            _2449 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2449 = frontier_phi_38_33_ladder;
        }
        float _2451 = isnan(_2154) ? _1983 : (isnan(_1983) ? _2154 : min(_1983, _2154));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1949) + _1938;
        float _2457 = (_2452 * _1952) + _1942;
        float _2458 = (_2452 * _1955) + _1946;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2459;
        float _2463 = _2459 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 > _2463) || ((_2457 < _2461) || ((_2456 < _2461) || (_2456 > _2463))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2458, cbModelParam._m0[9u].z, fma(_2457, cbModelParam._m0[9u].y, _2456 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2458, cbModelParam._m0[10u].z, fma(_2457, cbModelParam._m0[10u].y, _2456 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2458, cbModelParam._m0[11u].z, fma(_2457, cbModelParam._m0[11u].y, _2456 * cbModelParam._m0[11u].x))), _1891);
            frontier_phi_16_38_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_16_38_ladder_2;
        _1973 = frontier_phi_16_38_ladder_1;
        _1975 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1891);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _864);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2069;
    float _2071;
    float _2073;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2033 = fma(_1111, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103)) + cbModelParam._m0[21u].w;
        float _2037 = fma(_1111, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103)) + cbModelParam._m0[22u].w;
        float _2041 = fma(_1111, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103)) + cbModelParam._m0[23u].w;
        float _2044 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2047 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2050 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2159;
        if (_2044 > 0.0)
        {
            _2159 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2159 = frontier_phi_28_24_ladder;
        }
        float _2476;
        if (_2047 > 0.0)
        {
            _2476 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2476 = frontier_phi_40_35_ladder;
        }
        float _2814;
        if (_2050 > 0.0)
        {
            _2814 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2814 = frontier_phi_50_47_ladder;
        }
        float _2816 = isnan(_2476) ? _2159 : (isnan(_2159) ? _2476 : min(_2159, _2476));
        float _2817 = isnan(_2814) ? _2816 : (isnan(_2816) ? _2814 : min(_2816, _2814));
        float _2821 = (_2817 * _2044) + _2033;
        float _2822 = (_2817 * _2047) + _2037;
        float _2823 = (_2817 * _2050) + _2041;
        float _2824 = _2817 * 9.9999997473787516355514526367188e-05;
        float _2825 = (-1.0) - _2824;
        float _2827 = _2824 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2823 > _2827) || ((_2823 < _2825) || ((_2822 > _2827) || ((_2822 < _2825) || ((_2821 < _2825) || (_2821 > _2827))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2823, cbModelParam._m0[17u].z, fma(_2822, cbModelParam._m0[17u].y, _2821 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2823, cbModelParam._m0[18u].z, fma(_2822, cbModelParam._m0[18u].y, _2821 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2823, cbModelParam._m0[19u].z, fma(_2822, cbModelParam._m0[19u].y, _2821 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_25_50_ladder = _2945.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2945.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2945.x * cbModelParam._m0[1u].z;
        }
        _2069 = frontier_phi_25_50_ladder_2;
        _2071 = frontier_phi_25_50_ladder_1;
        _2073 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2053 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1980);
        _2069 = _2053.x * cbModelParam._m0[1u].z;
        _2071 = _2053.y * cbModelParam._m0[1u].z;
        _2073 = _2053.z * cbModelParam._m0[1u].z;
    }
    float _2086 = (((_1074 * _1025) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1074 * _1027) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2090 = (((_1074 * _1028) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2093 = fma(_2090, cbSceneParam._m0[89u].z, fma(_2088, cbSceneParam._m0[89u].y, _2086 * cbSceneParam._m0[89u].x));
    float _2096 = fma(_2090, cbSceneParam._m0[90u].z, fma(_2088, cbSceneParam._m0[90u].y, _2086 * cbSceneParam._m0[90u].x));
    float _2099 = fma(_2090, cbSceneParam._m0[91u].z, fma(_2088, cbSceneParam._m0[91u].y, _2086 * cbSceneParam._m0[91u].x));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2146 = _2133 / _2145;
    float _2147 = _2137 / _2145;
    float _2148 = _2141 / _2145;
    float _2295;
    float _2296;
    float _2297;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2175 = ((uint(_2148 > cbSceneParam._m0[59u].y) + uint(_2148 > cbSceneParam._m0[59u].x)) + uint(_2148 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2176 = _2175 + 43u;
        uint _2184 = _2175 + 44u;
        uint _2192 = _2175 + 45u;
        uint _2200 = _2175 + 46u;
        float _2211 = fma(_2145, cbSceneParam._m0[_2176].w, fma(_2141, cbSceneParam._m0[_2176].z, fma(_2137, cbSceneParam._m0[_2176].y, _2133 * cbSceneParam._m0[_2176].x)));
        float _2215 = fma(_2145, cbSceneParam._m0[_2184].w, fma(_2141, cbSceneParam._m0[_2184].z, fma(_2137, cbSceneParam._m0[_2184].y, _2133 * cbSceneParam._m0[_2184].x)));
        float _2223 = fma(_2145, cbSceneParam._m0[_2200].w, fma(_2141, cbSceneParam._m0[_2200].z, fma(_2137, cbSceneParam._m0[_2200].y, _2133 * cbSceneParam._m0[_2200].x)));
        float _2228 = cbSceneParam._m0[33u].z * _2223;
        float _2230 = cbSceneParam._m0[33u].w * _2223;
        float _2233 = fma(_2145, cbSceneParam._m0[_2192].w, fma(_2141, cbSceneParam._m0[_2192].z, fma(_2137, cbSceneParam._m0[_2192].y, _2133 * cbSceneParam._m0[_2192].x))) / _2223;
        float _2281 = (cbSceneParam._m0[33u].x - sqrt(((_2147 * _2147) + (_2146 * _2146)) + (_2148 * _2148))) * cbSceneParam._m0[33u].y;
        float _4738 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2288 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 + _2211) / _2223, (_2230 + _2215) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 + _2211) / _2223, (_2215 - _2228) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 - _2228) / _2223, (_2215 - _2230) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 - _2230) / _2223, (_2228 + _2215) / _2223), _2233), 0.0)).x), vec4(0.25)));
        _2295 = 1.0 - (_2288 * cbSceneParam._m0[34u].x);
        _2296 = 1.0 - (_2288 * cbSceneParam._m0[34u].y);
        _2297 = 1.0 - (_2288 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2295 = 1.0;
        _2296 = 1.0;
        _2297 = 1.0;
    }
    float _2361;
    float _2363;
    float _2365;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2349 = fma(_2145, cbSceneParam._m0[63u].w, fma(_2141, cbSceneParam._m0[63u].z, fma(_2137, cbSceneParam._m0[63u].y, _2133 * cbSceneParam._m0[63u].x)));
        float _2350 = fma(_2145, cbSceneParam._m0[60u].w, fma(_2141, cbSceneParam._m0[60u].z, fma(_2137, cbSceneParam._m0[60u].y, _2133 * cbSceneParam._m0[60u].x))) / _2349;
        float _2351 = fma(_2145, cbSceneParam._m0[61u].w, fma(_2141, cbSceneParam._m0[61u].z, fma(_2137, cbSceneParam._m0[61u].y, _2133 * cbSceneParam._m0[61u].x))) / _2349;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2350 >= cbSceneParam._m0[64u].x) && (_2351 >= cbSceneParam._m0[64u].y)) && (_2350 <= cbSceneParam._m0[64u].z)) && (_2351 <= cbSceneParam._m0[64u].w))
        {
            float _2489 = fma(_2145, cbSceneParam._m0[62u].w, fma(_2141, cbSceneParam._m0[62u].z, fma(_2137, cbSceneParam._m0[62u].y, _2133 * cbSceneParam._m0[62u].x))) / _2349;
            float _2493 = isnan(cbSceneParam._m0[41u].w) ? _2489 : (isnan(_2489) ? cbSceneParam._m0[41u].w : max(_2489, cbSceneParam._m0[41u].w));
            float _2536 = (cbSceneParam._m0[33u].x - sqrt(((_2147 * _2147) + (_2146 * _2146)) + (_2148 * _2148))) * cbSceneParam._m0[33u].y;
            float _4754 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
            float _2543 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2350, cbSceneParam._m0[33u].w + _2351), _2493), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2350, _2351 - cbSceneParam._m0[33u].z), _2493), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2350 - cbSceneParam._m0[33u].z, _2351 - cbSceneParam._m0[33u].w), _2493), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2350 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2351), _2493), 0.0)).x), vec4(0.25)));
            float _2547 = 1.0 - (_2543 * cbSceneParam._m0[34u].x);
            float _2548 = 1.0 - (_2543 * cbSceneParam._m0[34u].y);
            float _2549 = 1.0 - (_2543 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2549) ? _2297 : (isnan(_2297) ? _2549 : min(_2297, _2549));
            frontier_phi_37_36_ladder_1 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
            frontier_phi_37_36_ladder_2 = isnan(_2547) ? _2295 : (isnan(_2295) ? _2547 : min(_2295, _2547));
        }
        else
        {
            frontier_phi_37_36_ladder = _2297;
            frontier_phi_37_36_ladder_1 = _2296;
            frontier_phi_37_36_ladder_2 = _2295;
        }
        _2361 = frontier_phi_37_36_ladder_2;
        _2363 = frontier_phi_37_36_ladder_1;
        _2365 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2361 = _2295;
        _2363 = _2296;
        _2365 = _2297;
    }
    uvec4 _2370 = floatBitsToUint(cbInstanceData._m0[_1000 + 5u]);
    uint _2372 = _2370.x * 14u;
    uint _2373 = _2372 + 13u;
    float _2380 = _1040 + (-1.0);
    float _2385 = (cbLight._m0[_2373].x * _2380) + 1.0;
    float _2386 = (cbLight._m0[_2373].y * _2380) + 1.0;
    float _2387 = (cbLight._m0[_2373].z * _2380) + 1.0;
    float _2388 = (cbLight._m0[_2373].w * _2380) + 1.0;
    uint _2389 = _2372 + 5u;
    float _2395 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    uint _2399 = _2372 + 4u;
    float _2408 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
    uint _2412 = _2372 | 1u;
    float _2423 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_861, _862, _863));
    float _2426 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_861, _862, _863));
    float _4790 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _4801 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2431 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.3183098733425140380859375;
    float _2433 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2440 = ((cbLight._m0[_2389].x * _2395) * _2433) + (((cbLight._m0[_2399].x * _2361) * _2408) * _2431);
    float _2441 = ((_2395 * cbLight._m0[_2389].y) * _2433) + (((cbLight._m0[_2399].y * _2363) * _2408) * _2431);
    float _2442 = ((_2395 * cbLight._m0[_2389].z) * _2433) + (((cbLight._m0[_2399].z * _2365) * _2408) * _2431);
    uvec4 _2446 = floatBitsToUint(cbLight._m0[_2372 + 12u]);
    bool _2448 = _2446.x == 0u;
    float _2550;
    float _2552;
    float _2554;
    if (_2448)
    {
        _2550 = _2440;
        _2552 = _2441;
        _2554 = _2442;
    }
    else
    {
        uint _2558 = _2372 + 6u;
        float _2574 = (dot(vec3(cbLight._m0[_2372 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2575 = _2574 * _2574;
        float _4812 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2576 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2577 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
        _2550 = (((cbLight._m0[_2558].x * 0.3183098733425140380859375) * _2576) * _2577) + _2440;
        _2552 = (((cbLight._m0[_2558].y * 0.3183098733425140380859375) * _2576) * _2577) + _2441;
        _2554 = (((cbLight._m0[_2558].z * 0.3183098733425140380859375) * _2576) * _2577) + _2442;
    }
    bool _2557 = _2446.y == 0u;
    float _2612;
    float _2614;
    float _2616;
    if (_2557)
    {
        _2612 = _2550;
        _2614 = _2552;
        _2616 = _2554;
    }
    else
    {
        uint _2785 = _2372 + 7u;
        float _2801 = (dot(vec3(cbLight._m0[_2372 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2802 = _2801 * _2801;
        float _4828 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2803 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2804 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2612 = (((cbLight._m0[_2785].x * 0.3183098733425140380859375) * _2803) * _2804) + _2550;
        _2614 = (((cbLight._m0[_2785].y * 0.3183098733425140380859375) * _2803) * _2804) + _2552;
        _2616 = (((cbLight._m0[_2785].z * 0.3183098733425140380859375) * _2803) * _2804) + _2554;
    }
    uint _2619 = _2372 + 8u;
    float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _864) * 0.949999988079071044921875);
    float _2633 = _2632 * _2632;
    float _2634 = cbLight._m0[_2372].x + _941;
    float _2635 = cbLight._m0[_2372].y + _942;
    float _2636 = cbLight._m0[_2372].z + _943;
    float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
    float _2641 = _2640 * _2634;
    float _2642 = _2640 * _2635;
    float _2643 = _2640 * _2636;
    float _2644 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2372].xyz));
    float _4844 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _4855 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2648 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2649 = dot(vec3(_861, _862, _863), vec3(_2641, _2642, _2643));
    float _4866 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2652 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2653 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2641, _2642, _2643));
    float _4877 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2657 = _2633 * _2633;
    float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
    float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
    float _2670 = 0.959999978542327880859375 - _1022;
    float _2672 = 0.959999978542327880859375 - _1023;
    float _2673 = 0.959999978542327880859375 - _1024;
    float _2680 = 1.0 - _2633;
    float _2691 = (0.5 / (((_2648 * ((_2647 * _2680) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _2680) + _2633) * _2647))) * _2647;
    float _4888 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2693 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
    uint _2707 = _2372 + 9u;
    float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _864) * 0.949999988079071044921875);
    float _2719 = _2718 * _2718;
    float _2720 = cbLight._m0[_2412].x + _941;
    float _2721 = cbLight._m0[_2412].y + _942;
    float _2722 = cbLight._m0[_2412].z + _943;
    float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
    float _2727 = _2726 * _2720;
    float _2728 = _2726 * _2721;
    float _2729 = _2726 * _2722;
    float _2730 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2412].xyz));
    float _4899 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2733 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2734 = dot(vec3(_861, _862, _863), vec3(_2727, _2728, _2729));
    float _4910 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2738 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2727, _2728, _2729));
    float _4921 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2742 = _2719 * _2719;
    float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
    float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2760 = 1.0 - _2719;
    float _2770 = (0.5 / (((_2648 * ((_2733 * _2760) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _2760) + _2719) * _2733))) * _2733;
    float _4932 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2772 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
    float _2782 = (((((_2753 * _2670) + _1025) * cbLight._m0[_2707].x) * _2772) * _2395) + ((((cbLight._m0[_2619].x * _2361) * ((_2669 * _2670) + _1025)) * _2693) * _2408);
    float _2783 = (((((_2753 * _2672) + _1027) * cbLight._m0[_2707].y) * _2772) * _2395) + ((((cbLight._m0[_2619].y * _2363) * ((_2669 * _2672) + _1027)) * _2693) * _2408);
    float _2784 = (((((_2753 * _2673) + _1028) * cbLight._m0[_2707].z) * _2772) * _2395) + ((((cbLight._m0[_2619].z * _2365) * ((_2669 * _2673) + _1028)) * _2693) * _2408);
    float _2840;
    float _2842;
    float _2844;
    if (_2448)
    {
        _2840 = _2782;
        _2842 = _2783;
        _2844 = _2784;
    }
    else
    {
        uint _2846 = _2372 + 2u;
        uint _2850 = _2372 + 10u;
        float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2846].w)) * _864) * 0.949999988079071044921875);
        float _2865 = _2864 * _2864;
        float _2866 = cbLight._m0[_2846].x + _941;
        float _2867 = cbLight._m0[_2846].y + _942;
        float _2868 = cbLight._m0[_2846].z + _943;
        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
        float _2873 = _2872 * _2866;
        float _2874 = _2872 * _2867;
        float _2875 = _2872 * _2868;
        float _2876 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2846].xyz));
        float _4943 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _2880 = dot(vec3(_861, _862, _863), vec3(_2873, _2874, _2875));
        float _4954 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2884 = dot(vec3(cbLight._m0[_2846].xyz), vec3(_2873, _2874, _2875));
        float _4965 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2888 = _2865 * _2865;
        float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
        float _2899 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
        float _2906 = 1.0 - _2865;
        float _2916 = (0.5 / (((_2648 * ((_2879 * _2906) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _2906) + _2865) * _2879))) * _2879;
        float _4976 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2918 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
        float _2919 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
        _2840 = (((((_2899 * _2670) + _1025) * cbLight._m0[_2850].x) * _2918) * _2919) + _2782;
        _2842 = (((((_2899 * _2672) + _1027) * cbLight._m0[_2850].y) * _2918) * _2919) + _2783;
        _2844 = (((((_2899 * _2673) + _1028) * cbLight._m0[_2850].z) * _2918) * _2919) + _2784;
    }
    float _2950;
    float _2952;
    float _2954;
    if (_2557)
    {
        _2950 = _2840;
        _2952 = _2842;
        _2954 = _2844;
    }
    else
    {
        uint _2961 = _2372 + 3u;
        uint _2965 = _2372 + 11u;
        float _2979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2961].w)) * _864) * 0.949999988079071044921875);
        float _2980 = _2979 * _2979;
        float _2981 = cbLight._m0[_2961].x + _941;
        float _2982 = cbLight._m0[_2961].y + _942;
        float _2983 = cbLight._m0[_2961].z + _943;
        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
        float _2988 = _2987 * _2981;
        float _2989 = _2987 * _2982;
        float _2990 = _2987 * _2983;
        float _2991 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2961].xyz));
        float _4992 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2994 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _2995 = dot(vec3(_861, _862, _863), vec3(_2988, _2989, _2990));
        float _5003 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2998 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _2999 = dot(vec3(cbLight._m0[_2961].xyz), vec3(_2988, _2989, _2990));
        float _5014 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3003 = _2980 * _2980;
        float _3007 = ((_2998 * _2998) * (_3003 + (-1.0))) + 1.0;
        float _3014 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
        float _3021 = 1.0 - _2980;
        float _3031 = (0.5 / (((_2648 * ((_2994 * _3021) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_2648 * _3021) + _2980) * _2994))) * _2994;
        float _5025 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3033 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3003 / ((_3007 * _3007) * 3.141590118408203125));
        float _3034 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2950 = (((((_3014 * _2670) + _1025) * cbLight._m0[_2965].x) * _3033) * _3034) + _2840;
        _2952 = (((((_3014 * _2672) + _1027) * cbLight._m0[_2965].y) * _3033) * _3034) + _2842;
        _2954 = (((((_3014 * _2673) + _1028) * cbLight._m0[_2965].z) * _3033) * _3034) + _2844;
    }
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    if (_2370.y == 0u)
    {
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.x;
        uint _3067 = uint((float(_3055.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _3056))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _3056)));
        float _3077 = (log2(_2148 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3078 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        uint _3081 = uint(isnan(14.0) ? _3078 : (isnan(_3078) ? 14.0 : min(_3078, 14.0)));
        uvec4 _3086 = texelFetch(g_lightClusterGridBuffer, int(((_3081 << 2u) + (_3067 << 6u)) >> 2u));
        uint _3087 = _3086.x;
        uint _3088 = _3055.z;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((((1u << ((_3088 >> 4u) & 15u)) + 4294967295u) & _3087) == 0u) || ((_3088 & 240u) == 0u))
        {
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
            _3222 = 0.0;
        }
        else
        {
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3223;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            uint _3379 = 0u;
            uint _3388;
            bool _3389;
            for (;;)
            {
                _3388 = texelFetch(g_lightClassification, int((((_3081 << 5u) + (_3067 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                _3389 = _3388 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3389)
                {
                    frontier_phi_71_pred = _3378;
                    frontier_phi_71_pred_1 = _3377;
                    frontier_phi_71_pred_2 = _3376;
                    frontier_phi_71_pred_3 = _3375;
                    frontier_phi_71_pred_4 = _3374;
                    frontier_phi_71_pred_5 = _3373;
                }
                else
                {
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    uint _3524;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3388;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    for (;;)
                    {
                        uint _3528 = uint(findLSB(_3524)) + (_3379 << 5u);
                        uint _3525 = (_3524 + 4294967295u) & _3524;
                        uint _3530 = _3528 * 48u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 3u)).x));
                        uint _3550 = (_3528 * 48u) + 4u;
                        vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 3u)).x));
                        uint _3569 = (_3528 * 48u) + 8u;
                        vec3 _3580 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3569)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 2u)).x));
                        float _3584 = _3544.x - _2146;
                        float _3585 = _3544.y - _2147;
                        float _3586 = _3544.z - _2148;
                        float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                        float _3590 = inversesqrt(_3587);
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3594 = dot(vec3(_981, _984, _987), vec3(_3591, _3592, _3593));
                        float _3599 = 1.0 - (_3587 * _3544.w);
                        float _5051 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3600 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3601 = sqrt(_3587) * _3563.w;
                        float _3604 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                        float _3605 = _3604 * _3604;
                        float _3608 = ((1.0 - _3605) * _3594) + _3605;
                        float _3611 = _3601 * _3601;
                        float _3615 = ((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3600) / ((_3611 * 0.699999988079071044921875) + 1.0);
                        float _3619 = (-0.0) - _2146;
                        float _3620 = (-0.0) - _2147;
                        float _3621 = (-0.0) - _2148;
                        float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3635 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                        float _3636 = 1.0 - _1056;
                        float _3643 = sqrt(1.0 - ((1.0 - (_3636 * _3636)) * (1.0 - (_3635 * _3635))));
                        float _3644 = _3643 * _3643;
                        float _3645 = _3644 * _3644;
                        float _3646 = _3626 + _3591;
                        float _3647 = _3627 + _3592;
                        float _3648 = _3628 + _3593;
                        float _3652 = inversesqrt(dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648)));
                        float _3656 = dot(vec3(_981, _984, _987), vec3(_3626, _3627, _3628));
                        float _5067 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3659 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3660 = dot(vec3(_981, _984, _987), vec3(_3652 * _3646, _3652 * _3647, _3652 * _3648));
                        float _5078 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3663 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3667 = ((_3663 * _3663) * (_3645 + (-1.0))) + 1.0;
                        float _3668 = _3604 * _3644;
                        float _3669 = _3668 * _3668;
                        float _3672 = ((1.0 - _3669) * _3594) + _3669;
                        float _5089 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3673 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3674 = 1.0 - _3644;
                        float _3684 = (0.5 / (((_3673 * ((_3659 * _3674) + _3644)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3644) * _3659))) * _3673;
                        float _5100 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3695 = (((_3645 * 3.1415927410125732421875) * (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0)))) / ((_3667 * _3667) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125))) * _3600;
                        _3448 = (_3615 * _3563.x) + _3521;
                        _3449 = (_3615 * _3563.y) + _3522;
                        _3450 = (_3615 * _3563.z) + _3523;
                        _3445 = (_3695 * _3580.x) + _3518;
                        _3446 = (_3695 * _3580.y) + _3519;
                        _3447 = (_3695 * _3580.z) + _3520;
                        if (_3525 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3525;
                        }
                    }
                    frontier_phi_71_pred = _3450;
                    frontier_phi_71_pred_1 = _3449;
                    frontier_phi_71_pred_2 = _3448;
                    frontier_phi_71_pred_3 = _3447;
                    frontier_phi_71_pred_4 = _3446;
                    frontier_phi_71_pred_5 = _3445;
                }
                _3223 = frontier_phi_71_pred;
                _3221 = frontier_phi_71_pred_1;
                _3219 = frontier_phi_71_pred_2;
                _3217 = frontier_phi_71_pred_3;
                _3215 = frontier_phi_71_pred_4;
                _3213 = frontier_phi_71_pred_5;
                uint _3380 = _3379 + 1u;
                if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3373 = _3213;
                    _3374 = _3215;
                    _3375 = _3217;
                    _3376 = _3219;
                    _3377 = _3221;
                    _3378 = _3223;
                    _3379 = _3380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
            _3222 = _3223;
        }
        uvec4 _3226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3227 = _3226.z;
        uint _3229 = (_3227 >> 8u) & 15u;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        if (((4294967295u << _3229) & _3087) == 0u)
        {
            _3341 = _3212;
            _3343 = _3214;
            _3345 = _3216;
            _3347 = _3218;
            _3349 = _3220;
            _3351 = _3222;
        }
        else
        {
            float _3366 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
            float _3367 = _3366 * _2146;
            float _3368 = _3366 * _2147;
            float _3369 = _3366 * _2148;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3229 < ((_3227 >> 12u) & 15u))
            {
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3501 = _3212;
                float _3502 = _3214;
                float _3503 = _3216;
                float _3504 = _3218;
                float _3505 = _3220;
                float _3506 = _3222;
                uint _3507 = _3229;
                uint _3516;
                bool _3517;
                for (;;)
                {
                    _3516 = texelFetch(g_lightClassification, int((((_3081 << 5u) + (_3067 << 9u)) + (_3507 << 2u)) >> 2u)).x;
                    _3517 = _3516 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3517)
                    {
                        frontier_phi_82_pred = _3506;
                        frontier_phi_82_pred_1 = _3505;
                        frontier_phi_82_pred_2 = _3504;
                        frontier_phi_82_pred_3 = _3503;
                        frontier_phi_82_pred_4 = _3502;
                        frontier_phi_82_pred_5 = _3501;
                    }
                    else
                    {
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _3722 = _3501;
                        float _3723 = _3502;
                        float _3724 = _3503;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        uint _3728 = _3516;
                        uint _3729;
                        vec4 _3754;
                        float _3755;
                        vec4 _3770;
                        vec3 _3782;
                        vec4 _3797;
                        vec4 _3812;
                        float _3859;
                        bool _3860;
                        for (;;)
                        {
                            uint _3739 = ((_3507 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3728));
                            _3729 = (_3728 + 4294967295u) & _3728;
                            uint _3741 = _3739 * 40u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            _3755 = _3754.w;
                            uint _3757 = (_3739 * 40u) + 4u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3772 = (_3739 * 40u) + 8u;
                            _3782 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x));
                            uint _3784 = (_3739 * 40u) + 16u;
                            _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            uint _3799 = (_3739 * 40u) + 20u;
                            _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            uint _3815 = (_3739 * 40u) + 24u;
                            vec4 _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            uint _3834 = (_3739 * 40u) + 28u;
                            vec4 _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            _3859 = fma(_2148, _3847.z, fma(_2147, _3847.y, _3847.x * _2146)) + _3847.w;
                            _3860 = !((fma(_2148, _3828.z, fma(_2147, _3828.y, _3828.x * _2146)) + _3828.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3860)
                            {
                                float _3887 = _3754.x - _2146;
                                float _3888 = _3754.y - _2147;
                                float _3889 = _3754.z - _2148;
                                float _3890 = dot(vec3(_3887, _3888, _3889), vec3(_3887, _3888, _3889));
                                float _3893 = inversesqrt(_3890);
                                float _3894 = _3893 * _3887;
                                float _3895 = _3893 * _3888;
                                float _3896 = _3893 * _3889;
                                float _3900 = 1.0 - (_3890 / (_3755 * _3755));
                                float _5111 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3901 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3905 = sqrt(_3890) * _3770.w;
                                float _3907 = 1.39999997615814208984375 / (_3905 + 1.39999997615814208984375);
                                float _3908 = _3907 * _3907;
                                float _3911 = ((1.0 - _3908) * dot(vec3(_3894, _3895, _3896), vec3(_981, _984, _987))) + _3908;
                                float _3914 = _3905 * _3905;
                                float _3918 = (fma(_2148, _3797.z, fma(_2147, _3797.y, _3797.x * _2146)) + _3797.w) / _3859;
                                float _3919 = (fma(_2148, _3812.z, fma(_2147, _3812.y, _3812.x * _2146)) + _3812.w) / _3859;
                                float _3923 = 1.0 - dot(vec2(_3918, _3919), vec2(_3918, _3919));
                                float _5127 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3924 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3925 = _3924 * (((isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0))) * _3901) / ((_3914 * 0.699999988079071044921875) + 1.0));
                                float _3937 = exp2(log2(1.0 / ((_3914 * 3.5) + 5.0)) * 0.25);
                                float _3938 = 1.0 - _1056;
                                float _3945 = sqrt(1.0 - ((1.0 - (_3938 * _3938)) * (1.0 - (_3937 * _3937))));
                                float _3946 = _3945 * _3945;
                                float _3947 = _3946 * _3946;
                                float _3948 = _3894 - _3367;
                                float _3949 = _3895 - _3368;
                                float _3950 = _3896 - _3369;
                                float _3954 = inversesqrt(dot(vec3(_3948, _3949, _3950), vec3(_3948, _3949, _3950)));
                                float _3958 = dot(vec3(_981, _984, _987), vec3((-0.0) - _3367, (-0.0) - _3368, (-0.0) - _3369));
                                float _5138 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3961 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3962 = dot(vec3(_981, _984, _987), vec3(_3954 * _3948, _3954 * _3949, _3954 * _3950));
                                float _5149 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3965 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3969 = ((_3965 * _3965) * (_3947 + (-1.0))) + 1.0;
                                float _3970 = _3907 * _3946;
                                float _3971 = _3970 * _3970;
                                float _3977 = ((1.0 - _3971) * dot(vec3(_981, _984, _987), vec3(_3894, _3895, _3896))) + _3971;
                                float _5160 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3978 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3979 = 1.0 - _3946;
                                float _3989 = (0.5 / (((_3978 * ((_3961 * _3979) + _3946)) + 9.9999999392252902907785028219223e-09) + (((_3978 * _3979) + _3946) * _3961))) * _3978;
                                float _5171 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3999 = (_3924 * _3901) * (((_3947 * 3.1415927410125732421875) * (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0)))) / ((_3969 * _3969) * ((_3914 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3925 * _3770.z;
                                frontier_phi_88_pred_1 = _3925 * _3770.y;
                                frontier_phi_88_pred_2 = _3925 * _3770.x;
                                frontier_phi_88_pred_3 = _3999 * _3782.z;
                                frontier_phi_88_pred_4 = _3999 * _3782.y;
                                frontier_phi_88_pred_5 = _3999 * _3782.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4008 = frontier_phi_88_pred;
                            _4007 = frontier_phi_88_pred_1;
                            _4006 = frontier_phi_88_pred_2;
                            _4005 = frontier_phi_88_pred_3;
                            _4004 = frontier_phi_88_pred_4;
                            _4003 = frontier_phi_88_pred_5;
                            _3712 = _4006 + _3725;
                            _3713 = _4007 + _3726;
                            _3714 = _4008 + _3727;
                            _3709 = _4003 + _3722;
                            _3710 = _4004 + _3723;
                            _3711 = _4005 + _3724;
                            if (_3729 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3729;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3714;
                        frontier_phi_82_pred_1 = _3713;
                        frontier_phi_82_pred_2 = _3712;
                        frontier_phi_82_pred_3 = _3711;
                        frontier_phi_82_pred_4 = _3710;
                        frontier_phi_82_pred_5 = _3709;
                    }
                    _3352 = frontier_phi_82_pred;
                    _3350 = frontier_phi_82_pred_1;
                    _3348 = frontier_phi_82_pred_2;
                    _3346 = frontier_phi_82_pred_3;
                    _3344 = frontier_phi_82_pred_4;
                    _3342 = frontier_phi_82_pred_5;
                    uint _3508 = _3507 + 1u;
                    if (_3508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3501 = _3342;
                        _3502 = _3344;
                        _3503 = _3346;
                        _3504 = _3348;
                        _3505 = _3350;
                        _3506 = _3352;
                        _3507 = _3508;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3348;
                frontier_phi_63_64_ladder_1 = _3352;
                frontier_phi_63_64_ladder_2 = _3350;
                frontier_phi_63_64_ladder_3 = _3346;
                frontier_phi_63_64_ladder_4 = _3344;
                frontier_phi_63_64_ladder_5 = _3342;
            }
            else
            {
                frontier_phi_63_64_ladder = _3218;
                frontier_phi_63_64_ladder_1 = _3222;
                frontier_phi_63_64_ladder_2 = _3220;
                frontier_phi_63_64_ladder_3 = _3216;
                frontier_phi_63_64_ladder_4 = _3214;
                frontier_phi_63_64_ladder_5 = _3212;
            }
            _3341 = frontier_phi_63_64_ladder_5;
            _3343 = frontier_phi_63_64_ladder_4;
            _3345 = frontier_phi_63_64_ladder_3;
            _3347 = frontier_phi_63_64_ladder;
            _3349 = frontier_phi_63_64_ladder_2;
            _3351 = frontier_phi_63_64_ladder_1;
        }
        float _3356 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3100 = (_3356 * _3347) + _2612;
        _3102 = (_3356 * _3349) + _2614;
        _3104 = (_3356 * _3351) + _2616;
        _3106 = ((_3341 * _1025) * _3356) + _2950;
        _3108 = ((_3343 * _1027) * _3356) + _2952;
        _3110 = ((_3345 * _1028) * _3356) + _2954;
    }
    else
    {
        _3100 = _2612;
        _3102 = _2614;
        _3104 = _2616;
        _3106 = _2950;
        _3108 = _2952;
        _3110 = _2954;
    }
    uint _3116 = _1001 + uint(cbMatDynParam._m0[0u].w);
    float _3122 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3128 = (((((_3122 * cbMtdParam._m0[14u].x) * _743.x) * _766) * _840) * (((1.0 - _819) * cbMtdParam._m0[20u].w) + _819)) * cbInstanceData._m0[_3116].x;
    float _3134 = (((((_3122 * cbMtdParam._m0[14u].y) * _743.y) * _766) * _840) * (((1.0 - _821) * cbMtdParam._m0[20u].w) + _821)) * cbInstanceData._m0[_3116].y;
    float _3140 = (((((_3122 * cbMtdParam._m0[14u].z) * _743.z) * _766) * _840) * (((1.0 - _823) * cbMtdParam._m0[20u].w) + _823)) * cbInstanceData._m0[_3116].z;
    float _5187 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5198 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5209 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _3157 = (((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3100 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1040))) + ((_3106 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + _3128;
    float _3159 = (_3134 + ((_3108 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3102 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1040)));
    float _3161 = (_3140 + ((_3110 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3104 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1040)));
    float _3162 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
    float _3163 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
    float _3164 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
    float _3170 = cbMtdParam._m0[2u].x * _3128;
    float _3171 = cbMtdParam._m0[2u].y * _3134;
    float _3172 = cbMtdParam._m0[2u].z * _3140;
    float _5235 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3174 = isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0));
    uint _3175 = _1000 + 6u;
    float _3183 = _961 / cbSceneParam._m0[86u].x;
    float _3184 = _962 / cbSceneParam._m0[86u].y;
    vec4 _3198 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3200 = _3198.x;
    float _3201 = _3198.y;
    float _3202 = _3198.z;
    float _3203 = _3198.w;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _3237 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _3238 = _3237 / _884;
        float _3249 = _3238 * _934;
        float _3250 = _935 * _3238;
        float _3251 = (-0.0) - _3250;
        float _3252 = _3238 * _936;
        float _3254 = (cbSceneParam._m0[77u].w * _3251) / _3237;
        float _3255 = _3254 + cbSceneParam._m0[79u].w;
        float _3256 = cbSceneParam._m0[79u].w - _3250;
        float _3262 = sqrt(((_3249 * _3249) + (_3250 * _3250)) + (_3252 * _3252));
        float _3265 = (1.0 - (cbSceneParam._m0[77u].w / _3237)) * _3262;
        float _3270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3458;
        if (abs((_3251 - _3254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3458 = ((((_3255 > 0.0) ? exp2(_3270 * _3255) : (2.0 - exp2(_3272 * _3255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3265;
        }
        else
        {
            float _3402 = 1.0 / cbSceneParam._m0[80u].x;
            float _3403 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : max(_3255, _3256));
            float _3404 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : min(_3255, _3256));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            float _3414 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : min(_3404, 0.0));
            _3458 = ((abs(_3262 / _3251) * cbSceneParam._m0[80u].y) * ((((_3413 - _3414) * 2.0) - ((exp2(_3270 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0)))) - exp2(_3270 * (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))))) * _3402)) - ((exp2(_3272 * _3413) - exp2(_3272 * _3414)) * _3402))) + (_3265 * cbSceneParam._m0[80u].z);
        }
        vec4 _3460 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3183, _3184, 1.0), 0.0);
        float _3469 = exp2((_3458 * (-1.44269502162933349609375)) * (1.0 - _3460.w));
        float _3470 = log2(_3469);
        float _3486 = log2(_3203);
        _3274 = (exp2(_3486 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].x)) * _3460.x) / cbSceneParam._m0[78u].x)) + _3200;
        _3276 = (exp2(_3486 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].y)) * _3460.y) / cbSceneParam._m0[78u].y)) + _3201;
        _3278 = (exp2(_3486 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].z)) * _3460.z) / cbSceneParam._m0[78u].z)) + _3202;
        _3280 = _3469 * _3203;
    }
    else
    {
        _3274 = _3200;
        _3276 = _3201;
        _3278 = _3202;
        _3280 = _3203;
    }
    bool _3496;
    vec4 _3290;
    vec4 _3312;
    float _3314;
    float _3318;
    float _3319;
    float _3320;
    float _3323;
    float _3326;
    float _3329;
    float _3330;
    bool _3340;
    for (;;)
    {
        _3290 = cbMatDynParam._m0[0u];
        float _3292 = roundEven(_3290.y);
        bool _3293 = _3292 == 3.0;
        float _3294 = log2(_3280);
        float _3298 = exp2(_3294 * cbSceneParam._m0[78u].x);
        float _3299 = exp2(_3294 * cbSceneParam._m0[78u].y);
        float _3300 = exp2(_3294 * cbSceneParam._m0[78u].z);
        float _3301 = _3298 * _3162;
        float _3302 = _3299 * _3163;
        float _3303 = _3300 * _3164;
        float _3310 = _950 + (-0.5);
        _3312 = cbMtdParam._m0[1u];
        _3314 = _3312.y * _3310;
        float _3317 = (_3292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3318 = _3317 * (_3293 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3274)));
        _3319 = _3317 * (_3293 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3276)));
        _3320 = _3317 * (_3293 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3278)));
        _3323 = ((_3170 * _3174) * _3298) * _3317;
        _3326 = ((_3171 * _3174) * _3299) * _3317;
        _3329 = ((_3172 * _3174) * _3300) * _3317;
        _3330 = _3310 * 0.999000012874603271484375;
        _3340 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3340)
        {
            if ((cbInstanceData._m0[_1000 + 7u].x + _3330) < 0.5)
            {
                _3496 = true;
                break;
            }
        }
        uint _3437 = _1001 + uint(_3290.w);
        if ((cbInstanceData._m0[_3437].w < 1.0) && ((cbInstanceData._m0[_3437].w + _3330) < 0.5))
        {
            _3496 = true;
            break;
        }
        if ((_3314 + 1.0) < _3312.x)
        {
            _3496 = true;
            break;
        }
        _3496 = false;
        break;
    }
    float _3700;
    if (_3496)
    {
        discard_state = true;
        _3700 = 0.0;
    }
    else
    {
        _3700 = cbInstanceData._m0[_3175].w;
    }
    SV_Target.x = _3318;
    SV_Target.y = _3319;
    SV_Target.z = _3320;
    SV_Target.w = _3700;
    SV_Target_1.x = _3323;
    SV_Target_1.y = _3326;
    SV_Target_1.z = _3329;
    SV_Target_1.w = cbInstanceData._m0[_3175].w;
    discard_exit();
}


