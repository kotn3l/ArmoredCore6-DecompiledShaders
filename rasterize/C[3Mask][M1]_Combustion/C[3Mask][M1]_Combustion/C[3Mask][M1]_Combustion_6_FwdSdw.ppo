#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 19) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M1_Combustion_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1348;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _293 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _312 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w)).x;
    float _350 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _312.x) * 2.0) - _340)) + 1.0;
    float _4012 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _358 = (_351 * ((_293.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _359 = (_351 * ((_293.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _360 = (_351 * ((_293.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _378 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[19u].x * TEXCOORD.x) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * TEXCOORD.y) + cbTextureTilingScale._m0[19u].w));
    float _391 = (((((1.0 - _312.y) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4023 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _399 = (((_378.x * cbMtdParam._m0[12u].x) - _358) * _392) + _358;
    float _400 = (_392 * ((_378.y * cbMtdParam._m0[12u].y) - _359)) + _359;
    float _401 = (_392 * ((_378.z * cbMtdParam._m0[12u].z) - _360)) + _360;
    vec4 _419 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _432 = (((((1.0 - _312.z) * 2.0) - _340) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4034 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    vec4 _461 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = ((((((_419.x * cbMtdParam._m0[13u].x) - _399) * _433) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _461.x;
    float _472 = ((((_433 * ((_419.y * cbMtdParam._m0[13u].y) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _461.y;
    float _475 = ((((_433 * ((_419.z * cbMtdParam._m0[13u].z) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _461.z;
    vec4 _488 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[20u].x * TEXCOORD.z) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * TEXCOORD.w) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _522 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _505) * _351) + _505;
    float _539 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _522) * _392) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x - _539) * _433) + _539;
    vec4 _569 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _585 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _596 = ((_585.x - _571) * _351) + _571;
    float _597 = ((_585.y - _572) * _351) + _572;
    float _598 = ((_585.z - _573) * _351) + _573;
    vec4 _611 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _622 = ((_611.x - _596) * _392) + _596;
    float _623 = ((_611.y - _597) * _392) + _597;
    float _624 = ((_611.z - _598) * _392) + _598;
    vec4 _637 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _650 = ((_637.z - _624) * _433) + _624;
    float _653 = ((((_637.x - _622) * _433) + _622) * 2.0) + (-1.0);
    float _655 = ((((_637.y - _623) * _433) + _623) * 2.0) + (-1.0);
    float _656 = dot(vec2(_653, _655), vec2(_653, _655));
    float _4045 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))));
    vec4 _693 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[15u].x) + cbTextureTilingScale._m0[15u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[15u].y) + cbTextureTilingScale._m0[15u].w));
    float _707 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4056 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _716 = (((_708 * _708) * (3.0 - (_708 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _724 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _732 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4067 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _737 = (_733 * _733) * (3.0 - (_733 * 2.0));
    float _738 = _737 * cbMtdParam._m0[22u].x;
    float _739 = _737 * cbMtdParam._m0[22u].y;
    float _740 = sin(_724);
    float _741 = cos(_724);
    float _742 = TEXCOORD.z - _738;
    float _743 = TEXCOORD.w - _739;
    vec4 _763 = texture(sampler2D(C_3Mask_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_738 + fma(_743, (-0.0) - _740, _742 * _741))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_743, _741, _742 * _740) + _739)) + cbTextureTilingScale._m0[2u].w));
    float _769 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _763.x;
    float _771 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _763.y;
    float _773 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _763.z;
    float _793 = (TEXCOORD_5.x - (((_488.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4078 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _797 = fma(_661, _237 * NORMAL.x, fma(_655, _244 * TANGENT.x, (_230 * _222) * _653));
    float _800 = fma(_661, _237 * NORMAL.y, fma(_655, _244 * TANGENT.y, (_230 * _223) * _653));
    float _803 = fma(_661, _237 * NORMAL.z, fma(_655, _244 * TANGENT.z, (_230 * _224) * _653));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _4089 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _811 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4111 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4122 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4133 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _815 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _918 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _921 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _934 = uint(roundEven(NORMAL.w)) * 13u;
    uint _935 = _934 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4144 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _948 = 1.0 - _815;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _815;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _815;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _815;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = _971.x * TEXCOORD_5.w;
    float _975 = dot(vec3(_808, _809, _810), vec3(_888, _889, _890));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _808) - _888;
    float _983 = (_978 * _809) - _889;
    float _984 = (_978 * _810) - _890;
    float _988 = abs(dot(vec3(_888, _889, _890), vec3(_808, _809, _810)));
    float _4177 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_811);
    float _1002 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1008 = (1.0 - _1002) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _990;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1076 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1080 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1105 = _1037 + _808;
        float _1106 = _1041 + _809;
        float _1107 = _1045 + _810;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_808, _809, _810), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4225 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_808, _809, _810), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4258 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_808, _809, _810), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4291 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1388 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1392 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1396 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1419 = _1037 + _808;
        float _1420 = _1041 + _809;
        float _1421 = _1045 + _810;
        float _1431 = fma(_1421, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419)) - _1388;
        float _1432 = fma(_1421, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419)) - _1392;
        float _1433 = fma(_1421, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419)) - _1396;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1388 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1392 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[35u].z) + ((((((_1396 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1487 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1454.x + (-0.5));
        float _1489 = _1487 * (_1454.y + (-0.5));
        float _1490 = _1487 * (_1454.z + (-0.5));
        float _1497 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1461.x + (-0.5));
        float _1499 = _1497 * (_1461.y + (-0.5));
        float _1500 = _1497 * (_1461.z + (-0.5));
        float _1507 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1468.x + (-0.5));
        float _1509 = _1507 * (_1468.y + (-0.5));
        float _1510 = _1507 * (_1468.z + (-0.5));
        float _1517 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1475.x + (-0.5));
        float _1519 = _1517 * (_1475.y + (-0.5));
        float _1520 = _1517 * (_1475.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_808, _809, _810), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4354 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1551 + 1.0))) + _1556) * _1521;
        float _1566 = _1489 * 0.5;
        float _1567 = _1499 * 0.5;
        float _1568 = _1509 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_808, _809, _810), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4387 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1593 + 1.0))) + _1598) * _1522;
        float _1608 = _1490 * 0.5;
        float _1609 = _1500 * 0.5;
        float _1610 = _1510 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_808, _809, _810), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4420 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1635 + 1.0))) + _1640) * _1523;
        _1657 = _1490;
        _1658 = _1489;
        _1659 = _1488;
        _1660 = _1500;
        _1661 = _1499;
        _1662 = _1498;
        _1663 = _1510;
        _1664 = _1509;
        _1665 = _1508;
        _1666 = _1523;
        _1667 = _1522;
        _1668 = _1521;
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    }
    else
    {
        _1657 = _1348;
        _1658 = _1348;
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = _1348;
        _1668 = _1348;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1360)) + _1360;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1361)) + _1361;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1362)) + _1362;
    float _1704 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1681));
    float _1725 = _982 * 0.5;
    float _1726 = _983 * 0.5;
    float _1727 = _984 * 0.5;
    float _1728 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1731 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1734 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1768;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1741 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1745 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1749 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1756 = dot(vec4(cbModelParam._m0[39u]), vec4(_1725, _1726, _1727, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1779;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1770 = dot(vec4(cbModelParam._m0[40u]), vec4(_1725, _1726, _1727, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1783 = (_1779 * cbModelParam._m0[1u].x) + (_1768 * (1.0 - cbModelParam._m0[1u].x));
    float _1793 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1793 : min(cbModelParam._m0[25u].z, _1793));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1855 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1858 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1886 = frontier_phi_14_12_ladder;
        }
        float _2057;
        if (_1855 > 0.0)
        {
            _2057 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2057 = frontier_phi_23_19_ladder;
        }
        float _2353;
        if (_1858 > 0.0)
        {
            _2353 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2353 = frontier_phi_35_30_ladder;
        }
        float _2355 = isnan(_2057) ? _1886 : (isnan(_1886) ? _2057 : min(_1886, _2057));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1852) + _1841;
        float _2361 = (_2356 * _1855) + _1845;
        float _2362 = (_2356 * _1858) + _1849;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1794);
            frontier_phi_13_35_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_13_35_ladder_2;
        _1876 = frontier_phi_13_35_ladder_1;
        _1878 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1794);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1950 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1953 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2062;
        if (_1947 > 0.0)
        {
            _2062 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2062 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1950 > 0.0)
        {
            _2380 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2718;
        if (_1953 > 0.0)
        {
            _2718 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2718 = frontier_phi_47_44_ladder;
        }
        float _2720 = isnan(_2380) ? _2062 : (isnan(_2062) ? _2380 : min(_2062, _2380));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _1947) + _1936;
        float _2726 = (_2721 * _1950) + _1940;
        float _2727 = (_2721 * _1953) + _1944;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_22_47_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_22_47_ladder_2;
        _1974 = frontier_phi_22_47_ladder_1;
        _1976 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1883);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_1008 * _959) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1991 = (((_1008 * _961) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1993 = (((_1008 * _962) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2049 = _2036 / _2048;
    float _2050 = _2040 / _2048;
    float _2051 = _2044 / _2048;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2078 = ((uint(_2051 > cbSceneParam._m0[59u].y) + uint(_2051 > cbSceneParam._m0[59u].x)) + uint(_2051 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2079 = _2078 + 43u;
        uint _2087 = _2078 + 44u;
        uint _2095 = _2078 + 45u;
        uint _2103 = _2078 + 46u;
        float _2114 = fma(_2048, cbSceneParam._m0[_2079].w, fma(_2044, cbSceneParam._m0[_2079].z, fma(_2040, cbSceneParam._m0[_2079].y, _2036 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2048, cbSceneParam._m0[_2087].w, fma(_2044, cbSceneParam._m0[_2087].z, fma(_2040, cbSceneParam._m0[_2087].y, _2036 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2048, cbSceneParam._m0[_2103].w, fma(_2044, cbSceneParam._m0[_2103].z, fma(_2040, cbSceneParam._m0[_2103].y, _2036 * cbSceneParam._m0[_2103].x)));
        float _2131 = cbSceneParam._m0[33u].z * _2126;
        float _2133 = cbSceneParam._m0[33u].w * _2126;
        float _2136 = fma(_2048, cbSceneParam._m0[_2095].w, fma(_2044, cbSceneParam._m0[_2095].z, fma(_2040, cbSceneParam._m0[_2095].y, _2036 * cbSceneParam._m0[_2095].x))) / _2126;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
        float _4546 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2114) / _2126, (_2133 + _2118) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2114) / _2126, (_2118 - _2131) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2131) / _2126, (_2118 - _2133) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2133) / _2126, (_2131 + _2118) / _2126), _2136), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2048, cbSceneParam._m0[63u].w, fma(_2044, cbSceneParam._m0[63u].z, fma(_2040, cbSceneParam._m0[63u].y, _2036 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2048, cbSceneParam._m0[60u].w, fma(_2044, cbSceneParam._m0[60u].z, fma(_2040, cbSceneParam._m0[60u].y, _2036 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2048, cbSceneParam._m0[61u].w, fma(_2044, cbSceneParam._m0[61u].z, fma(_2040, cbSceneParam._m0[61u].y, _2036 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2393 = fma(_2048, cbSceneParam._m0[62u].w, fma(_2044, cbSceneParam._m0[62u].z, fma(_2040, cbSceneParam._m0[62u].y, _2036 * cbSceneParam._m0[62u].x))) / _2252;
            float _2397 = isnan(cbSceneParam._m0[41u].w) ? _2393 : (isnan(_2393) ? cbSceneParam._m0[41u].w : max(_2393, cbSceneParam._m0[41u].w));
            float _2440 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
            float _4562 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
            float _2447 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2397), 0.0)).x), vec4(0.25)));
            float _2451 = 1.0 - (_2447 * cbSceneParam._m0[34u].x);
            float _2452 = 1.0 - (_2447 * cbSceneParam._m0[34u].y);
            float _2453 = 1.0 - (_2447 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2453) ? _2200 : (isnan(_2200) ? _2453 : min(_2200, _2453));
            frontier_phi_34_33_ladder_1 = isnan(_2452) ? _2199 : (isnan(_2199) ? _2452 : min(_2199, _2452));
            frontier_phi_34_33_ladder_2 = isnan(_2451) ? _2198 : (isnan(_2198) ? _2451 : min(_2198, _2451));
        }
        else
        {
            frontier_phi_34_33_ladder = _2200;
            frontier_phi_34_33_ladder_1 = _2199;
            frontier_phi_34_33_ladder_2 = _2198;
        }
        _2264 = frontier_phi_34_33_ladder_2;
        _2266 = frontier_phi_34_33_ladder_1;
        _2268 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_934 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _974 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2312 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2316 = _2275 | 1u;
    float _2327 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_808, _809, _810));
    float _2330 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_808, _809, _810));
    float _4598 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _4609 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2335 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2337 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2344 = ((cbLight._m0[_2292].x * _2298) * _2337) + (((cbLight._m0[_2302].x * _2264) * _2312) * _2335);
    float _2345 = ((_2298 * cbLight._m0[_2292].y) * _2337) + (((cbLight._m0[_2302].y * _2266) * _2312) * _2335);
    float _2346 = ((_2298 * cbLight._m0[_2292].z) * _2337) + (((cbLight._m0[_2302].z * _2268) * _2312) * _2335);
    uvec4 _2350 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2352 = _2350.x == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2352)
    {
        _2454 = _2344;
        _2456 = _2345;
        _2458 = _2346;
    }
    else
    {
        uint _2462 = _2275 + 6u;
        float _2478 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4620 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2481 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2454 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2344;
        _2456 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2345;
        _2458 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2346;
    }
    bool _2461 = _2350.y == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2461)
    {
        _2516 = _2454;
        _2518 = _2456;
        _2520 = _2458;
    }
    else
    {
        uint _2689 = _2275 + 7u;
        float _2705 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2706 = _2705 * _2705;
        float _4636 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2707 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2708 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2516 = (((cbLight._m0[_2689].x * 0.3183098733425140380859375) * _2707) * _2708) + _2454;
        _2518 = (((cbLight._m0[_2689].y * 0.3183098733425140380859375) * _2707) * _2708) + _2456;
        _2520 = (((cbLight._m0[_2689].z * 0.3183098733425140380859375) * _2707) * _2708) + _2458;
    }
    uint _2523 = _2275 + 8u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _811) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2275].x + _888;
    float _2539 = cbLight._m0[_2275].y + _889;
    float _2540 = cbLight._m0[_2275].z + _890;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2275].xyz));
    float _4652 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _4663 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2552 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2553 = dot(vec3(_808, _809, _810), vec3(_2545, _2546, _2547));
    float _4674 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2545, _2546, _2547));
    float _4685 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2537 * _2537;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
    float _2574 = 0.959999978542327880859375 - _956;
    float _2576 = 0.959999978542327880859375 - _957;
    float _2577 = 0.959999978542327880859375 - _958;
    float _2584 = 1.0 - _2537;
    float _2595 = (0.5 / (((_2552 * ((_2551 * _2584) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2584) + _2537) * _2551))) * _2551;
    float _4696 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    uint _2611 = _2275 + 9u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _811) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2316].x + _888;
    float _2625 = cbLight._m0[_2316].y + _889;
    float _2626 = cbLight._m0[_2316].z + _890;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2316].xyz));
    float _4707 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2638 = dot(vec3(_808, _809, _810), vec3(_2631, _2632, _2633));
    float _4718 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2642 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2631, _2632, _2633));
    float _4729 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = _2623 * _2623;
    float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
    float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2664 = 1.0 - _2623;
    float _2674 = (0.5 / (((_2552 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2664) + _2623) * _2637))) * _2637;
    float _4740 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
    float _2686 = (((((_2657 * _2574) + _959) * cbLight._m0[_2611].x) * _2676) * _2298) + ((((cbLight._m0[_2523].x * _2264) * ((_2573 * _2574) + _959)) * _2597) * _2312);
    float _2687 = (((((_2657 * _2576) + _961) * cbLight._m0[_2611].y) * _2676) * _2298) + ((((cbLight._m0[_2523].y * _2266) * ((_2573 * _2576) + _961)) * _2597) * _2312);
    float _2688 = (((((_2657 * _2577) + _962) * cbLight._m0[_2611].z) * _2676) * _2298) + ((((cbLight._m0[_2523].z * _2268) * ((_2573 * _2577) + _962)) * _2597) * _2312);
    float _2744;
    float _2746;
    float _2748;
    if (_2352)
    {
        _2744 = _2686;
        _2746 = _2687;
        _2748 = _2688;
    }
    else
    {
        uint _2750 = _2275 + 2u;
        uint _2754 = _2275 + 10u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _811) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _888;
        float _2771 = cbLight._m0[_2750].y + _889;
        float _2772 = cbLight._m0[_2750].z + _890;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2750].xyz));
        float _4751 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2784 = dot(vec3(_808, _809, _810), vec3(_2777, _2778, _2779));
        float _4762 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4773 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2810 = 1.0 - _2769;
        float _2820 = (0.5 / (((_2552 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2810) + _2769) * _2783))) * _2783;
        float _4784 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2744 = (((((_2803 * _2574) + _959) * cbLight._m0[_2754].x) * _2822) * _2823) + _2686;
        _2746 = (((((_2803 * _2576) + _961) * cbLight._m0[_2754].y) * _2822) * _2823) + _2687;
        _2748 = (((((_2803 * _2577) + _962) * cbLight._m0[_2754].z) * _2822) * _2823) + _2688;
    }
    float _2854;
    float _2856;
    float _2858;
    if (_2461)
    {
        _2854 = _2744;
        _2856 = _2746;
        _2858 = _2748;
    }
    else
    {
        uint _2865 = _2275 + 3u;
        uint _2869 = _2275 + 11u;
        float _2883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2865].w)) * _811) * 0.949999988079071044921875);
        float _2884 = _2883 * _2883;
        float _2885 = cbLight._m0[_2865].x + _888;
        float _2886 = cbLight._m0[_2865].y + _889;
        float _2887 = cbLight._m0[_2865].z + _890;
        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
        float _2892 = _2891 * _2885;
        float _2893 = _2891 * _2886;
        float _2894 = _2891 * _2887;
        float _2895 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2865].xyz));
        float _4800 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2899 = dot(vec3(_808, _809, _810), vec3(_2892, _2893, _2894));
        float _4811 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2903 = dot(vec3(cbLight._m0[_2865].xyz), vec3(_2892, _2893, _2894));
        float _4822 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2907 = _2884 * _2884;
        float _2911 = ((_2902 * _2902) * (_2907 + (-1.0))) + 1.0;
        float _2918 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2925 = 1.0 - _2884;
        float _2935 = (0.5 / (((_2552 * ((_2898 * _2925) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2925) + _2884) * _2898))) * _2898;
        float _4833 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2937 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2907 / ((_2911 * _2911) * 3.141590118408203125));
        float _2938 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2854 = (((((_2918 * _2574) + _959) * cbLight._m0[_2869].x) * _2937) * _2938) + _2744;
        _2856 = (((((_2918 * _2576) + _961) * cbLight._m0[_2869].y) * _2937) * _2938) + _2746;
        _2858 = (((((_2918 * _2577) + _962) * cbLight._m0[_2869].z) * _2937) * _2938) + _2748;
    }
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_2273.y == 0u)
    {
        uvec4 _2959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2960 = _2959.x;
        uint _2971 = uint((float(_2959.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2960))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2960)));
        float _2981 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2982 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        uint _2985 = uint(isnan(14.0) ? _2982 : (isnan(_2982) ? 14.0 : min(_2982, 14.0)));
        uvec4 _2990 = texelFetch(g_lightClusterGridBuffer, int(((_2985 << 2u) + (_2971 << 6u)) >> 2u));
        uint _2991 = _2990.x;
        uint _2992 = _2959.z;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((((1u << ((_2992 >> 4u) & 15u)) + 4294967295u) & _2991) == 0u) || ((_2992 & 240u) == 0u))
        {
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
        }
        else
        {
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3127;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            float _3274 = 0.0;
            uint _3275 = 0u;
            uint _3284;
            bool _3285;
            for (;;)
            {
                _3284 = texelFetch(g_lightClassification, int((((_2985 << 5u) + (_2971 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                _3285 = _3284 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3285)
                {
                    frontier_phi_66_pred = _3274;
                    frontier_phi_66_pred_1 = _3273;
                    frontier_phi_66_pred_2 = _3272;
                    frontier_phi_66_pred_3 = _3271;
                    frontier_phi_66_pred_4 = _3270;
                    frontier_phi_66_pred_5 = _3269;
                }
                else
                {
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    uint _3399;
                    _3393 = _3269;
                    _3394 = _3270;
                    _3395 = _3271;
                    _3396 = _3272;
                    _3397 = _3273;
                    _3398 = _3274;
                    _3399 = _3284;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3403 = uint(findLSB(_3399)) + (_3275 << 5u);
                        uint _3400 = (_3399 + 4294967295u) & _3399;
                        uint _3405 = _3403 * 48u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3425 = (_3403 * 48u) + 4u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3444 = (_3403 * 48u) + 8u;
                        vec3 _3455 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x));
                        float _3459 = _3419.x - _2049;
                        float _3460 = _3419.y - _2050;
                        float _3461 = _3419.z - _2051;
                        float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                        float _3465 = inversesqrt(_3462);
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3469 = dot(vec3(_915, _918, _921), vec3(_3466, _3467, _3468));
                        float _3474 = 1.0 - (_3462 * _3419.w);
                        float _4859 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3476 = sqrt(_3462) * _3438.w;
                        float _3479 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3469) + _3480;
                        float _3486 = _3476 * _3476;
                        float _3490 = ((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3475) / ((_3486 * 0.699999988079071044921875) + 1.0);
                        float _3494 = (-0.0) - _2049;
                        float _3495 = (-0.0) - _2050;
                        float _3496 = (-0.0) - _2051;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3510 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                        float _3511 = 1.0 - _990;
                        float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                        float _3519 = _3518 * _3518;
                        float _3520 = _3519 * _3519;
                        float _3521 = _3501 + _3466;
                        float _3522 = _3502 + _3467;
                        float _3523 = _3503 + _3468;
                        float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                        float _3531 = dot(vec3(_915, _918, _921), vec3(_3501, _3502, _3503));
                        float _4875 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3535 = dot(vec3(_915, _918, _921), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                        float _4886 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                        float _3543 = _3479 * _3519;
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3469) + _3544;
                        float _4897 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3549 = 1.0 - _3519;
                        float _3559 = (0.5 / (((_3548 * ((_3534 * _3549) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3519) * _3534))) * _3548;
                        float _4908 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3570 = (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3542 * _3542) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125))) * _3475;
                        _3328 = (_3490 * _3438.x) + _3396;
                        _3329 = (_3490 * _3438.y) + _3397;
                        _3330 = (_3490 * _3438.z) + _3398;
                        _3325 = (_3570 * _3455.x) + _3393;
                        _3326 = (_3570 * _3455.y) + _3394;
                        _3327 = (_3570 * _3455.z) + _3395;
                        if (_3400 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3393 = _3325;
                            _3394 = _3326;
                            _3395 = _3327;
                            _3396 = _3328;
                            _3397 = _3329;
                            _3398 = _3330;
                            _3399 = _3400;
                        }
                    }
                    frontier_phi_66_pred = _3330;
                    frontier_phi_66_pred_1 = _3329;
                    frontier_phi_66_pred_2 = _3328;
                    frontier_phi_66_pred_3 = _3327;
                    frontier_phi_66_pred_4 = _3326;
                    frontier_phi_66_pred_5 = _3325;
                }
                _3127 = frontier_phi_66_pred;
                _3125 = frontier_phi_66_pred_1;
                _3123 = frontier_phi_66_pred_2;
                _3121 = frontier_phi_66_pred_3;
                _3119 = frontier_phi_66_pred_4;
                _3117 = frontier_phi_66_pred_5;
                uint _3276 = _3275 + 1u;
                if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3269 = _3117;
                    _3270 = _3119;
                    _3271 = _3121;
                    _3272 = _3123;
                    _3273 = _3125;
                    _3274 = _3127;
                    _3275 = _3276;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
        }
        uvec4 _3130 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3131 = _3130.z;
        uint _3133 = (_3131 >> 8u) & 15u;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        if (((4294967295u << _3133) & _2991) == 0u)
        {
            _3237 = _3116;
            _3239 = _3118;
            _3241 = _3120;
            _3243 = _3122;
            _3245 = _3124;
            _3247 = _3126;
        }
        else
        {
            float _3262 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _3263 = _3262 * _2049;
            float _3264 = _3262 * _2050;
            float _3265 = _3262 * _2051;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3133 < ((_3131 >> 12u) & 15u))
            {
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3376 = _3116;
                float _3377 = _3118;
                float _3378 = _3120;
                float _3379 = _3122;
                float _3380 = _3124;
                float _3381 = _3126;
                uint _3382 = _3133;
                uint _3391;
                bool _3392;
                for (;;)
                {
                    _3391 = texelFetch(g_lightClassification, int((((_2985 << 5u) + (_2971 << 9u)) + (_3382 << 2u)) >> 2u)).x;
                    _3392 = _3391 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3392)
                    {
                        frontier_phi_72_pred = _3381;
                        frontier_phi_72_pred_1 = _3380;
                        frontier_phi_72_pred_2 = _3379;
                        frontier_phi_72_pred_3 = _3378;
                        frontier_phi_72_pred_4 = _3377;
                        frontier_phi_72_pred_5 = _3376;
                    }
                    else
                    {
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3588 = _3376;
                        float _3589 = _3377;
                        float _3590 = _3378;
                        float _3591 = _3379;
                        float _3592 = _3380;
                        float _3593 = _3381;
                        uint _3594 = _3391;
                        uint _3595;
                        vec4 _3620;
                        float _3621;
                        vec4 _3636;
                        vec3 _3648;
                        vec4 _3663;
                        vec4 _3678;
                        float _3725;
                        bool _3726;
                        for (;;)
                        {
                            uint _3605 = ((_3382 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3594));
                            _3595 = (_3594 + 4294967295u) & _3594;
                            uint _3607 = _3605 * 40u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3621 = _3620.w;
                            uint _3623 = (_3605 * 40u) + 4u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3605 * 40u) + 8u;
                            _3648 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x));
                            uint _3650 = (_3605 * 40u) + 16u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3605 * 40u) + 20u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3681 = (_3605 * 40u) + 24u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3700 = (_3605 * 40u) + 28u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3725 = fma(_2051, _3713.z, fma(_2050, _3713.y, _3713.x * _2049)) + _3713.w;
                            _3726 = !((fma(_2051, _3694.z, fma(_2050, _3694.y, _3694.x * _2049)) + _3694.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3726)
                            {
                                float _3753 = _3620.x - _2049;
                                float _3754 = _3620.y - _2050;
                                float _3755 = _3620.z - _2051;
                                float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                                float _3759 = inversesqrt(_3756);
                                float _3760 = _3759 * _3753;
                                float _3761 = _3759 * _3754;
                                float _3762 = _3759 * _3755;
                                float _3766 = 1.0 - (_3756 / (_3621 * _3621));
                                float _4919 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3771 = sqrt(_3756) * _3636.w;
                                float _3773 = 1.39999997615814208984375 / (_3771 + 1.39999997615814208984375);
                                float _3774 = _3773 * _3773;
                                float _3777 = ((1.0 - _3774) * dot(vec3(_3760, _3761, _3762), vec3(_915, _918, _921))) + _3774;
                                float _3780 = _3771 * _3771;
                                float _3784 = (fma(_2051, _3663.z, fma(_2050, _3663.y, _3663.x * _2049)) + _3663.w) / _3725;
                                float _3785 = (fma(_2051, _3678.z, fma(_2050, _3678.y, _3678.x * _2049)) + _3678.w) / _3725;
                                float _3789 = 1.0 - dot(vec2(_3784, _3785), vec2(_3784, _3785));
                                float _4935 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3791 = _3790 * (((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3767) / ((_3780 * 0.699999988079071044921875) + 1.0));
                                float _3803 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                                float _3804 = 1.0 - _990;
                                float _3811 = sqrt(1.0 - ((1.0 - (_3804 * _3804)) * (1.0 - (_3803 * _3803))));
                                float _3812 = _3811 * _3811;
                                float _3813 = _3812 * _3812;
                                float _3814 = _3760 - _3263;
                                float _3815 = _3761 - _3264;
                                float _3816 = _3762 - _3265;
                                float _3820 = inversesqrt(dot(vec3(_3814, _3815, _3816), vec3(_3814, _3815, _3816)));
                                float _3824 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3263, (-0.0) - _3264, (-0.0) - _3265));
                                float _4946 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3827 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3828 = dot(vec3(_915, _918, _921), vec3(_3820 * _3814, _3820 * _3815, _3820 * _3816));
                                float _4957 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3835 = ((_3831 * _3831) * (_3813 + (-1.0))) + 1.0;
                                float _3836 = _3773 * _3812;
                                float _3837 = _3836 * _3836;
                                float _3843 = ((1.0 - _3837) * dot(vec3(_915, _918, _921), vec3(_3760, _3761, _3762))) + _3837;
                                float _4968 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3844 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3845 = 1.0 - _3812;
                                float _3855 = (0.5 / (((_3844 * ((_3827 * _3845) + _3812)) + 9.9999999392252902907785028219223e-09) + (((_3844 * _3845) + _3812) * _3827))) * _3844;
                                float _4979 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3865 = (_3790 * _3767) * (((_3813 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3835 * _3835) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3791 * _3636.y;
                                frontier_phi_78_pred_1 = _3791 * _3636.x;
                                frontier_phi_78_pred_2 = _3865 * _3648.z;
                                frontier_phi_78_pred_3 = _3865 * _3648.y;
                                frontier_phi_78_pred_4 = _3865 * _3648.x;
                                frontier_phi_78_pred_5 = _3791 * _3636.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3873 = frontier_phi_78_pred;
                            _3872 = frontier_phi_78_pred_1;
                            _3871 = frontier_phi_78_pred_2;
                            _3870 = frontier_phi_78_pred_3;
                            _3869 = frontier_phi_78_pred_4;
                            _3874 = frontier_phi_78_pred_5;
                            _3578 = _3872 + _3591;
                            _3579 = _3873 + _3592;
                            _3580 = _3874 + _3593;
                            _3575 = _3869 + _3588;
                            _3576 = _3870 + _3589;
                            _3577 = _3871 + _3590;
                            if (_3595 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3595;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3580;
                        frontier_phi_72_pred_1 = _3579;
                        frontier_phi_72_pred_2 = _3578;
                        frontier_phi_72_pred_3 = _3577;
                        frontier_phi_72_pred_4 = _3576;
                        frontier_phi_72_pred_5 = _3575;
                    }
                    _3248 = frontier_phi_72_pred;
                    _3246 = frontier_phi_72_pred_1;
                    _3244 = frontier_phi_72_pred_2;
                    _3242 = frontier_phi_72_pred_3;
                    _3240 = frontier_phi_72_pred_4;
                    _3238 = frontier_phi_72_pred_5;
                    uint _3383 = _3382 + 1u;
                    if (_3383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3376 = _3238;
                        _3377 = _3240;
                        _3378 = _3242;
                        _3379 = _3244;
                        _3380 = _3246;
                        _3381 = _3248;
                        _3382 = _3383;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3248;
                frontier_phi_60_61_ladder_1 = _3246;
                frontier_phi_60_61_ladder_2 = _3242;
                frontier_phi_60_61_ladder_3 = _3240;
                frontier_phi_60_61_ladder_4 = _3238;
                frontier_phi_60_61_ladder_5 = _3244;
            }
            else
            {
                frontier_phi_60_61_ladder = _3126;
                frontier_phi_60_61_ladder_1 = _3124;
                frontier_phi_60_61_ladder_2 = _3120;
                frontier_phi_60_61_ladder_3 = _3118;
                frontier_phi_60_61_ladder_4 = _3116;
                frontier_phi_60_61_ladder_5 = _3122;
            }
            _3237 = frontier_phi_60_61_ladder_4;
            _3239 = frontier_phi_60_61_ladder_3;
            _3241 = frontier_phi_60_61_ladder_2;
            _3243 = frontier_phi_60_61_ladder_5;
            _3245 = frontier_phi_60_61_ladder_1;
            _3247 = frontier_phi_60_61_ladder;
        }
        float _3252 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _3004 = (_3252 * _3243) + _2516;
        _3006 = (_3252 * _3245) + _2518;
        _3008 = (_3252 * _3247) + _2520;
        _3010 = ((_3237 * _959) * _3252) + _2854;
        _3012 = ((_3239 * _961) * _3252) + _2856;
        _3014 = ((_3241 * _962) * _3252) + _2858;
    }
    else
    {
        _3004 = _2516;
        _3006 = _2518;
        _3008 = _2520;
        _3010 = _2854;
        _3012 = _2856;
        _3014 = _2858;
    }
    uint _3020 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _3026 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3032 = (((((_3026 * cbMtdParam._m0[14u].x) * _693.x) * _716) * _794) * (((1.0 - _769) * cbMtdParam._m0[20u].w) + _769)) * cbInstanceData._m0[_3020].x;
    float _3038 = (((((_3026 * cbMtdParam._m0[14u].y) * _693.y) * _716) * _794) * (((1.0 - _771) * cbMtdParam._m0[20u].w) + _771)) * cbInstanceData._m0[_3020].y;
    float _3044 = (((((_3026 * cbMtdParam._m0[14u].z) * _693.z) * _716) * _794) * (((1.0 - _773) * cbMtdParam._m0[20u].w) + _773)) * cbInstanceData._m0[_3020].z;
    float _4995 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5006 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5017 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _3061 = (((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_3004 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _974))) + ((_3010 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + _3032;
    float _3063 = (_3038 + ((_3012 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_3006 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _974)));
    float _3065 = (_3044 + ((_3014 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3008 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _974)));
    float _5043 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3078 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
    uint _3079 = _934 + 6u;
    float _3087 = _896 / cbSceneParam._m0[86u].x;
    float _3088 = _897 / cbSceneParam._m0[86u].y;
    vec4 _3102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3104 = _3102.x;
    float _3105 = _3102.y;
    float _3106 = _3102.z;
    float _3107 = _3102.w;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _3141 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _3142 = _3141 / _831;
        float _3153 = _3142 * _881;
        float _3154 = _882 * _3142;
        float _3155 = (-0.0) - _3154;
        float _3156 = _3142 * _883;
        float _3158 = (cbSceneParam._m0[77u].w * _3155) / _3141;
        float _3159 = _3158 + cbSceneParam._m0[79u].w;
        float _3160 = cbSceneParam._m0[79u].w - _3154;
        float _3166 = sqrt(((_3153 * _3153) + (_3154 * _3154)) + (_3156 * _3156));
        float _3169 = (1.0 - (cbSceneParam._m0[77u].w / _3141)) * _3166;
        float _3174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3155 - _3158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3159 > 0.0) ? exp2(_3174 * _3159) : (2.0 - exp2(_3176 * _3159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3169;
        }
        else
        {
            float _3298 = 1.0 / cbSceneParam._m0[80u].x;
            float _3299 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : max(_3159, _3160));
            float _3300 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : min(_3159, _3160));
            float _3309 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : min(_3299, 0.0));
            float _3310 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : min(_3300, 0.0));
            _3338 = ((abs(_3166 / _3155) * cbSceneParam._m0[80u].y) * ((((_3309 - _3310) * 2.0) - ((exp2(_3174 * (isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0)))) - exp2(_3174 * (isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0))))) * _3298)) - ((exp2(_3176 * _3309) - exp2(_3176 * _3310)) * _3298))) + (_3169 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3087, _3088, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3107);
        _3178 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3104;
        _3180 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3105;
        _3182 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3106;
        _3184 = _3349 * _3107;
    }
    else
    {
        _3178 = _3104;
        _3180 = _3105;
        _3182 = _3106;
        _3184 = _3107;
    }
    float _3196 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3197 = _3196 == 3.0;
    float _3198 = log2(_3184);
    float _3202 = exp2(_3198 * cbSceneParam._m0[78u].x);
    float _3203 = exp2(_3198 * cbSceneParam._m0[78u].y);
    float _3204 = exp2(_3198 * cbSceneParam._m0[78u].z);
    float _3205 = _3202 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)));
    float _3206 = _3203 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)));
    float _3207 = _3204 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)));
    float _3216 = (_3196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3216 * (_3197 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3178)));
    SV_Target.y = _3216 * (_3197 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3180)));
    SV_Target.z = _3216 * (_3197 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3182)));
    SV_Target.w = cbInstanceData._m0[_3079].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3032) * _3078) * _3202) * _3216;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3038) * _3078) * _3203) * _3216;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3044) * _3078) * _3204) * _3216;
    SV_Target_1.w = cbInstanceData._m0[_3079].w;
}


