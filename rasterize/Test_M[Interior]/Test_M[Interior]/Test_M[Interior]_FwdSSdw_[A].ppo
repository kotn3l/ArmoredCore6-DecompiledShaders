#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _453;
float _3222;
float _3223;
float _3224;
float _3225;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _195 = _194 * _187;
    float _196 = _194 * _188;
    float _197 = _194 * _189;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _293 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _312 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _299) + cbMtdParam._m0[11u].x) * _293.x;
    float _314 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _299) + cbMtdParam._m0[11u].y) * _293.y;
    float _316 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _299) + cbMtdParam._m0[11u].z) * _293.z;
    vec4 _328 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = _328.z;
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3234 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))));
    vec4 _381 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _394 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _401 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _417 = (-0.0) - dot(vec3(_273, _274, _275), vec3(_394 * _195, _394 * _196, _394 * _197));
    float _418 = (-0.0) - dot(vec3(_273, _274, _275), vec3(_401 * _209, _401 * _210, _401 * _211));
    float _419 = (-0.0) - dot(vec3(_273, _274, _275), vec3((-0.0) - _216, (-0.0) - _217, (-0.0) - _218));
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _423 * _419;
    float _429 = ((cbMtdParam._m0[15u].y * _417) * _423) + (((_381.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _430 = ((cbMtdParam._m0[15u].z * _418) * _423) + (((_381.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _433 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _434 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _451;
    float _454;
    float _456;
    if (_429 > 0.0)
    {
        float _437 = (1.0 - _433) / _429;
        _451 = _437;
        _454 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_437 * _424)) * 0.16666667163372039794921875;
        _456 = (fract((_437 * _430) + _434) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_429 < 0.0)
        {
            float _452 = ((-0.0) - _433) / _429;
            frontier_phi_5_4_ladder = _452;
            frontier_phi_5_4_ladder_1 = (fract(_452 * _424) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_5_4_ladder_2 = (fract((_452 * _430) + _434) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_5_4_ladder = _453;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = 0.0;
        }
        _451 = frontier_phi_5_4_ladder;
        _454 = frontier_phi_5_4_ladder_1;
        _456 = frontier_phi_5_4_ladder_2;
    }
    float _482;
    float _484;
    float _486;
    if (_430 > 0.0)
    {
        float _469 = (1.0 - _434) / _430;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_469 < _451)
        {
            frontier_phi_10_7_ladder = (fract(_469 * _424) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_469 * _429) + _433) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _469;
        }
        else
        {
            frontier_phi_10_7_ladder = _456;
            frontier_phi_10_7_ladder_1 = _454;
            frontier_phi_10_7_ladder_2 = _451;
        }
        _482 = frontier_phi_10_7_ladder_2;
        _484 = frontier_phi_10_7_ladder_1;
        _486 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_430 < 0.0)
        {
            float _483 = ((-0.0) - _434) / _430;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_483 < _451)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_483 * _424) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_483 * _429) + _433) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _483;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _456;
                frontier_phi_10_8_ladder_11_ladder_1 = _454;
                frontier_phi_10_8_ladder_11_ladder_2 = _451;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _456;
            frontier_phi_10_8_ladder_1 = _454;
            frontier_phi_10_8_ladder_2 = _451;
        }
        _482 = frontier_phi_10_8_ladder_2;
        _484 = frontier_phi_10_8_ladder_1;
        _486 = frontier_phi_10_8_ladder;
    }
    float _490 = (_424 > 0.0) ? (cbMtdParam._m0[13u].w / _424) : 5000.0;
    float _503;
    float _504;
    if (_490 < _482)
    {
        _503 = ((_433 + cbMtdParam._m0[14u].x) + (_490 * _429)) * 0.16666667163372039794921875;
        _504 = (((_490 * _430) + _434) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _503 = _484;
        _504 = _486;
    }
    vec4 _506 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_503, _504));
    float _513 = fma(_345, _216, fma(_338, _209, _336 * _195));
    float _516 = fma(_345, _217, fma(_338, _210, _336 * _196));
    float _519 = fma(_345, _218, fma(_338, _211, _336 * _197));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    float _524 = _523 * _513;
    float _525 = _523 * _516;
    float _526 = _523 * _519;
    float _3245 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _527 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3267 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3278 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _546 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _550 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _551 = _273 * _550;
    float _552 = _274 * _550;
    float _553 = _275 * _550;
    vec4 _558 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _560 = _558.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _723 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _729 = (cbMatDynParam._m0[5u].x * _723) + cbMatDynParam._m0[5u].y;
        float _3289 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _734 = (cbMatDynParam._m0[5u].z * _723) + cbMatDynParam._m0[5u].w;
        float _3300 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) - _730)) + _730) < ((_560 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _599 = fma(_526, cbSceneParam._m0[5u].z, fma(_525, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _524));
    float _602 = fma(_526, cbSceneParam._m0[6u].z, fma(_525, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _524));
    float _605 = fma(_526, cbSceneParam._m0[7u].z, fma(_525, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _524));
    uint _618 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = _618 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3311 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _643 = _640.x * TEXCOORD.z;
    float _644 = dot(vec3(_524, _525, _526), vec3(_551, _552, _553));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _524) - _551;
    float _652 = (_647 * _525) - _552;
    float _653 = (_647 * _526) - _553;
    float _657 = abs(dot(vec3(_551, _552, _553), vec3(_524, _525, _526)));
    float _3344 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _659 = sqrt(_527);
    float _672 = exp2((_659 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_659 * 3.0));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _772 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _776 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _800 = _704 + _524;
        float _801 = _708 + _525;
        float _802 = _712 + _526;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _768;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _772;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _776;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_524, _525, _526), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3392 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_524, _525, _526), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3425 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_524, _525, _526), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3458 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1043 = _872;
        _1044 = _871;
        _1045 = _883;
        _1046 = _882;
        _1047 = _881;
        _1048 = _893;
        _1049 = _892;
        _1050 = _891;
        _1051 = _906;
        _1052 = _905;
        _1053 = _904;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _453;
        _1043 = _453;
        _1044 = _453;
        _1045 = _453;
        _1046 = _453;
        _1047 = _453;
        _1048 = _453;
        _1049 = _453;
        _1050 = _453;
        _1051 = _453;
        _1052 = _453;
        _1053 = _453;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1089 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1093 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1116 = _704 + _524;
        float _1117 = _708 + _525;
        float _1118 = _712 + _526;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_524, _525, _526), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3521 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_524, _525, _526), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3554 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_524, _525, _526), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3587 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _453;
        _1355 = _453;
        _1356 = _453;
        _1357 = _453;
        _1358 = _453;
        _1359 = _453;
        _1360 = _453;
        _1361 = _453;
        _1362 = _453;
        _1363 = _453;
        _1364 = _453;
        _1365 = _453;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _651 * 0.5;
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _527);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1571;
    float _1573;
    float _1575;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1538 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1542 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1546 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1549 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1552 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1555 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1583;
        if (_1549 > 0.0)
        {
            _1583 = abs((1.0 - _1538) / _1549);
        }
        else
        {
            float frontier_phi_31_29_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_31_29_ladder = abs((_1538 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_31_29_ladder = 5000.0;
            }
            _1583 = frontier_phi_31_29_ladder;
        }
        float _1957;
        if (_1552 > 0.0)
        {
            _1957 = abs((1.0 - _1542) / _1552);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1542 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1957 = frontier_phi_40_36_ladder;
        }
        float _2286;
        if (_1555 > 0.0)
        {
            _2286 = abs((1.0 - _1546) / _1555);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1546 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2286 = frontier_phi_54_47_ladder;
        }
        float _2288 = isnan(_1957) ? _1583 : (isnan(_1583) ? _1957 : min(_1583, _1957));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1549) + _1538;
        float _2294 = (_2289 * _1552) + _1542;
        float _2295 = (_2289 * _1555) + _1546;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_30_54_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_30_54_ladder_1 = _2437.x * cbModelParam._m0[1u].y;
            frontier_phi_30_54_ladder_2 = _2437.y * cbModelParam._m0[1u].y;
        }
        _1571 = frontier_phi_30_54_ladder_1;
        _1573 = frontier_phi_30_54_ladder_2;
        _1575 = frontier_phi_30_54_ladder;
    }
    else
    {
        vec4 _1559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1491);
        _1571 = _1559.x * cbModelParam._m0[1u].y;
        _1573 = _1559.y * cbModelParam._m0[1u].y;
        _1575 = _1559.z * cbModelParam._m0[1u].y;
    }
    float _1579 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _527);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1579 : min(cbModelParam._m0[25u].w, _1579));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1650 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1653 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1962;
        if (_1647 > 0.0)
        {
            _1962 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_42_38_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_42_38_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_42_38_ladder = 5000.0;
            }
            _1962 = frontier_phi_42_38_ladder;
        }
        float _2312;
        if (_1650 > 0.0)
        {
            _2312 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_56_49_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_56_49_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_56_49_ladder = 5000.0;
            }
            _2312 = frontier_phi_56_49_ladder;
        }
        float _2502;
        if (_1653 > 0.0)
        {
            _2502 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_74_67_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_74_67_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_74_67_ladder = 5000.0;
            }
            _2502 = frontier_phi_74_67_ladder;
        }
        float _2504 = isnan(_2312) ? _1962 : (isnan(_1962) ? _2312 : min(_1962, _2312));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1647) + _1636;
        float _2510 = (_2505 * _1650) + _1640;
        float _2511 = (_2505 * _1653) + _1644;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_39_74_ladder;
        float frontier_phi_39_74_ladder_1;
        float frontier_phi_39_74_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_39_74_ladder = 0.0;
            frontier_phi_39_74_ladder_1 = 0.0;
            frontier_phi_39_74_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1580);
            frontier_phi_39_74_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_39_74_ladder_1 = _2753.x * cbModelParam._m0[1u].z;
            frontier_phi_39_74_ladder_2 = _2753.y * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_39_74_ladder_1;
        _1674 = frontier_phi_39_74_ladder_2;
        _1676 = frontier_phi_39_74_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1580);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _672) * ((_659 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_672 * _659)) * _643;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1571)) + _1571);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1575)) + _1575);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_578, _579));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_618 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1736 = _643 + (-1.0);
    float _1739 = (cbLight._m0[_1731].x * _1736) + 1.0;
    float _1740 = (cbLight._m0[_1731].y * _1736) + 1.0;
    uint _1741 = _1730 + 5u;
    float _1747 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1751 = _1730 + 4u;
    float _1761 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1765 = _1730 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_524, _525, _526));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_524, _525, _526));
    float _3723 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3734 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1722) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1723) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1724) * _1761) * _1784);
    uint _1797 = _1730 + 8u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _527) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1730].x + _551;
    float _1813 = cbLight._m0[_1730].y + _552;
    float _1814 = cbLight._m0[_1730].z + _553;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1730].xyz));
    float _3745 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1826 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1827 = dot(vec3(_524, _525, _526), vec3(_1819, _1820, _1821));
    float _3767 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1819, _1820, _1821));
    float _3778 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1811 * _1811;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1826 * ((_1825 * _1851) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1851) + _1811) * _1825))) * _1825;
    float _3789 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    uint _1878 = _1730 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _527) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1765].x + _551;
    float _1892 = cbLight._m0[_1765].y + _552;
    float _1893 = cbLight._m0[_1765].z + _553;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1765].xyz));
    float _3800 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1905 = dot(vec3(_524, _525, _526), vec3(_1898, _1899, _1900));
    float _3811 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1898, _1899, _1900));
    float _3822 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1890;
    float _1937 = (0.5 / (((_1826 * ((_1904 * _1927) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1927) + _1890) * _1904))) * _1904;
    float _3833 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1949 = (((_1926 * cbLight._m0[_1878].x) * _1939) * _1747) + ((((cbLight._m0[_1797].x * _1722) * _1850) * _1864) * _1761);
    float _1950 = (((_1926 * cbLight._m0[_1878].y) * _1939) * _1747) + ((((cbLight._m0[_1797].y * _1723) * _1850) * _1864) * _1761);
    float _1951 = (((_1926 * cbLight._m0[_1878].z) * _1939) * _1747) + ((((cbLight._m0[_1797].z * _1724) * _1850) * _1864) * _1761);
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    if (_1728.y == 0u)
    {
        float _2006 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2006;
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2006;
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2006;
        uvec4 _2021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2022 = _2021.x;
        uint _2033 = uint((float(_2021.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2022))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2022)));
        float _2043 = (log2(_2009 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2044 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        uint _2047 = uint(isnan(14.0) ? _2044 : (isnan(_2044) ? 14.0 : min(_2044, 14.0)));
        uvec4 _2052 = texelFetch(g_lightClusterGridBuffer, int(((_2047 << 2u) + (_2033 << 6u)) >> 2u));
        uint _2053 = _2052.x;
        uint _2054 = _2021.z;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        float _2175;
        if (((((1u << ((_2054 >> 4u) & 15u)) + 4294967295u) & _2053) == 0u) || ((_2054 & 240u) == 0u))
        {
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
            _2175 = 0.0;
        }
        else
        {
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2176;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            float _2353 = 0.0;
            float _2354 = 0.0;
            uint _2355 = 0u;
            uint _2364;
            bool _2365;
            for (;;)
            {
                _2364 = texelFetch(g_lightClassification, int((((_2047 << 5u) + (_2033 << 9u)) + (_2355 << 2u)) >> 2u)).x;
                _2365 = _2364 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2365)
                {
                    frontier_phi_69_pred = _2349;
                    frontier_phi_69_pred_1 = _2354;
                    frontier_phi_69_pred_2 = _2353;
                    frontier_phi_69_pred_3 = _2352;
                    frontier_phi_69_pred_4 = _2351;
                    frontier_phi_69_pred_5 = _2350;
                }
                else
                {
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    uint _2551;
                    _2545 = _2349;
                    _2546 = _2350;
                    _2547 = _2351;
                    _2548 = _2352;
                    _2549 = _2353;
                    _2550 = _2354;
                    _2551 = _2364;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    for (;;)
                    {
                        uint _2555 = uint(findLSB(_2551)) + (_2355 << 5u);
                        uint _2552 = (_2551 + 4294967295u) & _2551;
                        uint _2557 = _2555 * 48u;
                        vec4 _2571 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 3u)).x));
                        uint _2577 = (_2555 * 48u) + 4u;
                        vec4 _2590 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2577)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 3u)).x));
                        uint _2596 = (_2555 * 48u) + 8u;
                        vec3 _2607 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x));
                        float _2611 = _2571.x - _2007;
                        float _2612 = _2571.y - _2008;
                        float _2613 = _2571.z - _2009;
                        float _2614 = dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613));
                        float _2617 = inversesqrt(_2614);
                        float _2618 = _2617 * _2611;
                        float _2619 = _2617 * _2612;
                        float _2620 = _2617 * _2613;
                        float _2621 = dot(vec3(_599, _602, _605), vec3(_2618, _2619, _2620));
                        float _2626 = 1.0 - (_2614 * _2571.w);
                        float _3854 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
                        float _2627 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2628 = sqrt(_2614) * _2590.w;
                        float _2631 = 1.39999997615814208984375 / (_2628 + 1.39999997615814208984375);
                        float _2632 = _2631 * _2631;
                        float _2635 = ((1.0 - _2632) * _2621) + _2632;
                        float _2638 = _2628 * _2628;
                        float _2642 = ((isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))) * _2627) / ((_2638 * 0.699999988079071044921875) + 1.0);
                        float _2646 = (-0.0) - _2007;
                        float _2647 = (-0.0) - _2008;
                        float _2648 = (-0.0) - _2009;
                        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
                        float _2653 = _2652 * _2646;
                        float _2654 = _2652 * _2647;
                        float _2655 = _2652 * _2648;
                        float _2663 = exp2(log2(1.0 / ((_2638 * 3.5) + 5.0)) * 0.25);
                        float _2664 = 1.0 - _659;
                        float _2671 = sqrt(1.0 - ((1.0 - (_2664 * _2664)) * (1.0 - (_2663 * _2663))));
                        float _2672 = _2671 * _2671;
                        float _2673 = _2672 * _2672;
                        float _2674 = _2653 + _2618;
                        float _2675 = _2654 + _2619;
                        float _2676 = _2655 + _2620;
                        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
                        float _2684 = dot(vec3(_599, _602, _605), vec3(_2653, _2654, _2655));
                        float _3870 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                        float _2688 = dot(vec3(_599, _602, _605), vec3(_2680 * _2674, _2680 * _2675, _2680 * _2676));
                        float _3881 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2691 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2695 = ((_2691 * _2691) * (_2673 + (-1.0))) + 1.0;
                        float _2696 = _2631 * _2672;
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2621) + _2697;
                        float _3892 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2702 = 1.0 - _2672;
                        float _2712 = (0.5 / (((_2701 * ((_2687 * _2702) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2702) + _2672) * _2687))) * _2701;
                        float _3903 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2723 = (((_2673 * 3.1415927410125732421875) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) / ((_2695 * _2695) * ((_2638 * 2.1991131305694580078125) + 3.141590118408203125))) * _2627;
                        _2449 = (_2642 * _2590.x) + _2548;
                        _2450 = (_2642 * _2590.y) + _2549;
                        _2451 = (_2642 * _2590.z) + _2550;
                        _2446 = (_2723 * _2607.x) + _2545;
                        _2447 = (_2723 * _2607.y) + _2546;
                        _2448 = (_2723 * _2607.z) + _2547;
                        if (_2552 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2545 = _2446;
                            _2546 = _2447;
                            _2547 = _2448;
                            _2548 = _2449;
                            _2549 = _2450;
                            _2550 = _2451;
                            _2551 = _2552;
                        }
                    }
                    frontier_phi_69_pred = _2446;
                    frontier_phi_69_pred_1 = _2451;
                    frontier_phi_69_pred_2 = _2450;
                    frontier_phi_69_pred_3 = _2449;
                    frontier_phi_69_pred_4 = _2448;
                    frontier_phi_69_pred_5 = _2447;
                }
                _2166 = frontier_phi_69_pred;
                _2176 = frontier_phi_69_pred_1;
                _2174 = frontier_phi_69_pred_2;
                _2172 = frontier_phi_69_pred_3;
                _2170 = frontier_phi_69_pred_4;
                _2168 = frontier_phi_69_pred_5;
                uint _2356 = _2355 + 1u;
                if (_2356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2349 = _2166;
                    _2350 = _2168;
                    _2351 = _2170;
                    _2352 = _2172;
                    _2353 = _2174;
                    _2354 = _2176;
                    _2355 = _2356;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
            _2175 = _2176;
        }
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.z;
        uint _2182 = (_2180 >> 8u) & 15u;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        if (((4294967295u << _2182) & _2053) == 0u)
        {
            _2317 = _2165;
            _2319 = _2167;
            _2321 = _2169;
            _2323 = _2171;
            _2325 = _2173;
            _2327 = _2175;
        }
        else
        {
            float _2342 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
            float _2343 = _2342 * _2007;
            float _2344 = _2342 * _2008;
            float _2345 = _2342 * _2009;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2182 < ((_2180 >> 12u) & 15u))
            {
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2326;
                float _2328;
                float _2528 = _2165;
                float _2529 = _2167;
                float _2530 = _2169;
                float _2531 = _2171;
                float _2532 = _2173;
                float _2533 = _2175;
                uint _2534 = _2182;
                uint _2543;
                bool _2544;
                for (;;)
                {
                    _2543 = texelFetch(g_lightClassification, int((((_2047 << 5u) + (_2033 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                    _2544 = _2543 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2544)
                    {
                        frontier_phi_83_pred = _2533;
                        frontier_phi_83_pred_1 = _2531;
                        frontier_phi_83_pred_2 = _2530;
                        frontier_phi_83_pred_3 = _2529;
                        frontier_phi_83_pred_4 = _2528;
                        frontier_phi_83_pred_5 = _2532;
                    }
                    else
                    {
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _2771 = _2528;
                        float _2772 = _2529;
                        float _2773 = _2530;
                        float _2774 = _2531;
                        float _2775 = _2532;
                        float _2776 = _2533;
                        uint _2777 = _2543;
                        uint _2778;
                        vec4 _2803;
                        float _2804;
                        vec4 _2819;
                        vec3 _2831;
                        vec4 _2846;
                        vec4 _2862;
                        float _2909;
                        bool _2910;
                        for (;;)
                        {
                            uint _2788 = ((_2534 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2777));
                            _2778 = (_2777 + 4294967295u) & _2777;
                            uint _2790 = _2788 * 40u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            _2804 = _2803.w;
                            uint _2806 = (_2788 * 40u) + 4u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2821 = (_2788 * 40u) + 8u;
                            _2831 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x));
                            uint _2833 = (_2788 * 40u) + 16u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2788 * 40u) + 20u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2865 = (_2788 * 40u) + 24u;
                            vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2884 = (_2788 * 40u) + 28u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            _2909 = fma(_2009, _2897.z, fma(_2008, _2897.y, _2897.x * _2007)) + _2897.w;
                            _2910 = !((fma(_2009, _2878.z, fma(_2008, _2878.y, _2878.x * _2007)) + _2878.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2910)
                            {
                                float _2937 = _2803.x - _2007;
                                float _2938 = _2803.y - _2008;
                                float _2939 = _2803.z - _2009;
                                float _2940 = dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939));
                                float _2943 = inversesqrt(_2940);
                                float _2944 = _2943 * _2937;
                                float _2945 = _2943 * _2938;
                                float _2946 = _2943 * _2939;
                                float _2950 = 1.0 - (_2940 / (_2804 * _2804));
                                float _3914 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2951 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2955 = sqrt(_2940) * _2819.w;
                                float _2957 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                                float _2958 = _2957 * _2957;
                                float _2961 = ((1.0 - _2958) * dot(vec3(_2944, _2945, _2946), vec3(_599, _602, _605))) + _2958;
                                float _2964 = _2955 * _2955;
                                float _2968 = (fma(_2009, _2846.z, fma(_2008, _2846.y, _2846.x * _2007)) + _2846.w) / _2909;
                                float _2969 = (fma(_2009, _2862.z, fma(_2008, _2862.y, _2862.x * _2007)) + _2862.w) / _2909;
                                float _2973 = 1.0 - dot(vec2(_2968, _2969), vec2(_2968, _2969));
                                float _3930 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2974 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2975 = _2974 * (((isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))) * _2951) / ((_2964 * 0.699999988079071044921875) + 1.0));
                                float _2987 = exp2(log2(1.0 / ((_2964 * 3.5) + 5.0)) * 0.25);
                                float _2988 = 1.0 - _659;
                                float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                                float _2996 = _2995 * _2995;
                                float _2997 = _2996 * _2996;
                                float _2998 = _2944 - _2343;
                                float _2999 = _2945 - _2344;
                                float _3000 = _2946 - _2345;
                                float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                                float _3008 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2343, (-0.0) - _2344, (-0.0) - _2345));
                                float _3941 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3012 = dot(vec3(_599, _602, _605), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                                float _3952 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3015 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                                float _3020 = _2957 * _2996;
                                float _3021 = _3020 * _3020;
                                float _3027 = ((1.0 - _3021) * dot(vec3(_599, _602, _605), vec3(_2944, _2945, _2946))) + _3021;
                                float _3963 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _3029 = 1.0 - _2996;
                                float _3039 = (0.5 / (((_3028 * ((_3011 * _3029) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3028 * _3029) + _2996) * _3011))) * _3028;
                                float _3974 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3049 = (_2974 * _2951) * (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) / ((_3019 * _3019) * ((_2964 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3049 * _2831.z;
                                frontier_phi_89_pred_1 = _3049 * _2831.y;
                                frontier_phi_89_pred_2 = _3049 * _2831.x;
                                frontier_phi_89_pred_3 = _2975 * _2819.z;
                                frontier_phi_89_pred_4 = _2975 * _2819.y;
                                frontier_phi_89_pred_5 = _2975 * _2819.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3055 = frontier_phi_89_pred;
                            _3054 = frontier_phi_89_pred_1;
                            _3053 = frontier_phi_89_pred_2;
                            _3058 = frontier_phi_89_pred_3;
                            _3057 = frontier_phi_89_pred_4;
                            _3056 = frontier_phi_89_pred_5;
                            _2761 = _3056 + _2774;
                            _2762 = _3057 + _2775;
                            _2763 = _3058 + _2776;
                            _2758 = _3053 + _2771;
                            _2759 = _3054 + _2772;
                            _2760 = _3055 + _2773;
                            if (_2778 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2778;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2763;
                        frontier_phi_83_pred_1 = _2761;
                        frontier_phi_83_pred_2 = _2760;
                        frontier_phi_83_pred_3 = _2759;
                        frontier_phi_83_pred_4 = _2758;
                        frontier_phi_83_pred_5 = _2762;
                    }
                    _2328 = frontier_phi_83_pred;
                    _2324 = frontier_phi_83_pred_1;
                    _2322 = frontier_phi_83_pred_2;
                    _2320 = frontier_phi_83_pred_3;
                    _2318 = frontier_phi_83_pred_4;
                    _2326 = frontier_phi_83_pred_5;
                    uint _2535 = _2534 + 1u;
                    if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2528 = _2318;
                        _2529 = _2320;
                        _2530 = _2322;
                        _2531 = _2324;
                        _2532 = _2326;
                        _2533 = _2328;
                        _2534 = _2535;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2324;
                frontier_phi_58_59_ladder_1 = _2328;
                frontier_phi_58_59_ladder_2 = _2326;
                frontier_phi_58_59_ladder_3 = _2320;
                frontier_phi_58_59_ladder_4 = _2318;
                frontier_phi_58_59_ladder_5 = _2322;
            }
            else
            {
                frontier_phi_58_59_ladder = _2171;
                frontier_phi_58_59_ladder_1 = _2175;
                frontier_phi_58_59_ladder_2 = _2173;
                frontier_phi_58_59_ladder_3 = _2167;
                frontier_phi_58_59_ladder_4 = _2165;
                frontier_phi_58_59_ladder_5 = _2169;
            }
            _2317 = frontier_phi_58_59_ladder_4;
            _2319 = frontier_phi_58_59_ladder_3;
            _2321 = frontier_phi_58_59_ladder_5;
            _2323 = frontier_phi_58_59_ladder;
            _2325 = frontier_phi_58_59_ladder_2;
            _2327 = frontier_phi_58_59_ladder_1;
        }
        float _2332 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2065 = (_2332 * _2323) + _1793;
        _2067 = (_2332 * _2325) + _1794;
        _2069 = (_2332 * _2327) + _1795;
        _2071 = ((_2317 * 0.039999999105930328369140625) * _2332) + _1949;
        _2073 = ((_2319 * 0.039999999105930328369140625) * _2332) + _1950;
        _2075 = ((_2321 * 0.039999999105930328369140625) * _2332) + _1951;
    }
    else
    {
        _2065 = _1793;
        _2067 = _1794;
        _2069 = _1795;
        _2071 = _1949;
        _2073 = _1950;
        _2075 = _1951;
    }
    uint _2081 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _3990 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4001 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4012 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2112 = (((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2065 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _643))) + ((_2071 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _299) * _506.x) * cbInstanceData._m0[_2081].x);
    float _2114 = ((((cbMtdParam._m0[12u].y * _299) * _506.y) * cbInstanceData._m0[_2081].y) + ((_2073 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2067 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _643)));
    float _2116 = ((((cbMtdParam._m0[12u].z * _299) * _506.z) * cbInstanceData._m0[_2081].z) + ((_2075 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1480)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2069 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _643)));
    float _2117 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2118 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    uint _2120 = _618 + 6u;
    float _2128 = _578 / cbSceneParam._m0[86u].x;
    float _2129 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, (log2((isnan(cbSceneParam._m0[77u].w) ? _546 : (isnan(_546) ? cbSceneParam._m0[77u].w : min(_546, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2145 = _2143.x;
    float _2146 = _2143.y;
    float _2147 = _2143.z;
    float _2148 = _2143.w;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    if (_546 > cbSceneParam._m0[78u].w)
    {
        float _2190 = isnan(_546) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _546 : min(cbSceneParam._m0[80u].w, _546));
        float _2191 = _2190 / _546;
        float _2202 = _2191 * _273;
        float _2203 = _274 * _2191;
        float _2204 = (-0.0) - _2203;
        float _2205 = _2191 * _275;
        float _2207 = (cbSceneParam._m0[77u].w * _2204) / _2190;
        float _2208 = _2207 + cbSceneParam._m0[79u].w;
        float _2209 = cbSceneParam._m0[79u].w - _2203;
        float _2215 = sqrt(((_2202 * _2202) + (_2203 * _2203)) + (_2205 * _2205));
        float _2218 = (1.0 - (cbSceneParam._m0[77u].w / _2190)) * _2215;
        float _2224 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2226 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2459;
        if (abs((_2204 - _2207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2459 = ((((_2208 > 0.0) ? exp2(_2224 * _2208) : (2.0 - exp2(_2226 * _2208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2218;
        }
        else
        {
            float _2378 = 1.0 / cbSceneParam._m0[80u].x;
            float _2379 = isnan(_2209) ? _2208 : (isnan(_2208) ? _2209 : max(_2208, _2209));
            float _2380 = isnan(_2209) ? _2208 : (isnan(_2208) ? _2209 : min(_2208, _2209));
            float _2389 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : min(_2379, 0.0));
            float _2390 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : min(_2380, 0.0));
            _2459 = ((abs(_2215 / _2204) * cbSceneParam._m0[80u].y) * ((((_2389 - _2390) * 2.0) - ((exp2(_2224 * (isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0)))) - exp2(_2224 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))))) * _2378)) - ((exp2(_2226 * _2389) - exp2(_2226 * _2390)) * _2378))) + (_2218 * cbSceneParam._m0[80u].z);
        }
        vec4 _2461 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, 1.0), 0.0);
        float _2470 = exp2((_2459 * (-1.44269502162933349609375)) * (1.0 - _2461.w));
        float _2471 = log2(_2470);
        float _2487 = log2(_2148);
        _2228 = (exp2(_2487 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].x)) * _2461.x) / cbSceneParam._m0[78u].x)) + _2145;
        _2230 = (exp2(_2487 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].y)) * _2461.y) / cbSceneParam._m0[78u].y)) + _2146;
        _2232 = (exp2(_2487 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].z)) * _2461.z) / cbSceneParam._m0[78u].z)) + _2147;
        _2234 = _2470 * _2148;
    }
    else
    {
        _2228 = _2145;
        _2230 = _2146;
        _2232 = _2147;
        _2234 = _2148;
    }
    bool _2497;
    vec4 _2244;
    vec4 _2266;
    float _2268;
    float _2272;
    float _2273;
    float _2274;
    float _2275;
    bool _2285;
    for (;;)
    {
        _2244 = cbMatDynParam._m0[0u];
        float _2246 = roundEven(_2244.y);
        bool _2247 = _2246 == 3.0;
        float _2248 = log2(_2234);
        float _2255 = exp2(_2248 * cbSceneParam._m0[78u].x) * _2117;
        float _2256 = exp2(_2248 * cbSceneParam._m0[78u].y) * _2118;
        float _2257 = exp2(_2248 * cbSceneParam._m0[78u].z) * _2119;
        float _2264 = _560 + (-0.5);
        _2266 = cbMtdParam._m0[1u];
        _2268 = _2266.y * _2264;
        float _2271 = (_2246 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2272 = _2271 * (_2247 ? _2255 : (_2255 + (cbSceneParam._m0[72u].w * _2228)));
        _2273 = _2271 * (_2247 ? _2256 : (_2256 + (cbSceneParam._m0[72u].w * _2230)));
        _2274 = _2271 * (_2247 ? _2257 : (_2257 + (cbSceneParam._m0[72u].w * _2232)));
        _2275 = _2264 * 0.999000012874603271484375;
        _2285 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2285)
        {
            if ((cbInstanceData._m0[_618 + 7u].x + _2275) < 0.5)
            {
                _2497 = true;
                break;
            }
        }
        uint _2413 = _619 + uint(_2244.w);
        if ((cbInstanceData._m0[_2413].w < 1.0) && ((cbInstanceData._m0[_2413].w + _2275) < 0.5))
        {
            _2497 = true;
            break;
        }
        if ((_2268 + 1.0) < _2266.x)
        {
            _2497 = true;
            break;
        }
        _2497 = false;
        break;
    }
    float _2728;
    if (_2497)
    {
        discard_state = true;
        _2728 = 0.0;
    }
    else
    {
        _2728 = cbInstanceData._m0[_2120].w;
    }
    SV_Target.x = _2272;
    SV_Target.y = _2273;
    SV_Target.z = _2274;
    SV_Target.w = _2728;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2120].w;
    discard_exit();
}


