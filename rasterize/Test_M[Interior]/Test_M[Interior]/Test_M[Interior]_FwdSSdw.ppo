#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _449;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _191 = _190 * _183;
    float _192 = _190 * _184;
    float _193 = _190 * _185;
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205 = _204 * TANGENT.x;
    float _206 = _204 * TANGENT.y;
    float _207 = _204 * TANGENT.z;
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _289 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _289.w;
    float _308 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _295) + cbMtdParam._m0[11u].x) * _289.x;
    float _310 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _295) + cbMtdParam._m0[11u].y) * _289.y;
    float _312 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _295) + cbMtdParam._m0[11u].z) * _289.z;
    vec4 _324 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3123 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))));
    vec4 _377 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _390 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _397 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _413 = (-0.0) - dot(vec3(_269, _270, _271), vec3(_390 * _191, _390 * _192, _390 * _193));
    float _414 = (-0.0) - dot(vec3(_269, _270, _271), vec3(_397 * _205, _397 * _206, _397 * _207));
    float _415 = (-0.0) - dot(vec3(_269, _270, _271), vec3((-0.0) - _212, (-0.0) - _213, (-0.0) - _214));
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _419 * _415;
    float _425 = ((cbMtdParam._m0[15u].y * _413) * _419) + (((_377.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _426 = ((cbMtdParam._m0[15u].z * _414) * _419) + (((_377.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _429 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _430 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _447;
    float _450;
    float _452;
    if (_425 > 0.0)
    {
        float _433 = (1.0 - _429) / _425;
        _447 = _433;
        _450 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_433 * _420)) * 0.16666667163372039794921875;
        _452 = (fract((_433 * _426) + _430) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_425 < 0.0)
        {
            float _448 = ((-0.0) - _429) / _425;
            frontier_phi_5_4_ladder = _448;
            frontier_phi_5_4_ladder_1 = (fract((_448 * _426) + _430) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_5_4_ladder_2 = (fract(_448 * _420) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_5_4_ladder = _449;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = 0.0;
        }
        _447 = frontier_phi_5_4_ladder;
        _450 = frontier_phi_5_4_ladder_2;
        _452 = frontier_phi_5_4_ladder_1;
    }
    float _478;
    float _480;
    float _482;
    if (_426 > 0.0)
    {
        float _465 = (1.0 - _430) / _426;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_465 < _447)
        {
            frontier_phi_10_7_ladder = (fract(_465 * _420) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_465 * _425) + _429) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _465;
        }
        else
        {
            frontier_phi_10_7_ladder = _452;
            frontier_phi_10_7_ladder_1 = _450;
            frontier_phi_10_7_ladder_2 = _447;
        }
        _478 = frontier_phi_10_7_ladder_2;
        _480 = frontier_phi_10_7_ladder_1;
        _482 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_426 < 0.0)
        {
            float _479 = ((-0.0) - _430) / _426;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_479 < _447)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_479 * _420) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_479 * _425) + _429) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _479;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _452;
                frontier_phi_10_8_ladder_11_ladder_1 = _450;
                frontier_phi_10_8_ladder_11_ladder_2 = _447;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _452;
            frontier_phi_10_8_ladder_1 = _450;
            frontier_phi_10_8_ladder_2 = _447;
        }
        _478 = frontier_phi_10_8_ladder_2;
        _480 = frontier_phi_10_8_ladder_1;
        _482 = frontier_phi_10_8_ladder;
    }
    float _486 = (_420 > 0.0) ? (cbMtdParam._m0[13u].w / _420) : 5000.0;
    float _499;
    float _500;
    if (_486 < _478)
    {
        _499 = ((_429 + cbMtdParam._m0[14u].x) + (_486 * _425)) * 0.16666667163372039794921875;
        _500 = (((_486 * _426) + _430) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _499 = _480;
        _500 = _482;
    }
    vec4 _502 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_499, _500));
    float _509 = fma(_341, _212, fma(_334, _205, _332 * _191));
    float _512 = fma(_341, _213, fma(_334, _206, _332 * _192));
    float _515 = fma(_341, _214, fma(_334, _207, _332 * _193));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3134 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _523 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
    float _3145 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3156 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3167 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _546 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _547 = _269 * _546;
    float _548 = _270 * _546;
    float _549 = _271 * _546;
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _577 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _580 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _583 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _596 = uint(roundEven(NORMAL.w)) * 13u;
    uint _597 = _596 + 9u;
    uint _598 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _604 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * cbInstanceData._m0[_598].x;
    float _605 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0)))) * cbInstanceData._m0[_598].y;
    float _606 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0)))) * cbInstanceData._m0[_598].z;
    float _3178 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    float _3200 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    vec4 _618 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _555, cbSceneParam._m0[86u].y * _556));
    float _621 = _618.x * TEXCOORD.z;
    float _622 = dot(vec3(_520, _521, _522), vec3(_547, _548, _549));
    float _625 = _622 * 2.0;
    float _629 = (_625 * _520) - _547;
    float _630 = (_625 * _521) - _548;
    float _631 = (_625 * _522) - _549;
    float _635 = abs(dot(vec3(_547, _548, _549), vec3(_520, _521, _522)));
    float _3211 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _637 = sqrt(_523);
    float _650 = exp2((_637 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_637 * 3.0));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = fma(_690, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682));
        float _727 = fma(_690, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682));
        float _731 = fma(_690, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682));
        float _755 = _682 + _520;
        float _756 = _686 + _521;
        float _757 = _690 + _522;
        float _767 = fma(_757, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) - _723;
        float _768 = fma(_757, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) - _727;
        float _769 = fma(_757, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) - _731;
        float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
        float _786 = ((_773 * _767) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_723 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_773 * _768) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_727 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_773 * _769) / cbModelParam._m0[34u].z) + ((((((_731 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_791.x + (-0.5));
        float _827 = _825 * (_791.y + (-0.5));
        float _828 = _825 * (_791.z + (-0.5));
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_798.x + (-0.5));
        float _837 = _835 * (_798.y + (-0.5));
        float _838 = _835 * (_798.z + (-0.5));
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_805.x + (-0.5));
        float _847 = _845 * (_805.y + (-0.5));
        float _848 = _845 * (_805.z + (-0.5));
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = _826 * 0.5;
        float _863 = _836 * 0.5;
        float _864 = _846 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _879 = (dot(vec3(_520, _521, _522), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3237 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _889 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3248 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3259 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0))) * (_891 + 1.0))) + _896) * _859;
        float _906 = _827 * 0.5;
        float _907 = _837 * 0.5;
        float _908 = _847 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_520, _521, _522), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3270 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3281 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3292 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * (_933 + 1.0))) + _938) * _860;
        float _948 = _828 * 0.5;
        float _949 = _838 * 0.5;
        float _950 = _848 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_520, _521, _522), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3303 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3314 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3325 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_975 + 1.0))) + _980) * _861;
        _997 = _828;
        _998 = _827;
        _999 = _826;
        _1000 = _838;
        _1001 = _837;
        _1002 = _836;
        _1003 = _848;
        _1004 = _847;
        _1005 = _846;
        _1006 = _861;
        _1007 = _860;
        _1008 = _859;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
    }
    else
    {
        _997 = _449;
        _998 = _449;
        _999 = _449;
        _1000 = _449;
        _1001 = _449;
        _1002 = _449;
        _1003 = _449;
        _1004 = _449;
        _1005 = _449;
        _1006 = _449;
        _1007 = _449;
        _1008 = _449;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_690, cbModelParam._m0[30u].z, fma(_686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _682));
        float _1041 = fma(_690, cbModelParam._m0[31u].z, fma(_686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _682));
        float _1045 = fma(_690, cbModelParam._m0[32u].z, fma(_686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _682));
        float _1068 = _682 + _520;
        float _1069 = _686 + _521;
        float _1070 = _690 + _522;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_520, _521, _522), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3388 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_520, _521, _522), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3421 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_520, _521, _522), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3454 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _449;
        _1307 = _449;
        _1308 = _449;
        _1309 = _449;
        _1310 = _449;
        _1311 = _449;
        _1312 = _449;
        _1313 = _449;
        _1314 = _449;
        _1315 = _449;
        _1316 = _449;
        _1317 = _449;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _629 * 0.5;
    float _1375 = _630 * 0.5;
    float _1376 = _631 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1490 = fma(_690, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682)) + cbModelParam._m0[13u].w;
        float _1494 = fma(_690, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682)) + cbModelParam._m0[14u].w;
        float _1498 = fma(_690, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682)) + cbModelParam._m0[15u].w;
        float _1501 = fma(_631, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629));
        float _1504 = fma(_631, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629));
        float _1507 = fma(_631, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629));
        float _1535;
        if (_1501 > 0.0)
        {
            _1535 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1535 = frontier_phi_28_26_ladder;
        }
        float _1909;
        if (_1504 > 0.0)
        {
            _1909 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1909 = frontier_phi_37_33_ladder;
        }
        float _2230;
        if (_1507 > 0.0)
        {
            _2230 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2230 = frontier_phi_51_44_ladder;
        }
        float _2232 = isnan(_1909) ? _1535 : (isnan(_1535) ? _1909 : min(_1535, _1909));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1501) + _1490;
        float _2238 = (_2233 * _1504) + _1494;
        float _2239 = (_2233 * _1507) + _1498;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2240;
        float _2243 = _2240 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2239 > _2243) || ((_2239 < _2241) || ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 < _2241) || (_2237 > _2243))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_27_51_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_27_51_ladder_1 = _2365.x * cbModelParam._m0[1u].y;
            frontier_phi_27_51_ladder_2 = _2365.y * cbModelParam._m0[1u].y;
        }
        _1523 = frontier_phi_27_51_ladder_1;
        _1525 = frontier_phi_27_51_ladder_2;
        _1527 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_629, _630, _631), _1443);
        _1523 = _1511.x * cbModelParam._m0[1u].y;
        _1525 = _1511.y * cbModelParam._m0[1u].y;
        _1527 = _1511.z * cbModelParam._m0[1u].y;
    }
    float _1531 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1531 : min(cbModelParam._m0[25u].w, _1531));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_690, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_690, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_690, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_631, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629));
        float _1602 = fma(_631, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629));
        float _1605 = fma(_631, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629));
        float _1914;
        if (_1599 > 0.0)
        {
            _1914 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1914 = frontier_phi_39_35_ladder;
        }
        float _2256;
        if (_1602 > 0.0)
        {
            _2256 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_53_46_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_53_46_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_53_46_ladder = 5000.0;
            }
            _2256 = frontier_phi_53_46_ladder;
        }
        float _2425;
        if (_1605 > 0.0)
        {
            _2425 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_67_62_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_67_62_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_67_62_ladder = 5000.0;
            }
            _2425 = frontier_phi_67_62_ladder;
        }
        float _2427 = isnan(_2256) ? _1914 : (isnan(_1914) ? _2256 : min(_1914, _2256));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1599) + _1588;
        float _2433 = (_2428 * _1602) + _1592;
        float _2434 = (_2428 * _1605) + _1596;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_36_67_ladder;
        float frontier_phi_36_67_ladder_1;
        float frontier_phi_36_67_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_36_67_ladder = 0.0;
            frontier_phi_36_67_ladder_1 = 0.0;
            frontier_phi_36_67_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1532);
            frontier_phi_36_67_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_36_67_ladder_1 = _2667.x * cbModelParam._m0[1u].z;
            frontier_phi_36_67_ladder_2 = _2667.y * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_36_67_ladder_1;
        _1626 = frontier_phi_36_67_ladder_2;
        _1628 = frontier_phi_36_67_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_629, _630, _631), _1532);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _650) * ((_637 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_650 * _637)) * _621;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1523)) + _1523);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1525)) + _1525);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1527)) + _1527);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    vec4 _1660 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_555, _556));
    float _1662 = _1660.w;
    float _1674 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1662);
    float _1675 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1662);
    float _1676 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1662);
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_596 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1688 = _621 + (-1.0);
    float _1691 = (cbLight._m0[_1683].x * _1688) + 1.0;
    float _1692 = (cbLight._m0[_1683].y * _1688) + 1.0;
    uint _1693 = _1682 + 5u;
    float _1699 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1703 = _1682 + 4u;
    float _1713 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1717 = _1682 | 1u;
    float _1728 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_520, _521, _522));
    float _1731 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_520, _521, _522));
    float _3590 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _3601 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1736 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.3183098733425140380859375;
    float _1738 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.3183098733425140380859375;
    float _1745 = ((cbLight._m0[_1693].x * _1699) * _1738) + (((cbLight._m0[_1703].x * _1674) * _1713) * _1736);
    float _1746 = ((_1699 * cbLight._m0[_1693].y) * _1738) + (((cbLight._m0[_1703].y * _1675) * _1713) * _1736);
    float _1747 = ((_1699 * cbLight._m0[_1693].z) * _1738) + (((cbLight._m0[_1703].z * _1676) * _1713) * _1736);
    uint _1749 = _1682 + 8u;
    float _1762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _523) * 0.949999988079071044921875);
    float _1763 = _1762 * _1762;
    float _1764 = cbLight._m0[_1682].x + _547;
    float _1765 = cbLight._m0[_1682].y + _548;
    float _1766 = cbLight._m0[_1682].z + _549;
    float _1770 = inversesqrt(dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766)));
    float _1771 = _1770 * _1764;
    float _1772 = _1770 * _1765;
    float _1773 = _1770 * _1766;
    float _1774 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1682].xyz));
    float _3612 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1777 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _3623 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _1778 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _1779 = dot(vec3(_520, _521, _522), vec3(_1771, _1772, _1773));
    float _3634 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1771, _1772, _1773));
    float _3645 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = _1763 * _1763;
    float _1791 = ((_1782 * _1782) * (_1787 + (-1.0))) + 1.0;
    float _1802 = (exp2(log2(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1803 = 1.0 - _1763;
    float _1814 = (0.5 / (((_1778 * ((_1777 * _1803) + _1763)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1803) + _1763) * _1777))) * _1777;
    float _3656 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1816 = (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1787 / ((_1791 * _1791) * 3.141590118408203125));
    uint _1830 = _1682 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _523) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1717].x + _547;
    float _1844 = cbLight._m0[_1717].y + _548;
    float _1845 = cbLight._m0[_1717].z + _549;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1717].xyz));
    float _3667 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1857 = dot(vec3(_520, _521, _522), vec3(_1850, _1851, _1852));
    float _3678 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1850, _1851, _1852));
    float _3689 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1778 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1778 * _1879) + _1842) * _1856))) * _1856;
    float _3700 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1901 = (((_1878 * cbLight._m0[_1830].x) * _1891) * _1699) + ((((cbLight._m0[_1749].x * _1674) * _1802) * _1816) * _1713);
    float _1902 = (((_1878 * cbLight._m0[_1830].y) * _1891) * _1699) + ((((cbLight._m0[_1749].y * _1675) * _1802) * _1816) * _1713);
    float _1903 = (((_1878 * cbLight._m0[_1830].z) * _1891) * _1699) + ((((cbLight._m0[_1749].z * _1676) * _1802) * _1816) * _1713);
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    if (_1680.y == 0u)
    {
        float _1958 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1958;
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1958;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1958;
        uvec4 _1973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1974 = _1973.x;
        uint _1985 = uint((float(_1973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _1974))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _1974)));
        float _1995 = (log2(_1961 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1996 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        uint _1999 = uint(isnan(14.0) ? _1996 : (isnan(_1996) ? 14.0 : min(_1996, 14.0)));
        uvec4 _2004 = texelFetch(g_lightClusterGridBuffer, int(((_1999 << 2u) + (_1985 << 6u)) >> 2u));
        uint _2005 = _2004.x;
        uint _2006 = _1973.z;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        if (((((1u << ((_2006 >> 4u) & 15u)) + 4294967295u) & _2005) == 0u) || ((_2006 & 240u) == 0u))
        {
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
        }
        else
        {
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            uint _2299 = 0u;
            uint _2308;
            bool _2309;
            for (;;)
            {
                _2308 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2299 << 2u)) >> 2u)).x;
                _2309 = _2308 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2309)
                {
                    frontier_phi_64_pred = _2294;
                    frontier_phi_64_pred_1 = _2293;
                    frontier_phi_64_pred_2 = _2298;
                    frontier_phi_64_pred_3 = _2297;
                    frontier_phi_64_pred_4 = _2296;
                    frontier_phi_64_pred_5 = _2295;
                }
                else
                {
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    uint _2474;
                    _2468 = _2293;
                    _2469 = _2294;
                    _2470 = _2295;
                    _2471 = _2296;
                    _2472 = _2297;
                    _2473 = _2298;
                    _2474 = _2308;
                    float _2374;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    for (;;)
                    {
                        uint _2478 = uint(findLSB(_2474)) + (_2299 << 5u);
                        uint _2475 = (_2474 + 4294967295u) & _2474;
                        uint _2480 = _2478 * 48u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2500 = (_2478 * 48u) + 4u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 3u)).x));
                        uint _2519 = (_2478 * 48u) + 8u;
                        vec3 _2530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x));
                        float _2534 = _2494.x - _1959;
                        float _2535 = _2494.y - _1960;
                        float _2536 = _2494.z - _1961;
                        float _2537 = dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536));
                        float _2540 = inversesqrt(_2537);
                        float _2541 = _2540 * _2534;
                        float _2542 = _2540 * _2535;
                        float _2543 = _2540 * _2536;
                        float _2544 = dot(vec3(_577, _580, _583), vec3(_2541, _2542, _2543));
                        float _2549 = 1.0 - (_2537 * _2494.w);
                        float _3721 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                        float _2551 = sqrt(_2537) * _2513.w;
                        float _2554 = 1.39999997615814208984375 / (_2551 + 1.39999997615814208984375);
                        float _2555 = _2554 * _2554;
                        float _2558 = ((1.0 - _2555) * _2544) + _2555;
                        float _2561 = _2551 * _2551;
                        float _2565 = ((isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * _2550) / ((_2561 * 0.699999988079071044921875) + 1.0);
                        float _2569 = (-0.0) - _1959;
                        float _2570 = (-0.0) - _1960;
                        float _2571 = (-0.0) - _1961;
                        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
                        float _2576 = _2575 * _2569;
                        float _2577 = _2575 * _2570;
                        float _2578 = _2575 * _2571;
                        float _2586 = exp2(log2(1.0 / ((_2561 * 3.5) + 5.0)) * 0.25);
                        float _2587 = 1.0 - _637;
                        float _2594 = sqrt(1.0 - ((1.0 - (_2587 * _2587)) * (1.0 - (_2586 * _2586))));
                        float _2595 = _2594 * _2594;
                        float _2596 = _2595 * _2595;
                        float _2597 = _2576 + _2541;
                        float _2598 = _2577 + _2542;
                        float _2599 = _2578 + _2543;
                        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
                        float _2607 = dot(vec3(_577, _580, _583), vec3(_2576, _2577, _2578));
                        float _3737 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                        float _2610 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
                        float _2611 = dot(vec3(_577, _580, _583), vec3(_2603 * _2597, _2603 * _2598, _2603 * _2599));
                        float _3748 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2614 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
                        float _2618 = ((_2614 * _2614) * (_2596 + (-1.0))) + 1.0;
                        float _2619 = _2554 * _2595;
                        float _2620 = _2619 * _2619;
                        float _2623 = ((1.0 - _2620) * _2544) + _2620;
                        float _3759 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                        float _2624 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
                        float _2625 = 1.0 - _2595;
                        float _2635 = (0.5 / (((_2624 * ((_2610 * _2625) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2624 * _2625) + _2595) * _2610))) * _2624;
                        float _3770 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _2646 = (((_2596 * 3.1415927410125732421875) * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) / ((_2618 * _2618) * ((_2561 * 2.1991131305694580078125) + 3.141590118408203125))) * _2550;
                        _2377 = (_2565 * _2513.x) + _2471;
                        _2378 = (_2565 * _2513.y) + _2472;
                        _2379 = (_2565 * _2513.z) + _2473;
                        _2374 = (_2646 * _2530.x) + _2468;
                        _2375 = (_2646 * _2530.y) + _2469;
                        _2376 = (_2646 * _2530.z) + _2470;
                        if (_2475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2468 = _2374;
                            _2469 = _2375;
                            _2470 = _2376;
                            _2471 = _2377;
                            _2472 = _2378;
                            _2473 = _2379;
                            _2474 = _2475;
                        }
                    }
                    frontier_phi_64_pred = _2375;
                    frontier_phi_64_pred_1 = _2374;
                    frontier_phi_64_pred_2 = _2379;
                    frontier_phi_64_pred_3 = _2378;
                    frontier_phi_64_pred_4 = _2377;
                    frontier_phi_64_pred_5 = _2376;
                }
                _2120 = frontier_phi_64_pred;
                _2118 = frontier_phi_64_pred_1;
                _2128 = frontier_phi_64_pred_2;
                _2126 = frontier_phi_64_pred_3;
                _2124 = frontier_phi_64_pred_4;
                _2122 = frontier_phi_64_pred_5;
                uint _2300 = _2299 + 1u;
                if (_2300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2293 = _2118;
                    _2294 = _2120;
                    _2295 = _2122;
                    _2296 = _2124;
                    _2297 = _2126;
                    _2298 = _2128;
                    _2299 = _2300;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
        }
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.z;
        uint _2134 = (_2132 >> 8u) & 15u;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((4294967295u << _2134) & _2005) == 0u)
        {
            _2261 = _2117;
            _2263 = _2119;
            _2265 = _2121;
            _2267 = _2123;
            _2269 = _2125;
            _2271 = _2127;
        }
        else
        {
            float _2286 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
            float _2287 = _2286 * _1959;
            float _2288 = _2286 * _1960;
            float _2289 = _2286 * _1961;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2134 < ((_2132 >> 12u) & 15u))
            {
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2451 = _2117;
                float _2452 = _2119;
                float _2453 = _2121;
                float _2454 = _2123;
                float _2455 = _2125;
                float _2456 = _2127;
                uint _2457 = _2134;
                uint _2466;
                bool _2467;
                for (;;)
                {
                    _2466 = texelFetch(g_lightClassification, int((((_1999 << 5u) + (_1985 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                    _2467 = _2466 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2467)
                    {
                        frontier_phi_73_pred = _2455;
                        frontier_phi_73_pred_1 = _2456;
                        frontier_phi_73_pred_2 = _2454;
                        frontier_phi_73_pred_3 = _2453;
                        frontier_phi_73_pred_4 = _2452;
                        frontier_phi_73_pred_5 = _2451;
                    }
                    else
                    {
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2685 = _2451;
                        float _2686 = _2452;
                        float _2687 = _2453;
                        float _2688 = _2454;
                        float _2689 = _2455;
                        float _2690 = _2456;
                        uint _2691 = _2466;
                        uint _2692;
                        vec4 _2717;
                        float _2718;
                        vec4 _2733;
                        vec3 _2745;
                        vec4 _2760;
                        vec4 _2776;
                        float _2823;
                        bool _2824;
                        for (;;)
                        {
                            uint _2702 = ((_2457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2691));
                            _2692 = (_2691 + 4294967295u) & _2691;
                            uint _2704 = _2702 * 40u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            _2718 = _2717.w;
                            uint _2720 = (_2702 * 40u) + 4u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2735 = (_2702 * 40u) + 8u;
                            _2745 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x));
                            uint _2747 = (_2702 * 40u) + 16u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2763 = (_2702 * 40u) + 20u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2779 = (_2702 * 40u) + 24u;
                            vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            uint _2798 = (_2702 * 40u) + 28u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2823 = fma(_1961, _2811.z, fma(_1960, _2811.y, _2811.x * _1959)) + _2811.w;
                            _2824 = !((fma(_1961, _2792.z, fma(_1960, _2792.y, _2792.x * _1959)) + _2792.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_2824)
                            {
                                float _2851 = _2717.x - _1959;
                                float _2852 = _2717.y - _1960;
                                float _2853 = _2717.z - _1961;
                                float _2854 = dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853));
                                float _2857 = inversesqrt(_2854);
                                float _2858 = _2857 * _2851;
                                float _2859 = _2857 * _2852;
                                float _2860 = _2857 * _2853;
                                float _2864 = 1.0 - (_2854 / (_2718 * _2718));
                                float _3781 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                                float _2865 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                                float _2869 = sqrt(_2854) * _2733.w;
                                float _2871 = 1.39999997615814208984375 / (_2869 + 1.39999997615814208984375);
                                float _2872 = _2871 * _2871;
                                float _2875 = ((1.0 - _2872) * dot(vec3(_2858, _2859, _2860), vec3(_577, _580, _583))) + _2872;
                                float _2878 = _2869 * _2869;
                                float _2882 = (fma(_1961, _2760.z, fma(_1960, _2760.y, _2760.x * _1959)) + _2760.w) / _2823;
                                float _2883 = (fma(_1961, _2776.z, fma(_1960, _2776.y, _2776.x * _1959)) + _2776.w) / _2823;
                                float _2887 = 1.0 - dot(vec2(_2882, _2883), vec2(_2882, _2883));
                                float _3797 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                                float _2888 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                                float _2889 = _2888 * (((isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))) * _2865) / ((_2878 * 0.699999988079071044921875) + 1.0));
                                float _2901 = exp2(log2(1.0 / ((_2878 * 3.5) + 5.0)) * 0.25);
                                float _2902 = 1.0 - _637;
                                float _2909 = sqrt(1.0 - ((1.0 - (_2902 * _2902)) * (1.0 - (_2901 * _2901))));
                                float _2910 = _2909 * _2909;
                                float _2911 = _2910 * _2910;
                                float _2912 = _2858 - _2287;
                                float _2913 = _2859 - _2288;
                                float _2914 = _2860 - _2289;
                                float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                                float _2922 = dot(vec3(_577, _580, _583), vec3((-0.0) - _2287, (-0.0) - _2288, (-0.0) - _2289));
                                float _3808 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                                float _2925 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                                float _2926 = dot(vec3(_577, _580, _583), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                                float _3819 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2929 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                                float _2933 = ((_2929 * _2929) * (_2911 + (-1.0))) + 1.0;
                                float _2934 = _2871 * _2910;
                                float _2935 = _2934 * _2934;
                                float _2941 = ((1.0 - _2935) * dot(vec3(_577, _580, _583), vec3(_2858, _2859, _2860))) + _2935;
                                float _3830 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                                float _2943 = 1.0 - _2910;
                                float _2953 = (0.5 / (((_2942 * ((_2925 * _2943) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2942 * _2943) + _2910) * _2925))) * _2942;
                                float _3841 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2963 = (_2888 * _2865) * (((_2911 * 3.1415927410125732421875) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) / ((_2933 * _2933) * ((_2878 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _2963 * _2745.y;
                                frontier_phi_79_pred_1 = _2889 * _2733.x;
                                frontier_phi_79_pred_2 = _2963 * _2745.z;
                                frontier_phi_79_pred_3 = _2963 * _2745.x;
                                frontier_phi_79_pred_4 = _2889 * _2733.z;
                                frontier_phi_79_pred_5 = _2889 * _2733.y;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _2968 = frontier_phi_79_pred;
                            _2970 = frontier_phi_79_pred_1;
                            _2969 = frontier_phi_79_pred_2;
                            _2967 = frontier_phi_79_pred_3;
                            _2972 = frontier_phi_79_pred_4;
                            _2971 = frontier_phi_79_pred_5;
                            _2675 = _2970 + _2688;
                            _2676 = _2971 + _2689;
                            _2677 = _2972 + _2690;
                            _2672 = _2967 + _2685;
                            _2673 = _2968 + _2686;
                            _2674 = _2969 + _2687;
                            if (_2692 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2692;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2676;
                        frontier_phi_73_pred_1 = _2677;
                        frontier_phi_73_pred_2 = _2675;
                        frontier_phi_73_pred_3 = _2674;
                        frontier_phi_73_pred_4 = _2673;
                        frontier_phi_73_pred_5 = _2672;
                    }
                    _2270 = frontier_phi_73_pred;
                    _2272 = frontier_phi_73_pred_1;
                    _2268 = frontier_phi_73_pred_2;
                    _2266 = frontier_phi_73_pred_3;
                    _2264 = frontier_phi_73_pred_4;
                    _2262 = frontier_phi_73_pred_5;
                    uint _2458 = _2457 + 1u;
                    if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2451 = _2262;
                        _2452 = _2264;
                        _2453 = _2266;
                        _2454 = _2268;
                        _2455 = _2270;
                        _2456 = _2272;
                        _2457 = _2458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2270;
                frontier_phi_55_56_ladder_1 = _2272;
                frontier_phi_55_56_ladder_2 = _2268;
                frontier_phi_55_56_ladder_3 = _2266;
                frontier_phi_55_56_ladder_4 = _2264;
                frontier_phi_55_56_ladder_5 = _2262;
            }
            else
            {
                frontier_phi_55_56_ladder = _2125;
                frontier_phi_55_56_ladder_1 = _2127;
                frontier_phi_55_56_ladder_2 = _2123;
                frontier_phi_55_56_ladder_3 = _2121;
                frontier_phi_55_56_ladder_4 = _2119;
                frontier_phi_55_56_ladder_5 = _2117;
            }
            _2261 = frontier_phi_55_56_ladder_5;
            _2263 = frontier_phi_55_56_ladder_4;
            _2265 = frontier_phi_55_56_ladder_3;
            _2267 = frontier_phi_55_56_ladder_2;
            _2269 = frontier_phi_55_56_ladder;
            _2271 = frontier_phi_55_56_ladder_1;
        }
        float _2276 = isnan(1.0) ? _621 : (isnan(_621) ? 1.0 : min(_621, 1.0));
        _2017 = (_2276 * _2267) + _1745;
        _2019 = (_2276 * _2269) + _1746;
        _2021 = (_2276 * _2271) + _1747;
        _2023 = ((_2261 * 0.039999999105930328369140625) * _2276) + _1901;
        _2025 = ((_2263 * 0.039999999105930328369140625) * _2276) + _1902;
        _2027 = ((_2265 * 0.039999999105930328369140625) * _2276) + _1903;
    }
    else
    {
        _2017 = _1745;
        _2019 = _1746;
        _2021 = _1747;
        _2023 = _1901;
        _2025 = _1902;
        _2027 = _1903;
    }
    uint _2033 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _3857 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _3868 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3879 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _2064 = (((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_2017 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _621))) + ((_2023 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _295) * _502.x) * cbInstanceData._m0[_2033].x);
    float _2066 = ((((cbMtdParam._m0[12u].y * _295) * _502.y) * cbInstanceData._m0[_2033].y) + ((_2025 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_2019 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _621)));
    float _2068 = ((((cbMtdParam._m0[12u].z * _295) * _502.z) * cbInstanceData._m0[_2033].z) + ((_2027 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1432)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_2021 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _621)));
    uint _2072 = _596 + 6u;
    float _2080 = _555 / cbSceneParam._m0[86u].x;
    float _2081 = _556 / cbSceneParam._m0[86u].y;
    vec4 _2095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2097 = _2095.x;
    float _2098 = _2095.y;
    float _2099 = _2095.z;
    float _2100 = _2095.w;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2142 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2143 = _2142 / _542;
        float _2154 = _2143 * _269;
        float _2155 = _270 * _2143;
        float _2156 = (-0.0) - _2155;
        float _2157 = _2143 * _271;
        float _2159 = (cbSceneParam._m0[77u].w * _2156) / _2142;
        float _2160 = _2159 + cbSceneParam._m0[79u].w;
        float _2161 = cbSceneParam._m0[79u].w - _2155;
        float _2167 = sqrt(((_2154 * _2154) + (_2155 * _2155)) + (_2157 * _2157));
        float _2170 = (1.0 - (cbSceneParam._m0[77u].w / _2142)) * _2167;
        float _2176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2387;
        if (abs((_2156 - _2159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2387 = ((((_2160 > 0.0) ? exp2(_2176 * _2160) : (2.0 - exp2(_2178 * _2160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2170;
        }
        else
        {
            float _2322 = 1.0 / cbSceneParam._m0[80u].x;
            float _2323 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : max(_2160, _2161));
            float _2324 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : min(_2160, _2161));
            float _2333 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : min(_2323, 0.0));
            float _2334 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : min(_2324, 0.0));
            _2387 = ((abs(_2167 / _2156) * cbSceneParam._m0[80u].y) * ((((_2333 - _2334) * 2.0) - ((exp2(_2176 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)))) - exp2(_2176 * (isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0))))) * _2322)) - ((exp2(_2178 * _2333) - exp2(_2178 * _2334)) * _2322))) + (_2170 * cbSceneParam._m0[80u].z);
        }
        vec4 _2389 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, 1.0), 0.0);
        float _2398 = exp2((_2387 * (-1.44269502162933349609375)) * (1.0 - _2389.w));
        float _2399 = log2(_2398);
        float _2415 = log2(_2100);
        _2180 = (exp2(_2415 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].x)) * _2389.x) / cbSceneParam._m0[78u].x)) + _2097;
        _2182 = (exp2(_2415 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].y)) * _2389.y) / cbSceneParam._m0[78u].y)) + _2098;
        _2184 = (exp2(_2415 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].z)) * _2389.z) / cbSceneParam._m0[78u].z)) + _2099;
        _2186 = _2398 * _2100;
    }
    else
    {
        _2180 = _2097;
        _2182 = _2098;
        _2184 = _2099;
        _2186 = _2100;
    }
    float _2198 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2199 = _2198 == 3.0;
    float _2200 = log2(_2186);
    float _2207 = exp2(_2200 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    float _2208 = exp2(_2200 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    float _2209 = exp2(_2200 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)));
    float _2218 = (_2198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2218 * (_2199 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2180)));
    SV_Target.y = _2218 * (_2199 ? _2208 : (_2208 + (cbSceneParam._m0[72u].w * _2182)));
    SV_Target.z = _2218 * (_2199 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2184)));
    SV_Target.w = cbInstanceData._m0[_2072].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2072].w;
}


