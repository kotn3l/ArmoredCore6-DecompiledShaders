#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _451;
float _3196;
float _3197;
float _3198;
float _3199;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _193 = _192 * _185;
    float _194 = _192 * _186;
    float _195 = _192 * _187;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _310 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _297) + cbMtdParam._m0[11u].x) * _291.x;
    float _312 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _297) + cbMtdParam._m0[11u].y) * _291.y;
    float _314 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _297) + cbMtdParam._m0[11u].z) * _291.z;
    vec4 _326 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3208 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    vec4 _379 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _392 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _399 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _415 = (-0.0) - dot(vec3(_271, _272, _273), vec3(_392 * _193, _392 * _194, _392 * _195));
    float _416 = (-0.0) - dot(vec3(_271, _272, _273), vec3(_399 * _207, _399 * _208, _399 * _209));
    float _417 = (-0.0) - dot(vec3(_271, _272, _273), vec3((-0.0) - _214, (-0.0) - _215, (-0.0) - _216));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[15u].y * _415) * _421) + (((_379.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _428 = ((cbMtdParam._m0[15u].z * _416) * _421) + (((_379.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _431 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _449;
    float _452;
    float _454;
    if (_427 > 0.0)
    {
        float _435 = (1.0 - _431) / _427;
        _449 = _435;
        _452 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_435 * _422)) * 0.16666667163372039794921875;
        _454 = (fract((_435 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_427 < 0.0)
        {
            float _450 = ((-0.0) - _431) / _427;
            frontier_phi_5_4_ladder = _450;
            frontier_phi_5_4_ladder_1 = (fract(_450 * _422) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_5_4_ladder_2 = (fract((_450 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_5_4_ladder = _451;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = 0.0;
        }
        _449 = frontier_phi_5_4_ladder;
        _452 = frontier_phi_5_4_ladder_1;
        _454 = frontier_phi_5_4_ladder_2;
    }
    float _480;
    float _482;
    float _484;
    if (_428 > 0.0)
    {
        float _467 = (1.0 - _432) / _428;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_467 < _449)
        {
            frontier_phi_10_7_ladder = (fract(_467 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_467 * _427) + _431) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _467;
        }
        else
        {
            frontier_phi_10_7_ladder = _454;
            frontier_phi_10_7_ladder_1 = _452;
            frontier_phi_10_7_ladder_2 = _449;
        }
        _480 = frontier_phi_10_7_ladder_2;
        _482 = frontier_phi_10_7_ladder_1;
        _484 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_428 < 0.0)
        {
            float _481 = ((-0.0) - _432) / _428;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_481 < _449)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_481 * _422) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_481 * _427) + _431) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _481;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _454;
                frontier_phi_10_8_ladder_11_ladder_1 = _452;
                frontier_phi_10_8_ladder_11_ladder_2 = _449;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _454;
            frontier_phi_10_8_ladder_1 = _452;
            frontier_phi_10_8_ladder_2 = _449;
        }
        _480 = frontier_phi_10_8_ladder_2;
        _482 = frontier_phi_10_8_ladder_1;
        _484 = frontier_phi_10_8_ladder;
    }
    float _488 = (_422 > 0.0) ? (cbMtdParam._m0[13u].w / _422) : 5000.0;
    float _501;
    float _502;
    if (_488 < _480)
    {
        _501 = ((_431 + cbMtdParam._m0[14u].x) + (_488 * _427)) * 0.16666667163372039794921875;
        _502 = (((_488 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _501 = _482;
        _502 = _484;
    }
    vec4 _504 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_501, _502));
    float _511 = fma(_343, _214, fma(_336, _207, _334 * _193));
    float _514 = fma(_343, _215, fma(_336, _208, _334 * _194));
    float _517 = fma(_343, _216, fma(_336, _209, _334 * _195));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3219 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _525 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3241 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3252 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _548 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _549 = _271 * _548;
    float _550 = _272 * _548;
    float _551 = _273 * _548;
    vec4 _556 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _558 = _556.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _721 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _727 = (cbMatDynParam._m0[5u].x * _721) + cbMatDynParam._m0[5u].y;
        float _3263 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _732 = (cbMatDynParam._m0[5u].z * _721) + cbMatDynParam._m0[5u].w;
        float _3274 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) - _728)) + _728) < ((_558 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _597 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _600 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _603 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _616 = uint(roundEven(NORMAL.w)) * 13u;
    uint _617 = _616 + 9u;
    uint _618 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_618].z;
    float _3285 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _641 = _638.x * TEXCOORD.z;
    float _642 = dot(vec3(_522, _523, _524), vec3(_549, _550, _551));
    float _645 = _642 * 2.0;
    float _649 = (_645 * _522) - _549;
    float _650 = (_645 * _523) - _550;
    float _651 = (_645 * _524) - _551;
    float _655 = abs(dot(vec3(_549, _550, _551), vec3(_522, _523, _524)));
    float _3318 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _657 = sqrt(_525);
    float _670 = exp2((_657 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_657 * 3.0));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_710, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _702));
        float _770 = fma(_710, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _702));
        float _774 = fma(_710, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _702));
        float _798 = _702 + _522;
        float _799 = _706 + _523;
        float _800 = _710 + _524;
        float _810 = fma(_800, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798)) - _766;
        float _811 = fma(_800, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798)) - _770;
        float _812 = fma(_800, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798)) - _774;
        float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
        float _829 = ((_816 * _810) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_816 * _811) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_816 * _812) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _868 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_834.x + (-0.5));
        float _870 = _868 * (_834.y + (-0.5));
        float _871 = _868 * (_834.z + (-0.5));
        float _878 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_841.x + (-0.5));
        float _880 = _878 * (_841.y + (-0.5));
        float _881 = _878 * (_841.z + (-0.5));
        float _888 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_848.x + (-0.5));
        float _890 = _888 * (_848.y + (-0.5));
        float _891 = _888 * (_848.z + (-0.5));
        float _898 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_855.x + (-0.5));
        float _900 = _898 * (_855.y + (-0.5));
        float _901 = _898 * (_855.z + (-0.5));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = _869 * 0.5;
        float _906 = _879 * 0.5;
        float _907 = _889 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _922 = (dot(vec3(_522, _523, _524), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _932 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3366 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_934 + 1.0))) + _939) * _902;
        float _949 = _870 * 0.5;
        float _950 = _880 * 0.5;
        float _951 = _890 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_522, _523, _524), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3399 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_976 + 1.0))) + _981) * _903;
        float _991 = _871 * 0.5;
        float _992 = _881 * 0.5;
        float _993 = _891 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_522, _523, _524), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3432 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1018 + 1.0))) + _1023) * _904;
        _1040 = _871;
        _1041 = _870;
        _1042 = _869;
        _1043 = _881;
        _1044 = _880;
        _1045 = _879;
        _1046 = _891;
        _1047 = _890;
        _1048 = _889;
        _1049 = _904;
        _1050 = _903;
        _1051 = _902;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
    }
    else
    {
        _1040 = _451;
        _1041 = _451;
        _1042 = _451;
        _1043 = _451;
        _1044 = _451;
        _1045 = _451;
        _1046 = _451;
        _1047 = _451;
        _1048 = _451;
        _1049 = _451;
        _1050 = _451;
        _1051 = _451;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_710, cbModelParam._m0[30u].z, fma(_706, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _702));
        float _1087 = fma(_710, cbModelParam._m0[31u].z, fma(_706, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _702));
        float _1091 = fma(_710, cbModelParam._m0[32u].z, fma(_706, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _702));
        float _1114 = _702 + _522;
        float _1115 = _706 + _523;
        float _1116 = _710 + _524;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_522, _523, _524), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3495 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_522, _523, _524), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3528 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_522, _523, _524), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3561 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _451;
        _1353 = _451;
        _1354 = _451;
        _1355 = _451;
        _1356 = _451;
        _1357 = _451;
        _1358 = _451;
        _1359 = _451;
        _1360 = _451;
        _1361 = _451;
        _1362 = _451;
        _1363 = _451;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1052)) + _1052;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1053)) + _1053;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _649 * 0.5;
    float _1421 = _650 * 0.5;
    float _1422 = _651 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1569;
    float _1571;
    float _1573;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1536 = fma(_710, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702)) + cbModelParam._m0[13u].w;
        float _1540 = fma(_710, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702)) + cbModelParam._m0[14u].w;
        float _1544 = fma(_710, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702)) + cbModelParam._m0[15u].w;
        float _1547 = fma(_651, cbModelParam._m0[13u].z, fma(_650, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _649));
        float _1550 = fma(_651, cbModelParam._m0[14u].z, fma(_650, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _649));
        float _1553 = fma(_651, cbModelParam._m0[15u].z, fma(_650, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _649));
        float _1581;
        if (_1547 > 0.0)
        {
            _1581 = abs((1.0 - _1536) / _1547);
        }
        else
        {
            float frontier_phi_31_29_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_31_29_ladder = abs((_1536 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_31_29_ladder = 5000.0;
            }
            _1581 = frontier_phi_31_29_ladder;
        }
        float _1931;
        if (_1550 > 0.0)
        {
            _1931 = abs((1.0 - _1540) / _1550);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1540 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1931 = frontier_phi_40_36_ladder;
        }
        float _2260;
        if (_1553 > 0.0)
        {
            _2260 = abs((1.0 - _1544) / _1553);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1544 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2260 = frontier_phi_54_47_ladder;
        }
        float _2262 = isnan(_1931) ? _1581 : (isnan(_1581) ? _1931 : min(_1581, _1931));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1547) + _1536;
        float _2268 = (_2263 * _1550) + _1540;
        float _2269 = (_2263 * _1553) + _1544;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_30_54_ladder;
        float frontier_phi_30_54_ladder_1;
        float frontier_phi_30_54_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_30_54_ladder = 0.0;
            frontier_phi_30_54_ladder_1 = 0.0;
            frontier_phi_30_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_30_54_ladder = _2411.z * cbModelParam._m0[1u].y;
            frontier_phi_30_54_ladder_1 = _2411.x * cbModelParam._m0[1u].y;
            frontier_phi_30_54_ladder_2 = _2411.y * cbModelParam._m0[1u].y;
        }
        _1569 = frontier_phi_30_54_ladder_1;
        _1571 = frontier_phi_30_54_ladder_2;
        _1573 = frontier_phi_30_54_ladder;
    }
    else
    {
        vec4 _1557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_649, _650, _651), _1489);
        _1569 = _1557.x * cbModelParam._m0[1u].y;
        _1571 = _1557.y * cbModelParam._m0[1u].y;
        _1573 = _1557.z * cbModelParam._m0[1u].y;
    }
    float _1577 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1577 : min(cbModelParam._m0[25u].w, _1577));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_710, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_710, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_710, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_651, cbModelParam._m0[21u].z, fma(_650, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _649));
        float _1648 = fma(_651, cbModelParam._m0[22u].z, fma(_650, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _649));
        float _1651 = fma(_651, cbModelParam._m0[23u].z, fma(_650, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _649));
        float _1936;
        if (_1645 > 0.0)
        {
            _1936 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_42_38_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_42_38_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_42_38_ladder = 5000.0;
            }
            _1936 = frontier_phi_42_38_ladder;
        }
        float _2286;
        if (_1648 > 0.0)
        {
            _2286 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_56_49_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_56_49_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_56_49_ladder = 5000.0;
            }
            _2286 = frontier_phi_56_49_ladder;
        }
        float _2476;
        if (_1651 > 0.0)
        {
            _2476 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_74_67_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_74_67_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_74_67_ladder = 5000.0;
            }
            _2476 = frontier_phi_74_67_ladder;
        }
        float _2478 = isnan(_2286) ? _1936 : (isnan(_1936) ? _2286 : min(_1936, _2286));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1645) + _1634;
        float _2484 = (_2479 * _1648) + _1638;
        float _2485 = (_2479 * _1651) + _1642;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_39_74_ladder;
        float frontier_phi_39_74_ladder_1;
        float frontier_phi_39_74_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_39_74_ladder = 0.0;
            frontier_phi_39_74_ladder_1 = 0.0;
            frontier_phi_39_74_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1578);
            frontier_phi_39_74_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_39_74_ladder_1 = _2727.x * cbModelParam._m0[1u].z;
            frontier_phi_39_74_ladder_2 = _2727.y * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_39_74_ladder_1;
        _1672 = frontier_phi_39_74_ladder_2;
        _1674 = frontier_phi_39_74_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_649, _650, _651), _1578);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _670) * ((_657 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_670 * _657)) * _641;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1569)) + _1569);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1571)) + _1571);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_616 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1716 = _641 + (-1.0);
    float _1719 = (cbLight._m0[_1711].x * _1716) + 1.0;
    float _1720 = (cbLight._m0[_1711].y * _1716) + 1.0;
    uint _1721 = _1710 + 5u;
    float _1727 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1731 = _1710 + 4u;
    float _1738 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1742 = _1710 | 1u;
    float _1753 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_522, _523, _524));
    float _1756 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_522, _523, _524));
    float _3697 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _3708 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1761 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1763 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1770 = ((cbLight._m0[_1721].x * _1727) * _1763) + ((cbLight._m0[_1731].x * _1738) * _1761);
    float _1771 = ((_1727 * cbLight._m0[_1721].y) * _1763) + ((_1738 * cbLight._m0[_1731].y) * _1761);
    float _1772 = ((_1727 * cbLight._m0[_1721].z) * _1763) + ((_1738 * cbLight._m0[_1731].z) * _1761);
    uint _1774 = _1710 + 8u;
    float _1787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _525) * 0.949999988079071044921875);
    float _1788 = _1787 * _1787;
    float _1789 = cbLight._m0[_1710].x + _549;
    float _1790 = cbLight._m0[_1710].y + _550;
    float _1791 = cbLight._m0[_1710].z + _551;
    float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
    float _1796 = _1795 * _1789;
    float _1797 = _1795 * _1790;
    float _1798 = _1795 * _1791;
    float _1799 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1710].xyz));
    float _3719 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _1803 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1804 = dot(vec3(_522, _523, _524), vec3(_1796, _1797, _1798));
    float _3741 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1796, _1797, _1798));
    float _3752 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1812 = _1788 * _1788;
    float _1816 = ((_1807 * _1807) * (_1812 + (-1.0))) + 1.0;
    float _1827 = (exp2(log2(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1828 = 1.0 - _1788;
    float _1839 = (0.5 / (((_1803 * ((_1802 * _1828) + _1788)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1828) + _1788) * _1802))) * _1802;
    float _3763 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1812 / ((_1816 * _1816) * 3.141590118408203125));
    uint _1852 = _1710 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1742].w)) * _525) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1742].x + _549;
    float _1866 = cbLight._m0[_1742].y + _550;
    float _1867 = cbLight._m0[_1742].z + _551;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1742].xyz));
    float _3774 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1879 = dot(vec3(_522, _523, _524), vec3(_1872, _1873, _1874));
    float _3785 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1872, _1873, _1874));
    float _3796 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1864;
    float _1911 = (0.5 / (((_1803 * ((_1878 * _1901) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1803 * _1901) + _1864) * _1878))) * _1878;
    float _3807 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1923 = (((_1900 * cbLight._m0[_1852].x) * _1913) * _1727) + (((_1827 * cbLight._m0[_1774].x) * _1841) * _1738);
    float _1924 = (((_1900 * cbLight._m0[_1852].y) * _1913) * _1727) + (((_1827 * cbLight._m0[_1774].y) * _1841) * _1738);
    float _1925 = (((_1900 * cbLight._m0[_1852].z) * _1913) * _1727) + (((_1827 * cbLight._m0[_1774].z) * _1841) * _1738);
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    if (_1708.y == 0u)
    {
        float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1980;
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1980;
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1980;
        uvec4 _1995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1996 = _1995.x;
        uint _2007 = uint((float(_1995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _1996))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _1996)));
        float _2017 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2018 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        uint _2021 = uint(isnan(14.0) ? _2018 : (isnan(_2018) ? 14.0 : min(_2018, 14.0)));
        uvec4 _2026 = texelFetch(g_lightClusterGridBuffer, int(((_2021 << 2u) + (_2007 << 6u)) >> 2u));
        uint _2027 = _2026.x;
        uint _2028 = _1995.z;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        if (((((1u << ((_2028 >> 4u) & 15u)) + 4294967295u) & _2027) == 0u) || ((_2028 & 240u) == 0u))
        {
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
        }
        else
        {
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            uint _2329 = 0u;
            uint _2338;
            bool _2339;
            for (;;)
            {
                _2338 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2329 << 2u)) >> 2u)).x;
                _2339 = _2338 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2339)
                {
                    frontier_phi_69_pred = _2323;
                    frontier_phi_69_pred_1 = _2328;
                    frontier_phi_69_pred_2 = _2327;
                    frontier_phi_69_pred_3 = _2326;
                    frontier_phi_69_pred_4 = _2325;
                    frontier_phi_69_pred_5 = _2324;
                }
                else
                {
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    uint _2525;
                    _2519 = _2323;
                    _2520 = _2324;
                    _2521 = _2325;
                    _2522 = _2326;
                    _2523 = _2327;
                    _2524 = _2328;
                    _2525 = _2338;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    for (;;)
                    {
                        uint _2529 = uint(findLSB(_2525)) + (_2329 << 5u);
                        uint _2526 = (_2525 + 4294967295u) & _2525;
                        uint _2531 = _2529 * 48u;
                        vec4 _2545 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        uint _2551 = (_2529 * 48u) + 4u;
                        vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2551)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 3u)).x));
                        uint _2570 = (_2529 * 48u) + 8u;
                        vec3 _2581 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x));
                        float _2585 = _2545.x - _1981;
                        float _2586 = _2545.y - _1982;
                        float _2587 = _2545.z - _1983;
                        float _2588 = dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587));
                        float _2591 = inversesqrt(_2588);
                        float _2592 = _2591 * _2585;
                        float _2593 = _2591 * _2586;
                        float _2594 = _2591 * _2587;
                        float _2595 = dot(vec3(_597, _600, _603), vec3(_2592, _2593, _2594));
                        float _2600 = 1.0 - (_2588 * _2545.w);
                        float _3828 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                        float _2601 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                        float _2602 = sqrt(_2588) * _2564.w;
                        float _2605 = 1.39999997615814208984375 / (_2602 + 1.39999997615814208984375);
                        float _2606 = _2605 * _2605;
                        float _2609 = ((1.0 - _2606) * _2595) + _2606;
                        float _2612 = _2602 * _2602;
                        float _2616 = ((isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))) * _2601) / ((_2612 * 0.699999988079071044921875) + 1.0);
                        float _2620 = (-0.0) - _1981;
                        float _2621 = (-0.0) - _1982;
                        float _2622 = (-0.0) - _1983;
                        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
                        float _2627 = _2626 * _2620;
                        float _2628 = _2626 * _2621;
                        float _2629 = _2626 * _2622;
                        float _2637 = exp2(log2(1.0 / ((_2612 * 3.5) + 5.0)) * 0.25);
                        float _2638 = 1.0 - _657;
                        float _2645 = sqrt(1.0 - ((1.0 - (_2638 * _2638)) * (1.0 - (_2637 * _2637))));
                        float _2646 = _2645 * _2645;
                        float _2647 = _2646 * _2646;
                        float _2648 = _2627 + _2592;
                        float _2649 = _2628 + _2593;
                        float _2650 = _2629 + _2594;
                        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
                        float _2658 = dot(vec3(_597, _600, _603), vec3(_2627, _2628, _2629));
                        float _3844 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2661 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2662 = dot(vec3(_597, _600, _603), vec3(_2654 * _2648, _2654 * _2649, _2654 * _2650));
                        float _3855 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2665 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                        float _2669 = ((_2665 * _2665) * (_2647 + (-1.0))) + 1.0;
                        float _2670 = _2605 * _2646;
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2595) + _2671;
                        float _3866 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2676 = 1.0 - _2646;
                        float _2686 = (0.5 / (((_2675 * ((_2661 * _2676) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2675 * _2676) + _2646) * _2661))) * _2675;
                        float _3877 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2697 = (((_2647 * 3.1415927410125732421875) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) / ((_2669 * _2669) * ((_2612 * 2.1991131305694580078125) + 3.141590118408203125))) * _2601;
                        _2423 = (_2616 * _2564.x) + _2522;
                        _2424 = (_2616 * _2564.y) + _2523;
                        _2425 = (_2616 * _2564.z) + _2524;
                        _2420 = (_2697 * _2581.x) + _2519;
                        _2421 = (_2697 * _2581.y) + _2520;
                        _2422 = (_2697 * _2581.z) + _2521;
                        if (_2526 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2519 = _2420;
                            _2520 = _2421;
                            _2521 = _2422;
                            _2522 = _2423;
                            _2523 = _2424;
                            _2524 = _2425;
                            _2525 = _2526;
                        }
                    }
                    frontier_phi_69_pred = _2420;
                    frontier_phi_69_pred_1 = _2425;
                    frontier_phi_69_pred_2 = _2424;
                    frontier_phi_69_pred_3 = _2423;
                    frontier_phi_69_pred_4 = _2422;
                    frontier_phi_69_pred_5 = _2421;
                }
                _2140 = frontier_phi_69_pred;
                _2150 = frontier_phi_69_pred_1;
                _2148 = frontier_phi_69_pred_2;
                _2146 = frontier_phi_69_pred_3;
                _2144 = frontier_phi_69_pred_4;
                _2142 = frontier_phi_69_pred_5;
                uint _2330 = _2329 + 1u;
                if (_2330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2323 = _2140;
                    _2324 = _2142;
                    _2325 = _2144;
                    _2326 = _2146;
                    _2327 = _2148;
                    _2328 = _2150;
                    _2329 = _2330;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
        }
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.z;
        uint _2156 = (_2154 >> 8u) & 15u;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        if (((4294967295u << _2156) & _2027) == 0u)
        {
            _2291 = _2139;
            _2293 = _2141;
            _2295 = _2143;
            _2297 = _2145;
            _2299 = _2147;
            _2301 = _2149;
        }
        else
        {
            float _2316 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float _2317 = _2316 * _1981;
            float _2318 = _2316 * _1982;
            float _2319 = _2316 * _1983;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2156 < ((_2154 >> 12u) & 15u))
            {
                float _2292;
                float _2294;
                float _2296;
                float _2298;
                float _2300;
                float _2302;
                float _2502 = _2139;
                float _2503 = _2141;
                float _2504 = _2143;
                float _2505 = _2145;
                float _2506 = _2147;
                float _2507 = _2149;
                uint _2508 = _2156;
                uint _2517;
                bool _2518;
                for (;;)
                {
                    _2517 = texelFetch(g_lightClassification, int((((_2021 << 5u) + (_2007 << 9u)) + (_2508 << 2u)) >> 2u)).x;
                    _2518 = _2517 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2518)
                    {
                        frontier_phi_83_pred = _2507;
                        frontier_phi_83_pred_1 = _2505;
                        frontier_phi_83_pred_2 = _2504;
                        frontier_phi_83_pred_3 = _2503;
                        frontier_phi_83_pred_4 = _2502;
                        frontier_phi_83_pred_5 = _2506;
                    }
                    else
                    {
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2736;
                        float _2737;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _2745 = _2502;
                        float _2746 = _2503;
                        float _2747 = _2504;
                        float _2748 = _2505;
                        float _2749 = _2506;
                        float _2750 = _2507;
                        uint _2751 = _2517;
                        uint _2752;
                        vec4 _2777;
                        float _2778;
                        vec4 _2793;
                        vec3 _2805;
                        vec4 _2820;
                        vec4 _2836;
                        float _2883;
                        bool _2884;
                        for (;;)
                        {
                            uint _2762 = ((_2508 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2751));
                            _2752 = (_2751 + 4294967295u) & _2751;
                            uint _2764 = _2762 * 40u;
                            _2777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 3u)).x));
                            _2778 = _2777.w;
                            uint _2780 = (_2762 * 40u) + 4u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            uint _2795 = (_2762 * 40u) + 8u;
                            _2805 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x));
                            uint _2807 = (_2762 * 40u) + 16u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2823 = (_2762 * 40u) + 20u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2839 = (_2762 * 40u) + 24u;
                            vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2858 = (_2762 * 40u) + 28u;
                            vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            _2883 = fma(_1983, _2871.z, fma(_1982, _2871.y, _2871.x * _1981)) + _2871.w;
                            _2884 = !((fma(_1983, _2852.z, fma(_1982, _2852.y, _2852.x * _1981)) + _2852.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2884)
                            {
                                float _2911 = _2777.x - _1981;
                                float _2912 = _2777.y - _1982;
                                float _2913 = _2777.z - _1983;
                                float _2914 = dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913));
                                float _2917 = inversesqrt(_2914);
                                float _2918 = _2917 * _2911;
                                float _2919 = _2917 * _2912;
                                float _2920 = _2917 * _2913;
                                float _2924 = 1.0 - (_2914 / (_2778 * _2778));
                                float _3888 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                                float _2929 = sqrt(_2914) * _2793.w;
                                float _2931 = 1.39999997615814208984375 / (_2929 + 1.39999997615814208984375);
                                float _2932 = _2931 * _2931;
                                float _2935 = ((1.0 - _2932) * dot(vec3(_2918, _2919, _2920), vec3(_597, _600, _603))) + _2932;
                                float _2938 = _2929 * _2929;
                                float _2942 = (fma(_1983, _2820.z, fma(_1982, _2820.y, _2820.x * _1981)) + _2820.w) / _2883;
                                float _2943 = (fma(_1983, _2836.z, fma(_1982, _2836.y, _2836.x * _1981)) + _2836.w) / _2883;
                                float _2947 = 1.0 - dot(vec2(_2942, _2943), vec2(_2942, _2943));
                                float _3904 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2948 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2949 = _2948 * (((isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))) * _2925) / ((_2938 * 0.699999988079071044921875) + 1.0));
                                float _2961 = exp2(log2(1.0 / ((_2938 * 3.5) + 5.0)) * 0.25);
                                float _2962 = 1.0 - _657;
                                float _2969 = sqrt(1.0 - ((1.0 - (_2962 * _2962)) * (1.0 - (_2961 * _2961))));
                                float _2970 = _2969 * _2969;
                                float _2971 = _2970 * _2970;
                                float _2972 = _2918 - _2317;
                                float _2973 = _2919 - _2318;
                                float _2974 = _2920 - _2319;
                                float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                                float _2982 = dot(vec3(_597, _600, _603), vec3((-0.0) - _2317, (-0.0) - _2318, (-0.0) - _2319));
                                float _3915 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2985 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                                float _2986 = dot(vec3(_597, _600, _603), vec3(_2978 * _2972, _2978 * _2973, _2978 * _2974));
                                float _3926 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2989 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2993 = ((_2989 * _2989) * (_2971 + (-1.0))) + 1.0;
                                float _2994 = _2931 * _2970;
                                float _2995 = _2994 * _2994;
                                float _3001 = ((1.0 - _2995) * dot(vec3(_597, _600, _603), vec3(_2918, _2919, _2920))) + _2995;
                                float _3937 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _3003 = 1.0 - _2970;
                                float _3013 = (0.5 / (((_3002 * ((_2985 * _3003) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2970) * _2985))) * _3002;
                                float _3948 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3023 = (_2948 * _2925) * (((_2971 * 3.1415927410125732421875) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) / ((_2993 * _2993) * ((_2938 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3023 * _2805.z;
                                frontier_phi_89_pred_1 = _3023 * _2805.y;
                                frontier_phi_89_pred_2 = _3023 * _2805.x;
                                frontier_phi_89_pred_3 = _2949 * _2793.z;
                                frontier_phi_89_pred_4 = _2949 * _2793.y;
                                frontier_phi_89_pred_5 = _2949 * _2793.x;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3029 = frontier_phi_89_pred;
                            _3028 = frontier_phi_89_pred_1;
                            _3027 = frontier_phi_89_pred_2;
                            _3032 = frontier_phi_89_pred_3;
                            _3031 = frontier_phi_89_pred_4;
                            _3030 = frontier_phi_89_pred_5;
                            _2735 = _3030 + _2748;
                            _2736 = _3031 + _2749;
                            _2737 = _3032 + _2750;
                            _2732 = _3027 + _2745;
                            _2733 = _3028 + _2746;
                            _2734 = _3029 + _2747;
                            if (_2752 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2745 = _2732;
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2735;
                                _2749 = _2736;
                                _2750 = _2737;
                                _2751 = _2752;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2737;
                        frontier_phi_83_pred_1 = _2735;
                        frontier_phi_83_pred_2 = _2734;
                        frontier_phi_83_pred_3 = _2733;
                        frontier_phi_83_pred_4 = _2732;
                        frontier_phi_83_pred_5 = _2736;
                    }
                    _2302 = frontier_phi_83_pred;
                    _2298 = frontier_phi_83_pred_1;
                    _2296 = frontier_phi_83_pred_2;
                    _2294 = frontier_phi_83_pred_3;
                    _2292 = frontier_phi_83_pred_4;
                    _2300 = frontier_phi_83_pred_5;
                    uint _2509 = _2508 + 1u;
                    if (_2509 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2502 = _2292;
                        _2503 = _2294;
                        _2504 = _2296;
                        _2505 = _2298;
                        _2506 = _2300;
                        _2507 = _2302;
                        _2508 = _2509;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2298;
                frontier_phi_58_59_ladder_1 = _2302;
                frontier_phi_58_59_ladder_2 = _2300;
                frontier_phi_58_59_ladder_3 = _2294;
                frontier_phi_58_59_ladder_4 = _2292;
                frontier_phi_58_59_ladder_5 = _2296;
            }
            else
            {
                frontier_phi_58_59_ladder = _2145;
                frontier_phi_58_59_ladder_1 = _2149;
                frontier_phi_58_59_ladder_2 = _2147;
                frontier_phi_58_59_ladder_3 = _2141;
                frontier_phi_58_59_ladder_4 = _2139;
                frontier_phi_58_59_ladder_5 = _2143;
            }
            _2291 = frontier_phi_58_59_ladder_4;
            _2293 = frontier_phi_58_59_ladder_3;
            _2295 = frontier_phi_58_59_ladder_5;
            _2297 = frontier_phi_58_59_ladder;
            _2299 = frontier_phi_58_59_ladder_2;
            _2301 = frontier_phi_58_59_ladder_1;
        }
        float _2306 = isnan(1.0) ? _641 : (isnan(_641) ? 1.0 : min(_641, 1.0));
        _2039 = (_2306 * _2297) + _1770;
        _2041 = (_2306 * _2299) + _1771;
        _2043 = (_2306 * _2301) + _1772;
        _2045 = ((_2291 * 0.039999999105930328369140625) * _2306) + _1923;
        _2047 = ((_2293 * 0.039999999105930328369140625) * _2306) + _1924;
        _2049 = ((_2295 * 0.039999999105930328369140625) * _2306) + _1925;
    }
    else
    {
        _2039 = _1770;
        _2041 = _1771;
        _2043 = _1772;
        _2045 = _1923;
        _2047 = _1924;
        _2049 = _1925;
    }
    uint _2055 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _3964 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3975 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3986 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _2086 = (((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2039 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _641))) + ((_2045 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _297) * _504.x) * cbInstanceData._m0[_2055].x);
    float _2088 = ((((cbMtdParam._m0[12u].y * _297) * _504.y) * cbInstanceData._m0[_2055].y) + ((_2047 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2041 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _641)));
    float _2090 = ((((cbMtdParam._m0[12u].z * _297) * _504.z) * cbInstanceData._m0[_2055].z) + ((_2049 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1478)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2043 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _641)));
    float _2091 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2092 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    uint _2094 = _616 + 6u;
    float _2102 = _576 / cbSceneParam._m0[86u].x;
    float _2103 = _577 / cbSceneParam._m0[86u].y;
    vec4 _2117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2119 = _2117.x;
    float _2120 = _2117.y;
    float _2121 = _2117.z;
    float _2122 = _2117.w;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2164 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2165 = _2164 / _544;
        float _2176 = _2165 * _271;
        float _2177 = _272 * _2165;
        float _2178 = (-0.0) - _2177;
        float _2179 = _2165 * _273;
        float _2181 = (cbSceneParam._m0[77u].w * _2178) / _2164;
        float _2182 = _2181 + cbSceneParam._m0[79u].w;
        float _2183 = cbSceneParam._m0[79u].w - _2177;
        float _2189 = sqrt(((_2176 * _2176) + (_2177 * _2177)) + (_2179 * _2179));
        float _2192 = (1.0 - (cbSceneParam._m0[77u].w / _2164)) * _2189;
        float _2198 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2200 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2433;
        if (abs((_2178 - _2181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2433 = ((((_2182 > 0.0) ? exp2(_2198 * _2182) : (2.0 - exp2(_2200 * _2182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2192;
        }
        else
        {
            float _2352 = 1.0 / cbSceneParam._m0[80u].x;
            float _2353 = isnan(_2183) ? _2182 : (isnan(_2182) ? _2183 : max(_2182, _2183));
            float _2354 = isnan(_2183) ? _2182 : (isnan(_2182) ? _2183 : min(_2182, _2183));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            float _2364 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : min(_2354, 0.0));
            _2433 = ((abs(_2189 / _2178) * cbSceneParam._m0[80u].y) * ((((_2363 - _2364) * 2.0) - ((exp2(_2198 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0)))) - exp2(_2198 * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))))) * _2352)) - ((exp2(_2200 * _2363) - exp2(_2200 * _2364)) * _2352))) + (_2192 * cbSceneParam._m0[80u].z);
        }
        vec4 _2435 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2102, _2103, 1.0), 0.0);
        float _2444 = exp2((_2433 * (-1.44269502162933349609375)) * (1.0 - _2435.w));
        float _2445 = log2(_2444);
        float _2461 = log2(_2122);
        _2202 = (exp2(_2461 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].x)) * _2435.x) / cbSceneParam._m0[78u].x)) + _2119;
        _2204 = (exp2(_2461 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].y)) * _2435.y) / cbSceneParam._m0[78u].y)) + _2120;
        _2206 = (exp2(_2461 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].z)) * _2435.z) / cbSceneParam._m0[78u].z)) + _2121;
        _2208 = _2444 * _2122;
    }
    else
    {
        _2202 = _2119;
        _2204 = _2120;
        _2206 = _2121;
        _2208 = _2122;
    }
    bool _2471;
    vec4 _2218;
    vec4 _2240;
    float _2242;
    float _2246;
    float _2247;
    float _2248;
    float _2249;
    bool _2259;
    for (;;)
    {
        _2218 = cbMatDynParam._m0[0u];
        float _2220 = roundEven(_2218.y);
        bool _2221 = _2220 == 3.0;
        float _2222 = log2(_2208);
        float _2229 = exp2(_2222 * cbSceneParam._m0[78u].x) * _2091;
        float _2230 = exp2(_2222 * cbSceneParam._m0[78u].y) * _2092;
        float _2231 = exp2(_2222 * cbSceneParam._m0[78u].z) * _2093;
        float _2238 = _558 + (-0.5);
        _2240 = cbMtdParam._m0[1u];
        _2242 = _2240.y * _2238;
        float _2245 = (_2220 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2246 = _2245 * (_2221 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2202)));
        _2247 = _2245 * (_2221 ? _2230 : (_2230 + (cbSceneParam._m0[72u].w * _2204)));
        _2248 = _2245 * (_2221 ? _2231 : (_2231 + (cbSceneParam._m0[72u].w * _2206)));
        _2249 = _2238 * 0.999000012874603271484375;
        _2259 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2259)
        {
            if ((cbInstanceData._m0[_616 + 7u].x + _2249) < 0.5)
            {
                _2471 = true;
                break;
            }
        }
        uint _2387 = _617 + uint(_2218.w);
        if ((cbInstanceData._m0[_2387].w < 1.0) && ((cbInstanceData._m0[_2387].w + _2249) < 0.5))
        {
            _2471 = true;
            break;
        }
        if ((_2242 + 1.0) < _2240.x)
        {
            _2471 = true;
            break;
        }
        _2471 = false;
        break;
    }
    float _2702;
    if (_2471)
    {
        discard_state = true;
        _2702 = 0.0;
    }
    else
    {
        _2702 = cbInstanceData._m0[_2094].w;
    }
    SV_Target.x = _2246;
    SV_Target.y = _2247;
    SV_Target.z = _2248;
    SV_Target.w = _2702;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2094].w;
    discard_exit();
}


