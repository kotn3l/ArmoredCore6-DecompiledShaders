#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _193 = _192 * _185;
    float _194 = _192 * _186;
    float _195 = _192 * _187;
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _310 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _297) + cbMtdParam._m0[11u].x) * _291.x;
    float _312 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _297) + cbMtdParam._m0[11u].y) * _291.y;
    float _314 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _297) + cbMtdParam._m0[11u].z) * _291.z;
    vec4 _326 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = _326.z;
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3384 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))));
    vec4 _379 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _392 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _399 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _415 = (-0.0) - dot(vec3(_271, _272, _273), vec3(_392 * _193, _392 * _194, _392 * _195));
    float _416 = (-0.0) - dot(vec3(_271, _272, _273), vec3(_399 * _207, _399 * _208, _399 * _209));
    float _417 = (-0.0) - dot(vec3(_271, _272, _273), vec3((-0.0) - _214, (-0.0) - _215, (-0.0) - _216));
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _421 * _417;
    float _427 = ((cbMtdParam._m0[15u].y * _415) * _421) + (((_379.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _428 = ((cbMtdParam._m0[15u].z * _416) * _421) + (((_379.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _431 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _432 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _449;
    float _452;
    float _454;
    if (_427 > 0.0)
    {
        float _435 = (1.0 - _431) / _427;
        _449 = _435;
        _452 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_435 * _422)) * 0.16666667163372039794921875;
        _454 = (fract((_435 * _428) + _432) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_427 < 0.0)
        {
            float _450 = ((-0.0) - _431) / _427;
            frontier_phi_5_4_ladder = (fract((_450 * _428) + _432) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_5_4_ladder_1 = (fract(_450 * _422) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_5_4_ladder_2 = _450;
        }
        else
        {
            frontier_phi_5_4_ladder = 0.0;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = _451;
        }
        _449 = frontier_phi_5_4_ladder_2;
        _452 = frontier_phi_5_4_ladder_1;
        _454 = frontier_phi_5_4_ladder;
    }
    float _480;
    float _482;
    float _484;
    if (_428 > 0.0)
    {
        float _467 = (1.0 - _432) / _428;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_467 < _449)
        {
            frontier_phi_10_7_ladder = (fract(_467 * _422) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_467 * _427) + _431) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _467;
        }
        else
        {
            frontier_phi_10_7_ladder = _454;
            frontier_phi_10_7_ladder_1 = _452;
            frontier_phi_10_7_ladder_2 = _449;
        }
        _480 = frontier_phi_10_7_ladder_2;
        _482 = frontier_phi_10_7_ladder_1;
        _484 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_428 < 0.0)
        {
            float _481 = ((-0.0) - _432) / _428;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_481 < _449)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_481 * _422) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_481 * _427) + _431) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _481;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _454;
                frontier_phi_10_8_ladder_11_ladder_1 = _452;
                frontier_phi_10_8_ladder_11_ladder_2 = _449;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _454;
            frontier_phi_10_8_ladder_1 = _452;
            frontier_phi_10_8_ladder_2 = _449;
        }
        _480 = frontier_phi_10_8_ladder_2;
        _482 = frontier_phi_10_8_ladder_1;
        _484 = frontier_phi_10_8_ladder;
    }
    float _488 = (_422 > 0.0) ? (cbMtdParam._m0[13u].w / _422) : 5000.0;
    float _501;
    float _502;
    if (_488 < _480)
    {
        _501 = ((_431 + cbMtdParam._m0[14u].x) + (_488 * _427)) * 0.16666667163372039794921875;
        _502 = (((_488 * _428) + _432) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _501 = _482;
        _502 = _484;
    }
    vec4 _504 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_501, _502));
    float _511 = fma(_343, _214, fma(_336, _207, _334 * _193));
    float _514 = fma(_343, _215, fma(_336, _208, _334 * _194));
    float _517 = fma(_343, _216, fma(_336, _209, _334 * _195));
    float _521 = inversesqrt(dot(vec3(_511, _514, _517), vec3(_511, _514, _517)));
    float _522 = _521 * _511;
    float _523 = _521 * _514;
    float _524 = _521 * _517;
    float _3395 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _525 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3417 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3428 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _548 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _549 = _271 * _548;
    float _550 = _272 * _548;
    float _551 = _273 * _548;
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _579 = fma(_524, cbSceneParam._m0[5u].z, fma(_523, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _522));
    float _582 = fma(_524, cbSceneParam._m0[6u].z, fma(_523, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _522));
    float _585 = fma(_524, cbSceneParam._m0[7u].z, fma(_523, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _522));
    uint _598 = uint(roundEven(NORMAL.w)) * 13u;
    uint _599 = _598 + 9u;
    uint _600 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _606 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_600].x;
    float _607 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_600].y;
    float _608 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_600].z;
    float _3439 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    vec4 _620 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _623 = _620.x * TEXCOORD.z;
    float _624 = dot(vec3(_522, _523, _524), vec3(_549, _550, _551));
    float _627 = _624 * 2.0;
    float _631 = (_627 * _522) - _549;
    float _632 = (_627 * _523) - _550;
    float _633 = (_627 * _524) - _551;
    float _637 = abs(dot(vec3(_549, _550, _551), vec3(_522, _523, _524)));
    float _3472 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _639 = sqrt(_525);
    float _652 = exp2((_639 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_639 * 3.0));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_692, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684));
        float _729 = fma(_692, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684));
        float _733 = fma(_692, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684));
        float _757 = _684 + _522;
        float _758 = _688 + _523;
        float _759 = _692 + _524;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _725;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _729;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _733;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_522, _523, _524), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3520 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_522, _523, _524), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3553 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_522, _523, _524), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3586 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1000 = _829;
        _1001 = _828;
        _1002 = _840;
        _1003 = _839;
        _1004 = _838;
        _1005 = _850;
        _1006 = _849;
        _1007 = _848;
        _1008 = _863;
        _1009 = _862;
        _1010 = _861;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _451;
        _1000 = _451;
        _1001 = _451;
        _1002 = _451;
        _1003 = _451;
        _1004 = _451;
        _1005 = _451;
        _1006 = _451;
        _1007 = _451;
        _1008 = _451;
        _1009 = _451;
        _1010 = _451;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_692, cbModelParam._m0[30u].z, fma(_688, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _684));
        float _1043 = fma(_692, cbModelParam._m0[31u].z, fma(_688, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _684));
        float _1047 = fma(_692, cbModelParam._m0[32u].z, fma(_688, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _684));
        float _1070 = _684 + _522;
        float _1071 = _688 + _523;
        float _1072 = _692 + _524;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_522, _523, _524), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3649 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_522, _523, _524), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3682 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_522, _523, _524), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3715 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _451;
        _1309 = _451;
        _1310 = _451;
        _1311 = _451;
        _1312 = _451;
        _1313 = _451;
        _1314 = _451;
        _1315 = _451;
        _1316 = _451;
        _1317 = _451;
        _1318 = _451;
        _1319 = _451;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1013)) + _1013;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _631 * 0.5;
    float _1377 = _632 * 0.5;
    float _1378 = _633 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _525);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_692, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_692, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_692, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_633, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631));
        float _1506 = fma(_633, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631));
        float _1509 = fma(_633, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1537 = frontier_phi_28_26_ladder;
        }
        float _1709;
        if (_1506 > 0.0)
        {
            _1709 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1709 = frontier_phi_37_33_ladder;
        }
        float _2154;
        if (_1509 > 0.0)
        {
            _2154 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2154 = frontier_phi_49_44_ladder;
        }
        float _2156 = isnan(_1709) ? _1537 : (isnan(_1537) ? _1709 : min(_1537, _1709));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1503) + _1492;
        float _2162 = (_2157 * _1506) + _1496;
        float _2163 = (_2157 * _1509) + _1500;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2164;
        float _2168 = _2164 + 1.0;
        float frontier_phi_27_49_ladder;
        float frontier_phi_27_49_ladder_1;
        float frontier_phi_27_49_ladder_2;
        if ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 > _2168) || ((_2162 < _2166) || ((_2161 < _2166) || (_2161 > _2168))))))
        {
            frontier_phi_27_49_ladder = 0.0;
            frontier_phi_27_49_ladder_1 = 0.0;
            frontier_phi_27_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2163, cbModelParam._m0[9u].z, fma(_2162, cbModelParam._m0[9u].y, _2161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2163, cbModelParam._m0[10u].z, fma(_2162, cbModelParam._m0[10u].y, _2161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2163, cbModelParam._m0[11u].z, fma(_2162, cbModelParam._m0[11u].y, _2161 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_27_49_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_27_49_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_27_49_ladder_2;
        _1527 = frontier_phi_27_49_ladder_1;
        _1529 = frontier_phi_27_49_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_631, _632, _633), _1445);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _525);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_692, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_692, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_692, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_633, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631));
        float _1604 = fma(_633, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631));
        float _1607 = fma(_633, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631));
        float _1714;
        if (_1601 > 0.0)
        {
            _1714 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1714 = frontier_phi_39_35_ladder;
        }
        float _2181;
        if (_1604 > 0.0)
        {
            _2181 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _2181 = frontier_phi_51_46_ladder;
        }
        float _2539;
        if (_1607 > 0.0)
        {
            _2539 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_63_58_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_63_58_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_63_58_ladder = 5000.0;
            }
            _2539 = frontier_phi_63_58_ladder;
        }
        float _2541 = isnan(_2181) ? _1714 : (isnan(_1714) ? _2181 : min(_1714, _2181));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1601) + _1590;
        float _2547 = (_2542 * _1604) + _1594;
        float _2548 = (_2542 * _1607) + _1598;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_36_63_ladder;
        float frontier_phi_36_63_ladder_1;
        float frontier_phi_36_63_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_36_63_ladder = 0.0;
            frontier_phi_36_63_ladder_1 = 0.0;
            frontier_phi_36_63_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_36_63_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_36_63_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_36_63_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_36_63_ladder_2;
        _1628 = frontier_phi_36_63_ladder_1;
        _1630 = frontier_phi_36_63_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_631, _632, _633), _1534);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _652) * ((_639 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_652 * _639)) * _623;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1525)) + _1525);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1527)) + _1527);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1529)) + _1529);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1701 = _1688 / _1700;
    float _1702 = _1692 / _1700;
    float _1703 = _1696 / _1700;
    float _1850;
    float _1851;
    float _1852;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1730 = ((uint(_1703 > cbSceneParam._m0[59u].y) + uint(_1703 > cbSceneParam._m0[59u].x)) + uint(_1703 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1731 = _1730 + 43u;
        uint _1739 = _1730 + 44u;
        uint _1747 = _1730 + 45u;
        uint _1755 = _1730 + 46u;
        float _1766 = fma(_1700, cbSceneParam._m0[_1731].w, fma(_1696, cbSceneParam._m0[_1731].z, fma(_1692, cbSceneParam._m0[_1731].y, _1688 * cbSceneParam._m0[_1731].x)));
        float _1770 = fma(_1700, cbSceneParam._m0[_1739].w, fma(_1696, cbSceneParam._m0[_1739].z, fma(_1692, cbSceneParam._m0[_1739].y, _1688 * cbSceneParam._m0[_1739].x)));
        float _1778 = fma(_1700, cbSceneParam._m0[_1755].w, fma(_1696, cbSceneParam._m0[_1755].z, fma(_1692, cbSceneParam._m0[_1755].y, _1688 * cbSceneParam._m0[_1755].x)));
        float _1783 = cbSceneParam._m0[33u].z * _1778;
        float _1785 = cbSceneParam._m0[33u].w * _1778;
        float _1788 = fma(_1700, cbSceneParam._m0[_1747].w, fma(_1696, cbSceneParam._m0[_1747].z, fma(_1692, cbSceneParam._m0[_1747].y, _1688 * cbSceneParam._m0[_1747].x))) / _1778;
        float _1836 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
        float _3841 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1843 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1783 + _1766) / _1778, (_1785 + _1770) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1766) / _1778, (_1770 - _1783) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1783) / _1778, (_1770 - _1785) / _1778), _1788), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 - _1785) / _1778, (_1783 + _1770) / _1778), _1788), 0.0)).x), vec4(0.25)));
        _1850 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
        _1851 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
        _1852 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1850 = 1.0;
        _1851 = 1.0;
        _1852 = 1.0;
    }
    float _1916;
    float _1918;
    float _1920;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1904 = fma(_1700, cbSceneParam._m0[63u].w, fma(_1696, cbSceneParam._m0[63u].z, fma(_1692, cbSceneParam._m0[63u].y, _1688 * cbSceneParam._m0[63u].x)));
        float _1905 = fma(_1700, cbSceneParam._m0[60u].w, fma(_1696, cbSceneParam._m0[60u].z, fma(_1692, cbSceneParam._m0[60u].y, _1688 * cbSceneParam._m0[60u].x))) / _1904;
        float _1906 = fma(_1700, cbSceneParam._m0[61u].w, fma(_1696, cbSceneParam._m0[61u].z, fma(_1692, cbSceneParam._m0[61u].y, _1688 * cbSceneParam._m0[61u].x))) / _1904;
        float frontier_phi_48_47_ladder;
        float frontier_phi_48_47_ladder_1;
        float frontier_phi_48_47_ladder_2;
        if ((((_1905 >= cbSceneParam._m0[64u].x) && (_1906 >= cbSceneParam._m0[64u].y)) && (_1905 <= cbSceneParam._m0[64u].z)) && (_1906 <= cbSceneParam._m0[64u].w))
        {
            float _2194 = fma(_1700, cbSceneParam._m0[62u].w, fma(_1696, cbSceneParam._m0[62u].z, fma(_1692, cbSceneParam._m0[62u].y, _1688 * cbSceneParam._m0[62u].x))) / _1904;
            float _2198 = isnan(cbSceneParam._m0[41u].w) ? _2194 : (isnan(_2194) ? cbSceneParam._m0[41u].w : max(_2194, cbSceneParam._m0[41u].w));
            float _2241 = (cbSceneParam._m0[33u].x - sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703))) * cbSceneParam._m0[33u].y;
            float _3857 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
            float _2248 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1905, cbSceneParam._m0[33u].w + _1906), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1905, _1906 - cbSceneParam._m0[33u].z), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].z, _1906 - cbSceneParam._m0[33u].w), _2198), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1905 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1906), _2198), 0.0)).x), vec4(0.25)));
            float _2252 = 1.0 - (_2248 * cbSceneParam._m0[34u].x);
            float _2253 = 1.0 - (_2248 * cbSceneParam._m0[34u].y);
            float _2254 = 1.0 - (_2248 * cbSceneParam._m0[34u].z);
            frontier_phi_48_47_ladder = isnan(_2252) ? _1850 : (isnan(_1850) ? _2252 : min(_1850, _2252));
            frontier_phi_48_47_ladder_1 = isnan(_2254) ? _1852 : (isnan(_1852) ? _2254 : min(_1852, _2254));
            frontier_phi_48_47_ladder_2 = isnan(_2253) ? _1851 : (isnan(_1851) ? _2253 : min(_1851, _2253));
        }
        else
        {
            frontier_phi_48_47_ladder = _1850;
            frontier_phi_48_47_ladder_1 = _1852;
            frontier_phi_48_47_ladder_2 = _1851;
        }
        _1916 = frontier_phi_48_47_ladder;
        _1918 = frontier_phi_48_47_ladder_2;
        _1920 = frontier_phi_48_47_ladder_1;
    }
    else
    {
        _1916 = _1850;
        _1918 = _1851;
        _1920 = _1852;
    }
    uvec4 _1925 = floatBitsToUint(cbInstanceData._m0[_598 + 5u]);
    uint _1927 = _1925.x * 14u;
    uint _1928 = _1927 + 13u;
    float _1933 = _623 + (-1.0);
    float _1936 = (cbLight._m0[_1928].x * _1933) + 1.0;
    float _1937 = (cbLight._m0[_1928].y * _1933) + 1.0;
    uint _1938 = _1927 + 5u;
    float _1944 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1948 = _1927 + 4u;
    float _1958 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1962 = _1927 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_522, _523, _524));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_522, _523, _524));
    float _3893 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _3904 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1938].x * _1944) * _1983) + (((cbLight._m0[_1948].x * _1916) * _1958) * _1981);
    float _1991 = ((_1944 * cbLight._m0[_1938].y) * _1983) + (((cbLight._m0[_1948].y * _1918) * _1958) * _1981);
    float _1992 = ((_1944 * cbLight._m0[_1938].z) * _1983) + (((cbLight._m0[_1948].z * _1920) * _1958) * _1981);
    uint _1994 = _1927 + 8u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _525) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1927].x + _549;
    float _2010 = cbLight._m0[_1927].y + _550;
    float _2011 = cbLight._m0[_1927].z + _551;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1927].xyz));
    float _3915 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2023 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _2024 = dot(vec3(_522, _523, _524), vec3(_2016, _2017, _2018));
    float _3937 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2016, _2017, _2018));
    float _3948 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2008 * _2008;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2008;
    float _2059 = (0.5 / (((_2023 * ((_2022 * _2048) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2048) + _2008) * _2022))) * _2022;
    float _3959 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    uint _2075 = _1927 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _525) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1962].x + _549;
    float _2089 = cbLight._m0[_1962].y + _550;
    float _2090 = cbLight._m0[_1962].z + _551;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_522, _523, _524), vec3(cbLight._m0[_1962].xyz));
    float _3970 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _2102 = dot(vec3(_522, _523, _524), vec3(_2095, _2096, _2097));
    float _3981 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2095, _2096, _2097));
    float _3992 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2023 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2124) + _2087) * _2101))) * _2101;
    float _4003 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1944) + ((((cbLight._m0[_1994].x * _1916) * _2047) * _2061) * _1958);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1944) + ((((cbLight._m0[_1994].y * _1918) * _2047) * _2061) * _1958);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1944) + ((((cbLight._m0[_1994].z * _1920) * _2047) * _2061) * _1958);
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    if (_1925.y == 0u)
    {
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.x;
        uint _2278 = uint((float(_2266.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2267))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2267)));
        float _2288 = (log2(_1703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2289 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        uint _2292 = uint(isnan(14.0) ? _2289 : (isnan(_2289) ? 14.0 : min(_2289, 14.0)));
        uvec4 _2297 = texelFetch(g_lightClusterGridBuffer, int(((_2292 << 2u) + (_2278 << 6u)) >> 2u));
        uint _2298 = _2297.x;
        uint _2299 = _2266.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2299 >> 4u) & 15u)) + 4294967295u) & _2298) == 0u) || ((_2299 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            uint _2603 = 0u;
            uint _2612;
            bool _2613;
            for (;;)
            {
                _2612 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2603 << 2u)) >> 2u)).x;
                _2613 = _2612 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2613)
                {
                    frontier_phi_72_pred = _2602;
                    frontier_phi_72_pred_1 = _2601;
                    frontier_phi_72_pred_2 = _2600;
                    frontier_phi_72_pred_3 = _2599;
                    frontier_phi_72_pred_4 = _2598;
                    frontier_phi_72_pred_5 = _2597;
                }
                else
                {
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    uint _2748;
                    _2742 = _2597;
                    _2743 = _2598;
                    _2744 = _2599;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2612;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2752 = uint(findLSB(_2748)) + (_2603 << 5u);
                        uint _2749 = (_2748 + 4294967295u) & _2748;
                        uint _2754 = _2752 * 48u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2774 = (_2752 * 48u) + 4u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2793 = (_2752 * 48u) + 8u;
                        vec3 _2804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x));
                        float _2808 = _2768.x - _1701;
                        float _2809 = _2768.y - _1702;
                        float _2810 = _2768.z - _1703;
                        float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                        float _2814 = inversesqrt(_2811);
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2818 = dot(vec3(_579, _582, _585), vec3(_2815, _2816, _2817));
                        float _2823 = 1.0 - (_2811 * _2768.w);
                        float _4024 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2825 = sqrt(_2811) * _2787.w;
                        float _2828 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2818) + _2829;
                        float _2835 = _2825 * _2825;
                        float _2839 = ((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2824) / ((_2835 * 0.699999988079071044921875) + 1.0);
                        float _2843 = (-0.0) - _1701;
                        float _2844 = (-0.0) - _1702;
                        float _2845 = (-0.0) - _1703;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2859 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                        float _2860 = 1.0 - _639;
                        float _2867 = sqrt(1.0 - ((1.0 - (_2860 * _2860)) * (1.0 - (_2859 * _2859))));
                        float _2868 = _2867 * _2867;
                        float _2869 = _2868 * _2868;
                        float _2870 = _2850 + _2815;
                        float _2871 = _2851 + _2816;
                        float _2872 = _2852 + _2817;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2880 = dot(vec3(_579, _582, _585), vec3(_2850, _2851, _2852));
                        float _4040 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2884 = dot(vec3(_579, _582, _585), vec3(_2876 * _2870, _2876 * _2871, _2876 * _2872));
                        float _4051 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2891 = ((_2887 * _2887) * (_2869 + (-1.0))) + 1.0;
                        float _2892 = _2828 * _2868;
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2818) + _2893;
                        float _4062 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2898 = 1.0 - _2868;
                        float _2908 = (0.5 / (((_2897 * ((_2883 * _2898) + _2868)) + 9.9999999392252902907785028219223e-09) + (((_2897 * _2898) + _2868) * _2883))) * _2897;
                        float _4073 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2919 = (((_2869 * 3.1415927410125732421875) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) / ((_2891 * _2891) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125))) * _2824;
                        _2677 = (_2839 * _2787.x) + _2745;
                        _2678 = (_2839 * _2787.y) + _2746;
                        _2679 = (_2839 * _2787.z) + _2747;
                        _2674 = (_2919 * _2804.x) + _2742;
                        _2675 = (_2919 * _2804.y) + _2743;
                        _2676 = (_2919 * _2804.z) + _2744;
                        if (_2749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2749;
                        }
                    }
                    frontier_phi_72_pred = _2679;
                    frontier_phi_72_pred_1 = _2678;
                    frontier_phi_72_pred_2 = _2677;
                    frontier_phi_72_pred_3 = _2676;
                    frontier_phi_72_pred_4 = _2675;
                    frontier_phi_72_pred_5 = _2674;
                }
                _2438 = frontier_phi_72_pred;
                _2436 = frontier_phi_72_pred_1;
                _2434 = frontier_phi_72_pred_2;
                _2432 = frontier_phi_72_pred_3;
                _2430 = frontier_phi_72_pred_4;
                _2428 = frontier_phi_72_pred_5;
                uint _2604 = _2603 + 1u;
                if (_2604 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2597 = _2428;
                    _2598 = _2430;
                    _2599 = _2432;
                    _2600 = _2434;
                    _2601 = _2436;
                    _2602 = _2438;
                    _2603 = _2604;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((4294967295u << _2444) & _2298) == 0u)
        {
            _2565 = _2427;
            _2567 = _2429;
            _2569 = _2431;
            _2571 = _2433;
            _2573 = _2435;
            _2575 = _2437;
        }
        else
        {
            float _2590 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
            float _2591 = _2590 * _1701;
            float _2592 = _2590 * _1702;
            float _2593 = _2590 * _1703;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2725 = _2427;
                float _2726 = _2429;
                float _2727 = _2431;
                float _2728 = _2433;
                float _2729 = _2435;
                float _2730 = _2437;
                uint _2731 = _2444;
                uint _2740;
                bool _2741;
                for (;;)
                {
                    _2740 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                    _2741 = _2740 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2741)
                    {
                        frontier_phi_78_pred = _2730;
                        frontier_phi_78_pred_1 = _2729;
                        frontier_phi_78_pred_2 = _2728;
                        frontier_phi_78_pred_3 = _2727;
                        frontier_phi_78_pred_4 = _2726;
                        frontier_phi_78_pred_5 = _2725;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _2937 = _2725;
                        float _2938 = _2726;
                        float _2939 = _2727;
                        float _2940 = _2728;
                        float _2941 = _2729;
                        float _2942 = _2730;
                        uint _2943 = _2740;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3012;
                        vec4 _3028;
                        float _3075;
                        bool _3076;
                        for (;;)
                        {
                            uint _2954 = ((_2731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _2999 = (_2954 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3015 = (_2954 * 40u) + 20u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2954 * 40u) + 24u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3050 = (_2954 * 40u) + 28u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3075 = fma(_1703, _3063.z, fma(_1702, _3063.y, _3063.x * _1701)) + _3063.w;
                            _3076 = !((fma(_1703, _3044.z, fma(_1702, _3044.y, _3044.x * _1701)) + _3044.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_3076)
                            {
                                float _3103 = _2969.x - _1701;
                                float _3104 = _2969.y - _1702;
                                float _3105 = _2969.z - _1703;
                                float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                                float _3109 = inversesqrt(_3106);
                                float _3110 = _3109 * _3103;
                                float _3111 = _3109 * _3104;
                                float _3112 = _3109 * _3105;
                                float _3116 = 1.0 - (_3106 / (_2970 * _2970));
                                float _4084 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3121 = sqrt(_3106) * _2985.w;
                                float _3123 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                                float _3124 = _3123 * _3123;
                                float _3127 = ((1.0 - _3124) * dot(vec3(_3110, _3111, _3112), vec3(_579, _582, _585))) + _3124;
                                float _3130 = _3121 * _3121;
                                float _3134 = (fma(_1703, _3012.z, fma(_1702, _3012.y, _3012.x * _1701)) + _3012.w) / _3075;
                                float _3135 = (fma(_1703, _3028.z, fma(_1702, _3028.y, _3028.x * _1701)) + _3028.w) / _3075;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4100 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3117) / ((_3130 * 0.699999988079071044921875) + 1.0));
                                float _3153 = exp2(log2(1.0 / ((_3130 * 3.5) + 5.0)) * 0.25);
                                float _3154 = 1.0 - _639;
                                float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                                float _3162 = _3161 * _3161;
                                float _3163 = _3162 * _3162;
                                float _3164 = _3110 - _2591;
                                float _3165 = _3111 - _2592;
                                float _3166 = _3112 - _2593;
                                float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                                float _3174 = dot(vec3(_579, _582, _585), vec3((-0.0) - _2591, (-0.0) - _2592, (-0.0) - _2593));
                                float _4111 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3178 = dot(vec3(_579, _582, _585), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                                float _4122 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                                float _3186 = _3123 * _3162;
                                float _3187 = _3186 * _3186;
                                float _3193 = ((1.0 - _3187) * dot(vec3(_579, _582, _585), vec3(_3110, _3111, _3112))) + _3187;
                                float _4133 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3195 = 1.0 - _3162;
                                float _3205 = (0.5 / (((_3194 * ((_3177 * _3195) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3162) * _3177))) * _3194;
                                float _4144 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3215 = (_3140 * _3117) * (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) / ((_3185 * _3185) * ((_3130 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3141 * _2985.z;
                                frontier_phi_84_pred_1 = _3141 * _2985.y;
                                frontier_phi_84_pred_2 = _3141 * _2985.x;
                                frontier_phi_84_pred_3 = _3215 * _2997.z;
                                frontier_phi_84_pred_4 = _3215 * _2997.y;
                                frontier_phi_84_pred_5 = _3215 * _2997.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3224 = frontier_phi_84_pred;
                            _3223 = frontier_phi_84_pred_1;
                            _3222 = frontier_phi_84_pred_2;
                            _3221 = frontier_phi_84_pred_3;
                            _3220 = frontier_phi_84_pred_4;
                            _3219 = frontier_phi_84_pred_5;
                            _2927 = _3222 + _2940;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            _2924 = _3219 + _2937;
                            _2925 = _3220 + _2938;
                            _2926 = _3221 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2929;
                        frontier_phi_78_pred_1 = _2928;
                        frontier_phi_78_pred_2 = _2927;
                        frontier_phi_78_pred_3 = _2926;
                        frontier_phi_78_pred_4 = _2925;
                        frontier_phi_78_pred_5 = _2924;
                    }
                    _2576 = frontier_phi_78_pred;
                    _2574 = frontier_phi_78_pred_1;
                    _2572 = frontier_phi_78_pred_2;
                    _2570 = frontier_phi_78_pred_3;
                    _2568 = frontier_phi_78_pred_4;
                    _2566 = frontier_phi_78_pred_5;
                    uint _2732 = _2731 + 1u;
                    if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2725 = _2566;
                        _2726 = _2568;
                        _2727 = _2570;
                        _2728 = _2572;
                        _2729 = _2574;
                        _2730 = _2576;
                        _2731 = _2732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2576;
                frontier_phi_65_66_ladder_1 = _2574;
                frontier_phi_65_66_ladder_2 = _2572;
                frontier_phi_65_66_ladder_3 = _2570;
                frontier_phi_65_66_ladder_4 = _2568;
                frontier_phi_65_66_ladder_5 = _2566;
            }
            else
            {
                frontier_phi_65_66_ladder = _2437;
                frontier_phi_65_66_ladder_1 = _2435;
                frontier_phi_65_66_ladder_2 = _2433;
                frontier_phi_65_66_ladder_3 = _2431;
                frontier_phi_65_66_ladder_4 = _2429;
                frontier_phi_65_66_ladder_5 = _2427;
            }
            _2565 = frontier_phi_65_66_ladder_5;
            _2567 = frontier_phi_65_66_ladder_4;
            _2569 = frontier_phi_65_66_ladder_3;
            _2571 = frontier_phi_65_66_ladder_2;
            _2573 = frontier_phi_65_66_ladder_1;
            _2575 = frontier_phi_65_66_ladder;
        }
        float _2580 = isnan(1.0) ? _623 : (isnan(_623) ? 1.0 : min(_623, 1.0));
        _2310 = (_2580 * _2571) + _1990;
        _2312 = (_2580 * _2573) + _1991;
        _2314 = (_2580 * _2575) + _1992;
        _2316 = ((_2565 * 0.039999999105930328369140625) * _2580) + _2146;
        _2318 = ((_2567 * 0.039999999105930328369140625) * _2580) + _2147;
        _2320 = ((_2569 * 0.039999999105930328369140625) * _2580) + _2148;
    }
    else
    {
        _2310 = _1990;
        _2312 = _1991;
        _2314 = _1992;
        _2316 = _2146;
        _2318 = _2147;
        _2320 = _2148;
    }
    uint _2326 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _4160 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4171 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4182 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2357 = (((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2310 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _623))) + ((_2316 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _297) * _504.x) * cbInstanceData._m0[_2326].x);
    float _2359 = ((((cbMtdParam._m0[12u].y * _297) * _504.y) * cbInstanceData._m0[_2326].y) + ((_2318 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2312 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _623)));
    float _2361 = ((((cbMtdParam._m0[12u].z * _297) * _504.z) * cbInstanceData._m0[_2326].z) + ((_2320 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1434)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2314 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _623)));
    uint _2365 = _598 + 6u;
    float _2373 = _557 / cbSceneParam._m0[86u].x;
    float _2374 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2388 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2390 = _2388.x;
    float _2391 = _2388.y;
    float _2392 = _2388.z;
    float _2393 = _2388.w;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2453 = _2452 / _544;
        float _2464 = _2453 * _271;
        float _2465 = _272 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2467 = _2453 * _273;
        float _2469 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2470 = _2469 + cbSceneParam._m0[79u].w;
        float _2471 = cbSceneParam._m0[79u].w - _2465;
        float _2477 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2467 * _2467));
        float _2480 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2477;
        float _2485 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2487 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2466 - _2469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2470 > 0.0) ? exp2(_2485 * _2470) : (2.0 - exp2(_2487 * _2470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2480;
        }
        else
        {
            float _2626 = 1.0 / cbSceneParam._m0[80u].x;
            float _2627 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : max(_2470, _2471));
            float _2628 = isnan(_2471) ? _2470 : (isnan(_2470) ? _2471 : min(_2470, _2471));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            float _2638 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : min(_2628, 0.0));
            _2687 = ((abs(_2477 / _2466) * cbSceneParam._m0[80u].y) * ((((_2637 - _2638) * 2.0) - ((exp2(_2485 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0)))) - exp2(_2485 * (isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0))))) * _2626)) - ((exp2(_2487 * _2637) - exp2(_2487 * _2638)) * _2626))) + (_2480 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2373, _2374, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2393);
        _2489 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2390;
        _2491 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2391;
        _2493 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2392;
        _2495 = _2698 * _2393;
    }
    else
    {
        _2489 = _2390;
        _2491 = _2391;
        _2493 = _2392;
        _2495 = _2393;
    }
    float _2507 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2508 = _2507 == 3.0;
    float _2509 = log2(_2495);
    float _2516 = exp2(_2509 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0)));
    float _2517 = exp2(_2509 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)));
    float _2518 = exp2(_2509 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0)));
    float _2527 = (_2507 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2527 * (_2508 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2489)));
    SV_Target.y = _2527 * (_2508 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2491)));
    SV_Target.z = _2527 * (_2508 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.w = cbInstanceData._m0[_2365].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2365].w;
}


