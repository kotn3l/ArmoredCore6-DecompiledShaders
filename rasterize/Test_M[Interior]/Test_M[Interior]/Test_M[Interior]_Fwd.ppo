#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _447;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _181 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _182 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _183 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _189 = _188 * _181;
    float _190 = _188 * _182;
    float _191 = _188 * _183;
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203 = _202 * TANGENT.x;
    float _204 = _202 * TANGENT.y;
    float _205 = _202 * TANGENT.z;
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _287 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _287.w;
    float _306 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _293) + cbMtdParam._m0[11u].x) * _287.x;
    float _308 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _293) + cbMtdParam._m0[11u].y) * _287.y;
    float _310 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _293) + cbMtdParam._m0[11u].z) * _287.z;
    vec4 _322 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _332 = (_322.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3097 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))));
    vec4 _375 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _388 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _395 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _411 = (-0.0) - dot(vec3(_267, _268, _269), vec3(_388 * _189, _388 * _190, _388 * _191));
    float _412 = (-0.0) - dot(vec3(_267, _268, _269), vec3(_395 * _203, _395 * _204, _395 * _205));
    float _413 = (-0.0) - dot(vec3(_267, _268, _269), vec3((-0.0) - _210, (-0.0) - _211, (-0.0) - _212));
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _417 * _413;
    float _423 = ((cbMtdParam._m0[15u].y * _411) * _417) + (((_375.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _424 = ((cbMtdParam._m0[15u].z * _412) * _417) + (((_375.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _427 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _428 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _445;
    float _448;
    float _450;
    if (_423 > 0.0)
    {
        float _431 = (1.0 - _427) / _423;
        _445 = _431;
        _448 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_431 * _418)) * 0.16666667163372039794921875;
        _450 = (fract((_431 * _424) + _428) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_423 < 0.0)
        {
            float _446 = ((-0.0) - _427) / _423;
            frontier_phi_5_4_ladder = _446;
            frontier_phi_5_4_ladder_1 = (fract((_446 * _424) + _428) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_5_4_ladder_2 = (fract(_446 * _418) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_5_4_ladder = _447;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = 0.0;
        }
        _445 = frontier_phi_5_4_ladder;
        _448 = frontier_phi_5_4_ladder_2;
        _450 = frontier_phi_5_4_ladder_1;
    }
    float _476;
    float _478;
    float _480;
    if (_424 > 0.0)
    {
        float _463 = (1.0 - _428) / _424;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_463 < _445)
        {
            frontier_phi_10_7_ladder = (fract(_463 * _418) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_463 * _423) + _427) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _463;
        }
        else
        {
            frontier_phi_10_7_ladder = _450;
            frontier_phi_10_7_ladder_1 = _448;
            frontier_phi_10_7_ladder_2 = _445;
        }
        _476 = frontier_phi_10_7_ladder_2;
        _478 = frontier_phi_10_7_ladder_1;
        _480 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_424 < 0.0)
        {
            float _477 = ((-0.0) - _428) / _424;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_477 < _445)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_477 * _418) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_477 * _423) + _427) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _477;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _450;
                frontier_phi_10_8_ladder_11_ladder_1 = _448;
                frontier_phi_10_8_ladder_11_ladder_2 = _445;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _450;
            frontier_phi_10_8_ladder_1 = _448;
            frontier_phi_10_8_ladder_2 = _445;
        }
        _476 = frontier_phi_10_8_ladder_2;
        _478 = frontier_phi_10_8_ladder_1;
        _480 = frontier_phi_10_8_ladder;
    }
    float _484 = (_418 > 0.0) ? (cbMtdParam._m0[13u].w / _418) : 5000.0;
    float _497;
    float _498;
    if (_484 < _476)
    {
        _497 = ((_427 + cbMtdParam._m0[14u].x) + (_484 * _423)) * 0.16666667163372039794921875;
        _498 = (((_484 * _424) + _428) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _497 = _478;
        _498 = _480;
    }
    vec4 _500 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_497, _498));
    float _507 = fma(_339, _210, fma(_332, _203, _330 * _189));
    float _510 = fma(_339, _211, fma(_332, _204, _330 * _190));
    float _513 = fma(_339, _212, fma(_332, _205, _330 * _191));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3108 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _521 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
    float _3119 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3130 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3141 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _545 = _267 * _544;
    float _546 = _268 * _544;
    float _547 = _269 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _578 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _581 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _594 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3152 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
    float _3163 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0));
    float _3174 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
    vec4 _616 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _619 = _616.x * TEXCOORD.z;
    float _620 = dot(vec3(_518, _519, _520), vec3(_545, _546, _547));
    float _623 = _620 * 2.0;
    float _627 = (_623 * _518) - _545;
    float _628 = (_623 * _519) - _546;
    float _629 = (_623 * _520) - _547;
    float _633 = abs(dot(vec3(_545, _546, _547), vec3(_518, _519, _520)));
    float _3185 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _635 = sqrt(_521);
    float _648 = exp2((_635 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_635 * 3.0));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_688, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680));
        float _725 = fma(_688, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680));
        float _729 = fma(_688, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680));
        float _753 = _680 + _518;
        float _754 = _684 + _519;
        float _755 = _688 + _520;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _721;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _725;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _729;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_518, _519, _520), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3211 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3222 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3233 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_518, _519, _520), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3266 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_518, _519, _520), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3299 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _996 = _825;
        _997 = _824;
        _998 = _836;
        _999 = _835;
        _1000 = _834;
        _1001 = _846;
        _1002 = _845;
        _1003 = _844;
        _1004 = _859;
        _1005 = _858;
        _1006 = _857;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _447;
        _996 = _447;
        _997 = _447;
        _998 = _447;
        _999 = _447;
        _1000 = _447;
        _1001 = _447;
        _1002 = _447;
        _1003 = _447;
        _1004 = _447;
        _1005 = _447;
        _1006 = _447;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1035 = fma(_688, cbModelParam._m0[30u].z, fma(_684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _680));
        float _1039 = fma(_688, cbModelParam._m0[31u].z, fma(_684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _680));
        float _1043 = fma(_688, cbModelParam._m0[32u].z, fma(_684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _680));
        float _1066 = _680 + _518;
        float _1067 = _684 + _519;
        float _1068 = _688 + _520;
        float _1078 = fma(_1068, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066)) - _1035;
        float _1079 = fma(_1068, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066)) - _1039;
        float _1080 = fma(_1068, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066)) - _1043;
        float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
        float _1097 = ((_1084 * _1078) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1035 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1084 * _1079) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1039 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1084 * _1080) / cbModelParam._m0[35u].z) + ((((((_1043 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1097, _1098, _1099), 0.0);
        float _1134 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1101.x + (-0.5));
        float _1136 = _1134 * (_1101.y + (-0.5));
        float _1137 = _1134 * (_1101.z + (-0.5));
        float _1144 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1108.x + (-0.5));
        float _1146 = _1144 * (_1108.y + (-0.5));
        float _1147 = _1144 * (_1108.z + (-0.5));
        float _1154 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1115.x + (-0.5));
        float _1156 = _1154 * (_1115.y + (-0.5));
        float _1157 = _1154 * (_1115.z + (-0.5));
        float _1164 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1122.x + (-0.5));
        float _1166 = _1164 * (_1122.y + (-0.5));
        float _1167 = _1164 * (_1122.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_518, _519, _520), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3362 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_1198 + 1.0))) + _1203) * _1168;
        float _1213 = _1136 * 0.5;
        float _1214 = _1146 * 0.5;
        float _1215 = _1156 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_518, _519, _520), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3395 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_1240 + 1.0))) + _1245) * _1169;
        float _1255 = _1137 * 0.5;
        float _1256 = _1147 * 0.5;
        float _1257 = _1157 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_518, _519, _520), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3428 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1282 + 1.0))) + _1287) * _1170;
        _1304 = _1137;
        _1305 = _1136;
        _1306 = _1135;
        _1307 = _1147;
        _1308 = _1146;
        _1309 = _1145;
        _1310 = _1157;
        _1311 = _1156;
        _1312 = _1155;
        _1313 = _1170;
        _1314 = _1169;
        _1315 = _1168;
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _447;
        _1305 = _447;
        _1306 = _447;
        _1307 = _447;
        _1308 = _447;
        _1309 = _447;
        _1310 = _447;
        _1311 = _447;
        _1312 = _447;
        _1313 = _447;
        _1314 = _447;
        _1315 = _447;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1351 = fma(_1330, cbSceneParam._m0[89u].z, fma(_1329, cbSceneParam._m0[89u].y, _1328 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1330, cbSceneParam._m0[90u].z, fma(_1329, cbSceneParam._m0[90u].y, _1328 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1330, cbSceneParam._m0[91u].z, fma(_1329, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1328));
    float _1372 = _627 * 0.5;
    float _1373 = _628 * 0.5;
    float _1374 = _629 * 0.5;
    float _1375 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1378 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1381 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1415;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1388 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_995, _998, _1001, _1004));
        float _1392 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_996, _999, _1002, _1005));
        float _1396 = dot(vec4(_1372, _1373, _1374, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1403 = dot(vec4(cbModelParam._m0[39u]), vec4(_1372, _1373, _1374, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1426;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1417 = dot(vec4(cbModelParam._m0[40u]), vec4(_1372, _1373, _1374, 1.0));
        _1426 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1426 = 1.0;
    }
    float _1430 = (_1426 * cbModelParam._m0[1u].x) + (_1415 * (1.0 - cbModelParam._m0[1u].x));
    float _1440 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1440 : min(cbModelParam._m0[25u].z, _1440));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1488 = fma(_688, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680)) + cbModelParam._m0[13u].w;
        float _1492 = fma(_688, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680)) + cbModelParam._m0[14u].w;
        float _1496 = fma(_688, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680)) + cbModelParam._m0[15u].w;
        float _1499 = fma(_629, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627));
        float _1502 = fma(_629, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627));
        float _1505 = fma(_629, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627));
        float _1533;
        if (_1499 > 0.0)
        {
            _1533 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_28_26_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_28_26_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_28_26_ladder = 5000.0;
            }
            _1533 = frontier_phi_28_26_ladder;
        }
        float _1883;
        if (_1502 > 0.0)
        {
            _1883 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1883 = frontier_phi_37_33_ladder;
        }
        float _2204;
        if (_1505 > 0.0)
        {
            _2204 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2204 = frontier_phi_51_44_ladder;
        }
        float _2206 = isnan(_1883) ? _1533 : (isnan(_1533) ? _1883 : min(_1533, _1883));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1499) + _1488;
        float _2212 = (_2207 * _1502) + _1492;
        float _2213 = (_2207 * _1505) + _1496;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2214;
        float _2217 = _2214 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2213 > _2217) || ((_2213 < _2215) || ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 < _2215) || (_2211 > _2217))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2213, cbModelParam._m0[9u].z, fma(_2212, cbModelParam._m0[9u].y, _2211 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2213, cbModelParam._m0[10u].z, fma(_2212, cbModelParam._m0[10u].y, _2211 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2213, cbModelParam._m0[11u].z, fma(_2212, cbModelParam._m0[11u].y, _2211 * cbModelParam._m0[11u].x))), _1441);
            frontier_phi_27_51_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_27_51_ladder_1 = _2339.x * cbModelParam._m0[1u].y;
            frontier_phi_27_51_ladder_2 = _2339.y * cbModelParam._m0[1u].y;
        }
        _1521 = frontier_phi_27_51_ladder_1;
        _1523 = frontier_phi_27_51_ladder_2;
        _1525 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_627, _628, _629), _1441);
        _1521 = _1509.x * cbModelParam._m0[1u].y;
        _1523 = _1509.y * cbModelParam._m0[1u].y;
        _1525 = _1509.z * cbModelParam._m0[1u].y;
    }
    float _1529 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1529 : min(cbModelParam._m0[25u].w, _1529));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1586 = fma(_688, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680)) + cbModelParam._m0[21u].w;
        float _1590 = fma(_688, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680)) + cbModelParam._m0[22u].w;
        float _1594 = fma(_688, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680)) + cbModelParam._m0[23u].w;
        float _1597 = fma(_629, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627));
        float _1600 = fma(_629, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627));
        float _1603 = fma(_629, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627));
        float _1888;
        if (_1597 > 0.0)
        {
            _1888 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1888 = frontier_phi_39_35_ladder;
        }
        float _2230;
        if (_1600 > 0.0)
        {
            _2230 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_53_46_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_53_46_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_53_46_ladder = 5000.0;
            }
            _2230 = frontier_phi_53_46_ladder;
        }
        float _2399;
        if (_1603 > 0.0)
        {
            _2399 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_67_62_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_67_62_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_67_62_ladder = 5000.0;
            }
            _2399 = frontier_phi_67_62_ladder;
        }
        float _2401 = isnan(_2230) ? _1888 : (isnan(_1888) ? _2230 : min(_1888, _2230));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1597) + _1586;
        float _2407 = (_2402 * _1600) + _1590;
        float _2408 = (_2402 * _1603) + _1594;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2409;
        float _2412 = _2409 + 1.0;
        float frontier_phi_36_67_ladder;
        float frontier_phi_36_67_ladder_1;
        float frontier_phi_36_67_ladder_2;
        if ((_2408 > _2412) || ((_2408 < _2410) || ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 < _2410) || (_2406 > _2412))))))
        {
            frontier_phi_36_67_ladder = 0.0;
            frontier_phi_36_67_ladder_1 = 0.0;
            frontier_phi_36_67_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2408, cbModelParam._m0[17u].z, fma(_2407, cbModelParam._m0[17u].y, _2406 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2408, cbModelParam._m0[18u].z, fma(_2407, cbModelParam._m0[18u].y, _2406 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2408, cbModelParam._m0[19u].z, fma(_2407, cbModelParam._m0[19u].y, _2406 * cbModelParam._m0[19u].x))), _1530);
            frontier_phi_36_67_ladder = _2641.z * cbModelParam._m0[1u].z;
            frontier_phi_36_67_ladder_1 = _2641.x * cbModelParam._m0[1u].z;
            frontier_phi_36_67_ladder_2 = _2641.y * cbModelParam._m0[1u].z;
        }
        _1622 = frontier_phi_36_67_ladder_1;
        _1624 = frontier_phi_36_67_ladder_2;
        _1626 = frontier_phi_36_67_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_627, _628, _629), _1530);
        _1622 = _1606.x * cbModelParam._m0[1u].z;
        _1624 = _1606.y * cbModelParam._m0[1u].z;
        _1626 = _1606.z * cbModelParam._m0[1u].z;
    }
    float _1638 = ((((1.0 - _648) * ((_635 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_648 * _635)) * _619;
    float _1639 = _1638 * ((cbModelParam._m0[1u].w * (_1622 - _1521)) + _1521);
    float _1640 = _1638 * ((cbModelParam._m0[1u].w * (_1624 - _1523)) + _1523);
    float _1641 = _1638 * ((cbModelParam._m0[1u].w * (_1626 - _1525)) + _1525);
    float _1644 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, _1639 * cbSceneParam._m0[91u].x));
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1668 = _619 + (-1.0);
    float _1671 = (cbLight._m0[_1663].x * _1668) + 1.0;
    float _1672 = (cbLight._m0[_1663].y * _1668) + 1.0;
    uint _1673 = _1662 + 5u;
    float _1679 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1683 = _1662 + 4u;
    float _1690 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1694 = _1662 | 1u;
    float _1705 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_518, _519, _520));
    float _1708 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_518, _519, _520));
    float _3564 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _3575 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1713 = (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * 0.3183098733425140380859375;
    float _1715 = (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.3183098733425140380859375;
    float _1722 = ((cbLight._m0[_1673].x * _1679) * _1715) + ((cbLight._m0[_1683].x * _1690) * _1713);
    float _1723 = ((_1679 * cbLight._m0[_1673].y) * _1715) + ((_1690 * cbLight._m0[_1683].y) * _1713);
    float _1724 = ((_1679 * cbLight._m0[_1673].z) * _1715) + ((_1690 * cbLight._m0[_1683].z) * _1713);
    uint _1726 = _1662 + 8u;
    float _1739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _521) * 0.949999988079071044921875);
    float _1740 = _1739 * _1739;
    float _1741 = cbLight._m0[_1662].x + _545;
    float _1742 = cbLight._m0[_1662].y + _546;
    float _1743 = cbLight._m0[_1662].z + _547;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1748 = _1747 * _1741;
    float _1749 = _1747 * _1742;
    float _1750 = _1747 * _1743;
    float _1751 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1662].xyz));
    float _3586 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _1755 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _1756 = dot(vec3(_518, _519, _520), vec3(_1748, _1749, _1750));
    float _3608 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1748, _1749, _1750));
    float _3619 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1764 = _1740 * _1740;
    float _1768 = ((_1759 * _1759) * (_1764 + (-1.0))) + 1.0;
    float _1779 = (exp2(log2(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1780 = 1.0 - _1740;
    float _1791 = (0.5 / (((_1755 * ((_1754 * _1780) + _1740)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1780) + _1740) * _1754))) * _1754;
    float _3630 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1793 = (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1764 / ((_1768 * _1768) * 3.141590118408203125));
    uint _1804 = _1662 + 9u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _521) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1694].x + _545;
    float _1818 = cbLight._m0[_1694].y + _546;
    float _1819 = cbLight._m0[_1694].z + _547;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1694].xyz));
    float _3641 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _1831 = dot(vec3(_518, _519, _520), vec3(_1824, _1825, _1826));
    float _3652 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1824, _1825, _1826));
    float _3663 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1816 * _1816;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1852 = (exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = 1.0 - _1816;
    float _1863 = (0.5 / (((_1755 * ((_1830 * _1853) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1755 * _1853) + _1816) * _1830))) * _1830;
    float _3674 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    float _1875 = (((_1852 * cbLight._m0[_1804].x) * _1865) * _1679) + (((_1779 * cbLight._m0[_1726].x) * _1793) * _1690);
    float _1876 = (((_1852 * cbLight._m0[_1804].y) * _1865) * _1679) + (((_1779 * cbLight._m0[_1726].y) * _1793) * _1690);
    float _1877 = (((_1852 * cbLight._m0[_1804].z) * _1865) * _1679) + (((_1779 * cbLight._m0[_1726].z) * _1793) * _1690);
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    if (_1660.y == 0u)
    {
        float _1932 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1932;
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1932;
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1932;
        uvec4 _1947 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1948 = _1947.x;
        uint _1959 = uint((float(_1947.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _1948))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _1948)));
        float _1969 = (log2(_1935 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1970 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        uint _1973 = uint(isnan(14.0) ? _1970 : (isnan(_1970) ? 14.0 : min(_1970, 14.0)));
        uvec4 _1978 = texelFetch(g_lightClusterGridBuffer, int(((_1973 << 2u) + (_1959 << 6u)) >> 2u));
        uint _1979 = _1978.x;
        uint _1980 = _1947.z;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        float _2101;
        if (((((1u << ((_1980 >> 4u) & 15u)) + 4294967295u) & _1979) == 0u) || ((_1980 & 240u) == 0u))
        {
            _2091 = 0.0;
            _2093 = 0.0;
            _2095 = 0.0;
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
        }
        else
        {
            float _2092;
            float _2094;
            float _2096;
            float _2098;
            float _2100;
            float _2102;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            float _2270 = 0.0;
            float _2271 = 0.0;
            float _2272 = 0.0;
            uint _2273 = 0u;
            uint _2282;
            bool _2283;
            for (;;)
            {
                _2282 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2273 << 2u)) >> 2u)).x;
                _2283 = _2282 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2283)
                {
                    frontier_phi_64_pred = _2268;
                    frontier_phi_64_pred_1 = _2267;
                    frontier_phi_64_pred_2 = _2272;
                    frontier_phi_64_pred_3 = _2271;
                    frontier_phi_64_pred_4 = _2270;
                    frontier_phi_64_pred_5 = _2269;
                }
                else
                {
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    uint _2448;
                    _2442 = _2267;
                    _2443 = _2268;
                    _2444 = _2269;
                    _2445 = _2270;
                    _2446 = _2271;
                    _2447 = _2272;
                    _2448 = _2282;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    float _2352;
                    float _2353;
                    for (;;)
                    {
                        uint _2452 = uint(findLSB(_2448)) + (_2273 << 5u);
                        uint _2449 = (_2448 + 4294967295u) & _2448;
                        uint _2454 = _2452 * 48u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2474 = (_2452 * 48u) + 4u;
                        vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 3u)).x));
                        uint _2493 = (_2452 * 48u) + 8u;
                        vec3 _2504 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x));
                        float _2508 = _2468.x - _1933;
                        float _2509 = _2468.y - _1934;
                        float _2510 = _2468.z - _1935;
                        float _2511 = dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510));
                        float _2514 = inversesqrt(_2511);
                        float _2515 = _2514 * _2508;
                        float _2516 = _2514 * _2509;
                        float _2517 = _2514 * _2510;
                        float _2518 = dot(vec3(_575, _578, _581), vec3(_2515, _2516, _2517));
                        float _2523 = 1.0 - (_2511 * _2468.w);
                        float _3695 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                        float _2524 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                        float _2525 = sqrt(_2511) * _2487.w;
                        float _2528 = 1.39999997615814208984375 / (_2525 + 1.39999997615814208984375);
                        float _2529 = _2528 * _2528;
                        float _2532 = ((1.0 - _2529) * _2518) + _2529;
                        float _2535 = _2525 * _2525;
                        float _2539 = ((isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))) * _2524) / ((_2535 * 0.699999988079071044921875) + 1.0);
                        float _2543 = (-0.0) - _1933;
                        float _2544 = (-0.0) - _1934;
                        float _2545 = (-0.0) - _1935;
                        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
                        float _2550 = _2549 * _2543;
                        float _2551 = _2549 * _2544;
                        float _2552 = _2549 * _2545;
                        float _2560 = exp2(log2(1.0 / ((_2535 * 3.5) + 5.0)) * 0.25);
                        float _2561 = 1.0 - _635;
                        float _2568 = sqrt(1.0 - ((1.0 - (_2561 * _2561)) * (1.0 - (_2560 * _2560))));
                        float _2569 = _2568 * _2568;
                        float _2570 = _2569 * _2569;
                        float _2571 = _2550 + _2515;
                        float _2572 = _2551 + _2516;
                        float _2573 = _2552 + _2517;
                        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
                        float _2581 = dot(vec3(_575, _578, _581), vec3(_2550, _2551, _2552));
                        float _3711 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
                        float _2584 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
                        float _2585 = dot(vec3(_575, _578, _581), vec3(_2577 * _2571, _2577 * _2572, _2577 * _2573));
                        float _3722 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2588 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                        float _2592 = ((_2588 * _2588) * (_2570 + (-1.0))) + 1.0;
                        float _2593 = _2528 * _2569;
                        float _2594 = _2593 * _2593;
                        float _2597 = ((1.0 - _2594) * _2518) + _2594;
                        float _3733 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
                        float _2598 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                        float _2599 = 1.0 - _2569;
                        float _2609 = (0.5 / (((_2598 * ((_2584 * _2599) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2599) + _2569) * _2584))) * _2598;
                        float _3744 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _2620 = (((_2570 * 3.1415927410125732421875) * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) / ((_2592 * _2592) * ((_2535 * 2.1991131305694580078125) + 3.141590118408203125))) * _2524;
                        _2351 = (_2539 * _2487.x) + _2445;
                        _2352 = (_2539 * _2487.y) + _2446;
                        _2353 = (_2539 * _2487.z) + _2447;
                        _2348 = (_2620 * _2504.x) + _2442;
                        _2349 = (_2620 * _2504.y) + _2443;
                        _2350 = (_2620 * _2504.z) + _2444;
                        if (_2449 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2442 = _2348;
                            _2443 = _2349;
                            _2444 = _2350;
                            _2445 = _2351;
                            _2446 = _2352;
                            _2447 = _2353;
                            _2448 = _2449;
                        }
                    }
                    frontier_phi_64_pred = _2349;
                    frontier_phi_64_pred_1 = _2348;
                    frontier_phi_64_pred_2 = _2353;
                    frontier_phi_64_pred_3 = _2352;
                    frontier_phi_64_pred_4 = _2351;
                    frontier_phi_64_pred_5 = _2350;
                }
                _2094 = frontier_phi_64_pred;
                _2092 = frontier_phi_64_pred_1;
                _2102 = frontier_phi_64_pred_2;
                _2100 = frontier_phi_64_pred_3;
                _2098 = frontier_phi_64_pred_4;
                _2096 = frontier_phi_64_pred_5;
                uint _2274 = _2273 + 1u;
                if (_2274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2267 = _2092;
                    _2268 = _2094;
                    _2269 = _2096;
                    _2270 = _2098;
                    _2271 = _2100;
                    _2272 = _2102;
                    _2273 = _2274;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2091 = _2092;
            _2093 = _2094;
            _2095 = _2096;
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
        }
        uvec4 _2105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2106 = _2105.z;
        uint _2108 = (_2106 >> 8u) & 15u;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((4294967295u << _2108) & _1979) == 0u)
        {
            _2235 = _2091;
            _2237 = _2093;
            _2239 = _2095;
            _2241 = _2097;
            _2243 = _2099;
            _2245 = _2101;
        }
        else
        {
            float _2260 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
            float _2261 = _2260 * _1933;
            float _2262 = _2260 * _1934;
            float _2263 = _2260 * _1935;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2108 < ((_2106 >> 12u) & 15u))
            {
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2425 = _2091;
                float _2426 = _2093;
                float _2427 = _2095;
                float _2428 = _2097;
                float _2429 = _2099;
                float _2430 = _2101;
                uint _2431 = _2108;
                uint _2440;
                bool _2441;
                for (;;)
                {
                    _2440 = texelFetch(g_lightClassification, int((((_1973 << 5u) + (_1959 << 9u)) + (_2431 << 2u)) >> 2u)).x;
                    _2441 = _2440 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    float frontier_phi_73_pred_3;
                    float frontier_phi_73_pred_4;
                    float frontier_phi_73_pred_5;
                    if (_2441)
                    {
                        frontier_phi_73_pred = _2429;
                        frontier_phi_73_pred_1 = _2430;
                        frontier_phi_73_pred_2 = _2428;
                        frontier_phi_73_pred_3 = _2427;
                        frontier_phi_73_pred_4 = _2426;
                        frontier_phi_73_pred_5 = _2425;
                    }
                    else
                    {
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2659 = _2425;
                        float _2660 = _2426;
                        float _2661 = _2427;
                        float _2662 = _2428;
                        float _2663 = _2429;
                        float _2664 = _2430;
                        uint _2665 = _2440;
                        uint _2666;
                        vec4 _2691;
                        float _2692;
                        vec4 _2707;
                        vec3 _2719;
                        vec4 _2734;
                        vec4 _2750;
                        float _2797;
                        bool _2798;
                        for (;;)
                        {
                            uint _2676 = ((_2431 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2665));
                            _2666 = (_2665 + 4294967295u) & _2665;
                            uint _2678 = _2676 * 40u;
                            _2691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 3u)).x));
                            _2692 = _2691.w;
                            uint _2694 = (_2676 * 40u) + 4u;
                            _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2709 = (_2676 * 40u) + 8u;
                            _2719 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x));
                            uint _2721 = (_2676 * 40u) + 16u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2737 = (_2676 * 40u) + 20u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2753 = (_2676 * 40u) + 24u;
                            vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            uint _2772 = (_2676 * 40u) + 28u;
                            vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            _2797 = fma(_1935, _2785.z, fma(_1934, _2785.y, _2785.x * _1933)) + _2785.w;
                            _2798 = !((fma(_1935, _2766.z, fma(_1934, _2766.y, _2766.x * _1933)) + _2766.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_2798)
                            {
                                float _2825 = _2691.x - _1933;
                                float _2826 = _2691.y - _1934;
                                float _2827 = _2691.z - _1935;
                                float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                                float _2831 = inversesqrt(_2828);
                                float _2832 = _2831 * _2825;
                                float _2833 = _2831 * _2826;
                                float _2834 = _2831 * _2827;
                                float _2838 = 1.0 - (_2828 / (_2692 * _2692));
                                float _3755 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2839 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2843 = sqrt(_2828) * _2707.w;
                                float _2845 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                                float _2846 = _2845 * _2845;
                                float _2849 = ((1.0 - _2846) * dot(vec3(_2832, _2833, _2834), vec3(_575, _578, _581))) + _2846;
                                float _2852 = _2843 * _2843;
                                float _2856 = (fma(_1935, _2734.z, fma(_1934, _2734.y, _2734.x * _1933)) + _2734.w) / _2797;
                                float _2857 = (fma(_1935, _2750.z, fma(_1934, _2750.y, _2750.x * _1933)) + _2750.w) / _2797;
                                float _2861 = 1.0 - dot(vec2(_2856, _2857), vec2(_2856, _2857));
                                float _3771 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                                float _2862 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
                                float _2863 = _2862 * (((isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))) * _2839) / ((_2852 * 0.699999988079071044921875) + 1.0));
                                float _2875 = exp2(log2(1.0 / ((_2852 * 3.5) + 5.0)) * 0.25);
                                float _2876 = 1.0 - _635;
                                float _2883 = sqrt(1.0 - ((1.0 - (_2876 * _2876)) * (1.0 - (_2875 * _2875))));
                                float _2884 = _2883 * _2883;
                                float _2885 = _2884 * _2884;
                                float _2886 = _2832 - _2261;
                                float _2887 = _2833 - _2262;
                                float _2888 = _2834 - _2263;
                                float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
                                float _2896 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2261, (-0.0) - _2262, (-0.0) - _2263));
                                float _3782 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                                float _2899 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
                                float _2900 = dot(vec3(_575, _578, _581), vec3(_2892 * _2886, _2892 * _2887, _2892 * _2888));
                                float _3793 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                                float _2903 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
                                float _2907 = ((_2903 * _2903) * (_2885 + (-1.0))) + 1.0;
                                float _2908 = _2845 * _2884;
                                float _2909 = _2908 * _2908;
                                float _2915 = ((1.0 - _2909) * dot(vec3(_575, _578, _581), vec3(_2832, _2833, _2834))) + _2909;
                                float _3804 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2916 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                                float _2917 = 1.0 - _2884;
                                float _2927 = (0.5 / (((_2916 * ((_2899 * _2917) + _2884)) + 9.9999999392252902907785028219223e-09) + (((_2916 * _2917) + _2884) * _2899))) * _2916;
                                float _3815 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2937 = (_2862 * _2839) * (((_2885 * 3.1415927410125732421875) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) / ((_2907 * _2907) * ((_2852 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _2937 * _2719.y;
                                frontier_phi_79_pred_1 = _2863 * _2707.x;
                                frontier_phi_79_pred_2 = _2937 * _2719.z;
                                frontier_phi_79_pred_3 = _2937 * _2719.x;
                                frontier_phi_79_pred_4 = _2863 * _2707.z;
                                frontier_phi_79_pred_5 = _2863 * _2707.y;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _2942 = frontier_phi_79_pred;
                            _2944 = frontier_phi_79_pred_1;
                            _2943 = frontier_phi_79_pred_2;
                            _2941 = frontier_phi_79_pred_3;
                            _2946 = frontier_phi_79_pred_4;
                            _2945 = frontier_phi_79_pred_5;
                            _2649 = _2944 + _2662;
                            _2650 = _2945 + _2663;
                            _2651 = _2946 + _2664;
                            _2646 = _2941 + _2659;
                            _2647 = _2942 + _2660;
                            _2648 = _2943 + _2661;
                            if (_2666 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2666;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2650;
                        frontier_phi_73_pred_1 = _2651;
                        frontier_phi_73_pred_2 = _2649;
                        frontier_phi_73_pred_3 = _2648;
                        frontier_phi_73_pred_4 = _2647;
                        frontier_phi_73_pred_5 = _2646;
                    }
                    _2244 = frontier_phi_73_pred;
                    _2246 = frontier_phi_73_pred_1;
                    _2242 = frontier_phi_73_pred_2;
                    _2240 = frontier_phi_73_pred_3;
                    _2238 = frontier_phi_73_pred_4;
                    _2236 = frontier_phi_73_pred_5;
                    uint _2432 = _2431 + 1u;
                    if (_2432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2425 = _2236;
                        _2426 = _2238;
                        _2427 = _2240;
                        _2428 = _2242;
                        _2429 = _2244;
                        _2430 = _2246;
                        _2431 = _2432;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2244;
                frontier_phi_55_56_ladder_1 = _2246;
                frontier_phi_55_56_ladder_2 = _2242;
                frontier_phi_55_56_ladder_3 = _2240;
                frontier_phi_55_56_ladder_4 = _2238;
                frontier_phi_55_56_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_55_56_ladder = _2099;
                frontier_phi_55_56_ladder_1 = _2101;
                frontier_phi_55_56_ladder_2 = _2097;
                frontier_phi_55_56_ladder_3 = _2095;
                frontier_phi_55_56_ladder_4 = _2093;
                frontier_phi_55_56_ladder_5 = _2091;
            }
            _2235 = frontier_phi_55_56_ladder_5;
            _2237 = frontier_phi_55_56_ladder_4;
            _2239 = frontier_phi_55_56_ladder_3;
            _2241 = frontier_phi_55_56_ladder_2;
            _2243 = frontier_phi_55_56_ladder;
            _2245 = frontier_phi_55_56_ladder_1;
        }
        float _2250 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
        _1991 = (_2250 * _2241) + _1722;
        _1993 = (_2250 * _2243) + _1723;
        _1995 = (_2250 * _2245) + _1724;
        _1997 = ((_2235 * 0.039999999105930328369140625) * _2250) + _1875;
        _1999 = ((_2237 * 0.039999999105930328369140625) * _2250) + _1876;
        _2001 = ((_2239 * 0.039999999105930328369140625) * _2250) + _1877;
    }
    else
    {
        _1991 = _1722;
        _1993 = _1723;
        _1995 = _1724;
        _1997 = _1875;
        _1999 = _1876;
        _2001 = _1877;
    }
    uint _2007 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _3831 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3842 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3853 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2038 = (((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1991 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _619))) + ((_1997 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _293) * _500.x) * cbInstanceData._m0[_2007].x);
    float _2040 = ((((cbMtdParam._m0[12u].y * _293) * _500.y) * cbInstanceData._m0[_2007].y) + ((_1999 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1993 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _619)));
    float _2042 = ((((cbMtdParam._m0[12u].z * _293) * _500.z) * cbInstanceData._m0[_2007].z) + ((_2001 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1430)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1995 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _619)));
    uint _2046 = _594 + 6u;
    float _2054 = _553 / cbSceneParam._m0[86u].x;
    float _2055 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2069 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2071 = _2069.x;
    float _2072 = _2069.y;
    float _2073 = _2069.z;
    float _2074 = _2069.w;
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2116 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2117 = _2116 / _540;
        float _2128 = _2117 * _267;
        float _2129 = _268 * _2117;
        float _2130 = (-0.0) - _2129;
        float _2131 = _2117 * _269;
        float _2133 = (cbSceneParam._m0[77u].w * _2130) / _2116;
        float _2134 = _2133 + cbSceneParam._m0[79u].w;
        float _2135 = cbSceneParam._m0[79u].w - _2129;
        float _2141 = sqrt(((_2128 * _2128) + (_2129 * _2129)) + (_2131 * _2131));
        float _2144 = (1.0 - (cbSceneParam._m0[77u].w / _2116)) * _2141;
        float _2150 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2152 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2361;
        if (abs((_2130 - _2133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2361 = ((((_2134 > 0.0) ? exp2(_2150 * _2134) : (2.0 - exp2(_2152 * _2134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2144;
        }
        else
        {
            float _2296 = 1.0 / cbSceneParam._m0[80u].x;
            float _2297 = isnan(_2135) ? _2134 : (isnan(_2134) ? _2135 : max(_2134, _2135));
            float _2298 = isnan(_2135) ? _2134 : (isnan(_2134) ? _2135 : min(_2134, _2135));
            float _2307 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : min(_2297, 0.0));
            float _2308 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : min(_2298, 0.0));
            _2361 = ((abs(_2141 / _2130) * cbSceneParam._m0[80u].y) * ((((_2307 - _2308) * 2.0) - ((exp2(_2150 * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)))) - exp2(_2150 * (isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))))) * _2296)) - ((exp2(_2152 * _2307) - exp2(_2152 * _2308)) * _2296))) + (_2144 * cbSceneParam._m0[80u].z);
        }
        vec4 _2363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2054, _2055, 1.0), 0.0);
        float _2372 = exp2((_2361 * (-1.44269502162933349609375)) * (1.0 - _2363.w));
        float _2373 = log2(_2372);
        float _2389 = log2(_2074);
        _2154 = (exp2(_2389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].x)) * _2363.x) / cbSceneParam._m0[78u].x)) + _2071;
        _2156 = (exp2(_2389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].y)) * _2363.y) / cbSceneParam._m0[78u].y)) + _2072;
        _2158 = (exp2(_2389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2373 * cbSceneParam._m0[78u].z)) * _2363.z) / cbSceneParam._m0[78u].z)) + _2073;
        _2160 = _2372 * _2074;
    }
    else
    {
        _2154 = _2071;
        _2156 = _2072;
        _2158 = _2073;
        _2160 = _2074;
    }
    float _2172 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2173 = _2172 == 3.0;
    float _2174 = log2(_2160);
    float _2181 = exp2(_2174 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)));
    float _2182 = exp2(_2174 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    float _2183 = exp2(_2174 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2192 = (_2172 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2192 * (_2173 ? _2181 : (_2181 + (cbSceneParam._m0[72u].w * _2154)));
    SV_Target.y = _2192 * (_2173 ? _2182 : (_2182 + (cbSceneParam._m0[72u].w * _2156)));
    SV_Target.z = _2192 * (_2173 ? _2183 : (_2183 + (cbSceneParam._m0[72u].w * _2158)));
    SV_Target.w = cbInstanceData._m0[_2046].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2046].w;
}


