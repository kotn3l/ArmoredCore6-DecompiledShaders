#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D Test_M_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D Test_M_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D Test_M_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D Test_M_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _455;
float _3483;
float _3484;
float _3485;
float _3486;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _197 = _196 * _189;
    float _198 = _196 * _190;
    float _199 = _196 * _191;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _295 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _314 = (((cbMtdParam._m0[10u].x - cbMtdParam._m0[11u].x) * _301) + cbMtdParam._m0[11u].x) * _295.x;
    float _316 = (((cbMtdParam._m0[10u].y - cbMtdParam._m0[11u].y) * _301) + cbMtdParam._m0[11u].y) * _295.y;
    float _318 = (((cbMtdParam._m0[10u].z - cbMtdParam._m0[11u].z) * _301) + cbMtdParam._m0[11u].z) * _295.z;
    vec4 _330 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = _330.z;
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3495 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))));
    vec4 _383 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _396 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _403 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _419 = (-0.0) - dot(vec3(_275, _276, _277), vec3(_396 * _197, _396 * _198, _396 * _199));
    float _420 = (-0.0) - dot(vec3(_275, _276, _277), vec3(_403 * _211, _403 * _212, _403 * _213));
    float _421 = (-0.0) - dot(vec3(_275, _276, _277), vec3((-0.0) - _218, (-0.0) - _219, (-0.0) - _220));
    float _425 = inversesqrt(dot(vec3(_419, _420, _421), vec3(_419, _420, _421)));
    float _426 = _425 * _421;
    float _431 = ((cbMtdParam._m0[15u].y * _419) * _425) + (((_383.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].w);
    float _432 = ((cbMtdParam._m0[15u].z * _420) * _425) + (((_383.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].x);
    float _435 = fract(cbMtdParam._m0[15u].y * TEXCOORD.x);
    float _436 = fract(cbMtdParam._m0[15u].z * TEXCOORD.y);
    float _453;
    float _456;
    float _458;
    if (_431 > 0.0)
    {
        float _439 = (1.0 - _435) / _431;
        _453 = _439;
        _456 = ((cbMtdParam._m0[14u].x + 1.0) - fract(_439 * _426)) * 0.16666667163372039794921875;
        _458 = (fract((_439 * _432) + _436) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_5_4_ladder;
        float frontier_phi_5_4_ladder_1;
        float frontier_phi_5_4_ladder_2;
        if (_431 < 0.0)
        {
            float _454 = ((-0.0) - _435) / _431;
            frontier_phi_5_4_ladder = (fract(_454 * _426) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_5_4_ladder_1 = (fract((_454 * _432) + _436) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_5_4_ladder_2 = _454;
        }
        else
        {
            frontier_phi_5_4_ladder = 0.0;
            frontier_phi_5_4_ladder_1 = 0.0;
            frontier_phi_5_4_ladder_2 = _455;
        }
        _453 = frontier_phi_5_4_ladder_2;
        _456 = frontier_phi_5_4_ladder;
        _458 = frontier_phi_5_4_ladder_1;
    }
    float _484;
    float _486;
    float _488;
    if (_432 > 0.0)
    {
        float _471 = (1.0 - _436) / _432;
        float frontier_phi_10_7_ladder;
        float frontier_phi_10_7_ladder_1;
        float frontier_phi_10_7_ladder_2;
        if (_471 < _453)
        {
            frontier_phi_10_7_ladder = (fract(_471 * _426) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_10_7_ladder_1 = (fract((_471 * _431) + _435) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
            frontier_phi_10_7_ladder_2 = _471;
        }
        else
        {
            frontier_phi_10_7_ladder = _458;
            frontier_phi_10_7_ladder_1 = _456;
            frontier_phi_10_7_ladder_2 = _453;
        }
        _484 = frontier_phi_10_7_ladder_2;
        _486 = frontier_phi_10_7_ladder_1;
        _488 = frontier_phi_10_7_ladder;
    }
    else
    {
        float frontier_phi_10_8_ladder;
        float frontier_phi_10_8_ladder_1;
        float frontier_phi_10_8_ladder_2;
        if (_432 < 0.0)
        {
            float _485 = ((-0.0) - _436) / _432;
            float frontier_phi_10_8_ladder_11_ladder;
            float frontier_phi_10_8_ladder_11_ladder_1;
            float frontier_phi_10_8_ladder_11_ladder_2;
            if (_485 < _453)
            {
                frontier_phi_10_8_ladder_11_ladder = fract(_485 * _426) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_1 = (fract((_485 * _431) + _435) + cbMtdParam._m0[14u].x) * 0.16666667163372039794921875;
                frontier_phi_10_8_ladder_11_ladder_2 = _485;
            }
            else
            {
                frontier_phi_10_8_ladder_11_ladder = _458;
                frontier_phi_10_8_ladder_11_ladder_1 = _456;
                frontier_phi_10_8_ladder_11_ladder_2 = _453;
            }
            frontier_phi_10_8_ladder = frontier_phi_10_8_ladder_11_ladder;
            frontier_phi_10_8_ladder_1 = frontier_phi_10_8_ladder_11_ladder_1;
            frontier_phi_10_8_ladder_2 = frontier_phi_10_8_ladder_11_ladder_2;
        }
        else
        {
            frontier_phi_10_8_ladder = _458;
            frontier_phi_10_8_ladder_1 = _456;
            frontier_phi_10_8_ladder_2 = _453;
        }
        _484 = frontier_phi_10_8_ladder_2;
        _486 = frontier_phi_10_8_ladder_1;
        _488 = frontier_phi_10_8_ladder;
    }
    float _492 = (_426 > 0.0) ? (cbMtdParam._m0[13u].w / _426) : 5000.0;
    float _505;
    float _506;
    if (_492 < _484)
    {
        _505 = ((_435 + cbMtdParam._m0[14u].x) + (_492 * _431)) * 0.16666667163372039794921875;
        _506 = (((_492 * _432) + _436) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _505 = _486;
        _506 = _488;
    }
    vec4 _508 = texture(sampler2D(Test_M_Interior_snp_0_Texture2D_5, SS_WrapLinear), vec2(_505, _506));
    float _515 = fma(_347, _218, fma(_340, _211, _338 * _197));
    float _518 = fma(_347, _219, fma(_340, _212, _338 * _198));
    float _521 = fma(_347, _220, fma(_340, _213, _338 * _199));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3506 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _529 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3528 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3539 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _548 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _552 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _553 = _275 * _552;
    float _554 = _276 * _552;
    float _555 = _277 * _552;
    vec4 _560 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _562 = _560.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _725 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _731 = (cbMatDynParam._m0[5u].x * _725) + cbMatDynParam._m0[5u].y;
        float _3550 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _736 = (cbMatDynParam._m0[5u].z * _725) + cbMatDynParam._m0[5u].w;
        float _3561 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) - _732)) + _732) < ((_562 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _604 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _607 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = _620 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3572 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _645 = _642.x * TEXCOORD.z;
    float _646 = dot(vec3(_526, _527, _528), vec3(_553, _554, _555));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _526) - _553;
    float _654 = (_649 * _527) - _554;
    float _655 = (_649 * _528) - _555;
    float _659 = abs(dot(vec3(_553, _554, _555), vec3(_526, _527, _528)));
    float _3605 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_529);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _774 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _778 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _802 = _706 + _526;
        float _803 = _710 + _527;
        float _804 = _714 + _528;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _770;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _774;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _778;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_526, _527, _528), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3653 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_526, _527, _528), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3686 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_526, _527, _528), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3719 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1045 = _874;
        _1046 = _873;
        _1047 = _885;
        _1048 = _884;
        _1049 = _883;
        _1050 = _895;
        _1051 = _894;
        _1052 = _893;
        _1053 = _908;
        _1054 = _907;
        _1055 = _906;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _455;
        _1045 = _455;
        _1046 = _455;
        _1047 = _455;
        _1048 = _455;
        _1049 = _455;
        _1050 = _455;
        _1051 = _455;
        _1052 = _455;
        _1053 = _455;
        _1054 = _455;
        _1055 = _455;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1091 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1095 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1118 = _706 + _526;
        float _1119 = _710 + _527;
        float _1120 = _714 + _528;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_526, _527, _528), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3782 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_526, _527, _528), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3815 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_526, _527, _528), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3848 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _455;
        _1357 = _455;
        _1358 = _455;
        _1359 = _455;
        _1360 = _455;
        _1361 = _455;
        _1362 = _455;
        _1363 = _455;
        _1364 = _455;
        _1365 = _455;
        _1366 = _455;
        _1367 = _455;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = _655 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1554 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1557 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_31_29_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_31_29_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_31_29_ladder = 5000.0;
            }
            _1585 = frontier_phi_31_29_ladder;
        }
        float _1757;
        if (_1554 > 0.0)
        {
            _1757 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1757 = frontier_phi_40_36_ladder;
        }
        float _2202;
        if (_1557 > 0.0)
        {
            _2202 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2202 = frontier_phi_52_47_ladder;
        }
        float _2204 = isnan(_1757) ? _1585 : (isnan(_1585) ? _1757 : min(_1585, _1757));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1551) + _1540;
        float _2210 = (_2205 * _1554) + _1544;
        float _2211 = (_2205 * _1557) + _1548;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_30_52_ladder;
        float frontier_phi_30_52_ladder_1;
        float frontier_phi_30_52_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_30_52_ladder = 0.0;
            frontier_phi_30_52_ladder_1 = 0.0;
            frontier_phi_30_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_30_52_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_30_52_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_30_52_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_30_52_ladder_2;
        _1575 = frontier_phi_30_52_ladder_1;
        _1577 = frontier_phi_30_52_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1652 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1655 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1762;
        if (_1649 > 0.0)
        {
            _1762 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_42_38_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_42_38_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_42_38_ladder = 5000.0;
            }
            _1762 = frontier_phi_42_38_ladder;
        }
        float _2229;
        if (_1652 > 0.0)
        {
            _2229 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_54_49_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_54_49_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_54_49_ladder = 5000.0;
            }
            _2229 = frontier_phi_54_49_ladder;
        }
        float _2595;
        if (_1655 > 0.0)
        {
            _2595 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_66_61_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_66_61_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_66_61_ladder = 5000.0;
            }
            _2595 = frontier_phi_66_61_ladder;
        }
        float _2597 = isnan(_2229) ? _1762 : (isnan(_1762) ? _2229 : min(_1762, _2229));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1649) + _1638;
        float _2603 = (_2598 * _1652) + _1642;
        float _2604 = (_2598 * _1655) + _1646;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_39_66_ladder;
        float frontier_phi_39_66_ladder_1;
        float frontier_phi_39_66_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_39_66_ladder = 0.0;
            frontier_phi_39_66_ladder_1 = 0.0;
            frontier_phi_39_66_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_39_66_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_39_66_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_39_66_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_39_66_ladder_2;
        _1676 = frontier_phi_39_66_ladder_1;
        _1678 = frontier_phi_39_66_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1582);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_674 * _661)) * _645;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1573)) + _1573);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1575)) + _1575);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1577)) + _1577);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1749 = _1736 / _1748;
    float _1750 = _1740 / _1748;
    float _1751 = _1744 / _1748;
    float _1898;
    float _1899;
    float _1900;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1778 = ((uint(_1751 > cbSceneParam._m0[59u].y) + uint(_1751 > cbSceneParam._m0[59u].x)) + uint(_1751 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1779 = _1778 + 43u;
        uint _1787 = _1778 + 44u;
        uint _1795 = _1778 + 45u;
        uint _1803 = _1778 + 46u;
        float _1814 = fma(_1748, cbSceneParam._m0[_1779].w, fma(_1744, cbSceneParam._m0[_1779].z, fma(_1740, cbSceneParam._m0[_1779].y, _1736 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1748, cbSceneParam._m0[_1787].w, fma(_1744, cbSceneParam._m0[_1787].z, fma(_1740, cbSceneParam._m0[_1787].y, _1736 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1748, cbSceneParam._m0[_1803].w, fma(_1744, cbSceneParam._m0[_1803].z, fma(_1740, cbSceneParam._m0[_1803].y, _1736 * cbSceneParam._m0[_1803].x)));
        float _1831 = cbSceneParam._m0[33u].z * _1826;
        float _1833 = cbSceneParam._m0[33u].w * _1826;
        float _1836 = fma(_1748, cbSceneParam._m0[_1795].w, fma(_1744, cbSceneParam._m0[_1795].z, fma(_1740, cbSceneParam._m0[_1795].y, _1736 * cbSceneParam._m0[_1795].x))) / _1826;
        float _1884 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
        float _3974 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1891 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1831 + _1814) / _1826, (_1833 + _1818) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1814) / _1826, (_1818 - _1831) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1831) / _1826, (_1818 - _1833) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1833) / _1826, (_1831 + _1818) / _1826), _1836), 0.0)).x), vec4(0.25)));
        _1898 = 1.0 - (_1891 * cbSceneParam._m0[34u].x);
        _1899 = 1.0 - (_1891 * cbSceneParam._m0[34u].y);
        _1900 = 1.0 - (_1891 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1898 = 1.0;
        _1899 = 1.0;
        _1900 = 1.0;
    }
    float _1964;
    float _1966;
    float _1968;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1952 = fma(_1748, cbSceneParam._m0[63u].w, fma(_1744, cbSceneParam._m0[63u].z, fma(_1740, cbSceneParam._m0[63u].y, _1736 * cbSceneParam._m0[63u].x)));
        float _1953 = fma(_1748, cbSceneParam._m0[60u].w, fma(_1744, cbSceneParam._m0[60u].z, fma(_1740, cbSceneParam._m0[60u].y, _1736 * cbSceneParam._m0[60u].x))) / _1952;
        float _1954 = fma(_1748, cbSceneParam._m0[61u].w, fma(_1744, cbSceneParam._m0[61u].z, fma(_1740, cbSceneParam._m0[61u].y, _1736 * cbSceneParam._m0[61u].x))) / _1952;
        float frontier_phi_51_50_ladder;
        float frontier_phi_51_50_ladder_1;
        float frontier_phi_51_50_ladder_2;
        if ((((_1953 >= cbSceneParam._m0[64u].x) && (_1954 >= cbSceneParam._m0[64u].y)) && (_1953 <= cbSceneParam._m0[64u].z)) && (_1954 <= cbSceneParam._m0[64u].w))
        {
            float _2242 = fma(_1748, cbSceneParam._m0[62u].w, fma(_1744, cbSceneParam._m0[62u].z, fma(_1740, cbSceneParam._m0[62u].y, _1736 * cbSceneParam._m0[62u].x))) / _1952;
            float _2246 = isnan(cbSceneParam._m0[41u].w) ? _2242 : (isnan(_2242) ? cbSceneParam._m0[41u].w : max(_2242, cbSceneParam._m0[41u].w));
            float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
            float _3990 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
            float _2296 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1953, cbSceneParam._m0[33u].w + _1954), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1953, _1954 - cbSceneParam._m0[33u].z), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].z, _1954 - cbSceneParam._m0[33u].w), _2246), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1954), _2246), 0.0)).x), vec4(0.25)));
            float _2300 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
            float _2301 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
            float _2302 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
            frontier_phi_51_50_ladder = isnan(_2301) ? _1899 : (isnan(_1899) ? _2301 : min(_1899, _2301));
            frontier_phi_51_50_ladder_1 = isnan(_2300) ? _1898 : (isnan(_1898) ? _2300 : min(_1898, _2300));
            frontier_phi_51_50_ladder_2 = isnan(_2302) ? _1900 : (isnan(_1900) ? _2302 : min(_1900, _2302));
        }
        else
        {
            frontier_phi_51_50_ladder = _1899;
            frontier_phi_51_50_ladder_1 = _1898;
            frontier_phi_51_50_ladder_2 = _1900;
        }
        _1964 = frontier_phi_51_50_ladder_1;
        _1966 = frontier_phi_51_50_ladder;
        _1968 = frontier_phi_51_50_ladder_2;
    }
    else
    {
        _1964 = _1898;
        _1966 = _1899;
        _1968 = _1900;
    }
    uvec4 _1973 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1975 = _1973.x * 14u;
    uint _1976 = _1975 + 13u;
    float _1981 = _645 + (-1.0);
    float _1984 = (cbLight._m0[_1976].x * _1981) + 1.0;
    float _1985 = (cbLight._m0[_1976].y * _1981) + 1.0;
    uint _1986 = _1975 + 5u;
    float _1992 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1996 = _1975 + 4u;
    float _2006 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2010 = _1975 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_526, _527, _528));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_526, _527, _528));
    float _4026 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4037 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1986].x * _1992) * _2031) + (((cbLight._m0[_1996].x * _1964) * _2006) * _2029);
    float _2039 = ((_1992 * cbLight._m0[_1986].y) * _2031) + (((cbLight._m0[_1996].y * _1966) * _2006) * _2029);
    float _2040 = ((_1992 * cbLight._m0[_1986].z) * _2031) + (((cbLight._m0[_1996].z * _1968) * _2006) * _2029);
    uint _2042 = _1975 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _529) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1975].x + _553;
    float _2058 = cbLight._m0[_1975].y + _554;
    float _2059 = cbLight._m0[_1975].z + _555;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1975].xyz));
    float _4048 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _2071 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2072 = dot(vec3(_526, _527, _528), vec3(_2064, _2065, _2066));
    float _4070 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2064, _2065, _2066));
    float _4081 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2096 = 1.0 - _2056;
    float _2107 = (0.5 / (((_2071 * ((_2070 * _2096) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2096) + _2056) * _2070))) * _2070;
    float _4092 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2123 = _1975 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _529) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_2010].x + _553;
    float _2137 = cbLight._m0[_2010].y + _554;
    float _2138 = cbLight._m0[_2010].z + _555;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_2010].xyz));
    float _4103 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2150 = dot(vec3(_526, _527, _528), vec3(_2143, _2144, _2145));
    float _4114 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2143, _2144, _2145));
    float _4125 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2172 = 1.0 - _2135;
    float _2182 = (0.5 / (((_2071 * ((_2149 * _2172) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2172) + _2135) * _2149))) * _2149;
    float _4136 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2194 = (((_2171 * cbLight._m0[_2123].x) * _2184) * _1992) + ((((cbLight._m0[_2042].x * _1964) * _2095) * _2109) * _2006);
    float _2195 = (((_2171 * cbLight._m0[_2123].y) * _2184) * _1992) + ((((cbLight._m0[_2042].y * _1966) * _2095) * _2109) * _2006);
    float _2196 = (((_2171 * cbLight._m0[_2123].z) * _2184) * _1992) + ((((cbLight._m0[_2042].z * _1968) * _2095) * _2109) * _2006);
    float _2358;
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    if (_1973.y == 0u)
    {
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2315)));
        float _2336 = (log2(_1751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            uint _2659 = 0u;
            uint _2668;
            bool _2669;
            for (;;)
            {
                _2668 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                _2669 = _2668 == 0u;
                float frontier_phi_77_pred;
                float frontier_phi_77_pred_1;
                float frontier_phi_77_pred_2;
                float frontier_phi_77_pred_3;
                float frontier_phi_77_pred_4;
                float frontier_phi_77_pred_5;
                if (_2669)
                {
                    frontier_phi_77_pred = _2653;
                    frontier_phi_77_pred_1 = _2658;
                    frontier_phi_77_pred_2 = _2657;
                    frontier_phi_77_pred_3 = _2656;
                    frontier_phi_77_pred_4 = _2655;
                    frontier_phi_77_pred_5 = _2654;
                }
                else
                {
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    uint _2825;
                    _2819 = _2653;
                    _2820 = _2654;
                    _2821 = _2655;
                    _2822 = _2656;
                    _2823 = _2657;
                    _2824 = _2658;
                    _2825 = _2668;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2829 = uint(findLSB(_2825)) + (_2659 << 5u);
                        uint _2826 = (_2825 + 4294967295u) & _2825;
                        uint _2831 = _2829 * 48u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2851 = (_2829 * 48u) + 4u;
                        vec4 _2864 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2870 = (_2829 * 48u) + 8u;
                        vec3 _2881 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x));
                        float _2885 = _2845.x - _1749;
                        float _2886 = _2845.y - _1750;
                        float _2887 = _2845.z - _1751;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_601, _604, _607), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2845.w);
                        float _4157 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2902 = sqrt(_2888) * _2864.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2895) + _2906;
                        float _2912 = _2902 * _2902;
                        float _2916 = ((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2901) / ((_2912 * 0.699999988079071044921875) + 1.0);
                        float _2920 = (-0.0) - _1749;
                        float _2921 = (-0.0) - _1750;
                        float _2922 = (-0.0) - _1751;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2927 = _2926 * _2920;
                        float _2928 = _2926 * _2921;
                        float _2929 = _2926 * _2922;
                        float _2936 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                        float _2937 = 1.0 - _661;
                        float _2944 = sqrt(1.0 - ((1.0 - (_2937 * _2937)) * (1.0 - (_2936 * _2936))));
                        float _2945 = _2944 * _2944;
                        float _2946 = _2945 * _2945;
                        float _2947 = _2927 + _2892;
                        float _2948 = _2928 + _2893;
                        float _2949 = _2929 + _2894;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2957 = dot(vec3(_601, _604, _607), vec3(_2927, _2928, _2929));
                        float _4173 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2961 = dot(vec3(_601, _604, _607), vec3(_2953 * _2947, _2953 * _2948, _2953 * _2949));
                        float _4184 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2968 = ((_2964 * _2964) * (_2946 + (-1.0))) + 1.0;
                        float _2969 = _2905 * _2945;
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2895) + _2970;
                        float _4195 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2975 = 1.0 - _2945;
                        float _2985 = (0.5 / (((_2974 * ((_2960 * _2975) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2945) * _2960))) * _2974;
                        float _4206 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2996 = (((_2946 * 3.1415927410125732421875) * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) / ((_2968 * _2968) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2749 = (_2916 * _2864.x) + _2822;
                        _2750 = (_2916 * _2864.y) + _2823;
                        _2751 = (_2916 * _2864.z) + _2824;
                        _2746 = (_2996 * _2881.x) + _2819;
                        _2747 = (_2996 * _2881.y) + _2820;
                        _2748 = (_2996 * _2881.z) + _2821;
                        if (_2826 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2826;
                        }
                    }
                    frontier_phi_77_pred = _2746;
                    frontier_phi_77_pred_1 = _2751;
                    frontier_phi_77_pred_2 = _2750;
                    frontier_phi_77_pred_3 = _2749;
                    frontier_phi_77_pred_4 = _2748;
                    frontier_phi_77_pred_5 = _2747;
                }
                _2476 = frontier_phi_77_pred;
                _2486 = frontier_phi_77_pred_1;
                _2484 = frontier_phi_77_pred_2;
                _2482 = frontier_phi_77_pred_3;
                _2480 = frontier_phi_77_pred_4;
                _2478 = frontier_phi_77_pred_5;
                uint _2660 = _2659 + 1u;
                if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2653 = _2476;
                    _2654 = _2478;
                    _2655 = _2480;
                    _2656 = _2482;
                    _2657 = _2484;
                    _2658 = _2486;
                    _2659 = _2660;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((4294967295u << _2492) & _2346) == 0u)
        {
            _2621 = _2475;
            _2623 = _2477;
            _2625 = _2479;
            _2627 = _2481;
            _2629 = _2483;
            _2631 = _2485;
        }
        else
        {
            float _2646 = inversesqrt(dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751)));
            float _2647 = _2646 * _1749;
            float _2648 = _2646 * _1750;
            float _2649 = _2646 * _1751;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2802 = _2475;
                float _2803 = _2477;
                float _2804 = _2479;
                float _2805 = _2481;
                float _2806 = _2483;
                float _2807 = _2485;
                uint _2808 = _2492;
                uint _2817;
                bool _2818;
                for (;;)
                {
                    _2817 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                    _2818 = _2817 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2818)
                    {
                        frontier_phi_88_pred = _2807;
                        frontier_phi_88_pred_1 = _2806;
                        frontier_phi_88_pred_2 = _2805;
                        frontier_phi_88_pred_3 = _2804;
                        frontier_phi_88_pred_4 = _2803;
                        frontier_phi_88_pred_5 = _2802;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3023 = _2802;
                        float _3024 = _2803;
                        float _3025 = _2804;
                        float _3026 = _2805;
                        float _3027 = _2806;
                        float _3028 = _2807;
                        uint _3029 = _2817;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3098;
                        vec4 _3114;
                        float _3161;
                        bool _3162;
                        for (;;)
                        {
                            uint _3040 = ((_2808 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3085 = (_3040 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3040 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3117 = (_3040 * 40u) + 24u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3136 = (_3040 * 40u) + 28u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3161 = fma(_1751, _3149.z, fma(_1750, _3149.y, _3149.x * _1749)) + _3149.w;
                            _3162 = !((fma(_1751, _3130.z, fma(_1750, _3130.y, _3130.x * _1749)) + _3130.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3162)
                            {
                                float _3189 = _3055.x - _1749;
                                float _3190 = _3055.y - _1750;
                                float _3191 = _3055.z - _1751;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3056 * _3056));
                                float _4217 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3207 = sqrt(_3192) * _3071.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3213 = ((1.0 - _3210) * dot(vec3(_3196, _3197, _3198), vec3(_601, _604, _607))) + _3210;
                                float _3216 = _3207 * _3207;
                                float _3220 = (fma(_1751, _3098.z, fma(_1750, _3098.y, _3098.x * _1749)) + _3098.w) / _3161;
                                float _3221 = (fma(_1751, _3114.z, fma(_1750, _3114.y, _3114.x * _1749)) + _3114.w) / _3161;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4233 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3203) / ((_3216 * 0.699999988079071044921875) + 1.0));
                                float _3239 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                                float _3240 = 1.0 - _661;
                                float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                                float _3248 = _3247 * _3247;
                                float _3249 = _3248 * _3248;
                                float _3250 = _3196 - _2647;
                                float _3251 = _3197 - _2648;
                                float _3252 = _3198 - _2649;
                                float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                                float _3260 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2647, (-0.0) - _2648, (-0.0) - _2649));
                                float _4244 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3264 = dot(vec3(_601, _604, _607), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                                float _4255 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                                float _3272 = _3209 * _3248;
                                float _3273 = _3272 * _3272;
                                float _3279 = ((1.0 - _3273) * dot(vec3(_601, _604, _607), vec3(_3196, _3197, _3198))) + _3273;
                                float _4266 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3281 = 1.0 - _3248;
                                float _3291 = (0.5 / (((_3280 * ((_3263 * _3281) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3248) * _3263))) * _3280;
                                float _4277 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3301 = (_3226 * _3203) * (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) / ((_3271 * _3271) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3227 * _3071.z;
                                frontier_phi_94_pred_1 = _3227 * _3071.y;
                                frontier_phi_94_pred_2 = _3227 * _3071.x;
                                frontier_phi_94_pred_3 = _3301 * _3083.z;
                                frontier_phi_94_pred_4 = _3301 * _3083.y;
                                frontier_phi_94_pred_5 = _3301 * _3083.x;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_94_pred;
                            _3309 = frontier_phi_94_pred_1;
                            _3308 = frontier_phi_94_pred_2;
                            _3307 = frontier_phi_94_pred_3;
                            _3306 = frontier_phi_94_pred_4;
                            _3305 = frontier_phi_94_pred_5;
                            _3013 = _3308 + _3026;
                            _3014 = _3309 + _3027;
                            _3015 = _3310 + _3028;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            _3012 = _3307 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3015;
                        frontier_phi_88_pred_1 = _3014;
                        frontier_phi_88_pred_2 = _3013;
                        frontier_phi_88_pred_3 = _3012;
                        frontier_phi_88_pred_4 = _3011;
                        frontier_phi_88_pred_5 = _3010;
                    }
                    _2632 = frontier_phi_88_pred;
                    _2630 = frontier_phi_88_pred_1;
                    _2628 = frontier_phi_88_pred_2;
                    _2626 = frontier_phi_88_pred_3;
                    _2624 = frontier_phi_88_pred_4;
                    _2622 = frontier_phi_88_pred_5;
                    uint _2809 = _2808 + 1u;
                    if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2802 = _2622;
                        _2803 = _2624;
                        _2804 = _2626;
                        _2805 = _2628;
                        _2806 = _2630;
                        _2807 = _2632;
                        _2808 = _2809;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2628;
                frontier_phi_68_69_ladder_1 = _2632;
                frontier_phi_68_69_ladder_2 = _2630;
                frontier_phi_68_69_ladder_3 = _2626;
                frontier_phi_68_69_ladder_4 = _2624;
                frontier_phi_68_69_ladder_5 = _2622;
            }
            else
            {
                frontier_phi_68_69_ladder = _2481;
                frontier_phi_68_69_ladder_1 = _2485;
                frontier_phi_68_69_ladder_2 = _2483;
                frontier_phi_68_69_ladder_3 = _2479;
                frontier_phi_68_69_ladder_4 = _2477;
                frontier_phi_68_69_ladder_5 = _2475;
            }
            _2621 = frontier_phi_68_69_ladder_5;
            _2623 = frontier_phi_68_69_ladder_4;
            _2625 = frontier_phi_68_69_ladder_3;
            _2627 = frontier_phi_68_69_ladder;
            _2629 = frontier_phi_68_69_ladder_2;
            _2631 = frontier_phi_68_69_ladder_1;
        }
        float _2636 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2358 = (_2636 * _2627) + _2038;
        _2360 = (_2636 * _2629) + _2039;
        _2362 = (_2636 * _2631) + _2040;
        _2364 = ((_2621 * 0.039999999105930328369140625) * _2636) + _2194;
        _2366 = ((_2623 * 0.039999999105930328369140625) * _2636) + _2195;
        _2368 = ((_2625 * 0.039999999105930328369140625) * _2636) + _2196;
    }
    else
    {
        _2358 = _2038;
        _2360 = _2039;
        _2362 = _2040;
        _2364 = _2194;
        _2366 = _2195;
        _2368 = _2196;
    }
    uint _2374 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _4293 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4304 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4315 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2405 = (((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2358 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _645))) + ((_2364 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[12u].x * _301) * _508.x) * cbInstanceData._m0[_2374].x);
    float _2407 = ((((cbMtdParam._m0[12u].y * _301) * _508.y) * cbInstanceData._m0[_2374].y) + ((_2366 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2360 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _645)));
    float _2409 = ((((cbMtdParam._m0[12u].z * _301) * _508.z) * cbInstanceData._m0[_2374].z) + ((_2368 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2362 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _645)));
    float _2410 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2411 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2412 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    uint _2413 = _620 + 6u;
    float _2421 = _580 / cbSceneParam._m0[86u].x;
    float _2422 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2436 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, (log2((isnan(cbSceneParam._m0[77u].w) ? _548 : (isnan(_548) ? cbSceneParam._m0[77u].w : min(_548, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2438 = _2436.x;
    float _2439 = _2436.y;
    float _2440 = _2436.z;
    float _2441 = _2436.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_548 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_548) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _548 : min(cbSceneParam._m0[80u].w, _548));
        float _2501 = _2500 / _548;
        float _2512 = _2501 * _275;
        float _2513 = _276 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2515 = _2501 * _277;
        float _2517 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2513;
        float _2525 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2514 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2682 = 1.0 / cbSceneParam._m0[80u].x;
            float _2683 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2684 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2693 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : min(_2683, 0.0));
            float _2694 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : min(_2684, 0.0));
            _2759 = ((abs(_2525 / _2514) * cbSceneParam._m0[80u].y) * ((((_2693 - _2694) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0))))) * _2682)) - ((exp2(_2535 * _2693) - exp2(_2535 * _2694)) * _2682))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2421, _2422, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2441);
        _2537 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2438;
        _2539 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2439;
        _2541 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2440;
        _2543 = _2770 * _2441;
    }
    else
    {
        _2537 = _2438;
        _2539 = _2439;
        _2541 = _2440;
        _2543 = _2441;
    }
    bool _2797;
    vec4 _2553;
    vec4 _2575;
    float _2577;
    float _2581;
    float _2582;
    float _2583;
    float _2584;
    bool _2594;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2557 = log2(_2543);
        float _2564 = exp2(_2557 * cbSceneParam._m0[78u].x) * _2410;
        float _2565 = exp2(_2557 * cbSceneParam._m0[78u].y) * _2411;
        float _2566 = exp2(_2557 * cbSceneParam._m0[78u].z) * _2412;
        float _2573 = _562 + (-0.5);
        _2575 = cbMtdParam._m0[1u];
        _2577 = _2575.y * _2573;
        float _2580 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2581 = _2580 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2537)));
        _2582 = _2580 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
        _2583 = _2580 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
        _2584 = _2573 * 0.999000012874603271484375;
        _2594 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2594)
        {
            if ((cbInstanceData._m0[_620 + 7u].x + _2584) < 0.5)
            {
                _2797 = true;
                break;
            }
        }
        uint _2717 = _621 + uint(_2553.w);
        if ((cbInstanceData._m0[_2717].w < 1.0) && ((cbInstanceData._m0[_2717].w + _2584) < 0.5))
        {
            _2797 = true;
            break;
        }
        if ((_2577 + 1.0) < _2575.x)
        {
            _2797 = true;
            break;
        }
        _2797 = false;
        break;
    }
    float _3001;
    if (_2797)
    {
        discard_state = true;
        _3001 = 0.0;
    }
    else
    {
        _3001 = cbInstanceData._m0[_2413].w;
    }
    SV_Target.x = _2581;
    SV_Target.y = _2582;
    SV_Target.z = _2583;
    SV_Target.w = _3001;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2413].w;
    discard_exit();
}


