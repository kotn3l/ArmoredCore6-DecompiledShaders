#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _819;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    vec4 _193 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _219 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _227 = (_219.x * cbMtdParam._m0[12u].x) + (_193.x * cbMtdParam._m0[9u].x);
    float _228 = (_219.y * cbMtdParam._m0[12u].y) + (_193.y * cbMtdParam._m0[9u].y);
    float _229 = (_219.z * cbMtdParam._m0[12u].z) + (_193.z * cbMtdParam._m0[9u].z);
    vec4 _251 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _280 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _305 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2961 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _307 = isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0));
    float _315 = (((_307 * _307) * (3.0 - (_307 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _322 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _323 = _322 * _172;
    float _324 = _322 * _173;
    float _325 = _322 * _174;
    float _2972 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _2983 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _2994 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_325, cbSceneParam._m0[5u].z, fma(_324, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _323));
    float _435 = fma(_325, cbSceneParam._m0[6u].z, fma(_324, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _323));
    float _438 = fma(_325, cbSceneParam._m0[7u].z, fma(_324, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _323));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _452 = _451 + 9u;
    uint _453 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _459 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0)))) * cbInstanceData._m0[_453].x;
    float _460 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_453].y;
    float _461 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0)))) * cbInstanceData._m0[_453].z;
    float _3005 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
    float _3016 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _476 = _473.x * TEXCOORD_4;
    float _477 = dot(vec3(_323, _324, _325), vec3(_402, _403, _404));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _323) - _402;
    float _485 = (_480 * _324) - _403;
    float _486 = (_480 * _325) - _404;
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _818;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _543 = fma(_516, cbModelParam._m0[26u].z, fma(_512, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508));
        float _547 = fma(_516, cbModelParam._m0[27u].z, fma(_512, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508));
        float _551 = fma(_516, cbModelParam._m0[28u].z, fma(_512, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508));
        float _576 = _508 + _323;
        float _577 = _512 + _324;
        float _578 = _516 + _325;
        float _588 = fma(_578, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _576)) - _543;
        float _589 = fma(_578, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _576)) - _547;
        float _590 = fma(_578, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _576)) - _551;
        float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
        float _607 = ((_594 * _588) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_543 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _608 = ((_594 * _589) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_547 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _609 = ((_594 * _590) / cbModelParam._m0[34u].z) + ((((((_551 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_607, _608, _609), 0.0);
        float _646 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_612.x + (-0.5));
        float _648 = _646 * (_612.y + (-0.5));
        float _649 = _646 * (_612.z + (-0.5));
        float _656 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_619.x + (-0.5));
        float _658 = _656 * (_619.y + (-0.5));
        float _659 = _656 * (_619.z + (-0.5));
        float _666 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_626.x + (-0.5));
        float _668 = _666 * (_626.y + (-0.5));
        float _669 = _666 * (_626.z + (-0.5));
        float _676 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_633.x + (-0.5));
        float _678 = _676 * (_633.y + (-0.5));
        float _679 = _676 * (_633.z + (-0.5));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = _647 * 0.5;
        float _684 = _657 * 0.5;
        float _685 = _667 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _700 = (dot(vec3(_323, _324, _325), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3053 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _710 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3064 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3075 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0))) * (_712 + 1.0))) + _717) * _680;
        float _727 = _648 * 0.5;
        float _728 = _658 * 0.5;
        float _729 = _668 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_323, _324, _325), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3086 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3097 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3108 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) * (_754 + 1.0))) + _759) * _681;
        float _769 = _649 * 0.5;
        float _770 = _659 * 0.5;
        float _771 = _669 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_323, _324, _325), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3119 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3130 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3141 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))) * (_796 + 1.0))) + _801) * _682;
        _818 = _649;
        _820 = _648;
        _821 = _647;
        _822 = _659;
        _823 = _658;
        _824 = _657;
        _825 = _669;
        _826 = _668;
        _827 = _667;
        _828 = _682;
        _829 = _681;
        _830 = _680;
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
    }
    else
    {
        _818 = _819;
        _820 = _819;
        _821 = _819;
        _822 = _819;
        _823 = _819;
        _824 = _819;
        _825 = _819;
        _826 = _819;
        _827 = _819;
        _828 = _819;
        _829 = _819;
        _830 = _819;
        _831 = 0.0;
        _832 = 0.0;
        _833 = 0.0;
    }
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _859 = fma(_516, cbModelParam._m0[30u].z, fma(_512, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _508));
        float _863 = fma(_516, cbModelParam._m0[31u].z, fma(_512, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _508));
        float _867 = fma(_516, cbModelParam._m0[32u].z, fma(_512, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _508));
        float _890 = _508 + _323;
        float _891 = _512 + _324;
        float _892 = _516 + _325;
        float _902 = fma(_892, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890)) - _859;
        float _903 = fma(_892, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890)) - _863;
        float _904 = fma(_892, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890)) - _867;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_859 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_863 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[35u].z) + ((((((_867 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _958 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_925.x + (-0.5));
        float _960 = _958 * (_925.y + (-0.5));
        float _961 = _958 * (_925.z + (-0.5));
        float _968 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_932.x + (-0.5));
        float _970 = _968 * (_932.y + (-0.5));
        float _971 = _968 * (_932.z + (-0.5));
        float _978 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_939.x + (-0.5));
        float _980 = _978 * (_939.y + (-0.5));
        float _981 = _978 * (_939.z + (-0.5));
        float _988 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_946.x + (-0.5));
        float _990 = _988 * (_946.y + (-0.5));
        float _991 = _988 * (_946.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_323, _324, _325), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3182 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3193 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3204 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))) * (_1022 + 1.0))) + _1027) * _992;
        float _1037 = _960 * 0.5;
        float _1038 = _970 * 0.5;
        float _1039 = _980 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_323, _324, _325), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3215 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3226 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3237 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))) * (_1064 + 1.0))) + _1069) * _993;
        float _1079 = _961 * 0.5;
        float _1080 = _971 * 0.5;
        float _1081 = _981 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_323, _324, _325), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3248 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3259 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3270 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_1106 + 1.0))) + _1111) * _994;
        _1128 = _961;
        _1129 = _960;
        _1130 = _959;
        _1131 = _971;
        _1132 = _970;
        _1133 = _969;
        _1134 = _981;
        _1135 = _980;
        _1136 = _979;
        _1137 = _994;
        _1138 = _993;
        _1139 = _992;
        _1140 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _819;
        _1129 = _819;
        _1130 = _819;
        _1131 = _819;
        _1132 = _819;
        _1133 = _819;
        _1134 = _819;
        _1135 = _819;
        _1136 = _819;
        _1137 = _819;
        _1138 = _819;
        _1139 = _819;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1152 = (cbModelParam._m0[1u].x * (_1140 - _831)) + _831;
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1175 = fma(_1154, cbSceneParam._m0[89u].z, fma(_1153, cbSceneParam._m0[89u].y, _1152 * cbSceneParam._m0[89u].x));
    float _1178 = fma(_1154, cbSceneParam._m0[90u].z, fma(_1153, cbSceneParam._m0[90u].y, _1152 * cbSceneParam._m0[90u].x));
    float _1181 = fma(_1154, cbSceneParam._m0[91u].z, fma(_1153, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1152));
    float _1196 = _484 * 0.5;
    float _1197 = _485 * 0.5;
    float _1198 = _486 * 0.5;
    float _1199 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1202 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1205 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_1128, _1131, _1134, _1137));
    float _1239;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1212 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_818, _822, _825, _828));
        float _1216 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_820, _823, _826, _829));
        float _1220 = dot(vec4(_1196, _1197, _1198, 1.0), vec4(_821, _824, _827, _830));
        float _1227 = dot(vec4(cbModelParam._m0[39u]), vec4(_1196, _1197, _1198, 1.0));
        _1239 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1239 = 1.0;
    }
    float _1250;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1241 = dot(vec4(cbModelParam._m0[40u]), vec4(_1196, _1197, _1198, 1.0));
        _1250 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1250 = 1.0;
    }
    float _1254 = (_1250 * cbModelParam._m0[1u].x) + (_1239 * (1.0 - cbModelParam._m0[1u].x));
    float _1263 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1344;
    float _1346;
    float _1348;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1311 = fma(_516, cbModelParam._m0[13u].z, fma(_512, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _508)) + cbModelParam._m0[13u].w;
        float _1315 = fma(_516, cbModelParam._m0[14u].z, fma(_512, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _508)) + cbModelParam._m0[14u].w;
        float _1319 = fma(_516, cbModelParam._m0[15u].z, fma(_512, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _508)) + cbModelParam._m0[15u].w;
        float _1322 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1325 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1328 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1354;
        if (_1322 > 0.0)
        {
            _1354 = abs((1.0 - _1311) / _1322);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1311 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1354 = frontier_phi_14_12_ladder;
        }
        float _1559;
        if (_1325 > 0.0)
        {
            _1559 = abs((1.0 - _1315) / _1325);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1315 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1559 = frontier_phi_23_19_ladder;
        }
        float _1748;
        if (_1328 > 0.0)
        {
            _1748 = abs((1.0 - _1319) / _1328);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1319 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1748 = frontier_phi_35_30_ladder;
        }
        float _1750 = isnan(_1559) ? _1354 : (isnan(_1354) ? _1559 : min(_1354, _1559));
        float _1751 = isnan(_1748) ? _1750 : (isnan(_1750) ? _1748 : min(_1750, _1748));
        float _1755 = (_1751 * _1322) + _1311;
        float _1756 = (_1751 * _1325) + _1315;
        float _1757 = (_1751 * _1328) + _1319;
        float _1758 = _1751 * 9.9999997473787516355514526367188e-05;
        float _1760 = (-1.0) - _1758;
        float _1762 = _1758 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1757 > _1762) || ((_1757 < _1760) || ((_1756 > _1762) || ((_1756 < _1760) || ((_1755 < _1760) || (_1755 > _1762))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1854 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1757, cbModelParam._m0[9u].z, fma(_1756, cbModelParam._m0[9u].y, _1755 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1757, cbModelParam._m0[10u].z, fma(_1756, cbModelParam._m0[10u].y, _1755 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1757, cbModelParam._m0[11u].z, fma(_1756, cbModelParam._m0[11u].y, _1755 * cbModelParam._m0[11u].x))), _1263);
            frontier_phi_13_35_ladder = _1854.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1854.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1854.x * cbModelParam._m0[1u].y;
        }
        _1344 = frontier_phi_13_35_ladder_2;
        _1346 = frontier_phi_13_35_ladder_1;
        _1348 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1263);
        _1344 = _1332.x * cbModelParam._m0[1u].y;
        _1346 = _1332.y * cbModelParam._m0[1u].y;
        _1348 = _1332.z * cbModelParam._m0[1u].y;
    }
    float _1351 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1407 = fma(_516, cbModelParam._m0[21u].z, fma(_512, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _508)) + cbModelParam._m0[21u].w;
        float _1411 = fma(_516, cbModelParam._m0[22u].z, fma(_512, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _508)) + cbModelParam._m0[22u].w;
        float _1415 = fma(_516, cbModelParam._m0[23u].z, fma(_512, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _508)) + cbModelParam._m0[23u].w;
        float _1418 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1421 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1424 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1564;
        if (_1418 > 0.0)
        {
            _1564 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1564 = frontier_phi_25_21_ladder;
        }
        float _1775;
        if (_1421 > 0.0)
        {
            _1775 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1775 = frontier_phi_37_32_ladder;
        }
        float _1926;
        if (_1424 > 0.0)
        {
            _1926 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1926 = frontier_phi_46_43_ladder;
        }
        float _1928 = isnan(_1775) ? _1564 : (isnan(_1564) ? _1775 : min(_1564, _1775));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1418) + _1407;
        float _1934 = (_1929 * _1421) + _1411;
        float _1935 = (_1929 * _1424) + _1415;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1937 = (-1.0) - _1936;
        float _1939 = _1936 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1935 > _1939) || ((_1935 < _1937) || ((_1934 > _1939) || ((_1934 < _1937) || ((_1933 < _1937) || (_1933 > _1939))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1935, cbModelParam._m0[17u].z, fma(_1934, cbModelParam._m0[17u].y, _1933 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1935, cbModelParam._m0[18u].z, fma(_1934, cbModelParam._m0[18u].y, _1933 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1935, cbModelParam._m0[19u].z, fma(_1934, cbModelParam._m0[19u].y, _1933 * cbModelParam._m0[19u].x))), _1351);
            frontier_phi_22_46_ladder = _2163.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2163.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2163.x * cbModelParam._m0[1u].z;
        }
        _1443 = frontier_phi_22_46_ladder_2;
        _1445 = frontier_phi_22_46_ladder_1;
        _1447 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1351);
        _1443 = _1427.x * cbModelParam._m0[1u].z;
        _1445 = _1427.y * cbModelParam._m0[1u].z;
        _1447 = _1427.z * cbModelParam._m0[1u].z;
    }
    float _1459 = _476 * 0.01200000010430812835693359375;
    float _1461 = _1459 * ((cbModelParam._m0[1u].w * (_1443 - _1344)) + _1344);
    float _1462 = _1459 * ((cbModelParam._m0[1u].w * (_1445 - _1346)) + _1346);
    float _1463 = _1459 * ((cbModelParam._m0[1u].w * (_1447 - _1348)) + _1348);
    float _1466 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, _1461 * cbSceneParam._m0[91u].x));
    uvec4 _1482 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1484 = _1482.x * 14u;
    uint _1485 = _1484 + 13u;
    float _1492 = _476 + (-1.0);
    float _1497 = (cbLight._m0[_1485].x * _1492) + 1.0;
    float _1498 = (cbLight._m0[_1485].y * _1492) + 1.0;
    float _1499 = (cbLight._m0[_1485].z * _1492) + 1.0;
    float _1500 = (cbLight._m0[_1485].w * _1492) + 1.0;
    uint _1501 = _1484 + 5u;
    float _1507 = isnan(1.0) ? _1498 : (isnan(_1498) ? 1.0 : min(_1498, 1.0));
    uint _1511 = _1484 + 4u;
    float _1518 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
    uint _1522 = _1484 | 1u;
    float _1533 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_323, _324, _325));
    float _1536 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_323, _324, _325));
    float _3406 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _3417 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1541 = (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * 0.3183098733425140380859375;
    float _1543 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1550 = ((cbLight._m0[_1501].x * _1507) * _1543) + ((cbLight._m0[_1511].x * _1518) * _1541);
    float _1551 = ((_1507 * cbLight._m0[_1501].y) * _1543) + ((_1518 * cbLight._m0[_1511].y) * _1541);
    float _1552 = ((_1507 * cbLight._m0[_1501].z) * _1543) + ((_1518 * cbLight._m0[_1511].z) * _1541);
    uvec4 _1556 = floatBitsToUint(cbLight._m0[_1484 + 12u]);
    bool _1558 = _1556.x == 0u;
    float _1569;
    float _1571;
    float _1573;
    if (_1558)
    {
        _1569 = _1550;
        _1571 = _1551;
        _1573 = _1552;
    }
    else
    {
        uint _1577 = _1484 + 6u;
        float _1593 = (dot(vec3(cbLight._m0[_1484 + 2u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1594 = _1593 * _1593;
        float _3428 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1596 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        _1569 = (((cbLight._m0[_1577].x * 0.3183098733425140380859375) * _1595) * _1596) + _1550;
        _1571 = (((cbLight._m0[_1577].y * 0.3183098733425140380859375) * _1595) * _1596) + _1551;
        _1573 = (((cbLight._m0[_1577].z * 0.3183098733425140380859375) * _1595) * _1596) + _1552;
    }
    bool _1576 = _1556.y == 0u;
    float _1614;
    float _1616;
    float _1618;
    if (_1576)
    {
        _1614 = _1569;
        _1616 = _1571;
        _1618 = _1573;
    }
    else
    {
        uint _1719 = _1484 + 7u;
        float _1735 = (dot(vec3(cbLight._m0[_1484 + 3u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1736 = _1735 * _1735;
        float _3444 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1738 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        _1614 = (((cbLight._m0[_1719].x * 0.3183098733425140380859375) * _1737) * _1738) + _1569;
        _1616 = (((cbLight._m0[_1719].y * 0.3183098733425140380859375) * _1737) * _1738) + _1571;
        _1618 = (((cbLight._m0[_1719].z * 0.3183098733425140380859375) * _1737) * _1738) + _1573;
    }
    uint _1620 = _1484 + 8u;
    float _1626 = cbLight._m0[_1484].x + _402;
    float _1627 = cbLight._m0[_1484].y + _403;
    float _1628 = cbLight._m0[_1484].z + _404;
    float _1632 = inversesqrt(dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628)));
    float _1636 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1484].xyz));
    float _3460 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1639 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1640 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _1641 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_1626 * _1632, _1627 * _1632, _1628 * _1632));
    float _3482 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1652 = (exp2(log2(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = (0.5 / ((_1639 + 9.9999999392252902907785028219223e-09) + _1640)) * _1639;
    float _3493 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.31831014156341552734375;
    uint _1671 = _1484 + 9u;
    float _1677 = cbLight._m0[_1522].x + _402;
    float _1678 = cbLight._m0[_1522].y + _403;
    float _1679 = cbLight._m0[_1522].z + _404;
    float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
    float _1687 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1522].xyz));
    float _3504 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1690 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _1691 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1677 * _1683, _1678 * _1683, _1679 * _1683));
    float _3515 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1700 = (exp2(log2(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1704 = (0.5 / ((_1690 + 9.9999999392252902907785028219223e-09) + _1640)) * _1690;
    float _3526 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.31831014156341552734375;
    float _1716 = (((_1700 * cbLight._m0[_1671].x) * _1706) * _1507) + (((_1652 * cbLight._m0[_1620].x) * _1660) * _1518);
    float _1717 = (((_1700 * cbLight._m0[_1671].y) * _1706) * _1507) + (((_1652 * cbLight._m0[_1620].y) * _1660) * _1518);
    float _1718 = (((_1700 * cbLight._m0[_1671].z) * _1706) * _1507) + (((_1652 * cbLight._m0[_1620].z) * _1660) * _1518);
    float _1780;
    float _1782;
    float _1784;
    if (_1558)
    {
        _1780 = _1716;
        _1782 = _1717;
        _1784 = _1718;
    }
    else
    {
        uint _1786 = _1484 + 10u;
        uint _1792 = _1484 + 2u;
        float _1798 = cbLight._m0[_1792].x + _402;
        float _1799 = cbLight._m0[_1792].y + _403;
        float _1800 = cbLight._m0[_1792].z + _404;
        float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
        float _1808 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1792].xyz));
        float _3537 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1811 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1812 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1798 * _1804, _1799 * _1804, _1800 * _1804));
        float _3548 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = (exp2(log2(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1825 = (0.5 / ((_1811 + 9.9999999392252902907785028219223e-09) + _1640)) * _1811;
        float _3559 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1827 = (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.31831014156341552734375;
        float _1828 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        _1780 = (((_1821 * cbLight._m0[_1786].x) * _1827) * _1828) + _1716;
        _1782 = (((_1821 * cbLight._m0[_1786].y) * _1827) * _1828) + _1717;
        _1784 = (((_1821 * cbLight._m0[_1786].z) * _1827) * _1828) + _1718;
    }
    float _1863;
    float _1865;
    float _1867;
    if (_1576)
    {
        _1863 = _1780;
        _1865 = _1782;
        _1867 = _1784;
    }
    else
    {
        uint _1874 = _1484 + 11u;
        uint _1880 = _1484 + 3u;
        float _1886 = cbLight._m0[_1880].x + _402;
        float _1887 = cbLight._m0[_1880].y + _403;
        float _1888 = cbLight._m0[_1880].z + _404;
        float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
        float _1896 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1880].xyz));
        float _3575 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1899 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1900 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_1886 * _1892, _1887 * _1892, _1888 * _1892));
        float _3586 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1913 = (0.5 / ((_1899 + 9.9999999392252902907785028219223e-09) + _1640)) * _1899;
        float _3597 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1915 = (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.31831014156341552734375;
        float _1916 = isnan(1.0) ? _1500 : (isnan(_1500) ? 1.0 : min(_1500, 1.0));
        _1863 = (((_1909 * cbLight._m0[_1874].x) * _1915) * _1916) + _1780;
        _1865 = (((_1909 * cbLight._m0[_1874].y) * _1915) * _1916) + _1782;
        _1867 = (((_1909 * cbLight._m0[_1874].z) * _1915) * _1916) + _1784;
    }
    float _2051;
    float _2053;
    float _2055;
    float _2057;
    float _2059;
    float _2061;
    if (_1482.y == 0u)
    {
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1991;
        float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1991;
        float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1991;
        uvec4 _2006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2007 = _2006.x;
        uint _2018 = uint((float(_2006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _2007))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _2007)));
        float _2028 = (log2(_1994 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2029 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        uint _2032 = uint(isnan(14.0) ? _2029 : (isnan(_2029) ? 14.0 : min(_2029, 14.0)));
        uvec4 _2037 = texelFetch(g_lightClusterGridBuffer, int(((_2032 << 2u) + (_2018 << 6u)) >> 2u));
        uint _2038 = _2037.x;
        uint _2039 = _2006.z;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        if (((((1u << ((_2039 >> 4u) & 15u)) + 4294967295u) & _2038) == 0u) || ((_2039 & 240u) == 0u))
        {
            _2168 = 0.0;
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
        }
        else
        {
            float _2169;
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2319 = 0.0;
            float _2320 = 0.0;
            float _2321 = 0.0;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            uint _2325 = 0u;
            uint _2334;
            bool _2335;
            for (;;)
            {
                _2334 = texelFetch(g_lightClassification, int((((_2032 << 5u) + (_2018 << 9u)) + (_2325 << 2u)) >> 2u)).x;
                _2335 = _2334 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2335)
                {
                    frontier_phi_61_pred = _2319;
                    frontier_phi_61_pred_1 = _2324;
                    frontier_phi_61_pred_2 = _2323;
                    frontier_phi_61_pred_3 = _2322;
                    frontier_phi_61_pred_4 = _2321;
                    frontier_phi_61_pred_5 = _2320;
                }
                else
                {
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    float _2447;
                    float _2448;
                    uint _2449;
                    _2443 = _2319;
                    _2444 = _2320;
                    _2445 = _2321;
                    _2446 = _2322;
                    _2447 = _2323;
                    _2448 = _2324;
                    _2449 = _2334;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    for (;;)
                    {
                        uint _2453 = uint(findLSB(_2449)) + (_2325 << 5u);
                        uint _2450 = (_2449 + 4294967295u) & _2449;
                        uint _2455 = _2453 * 48u;
                        vec4 _2469 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 3u)).x));
                        uint _2475 = (_2453 * 48u) + 4u;
                        vec4 _2488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2475)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 3u)).x));
                        uint _2494 = (_2453 * 48u) + 8u;
                        vec3 _2505 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2494)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2494 + 2u)).x));
                        float _2509 = _2469.x - _1992;
                        float _2510 = _2469.y - _1993;
                        float _2511 = _2469.z - _1994;
                        float _2512 = dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511));
                        float _2515 = inversesqrt(_2512);
                        float _2524 = 1.0 - (_2512 * _2469.w);
                        float _3623 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
                        float _2525 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
                        float _2526 = sqrt(_2512) * _2488.w;
                        float _2529 = 1.39999997615814208984375 / (_2526 + 1.39999997615814208984375);
                        float _2530 = _2529 * _2529;
                        float _2533 = ((1.0 - _2530) * dot(vec3(_432, _435, _438), vec3(_2515 * _2509, _2515 * _2510, _2515 * _2511))) + _2530;
                        float _2536 = _2526 * _2526;
                        float _2540 = ((isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0))) * _2525) / ((_2536 * 0.699999988079071044921875) + 1.0);
                        float _2544 = (-0.0) - _1992;
                        float _2545 = (-0.0) - _1993;
                        float _2546 = (-0.0) - _1994;
                        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
                        float _2554 = dot(vec3(_432, _435, _438), vec3(_2550 * _2544, _2550 * _2545, _2550 * _2546));
                        float _3639 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
                        float _3650 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2558 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
                        float _2562 = (0.5 / (((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) + 9.9999999392252902907785028219223e-09) + _2558)) * _2558;
                        float _3661 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2571 = (((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 3.1415927410125732421875) / ((_2536 * 2.1991131305694580078125) + 3.141590118408203125)) * _2525;
                        _2378 = (_2540 * _2488.x) + _2446;
                        _2379 = (_2540 * _2488.y) + _2447;
                        _2380 = (_2540 * _2488.z) + _2448;
                        _2375 = (_2571 * _2505.x) + _2443;
                        _2376 = (_2571 * _2505.y) + _2444;
                        _2377 = (_2571 * _2505.z) + _2445;
                        if (_2450 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2443 = _2375;
                            _2444 = _2376;
                            _2445 = _2377;
                            _2446 = _2378;
                            _2447 = _2379;
                            _2448 = _2380;
                            _2449 = _2450;
                        }
                    }
                    frontier_phi_61_pred = _2375;
                    frontier_phi_61_pred_1 = _2380;
                    frontier_phi_61_pred_2 = _2379;
                    frontier_phi_61_pred_3 = _2378;
                    frontier_phi_61_pred_4 = _2377;
                    frontier_phi_61_pred_5 = _2376;
                }
                _2169 = frontier_phi_61_pred;
                _2179 = frontier_phi_61_pred_1;
                _2177 = frontier_phi_61_pred_2;
                _2175 = frontier_phi_61_pred_3;
                _2173 = frontier_phi_61_pred_4;
                _2171 = frontier_phi_61_pred_5;
                uint _2326 = _2325 + 1u;
                if (_2326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2319 = _2169;
                    _2320 = _2171;
                    _2321 = _2173;
                    _2322 = _2175;
                    _2323 = _2177;
                    _2324 = _2179;
                    _2325 = _2326;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2168 = _2169;
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
        }
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.z;
        uint _2185 = (_2183 >> 8u) & 15u;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((4294967295u << _2185) & _2038) == 0u)
        {
            _2290 = _2168;
            _2292 = _2170;
            _2294 = _2172;
            _2296 = _2174;
            _2298 = _2176;
            _2300 = _2178;
        }
        else
        {
            float _2315 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2185 < ((_2183 >> 12u) & 15u))
            {
                float _2291;
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2426 = _2168;
                float _2427 = _2170;
                float _2428 = _2172;
                float _2429 = _2174;
                float _2430 = _2176;
                float _2431 = _2178;
                uint _2432 = _2185;
                uint _2441;
                bool _2442;
                for (;;)
                {
                    _2441 = texelFetch(g_lightClassification, int((((_2032 << 5u) + (_2018 << 9u)) + (_2432 << 2u)) >> 2u)).x;
                    _2442 = _2441 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2442)
                    {
                        frontier_phi_67_pred = _2429;
                        frontier_phi_67_pred_1 = _2430;
                        frontier_phi_67_pred_2 = _2431;
                        frontier_phi_67_pred_3 = _2428;
                        frontier_phi_67_pred_4 = _2427;
                        frontier_phi_67_pred_5 = _2426;
                    }
                    else
                    {
                        float _2576;
                        float _2577;
                        float _2578;
                        float _2579;
                        float _2580;
                        float _2581;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2589 = _2426;
                        float _2590 = _2427;
                        float _2591 = _2428;
                        float _2592 = _2429;
                        float _2593 = _2430;
                        float _2594 = _2431;
                        uint _2595 = _2441;
                        uint _2596;
                        vec4 _2621;
                        float _2622;
                        vec4 _2637;
                        vec3 _2649;
                        vec4 _2664;
                        vec4 _2680;
                        float _2727;
                        bool _2728;
                        for (;;)
                        {
                            uint _2606 = ((_2432 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2595));
                            _2596 = (_2595 + 4294967295u) & _2595;
                            uint _2608 = _2606 * 40u;
                            _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            _2622 = _2621.w;
                            uint _2624 = (_2606 * 40u) + 4u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2639 = (_2606 * 40u) + 8u;
                            _2649 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x));
                            uint _2651 = (_2606 * 40u) + 16u;
                            _2664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 3u)).x));
                            uint _2667 = (_2606 * 40u) + 20u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            uint _2683 = (_2606 * 40u) + 24u;
                            vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            uint _2702 = (_2606 * 40u) + 28u;
                            vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            _2727 = fma(_1994, _2715.z, fma(_1993, _2715.y, _2715.x * _1992)) + _2715.w;
                            _2728 = !((fma(_1994, _2696.z, fma(_1993, _2696.y, _2696.x * _1992)) + _2696.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2728)
                            {
                                float _2755 = _2621.x - _1992;
                                float _2756 = _2621.y - _1993;
                                float _2757 = _2621.z - _1994;
                                float _2758 = dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757));
                                float _2761 = inversesqrt(_2758);
                                float _2762 = _2761 * _2755;
                                float _2763 = _2761 * _2756;
                                float _2764 = _2761 * _2757;
                                float _2768 = 1.0 - (_2758 / (_2622 * _2622));
                                float _3672 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2769 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
                                float _2773 = sqrt(_2758) * _2637.w;
                                float _2775 = 1.39999997615814208984375 / (_2773 + 1.39999997615814208984375);
                                float _2776 = _2775 * _2775;
                                float _2777 = 1.0 - _2776;
                                float _2779 = (_2777 * dot(vec3(_2762, _2763, _2764), vec3(_432, _435, _438))) + _2776;
                                float _2782 = _2773 * _2773;
                                float _2786 = (fma(_1994, _2664.z, fma(_1993, _2664.y, _2664.x * _1992)) + _2664.w) / _2727;
                                float _2787 = (fma(_1994, _2680.z, fma(_1993, _2680.y, _2680.x * _1992)) + _2680.w) / _2727;
                                float _2791 = 1.0 - dot(vec2(_2786, _2787), vec2(_2786, _2787));
                                float _3688 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                                float _2792 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
                                float _2793 = _2792 * (((isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))) * _2769) / ((_2782 * 0.699999988079071044921875) + 1.0));
                                float _2803 = dot(vec3(_432, _435, _438), vec3((-0.0) - (_1992 * _2315), (-0.0) - (_1993 * _2315), (-0.0) - (_1994 * _2315)));
                                float _3699 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                                float _2811 = (_2777 * dot(vec3(_432, _435, _438), vec3(_2762, _2763, _2764))) + _2776;
                                float _3710 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2812 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
                                float _2816 = (0.5 / (((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) + 9.9999999392252902907785028219223e-09) + _2812)) * _2812;
                                float _3721 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2823 = (_2792 * _2769) * (((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 3.1415927410125732421875) / ((_2782 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2823 * _2649.x;
                                frontier_phi_73_pred_1 = _2823 * _2649.y;
                                frontier_phi_73_pred_2 = _2793 * _2637.z;
                                frontier_phi_73_pred_3 = _2793 * _2637.y;
                                frontier_phi_73_pred_4 = _2793 * _2637.x;
                                frontier_phi_73_pred_5 = _2823 * _2649.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2827 = frontier_phi_73_pred;
                            _2828 = frontier_phi_73_pred_1;
                            _2832 = frontier_phi_73_pred_2;
                            _2831 = frontier_phi_73_pred_3;
                            _2830 = frontier_phi_73_pred_4;
                            _2829 = frontier_phi_73_pred_5;
                            _2579 = _2830 + _2592;
                            _2580 = _2831 + _2593;
                            _2581 = _2832 + _2594;
                            _2576 = _2827 + _2589;
                            _2577 = _2828 + _2590;
                            _2578 = _2829 + _2591;
                            if (_2596 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2589 = _2576;
                                _2590 = _2577;
                                _2591 = _2578;
                                _2592 = _2579;
                                _2593 = _2580;
                                _2594 = _2581;
                                _2595 = _2596;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2579;
                        frontier_phi_67_pred_1 = _2580;
                        frontier_phi_67_pred_2 = _2581;
                        frontier_phi_67_pred_3 = _2578;
                        frontier_phi_67_pred_4 = _2577;
                        frontier_phi_67_pred_5 = _2576;
                    }
                    _2297 = frontier_phi_67_pred;
                    _2299 = frontier_phi_67_pred_1;
                    _2301 = frontier_phi_67_pred_2;
                    _2295 = frontier_phi_67_pred_3;
                    _2293 = frontier_phi_67_pred_4;
                    _2291 = frontier_phi_67_pred_5;
                    uint _2433 = _2432 + 1u;
                    if (_2433 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2426 = _2291;
                        _2427 = _2293;
                        _2428 = _2295;
                        _2429 = _2297;
                        _2430 = _2299;
                        _2431 = _2301;
                        _2432 = _2433;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2299;
                frontier_phi_55_56_ladder_1 = _2301;
                frontier_phi_55_56_ladder_2 = _2297;
                frontier_phi_55_56_ladder_3 = _2295;
                frontier_phi_55_56_ladder_4 = _2293;
                frontier_phi_55_56_ladder_5 = _2291;
            }
            else
            {
                frontier_phi_55_56_ladder = _2176;
                frontier_phi_55_56_ladder_1 = _2178;
                frontier_phi_55_56_ladder_2 = _2174;
                frontier_phi_55_56_ladder_3 = _2172;
                frontier_phi_55_56_ladder_4 = _2170;
                frontier_phi_55_56_ladder_5 = _2168;
            }
            _2290 = frontier_phi_55_56_ladder_5;
            _2292 = frontier_phi_55_56_ladder_4;
            _2294 = frontier_phi_55_56_ladder_3;
            _2296 = frontier_phi_55_56_ladder_2;
            _2298 = frontier_phi_55_56_ladder;
            _2300 = frontier_phi_55_56_ladder_1;
        }
        float _2305 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2051 = (_2305 * _2296) + _1614;
        _2053 = (_2305 * _2298) + _1616;
        _2055 = (_2305 * _2300) + _1618;
        _2057 = ((_2290 * 0.039999999105930328369140625) * _2305) + _1863;
        _2059 = ((_2292 * 0.039999999105930328369140625) * _2305) + _1865;
        _2061 = ((_2294 * 0.039999999105930328369140625) * _2305) + _1867;
    }
    else
    {
        _2051 = _1614;
        _2053 = _1616;
        _2055 = _1618;
        _2057 = _1863;
        _2059 = _1865;
        _2061 = _1867;
    }
    uint _2067 = _452 + uint(cbMatDynParam._m0[0u].w);
    float _2073 = (_315 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _280.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _251.x))) * cbInstanceData._m0[_2067].x;
    float _2074 = (_315 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _280.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _251.y))) * cbInstanceData._m0[_2067].y;
    float _2075 = (_315 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _280.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _251.z))) * cbInstanceData._m0[_2067].z;
    float _3737 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3748 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3759 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2092 = (((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_2051 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _476))) + ((_2057 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1254)) * cbPerFrame._m0[3u].x)) + _2073;
    float _2094 = (_2074 + ((_2059 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1254)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_2053 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _476)));
    float _2096 = (_2075 + ((_2061 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _1254)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_2055 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _476)));
    float _3785 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2109 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    uint _2110 = _451 + 6u;
    float _2118 = _410 / cbSceneParam._m0[86u].x;
    float _2119 = _411 / cbSceneParam._m0[86u].y;
    vec4 _2133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2135 = _2133.x;
    float _2136 = _2133.y;
    float _2137 = _2133.z;
    float _2138 = _2133.w;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2193 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2194 = _2193 / _344;
        float _2205 = _2194 * _395;
        float _2206 = _396 * _2194;
        float _2207 = (-0.0) - _2206;
        float _2209 = _2194 * _397;
        float _2211 = (cbSceneParam._m0[77u].w * _2207) / _2193;
        float _2212 = _2211 + cbSceneParam._m0[79u].w;
        float _2213 = cbSceneParam._m0[79u].w - _2206;
        float _2219 = sqrt(((_2205 * _2205) + (_2206 * _2206)) + (_2209 * _2209));
        float _2222 = (1.0 - (cbSceneParam._m0[77u].w / _2193)) * _2219;
        float _2227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2388;
        if (abs((_2207 - _2211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2388 = ((((_2212 > 0.0) ? exp2(_2227 * _2212) : (2.0 - exp2(_2229 * _2212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2222;
        }
        else
        {
            float _2348 = 1.0 / cbSceneParam._m0[80u].x;
            float _2349 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : max(_2212, _2213));
            float _2350 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : min(_2212, _2213));
            float _2359 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : min(_2349, 0.0));
            float _2360 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : min(_2350, 0.0));
            _2388 = ((abs(_2219 / _2207) * cbSceneParam._m0[80u].y) * ((((_2359 - _2360) * 2.0) - ((exp2(_2227 * (isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0)))) - exp2(_2227 * (isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))))) * _2348)) - ((exp2(_2229 * _2359) - exp2(_2229 * _2360)) * _2348))) + (_2222 * cbSceneParam._m0[80u].z);
        }
        vec4 _2390 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, 1.0), 0.0);
        float _2399 = exp2((_2388 * (-1.44269502162933349609375)) * (1.0 - _2390.w));
        float _2400 = log2(_2399);
        float _2416 = log2(_2138);
        _2231 = (exp2(_2416 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].x)) * _2390.x) / cbSceneParam._m0[78u].x)) + _2135;
        _2233 = (exp2(_2416 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].y)) * _2390.y) / cbSceneParam._m0[78u].y)) + _2136;
        _2235 = (exp2(_2416 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].z)) * _2390.z) / cbSceneParam._m0[78u].z)) + _2137;
        _2237 = _2399 * _2138;
    }
    else
    {
        _2231 = _2135;
        _2233 = _2136;
        _2235 = _2137;
        _2237 = _2138;
    }
    float _2249 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2250 = _2249 == 3.0;
    float _2251 = log2(_2237);
    float _2255 = exp2(_2251 * cbSceneParam._m0[78u].x);
    float _2256 = exp2(_2251 * cbSceneParam._m0[78u].y);
    float _2257 = exp2(_2251 * cbSceneParam._m0[78u].z);
    float _2258 = _2255 * (isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)));
    float _2259 = _2256 * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)));
    float _2260 = _2257 * (isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)));
    float _2269 = (_2249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2269 * (_2250 ? _2258 : (_2258 + (cbSceneParam._m0[72u].w * _2231)));
    SV_Target.y = _2269 * (_2250 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2233)));
    SV_Target.z = _2269 * (_2250 ? _2260 : (_2260 + (cbSceneParam._m0[72u].w * _2235)));
    SV_Target.w = cbInstanceData._m0[_2110].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2073) * _2109) * _2255) * _2269;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2074) * _2109) * _2256) * _2269;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2075) * _2109) * _2257) * _2269;
    SV_Target_1.w = cbInstanceData._m0[_2110].w;
}


