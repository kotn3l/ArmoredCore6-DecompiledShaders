#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _868;
float _3349;
float _3350;
float _3351;
float _3352;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _180 = _179 * NORMAL.x;
    float _181 = _179 * NORMAL.y;
    float _182 = _179 * NORMAL.z;
    vec4 _201 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _227 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _235 = (_227.x * cbMtdParam._m0[12u].x) + (_201.x * cbMtdParam._m0[9u].x);
    float _236 = (_227.y * cbMtdParam._m0[12u].y) + (_201.y * cbMtdParam._m0[9u].y);
    float _237 = (_227.z * cbMtdParam._m0[12u].z) + (_201.z * cbMtdParam._m0[9u].z);
    vec4 _259 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _288 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _313 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3361 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _323 = (((_315 * _315) * (3.0 - (_315 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _330 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _331 = _330 * _180;
    float _332 = _330 * _181;
    float _333 = _330 * _182;
    float _3372 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3383 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3394 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _352 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _403 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _393);
    float _404 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _393);
    float _405 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _393);
    float _409 = inversesqrt(dot(vec3(_403, _404, _405), vec3(_403, _404, _405)));
    float _410 = _403 * _409;
    float _411 = _404 * _409;
    float _412 = _405 * _409;
    vec4 _417 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _419 = _417.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_403 * _403) + (_404 * _404)) + (_405 * _405));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _3405 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _3416 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) - _554)) + _554) < ((_419 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _431 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _432 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _452 = fma(_333, cbSceneParam._m0[5u].z, fma(_332, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _331));
    float _455 = fma(_333, cbSceneParam._m0[6u].z, fma(_332, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _331));
    float _458 = fma(_333, cbSceneParam._m0[7u].z, fma(_332, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _331));
    uint _471 = uint(roundEven(NORMAL.w)) * 13u;
    uint _472 = _471 + 9u;
    uint _473 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _479 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_473].x;
    float _480 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_473].y;
    float _481 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_473].z;
    float _3427 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _3438 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _483 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _484 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _431, cbSceneParam._m0[86u].y * _432));
    float _496 = _493.x * TEXCOORD_4;
    float _497 = dot(vec3(_331, _332, _333), vec3(_410, _411, _412));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _331) - _410;
    float _505 = (_500 * _332) - _411;
    float _506 = (_500 * _333) - _412;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528));
        float _596 = fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528));
        float _600 = fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528));
        float _625 = _528 + _331;
        float _626 = _532 + _332;
        float _627 = _536 + _333;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(_331, _332, _333), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3497 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_331, _332, _333), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3530 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_331, _332, _333), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3563 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _869 = _697;
        _870 = _696;
        _871 = _708;
        _872 = _707;
        _873 = _706;
        _874 = _718;
        _875 = _717;
        _876 = _716;
        _877 = _731;
        _878 = _730;
        _879 = _729;
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _868;
        _869 = _868;
        _870 = _868;
        _871 = _868;
        _872 = _868;
        _873 = _868;
        _874 = _868;
        _875 = _868;
        _876 = _868;
        _877 = _868;
        _878 = _868;
        _879 = _868;
        _880 = 0.0;
        _881 = 0.0;
        _882 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528));
        float _915 = fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528));
        float _919 = fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528));
        float _942 = _528 + _331;
        float _943 = _532 + _332;
        float _944 = _536 + _333;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_331, _332, _333), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3626 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_331, _332, _333), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3659 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_331, _332, _333), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3692 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _868;
        _1181 = _868;
        _1182 = _868;
        _1183 = _868;
        _1184 = _868;
        _1185 = _868;
        _1186 = _868;
        _1187 = _868;
        _1188 = _868;
        _1189 = _868;
        _1190 = _868;
        _1191 = _868;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _504 * 0.5;
    float _1249 = _505 * 0.5;
    float _1250 = _506 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_867, _871, _874, _877));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_869, _872, _875, _878));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _873, _876, _879));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1315 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1363 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1367 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1371 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1374 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1377 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1380 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1406;
        if (_1374 > 0.0)
        {
            _1406 = abs((1.0 - _1363) / _1374);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1363 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1406 = frontier_phi_17_15_ladder;
        }
        float _1579;
        if (_1377 > 0.0)
        {
            _1579 = abs((1.0 - _1367) / _1377);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1367 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1579 = frontier_phi_26_22_ladder;
        }
        float _1875;
        if (_1380 > 0.0)
        {
            _1875 = abs((1.0 - _1371) / _1380);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1371 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1875 = frontier_phi_38_33_ladder;
        }
        float _1877 = isnan(_1579) ? _1406 : (isnan(_1406) ? _1579 : min(_1406, _1579));
        float _1878 = isnan(_1875) ? _1877 : (isnan(_1877) ? _1875 : min(_1877, _1875));
        float _1882 = (_1878 * _1374) + _1363;
        float _1883 = (_1878 * _1377) + _1367;
        float _1884 = (_1878 * _1380) + _1371;
        float _1885 = _1878 * 9.9999997473787516355514526367188e-05;
        float _1887 = (-1.0) - _1885;
        float _1889 = _1885 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1884 > _1889) || ((_1884 < _1887) || ((_1883 > _1889) || ((_1883 < _1887) || ((_1882 < _1887) || (_1882 > _1889))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1884, cbModelParam._m0[9u].z, fma(_1883, cbModelParam._m0[9u].y, _1882 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1884, cbModelParam._m0[10u].z, fma(_1883, cbModelParam._m0[10u].y, _1882 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1884, cbModelParam._m0[11u].z, fma(_1883, cbModelParam._m0[11u].y, _1882 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_16_38_ladder = _2029.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2029.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2029.x * cbModelParam._m0[1u].y;
        }
        _1396 = frontier_phi_16_38_ladder_2;
        _1398 = frontier_phi_16_38_ladder_1;
        _1400 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1315);
        _1396 = _1384.x * cbModelParam._m0[1u].y;
        _1398 = _1384.y * cbModelParam._m0[1u].y;
        _1400 = _1384.z * cbModelParam._m0[1u].y;
    }
    float _1403 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1473 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1476 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1584;
        if (_1470 > 0.0)
        {
            _1584 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1584 = frontier_phi_28_24_ladder;
        }
        float _1902;
        if (_1473 > 0.0)
        {
            _1902 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1902 = frontier_phi_40_35_ladder;
        }
        float _2175;
        if (_1476 > 0.0)
        {
            _2175 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2175 = frontier_phi_50_47_ladder;
        }
        float _2177 = isnan(_1902) ? _1584 : (isnan(_1584) ? _1902 : min(_1584, _1902));
        float _2178 = isnan(_2175) ? _2177 : (isnan(_2177) ? _2175 : min(_2177, _2175));
        float _2182 = (_2178 * _1470) + _1459;
        float _2183 = (_2178 * _1473) + _1463;
        float _2184 = (_2178 * _1476) + _1467;
        float _2185 = _2178 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2185;
        float _2188 = _2185 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2184 > _2188) || ((_2184 < _2186) || ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 < _2186) || (_2182 > _2188))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2184, cbModelParam._m0[17u].z, fma(_2183, cbModelParam._m0[17u].y, _2182 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2184, cbModelParam._m0[18u].z, fma(_2183, cbModelParam._m0[18u].y, _2182 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2184, cbModelParam._m0[19u].z, fma(_2183, cbModelParam._m0[19u].y, _2182 * cbModelParam._m0[19u].x))), _1403);
            frontier_phi_25_50_ladder = _2275.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2275.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2275.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_25_50_ladder_2;
        _1497 = frontier_phi_25_50_ladder_1;
        _1499 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1403);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1511 = _496 * 0.01200000010430812835693359375;
    float _1513 = _1511 * ((cbModelParam._m0[1u].w * (_1495 - _1396)) + _1396);
    float _1514 = _1511 * ((cbModelParam._m0[1u].w * (_1497 - _1398)) + _1398);
    float _1515 = _1511 * ((cbModelParam._m0[1u].w * (_1499 - _1400)) + _1400);
    float _1518 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1513 * cbSceneParam._m0[91u].x));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1562 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1570 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1571 = _1558 / _1570;
    float _1572 = _1562 / _1570;
    float _1573 = _1566 / _1570;
    float _1720;
    float _1721;
    float _1722;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1600 = ((uint(_1573 > cbSceneParam._m0[59u].y) + uint(_1573 > cbSceneParam._m0[59u].x)) + uint(_1573 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1601 = _1600 + 43u;
        uint _1609 = _1600 + 44u;
        uint _1617 = _1600 + 45u;
        uint _1625 = _1600 + 46u;
        float _1636 = fma(_1570, cbSceneParam._m0[_1601].w, fma(_1566, cbSceneParam._m0[_1601].z, fma(_1562, cbSceneParam._m0[_1601].y, _1558 * cbSceneParam._m0[_1601].x)));
        float _1640 = fma(_1570, cbSceneParam._m0[_1609].w, fma(_1566, cbSceneParam._m0[_1609].z, fma(_1562, cbSceneParam._m0[_1609].y, _1558 * cbSceneParam._m0[_1609].x)));
        float _1648 = fma(_1570, cbSceneParam._m0[_1625].w, fma(_1566, cbSceneParam._m0[_1625].z, fma(_1562, cbSceneParam._m0[_1625].y, _1558 * cbSceneParam._m0[_1625].x)));
        float _1653 = cbSceneParam._m0[33u].z * _1648;
        float _1655 = cbSceneParam._m0[33u].w * _1648;
        float _1658 = fma(_1570, cbSceneParam._m0[_1617].w, fma(_1566, cbSceneParam._m0[_1617].z, fma(_1562, cbSceneParam._m0[_1617].y, _1558 * cbSceneParam._m0[_1617].x))) / _1648;
        float _1706 = (cbSceneParam._m0[33u].x - sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573))) * cbSceneParam._m0[33u].y;
        float _3818 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1713 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1653 + _1636) / _1648, (_1655 + _1640) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1655 + _1636) / _1648, (_1640 - _1653) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1636 - _1653) / _1648, (_1640 - _1655) / _1648), _1658), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1636 - _1655) / _1648, (_1653 + _1640) / _1648), _1658), 0.0)).x), vec4(0.25)));
        _1720 = 1.0 - (_1713 * cbSceneParam._m0[34u].x);
        _1721 = 1.0 - (_1713 * cbSceneParam._m0[34u].y);
        _1722 = 1.0 - (_1713 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1720 = 1.0;
        _1721 = 1.0;
        _1722 = 1.0;
    }
    float _1786;
    float _1788;
    float _1790;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1774 = fma(_1570, cbSceneParam._m0[63u].w, fma(_1566, cbSceneParam._m0[63u].z, fma(_1562, cbSceneParam._m0[63u].y, _1558 * cbSceneParam._m0[63u].x)));
        float _1775 = fma(_1570, cbSceneParam._m0[60u].w, fma(_1566, cbSceneParam._m0[60u].z, fma(_1562, cbSceneParam._m0[60u].y, _1558 * cbSceneParam._m0[60u].x))) / _1774;
        float _1776 = fma(_1570, cbSceneParam._m0[61u].w, fma(_1566, cbSceneParam._m0[61u].z, fma(_1562, cbSceneParam._m0[61u].y, _1558 * cbSceneParam._m0[61u].x))) / _1774;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1775 >= cbSceneParam._m0[64u].x) && (_1776 >= cbSceneParam._m0[64u].y)) && (_1775 <= cbSceneParam._m0[64u].z)) && (_1776 <= cbSceneParam._m0[64u].w))
        {
            float _1915 = fma(_1570, cbSceneParam._m0[62u].w, fma(_1566, cbSceneParam._m0[62u].z, fma(_1562, cbSceneParam._m0[62u].y, _1558 * cbSceneParam._m0[62u].x))) / _1774;
            float _1919 = isnan(cbSceneParam._m0[41u].w) ? _1915 : (isnan(_1915) ? cbSceneParam._m0[41u].w : max(_1915, cbSceneParam._m0[41u].w));
            float _1962 = (cbSceneParam._m0[33u].x - sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573))) * cbSceneParam._m0[33u].y;
            float _3834 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
            float _1969 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1775, cbSceneParam._m0[33u].w + _1776), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1775, _1776 - cbSceneParam._m0[33u].z), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1775 - cbSceneParam._m0[33u].z, _1776 - cbSceneParam._m0[33u].w), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1775 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1776), _1919), 0.0)).x), vec4(0.25)));
            float _1973 = 1.0 - (_1969 * cbSceneParam._m0[34u].x);
            float _1974 = 1.0 - (_1969 * cbSceneParam._m0[34u].y);
            float _1975 = 1.0 - (_1969 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1975) ? _1722 : (isnan(_1722) ? _1975 : min(_1722, _1975));
            frontier_phi_37_36_ladder_1 = isnan(_1974) ? _1721 : (isnan(_1721) ? _1974 : min(_1721, _1974));
            frontier_phi_37_36_ladder_2 = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
        }
        else
        {
            frontier_phi_37_36_ladder = _1722;
            frontier_phi_37_36_ladder_1 = _1721;
            frontier_phi_37_36_ladder_2 = _1720;
        }
        _1786 = frontier_phi_37_36_ladder_2;
        _1788 = frontier_phi_37_36_ladder_1;
        _1790 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1786 = _1720;
        _1788 = _1721;
        _1790 = _1722;
    }
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_471 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1805 = _496 + (-1.0);
    float _1810 = (cbLight._m0[_1798].x * _1805) + 1.0;
    float _1811 = (cbLight._m0[_1798].y * _1805) + 1.0;
    float _1812 = (cbLight._m0[_1798].z * _1805) + 1.0;
    float _1813 = (cbLight._m0[_1798].w * _1805) + 1.0;
    uint _1814 = _1797 + 5u;
    float _1820 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1824 = _1797 + 4u;
    float _1834 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1838 = _1797 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_331, _332, _333));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_331, _332, _333));
    float _3870 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _3881 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1814].x * _1820) * _1859) + (((cbLight._m0[_1824].x * _1786) * _1834) * _1857);
    float _1867 = ((_1820 * cbLight._m0[_1814].y) * _1859) + (((cbLight._m0[_1824].y * _1788) * _1834) * _1857);
    float _1868 = ((_1820 * cbLight._m0[_1814].z) * _1859) + (((cbLight._m0[_1824].z * _1790) * _1834) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1797 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1874)
    {
        _1976 = _1866;
        _1978 = _1867;
        _1980 = _1868;
    }
    else
    {
        uint _1984 = _1797 + 6u;
        float _2000 = (dot(vec3(cbLight._m0[_1797 + 2u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _3892 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _2003 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1976 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1866;
        _1978 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1867;
        _1980 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1868;
    }
    bool _1983 = _1872.y == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_1983)
    {
        _2038 = _1976;
        _2040 = _1978;
        _2042 = _1980;
    }
    else
    {
        uint _2146 = _1797 + 7u;
        float _2162 = (dot(vec3(cbLight._m0[_1797 + 3u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _2163 = _2162 * _2162;
        float _3908 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2164 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2165 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2038 = (((cbLight._m0[_2146].x * 0.3183098733425140380859375) * _2164) * _2165) + _1976;
        _2040 = (((cbLight._m0[_2146].y * 0.3183098733425140380859375) * _2164) * _2165) + _1978;
        _2042 = (((cbLight._m0[_2146].z * 0.3183098733425140380859375) * _2164) * _2165) + _1980;
    }
    uint _2044 = _1797 + 8u;
    float _2050 = cbLight._m0[_1797].x + _410;
    float _2051 = cbLight._m0[_1797].y + _411;
    float _2052 = cbLight._m0[_1797].z + _412;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2060 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1797].xyz));
    float _3924 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _2064 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_2050 * _2056, _2051 * _2056, _2052 * _2056));
    float _3946 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = (0.5 / ((_2063 + 9.9999999392252902907785028219223e-09) + _2064)) * _2063;
    float _3957 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.31831014156341552734375;
    uint _2098 = _1797 + 9u;
    float _2104 = cbLight._m0[_1838].x + _410;
    float _2105 = cbLight._m0[_1838].y + _411;
    float _2106 = cbLight._m0[_1838].z + _412;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2114 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1838].xyz));
    float _3968 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2104 * _2110, _2105 * _2110, _2106 * _2110));
    float _3979 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2131 = (0.5 / ((_2117 + 9.9999999392252902907785028219223e-09) + _2064)) * _2117;
    float _3990 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.31831014156341552734375;
    float _2143 = (((_2127 * cbLight._m0[_2098].x) * _2133) * _1820) + ((((cbLight._m0[_2044].x * _1786) * _2076) * _2084) * _1834);
    float _2144 = (((_2127 * cbLight._m0[_2098].y) * _2133) * _1820) + ((((cbLight._m0[_2044].y * _1788) * _2076) * _2084) * _1834);
    float _2145 = (((_2127 * cbLight._m0[_2098].z) * _2133) * _1820) + ((((cbLight._m0[_2044].z * _1790) * _2076) * _2084) * _1834);
    float _2201;
    float _2203;
    float _2205;
    if (_1874)
    {
        _2201 = _2143;
        _2203 = _2144;
        _2205 = _2145;
    }
    else
    {
        uint _2207 = _1797 + 10u;
        uint _2213 = _1797 + 2u;
        float _2219 = cbLight._m0[_2213].x + _410;
        float _2220 = cbLight._m0[_2213].y + _411;
        float _2221 = cbLight._m0[_2213].z + _412;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2229 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_2213].xyz));
        float _4001 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2219 * _2225, _2220 * _2225, _2221 * _2225));
        float _4012 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = (0.5 / ((_2232 + 9.9999999392252902907785028219223e-09) + _2064)) * _2232;
        float _4023 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.31831014156341552734375;
        float _2249 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2201 = (((_2242 * cbLight._m0[_2207].x) * _2248) * _2249) + _2143;
        _2203 = (((_2242 * cbLight._m0[_2207].y) * _2248) * _2249) + _2144;
        _2205 = (((_2242 * cbLight._m0[_2207].z) * _2248) * _2249) + _2145;
    }
    float _2280;
    float _2282;
    float _2284;
    if (_1983)
    {
        _2280 = _2201;
        _2282 = _2203;
        _2284 = _2205;
    }
    else
    {
        uint _2291 = _1797 + 11u;
        uint _2297 = _1797 + 3u;
        float _2303 = cbLight._m0[_2297].x + _410;
        float _2304 = cbLight._m0[_2297].y + _411;
        float _2305 = cbLight._m0[_2297].z + _412;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2313 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_2297].xyz));
        float _4039 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2303 * _2309, _2304 * _2309, _2305 * _2309));
        float _4050 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = (0.5 / ((_2316 + 9.9999999392252902907785028219223e-09) + _2064)) * _2316;
        float _4061 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.31831014156341552734375;
        float _2333 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2280 = (((_2326 * cbLight._m0[_2291].x) * _2332) * _2333) + _2201;
        _2282 = (((_2326 * cbLight._m0[_2291].y) * _2332) * _2333) + _2203;
        _2284 = (((_2326 * cbLight._m0[_2291].z) * _2332) * _2333) + _2205;
    }
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_1795.y == 0u)
    {
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _432) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _431) / _2355)));
        float _2376 = (log2(_1573 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
        }
        else
        {
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2671)
                {
                    frontier_phi_71_pred = _2660;
                    frontier_phi_71_pred_1 = _2659;
                    frontier_phi_71_pred_2 = _2658;
                    frontier_phi_71_pred_3 = _2657;
                    frontier_phi_71_pred_4 = _2656;
                    frontier_phi_71_pred_5 = _2655;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2657;
                    _2803 = _2658;
                    _2804 = _2659;
                    _2805 = _2660;
                    _2806 = _2670;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2661 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _1571;
                        float _2867 = _2826.y - _1572;
                        float _2868 = _2826.z - _1573;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4087 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * dot(vec3(_452, _455, _458), vec3(_2872 * _2866, _2872 * _2867, _2872 * _2868))) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _1571;
                        float _2902 = (-0.0) - _1572;
                        float _2903 = (-0.0) - _1573;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_452, _455, _458), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _4103 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _4114 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2915 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2919 = (0.5 / (((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) + 9.9999999392252902907785028219223e-09) + _2915)) * _2915;
                        float _4125 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2928 = (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 3.1415927410125732421875) / ((_2893 * 2.1991131305694580078125) + 3.141590118408203125)) * _2882;
                        _2730 = (_2897 * _2845.x) + _2803;
                        _2731 = (_2897 * _2845.y) + _2804;
                        _2732 = (_2897 * _2845.z) + _2805;
                        _2727 = (_2928 * _2862.x) + _2800;
                        _2728 = (_2928 * _2862.y) + _2801;
                        _2729 = (_2928 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_71_pred = _2732;
                    frontier_phi_71_pred_1 = _2731;
                    frontier_phi_71_pred_2 = _2730;
                    frontier_phi_71_pred_3 = _2729;
                    frontier_phi_71_pred_4 = _2728;
                    frontier_phi_71_pred_5 = _2727;
                }
                _2506 = frontier_phi_71_pred;
                _2504 = frontier_phi_71_pred_1;
                _2502 = frontier_phi_71_pred_2;
                _2500 = frontier_phi_71_pred_3;
                _2498 = frontier_phi_71_pred_4;
                _2496 = frontier_phi_71_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2496;
                    _2656 = _2498;
                    _2657 = _2500;
                    _2658 = _2502;
                    _2659 = _2504;
                    _2660 = _2506;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
        }
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.z;
        uint _2512 = (_2510 >> 8u) & 15u;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((4294967295u << _2512) & _2386) == 0u)
        {
            _2626 = _2495;
            _2628 = _2497;
            _2630 = _2499;
            _2632 = _2501;
            _2634 = _2503;
            _2636 = _2505;
        }
        else
        {
            float _2651 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2512 < ((_2510 >> 12u) & 15u))
            {
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2783 = _2495;
                float _2784 = _2497;
                float _2785 = _2499;
                float _2786 = _2501;
                float _2787 = _2503;
                float _2788 = _2505;
                uint _2789 = _2512;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2799)
                    {
                        frontier_phi_82_pred = _2788;
                        frontier_phi_82_pred_1 = _2787;
                        frontier_phi_82_pred_2 = _2786;
                        frontier_phi_82_pred_3 = _2785;
                        frontier_phi_82_pred_4 = _2784;
                        frontier_phi_82_pred_5 = _2783;
                    }
                    else
                    {
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _2955 = _2783;
                        float _2956 = _2784;
                        float _2957 = _2785;
                        float _2958 = _2786;
                        float _2959 = _2787;
                        float _2960 = _2788;
                        uint _2961 = _2798;
                        uint _2962;
                        vec4 _2987;
                        float _2988;
                        vec4 _3003;
                        vec3 _3015;
                        vec4 _3030;
                        vec4 _3046;
                        float _3093;
                        bool _3094;
                        for (;;)
                        {
                            uint _2972 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2961));
                            _2962 = (_2961 + 4294967295u) & _2961;
                            uint _2974 = _2972 * 40u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2988 = _2987.w;
                            uint _2990 = (_2972 * 40u) + 4u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2972 * 40u) + 8u;
                            _3015 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x));
                            uint _3017 = (_2972 * 40u) + 16u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2972 * 40u) + 20u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2972 * 40u) + 24u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3068 = (_2972 * 40u) + 28u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3093 = fma(_1573, _3081.z, fma(_1572, _3081.y, _3081.x * _1571)) + _3081.w;
                            _3094 = !((fma(_1573, _3062.z, fma(_1572, _3062.y, _3062.x * _1571)) + _3062.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3094)
                            {
                                float _3121 = _2987.x - _1571;
                                float _3122 = _2987.y - _1572;
                                float _3123 = _2987.z - _1573;
                                float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                                float _3127 = inversesqrt(_3124);
                                float _3128 = _3127 * _3121;
                                float _3129 = _3127 * _3122;
                                float _3130 = _3127 * _3123;
                                float _3134 = 1.0 - (_3124 / (_2988 * _2988));
                                float _4136 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3139 = sqrt(_3124) * _3003.w;
                                float _3141 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                                float _3142 = _3141 * _3141;
                                float _3143 = 1.0 - _3142;
                                float _3145 = (_3143 * dot(vec3(_3128, _3129, _3130), vec3(_452, _455, _458))) + _3142;
                                float _3148 = _3139 * _3139;
                                float _3152 = (fma(_1573, _3030.z, fma(_1572, _3030.y, _3030.x * _1571)) + _3030.w) / _3093;
                                float _3153 = (fma(_1573, _3046.z, fma(_1572, _3046.y, _3046.x * _1571)) + _3046.w) / _3093;
                                float _3157 = 1.0 - dot(vec2(_3152, _3153), vec2(_3152, _3153));
                                float _4152 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3159 = _3158 * (((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3135) / ((_3148 * 0.699999988079071044921875) + 1.0));
                                float _3169 = dot(vec3(_452, _455, _458), vec3((-0.0) - (_1571 * _2651), (-0.0) - (_1572 * _2651), (-0.0) - (_1573 * _2651)));
                                float _4163 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3177 = (_3143 * dot(vec3(_452, _455, _458), vec3(_3128, _3129, _3130))) + _3142;
                                float _4174 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3182 = (0.5 / (((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) + 9.9999999392252902907785028219223e-09) + _3178)) * _3178;
                                float _4185 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3189 = (_3158 * _3135) * (((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 3.1415927410125732421875) / ((_3148 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3159 * _3003.z;
                                frontier_phi_88_pred_1 = _3159 * _3003.y;
                                frontier_phi_88_pred_2 = _3159 * _3003.x;
                                frontier_phi_88_pred_3 = _3189 * _3015.z;
                                frontier_phi_88_pred_4 = _3189 * _3015.y;
                                frontier_phi_88_pred_5 = _3189 * _3015.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3198 = frontier_phi_88_pred;
                            _3197 = frontier_phi_88_pred_1;
                            _3196 = frontier_phi_88_pred_2;
                            _3195 = frontier_phi_88_pred_3;
                            _3194 = frontier_phi_88_pred_4;
                            _3193 = frontier_phi_88_pred_5;
                            _2945 = _3196 + _2958;
                            _2946 = _3197 + _2959;
                            _2947 = _3198 + _2960;
                            _2942 = _3193 + _2955;
                            _2943 = _3194 + _2956;
                            _2944 = _3195 + _2957;
                            if (_2962 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2962;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2947;
                        frontier_phi_82_pred_1 = _2946;
                        frontier_phi_82_pred_2 = _2945;
                        frontier_phi_82_pred_3 = _2944;
                        frontier_phi_82_pred_4 = _2943;
                        frontier_phi_82_pred_5 = _2942;
                    }
                    _2637 = frontier_phi_82_pred;
                    _2635 = frontier_phi_82_pred_1;
                    _2633 = frontier_phi_82_pred_2;
                    _2631 = frontier_phi_82_pred_3;
                    _2629 = frontier_phi_82_pred_4;
                    _2627 = frontier_phi_82_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2627;
                        _2784 = _2629;
                        _2785 = _2631;
                        _2786 = _2633;
                        _2787 = _2635;
                        _2788 = _2637;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2633;
                frontier_phi_63_64_ladder_1 = _2637;
                frontier_phi_63_64_ladder_2 = _2635;
                frontier_phi_63_64_ladder_3 = _2631;
                frontier_phi_63_64_ladder_4 = _2629;
                frontier_phi_63_64_ladder_5 = _2627;
            }
            else
            {
                frontier_phi_63_64_ladder = _2501;
                frontier_phi_63_64_ladder_1 = _2505;
                frontier_phi_63_64_ladder_2 = _2503;
                frontier_phi_63_64_ladder_3 = _2499;
                frontier_phi_63_64_ladder_4 = _2497;
                frontier_phi_63_64_ladder_5 = _2495;
            }
            _2626 = frontier_phi_63_64_ladder_5;
            _2628 = frontier_phi_63_64_ladder_4;
            _2630 = frontier_phi_63_64_ladder_3;
            _2632 = frontier_phi_63_64_ladder;
            _2634 = frontier_phi_63_64_ladder_2;
            _2636 = frontier_phi_63_64_ladder_1;
        }
        float _2641 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2399 = (_2641 * _2632) + _2038;
        _2401 = (_2641 * _2634) + _2040;
        _2403 = (_2641 * _2636) + _2042;
        _2405 = ((_2626 * 0.039999999105930328369140625) * _2641) + _2280;
        _2407 = ((_2628 * 0.039999999105930328369140625) * _2641) + _2282;
        _2409 = ((_2630 * 0.039999999105930328369140625) * _2641) + _2284;
    }
    else
    {
        _2399 = _2038;
        _2401 = _2040;
        _2403 = _2042;
        _2405 = _2280;
        _2407 = _2282;
        _2409 = _2284;
    }
    uint _2415 = _472 + uint(cbMatDynParam._m0[0u].w);
    float _2421 = (_323 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _288.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _259.x))) * cbInstanceData._m0[_2415].x;
    float _2422 = (_323 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _288.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _259.y))) * cbInstanceData._m0[_2415].y;
    float _2423 = (_323 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _288.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _259.z))) * cbInstanceData._m0[_2415].z;
    float _4201 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4212 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4223 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _2440 = (((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2399 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _496))) + ((_2405 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1306)) * cbPerFrame._m0[3u].x)) + _2421;
    float _2442 = (_2422 + ((_2407 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1306)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2401 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _496)));
    float _2444 = (_2423 + ((_2409 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1306)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2403 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _496)));
    float _2445 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2446 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2447 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2453 = cbMtdParam._m0[2u].x * _2421;
    float _2454 = cbMtdParam._m0[2u].y * _2422;
    float _2455 = cbMtdParam._m0[2u].z * _2423;
    float _4249 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2457 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    uint _2458 = _471 + 6u;
    float _2466 = _431 / cbSceneParam._m0[86u].x;
    float _2467 = _432 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _352 : (isnan(_352) ? cbSceneParam._m0[77u].w : min(_352, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_352 > cbSceneParam._m0[78u].w)
    {
        float _2520 = isnan(_352) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _352 : min(cbSceneParam._m0[80u].w, _352));
        float _2521 = _2520 / _352;
        float _2532 = _2521 * _403;
        float _2533 = _404 * _2521;
        float _2534 = (-0.0) - _2533;
        float _2536 = _2521 * _405;
        float _2538 = (cbSceneParam._m0[77u].w * _2534) / _2520;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2533;
        float _2546 = sqrt(((_2532 * _2532) + (_2533 * _2533)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2520)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2740;
        if (abs((_2534 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2740 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2686 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2740 = ((abs(_2546 / _2534) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2556 * _2695) - exp2(_2556 * _2696)) * _2684))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2742 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2751 = exp2((_2740 * (-1.44269502162933349609375)) * (1.0 - _2742.w));
        float _2752 = log2(_2751);
        float _2768 = log2(_2486);
        _2558 = (exp2(_2768 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].x)) * _2742.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2560 = (exp2(_2768 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].y)) * _2742.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2562 = (exp2(_2768 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2752 * cbSceneParam._m0[78u].z)) * _2742.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2564 = _2751 * _2486;
    }
    else
    {
        _2558 = _2483;
        _2560 = _2484;
        _2562 = _2485;
        _2564 = _2486;
    }
    bool _2778;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2607;
    float _2610;
    float _2613;
    float _2614;
    bool _2625;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2582 = exp2(_2578 * cbSceneParam._m0[78u].x);
        float _2583 = exp2(_2578 * cbSceneParam._m0[78u].y);
        float _2584 = exp2(_2578 * cbSceneParam._m0[78u].z);
        float _2585 = _2582 * _2445;
        float _2586 = _2583 * _2446;
        float _2587 = _2584 * _2447;
        float _2594 = _419 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2607 = ((_2453 * _2457) * _2582) * _2601;
        _2610 = ((_2454 * _2457) * _2583) * _2601;
        _2613 = ((_2455 * _2457) * _2584) * _2601;
        _2614 = _2594 * 0.999000012874603271484375;
        _2625 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2625)
        {
            if ((cbInstanceData._m0[_471 + 7u].x + _2614) < 0.5)
            {
                _2778 = true;
                break;
            }
        }
        uint _2719 = _472 + uint(_2574.w);
        if ((cbInstanceData._m0[_2719].w < 1.0) && ((cbInstanceData._m0[_2719].w + _2614) < 0.5))
        {
            _2778 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2778 = true;
            break;
        }
        _2778 = false;
        break;
    }
    float _2933;
    if (_2778)
    {
        discard_state = true;
        _2933 = 0.0;
    }
    else
    {
        _2933 = cbInstanceData._m0[_2458].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _2933;
    SV_Target_1.x = _2607;
    SV_Target_1.y = _2610;
    SV_Target_1.z = _2613;
    SV_Target_1.w = cbInstanceData._m0[_2458].w;
    discard_exit();
}


