#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _796;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _193 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _219 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _227 = (_219.x * cbMtdParam._m0[12u].x) + (_193.x * cbMtdParam._m0[9u].x);
    float _228 = (_219.y * cbMtdParam._m0[12u].y) + (_193.y * cbMtdParam._m0[9u].y);
    float _229 = (_219.z * cbMtdParam._m0[12u].z) + (_193.z * cbMtdParam._m0[9u].z);
    vec4 _251 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _280 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _297 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _298 = _297 * _171;
    float _299 = _297 * _172;
    float _300 = _297 * _173;
    float _3226 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3237 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3248 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _411 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _414 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _428 = _427 + 9u;
    uint _429 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3259 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _452 = _449.x * TEXCOORD_4;
    float _453 = dot(vec3(_298, _299, _300), vec3(_378, _379, _380));
    float _456 = _453 * 2.0;
    float _461 = (_456 * _298) - _378;
    float _462 = (_456 * _299) - _379;
    float _463 = (_456 * _300) - _380;
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _493 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _795;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _520 = fma(_493, cbModelParam._m0[26u].z, fma(_489, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485));
        float _524 = fma(_493, cbModelParam._m0[27u].z, fma(_489, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485));
        float _528 = fma(_493, cbModelParam._m0[28u].z, fma(_489, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485));
        float _553 = _485 + _298;
        float _554 = _489 + _299;
        float _555 = _493 + _300;
        float _565 = fma(_555, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553)) - _520;
        float _566 = fma(_555, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553)) - _524;
        float _567 = fma(_555, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553)) - _528;
        float _571 = inversesqrt(dot(vec3(_565, _566, _567), vec3(_565, _566, _567)));
        float _584 = ((_571 * _565) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_520 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _585 = ((_571 * _566) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_524 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _586 = ((_571 * _567) / cbModelParam._m0[34u].z) + ((((((_528 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_584, _585, _586), 0.0);
        float _623 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_589.x + (-0.5));
        float _625 = _623 * (_589.y + (-0.5));
        float _626 = _623 * (_589.z + (-0.5));
        float _633 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _634 = _633 * (_596.x + (-0.5));
        float _635 = _633 * (_596.y + (-0.5));
        float _636 = _633 * (_596.z + (-0.5));
        float _643 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _644 = _643 * (_603.x + (-0.5));
        float _645 = _643 * (_603.y + (-0.5));
        float _646 = _643 * (_603.z + (-0.5));
        float _653 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _654 = _653 * (_610.x + (-0.5));
        float _655 = _653 * (_610.y + (-0.5));
        float _656 = _653 * (_610.z + (-0.5));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
        float _659 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _660 = _624 * 0.5;
        float _661 = _634 * 0.5;
        float _662 = _644 * 0.5;
        float _663 = dot(vec3(_660, _661, _662), vec3(_660, _661, _662));
        float _668 = (_663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_663);
        float _677 = (dot(vec3(_298, _299, _300), vec3(_668 * _660, _668 * _661, _668 * _662)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _687 = sqrt(((_661 * _661) + (_660 * _660)) + (_662 * _662)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _689 = _688 * 2.0;
        float _693 = (1.0 - _688) / (_688 + 1.0);
        float _3329 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _703 = ((((1.0 - _694) * (_689 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_689 + 1.0))) + _694) * _657;
        float _704 = _625 * 0.5;
        float _705 = _635 * 0.5;
        float _706 = _645 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _720 = (dot(vec3(_298, _299, _300), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _729 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_658 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3362 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_731 + 1.0))) + _736) * _658;
        float _746 = _626 * 0.5;
        float _747 = _636 * 0.5;
        float _748 = _646 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_298, _299, _300), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_659 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3395 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_773 + 1.0))) + _778) * _659;
        _795 = _626;
        _797 = _625;
        _798 = _624;
        _799 = _636;
        _800 = _635;
        _801 = _634;
        _802 = _646;
        _803 = _645;
        _804 = _644;
        _805 = _659;
        _806 = _658;
        _807 = _657;
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0)));
        _809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
    }
    else
    {
        _795 = _796;
        _797 = _796;
        _798 = _796;
        _799 = _796;
        _800 = _796;
        _801 = _796;
        _802 = _796;
        _803 = _796;
        _804 = _796;
        _805 = _796;
        _806 = _796;
        _807 = _796;
        _808 = 0.0;
        _809 = 0.0;
        _810 = 0.0;
    }
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _836 = fma(_493, cbModelParam._m0[30u].z, fma(_489, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _485));
        float _840 = fma(_493, cbModelParam._m0[31u].z, fma(_489, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _485));
        float _844 = fma(_493, cbModelParam._m0[32u].z, fma(_489, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _485));
        float _867 = _485 + _298;
        float _868 = _489 + _299;
        float _869 = _493 + _300;
        float _879 = fma(_869, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867)) - _836;
        float _880 = fma(_869, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867)) - _840;
        float _881 = fma(_869, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867)) - _844;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_836 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_840 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[35u].z) + ((((((_844 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _935 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_902.x + (-0.5));
        float _937 = _935 * (_902.y + (-0.5));
        float _938 = _935 * (_902.z + (-0.5));
        float _945 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_909.x + (-0.5));
        float _947 = _945 * (_909.y + (-0.5));
        float _948 = _945 * (_909.z + (-0.5));
        float _955 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_916.x + (-0.5));
        float _957 = _955 * (_916.y + (-0.5));
        float _958 = _955 * (_916.z + (-0.5));
        float _965 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_923.x + (-0.5));
        float _967 = _965 * (_923.y + (-0.5));
        float _968 = _965 * (_923.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_298, _299, _300), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3458 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_999 + 1.0))) + _1004) * _969;
        float _1014 = _937 * 0.5;
        float _1015 = _947 * 0.5;
        float _1016 = _957 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_298, _299, _300), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3491 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1041 + 1.0))) + _1046) * _970;
        float _1056 = _938 * 0.5;
        float _1057 = _948 * 0.5;
        float _1058 = _958 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_298, _299, _300), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3524 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1083 + 1.0))) + _1088) * _971;
        _1105 = _938;
        _1106 = _937;
        _1107 = _936;
        _1108 = _948;
        _1109 = _947;
        _1110 = _946;
        _1111 = _958;
        _1112 = _957;
        _1113 = _956;
        _1114 = _971;
        _1115 = _970;
        _1116 = _969;
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _796;
        _1106 = _796;
        _1107 = _796;
        _1108 = _796;
        _1109 = _796;
        _1110 = _796;
        _1111 = _796;
        _1112 = _796;
        _1113 = _796;
        _1114 = _796;
        _1115 = _796;
        _1116 = _796;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _808)) + _808;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _809)) + _809;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _810)) + _810;
    float _1152 = fma(_1131, cbSceneParam._m0[89u].z, fma(_1130, cbSceneParam._m0[89u].y, _1129 * cbSceneParam._m0[89u].x));
    float _1155 = fma(_1131, cbSceneParam._m0[90u].z, fma(_1130, cbSceneParam._m0[90u].y, _1129 * cbSceneParam._m0[90u].x));
    float _1158 = fma(_1131, cbSceneParam._m0[91u].z, fma(_1130, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1129));
    float _1173 = _461 * 0.5;
    float _1174 = _462 * 0.5;
    float _1175 = _463 * 0.5;
    float _1176 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1179 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1182 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_795, _799, _802, _805));
        float _1193 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_797, _800, _803, _806));
        float _1197 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_798, _801, _804, _807));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1173, _1174, _1175, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1227;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1218 = dot(vec4(cbModelParam._m0[40u]), vec4(_1173, _1174, _1175, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1231 = (_1227 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1240 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1322;
    float _1324;
    float _1326;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1289 = fma(_493, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _485)) + cbModelParam._m0[13u].w;
        float _1293 = fma(_493, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _485)) + cbModelParam._m0[14u].w;
        float _1297 = fma(_493, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _485)) + cbModelParam._m0[15u].w;
        float _1300 = fma(_463, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461));
        float _1303 = fma(_463, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461));
        float _1306 = fma(_463, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461));
        float _1332;
        if (_1300 > 0.0)
        {
            _1332 = abs((1.0 - _1289) / _1300);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1289 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1332 = frontier_phi_14_12_ladder;
        }
        float _1506;
        if (_1303 > 0.0)
        {
            _1506 = abs((1.0 - _1293) / _1303);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1293 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1506 = frontier_phi_23_19_ladder;
        }
        float _1803;
        if (_1306 > 0.0)
        {
            _1803 = abs((1.0 - _1297) / _1306);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1297 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1803 = frontier_phi_35_30_ladder;
        }
        float _1805 = isnan(_1506) ? _1332 : (isnan(_1332) ? _1506 : min(_1332, _1506));
        float _1806 = isnan(_1803) ? _1805 : (isnan(_1805) ? _1803 : min(_1805, _1803));
        float _1810 = (_1806 * _1300) + _1289;
        float _1811 = (_1806 * _1303) + _1293;
        float _1812 = (_1806 * _1306) + _1297;
        float _1813 = _1806 * 9.9999997473787516355514526367188e-05;
        float _1815 = (-1.0) - _1813;
        float _1817 = _1813 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1812 > _1817) || ((_1812 < _1815) || ((_1811 > _1817) || ((_1811 < _1815) || ((_1810 < _1815) || (_1810 > _1817))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1812, cbModelParam._m0[9u].z, fma(_1811, cbModelParam._m0[9u].y, _1810 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1812, cbModelParam._m0[10u].z, fma(_1811, cbModelParam._m0[10u].y, _1810 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1812, cbModelParam._m0[11u].z, fma(_1811, cbModelParam._m0[11u].y, _1810 * cbModelParam._m0[11u].x))), _1240);
            frontier_phi_13_35_ladder = _1957.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1957.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1957.x * cbModelParam._m0[1u].y;
        }
        _1322 = frontier_phi_13_35_ladder_2;
        _1324 = frontier_phi_13_35_ladder_1;
        _1326 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_461, _462, _463), _1240);
        _1322 = _1310.x * cbModelParam._m0[1u].y;
        _1324 = _1310.y * cbModelParam._m0[1u].y;
        _1326 = _1310.z * cbModelParam._m0[1u].y;
    }
    float _1329 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1386 = fma(_493, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _485)) + cbModelParam._m0[21u].w;
        float _1390 = fma(_493, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _485)) + cbModelParam._m0[22u].w;
        float _1394 = fma(_493, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _485)) + cbModelParam._m0[23u].w;
        float _1397 = fma(_463, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461));
        float _1400 = fma(_463, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461));
        float _1403 = fma(_463, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461));
        float _1511;
        if (_1397 > 0.0)
        {
            _1511 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1511 = frontier_phi_25_21_ladder;
        }
        float _1830;
        if (_1400 > 0.0)
        {
            _1830 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1830 = frontier_phi_37_32_ladder;
        }
        float _2103;
        if (_1403 > 0.0)
        {
            _2103 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2103 = frontier_phi_47_44_ladder;
        }
        float _2105 = isnan(_1830) ? _1511 : (isnan(_1511) ? _1830 : min(_1511, _1830));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1397) + _1386;
        float _2111 = (_2106 * _1400) + _1390;
        float _2112 = (_2106 * _1403) + _1394;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2113;
        float _2116 = _2113 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2112 > _2116) || ((_2112 < _2114) || ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 < _2114) || (_2110 > _2116))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2112, cbModelParam._m0[17u].z, fma(_2111, cbModelParam._m0[17u].y, _2110 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2112, cbModelParam._m0[18u].z, fma(_2111, cbModelParam._m0[18u].y, _2110 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2112, cbModelParam._m0[19u].z, fma(_2111, cbModelParam._m0[19u].y, _2110 * cbModelParam._m0[19u].x))), _1329);
            frontier_phi_22_47_ladder = _2203.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2203.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2203.x * cbModelParam._m0[1u].z;
        }
        _1422 = frontier_phi_22_47_ladder_2;
        _1424 = frontier_phi_22_47_ladder_1;
        _1426 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_461, _462, _463), _1329);
        _1422 = _1406.x * cbModelParam._m0[1u].z;
        _1424 = _1406.y * cbModelParam._m0[1u].z;
        _1426 = _1406.z * cbModelParam._m0[1u].z;
    }
    float _1438 = _452 * 0.01200000010430812835693359375;
    float _1440 = _1438 * ((cbModelParam._m0[1u].w * (_1422 - _1322)) + _1322);
    float _1441 = _1438 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1442 = _1438 * ((cbModelParam._m0[1u].w * (_1426 - _1326)) + _1326);
    float _1445 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, _1440 * cbSceneParam._m0[91u].x));
    float _1485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1493 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1497 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1498 = _1485 / _1497;
    float _1499 = _1489 / _1497;
    float _1500 = _1493 / _1497;
    float _1647;
    float _1648;
    float _1649;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1527 = ((uint(_1500 > cbSceneParam._m0[59u].y) + uint(_1500 > cbSceneParam._m0[59u].x)) + uint(_1500 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1528 = _1527 + 43u;
        uint _1536 = _1527 + 44u;
        uint _1544 = _1527 + 45u;
        uint _1552 = _1527 + 46u;
        float _1563 = fma(_1497, cbSceneParam._m0[_1528].w, fma(_1493, cbSceneParam._m0[_1528].z, fma(_1489, cbSceneParam._m0[_1528].y, _1485 * cbSceneParam._m0[_1528].x)));
        float _1567 = fma(_1497, cbSceneParam._m0[_1536].w, fma(_1493, cbSceneParam._m0[_1536].z, fma(_1489, cbSceneParam._m0[_1536].y, _1485 * cbSceneParam._m0[_1536].x)));
        float _1575 = fma(_1497, cbSceneParam._m0[_1552].w, fma(_1493, cbSceneParam._m0[_1552].z, fma(_1489, cbSceneParam._m0[_1552].y, _1485 * cbSceneParam._m0[_1552].x)));
        float _1580 = cbSceneParam._m0[33u].z * _1575;
        float _1582 = cbSceneParam._m0[33u].w * _1575;
        float _1585 = fma(_1497, cbSceneParam._m0[_1544].w, fma(_1493, cbSceneParam._m0[_1544].z, fma(_1489, cbSceneParam._m0[_1544].y, _1485 * cbSceneParam._m0[_1544].x))) / _1575;
        float _1633 = (cbSceneParam._m0[33u].x - sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500))) * cbSceneParam._m0[33u].y;
        float _3650 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1640 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1580 + _1563) / _1575, (_1582 + _1567) / _1575), _1585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1582 + _1563) / _1575, (_1567 - _1580) / _1575), _1585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1563 - _1580) / _1575, (_1567 - _1582) / _1575), _1585), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1563 - _1582) / _1575, (_1580 + _1567) / _1575), _1585), 0.0)).x), vec4(0.25)));
        _1647 = 1.0 - (_1640 * cbSceneParam._m0[34u].x);
        _1648 = 1.0 - (_1640 * cbSceneParam._m0[34u].y);
        _1649 = 1.0 - (_1640 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1647 = 1.0;
        _1648 = 1.0;
        _1649 = 1.0;
    }
    float _1713;
    float _1715;
    float _1717;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1701 = fma(_1497, cbSceneParam._m0[63u].w, fma(_1493, cbSceneParam._m0[63u].z, fma(_1489, cbSceneParam._m0[63u].y, _1485 * cbSceneParam._m0[63u].x)));
        float _1702 = fma(_1497, cbSceneParam._m0[60u].w, fma(_1493, cbSceneParam._m0[60u].z, fma(_1489, cbSceneParam._m0[60u].y, _1485 * cbSceneParam._m0[60u].x))) / _1701;
        float _1703 = fma(_1497, cbSceneParam._m0[61u].w, fma(_1493, cbSceneParam._m0[61u].z, fma(_1489, cbSceneParam._m0[61u].y, _1485 * cbSceneParam._m0[61u].x))) / _1701;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1702 >= cbSceneParam._m0[64u].x) && (_1703 >= cbSceneParam._m0[64u].y)) && (_1702 <= cbSceneParam._m0[64u].z)) && (_1703 <= cbSceneParam._m0[64u].w))
        {
            float _1843 = fma(_1497, cbSceneParam._m0[62u].w, fma(_1493, cbSceneParam._m0[62u].z, fma(_1489, cbSceneParam._m0[62u].y, _1485 * cbSceneParam._m0[62u].x))) / _1701;
            float _1847 = isnan(cbSceneParam._m0[41u].w) ? _1843 : (isnan(_1843) ? cbSceneParam._m0[41u].w : max(_1843, cbSceneParam._m0[41u].w));
            float _1890 = (cbSceneParam._m0[33u].x - sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500))) * cbSceneParam._m0[33u].y;
            float _3666 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
            float _1897 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1702, cbSceneParam._m0[33u].w + _1703), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1702, _1703 - cbSceneParam._m0[33u].z), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1702 - cbSceneParam._m0[33u].z, _1703 - cbSceneParam._m0[33u].w), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1702 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1703), _1847), 0.0)).x), vec4(0.25)));
            float _1901 = 1.0 - (_1897 * cbSceneParam._m0[34u].x);
            float _1902 = 1.0 - (_1897 * cbSceneParam._m0[34u].y);
            float _1903 = 1.0 - (_1897 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1903) ? _1649 : (isnan(_1649) ? _1903 : min(_1649, _1903));
            frontier_phi_34_33_ladder_1 = isnan(_1902) ? _1648 : (isnan(_1648) ? _1902 : min(_1648, _1902));
            frontier_phi_34_33_ladder_2 = isnan(_1901) ? _1647 : (isnan(_1647) ? _1901 : min(_1647, _1901));
        }
        else
        {
            frontier_phi_34_33_ladder = _1649;
            frontier_phi_34_33_ladder_1 = _1648;
            frontier_phi_34_33_ladder_2 = _1647;
        }
        _1713 = frontier_phi_34_33_ladder_2;
        _1715 = frontier_phi_34_33_ladder_1;
        _1717 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1713 = _1647;
        _1715 = _1648;
        _1717 = _1649;
    }
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _452 + (-1.0);
    float _1738 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1741 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1742 = _1724 + 5u;
    float _1748 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1752 = _1724 + 4u;
    float _1762 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1766 = _1724 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_298, _299, _300));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_298, _299, _300));
    float _3702 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3713 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1742].x * _1748) * _1787) + (((cbLight._m0[_1752].x * _1713) * _1762) * _1785);
    float _1795 = ((_1748 * cbLight._m0[_1742].y) * _1787) + (((cbLight._m0[_1752].y * _1715) * _1762) * _1785);
    float _1796 = ((_1748 * cbLight._m0[_1742].z) * _1787) + (((cbLight._m0[_1752].z * _1717) * _1762) * _1785);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1802)
    {
        _1904 = _1794;
        _1906 = _1795;
        _1908 = _1796;
    }
    else
    {
        uint _1912 = _1724 + 6u;
        float _1928 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1929 = _1928 * _1928;
        float _3724 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1931 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1904 = (((cbLight._m0[_1912].x * 0.3183098733425140380859375) * _1930) * _1931) + _1794;
        _1906 = (((cbLight._m0[_1912].y * 0.3183098733425140380859375) * _1930) * _1931) + _1795;
        _1908 = (((cbLight._m0[_1912].z * 0.3183098733425140380859375) * _1930) * _1931) + _1796;
    }
    bool _1911 = _1800.y == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1911)
    {
        _1966 = _1904;
        _1968 = _1906;
        _1970 = _1908;
    }
    else
    {
        uint _2074 = _1724 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _3740 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _2093 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _1966 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1904;
        _1968 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1906;
        _1970 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1908;
    }
    uint _1972 = _1724 + 8u;
    float _1978 = cbLight._m0[_1724].x + _378;
    float _1979 = cbLight._m0[_1724].y + _379;
    float _1980 = cbLight._m0[_1724].z + _380;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1988 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1724].xyz));
    float _3756 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _1992 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1978 * _1984, _1979 * _1984, _1980 * _1984));
    float _3778 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = (0.5 / ((_1991 + 9.9999999392252902907785028219223e-09) + _1992)) * _1991;
    float _3789 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.31831014156341552734375;
    uint _2026 = _1724 + 9u;
    float _2032 = cbLight._m0[_1766].x + _378;
    float _2033 = cbLight._m0[_1766].y + _379;
    float _2034 = cbLight._m0[_1766].z + _380;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2042 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1766].xyz));
    float _3800 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_2032 * _2038, _2033 * _2038, _2034 * _2038));
    float _3811 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = (0.5 / ((_2045 + 9.9999999392252902907785028219223e-09) + _1992)) * _2045;
    float _3822 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * 0.31831014156341552734375;
    float _2071 = (((_2055 * cbLight._m0[_2026].x) * _2061) * _1748) + ((((cbLight._m0[_1972].x * _1713) * _2004) * _2012) * _1762);
    float _2072 = (((_2055 * cbLight._m0[_2026].y) * _2061) * _1748) + ((((cbLight._m0[_1972].y * _1715) * _2004) * _2012) * _1762);
    float _2073 = (((_2055 * cbLight._m0[_2026].z) * _2061) * _1748) + ((((cbLight._m0[_1972].z * _1717) * _2004) * _2012) * _1762);
    float _2129;
    float _2131;
    float _2133;
    if (_1802)
    {
        _2129 = _2071;
        _2131 = _2072;
        _2133 = _2073;
    }
    else
    {
        uint _2135 = _1724 + 10u;
        uint _2141 = _1724 + 2u;
        float _2147 = cbLight._m0[_2141].x + _378;
        float _2148 = cbLight._m0[_2141].y + _379;
        float _2149 = cbLight._m0[_2141].z + _380;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2157 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2141].xyz));
        float _3833 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _2161 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2147 * _2153, _2148 * _2153, _2149 * _2153));
        float _3844 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2174 = (0.5 / ((_2160 + 9.9999999392252902907785028219223e-09) + _1992)) * _2160;
        float _3855 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.31831014156341552734375;
        float _2177 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2129 = (((_2170 * cbLight._m0[_2135].x) * _2176) * _2177) + _2071;
        _2131 = (((_2170 * cbLight._m0[_2135].y) * _2176) * _2177) + _2072;
        _2133 = (((_2170 * cbLight._m0[_2135].z) * _2176) * _2177) + _2073;
    }
    float _2208;
    float _2210;
    float _2212;
    if (_1911)
    {
        _2208 = _2129;
        _2210 = _2131;
        _2212 = _2133;
    }
    else
    {
        uint _2219 = _1724 + 11u;
        uint _2225 = _1724 + 3u;
        float _2231 = cbLight._m0[_2225].x + _378;
        float _2232 = cbLight._m0[_2225].y + _379;
        float _2233 = cbLight._m0[_2225].z + _380;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2241 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2225].xyz));
        float _3871 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _2245 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2231 * _2237, _2232 * _2237, _2233 * _2237));
        float _3882 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2258 = (0.5 / ((_2244 + 9.9999999392252902907785028219223e-09) + _1992)) * _2244;
        float _3893 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.31831014156341552734375;
        float _2261 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
        _2208 = (((_2254 * cbLight._m0[_2219].x) * _2260) * _2261) + _2129;
        _2210 = (((_2254 * cbLight._m0[_2219].y) * _2260) * _2261) + _2131;
        _2212 = (((_2254 * cbLight._m0[_2219].z) * _2260) * _2261) + _2133;
    }
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    if (_1722.y == 0u)
    {
        uvec4 _2282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2283 = _2282.x;
        uint _2294 = uint((float(_2282.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2283))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2283)));
        float _2304 = (log2(_1500 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2305 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        uint _2308 = uint(isnan(14.0) ? _2305 : (isnan(_2305) ? 14.0 : min(_2305, 14.0)));
        uvec4 _2313 = texelFetch(g_lightClusterGridBuffer, int(((_2308 << 2u) + (_2294 << 6u)) >> 2u));
        uint _2314 = _2313.x;
        uint _2315 = _2282.z;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        if (((((1u << ((_2315 >> 4u) & 15u)) + 4294967295u) & _2314) == 0u) || ((_2315 & 240u) == 0u))
        {
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
        }
        else
        {
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2308 << 5u) + (_2294 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2591)
                {
                    frontier_phi_66_pred = _2580;
                    frontier_phi_66_pred_1 = _2579;
                    frontier_phi_66_pred_2 = _2578;
                    frontier_phi_66_pred_3 = _2577;
                    frontier_phi_66_pred_4 = _2576;
                    frontier_phi_66_pred_5 = _2575;
                }
                else
                {
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    uint _2705;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2590;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    for (;;)
                    {
                        uint _2709 = uint(findLSB(_2705)) + (_2581 << 5u);
                        uint _2706 = (_2705 + 4294967295u) & _2705;
                        uint _2711 = _2709 * 48u;
                        vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2731 = (_2709 * 48u) + 4u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2750 = (_2709 * 48u) + 8u;
                        vec3 _2761 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x));
                        float _2765 = _2725.x - _1498;
                        float _2766 = _2725.y - _1499;
                        float _2767 = _2725.z - _1500;
                        float _2768 = dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767));
                        float _2771 = inversesqrt(_2768);
                        float _2780 = 1.0 - (_2768 * _2725.w);
                        float _3919 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                        float _2782 = sqrt(_2768) * _2744.w;
                        float _2785 = 1.39999997615814208984375 / (_2782 + 1.39999997615814208984375);
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * dot(vec3(_408, _411, _414), vec3(_2771 * _2765, _2771 * _2766, _2771 * _2767))) + _2786;
                        float _2792 = _2782 * _2782;
                        float _2796 = ((isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))) * _2781) / ((_2792 * 0.699999988079071044921875) + 1.0);
                        float _2800 = (-0.0) - _1498;
                        float _2801 = (-0.0) - _1499;
                        float _2802 = (-0.0) - _1500;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2810 = dot(vec3(_408, _411, _414), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802));
                        float _3935 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _3946 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2814 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2818 = (0.5 / (((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) + 9.9999999392252902907785028219223e-09) + _2814)) * _2814;
                        float _3957 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2827 = (((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 3.1415927410125732421875) / ((_2792 * 2.1991131305694580078125) + 3.141590118408203125)) * _2781;
                        _2634 = (_2796 * _2744.x) + _2702;
                        _2635 = (_2796 * _2744.y) + _2703;
                        _2636 = (_2796 * _2744.z) + _2704;
                        _2631 = (_2827 * _2761.x) + _2699;
                        _2632 = (_2827 * _2761.y) + _2700;
                        _2633 = (_2827 * _2761.z) + _2701;
                        if (_2706 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2706;
                        }
                    }
                    frontier_phi_66_pred = _2636;
                    frontier_phi_66_pred_1 = _2635;
                    frontier_phi_66_pred_2 = _2634;
                    frontier_phi_66_pred_3 = _2633;
                    frontier_phi_66_pred_4 = _2632;
                    frontier_phi_66_pred_5 = _2631;
                }
                _2434 = frontier_phi_66_pred;
                _2432 = frontier_phi_66_pred_1;
                _2430 = frontier_phi_66_pred_2;
                _2428 = frontier_phi_66_pred_3;
                _2426 = frontier_phi_66_pred_4;
                _2424 = frontier_phi_66_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2424;
                    _2576 = _2426;
                    _2577 = _2428;
                    _2578 = _2430;
                    _2579 = _2432;
                    _2580 = _2434;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
        }
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.z;
        uint _2440 = (_2438 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2440) & _2314) == 0u)
        {
            _2546 = _2423;
            _2548 = _2425;
            _2550 = _2427;
            _2552 = _2429;
            _2554 = _2431;
            _2556 = _2433;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2440 < ((_2438 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2682 = _2423;
                float _2683 = _2425;
                float _2684 = _2427;
                float _2685 = _2429;
                float _2686 = _2431;
                float _2687 = _2433;
                uint _2688 = _2440;
                uint _2697;
                bool _2698;
                for (;;)
                {
                    _2697 = texelFetch(g_lightClassification, int((((_2308 << 5u) + (_2294 << 9u)) + (_2688 << 2u)) >> 2u)).x;
                    _2698 = _2697 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2698)
                    {
                        frontier_phi_72_pred = _2687;
                        frontier_phi_72_pred_1 = _2686;
                        frontier_phi_72_pred_2 = _2685;
                        frontier_phi_72_pred_3 = _2684;
                        frontier_phi_72_pred_4 = _2683;
                        frontier_phi_72_pred_5 = _2682;
                    }
                    else
                    {
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _2845 = _2682;
                        float _2846 = _2683;
                        float _2847 = _2684;
                        float _2848 = _2685;
                        float _2849 = _2686;
                        float _2850 = _2687;
                        uint _2851 = _2697;
                        uint _2852;
                        vec4 _2877;
                        float _2878;
                        vec4 _2893;
                        vec3 _2905;
                        vec4 _2920;
                        vec4 _2936;
                        float _2983;
                        bool _2984;
                        for (;;)
                        {
                            uint _2862 = ((_2688 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2851));
                            _2852 = (_2851 + 4294967295u) & _2851;
                            uint _2864 = _2862 * 40u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2878 = _2877.w;
                            uint _2880 = (_2862 * 40u) + 4u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2862 * 40u) + 8u;
                            _2905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x));
                            uint _2907 = (_2862 * 40u) + 16u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2923 = (_2862 * 40u) + 20u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2862 * 40u) + 24u;
                            vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2958 = (_2862 * 40u) + 28u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2983 = fma(_1500, _2971.z, fma(_1499, _2971.y, _2971.x * _1498)) + _2971.w;
                            _2984 = !((fma(_1500, _2952.z, fma(_1499, _2952.y, _2952.x * _1498)) + _2952.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2984)
                            {
                                float _3011 = _2877.x - _1498;
                                float _3012 = _2877.y - _1499;
                                float _3013 = _2877.z - _1500;
                                float _3014 = dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013));
                                float _3017 = inversesqrt(_3014);
                                float _3018 = _3017 * _3011;
                                float _3019 = _3017 * _3012;
                                float _3020 = _3017 * _3013;
                                float _3024 = 1.0 - (_3014 / (_2878 * _2878));
                                float _3968 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3025 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _3029 = sqrt(_3014) * _2893.w;
                                float _3031 = 1.39999997615814208984375 / (_3029 + 1.39999997615814208984375);
                                float _3032 = _3031 * _3031;
                                float _3033 = 1.0 - _3032;
                                float _3035 = (_3033 * dot(vec3(_3018, _3019, _3020), vec3(_408, _411, _414))) + _3032;
                                float _3038 = _3029 * _3029;
                                float _3042 = (fma(_1500, _2920.z, fma(_1499, _2920.y, _2920.x * _1498)) + _2920.w) / _2983;
                                float _3043 = (fma(_1500, _2936.z, fma(_1499, _2936.y, _2936.x * _1498)) + _2936.w) / _2983;
                                float _3047 = 1.0 - dot(vec2(_3042, _3043), vec2(_3042, _3043));
                                float _3984 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _3049 = _3048 * (((isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))) * _3025) / ((_3038 * 0.699999988079071044921875) + 1.0));
                                float _3059 = dot(vec3(_408, _411, _414), vec3((-0.0) - (_1498 * _2571), (-0.0) - (_1499 * _2571), (-0.0) - (_1500 * _2571)));
                                float _3995 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3067 = (_3033 * dot(vec3(_408, _411, _414), vec3(_3018, _3019, _3020))) + _3032;
                                float _4006 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                                float _3072 = (0.5 / (((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) + 9.9999999392252902907785028219223e-09) + _3068)) * _3068;
                                float _4017 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3079 = (_3048 * _3025) * (((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 3.1415927410125732421875) / ((_3038 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3049 * _2893.y;
                                frontier_phi_78_pred_1 = _3049 * _2893.x;
                                frontier_phi_78_pred_2 = _3079 * _2905.z;
                                frontier_phi_78_pred_3 = _3079 * _2905.y;
                                frontier_phi_78_pred_4 = _3079 * _2905.x;
                                frontier_phi_78_pred_5 = _3049 * _2893.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3087 = frontier_phi_78_pred;
                            _3086 = frontier_phi_78_pred_1;
                            _3085 = frontier_phi_78_pred_2;
                            _3084 = frontier_phi_78_pred_3;
                            _3083 = frontier_phi_78_pred_4;
                            _3088 = frontier_phi_78_pred_5;
                            _2835 = _3086 + _2848;
                            _2836 = _3087 + _2849;
                            _2837 = _3088 + _2850;
                            _2832 = _3083 + _2845;
                            _2833 = _3084 + _2846;
                            _2834 = _3085 + _2847;
                            if (_2852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2852;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2837;
                        frontier_phi_72_pred_1 = _2836;
                        frontier_phi_72_pred_2 = _2835;
                        frontier_phi_72_pred_3 = _2834;
                        frontier_phi_72_pred_4 = _2833;
                        frontier_phi_72_pred_5 = _2832;
                    }
                    _2557 = frontier_phi_72_pred;
                    _2555 = frontier_phi_72_pred_1;
                    _2553 = frontier_phi_72_pred_2;
                    _2551 = frontier_phi_72_pred_3;
                    _2549 = frontier_phi_72_pred_4;
                    _2547 = frontier_phi_72_pred_5;
                    uint _2689 = _2688 + 1u;
                    if (_2689 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2682 = _2547;
                        _2683 = _2549;
                        _2684 = _2551;
                        _2685 = _2553;
                        _2686 = _2555;
                        _2687 = _2557;
                        _2688 = _2689;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2557;
                frontier_phi_60_61_ladder_1 = _2555;
                frontier_phi_60_61_ladder_2 = _2551;
                frontier_phi_60_61_ladder_3 = _2549;
                frontier_phi_60_61_ladder_4 = _2547;
                frontier_phi_60_61_ladder_5 = _2553;
            }
            else
            {
                frontier_phi_60_61_ladder = _2433;
                frontier_phi_60_61_ladder_1 = _2431;
                frontier_phi_60_61_ladder_2 = _2427;
                frontier_phi_60_61_ladder_3 = _2425;
                frontier_phi_60_61_ladder_4 = _2423;
                frontier_phi_60_61_ladder_5 = _2429;
            }
            _2546 = frontier_phi_60_61_ladder_4;
            _2548 = frontier_phi_60_61_ladder_3;
            _2550 = frontier_phi_60_61_ladder_2;
            _2552 = frontier_phi_60_61_ladder_5;
            _2554 = frontier_phi_60_61_ladder_1;
            _2556 = frontier_phi_60_61_ladder;
        }
        float _2561 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _2327 = (_2561 * _2552) + _1966;
        _2329 = (_2561 * _2554) + _1968;
        _2331 = (_2561 * _2556) + _1970;
        _2333 = ((_2546 * 0.039999999105930328369140625) * _2561) + _2208;
        _2335 = ((_2548 * 0.039999999105930328369140625) * _2561) + _2210;
        _2337 = ((_2550 * 0.039999999105930328369140625) * _2561) + _2212;
    }
    else
    {
        _2327 = _1966;
        _2329 = _1968;
        _2331 = _1970;
        _2333 = _2208;
        _2335 = _2210;
        _2337 = _2212;
    }
    uint _2343 = _428 + uint(cbMatDynParam._m0[0u].w);
    float _2349 = cbInstanceData._m0[_2343].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _280.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _251.x));
    float _2350 = cbInstanceData._m0[_2343].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _280.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _251.y));
    float _2351 = cbInstanceData._m0[_2343].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _280.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _251.z));
    float _4033 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4044 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4055 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _2368 = (((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2327 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _452))) + ((_2333 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + _2349;
    float _2370 = (_2350 + ((_2335 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2329 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _452)));
    float _2372 = (_2351 + ((_2337 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2331 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _452)));
    float _4081 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2385 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    uint _2386 = _427 + 6u;
    float _2394 = _386 / cbSceneParam._m0[86u].x;
    float _2395 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2448 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2449 = _2448 / _320;
        float _2460 = _2449 * _371;
        float _2461 = _372 * _2449;
        float _2462 = (-0.0) - _2461;
        float _2464 = _2449 * _373;
        float _2466 = (cbSceneParam._m0[77u].w * _2462) / _2448;
        float _2467 = _2466 + cbSceneParam._m0[79u].w;
        float _2468 = cbSceneParam._m0[79u].w - _2461;
        float _2474 = sqrt(((_2460 * _2460) + (_2461 * _2461)) + (_2464 * _2464));
        float _2477 = (1.0 - (cbSceneParam._m0[77u].w / _2448)) * _2474;
        float _2482 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2484 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2644;
        if (abs((_2462 - _2466) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2644 = ((((_2467 > 0.0) ? exp2(_2482 * _2467) : (2.0 - exp2(_2484 * _2467))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2477;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : max(_2467, _2468));
            float _2606 = isnan(_2468) ? _2467 : (isnan(_2467) ? _2468 : min(_2467, _2468));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2644 = ((abs(_2474 / _2462) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2482 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2482 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2484 * _2615) - exp2(_2484 * _2616)) * _2604))) + (_2477 * cbSceneParam._m0[80u].z);
        }
        vec4 _2646 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2655 = exp2((_2644 * (-1.44269502162933349609375)) * (1.0 - _2646.w));
        float _2656 = log2(_2655);
        float _2672 = log2(_2414);
        _2486 = (exp2(_2672 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].x)) * _2646.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2488 = (exp2(_2672 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].y)) * _2646.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2490 = (exp2(_2672 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].z)) * _2646.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2492 = _2655 * _2414;
    }
    else
    {
        _2486 = _2411;
        _2488 = _2412;
        _2490 = _2413;
        _2492 = _2414;
    }
    float _2504 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2505 = _2504 == 3.0;
    float _2507 = log2(_2492);
    float _2511 = exp2(_2507 * cbSceneParam._m0[78u].x);
    float _2512 = exp2(_2507 * cbSceneParam._m0[78u].y);
    float _2513 = exp2(_2507 * cbSceneParam._m0[78u].z);
    float _2514 = _2511 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)));
    float _2515 = _2512 * (isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0)));
    float _2516 = _2513 * (isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0)));
    float _2525 = (_2504 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2525 * (_2505 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2486)));
    SV_Target.y = _2525 * (_2505 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2488)));
    SV_Target.z = _2525 * (_2505 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.w = cbInstanceData._m0[_2386].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2349) * _2385) * _2511) * _2525;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2350) * _2385) * _2512) * _2525;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2351) * _2385) * _2513) * _2525;
    SV_Target_1.w = cbInstanceData._m0[_2386].w;
}


