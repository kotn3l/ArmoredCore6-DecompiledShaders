#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _792;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _189 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _215 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _223 = (_215.x * cbMtdParam._m0[12u].x) + (_189.x * cbMtdParam._m0[9u].x);
    float _224 = (_215.y * cbMtdParam._m0[12u].y) + (_189.y * cbMtdParam._m0[9u].y);
    float _225 = (_215.z * cbMtdParam._m0[12u].z) + (_189.z * cbMtdParam._m0[9u].z);
    vec4 _247 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _276 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _293 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _294 = _293 * _167;
    float _295 = _293 * _168;
    float _296 = _293 * _169;
    float _2938 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _2949 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _2960 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _357 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _367 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _357);
    float _368 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _357);
    float _369 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _357);
    float _373 = inversesqrt(dot(vec3(_367, _368, _369), vec3(_367, _368, _369)));
    float _374 = _367 * _373;
    float _375 = _368 * _373;
    float _376 = _369 * _373;
    float _382 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _383 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _404 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _407 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _410 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _423 = uint(roundEven(NORMAL.w)) * 13u;
    uint _424 = _423 + 9u;
    uint _425 = _424 + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0)))) * cbInstanceData._m0[_425].z;
    float _2971 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
    float _2982 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
    float _2993 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _382, cbSceneParam._m0[86u].y * _383));
    float _448 = _445.x * TEXCOORD_4;
    float _449 = dot(vec3(_294, _295, _296), vec3(_374, _375, _376));
    float _452 = _449 * 2.0;
    float _457 = (_452 * _294) - _374;
    float _458 = (_452 * _295) - _375;
    float _459 = (_452 * _296) - _376;
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _791;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _516 = fma(_489, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481));
        float _520 = fma(_489, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481));
        float _524 = fma(_489, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481));
        float _549 = _481 + _294;
        float _550 = _485 + _295;
        float _551 = _489 + _296;
        float _561 = fma(_551, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549)) - _516;
        float _562 = fma(_551, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549)) - _520;
        float _563 = fma(_551, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549)) - _524;
        float _567 = inversesqrt(dot(vec3(_561, _562, _563), vec3(_561, _562, _563)));
        float _580 = ((_567 * _561) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_516 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _581 = ((_567 * _562) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_520 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _582 = ((_567 * _563) / cbModelParam._m0[34u].z) + ((((((_524 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_580, _581, _582), 0.0);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_580, _581, _582), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_580, _581, _582), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_580, _581, _582), 0.0);
        float _619 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _620 = _619 * (_585.x + (-0.5));
        float _621 = _619 * (_585.y + (-0.5));
        float _622 = _619 * (_585.z + (-0.5));
        float _629 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _630 = _629 * (_592.x + (-0.5));
        float _631 = _629 * (_592.y + (-0.5));
        float _632 = _629 * (_592.z + (-0.5));
        float _639 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_599.x + (-0.5));
        float _641 = _639 * (_599.y + (-0.5));
        float _642 = _639 * (_599.z + (-0.5));
        float _649 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_606.x + (-0.5));
        float _651 = _649 * (_606.y + (-0.5));
        float _652 = _649 * (_606.z + (-0.5));
        float _653 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _656 = _620 * 0.5;
        float _657 = _630 * 0.5;
        float _658 = _640 * 0.5;
        float _659 = dot(vec3(_656, _657, _658), vec3(_656, _657, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _673 = (dot(vec3(_294, _295, _296), vec3(_664 * _656, _664 * _657, _664 * _658)) + 1.0) * 0.5;
        float _3019 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _683 = sqrt(((_657 * _657) + (_656 * _656)) + (_658 * _658)) / (_653 + 9.9999997473787516355514526367188e-06);
        float _3030 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3041 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0))) * (_685 + 1.0))) + _690) * _653;
        float _700 = _621 * 0.5;
        float _701 = _631 * 0.5;
        float _702 = _641 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _716 = (dot(vec3(_294, _295, _296), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3052 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _725 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3063 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3074 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0))) * (_727 + 1.0))) + _732) * _654;
        float _742 = _622 * 0.5;
        float _743 = _632 * 0.5;
        float _744 = _642 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_294, _295, _296), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3085 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_655 + 9.9999997473787516355514526367188e-06);
        float _3096 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3107 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0))) * (_769 + 1.0))) + _774) * _655;
        _791 = _622;
        _793 = _621;
        _794 = _620;
        _795 = _632;
        _796 = _631;
        _797 = _630;
        _798 = _642;
        _799 = _641;
        _800 = _640;
        _801 = _655;
        _802 = _654;
        _803 = _653;
        _804 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _806 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
    }
    else
    {
        _791 = _792;
        _793 = _792;
        _794 = _792;
        _795 = _792;
        _796 = _792;
        _797 = _792;
        _798 = _792;
        _799 = _792;
        _800 = _792;
        _801 = _792;
        _802 = _792;
        _803 = _792;
        _804 = 0.0;
        _805 = 0.0;
        _806 = 0.0;
    }
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _832 = fma(_489, cbModelParam._m0[30u].z, fma(_485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _481));
        float _836 = fma(_489, cbModelParam._m0[31u].z, fma(_485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _481));
        float _840 = fma(_489, cbModelParam._m0[32u].z, fma(_485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _481));
        float _863 = _481 + _294;
        float _864 = _485 + _295;
        float _865 = _489 + _296;
        float _875 = fma(_865, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863)) - _832;
        float _876 = fma(_865, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863)) - _836;
        float _877 = fma(_865, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863)) - _840;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_832 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_836 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[35u].z) + ((((((_840 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _931 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_898.x + (-0.5));
        float _933 = _931 * (_898.y + (-0.5));
        float _934 = _931 * (_898.z + (-0.5));
        float _941 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_905.x + (-0.5));
        float _943 = _941 * (_905.y + (-0.5));
        float _944 = _941 * (_905.z + (-0.5));
        float _951 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_912.x + (-0.5));
        float _953 = _951 * (_912.y + (-0.5));
        float _954 = _951 * (_912.z + (-0.5));
        float _961 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_919.x + (-0.5));
        float _963 = _961 * (_919.y + (-0.5));
        float _964 = _961 * (_919.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_294, _295, _296), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3170 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_995 + 1.0))) + _1000) * _965;
        float _1010 = _933 * 0.5;
        float _1011 = _943 * 0.5;
        float _1012 = _953 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_294, _295, _296), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3203 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_1037 + 1.0))) + _1042) * _966;
        float _1052 = _934 * 0.5;
        float _1053 = _944 * 0.5;
        float _1054 = _954 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_294, _295, _296), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3236 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_1079 + 1.0))) + _1084) * _967;
        _1101 = _934;
        _1102 = _933;
        _1103 = _932;
        _1104 = _944;
        _1105 = _943;
        _1106 = _942;
        _1107 = _954;
        _1108 = _953;
        _1109 = _952;
        _1110 = _967;
        _1111 = _966;
        _1112 = _965;
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _792;
        _1102 = _792;
        _1103 = _792;
        _1104 = _792;
        _1105 = _792;
        _1106 = _792;
        _1107 = _792;
        _1108 = _792;
        _1109 = _792;
        _1110 = _792;
        _1111 = _792;
        _1112 = _792;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _804)) + _804;
    float _1126 = (cbModelParam._m0[1u].x * (_1114 - _805)) + _805;
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _806)) + _806;
    float _1148 = fma(_1127, cbSceneParam._m0[89u].z, fma(_1126, cbSceneParam._m0[89u].y, _1125 * cbSceneParam._m0[89u].x));
    float _1151 = fma(_1127, cbSceneParam._m0[90u].z, fma(_1126, cbSceneParam._m0[90u].y, _1125 * cbSceneParam._m0[90u].x));
    float _1154 = fma(_1127, cbSceneParam._m0[91u].z, fma(_1126, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1125));
    float _1169 = _457 * 0.5;
    float _1170 = _458 * 0.5;
    float _1171 = _459 * 0.5;
    float _1172 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1175 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1102, _1105, _1108, _1111));
    float _1178 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1212;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1185 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_791, _795, _798, _801));
        float _1189 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_793, _796, _799, _802));
        float _1193 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_794, _797, _800, _803));
        float _1200 = dot(vec4(cbModelParam._m0[39u]), vec4(_1169, _1170, _1171, 1.0));
        _1212 = dot(vec3(isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1212 = 1.0;
    }
    float _1223;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1214 = dot(vec4(cbModelParam._m0[40u]), vec4(_1169, _1170, _1171, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1214) ? 0.0 : (isnan(0.0) ? _1214 : max(0.0, _1214))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1227 = (_1223 * cbModelParam._m0[1u].x) + (_1212 * (1.0 - cbModelParam._m0[1u].x));
    float _1236 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1318;
    float _1320;
    float _1322;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1285 = fma(_489, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481)) + cbModelParam._m0[13u].w;
        float _1289 = fma(_489, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481)) + cbModelParam._m0[14u].w;
        float _1293 = fma(_489, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481)) + cbModelParam._m0[15u].w;
        float _1296 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1299 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1302 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1328;
        if (_1296 > 0.0)
        {
            _1328 = abs((1.0 - _1285) / _1296);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1285 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1328 = frontier_phi_14_12_ladder;
        }
        float _1535;
        if (_1299 > 0.0)
        {
            _1535 = abs((1.0 - _1289) / _1299);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1289 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1535 = frontier_phi_23_19_ladder;
        }
        float _1724;
        if (_1302 > 0.0)
        {
            _1724 = abs((1.0 - _1293) / _1302);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1293 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1724 = frontier_phi_35_30_ladder;
        }
        float _1726 = isnan(_1535) ? _1328 : (isnan(_1328) ? _1535 : min(_1328, _1535));
        float _1727 = isnan(_1724) ? _1726 : (isnan(_1726) ? _1724 : min(_1726, _1724));
        float _1731 = (_1727 * _1296) + _1285;
        float _1732 = (_1727 * _1299) + _1289;
        float _1733 = (_1727 * _1302) + _1293;
        float _1734 = _1727 * 9.9999997473787516355514526367188e-05;
        float _1736 = (-1.0) - _1734;
        float _1738 = _1734 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1733 > _1738) || ((_1733 < _1736) || ((_1732 > _1738) || ((_1732 < _1736) || ((_1731 < _1736) || (_1731 > _1738))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1733, cbModelParam._m0[9u].z, fma(_1732, cbModelParam._m0[9u].y, _1731 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1733, cbModelParam._m0[10u].z, fma(_1732, cbModelParam._m0[10u].y, _1731 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1733, cbModelParam._m0[11u].z, fma(_1732, cbModelParam._m0[11u].y, _1731 * cbModelParam._m0[11u].x))), _1236);
            frontier_phi_13_35_ladder = _1830.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1830.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1830.x * cbModelParam._m0[1u].y;
        }
        _1318 = frontier_phi_13_35_ladder_2;
        _1320 = frontier_phi_13_35_ladder_1;
        _1322 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1236);
        _1318 = _1306.x * cbModelParam._m0[1u].y;
        _1320 = _1306.y * cbModelParam._m0[1u].y;
        _1322 = _1306.z * cbModelParam._m0[1u].y;
    }
    float _1325 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1382 = fma(_489, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481)) + cbModelParam._m0[21u].w;
        float _1386 = fma(_489, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481)) + cbModelParam._m0[22u].w;
        float _1390 = fma(_489, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481)) + cbModelParam._m0[23u].w;
        float _1393 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1396 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1399 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1540;
        if (_1393 > 0.0)
        {
            _1540 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1540 = frontier_phi_25_21_ladder;
        }
        float _1751;
        if (_1396 > 0.0)
        {
            _1751 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1751 = frontier_phi_37_32_ladder;
        }
        float _1902;
        if (_1399 > 0.0)
        {
            _1902 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1902 = frontier_phi_46_43_ladder;
        }
        float _1904 = isnan(_1751) ? _1540 : (isnan(_1540) ? _1751 : min(_1540, _1751));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1393) + _1382;
        float _1910 = (_1905 * _1396) + _1386;
        float _1911 = (_1905 * _1399) + _1390;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1913 = (-1.0) - _1912;
        float _1915 = _1912 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1911 > _1915) || ((_1911 < _1913) || ((_1910 > _1915) || ((_1910 < _1913) || ((_1909 < _1913) || (_1909 > _1915))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1911, cbModelParam._m0[17u].z, fma(_1910, cbModelParam._m0[17u].y, _1909 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1911, cbModelParam._m0[18u].z, fma(_1910, cbModelParam._m0[18u].y, _1909 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1911, cbModelParam._m0[19u].z, fma(_1910, cbModelParam._m0[19u].y, _1909 * cbModelParam._m0[19u].x))), _1325);
            frontier_phi_22_46_ladder = _2139.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2139.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2139.x * cbModelParam._m0[1u].z;
        }
        _1418 = frontier_phi_22_46_ladder_2;
        _1420 = frontier_phi_22_46_ladder_1;
        _1422 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1325);
        _1418 = _1402.x * cbModelParam._m0[1u].z;
        _1420 = _1402.y * cbModelParam._m0[1u].z;
        _1422 = _1402.z * cbModelParam._m0[1u].z;
    }
    float _1434 = _448 * 0.01200000010430812835693359375;
    float _1436 = _1434 * ((cbModelParam._m0[1u].w * (_1418 - _1318)) + _1318);
    float _1437 = _1434 * ((cbModelParam._m0[1u].w * (_1420 - _1320)) + _1320);
    float _1438 = _1434 * ((cbModelParam._m0[1u].w * (_1422 - _1322)) + _1322);
    float _1441 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, _1436 * cbSceneParam._m0[91u].x));
    uvec4 _1457 = floatBitsToUint(cbInstanceData._m0[_423 + 5u]);
    uint _1459 = _1457.x * 14u;
    uint _1460 = _1459 + 13u;
    float _1467 = _448 + (-1.0);
    float _1473 = (cbLight._m0[_1460].x * _1467) + 1.0;
    float _1474 = (cbLight._m0[_1460].y * _1467) + 1.0;
    float _1475 = (cbLight._m0[_1460].z * _1467) + 1.0;
    float _1476 = (cbLight._m0[_1460].w * _1467) + 1.0;
    uint _1477 = _1459 + 5u;
    float _1483 = isnan(1.0) ? _1474 : (isnan(_1474) ? 1.0 : min(_1474, 1.0));
    uint _1487 = _1459 + 4u;
    float _1494 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
    uint _1498 = _1459 | 1u;
    float _1509 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_294, _295, _296));
    float _1512 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_294, _295, _296));
    float _3372 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _3383 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1517 = (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * 0.3183098733425140380859375;
    float _1519 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.3183098733425140380859375;
    float _1526 = ((cbLight._m0[_1477].x * _1483) * _1519) + ((cbLight._m0[_1487].x * _1494) * _1517);
    float _1527 = ((_1483 * cbLight._m0[_1477].y) * _1519) + ((_1494 * cbLight._m0[_1487].y) * _1517);
    float _1528 = ((_1483 * cbLight._m0[_1477].z) * _1519) + ((_1494 * cbLight._m0[_1487].z) * _1517);
    uvec4 _1532 = floatBitsToUint(cbLight._m0[_1459 + 12u]);
    bool _1534 = _1532.x == 0u;
    float _1545;
    float _1547;
    float _1549;
    if (_1534)
    {
        _1545 = _1526;
        _1547 = _1527;
        _1549 = _1528;
    }
    else
    {
        uint _1553 = _1459 + 6u;
        float _1569 = (dot(vec3(cbLight._m0[_1459 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1570 = _1569 * _1569;
        float _3394 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1572 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1545 = (((cbLight._m0[_1553].x * 0.3183098733425140380859375) * _1571) * _1572) + _1526;
        _1547 = (((cbLight._m0[_1553].y * 0.3183098733425140380859375) * _1571) * _1572) + _1527;
        _1549 = (((cbLight._m0[_1553].z * 0.3183098733425140380859375) * _1571) * _1572) + _1528;
    }
    bool _1552 = _1532.y == 0u;
    float _1590;
    float _1592;
    float _1594;
    if (_1552)
    {
        _1590 = _1545;
        _1592 = _1547;
        _1594 = _1549;
    }
    else
    {
        uint _1695 = _1459 + 7u;
        float _1711 = (dot(vec3(cbLight._m0[_1459 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1712 = _1711 * _1711;
        float _3410 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1714 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1590 = (((cbLight._m0[_1695].x * 0.3183098733425140380859375) * _1713) * _1714) + _1545;
        _1592 = (((cbLight._m0[_1695].y * 0.3183098733425140380859375) * _1713) * _1714) + _1547;
        _1594 = (((cbLight._m0[_1695].z * 0.3183098733425140380859375) * _1713) * _1714) + _1549;
    }
    uint _1596 = _1459 + 8u;
    float _1602 = cbLight._m0[_1459].x + _374;
    float _1603 = cbLight._m0[_1459].y + _375;
    float _1604 = cbLight._m0[_1459].z + _376;
    float _1608 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
    float _1612 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1459].xyz));
    float _3426 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1615 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _1616 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _1617 = dot(vec3(cbLight._m0[_1459].xyz), vec3(_1602 * _1608, _1603 * _1608, _1604 * _1608));
    float _3448 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1628 = (exp2(log2(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1634 = (0.5 / ((_1615 + 9.9999999392252902907785028219223e-09) + _1616)) * _1615;
    float _3459 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _1636 = (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.31831014156341552734375;
    uint _1647 = _1459 + 9u;
    float _1653 = cbLight._m0[_1498].x + _374;
    float _1654 = cbLight._m0[_1498].y + _375;
    float _1655 = cbLight._m0[_1498].z + _376;
    float _1659 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
    float _1663 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1498].xyz));
    float _3470 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1666 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _1667 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1653 * _1659, _1654 * _1659, _1655 * _1659));
    float _3481 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1676 = (exp2(log2(1.0 - (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1680 = (0.5 / ((_1666 + 9.9999999392252902907785028219223e-09) + _1616)) * _1666;
    float _3492 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1682 = (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.31831014156341552734375;
    float _1692 = (((_1676 * cbLight._m0[_1647].x) * _1682) * _1483) + (((_1628 * cbLight._m0[_1596].x) * _1636) * _1494);
    float _1693 = (((_1676 * cbLight._m0[_1647].y) * _1682) * _1483) + (((_1628 * cbLight._m0[_1596].y) * _1636) * _1494);
    float _1694 = (((_1676 * cbLight._m0[_1647].z) * _1682) * _1483) + (((_1628 * cbLight._m0[_1596].z) * _1636) * _1494);
    float _1756;
    float _1758;
    float _1760;
    if (_1534)
    {
        _1756 = _1692;
        _1758 = _1693;
        _1760 = _1694;
    }
    else
    {
        uint _1762 = _1459 + 10u;
        uint _1768 = _1459 + 2u;
        float _1774 = cbLight._m0[_1768].x + _374;
        float _1775 = cbLight._m0[_1768].y + _375;
        float _1776 = cbLight._m0[_1768].z + _376;
        float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
        float _1784 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1768].xyz));
        float _3503 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1787 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1788 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1774 * _1780, _1775 * _1780, _1776 * _1780));
        float _3514 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = (exp2(log2(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1801 = (0.5 / ((_1787 + 9.9999999392252902907785028219223e-09) + _1616)) * _1787;
        float _3525 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1803 = (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.31831014156341552734375;
        float _1804 = isnan(1.0) ? _1475 : (isnan(_1475) ? 1.0 : min(_1475, 1.0));
        _1756 = (((_1797 * cbLight._m0[_1762].x) * _1803) * _1804) + _1692;
        _1758 = (((_1797 * cbLight._m0[_1762].y) * _1803) * _1804) + _1693;
        _1760 = (((_1797 * cbLight._m0[_1762].z) * _1803) * _1804) + _1694;
    }
    float _1839;
    float _1841;
    float _1843;
    if (_1552)
    {
        _1839 = _1756;
        _1841 = _1758;
        _1843 = _1760;
    }
    else
    {
        uint _1850 = _1459 + 11u;
        uint _1856 = _1459 + 3u;
        float _1862 = cbLight._m0[_1856].x + _374;
        float _1863 = cbLight._m0[_1856].y + _375;
        float _1864 = cbLight._m0[_1856].z + _376;
        float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
        float _1872 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1856].xyz));
        float _3541 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1875 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1876 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_1862 * _1868, _1863 * _1868, _1864 * _1868));
        float _3552 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1885 = (exp2(log2(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1889 = (0.5 / ((_1875 + 9.9999999392252902907785028219223e-09) + _1616)) * _1875;
        float _3563 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1891 = (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.31831014156341552734375;
        float _1892 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
        _1839 = (((_1885 * cbLight._m0[_1850].x) * _1891) * _1892) + _1756;
        _1841 = (((_1885 * cbLight._m0[_1850].y) * _1891) * _1892) + _1758;
        _1843 = (((_1885 * cbLight._m0[_1850].z) * _1891) * _1892) + _1760;
    }
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    float _2035;
    float _2037;
    if (_1457.y == 0u)
    {
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1967;
        float _1969 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1967;
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1967;
        uvec4 _1982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1983 = _1982.x;
        uint _1994 = uint((float(_1982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _383) / _1983))) + floor(float(uint(cbSceneParam._m0[85u].x * _382) / _1983)));
        float _2004 = (log2(_1970 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2005 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        uint _2008 = uint(isnan(14.0) ? _2005 : (isnan(_2005) ? 14.0 : min(_2005, 14.0)));
        uvec4 _2013 = texelFetch(g_lightClusterGridBuffer, int(((_2008 << 2u) + (_1994 << 6u)) >> 2u));
        uint _2014 = _2013.x;
        uint _2015 = _1982.z;
        float _2144;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        if (((((1u << ((_2015 >> 4u) & 15u)) + 4294967295u) & _2014) == 0u) || ((_2015 & 240u) == 0u))
        {
            _2144 = 0.0;
            _2146 = 0.0;
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
        }
        else
        {
            float _2145;
            float _2147;
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            uint _2302 = 0u;
            uint _2311;
            bool _2312;
            for (;;)
            {
                _2311 = texelFetch(g_lightClassification, int((((_2008 << 5u) + (_1994 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                _2312 = _2311 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2312)
                {
                    frontier_phi_61_pred = _2296;
                    frontier_phi_61_pred_1 = _2301;
                    frontier_phi_61_pred_2 = _2300;
                    frontier_phi_61_pred_3 = _2299;
                    frontier_phi_61_pred_4 = _2298;
                    frontier_phi_61_pred_5 = _2297;
                }
                else
                {
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    uint _2426;
                    _2420 = _2296;
                    _2421 = _2297;
                    _2422 = _2298;
                    _2423 = _2299;
                    _2424 = _2300;
                    _2425 = _2301;
                    _2426 = _2311;
                    float _2352;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    for (;;)
                    {
                        uint _2430 = uint(findLSB(_2426)) + (_2302 << 5u);
                        uint _2427 = (_2426 + 4294967295u) & _2426;
                        uint _2432 = _2430 * 48u;
                        vec4 _2446 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2432)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2432 + 3u)).x));
                        uint _2452 = (_2430 * 48u) + 4u;
                        vec4 _2465 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2452)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2452 + 3u)).x));
                        uint _2471 = (_2430 * 48u) + 8u;
                        vec3 _2482 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2471)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2471 + 2u)).x));
                        float _2486 = _2446.x - _1968;
                        float _2487 = _2446.y - _1969;
                        float _2488 = _2446.z - _1970;
                        float _2489 = dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488));
                        float _2492 = inversesqrt(_2489);
                        float _2501 = 1.0 - (_2489 * _2446.w);
                        float _3589 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
                        float _2502 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                        float _2503 = sqrt(_2489) * _2465.w;
                        float _2506 = 1.39999997615814208984375 / (_2503 + 1.39999997615814208984375);
                        float _2507 = _2506 * _2506;
                        float _2510 = ((1.0 - _2507) * dot(vec3(_404, _407, _410), vec3(_2492 * _2486, _2492 * _2487, _2492 * _2488))) + _2507;
                        float _2513 = _2503 * _2503;
                        float _2517 = ((isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0))) * _2502) / ((_2513 * 0.699999988079071044921875) + 1.0);
                        float _2521 = (-0.0) - _1968;
                        float _2522 = (-0.0) - _1969;
                        float _2523 = (-0.0) - _1970;
                        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
                        float _2531 = dot(vec3(_404, _407, _410), vec3(_2527 * _2521, _2527 * _2522, _2527 * _2523));
                        float _3605 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                        float _3616 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
                        float _2535 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                        float _2539 = (0.5 / (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) + 9.9999999392252902907785028219223e-09) + _2535)) * _2535;
                        float _3627 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2548 = (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 3.1415927410125732421875) / ((_2513 * 2.1991131305694580078125) + 3.141590118408203125)) * _2502;
                        _2355 = (_2517 * _2465.x) + _2423;
                        _2356 = (_2517 * _2465.y) + _2424;
                        _2357 = (_2517 * _2465.z) + _2425;
                        _2352 = (_2548 * _2482.x) + _2420;
                        _2353 = (_2548 * _2482.y) + _2421;
                        _2354 = (_2548 * _2482.z) + _2422;
                        if (_2427 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2420 = _2352;
                            _2421 = _2353;
                            _2422 = _2354;
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2427;
                        }
                    }
                    frontier_phi_61_pred = _2352;
                    frontier_phi_61_pred_1 = _2357;
                    frontier_phi_61_pred_2 = _2356;
                    frontier_phi_61_pred_3 = _2355;
                    frontier_phi_61_pred_4 = _2354;
                    frontier_phi_61_pred_5 = _2353;
                }
                _2145 = frontier_phi_61_pred;
                _2155 = frontier_phi_61_pred_1;
                _2153 = frontier_phi_61_pred_2;
                _2151 = frontier_phi_61_pred_3;
                _2149 = frontier_phi_61_pred_4;
                _2147 = frontier_phi_61_pred_5;
                uint _2303 = _2302 + 1u;
                if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2296 = _2145;
                    _2297 = _2147;
                    _2298 = _2149;
                    _2299 = _2151;
                    _2300 = _2153;
                    _2301 = _2155;
                    _2302 = _2303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2144 = _2145;
            _2146 = _2147;
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
        }
        uvec4 _2158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2159 = _2158.z;
        uint _2161 = (_2159 >> 8u) & 15u;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        if (((4294967295u << _2161) & _2014) == 0u)
        {
            _2267 = _2144;
            _2269 = _2146;
            _2271 = _2148;
            _2273 = _2150;
            _2275 = _2152;
            _2277 = _2154;
        }
        else
        {
            float _2292 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2161 < ((_2159 >> 12u) & 15u))
            {
                float _2268;
                float _2270;
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2403 = _2144;
                float _2404 = _2146;
                float _2405 = _2148;
                float _2406 = _2150;
                float _2407 = _2152;
                float _2408 = _2154;
                uint _2409 = _2161;
                uint _2418;
                bool _2419;
                for (;;)
                {
                    _2418 = texelFetch(g_lightClassification, int((((_2008 << 5u) + (_1994 << 9u)) + (_2409 << 2u)) >> 2u)).x;
                    _2419 = _2418 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2419)
                    {
                        frontier_phi_67_pred = _2406;
                        frontier_phi_67_pred_1 = _2407;
                        frontier_phi_67_pred_2 = _2408;
                        frontier_phi_67_pred_3 = _2405;
                        frontier_phi_67_pred_4 = _2404;
                        frontier_phi_67_pred_5 = _2403;
                    }
                    else
                    {
                        float _2553;
                        float _2554;
                        float _2555;
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2566 = _2403;
                        float _2567 = _2404;
                        float _2568 = _2405;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        uint _2572 = _2418;
                        uint _2573;
                        vec4 _2598;
                        float _2599;
                        vec4 _2614;
                        vec3 _2626;
                        vec4 _2641;
                        vec4 _2657;
                        float _2704;
                        bool _2705;
                        for (;;)
                        {
                            uint _2583 = ((_2409 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2572));
                            _2573 = (_2572 + 4294967295u) & _2572;
                            uint _2585 = _2583 * 40u;
                            _2598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2585 + 3u)).x));
                            _2599 = _2598.w;
                            uint _2601 = (_2583 * 40u) + 4u;
                            _2614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2601 + 3u)).x));
                            uint _2616 = (_2583 * 40u) + 8u;
                            _2626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x));
                            uint _2628 = (_2583 * 40u) + 16u;
                            _2641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 3u)).x));
                            uint _2644 = (_2583 * 40u) + 20u;
                            _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            uint _2660 = (_2583 * 40u) + 24u;
                            vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            uint _2679 = (_2583 * 40u) + 28u;
                            vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            _2704 = fma(_1970, _2692.z, fma(_1969, _2692.y, _2692.x * _1968)) + _2692.w;
                            _2705 = !((fma(_1970, _2673.z, fma(_1969, _2673.y, _2673.x * _1968)) + _2673.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2705)
                            {
                                float _2732 = _2598.x - _1968;
                                float _2733 = _2598.y - _1969;
                                float _2734 = _2598.z - _1970;
                                float _2735 = dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734));
                                float _2738 = inversesqrt(_2735);
                                float _2739 = _2738 * _2732;
                                float _2740 = _2738 * _2733;
                                float _2741 = _2738 * _2734;
                                float _2745 = 1.0 - (_2735 / (_2599 * _2599));
                                float _3638 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2746 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                                float _2750 = sqrt(_2735) * _2614.w;
                                float _2752 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                                float _2753 = _2752 * _2752;
                                float _2754 = 1.0 - _2753;
                                float _2756 = (_2754 * dot(vec3(_2739, _2740, _2741), vec3(_404, _407, _410))) + _2753;
                                float _2759 = _2750 * _2750;
                                float _2763 = (fma(_1970, _2641.z, fma(_1969, _2641.y, _2641.x * _1968)) + _2641.w) / _2704;
                                float _2764 = (fma(_1970, _2657.z, fma(_1969, _2657.y, _2657.x * _1968)) + _2657.w) / _2704;
                                float _2768 = 1.0 - dot(vec2(_2763, _2764), vec2(_2763, _2764));
                                float _3654 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                                float _2769 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2770 = _2769 * (((isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))) * _2746) / ((_2759 * 0.699999988079071044921875) + 1.0));
                                float _2780 = dot(vec3(_404, _407, _410), vec3((-0.0) - (_1968 * _2292), (-0.0) - (_1969 * _2292), (-0.0) - (_1970 * _2292)));
                                float _3665 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                                float _2788 = (_2754 * dot(vec3(_404, _407, _410), vec3(_2739, _2740, _2741))) + _2753;
                                float _3676 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2789 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2793 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2789)) * _2789;
                                float _3687 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                                float _2800 = (_2769 * _2746) * (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2759 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2800 * _2626.x;
                                frontier_phi_73_pred_1 = _2800 * _2626.y;
                                frontier_phi_73_pred_2 = _2770 * _2614.z;
                                frontier_phi_73_pred_3 = _2770 * _2614.y;
                                frontier_phi_73_pred_4 = _2770 * _2614.x;
                                frontier_phi_73_pred_5 = _2800 * _2626.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2804 = frontier_phi_73_pred;
                            _2805 = frontier_phi_73_pred_1;
                            _2809 = frontier_phi_73_pred_2;
                            _2808 = frontier_phi_73_pred_3;
                            _2807 = frontier_phi_73_pred_4;
                            _2806 = frontier_phi_73_pred_5;
                            _2556 = _2807 + _2569;
                            _2557 = _2808 + _2570;
                            _2558 = _2809 + _2571;
                            _2553 = _2804 + _2566;
                            _2554 = _2805 + _2567;
                            _2555 = _2806 + _2568;
                            if (_2573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2566 = _2553;
                                _2567 = _2554;
                                _2568 = _2555;
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2573;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2556;
                        frontier_phi_67_pred_1 = _2557;
                        frontier_phi_67_pred_2 = _2558;
                        frontier_phi_67_pred_3 = _2555;
                        frontier_phi_67_pred_4 = _2554;
                        frontier_phi_67_pred_5 = _2553;
                    }
                    _2274 = frontier_phi_67_pred;
                    _2276 = frontier_phi_67_pred_1;
                    _2278 = frontier_phi_67_pred_2;
                    _2272 = frontier_phi_67_pred_3;
                    _2270 = frontier_phi_67_pred_4;
                    _2268 = frontier_phi_67_pred_5;
                    uint _2410 = _2409 + 1u;
                    if (_2410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2403 = _2268;
                        _2404 = _2270;
                        _2405 = _2272;
                        _2406 = _2274;
                        _2407 = _2276;
                        _2408 = _2278;
                        _2409 = _2410;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2276;
                frontier_phi_55_56_ladder_1 = _2278;
                frontier_phi_55_56_ladder_2 = _2274;
                frontier_phi_55_56_ladder_3 = _2272;
                frontier_phi_55_56_ladder_4 = _2270;
                frontier_phi_55_56_ladder_5 = _2268;
            }
            else
            {
                frontier_phi_55_56_ladder = _2152;
                frontier_phi_55_56_ladder_1 = _2154;
                frontier_phi_55_56_ladder_2 = _2150;
                frontier_phi_55_56_ladder_3 = _2148;
                frontier_phi_55_56_ladder_4 = _2146;
                frontier_phi_55_56_ladder_5 = _2144;
            }
            _2267 = frontier_phi_55_56_ladder_5;
            _2269 = frontier_phi_55_56_ladder_4;
            _2271 = frontier_phi_55_56_ladder_3;
            _2273 = frontier_phi_55_56_ladder_2;
            _2275 = frontier_phi_55_56_ladder;
            _2277 = frontier_phi_55_56_ladder_1;
        }
        float _2282 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _2027 = (_2282 * _2273) + _1590;
        _2029 = (_2282 * _2275) + _1592;
        _2031 = (_2282 * _2277) + _1594;
        _2033 = ((_2267 * 0.039999999105930328369140625) * _2282) + _1839;
        _2035 = ((_2269 * 0.039999999105930328369140625) * _2282) + _1841;
        _2037 = ((_2271 * 0.039999999105930328369140625) * _2282) + _1843;
    }
    else
    {
        _2027 = _1590;
        _2029 = _1592;
        _2031 = _1594;
        _2033 = _1839;
        _2035 = _1841;
        _2037 = _1843;
    }
    uint _2043 = _424 + uint(cbMatDynParam._m0[0u].w);
    float _2049 = cbInstanceData._m0[_2043].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _276.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _247.x));
    float _2050 = cbInstanceData._m0[_2043].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _276.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _247.y));
    float _2051 = cbInstanceData._m0[_2043].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _276.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _247.z));
    float _3703 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3714 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3725 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _2068 = (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_2027 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _448))) + ((_2033 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + _2049;
    float _2070 = (_2050 + ((_2035 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_2029 + ((isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))) * _448)));
    float _2072 = (_2051 + ((_2037 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_2031 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _448)));
    float _3751 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2085 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    uint _2086 = _423 + 6u;
    float _2094 = _382 / cbSceneParam._m0[86u].x;
    float _2095 = _383 / cbSceneParam._m0[86u].y;
    vec4 _2109 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2094, _2095, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2111 = _2109.x;
    float _2112 = _2109.y;
    float _2113 = _2109.z;
    float _2114 = _2109.w;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2169 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2170 = _2169 / _316;
        float _2181 = _2170 * _367;
        float _2182 = _368 * _2170;
        float _2183 = (-0.0) - _2182;
        float _2185 = _2170 * _369;
        float _2187 = (cbSceneParam._m0[77u].w * _2183) / _2169;
        float _2188 = _2187 + cbSceneParam._m0[79u].w;
        float _2189 = cbSceneParam._m0[79u].w - _2182;
        float _2195 = sqrt(((_2181 * _2181) + (_2182 * _2182)) + (_2185 * _2185));
        float _2198 = (1.0 - (cbSceneParam._m0[77u].w / _2169)) * _2195;
        float _2203 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2205 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2365;
        if (abs((_2183 - _2187) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2365 = ((((_2188 > 0.0) ? exp2(_2203 * _2188) : (2.0 - exp2(_2205 * _2188))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2198;
        }
        else
        {
            float _2325 = 1.0 / cbSceneParam._m0[80u].x;
            float _2326 = isnan(_2189) ? _2188 : (isnan(_2188) ? _2189 : max(_2188, _2189));
            float _2327 = isnan(_2189) ? _2188 : (isnan(_2188) ? _2189 : min(_2188, _2189));
            float _2336 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : min(_2326, 0.0));
            float _2337 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : min(_2327, 0.0));
            _2365 = ((abs(_2195 / _2183) * cbSceneParam._m0[80u].y) * ((((_2336 - _2337) * 2.0) - ((exp2(_2203 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)))) - exp2(_2203 * (isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0))))) * _2325)) - ((exp2(_2205 * _2336) - exp2(_2205 * _2337)) * _2325))) + (_2198 * cbSceneParam._m0[80u].z);
        }
        vec4 _2367 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2094, _2095, 1.0), 0.0);
        float _2376 = exp2((_2365 * (-1.44269502162933349609375)) * (1.0 - _2367.w));
        float _2377 = log2(_2376);
        float _2393 = log2(_2114);
        _2207 = (exp2(_2393 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].x)) * _2367.x) / cbSceneParam._m0[78u].x)) + _2111;
        _2209 = (exp2(_2393 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].y)) * _2367.y) / cbSceneParam._m0[78u].y)) + _2112;
        _2211 = (exp2(_2393 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2377 * cbSceneParam._m0[78u].z)) * _2367.z) / cbSceneParam._m0[78u].z)) + _2113;
        _2213 = _2376 * _2114;
    }
    else
    {
        _2207 = _2111;
        _2209 = _2112;
        _2211 = _2113;
        _2213 = _2114;
    }
    float _2225 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2226 = _2225 == 3.0;
    float _2228 = log2(_2213);
    float _2232 = exp2(_2228 * cbSceneParam._m0[78u].x);
    float _2233 = exp2(_2228 * cbSceneParam._m0[78u].y);
    float _2234 = exp2(_2228 * cbSceneParam._m0[78u].z);
    float _2235 = _2232 * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)));
    float _2236 = _2233 * (isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0)));
    float _2237 = _2234 * (isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)));
    float _2246 = (_2225 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2246 * (_2226 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2207)));
    SV_Target.y = _2246 * (_2226 ? _2236 : (_2236 + (cbSceneParam._m0[72u].w * _2209)));
    SV_Target.z = _2246 * (_2226 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2211)));
    SV_Target.w = cbInstanceData._m0[_2086].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2049) * _2085) * _2232) * _2246;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2050) * _2085) * _2233) * _2246;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2051) * _2085) * _2234) * _2246;
    SV_Target_1.w = cbInstanceData._m0[_2086].w;
}


