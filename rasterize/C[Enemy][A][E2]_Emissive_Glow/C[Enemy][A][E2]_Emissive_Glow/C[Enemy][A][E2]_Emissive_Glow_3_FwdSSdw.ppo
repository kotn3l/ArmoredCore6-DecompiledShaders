#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _833;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    vec4 _195 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _221 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _229 = (_221.x * cbMtdParam._m0[12u].x) + (_195.x * cbMtdParam._m0[9u].x);
    float _230 = (_221.y * cbMtdParam._m0[12u].y) + (_195.y * cbMtdParam._m0[9u].y);
    float _231 = (_221.z * cbMtdParam._m0[12u].z) + (_195.z * cbMtdParam._m0[9u].z);
    vec4 _265 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _294 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _319 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2998 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
    float _329 = (((_321 * _321) * (3.0 - (_321 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _336 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _337 = _336 * _174;
    float _338 = _336 * _175;
    float _339 = _336 * _176;
    float _3009 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3020 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3031 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _358 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _409 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _399);
    float _410 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _399);
    float _411 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _399);
    float _415 = inversesqrt(dot(vec3(_409, _410, _411), vec3(_409, _410, _411)));
    float _416 = _409 * _415;
    float _417 = _410 * _415;
    float _418 = _411 * _415;
    float _424 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _425 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_339, cbSceneParam._m0[5u].z, fma(_338, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _337));
    float _449 = fma(_339, cbSceneParam._m0[6u].z, fma(_338, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _337));
    float _452 = fma(_339, cbSceneParam._m0[7u].z, fma(_338, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _337));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _466 = _465 + 9u;
    uint _467 = _466 + uint(cbMatDynParam._m0[0u].w);
    float _473 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0)))) * cbInstanceData._m0[_467].x;
    float _474 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0)))) * cbInstanceData._m0[_467].y;
    float _475 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0)))) * cbInstanceData._m0[_467].z;
    float _3042 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
    float _3053 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
    float _3064 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0));
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _424, cbSceneParam._m0[86u].y * _425));
    float _490 = _487.x * TEXCOORD_4;
    float _491 = dot(vec3(_337, _338, _339), vec3(_416, _417, _418));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _337) - _416;
    float _499 = (_494 * _338) - _417;
    float _500 = (_494 * _339) - _418;
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _832;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _557 = fma(_530, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522));
        float _561 = fma(_530, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522));
        float _565 = fma(_530, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522));
        float _590 = _522 + _337;
        float _591 = _526 + _338;
        float _592 = _530 + _339;
        float _602 = fma(_592, cbModelParam._m0[26u].z, fma(_591, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _590)) - _557;
        float _603 = fma(_592, cbModelParam._m0[27u].z, fma(_591, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _590)) - _561;
        float _604 = fma(_592, cbModelParam._m0[28u].z, fma(_591, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _590)) - _565;
        float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
        float _621 = ((_608 * _602) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_557 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_608 * _603) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_561 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_608 * _604) / cbModelParam._m0[34u].z) + ((((((_565 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_621, _622, _623), 0.0);
        float _660 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_626.x + (-0.5));
        float _662 = _660 * (_626.y + (-0.5));
        float _663 = _660 * (_626.z + (-0.5));
        float _670 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_633.x + (-0.5));
        float _672 = _670 * (_633.y + (-0.5));
        float _673 = _670 * (_633.z + (-0.5));
        float _680 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_640.x + (-0.5));
        float _682 = _680 * (_640.y + (-0.5));
        float _683 = _680 * (_640.z + (-0.5));
        float _690 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_647.x + (-0.5));
        float _692 = _690 * (_647.y + (-0.5));
        float _693 = _690 * (_647.z + (-0.5));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = _661 * 0.5;
        float _698 = _671 * 0.5;
        float _699 = _681 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _714 = (dot(vec3(_337, _338, _339), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3090 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _724 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3101 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3112 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * (_726 + 1.0))) + _731) * _694;
        float _741 = _662 * 0.5;
        float _742 = _672 * 0.5;
        float _743 = _682 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_337, _338, _339), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3123 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3134 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3145 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))) * (_768 + 1.0))) + _773) * _695;
        float _783 = _663 * 0.5;
        float _784 = _673 * 0.5;
        float _785 = _683 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_337, _338, _339), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3156 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3167 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3178 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0))) * (_810 + 1.0))) + _815) * _696;
        _832 = _663;
        _834 = _662;
        _835 = _661;
        _836 = _673;
        _837 = _672;
        _838 = _671;
        _839 = _683;
        _840 = _682;
        _841 = _681;
        _842 = _696;
        _843 = _695;
        _844 = _694;
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
    }
    else
    {
        _832 = _833;
        _834 = _833;
        _835 = _833;
        _836 = _833;
        _837 = _833;
        _838 = _833;
        _839 = _833;
        _840 = _833;
        _841 = _833;
        _842 = _833;
        _843 = _833;
        _844 = _833;
        _845 = 0.0;
        _846 = 0.0;
        _847 = 0.0;
    }
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _873 = fma(_530, cbModelParam._m0[30u].z, fma(_526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _522));
        float _877 = fma(_530, cbModelParam._m0[31u].z, fma(_526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _522));
        float _881 = fma(_530, cbModelParam._m0[32u].z, fma(_526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _522));
        float _904 = _522 + _337;
        float _905 = _526 + _338;
        float _906 = _530 + _339;
        float _916 = fma(_906, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904)) - _873;
        float _917 = fma(_906, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904)) - _877;
        float _918 = fma(_906, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904)) - _881;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_873 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_877 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[35u].z) + ((((((_881 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _972 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_939.x + (-0.5));
        float _974 = _972 * (_939.y + (-0.5));
        float _975 = _972 * (_939.z + (-0.5));
        float _982 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_946.x + (-0.5));
        float _984 = _982 * (_946.y + (-0.5));
        float _985 = _982 * (_946.z + (-0.5));
        float _992 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_953.x + (-0.5));
        float _994 = _992 * (_953.y + (-0.5));
        float _995 = _992 * (_953.z + (-0.5));
        float _1002 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_960.x + (-0.5));
        float _1004 = _1002 * (_960.y + (-0.5));
        float _1005 = _1002 * (_960.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_337, _338, _339), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3219 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3230 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3241 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))) * (_1036 + 1.0))) + _1041) * _1006;
        float _1051 = _974 * 0.5;
        float _1052 = _984 * 0.5;
        float _1053 = _994 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_337, _338, _339), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3252 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3263 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3274 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * (_1078 + 1.0))) + _1083) * _1007;
        float _1093 = _975 * 0.5;
        float _1094 = _985 * 0.5;
        float _1095 = _995 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_337, _338, _339), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3307 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_1120 + 1.0))) + _1125) * _1008;
        _1142 = _975;
        _1143 = _974;
        _1144 = _973;
        _1145 = _985;
        _1146 = _984;
        _1147 = _983;
        _1148 = _995;
        _1149 = _994;
        _1150 = _993;
        _1151 = _1008;
        _1152 = _1007;
        _1153 = _1006;
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _833;
        _1143 = _833;
        _1144 = _833;
        _1145 = _833;
        _1146 = _833;
        _1147 = _833;
        _1148 = _833;
        _1149 = _833;
        _1150 = _833;
        _1151 = _833;
        _1152 = _833;
        _1153 = _833;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1189 = fma(_1168, cbSceneParam._m0[89u].z, fma(_1167, cbSceneParam._m0[89u].y, _1166 * cbSceneParam._m0[89u].x));
    float _1192 = fma(_1168, cbSceneParam._m0[90u].z, fma(_1167, cbSceneParam._m0[90u].y, _1166 * cbSceneParam._m0[90u].x));
    float _1195 = fma(_1168, cbSceneParam._m0[91u].z, fma(_1167, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1166));
    float _1210 = _498 * 0.5;
    float _1211 = _499 * 0.5;
    float _1212 = _500 * 0.5;
    float _1213 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1216 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1219 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1253;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1226 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_832, _836, _839, _842));
        float _1230 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_834, _837, _840, _843));
        float _1234 = dot(vec4(_1210, _1211, _1212, 1.0), vec4(_835, _838, _841, _844));
        float _1241 = dot(vec4(cbModelParam._m0[39u]), vec4(_1210, _1211, _1212, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1241) ? 0.0 : (isnan(0.0) ? _1241 : max(0.0, _1241))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1264;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1255 = dot(vec4(cbModelParam._m0[40u]), vec4(_1210, _1211, _1212, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1268 = (_1264 * cbModelParam._m0[1u].x) + (_1253 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1357;
    float _1359;
    float _1361;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1324 = fma(_530, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522)) + cbModelParam._m0[13u].w;
        float _1328 = fma(_530, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522)) + cbModelParam._m0[14u].w;
        float _1332 = fma(_530, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522)) + cbModelParam._m0[15u].w;
        float _1335 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1338 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1341 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1367;
        if (_1335 > 0.0)
        {
            _1367 = abs((1.0 - _1324) / _1335);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1324 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1367 = frontier_phi_14_12_ladder;
        }
        float _1593;
        if (_1338 > 0.0)
        {
            _1593 = abs((1.0 - _1328) / _1338);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1328 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1593 = frontier_phi_23_19_ladder;
        }
        float _1785;
        if (_1341 > 0.0)
        {
            _1785 = abs((1.0 - _1332) / _1341);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1332 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1785 = frontier_phi_35_30_ladder;
        }
        float _1787 = isnan(_1593) ? _1367 : (isnan(_1367) ? _1593 : min(_1367, _1593));
        float _1788 = isnan(_1785) ? _1787 : (isnan(_1787) ? _1785 : min(_1787, _1785));
        float _1792 = (_1788 * _1335) + _1324;
        float _1793 = (_1788 * _1338) + _1328;
        float _1794 = (_1788 * _1341) + _1332;
        float _1795 = _1788 * 9.9999997473787516355514526367188e-05;
        float _1797 = (-1.0) - _1795;
        float _1799 = _1795 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1794 > _1799) || ((_1794 < _1797) || ((_1793 > _1799) || ((_1793 < _1797) || ((_1792 < _1797) || (_1792 > _1799))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1794, cbModelParam._m0[9u].z, fma(_1793, cbModelParam._m0[9u].y, _1792 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1794, cbModelParam._m0[10u].z, fma(_1793, cbModelParam._m0[10u].y, _1792 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1794, cbModelParam._m0[11u].z, fma(_1793, cbModelParam._m0[11u].y, _1792 * cbModelParam._m0[11u].x))), _1277);
            frontier_phi_13_35_ladder = _1891.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1891.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1891.x * cbModelParam._m0[1u].y;
        }
        _1357 = frontier_phi_13_35_ladder_2;
        _1359 = frontier_phi_13_35_ladder_1;
        _1361 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1277);
        _1357 = _1345.x * cbModelParam._m0[1u].y;
        _1359 = _1345.y * cbModelParam._m0[1u].y;
        _1361 = _1345.z * cbModelParam._m0[1u].y;
    }
    float _1364 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1420 = fma(_530, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522)) + cbModelParam._m0[21u].w;
        float _1424 = fma(_530, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522)) + cbModelParam._m0[22u].w;
        float _1428 = fma(_530, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522)) + cbModelParam._m0[23u].w;
        float _1431 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1434 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1437 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1598;
        if (_1431 > 0.0)
        {
            _1598 = abs((1.0 - _1420) / _1431);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1420 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1598 = frontier_phi_25_21_ladder;
        }
        float _1812;
        if (_1434 > 0.0)
        {
            _1812 = abs((1.0 - _1424) / _1434);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1424 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1812 = frontier_phi_37_32_ladder;
        }
        float _1963;
        if (_1437 > 0.0)
        {
            _1963 = abs((1.0 - _1428) / _1437);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1428 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1963 = frontier_phi_46_43_ladder;
        }
        float _1965 = isnan(_1812) ? _1598 : (isnan(_1598) ? _1812 : min(_1598, _1812));
        float _1966 = isnan(_1963) ? _1965 : (isnan(_1965) ? _1963 : min(_1965, _1963));
        float _1970 = (_1966 * _1431) + _1420;
        float _1971 = (_1966 * _1434) + _1424;
        float _1972 = (_1966 * _1437) + _1428;
        float _1973 = _1966 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1973;
        float _1976 = _1973 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1972 > _1976) || ((_1972 < _1974) || ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 < _1974) || (_1970 > _1976))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2200 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1972, cbModelParam._m0[17u].z, fma(_1971, cbModelParam._m0[17u].y, _1970 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1972, cbModelParam._m0[18u].z, fma(_1971, cbModelParam._m0[18u].y, _1970 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1972, cbModelParam._m0[19u].z, fma(_1971, cbModelParam._m0[19u].y, _1970 * cbModelParam._m0[19u].x))), _1364);
            frontier_phi_22_46_ladder = _2200.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2200.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2200.x * cbModelParam._m0[1u].z;
        }
        _1456 = frontier_phi_22_46_ladder_2;
        _1458 = frontier_phi_22_46_ladder_1;
        _1460 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1364);
        _1456 = _1440.x * cbModelParam._m0[1u].z;
        _1458 = _1440.y * cbModelParam._m0[1u].z;
        _1460 = _1440.z * cbModelParam._m0[1u].z;
    }
    float _1472 = _490 * 0.01200000010430812835693359375;
    float _1474 = _1472 * ((cbModelParam._m0[1u].w * (_1456 - _1357)) + _1357);
    float _1475 = _1472 * ((cbModelParam._m0[1u].w * (_1458 - _1359)) + _1359);
    float _1476 = _1472 * ((cbModelParam._m0[1u].w * (_1460 - _1361)) + _1361);
    float _1479 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1482 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1485 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, _1474 * cbSceneParam._m0[91u].x));
    vec4 _1493 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_424, _425));
    float _1495 = _1493.w;
    float _1507 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1495);
    float _1508 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1495);
    float _1509 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1495);
    uvec4 _1513 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1515 = _1513.x * 14u;
    uint _1516 = _1515 + 13u;
    float _1523 = _490 + (-1.0);
    float _1528 = (cbLight._m0[_1516].x * _1523) + 1.0;
    float _1529 = (cbLight._m0[_1516].y * _1523) + 1.0;
    float _1530 = (cbLight._m0[_1516].z * _1523) + 1.0;
    float _1531 = (cbLight._m0[_1516].w * _1523) + 1.0;
    uint _1532 = _1515 + 5u;
    float _1538 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1542 = _1515 + 4u;
    float _1552 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1556 = _1515 | 1u;
    float _1567 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_337, _338, _339));
    float _1570 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_337, _338, _339));
    float _3443 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _3454 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1575 = (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.3183098733425140380859375;
    float _1577 = (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.3183098733425140380859375;
    float _1584 = ((cbLight._m0[_1532].x * _1538) * _1577) + (((cbLight._m0[_1542].x * _1507) * _1552) * _1575);
    float _1585 = ((_1538 * cbLight._m0[_1532].y) * _1577) + (((cbLight._m0[_1542].y * _1508) * _1552) * _1575);
    float _1586 = ((_1538 * cbLight._m0[_1532].z) * _1577) + (((cbLight._m0[_1542].z * _1509) * _1552) * _1575);
    uvec4 _1590 = floatBitsToUint(cbLight._m0[_1515 + 12u]);
    bool _1592 = _1590.x == 0u;
    float _1603;
    float _1605;
    float _1607;
    if (_1592)
    {
        _1603 = _1584;
        _1605 = _1585;
        _1607 = _1586;
    }
    else
    {
        uint _1611 = _1515 + 6u;
        float _1627 = (dot(vec3(cbLight._m0[_1515 + 2u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1628 = _1627 * _1627;
        float _3465 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1630 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1603 = (((cbLight._m0[_1611].x * 0.3183098733425140380859375) * _1629) * _1630) + _1584;
        _1605 = (((cbLight._m0[_1611].y * 0.3183098733425140380859375) * _1629) * _1630) + _1585;
        _1607 = (((cbLight._m0[_1611].z * 0.3183098733425140380859375) * _1629) * _1630) + _1586;
    }
    bool _1610 = _1590.y == 0u;
    float _1648;
    float _1650;
    float _1652;
    if (_1610)
    {
        _1648 = _1603;
        _1650 = _1605;
        _1652 = _1607;
    }
    else
    {
        uint _1756 = _1515 + 7u;
        float _1772 = (dot(vec3(cbLight._m0[_1515 + 3u].xyz), vec3(_337, _338, _339)) * 0.5) + 0.5;
        float _1773 = _1772 * _1772;
        float _3481 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1775 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1648 = (((cbLight._m0[_1756].x * 0.3183098733425140380859375) * _1774) * _1775) + _1603;
        _1650 = (((cbLight._m0[_1756].y * 0.3183098733425140380859375) * _1774) * _1775) + _1605;
        _1652 = (((cbLight._m0[_1756].z * 0.3183098733425140380859375) * _1774) * _1775) + _1607;
    }
    uint _1654 = _1515 + 8u;
    float _1660 = cbLight._m0[_1515].x + _416;
    float _1661 = cbLight._m0[_1515].y + _417;
    float _1662 = cbLight._m0[_1515].z + _418;
    float _1666 = inversesqrt(dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662)));
    float _1670 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1515].xyz));
    float _3497 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
    float _1673 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1674 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _1675 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_1660 * _1666, _1661 * _1666, _1662 * _1666));
    float _3519 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1686 = (exp2(log2(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1692 = (0.5 / ((_1673 + 9.9999999392252902907785028219223e-09) + _1674)) * _1673;
    float _3530 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1694 = (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.31831014156341552734375;
    uint _1708 = _1515 + 9u;
    float _1714 = cbLight._m0[_1556].x + _416;
    float _1715 = cbLight._m0[_1556].y + _417;
    float _1716 = cbLight._m0[_1556].z + _418;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1724 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1556].xyz));
    float _3541 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1714 * _1720, _1715 * _1720, _1716 * _1720));
    float _3552 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1737 = (exp2(log2(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1741 = (0.5 / ((_1727 + 9.9999999392252902907785028219223e-09) + _1674)) * _1727;
    float _3563 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1743 = (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * 0.31831014156341552734375;
    float _1753 = (((_1737 * cbLight._m0[_1708].x) * _1743) * _1538) + ((((cbLight._m0[_1654].x * _1507) * _1686) * _1694) * _1552);
    float _1754 = (((_1737 * cbLight._m0[_1708].y) * _1743) * _1538) + ((((cbLight._m0[_1654].y * _1508) * _1686) * _1694) * _1552);
    float _1755 = (((_1737 * cbLight._m0[_1708].z) * _1743) * _1538) + ((((cbLight._m0[_1654].z * _1509) * _1686) * _1694) * _1552);
    float _1817;
    float _1819;
    float _1821;
    if (_1592)
    {
        _1817 = _1753;
        _1819 = _1754;
        _1821 = _1755;
    }
    else
    {
        uint _1823 = _1515 + 10u;
        uint _1829 = _1515 + 2u;
        float _1835 = cbLight._m0[_1829].x + _416;
        float _1836 = cbLight._m0[_1829].y + _417;
        float _1837 = cbLight._m0[_1829].z + _418;
        float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
        float _1845 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1829].xyz));
        float _3574 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1848 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1849 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1835 * _1841, _1836 * _1841, _1837 * _1841));
        float _3585 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = (exp2(log2(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1862 = (0.5 / ((_1848 + 9.9999999392252902907785028219223e-09) + _1674)) * _1848;
        float _3596 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1864 = (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 0.31831014156341552734375;
        float _1865 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1817 = (((_1858 * cbLight._m0[_1823].x) * _1864) * _1865) + _1753;
        _1819 = (((_1858 * cbLight._m0[_1823].y) * _1864) * _1865) + _1754;
        _1821 = (((_1858 * cbLight._m0[_1823].z) * _1864) * _1865) + _1755;
    }
    float _1900;
    float _1902;
    float _1904;
    if (_1610)
    {
        _1900 = _1817;
        _1902 = _1819;
        _1904 = _1821;
    }
    else
    {
        uint _1911 = _1515 + 11u;
        uint _1917 = _1515 + 3u;
        float _1923 = cbLight._m0[_1917].x + _416;
        float _1924 = cbLight._m0[_1917].y + _417;
        float _1925 = cbLight._m0[_1917].z + _418;
        float _1929 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
        float _1933 = dot(vec3(_337, _338, _339), vec3(cbLight._m0[_1917].xyz));
        float _3612 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1936 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1937 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_1923 * _1929, _1924 * _1929, _1925 * _1929));
        float _3623 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1950 = (0.5 / ((_1936 + 9.9999999392252902907785028219223e-09) + _1674)) * _1936;
        float _3634 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1952 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.31831014156341552734375;
        float _1953 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1900 = (((_1946 * cbLight._m0[_1911].x) * _1952) * _1953) + _1817;
        _1902 = (((_1946 * cbLight._m0[_1911].y) * _1952) * _1953) + _1819;
        _1904 = (((_1946 * cbLight._m0[_1911].z) * _1952) * _1953) + _1821;
    }
    float _2088;
    float _2090;
    float _2092;
    float _2094;
    float _2096;
    float _2098;
    if (_1513.y == 0u)
    {
        float _2028 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2028;
        float _2030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2028;
        float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2028;
        uvec4 _2043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2044 = _2043.x;
        uint _2055 = uint((float(_2043.y) * floor(float(uint(cbSceneParam._m0[85u].y * _425) / _2044))) + floor(float(uint(cbSceneParam._m0[85u].x * _424) / _2044)));
        float _2065 = (log2(_2031 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2066 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        uint _2069 = uint(isnan(14.0) ? _2066 : (isnan(_2066) ? 14.0 : min(_2066, 14.0)));
        uvec4 _2074 = texelFetch(g_lightClusterGridBuffer, int(((_2069 << 2u) + (_2055 << 6u)) >> 2u));
        uint _2075 = _2074.x;
        uint _2076 = _2043.z;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        if (((((1u << ((_2076 >> 4u) & 15u)) + 4294967295u) & _2075) == 0u) || ((_2076 & 240u) == 0u))
        {
            _2205 = 0.0;
            _2207 = 0.0;
            _2209 = 0.0;
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
        }
        else
        {
            float _2206;
            float _2208;
            float _2210;
            float _2212;
            float _2214;
            float _2216;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            float _2359 = 0.0;
            float _2360 = 0.0;
            float _2361 = 0.0;
            uint _2362 = 0u;
            uint _2371;
            bool _2372;
            for (;;)
            {
                _2371 = texelFetch(g_lightClassification, int((((_2069 << 5u) + (_2055 << 9u)) + (_2362 << 2u)) >> 2u)).x;
                _2372 = _2371 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2372)
                {
                    frontier_phi_61_pred = _2356;
                    frontier_phi_61_pred_1 = _2361;
                    frontier_phi_61_pred_2 = _2360;
                    frontier_phi_61_pred_3 = _2359;
                    frontier_phi_61_pred_4 = _2358;
                    frontier_phi_61_pred_5 = _2357;
                }
                else
                {
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    uint _2486;
                    _2480 = _2356;
                    _2481 = _2357;
                    _2482 = _2358;
                    _2483 = _2359;
                    _2484 = _2360;
                    _2485 = _2361;
                    _2486 = _2371;
                    float _2412;
                    float _2413;
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    for (;;)
                    {
                        uint _2490 = uint(findLSB(_2486)) + (_2362 << 5u);
                        uint _2487 = (_2486 + 4294967295u) & _2486;
                        uint _2492 = _2490 * 48u;
                        vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2512 = (_2490 * 48u) + 4u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2512)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2512 + 3u)).x));
                        uint _2531 = (_2490 * 48u) + 8u;
                        vec3 _2542 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x));
                        float _2546 = _2506.x - _2029;
                        float _2547 = _2506.y - _2030;
                        float _2548 = _2506.z - _2031;
                        float _2549 = dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548));
                        float _2552 = inversesqrt(_2549);
                        float _2561 = 1.0 - (_2549 * _2506.w);
                        float _3660 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2562 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
                        float _2563 = sqrt(_2549) * _2525.w;
                        float _2566 = 1.39999997615814208984375 / (_2563 + 1.39999997615814208984375);
                        float _2567 = _2566 * _2566;
                        float _2570 = ((1.0 - _2567) * dot(vec3(_446, _449, _452), vec3(_2552 * _2546, _2552 * _2547, _2552 * _2548))) + _2567;
                        float _2573 = _2563 * _2563;
                        float _2577 = ((isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))) * _2562) / ((_2573 * 0.699999988079071044921875) + 1.0);
                        float _2581 = (-0.0) - _2029;
                        float _2582 = (-0.0) - _2030;
                        float _2583 = (-0.0) - _2031;
                        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
                        float _2591 = dot(vec3(_446, _449, _452), vec3(_2587 * _2581, _2587 * _2582, _2587 * _2583));
                        float _3676 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _3687 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2595 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
                        float _2599 = (0.5 / (((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) + 9.9999999392252902907785028219223e-09) + _2595)) * _2595;
                        float _3698 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
                        float _2608 = (((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 3.1415927410125732421875) / ((_2573 * 2.1991131305694580078125) + 3.141590118408203125)) * _2562;
                        _2415 = (_2577 * _2525.x) + _2483;
                        _2416 = (_2577 * _2525.y) + _2484;
                        _2417 = (_2577 * _2525.z) + _2485;
                        _2412 = (_2608 * _2542.x) + _2480;
                        _2413 = (_2608 * _2542.y) + _2481;
                        _2414 = (_2608 * _2542.z) + _2482;
                        if (_2487 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2480 = _2412;
                            _2481 = _2413;
                            _2482 = _2414;
                            _2483 = _2415;
                            _2484 = _2416;
                            _2485 = _2417;
                            _2486 = _2487;
                        }
                    }
                    frontier_phi_61_pred = _2412;
                    frontier_phi_61_pred_1 = _2417;
                    frontier_phi_61_pred_2 = _2416;
                    frontier_phi_61_pred_3 = _2415;
                    frontier_phi_61_pred_4 = _2414;
                    frontier_phi_61_pred_5 = _2413;
                }
                _2206 = frontier_phi_61_pred;
                _2216 = frontier_phi_61_pred_1;
                _2214 = frontier_phi_61_pred_2;
                _2212 = frontier_phi_61_pred_3;
                _2210 = frontier_phi_61_pred_4;
                _2208 = frontier_phi_61_pred_5;
                uint _2363 = _2362 + 1u;
                if (_2363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2356 = _2206;
                    _2357 = _2208;
                    _2358 = _2210;
                    _2359 = _2212;
                    _2360 = _2214;
                    _2361 = _2216;
                    _2362 = _2363;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2205 = _2206;
            _2207 = _2208;
            _2209 = _2210;
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
        }
        uvec4 _2219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2220 = _2219.z;
        uint _2222 = (_2220 >> 8u) & 15u;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((4294967295u << _2222) & _2075) == 0u)
        {
            _2327 = _2205;
            _2329 = _2207;
            _2331 = _2209;
            _2333 = _2211;
            _2335 = _2213;
            _2337 = _2215;
        }
        else
        {
            float _2352 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2222 < ((_2220 >> 12u) & 15u))
            {
                float _2328;
                float _2330;
                float _2332;
                float _2334;
                float _2336;
                float _2338;
                float _2463 = _2205;
                float _2464 = _2207;
                float _2465 = _2209;
                float _2466 = _2211;
                float _2467 = _2213;
                float _2468 = _2215;
                uint _2469 = _2222;
                uint _2478;
                bool _2479;
                for (;;)
                {
                    _2478 = texelFetch(g_lightClassification, int((((_2069 << 5u) + (_2055 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                    _2479 = _2478 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2479)
                    {
                        frontier_phi_67_pred = _2466;
                        frontier_phi_67_pred_1 = _2467;
                        frontier_phi_67_pred_2 = _2468;
                        frontier_phi_67_pred_3 = _2465;
                        frontier_phi_67_pred_4 = _2464;
                        frontier_phi_67_pred_5 = _2463;
                    }
                    else
                    {
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2626 = _2463;
                        float _2627 = _2464;
                        float _2628 = _2465;
                        float _2629 = _2466;
                        float _2630 = _2467;
                        float _2631 = _2468;
                        uint _2632 = _2478;
                        uint _2633;
                        vec4 _2658;
                        float _2659;
                        vec4 _2674;
                        vec3 _2686;
                        vec4 _2701;
                        vec4 _2717;
                        float _2764;
                        bool _2765;
                        for (;;)
                        {
                            uint _2643 = ((_2469 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2632));
                            _2633 = (_2632 + 4294967295u) & _2632;
                            uint _2645 = _2643 * 40u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            _2659 = _2658.w;
                            uint _2661 = (_2643 * 40u) + 4u;
                            _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2676 = (_2643 * 40u) + 8u;
                            _2686 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x));
                            uint _2688 = (_2643 * 40u) + 16u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2704 = (_2643 * 40u) + 20u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2720 = (_2643 * 40u) + 24u;
                            vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2739 = (_2643 * 40u) + 28u;
                            vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2739 + 3u)).x));
                            _2764 = fma(_2031, _2752.z, fma(_2030, _2752.y, _2752.x * _2029)) + _2752.w;
                            _2765 = !((fma(_2031, _2733.z, fma(_2030, _2733.y, _2733.x * _2029)) + _2733.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2765)
                            {
                                float _2792 = _2658.x - _2029;
                                float _2793 = _2658.y - _2030;
                                float _2794 = _2658.z - _2031;
                                float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                                float _2798 = inversesqrt(_2795);
                                float _2799 = _2798 * _2792;
                                float _2800 = _2798 * _2793;
                                float _2801 = _2798 * _2794;
                                float _2805 = 1.0 - (_2795 / (_2659 * _2659));
                                float _3709 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                                float _2806 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
                                float _2810 = sqrt(_2795) * _2674.w;
                                float _2812 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                                float _2813 = _2812 * _2812;
                                float _2814 = 1.0 - _2813;
                                float _2816 = (_2814 * dot(vec3(_2799, _2800, _2801), vec3(_446, _449, _452))) + _2813;
                                float _2819 = _2810 * _2810;
                                float _2823 = (fma(_2031, _2701.z, fma(_2030, _2701.y, _2701.x * _2029)) + _2701.w) / _2764;
                                float _2824 = (fma(_2031, _2717.z, fma(_2030, _2717.y, _2717.x * _2029)) + _2717.w) / _2764;
                                float _2828 = 1.0 - dot(vec2(_2823, _2824), vec2(_2823, _2824));
                                float _3725 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                                float _2829 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                                float _2830 = _2829 * (((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2806) / ((_2819 * 0.699999988079071044921875) + 1.0));
                                float _2840 = dot(vec3(_446, _449, _452), vec3((-0.0) - (_2029 * _2352), (-0.0) - (_2030 * _2352), (-0.0) - (_2031 * _2352)));
                                float _3736 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                                float _2848 = (_2814 * dot(vec3(_446, _449, _452), vec3(_2799, _2800, _2801))) + _2813;
                                float _3747 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                                float _2849 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
                                float _2853 = (0.5 / (((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) + 9.9999999392252902907785028219223e-09) + _2849)) * _2849;
                                float _3758 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                                float _2860 = (_2829 * _2806) * (((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 3.1415927410125732421875) / ((_2819 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2860 * _2686.x;
                                frontier_phi_73_pred_1 = _2860 * _2686.y;
                                frontier_phi_73_pred_2 = _2830 * _2674.z;
                                frontier_phi_73_pred_3 = _2830 * _2674.y;
                                frontier_phi_73_pred_4 = _2830 * _2674.x;
                                frontier_phi_73_pred_5 = _2860 * _2686.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2864 = frontier_phi_73_pred;
                            _2865 = frontier_phi_73_pred_1;
                            _2869 = frontier_phi_73_pred_2;
                            _2868 = frontier_phi_73_pred_3;
                            _2867 = frontier_phi_73_pred_4;
                            _2866 = frontier_phi_73_pred_5;
                            _2616 = _2867 + _2629;
                            _2617 = _2868 + _2630;
                            _2618 = _2869 + _2631;
                            _2613 = _2864 + _2626;
                            _2614 = _2865 + _2627;
                            _2615 = _2866 + _2628;
                            if (_2633 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2616;
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2633;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2616;
                        frontier_phi_67_pred_1 = _2617;
                        frontier_phi_67_pred_2 = _2618;
                        frontier_phi_67_pred_3 = _2615;
                        frontier_phi_67_pred_4 = _2614;
                        frontier_phi_67_pred_5 = _2613;
                    }
                    _2334 = frontier_phi_67_pred;
                    _2336 = frontier_phi_67_pred_1;
                    _2338 = frontier_phi_67_pred_2;
                    _2332 = frontier_phi_67_pred_3;
                    _2330 = frontier_phi_67_pred_4;
                    _2328 = frontier_phi_67_pred_5;
                    uint _2470 = _2469 + 1u;
                    if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2463 = _2328;
                        _2464 = _2330;
                        _2465 = _2332;
                        _2466 = _2334;
                        _2467 = _2336;
                        _2468 = _2338;
                        _2469 = _2470;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2336;
                frontier_phi_55_56_ladder_1 = _2338;
                frontier_phi_55_56_ladder_2 = _2334;
                frontier_phi_55_56_ladder_3 = _2332;
                frontier_phi_55_56_ladder_4 = _2330;
                frontier_phi_55_56_ladder_5 = _2328;
            }
            else
            {
                frontier_phi_55_56_ladder = _2213;
                frontier_phi_55_56_ladder_1 = _2215;
                frontier_phi_55_56_ladder_2 = _2211;
                frontier_phi_55_56_ladder_3 = _2209;
                frontier_phi_55_56_ladder_4 = _2207;
                frontier_phi_55_56_ladder_5 = _2205;
            }
            _2327 = frontier_phi_55_56_ladder_5;
            _2329 = frontier_phi_55_56_ladder_4;
            _2331 = frontier_phi_55_56_ladder_3;
            _2333 = frontier_phi_55_56_ladder_2;
            _2335 = frontier_phi_55_56_ladder;
            _2337 = frontier_phi_55_56_ladder_1;
        }
        float _2342 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2088 = (_2342 * _2333) + _1648;
        _2090 = (_2342 * _2335) + _1650;
        _2092 = (_2342 * _2337) + _1652;
        _2094 = ((_2327 * 0.039999999105930328369140625) * _2342) + _1900;
        _2096 = ((_2329 * 0.039999999105930328369140625) * _2342) + _1902;
        _2098 = ((_2331 * 0.039999999105930328369140625) * _2342) + _1904;
    }
    else
    {
        _2088 = _1648;
        _2090 = _1650;
        _2092 = _1652;
        _2094 = _1900;
        _2096 = _1902;
        _2098 = _1904;
    }
    uint _2104 = _466 + uint(cbMatDynParam._m0[0u].w);
    float _2110 = (_329 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _294.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _265.x))) * cbInstanceData._m0[_2104].x;
    float _2111 = (_329 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _294.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _265.y))) * cbInstanceData._m0[_2104].y;
    float _2112 = (_329 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _294.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _265.z))) * cbInstanceData._m0[_2104].z;
    float _3774 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3785 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3796 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _2129 = (((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_2088 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _490))) + ((_2094 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _1268)) * cbPerFrame._m0[3u].x)) + _2110;
    float _2131 = (_2111 + ((_2096 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _1268)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_2090 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _490)));
    float _2133 = (_2112 + ((_2098 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1268)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_2092 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _490)));
    float _3822 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2146 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    uint _2147 = _465 + 6u;
    float _2155 = _424 / cbSceneParam._m0[86u].x;
    float _2156 = _425 / cbSceneParam._m0[86u].y;
    vec4 _2170 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2155, _2156, (log2((isnan(cbSceneParam._m0[77u].w) ? _358 : (isnan(_358) ? cbSceneParam._m0[77u].w : min(_358, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2172 = _2170.x;
    float _2173 = _2170.y;
    float _2174 = _2170.z;
    float _2175 = _2170.w;
    float _2268;
    float _2270;
    float _2272;
    float _2274;
    if (_358 > cbSceneParam._m0[78u].w)
    {
        float _2230 = isnan(_358) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _358 : min(cbSceneParam._m0[80u].w, _358));
        float _2231 = _2230 / _358;
        float _2242 = _2231 * _409;
        float _2243 = _410 * _2231;
        float _2244 = (-0.0) - _2243;
        float _2246 = _2231 * _411;
        float _2248 = (cbSceneParam._m0[77u].w * _2244) / _2230;
        float _2249 = _2248 + cbSceneParam._m0[79u].w;
        float _2250 = cbSceneParam._m0[79u].w - _2243;
        float _2256 = sqrt(((_2242 * _2242) + (_2243 * _2243)) + (_2246 * _2246));
        float _2259 = (1.0 - (cbSceneParam._m0[77u].w / _2230)) * _2256;
        float _2264 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2266 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2425;
        if (abs((_2244 - _2248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2425 = ((((_2249 > 0.0) ? exp2(_2264 * _2249) : (2.0 - exp2(_2266 * _2249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2259;
        }
        else
        {
            float _2385 = 1.0 / cbSceneParam._m0[80u].x;
            float _2386 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : max(_2249, _2250));
            float _2387 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : min(_2249, _2250));
            float _2396 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : min(_2386, 0.0));
            float _2397 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : min(_2387, 0.0));
            _2425 = ((abs(_2256 / _2244) * cbSceneParam._m0[80u].y) * ((((_2396 - _2397) * 2.0) - ((exp2(_2264 * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)))) - exp2(_2264 * (isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0))))) * _2385)) - ((exp2(_2266 * _2396) - exp2(_2266 * _2397)) * _2385))) + (_2259 * cbSceneParam._m0[80u].z);
        }
        vec4 _2427 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2155, _2156, 1.0), 0.0);
        float _2436 = exp2((_2425 * (-1.44269502162933349609375)) * (1.0 - _2427.w));
        float _2437 = log2(_2436);
        float _2453 = log2(_2175);
        _2268 = (exp2(_2453 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2437 * cbSceneParam._m0[78u].x)) * _2427.x) / cbSceneParam._m0[78u].x)) + _2172;
        _2270 = (exp2(_2453 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2437 * cbSceneParam._m0[78u].y)) * _2427.y) / cbSceneParam._m0[78u].y)) + _2173;
        _2272 = (exp2(_2453 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2437 * cbSceneParam._m0[78u].z)) * _2427.z) / cbSceneParam._m0[78u].z)) + _2174;
        _2274 = _2436 * _2175;
    }
    else
    {
        _2268 = _2172;
        _2270 = _2173;
        _2272 = _2174;
        _2274 = _2175;
    }
    float _2286 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2287 = _2286 == 3.0;
    float _2288 = log2(_2274);
    float _2292 = exp2(_2288 * cbSceneParam._m0[78u].x);
    float _2293 = exp2(_2288 * cbSceneParam._m0[78u].y);
    float _2294 = exp2(_2288 * cbSceneParam._m0[78u].z);
    float _2295 = _2292 * (isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)));
    float _2296 = _2293 * (isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)));
    float _2297 = _2294 * (isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)));
    float _2306 = (_2286 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2306 * (_2287 ? _2295 : (_2295 + (cbSceneParam._m0[72u].w * _2268)));
    SV_Target.y = _2306 * (_2287 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2270)));
    SV_Target.z = _2306 * (_2287 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.w = cbInstanceData._m0[_2147].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2110) * _2146) * _2292) * _2306;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2111) * _2146) * _2293) * _2306;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2112) * _2146) * _2294) * _2306;
    SV_Target_1.w = cbInstanceData._m0[_2147].w;
}


