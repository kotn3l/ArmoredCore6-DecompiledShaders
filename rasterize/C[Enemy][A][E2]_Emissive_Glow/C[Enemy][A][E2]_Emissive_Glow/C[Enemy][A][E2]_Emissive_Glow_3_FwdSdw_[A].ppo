#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _880;
float _3360;
float _3361;
float _3362;
float _3363;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _180 = _179 * NORMAL.x;
    float _181 = _179 * NORMAL.y;
    float _182 = _179 * NORMAL.z;
    vec4 _201 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _227 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _235 = (_227.x * cbMtdParam._m0[12u].x) + (_201.x * cbMtdParam._m0[9u].x);
    float _236 = (_227.y * cbMtdParam._m0[12u].y) + (_201.y * cbMtdParam._m0[9u].y);
    float _237 = (_227.z * cbMtdParam._m0[12u].z) + (_201.z * cbMtdParam._m0[9u].z);
    vec4 _271 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _300 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _325 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3372 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _335 = (((_327 * _327) * (3.0 - (_327 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _342 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _343 = _342 * _180;
    float _344 = _342 * _181;
    float _345 = _342 * _182;
    float _3383 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3394 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3405 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _364 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _415 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _405);
    float _416 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _405);
    float _417 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _405);
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _415 * _421;
    float _423 = _416 * _421;
    float _424 = _417 * _421;
    vec4 _429 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _431 = _429.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _559 = sqrt(((_415 * _415) + (_416 * _416)) + (_417 * _417));
        float _565 = (cbMatDynParam._m0[5u].x * _559) + cbMatDynParam._m0[5u].y;
        float _3416 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        float _566 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _570 = (cbMatDynParam._m0[5u].z * _559) + cbMatDynParam._m0[5u].w;
        float _3427 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) - _566)) + _566) < ((_431 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _464 = fma(_345, cbSceneParam._m0[5u].z, fma(_344, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _343));
    float _467 = fma(_345, cbSceneParam._m0[6u].z, fma(_344, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _343));
    float _470 = fma(_345, cbSceneParam._m0[7u].z, fma(_344, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _343));
    uint _483 = uint(roundEven(NORMAL.w)) * 13u;
    uint _484 = _483 + 9u;
    uint _485 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3438 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    vec4 _505 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _443, cbSceneParam._m0[86u].y * _444));
    float _508 = _505.x * TEXCOORD_4;
    float _509 = dot(vec3(_343, _344, _345), vec3(_422, _423, _424));
    float _512 = _509 * 2.0;
    float _516 = (_512 * _343) - _422;
    float _517 = (_512 * _344) - _423;
    float _518 = (_512 * _345) - _424;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _879;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _604 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _608 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _612 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _637 = _540 + _343;
        float _638 = _544 + _344;
        float _639 = _548 + _345;
        float _649 = fma(_639, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637)) - _604;
        float _650 = fma(_639, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637)) - _608;
        float _651 = fma(_639, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637)) - _612;
        float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
        float _668 = ((_655 * _649) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_604 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_655 * _650) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_608 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_655 * _651) / cbModelParam._m0[34u].z) + ((((((_612 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        float _707 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_673.x + (-0.5));
        float _709 = _707 * (_673.y + (-0.5));
        float _710 = _707 * (_673.z + (-0.5));
        float _717 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_680.x + (-0.5));
        float _719 = _717 * (_680.y + (-0.5));
        float _720 = _717 * (_680.z + (-0.5));
        float _727 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_687.x + (-0.5));
        float _729 = _727 * (_687.y + (-0.5));
        float _730 = _727 * (_687.z + (-0.5));
        float _737 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_694.x + (-0.5));
        float _739 = _737 * (_694.y + (-0.5));
        float _740 = _737 * (_694.z + (-0.5));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = _708 * 0.5;
        float _745 = _718 * 0.5;
        float _746 = _728 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _761 = (dot(vec3(_343, _344, _345), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _771 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3508 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_773 + 1.0))) + _778) * _741;
        float _788 = _709 * 0.5;
        float _789 = _719 * 0.5;
        float _790 = _729 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_343, _344, _345), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3519 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3530 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3541 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * (_815 + 1.0))) + _820) * _742;
        float _830 = _710 * 0.5;
        float _831 = _720 * 0.5;
        float _832 = _730 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_343, _344, _345), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3574 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_857 + 1.0))) + _862) * _743;
        _879 = _710;
        _881 = _709;
        _882 = _708;
        _883 = _720;
        _884 = _719;
        _885 = _718;
        _886 = _730;
        _887 = _729;
        _888 = _728;
        _889 = _743;
        _890 = _742;
        _891 = _741;
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
    }
    else
    {
        _879 = _880;
        _881 = _880;
        _882 = _880;
        _883 = _880;
        _884 = _880;
        _885 = _880;
        _886 = _880;
        _887 = _880;
        _888 = _880;
        _889 = _880;
        _890 = _880;
        _891 = _880;
        _892 = 0.0;
        _893 = 0.0;
        _894 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _927 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _931 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _954 = _540 + _343;
        float _955 = _544 + _344;
        float _956 = _548 + _345;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_343, _344, _345), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3637 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_343, _344, _345), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3670 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_343, _344, _345), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3703 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _880;
        _1193 = _880;
        _1194 = _880;
        _1195 = _880;
        _1196 = _880;
        _1197 = _880;
        _1198 = _880;
        _1199 = _880;
        _1200 = _880;
        _1201 = _880;
        _1202 = _880;
        _1203 = _880;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _516 * 0.5;
    float _1261 = _517 * 0.5;
    float _1262 = _518 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_879, _883, _886, _889));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_881, _884, _887, _890));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _885, _888, _891));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1327 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1407;
    float _1409;
    float _1411;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1374 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1378 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1382 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1385 = fma(_518, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516));
        float _1388 = fma(_518, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516));
        float _1391 = fma(_518, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516));
        float _1417;
        if (_1385 > 0.0)
        {
            _1417 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1417 = frontier_phi_17_15_ladder;
        }
        float _1590;
        if (_1388 > 0.0)
        {
            _1590 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1590 = frontier_phi_26_22_ladder;
        }
        float _1886;
        if (_1391 > 0.0)
        {
            _1886 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1886 = frontier_phi_38_33_ladder;
        }
        float _1888 = isnan(_1590) ? _1417 : (isnan(_1417) ? _1590 : min(_1417, _1590));
        float _1889 = isnan(_1886) ? _1888 : (isnan(_1888) ? _1886 : min(_1888, _1886));
        float _1893 = (_1889 * _1385) + _1374;
        float _1894 = (_1889 * _1388) + _1378;
        float _1895 = (_1889 * _1391) + _1382;
        float _1896 = _1889 * 9.9999997473787516355514526367188e-05;
        float _1898 = (-1.0) - _1896;
        float _1900 = _1896 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1895 > _1900) || ((_1895 < _1898) || ((_1894 > _1900) || ((_1894 < _1898) || ((_1893 < _1898) || (_1893 > _1900))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1895, cbModelParam._m0[9u].z, fma(_1894, cbModelParam._m0[9u].y, _1893 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1895, cbModelParam._m0[10u].z, fma(_1894, cbModelParam._m0[10u].y, _1893 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1895, cbModelParam._m0[11u].z, fma(_1894, cbModelParam._m0[11u].y, _1893 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_16_38_ladder = _2040.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2040.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2040.x * cbModelParam._m0[1u].y;
        }
        _1407 = frontier_phi_16_38_ladder_2;
        _1409 = frontier_phi_16_38_ladder_1;
        _1411 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_516, _517, _518), _1327);
        _1407 = _1395.x * cbModelParam._m0[1u].y;
        _1409 = _1395.y * cbModelParam._m0[1u].y;
        _1411 = _1395.z * cbModelParam._m0[1u].y;
    }
    float _1414 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1470 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1474 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1478 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1481 = fma(_518, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516));
        float _1484 = fma(_518, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516));
        float _1487 = fma(_518, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516));
        float _1595;
        if (_1481 > 0.0)
        {
            _1595 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1595 = frontier_phi_28_24_ladder;
        }
        float _1913;
        if (_1484 > 0.0)
        {
            _1913 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1913 = frontier_phi_40_35_ladder;
        }
        float _2186;
        if (_1487 > 0.0)
        {
            _2186 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2186 = frontier_phi_50_47_ladder;
        }
        float _2188 = isnan(_1913) ? _1595 : (isnan(_1595) ? _1913 : min(_1595, _1913));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1481) + _1470;
        float _2194 = (_2189 * _1484) + _1474;
        float _2195 = (_2189 * _1487) + _1478;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2196;
        float _2199 = _2196 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2195 > _2199) || ((_2195 < _2197) || ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 < _2197) || (_2193 > _2199))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2286 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2195, cbModelParam._m0[17u].z, fma(_2194, cbModelParam._m0[17u].y, _2193 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2195, cbModelParam._m0[18u].z, fma(_2194, cbModelParam._m0[18u].y, _2193 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2195, cbModelParam._m0[19u].z, fma(_2194, cbModelParam._m0[19u].y, _2193 * cbModelParam._m0[19u].x))), _1414);
            frontier_phi_25_50_ladder = _2286.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2286.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2286.x * cbModelParam._m0[1u].z;
        }
        _1506 = frontier_phi_25_50_ladder_2;
        _1508 = frontier_phi_25_50_ladder_1;
        _1510 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_516, _517, _518), _1414);
        _1506 = _1490.x * cbModelParam._m0[1u].z;
        _1508 = _1490.y * cbModelParam._m0[1u].z;
        _1510 = _1490.z * cbModelParam._m0[1u].z;
    }
    float _1522 = _508 * 0.01200000010430812835693359375;
    float _1524 = _1522 * ((cbModelParam._m0[1u].w * (_1506 - _1407)) + _1407);
    float _1525 = _1522 * ((cbModelParam._m0[1u].w * (_1508 - _1409)) + _1409);
    float _1526 = _1522 * ((cbModelParam._m0[1u].w * (_1510 - _1411)) + _1411);
    float _1529 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, _1524 * cbSceneParam._m0[91u].x));
    float _1569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1573 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1577 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1582 = _1569 / _1581;
    float _1583 = _1573 / _1581;
    float _1584 = _1577 / _1581;
    float _1731;
    float _1732;
    float _1733;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1611 = ((uint(_1584 > cbSceneParam._m0[59u].y) + uint(_1584 > cbSceneParam._m0[59u].x)) + uint(_1584 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1612 = _1611 + 43u;
        uint _1620 = _1611 + 44u;
        uint _1628 = _1611 + 45u;
        uint _1636 = _1611 + 46u;
        float _1647 = fma(_1581, cbSceneParam._m0[_1612].w, fma(_1577, cbSceneParam._m0[_1612].z, fma(_1573, cbSceneParam._m0[_1612].y, _1569 * cbSceneParam._m0[_1612].x)));
        float _1651 = fma(_1581, cbSceneParam._m0[_1620].w, fma(_1577, cbSceneParam._m0[_1620].z, fma(_1573, cbSceneParam._m0[_1620].y, _1569 * cbSceneParam._m0[_1620].x)));
        float _1659 = fma(_1581, cbSceneParam._m0[_1636].w, fma(_1577, cbSceneParam._m0[_1636].z, fma(_1573, cbSceneParam._m0[_1636].y, _1569 * cbSceneParam._m0[_1636].x)));
        float _1664 = cbSceneParam._m0[33u].z * _1659;
        float _1666 = cbSceneParam._m0[33u].w * _1659;
        float _1669 = fma(_1581, cbSceneParam._m0[_1628].w, fma(_1577, cbSceneParam._m0[_1628].z, fma(_1573, cbSceneParam._m0[_1628].y, _1569 * cbSceneParam._m0[_1628].x))) / _1659;
        float _1717 = (cbSceneParam._m0[33u].x - sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584))) * cbSceneParam._m0[33u].y;
        float _3829 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1724 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 + _1647) / _1659, (_1666 + _1651) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 + _1647) / _1659, (_1651 - _1664) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1647 - _1664) / _1659, (_1651 - _1666) / _1659), _1669), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1647 - _1666) / _1659, (_1664 + _1651) / _1659), _1669), 0.0)).x), vec4(0.25)));
        _1731 = 1.0 - (_1724 * cbSceneParam._m0[34u].x);
        _1732 = 1.0 - (_1724 * cbSceneParam._m0[34u].y);
        _1733 = 1.0 - (_1724 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1731 = 1.0;
        _1732 = 1.0;
        _1733 = 1.0;
    }
    float _1797;
    float _1799;
    float _1801;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1785 = fma(_1581, cbSceneParam._m0[63u].w, fma(_1577, cbSceneParam._m0[63u].z, fma(_1573, cbSceneParam._m0[63u].y, _1569 * cbSceneParam._m0[63u].x)));
        float _1786 = fma(_1581, cbSceneParam._m0[60u].w, fma(_1577, cbSceneParam._m0[60u].z, fma(_1573, cbSceneParam._m0[60u].y, _1569 * cbSceneParam._m0[60u].x))) / _1785;
        float _1787 = fma(_1581, cbSceneParam._m0[61u].w, fma(_1577, cbSceneParam._m0[61u].z, fma(_1573, cbSceneParam._m0[61u].y, _1569 * cbSceneParam._m0[61u].x))) / _1785;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1786 >= cbSceneParam._m0[64u].x) && (_1787 >= cbSceneParam._m0[64u].y)) && (_1786 <= cbSceneParam._m0[64u].z)) && (_1787 <= cbSceneParam._m0[64u].w))
        {
            float _1926 = fma(_1581, cbSceneParam._m0[62u].w, fma(_1577, cbSceneParam._m0[62u].z, fma(_1573, cbSceneParam._m0[62u].y, _1569 * cbSceneParam._m0[62u].x))) / _1785;
            float _1930 = isnan(cbSceneParam._m0[41u].w) ? _1926 : (isnan(_1926) ? cbSceneParam._m0[41u].w : max(_1926, cbSceneParam._m0[41u].w));
            float _1973 = (cbSceneParam._m0[33u].x - sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584))) * cbSceneParam._m0[33u].y;
            float _3845 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
            float _1980 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1786, cbSceneParam._m0[33u].w + _1787), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1786, _1787 - cbSceneParam._m0[33u].z), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1786 - cbSceneParam._m0[33u].z, _1787 - cbSceneParam._m0[33u].w), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1786 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1787), _1930), 0.0)).x), vec4(0.25)));
            float _1984 = 1.0 - (_1980 * cbSceneParam._m0[34u].x);
            float _1985 = 1.0 - (_1980 * cbSceneParam._m0[34u].y);
            float _1986 = 1.0 - (_1980 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1986) ? _1733 : (isnan(_1733) ? _1986 : min(_1733, _1986));
            frontier_phi_37_36_ladder_1 = isnan(_1985) ? _1732 : (isnan(_1732) ? _1985 : min(_1732, _1985));
            frontier_phi_37_36_ladder_2 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
        }
        else
        {
            frontier_phi_37_36_ladder = _1733;
            frontier_phi_37_36_ladder_1 = _1732;
            frontier_phi_37_36_ladder_2 = _1731;
        }
        _1797 = frontier_phi_37_36_ladder_2;
        _1799 = frontier_phi_37_36_ladder_1;
        _1801 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1797 = _1731;
        _1799 = _1732;
        _1801 = _1733;
    }
    uvec4 _1806 = floatBitsToUint(cbInstanceData._m0[_483 + 5u]);
    uint _1808 = _1806.x * 14u;
    uint _1809 = _1808 + 13u;
    float _1816 = _508 + (-1.0);
    float _1821 = (cbLight._m0[_1809].x * _1816) + 1.0;
    float _1822 = (cbLight._m0[_1809].y * _1816) + 1.0;
    float _1823 = (cbLight._m0[_1809].z * _1816) + 1.0;
    float _1824 = (cbLight._m0[_1809].w * _1816) + 1.0;
    uint _1825 = _1808 + 5u;
    float _1831 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1835 = _1808 + 4u;
    float _1845 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1849 = _1808 | 1u;
    float _1860 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_343, _344, _345));
    float _1863 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_343, _344, _345));
    float _3881 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _3892 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1868 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.3183098733425140380859375;
    float _1870 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1877 = ((cbLight._m0[_1825].x * _1831) * _1870) + (((cbLight._m0[_1835].x * _1797) * _1845) * _1868);
    float _1878 = ((_1831 * cbLight._m0[_1825].y) * _1870) + (((cbLight._m0[_1835].y * _1799) * _1845) * _1868);
    float _1879 = ((_1831 * cbLight._m0[_1825].z) * _1870) + (((cbLight._m0[_1835].z * _1801) * _1845) * _1868);
    uvec4 _1883 = floatBitsToUint(cbLight._m0[_1808 + 12u]);
    bool _1885 = _1883.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1885)
    {
        _1987 = _1877;
        _1989 = _1878;
        _1991 = _1879;
    }
    else
    {
        uint _1995 = _1808 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1808 + 2u].xyz), vec3(_343, _344, _345)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _3903 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _2014 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1877;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1878;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1879;
    }
    bool _1994 = _1883.y == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_1994)
    {
        _2049 = _1987;
        _2051 = _1989;
        _2053 = _1991;
    }
    else
    {
        uint _2157 = _1808 + 7u;
        float _2173 = (dot(vec3(cbLight._m0[_1808 + 3u].xyz), vec3(_343, _344, _345)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _3919 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2176 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2049 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _1987;
        _2051 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _1989;
        _2053 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _1991;
    }
    uint _2055 = _1808 + 8u;
    float _2061 = cbLight._m0[_1808].x + _422;
    float _2062 = cbLight._m0[_1808].y + _423;
    float _2063 = cbLight._m0[_1808].z + _424;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2071 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1808].xyz));
    float _3935 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _2075 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2061 * _2067, _2062 * _2067, _2063 * _2067));
    float _3957 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = (0.5 / ((_2074 + 9.9999999392252902907785028219223e-09) + _2075)) * _2074;
    float _3968 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.31831014156341552734375;
    uint _2109 = _1808 + 9u;
    float _2115 = cbLight._m0[_1849].x + _422;
    float _2116 = cbLight._m0[_1849].y + _423;
    float _2117 = cbLight._m0[_1849].z + _424;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2125 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_1849].xyz));
    float _3979 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2115 * _2121, _2116 * _2121, _2117 * _2121));
    float _3990 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2142 = (0.5 / ((_2128 + 9.9999999392252902907785028219223e-09) + _2075)) * _2128;
    float _4001 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.31831014156341552734375;
    float _2154 = (((_2138 * cbLight._m0[_2109].x) * _2144) * _1831) + ((((cbLight._m0[_2055].x * _1797) * _2087) * _2095) * _1845);
    float _2155 = (((_2138 * cbLight._m0[_2109].y) * _2144) * _1831) + ((((cbLight._m0[_2055].y * _1799) * _2087) * _2095) * _1845);
    float _2156 = (((_2138 * cbLight._m0[_2109].z) * _2144) * _1831) + ((((cbLight._m0[_2055].z * _1801) * _2087) * _2095) * _1845);
    float _2212;
    float _2214;
    float _2216;
    if (_1885)
    {
        _2212 = _2154;
        _2214 = _2155;
        _2216 = _2156;
    }
    else
    {
        uint _2218 = _1808 + 10u;
        uint _2224 = _1808 + 2u;
        float _2230 = cbLight._m0[_2224].x + _422;
        float _2231 = cbLight._m0[_2224].y + _423;
        float _2232 = cbLight._m0[_2224].z + _424;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2240 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_2224].xyz));
        float _4012 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2230 * _2236, _2231 * _2236, _2232 * _2236));
        float _4023 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2257 = (0.5 / ((_2243 + 9.9999999392252902907785028219223e-09) + _2075)) * _2243;
        float _4034 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.31831014156341552734375;
        float _2260 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2212 = (((_2253 * cbLight._m0[_2218].x) * _2259) * _2260) + _2154;
        _2214 = (((_2253 * cbLight._m0[_2218].y) * _2259) * _2260) + _2155;
        _2216 = (((_2253 * cbLight._m0[_2218].z) * _2259) * _2260) + _2156;
    }
    float _2291;
    float _2293;
    float _2295;
    if (_1994)
    {
        _2291 = _2212;
        _2293 = _2214;
        _2295 = _2216;
    }
    else
    {
        uint _2302 = _1808 + 11u;
        uint _2308 = _1808 + 3u;
        float _2314 = cbLight._m0[_2308].x + _422;
        float _2315 = cbLight._m0[_2308].y + _423;
        float _2316 = cbLight._m0[_2308].z + _424;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2324 = dot(vec3(_343, _344, _345), vec3(cbLight._m0[_2308].xyz));
        float _4050 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2314 * _2320, _2315 * _2320, _2316 * _2320));
        float _4061 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2341 = (0.5 / ((_2327 + 9.9999999392252902907785028219223e-09) + _2075)) * _2327;
        float _4072 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.31831014156341552734375;
        float _2344 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2291 = (((_2337 * cbLight._m0[_2302].x) * _2343) * _2344) + _2212;
        _2293 = (((_2337 * cbLight._m0[_2302].y) * _2343) * _2344) + _2214;
        _2295 = (((_2337 * cbLight._m0[_2302].z) * _2343) * _2344) + _2216;
    }
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_1806.y == 0u)
    {
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.x;
        uint _2377 = uint((float(_2365.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _2366))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _2366)));
        float _2387 = (log2(_1584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2388 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        uint _2391 = uint(isnan(14.0) ? _2388 : (isnan(_2388) ? 14.0 : min(_2388, 14.0)));
        uvec4 _2396 = texelFetch(g_lightClusterGridBuffer, int(((_2391 << 2u) + (_2377 << 6u)) >> 2u));
        uint _2397 = _2396.x;
        uint _2398 = _2365.z;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        if (((((1u << ((_2398 >> 4u) & 15u)) + 4294967295u) & _2397) == 0u) || ((_2398 & 240u) == 0u))
        {
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
        }
        else
        {
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            uint _2672 = 0u;
            uint _2681;
            bool _2682;
            for (;;)
            {
                _2681 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                _2682 = _2681 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2682)
                {
                    frontier_phi_71_pred = _2671;
                    frontier_phi_71_pred_1 = _2670;
                    frontier_phi_71_pred_2 = _2669;
                    frontier_phi_71_pred_3 = _2668;
                    frontier_phi_71_pred_4 = _2667;
                    frontier_phi_71_pred_5 = _2666;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2681;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2672 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _1582;
                        float _2878 = _2837.y - _1583;
                        float _2879 = _2837.z - _1584;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4098 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * dot(vec3(_464, _467, _470), vec3(_2883 * _2877, _2883 * _2878, _2883 * _2879))) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _1582;
                        float _2913 = (-0.0) - _1583;
                        float _2914 = (-0.0) - _1584;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2922 = dot(vec3(_464, _467, _470), vec3(_2918 * _2912, _2918 * _2913, _2918 * _2914));
                        float _4114 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _4125 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2926 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2930 = (0.5 / (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) + 9.9999999392252902907785028219223e-09) + _2926)) * _2926;
                        float _4136 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2939 = (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 3.1415927410125732421875) / ((_2904 * 2.1991131305694580078125) + 3.141590118408203125)) * _2893;
                        _2741 = (_2908 * _2856.x) + _2814;
                        _2742 = (_2908 * _2856.y) + _2815;
                        _2743 = (_2908 * _2856.z) + _2816;
                        _2738 = (_2939 * _2873.x) + _2811;
                        _2739 = (_2939 * _2873.y) + _2812;
                        _2740 = (_2939 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2741;
                            _2815 = _2742;
                            _2816 = _2743;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_71_pred = _2743;
                    frontier_phi_71_pred_1 = _2742;
                    frontier_phi_71_pred_2 = _2741;
                    frontier_phi_71_pred_3 = _2740;
                    frontier_phi_71_pred_4 = _2739;
                    frontier_phi_71_pred_5 = _2738;
                }
                _2517 = frontier_phi_71_pred;
                _2515 = frontier_phi_71_pred_1;
                _2513 = frontier_phi_71_pred_2;
                _2511 = frontier_phi_71_pred_3;
                _2509 = frontier_phi_71_pred_4;
                _2507 = frontier_phi_71_pred_5;
                uint _2673 = _2672 + 1u;
                if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2666 = _2507;
                    _2667 = _2509;
                    _2668 = _2511;
                    _2669 = _2513;
                    _2670 = _2515;
                    _2671 = _2517;
                    _2672 = _2673;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
        }
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.z;
        uint _2523 = (_2521 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2523) & _2397) == 0u)
        {
            _2637 = _2506;
            _2639 = _2508;
            _2641 = _2510;
            _2643 = _2512;
            _2645 = _2514;
            _2647 = _2516;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2523 < ((_2521 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2794 = _2506;
                float _2795 = _2508;
                float _2796 = _2510;
                float _2797 = _2512;
                float _2798 = _2514;
                float _2799 = _2516;
                uint _2800 = _2523;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2810)
                    {
                        frontier_phi_82_pred = _2799;
                        frontier_phi_82_pred_1 = _2798;
                        frontier_phi_82_pred_2 = _2797;
                        frontier_phi_82_pred_3 = _2796;
                        frontier_phi_82_pred_4 = _2795;
                        frontier_phi_82_pred_5 = _2794;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _2966 = _2794;
                        float _2967 = _2795;
                        float _2968 = _2796;
                        float _2969 = _2797;
                        float _2970 = _2798;
                        float _2971 = _2799;
                        uint _2972 = _2809;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3041;
                        vec4 _3057;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2983 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3028 = (_2983 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2983 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2983 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2983 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_1584, _3092.z, fma(_1583, _3092.y, _3092.x * _1582)) + _3092.w;
                            _3105 = !((fma(_1584, _3073.z, fma(_1583, _3073.y, _3073.x * _1582)) + _3073.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2998.x - _1582;
                                float _3133 = _2998.y - _1583;
                                float _3134 = _2998.z - _1584;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_2999 * _2999));
                                float _4147 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3150 = sqrt(_3135) * _3014.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3154 = 1.0 - _3153;
                                float _3156 = (_3154 * dot(vec3(_3139, _3140, _3141), vec3(_464, _467, _470))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_1584, _3041.z, fma(_1583, _3041.y, _3041.x * _1582)) + _3041.w) / _3104;
                                float _3164 = (fma(_1584, _3057.z, fma(_1583, _3057.y, _3057.x * _1582)) + _3057.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4163 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3180 = dot(vec3(_464, _467, _470), vec3((-0.0) - (_1582 * _2662), (-0.0) - (_1583 * _2662), (-0.0) - (_1584 * _2662)));
                                float _4174 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3188 = (_3154 * dot(vec3(_464, _467, _470), vec3(_3139, _3140, _3141))) + _3153;
                                float _4185 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3193 = (0.5 / (((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) + 9.9999999392252902907785028219223e-09) + _3189)) * _3189;
                                float _4196 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3200 = (_3169 * _3146) * (((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 3.1415927410125732421875) / ((_3159 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3170 * _3014.z;
                                frontier_phi_88_pred_1 = _3170 * _3014.y;
                                frontier_phi_88_pred_2 = _3170 * _3014.x;
                                frontier_phi_88_pred_3 = _3200 * _3026.z;
                                frontier_phi_88_pred_4 = _3200 * _3026.y;
                                frontier_phi_88_pred_5 = _3200 * _3026.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3209 = frontier_phi_88_pred;
                            _3208 = frontier_phi_88_pred_1;
                            _3207 = frontier_phi_88_pred_2;
                            _3206 = frontier_phi_88_pred_3;
                            _3205 = frontier_phi_88_pred_4;
                            _3204 = frontier_phi_88_pred_5;
                            _2956 = _3207 + _2969;
                            _2957 = _3208 + _2970;
                            _2958 = _3209 + _2971;
                            _2953 = _3204 + _2966;
                            _2954 = _3205 + _2967;
                            _2955 = _3206 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2958;
                        frontier_phi_82_pred_1 = _2957;
                        frontier_phi_82_pred_2 = _2956;
                        frontier_phi_82_pred_3 = _2955;
                        frontier_phi_82_pred_4 = _2954;
                        frontier_phi_82_pred_5 = _2953;
                    }
                    _2648 = frontier_phi_82_pred;
                    _2646 = frontier_phi_82_pred_1;
                    _2644 = frontier_phi_82_pred_2;
                    _2642 = frontier_phi_82_pred_3;
                    _2640 = frontier_phi_82_pred_4;
                    _2638 = frontier_phi_82_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2638;
                        _2795 = _2640;
                        _2796 = _2642;
                        _2797 = _2644;
                        _2798 = _2646;
                        _2799 = _2648;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2644;
                frontier_phi_63_64_ladder_1 = _2648;
                frontier_phi_63_64_ladder_2 = _2646;
                frontier_phi_63_64_ladder_3 = _2642;
                frontier_phi_63_64_ladder_4 = _2640;
                frontier_phi_63_64_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_63_64_ladder = _2512;
                frontier_phi_63_64_ladder_1 = _2516;
                frontier_phi_63_64_ladder_2 = _2514;
                frontier_phi_63_64_ladder_3 = _2510;
                frontier_phi_63_64_ladder_4 = _2508;
                frontier_phi_63_64_ladder_5 = _2506;
            }
            _2637 = frontier_phi_63_64_ladder_5;
            _2639 = frontier_phi_63_64_ladder_4;
            _2641 = frontier_phi_63_64_ladder_3;
            _2643 = frontier_phi_63_64_ladder;
            _2645 = frontier_phi_63_64_ladder_2;
            _2647 = frontier_phi_63_64_ladder_1;
        }
        float _2652 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        _2410 = (_2652 * _2643) + _2049;
        _2412 = (_2652 * _2645) + _2051;
        _2414 = (_2652 * _2647) + _2053;
        _2416 = ((_2637 * 0.039999999105930328369140625) * _2652) + _2291;
        _2418 = ((_2639 * 0.039999999105930328369140625) * _2652) + _2293;
        _2420 = ((_2641 * 0.039999999105930328369140625) * _2652) + _2295;
    }
    else
    {
        _2410 = _2049;
        _2412 = _2051;
        _2414 = _2053;
        _2416 = _2291;
        _2418 = _2293;
        _2420 = _2295;
    }
    uint _2426 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _2432 = (_335 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _300.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _271.x))) * cbInstanceData._m0[_2426].x;
    float _2433 = (_335 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _300.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _271.y))) * cbInstanceData._m0[_2426].y;
    float _2434 = (_335 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _300.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _271.z))) * cbInstanceData._m0[_2426].z;
    float _4212 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4223 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4234 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _2451 = (((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2410 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _508))) + ((_2416 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + _2432;
    float _2453 = (_2433 + ((_2418 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2412 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _508)));
    float _2455 = (_2434 + ((_2420 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1318)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2414 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _508)));
    float _2456 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2457 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2458 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2464 = cbMtdParam._m0[2u].x * _2432;
    float _2465 = cbMtdParam._m0[2u].y * _2433;
    float _2466 = cbMtdParam._m0[2u].z * _2434;
    float _4260 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2468 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    uint _2469 = _483 + 6u;
    float _2477 = _443 / cbSceneParam._m0[86u].x;
    float _2478 = _444 / cbSceneParam._m0[86u].y;
    vec4 _2492 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, (log2((isnan(cbSceneParam._m0[77u].w) ? _364 : (isnan(_364) ? cbSceneParam._m0[77u].w : min(_364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2494 = _2492.x;
    float _2495 = _2492.y;
    float _2496 = _2492.z;
    float _2497 = _2492.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_364 > cbSceneParam._m0[78u].w)
    {
        float _2531 = isnan(_364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _364 : min(cbSceneParam._m0[80u].w, _364));
        float _2532 = _2531 / _364;
        float _2543 = _2532 * _415;
        float _2544 = _416 * _2532;
        float _2545 = (-0.0) - _2544;
        float _2547 = _2532 * _417;
        float _2549 = (cbSceneParam._m0[77u].w * _2545) / _2531;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2544;
        float _2557 = sqrt(((_2543 * _2543) + (_2544 * _2544)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2531)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2751;
        if (abs((_2545 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2751 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2695 = 1.0 / cbSceneParam._m0[80u].x;
            float _2696 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2697 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            _2751 = ((abs(_2557 / _2545) * cbSceneParam._m0[80u].y) * ((((_2706 - _2707) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))))) * _2695)) - ((exp2(_2567 * _2706) - exp2(_2567 * _2707)) * _2695))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, 1.0), 0.0);
        float _2762 = exp2((_2751 * (-1.44269502162933349609375)) * (1.0 - _2753.w));
        float _2763 = log2(_2762);
        float _2779 = log2(_2497);
        _2569 = (exp2(_2779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].x)) * _2753.x) / cbSceneParam._m0[78u].x)) + _2494;
        _2571 = (exp2(_2779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].y)) * _2753.y) / cbSceneParam._m0[78u].y)) + _2495;
        _2573 = (exp2(_2779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].z)) * _2753.z) / cbSceneParam._m0[78u].z)) + _2496;
        _2575 = _2762 * _2497;
    }
    else
    {
        _2569 = _2494;
        _2571 = _2495;
        _2573 = _2496;
        _2575 = _2497;
    }
    bool _2789;
    vec4 _2585;
    vec4 _2607;
    float _2609;
    float _2613;
    float _2614;
    float _2615;
    float _2618;
    float _2621;
    float _2624;
    float _2625;
    bool _2636;
    for (;;)
    {
        _2585 = cbMatDynParam._m0[0u];
        float _2587 = roundEven(_2585.y);
        bool _2588 = _2587 == 3.0;
        float _2589 = log2(_2575);
        float _2593 = exp2(_2589 * cbSceneParam._m0[78u].x);
        float _2594 = exp2(_2589 * cbSceneParam._m0[78u].y);
        float _2595 = exp2(_2589 * cbSceneParam._m0[78u].z);
        float _2596 = _2593 * _2456;
        float _2597 = _2594 * _2457;
        float _2598 = _2595 * _2458;
        float _2605 = _431 + (-0.5);
        _2607 = cbMtdParam._m0[1u];
        _2609 = _2607.y * _2605;
        float _2612 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2613 = _2612 * (_2588 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2569)));
        _2614 = _2612 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2571)));
        _2615 = _2612 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2573)));
        _2618 = ((_2464 * _2468) * _2593) * _2612;
        _2621 = ((_2465 * _2468) * _2594) * _2612;
        _2624 = ((_2466 * _2468) * _2595) * _2612;
        _2625 = _2605 * 0.999000012874603271484375;
        _2636 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2636)
        {
            if ((cbInstanceData._m0[_483 + 7u].x + _2625) < 0.5)
            {
                _2789 = true;
                break;
            }
        }
        uint _2730 = _484 + uint(_2585.w);
        if ((cbInstanceData._m0[_2730].w < 1.0) && ((cbInstanceData._m0[_2730].w + _2625) < 0.5))
        {
            _2789 = true;
            break;
        }
        if ((_2609 + 1.0) < _2607.x)
        {
            _2789 = true;
            break;
        }
        _2789 = false;
        break;
    }
    float _2944;
    if (_2789)
    {
        discard_state = true;
        _2944 = 0.0;
    }
    else
    {
        _2944 = cbInstanceData._m0[_2469].w;
    }
    SV_Target.x = _2613;
    SV_Target.y = _2614;
    SV_Target.z = _2615;
    SV_Target.w = _2944;
    SV_Target_1.x = _2618;
    SV_Target_1.y = _2621;
    SV_Target_1.z = _2624;
    SV_Target_1.w = cbInstanceData._m0[_2469].w;
    discard_exit();
}


