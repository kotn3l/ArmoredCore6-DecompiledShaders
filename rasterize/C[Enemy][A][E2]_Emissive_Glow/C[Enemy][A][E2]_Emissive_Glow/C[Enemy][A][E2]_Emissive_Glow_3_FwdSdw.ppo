#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _835;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _267 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _296 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _321 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3260 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _331 = (((_323 * _323) * (3.0 - (_323 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _338 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _339 = _338 * _176;
    float _340 = _338 * _177;
    float _341 = _338 * _178;
    float _3271 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3282 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3293 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _360 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    float _426 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _427 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_341, cbSceneParam._m0[5u].z, fma(_340, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _339));
    float _451 = fma(_341, cbSceneParam._m0[6u].z, fma(_340, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _339));
    float _454 = fma(_341, cbSceneParam._m0[7u].z, fma(_340, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _339));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _468 = _467 + 9u;
    uint _469 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_469].x;
    float _476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_469].y;
    float _477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_469].z;
    float _3304 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    float _3315 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _426, cbSceneParam._m0[86u].y * _427));
    float _492 = _489.x * TEXCOORD_4;
    float _493 = dot(vec3(_339, _340, _341), vec3(_418, _419, _420));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _339) - _418;
    float _501 = (_496 * _340) - _419;
    float _502 = (_496 * _341) - _420;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _834;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _559 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _563 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _567 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _592 = _524 + _339;
        float _593 = _528 + _340;
        float _594 = _532 + _341;
        float _604 = fma(_594, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _592)) - _559;
        float _605 = fma(_594, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _592)) - _563;
        float _606 = fma(_594, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _592)) - _567;
        float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
        float _623 = ((_610 * _604) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_559 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_610 * _605) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_563 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_610 * _606) / cbModelParam._m0[34u].z) + ((((((_567 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_623, _624, _625), 0.0);
        float _662 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_628.x + (-0.5));
        float _664 = _662 * (_628.y + (-0.5));
        float _665 = _662 * (_628.z + (-0.5));
        float _672 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_635.x + (-0.5));
        float _674 = _672 * (_635.y + (-0.5));
        float _675 = _672 * (_635.z + (-0.5));
        float _682 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_642.x + (-0.5));
        float _684 = _682 * (_642.y + (-0.5));
        float _685 = _682 * (_642.z + (-0.5));
        float _692 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_649.x + (-0.5));
        float _694 = _692 * (_649.y + (-0.5));
        float _695 = _692 * (_649.z + (-0.5));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = _663 * 0.5;
        float _700 = _673 * 0.5;
        float _701 = _683 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _716 = (dot(vec3(_339, _340, _341), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _726 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3374 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_728 + 1.0))) + _733) * _696;
        float _743 = _664 * 0.5;
        float _744 = _674 * 0.5;
        float _745 = _684 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(_339, _340, _341), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3407 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_770 + 1.0))) + _775) * _697;
        float _785 = _665 * 0.5;
        float _786 = _675 * 0.5;
        float _787 = _685 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_339, _340, _341), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3440 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_812 + 1.0))) + _817) * _698;
        _834 = _665;
        _836 = _664;
        _837 = _663;
        _838 = _675;
        _839 = _674;
        _840 = _673;
        _841 = _685;
        _842 = _684;
        _843 = _683;
        _844 = _698;
        _845 = _697;
        _846 = _696;
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
    }
    else
    {
        _834 = _835;
        _836 = _835;
        _837 = _835;
        _838 = _835;
        _839 = _835;
        _840 = _835;
        _841 = _835;
        _842 = _835;
        _843 = _835;
        _844 = _835;
        _845 = _835;
        _846 = _835;
        _847 = 0.0;
        _848 = 0.0;
        _849 = 0.0;
    }
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _875 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _879 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _883 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _906 = _524 + _339;
        float _907 = _528 + _340;
        float _908 = _532 + _341;
        float _918 = fma(_908, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906)) - _875;
        float _919 = fma(_908, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906)) - _879;
        float _920 = fma(_908, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906)) - _883;
        float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
        float _937 = ((_924 * _918) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_875 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_924 * _919) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_879 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_924 * _920) / cbModelParam._m0[35u].z) + ((((((_883 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_937, _938, _939), 0.0);
        float _974 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_941.x + (-0.5));
        float _976 = _974 * (_941.y + (-0.5));
        float _977 = _974 * (_941.z + (-0.5));
        float _984 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_948.x + (-0.5));
        float _986 = _984 * (_948.y + (-0.5));
        float _987 = _984 * (_948.z + (-0.5));
        float _994 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_955.x + (-0.5));
        float _996 = _994 * (_955.y + (-0.5));
        float _997 = _994 * (_955.z + (-0.5));
        float _1004 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_962.x + (-0.5));
        float _1006 = _1004 * (_962.y + (-0.5));
        float _1007 = _1004 * (_962.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_339, _340, _341), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3503 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1038 + 1.0))) + _1043) * _1008;
        float _1053 = _976 * 0.5;
        float _1054 = _986 * 0.5;
        float _1055 = _996 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_339, _340, _341), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3536 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1080 + 1.0))) + _1085) * _1009;
        float _1095 = _977 * 0.5;
        float _1096 = _987 * 0.5;
        float _1097 = _997 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_339, _340, _341), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3569 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1122 + 1.0))) + _1127) * _1010;
        _1144 = _977;
        _1145 = _976;
        _1146 = _975;
        _1147 = _987;
        _1148 = _986;
        _1149 = _985;
        _1150 = _997;
        _1151 = _996;
        _1152 = _995;
        _1153 = _1010;
        _1154 = _1009;
        _1155 = _1008;
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _835;
        _1145 = _835;
        _1146 = _835;
        _1147 = _835;
        _1148 = _835;
        _1149 = _835;
        _1150 = _835;
        _1151 = _835;
        _1152 = _835;
        _1153 = _835;
        _1154 = _835;
        _1155 = _835;
        _1156 = 0.0;
        _1157 = 0.0;
        _1158 = 0.0;
    }
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1191 = fma(_1170, cbSceneParam._m0[89u].z, fma(_1169, cbSceneParam._m0[89u].y, _1168 * cbSceneParam._m0[89u].x));
    float _1194 = fma(_1170, cbSceneParam._m0[90u].z, fma(_1169, cbSceneParam._m0[90u].y, _1168 * cbSceneParam._m0[90u].x));
    float _1197 = fma(_1170, cbSceneParam._m0[91u].z, fma(_1169, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1168));
    float _1212 = _500 * 0.5;
    float _1213 = _501 * 0.5;
    float _1214 = _502 * 0.5;
    float _1215 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1218 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1221 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1255;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1228 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_834, _838, _841, _844));
        float _1232 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_836, _839, _842, _845));
        float _1236 = dot(vec4(_1212, _1213, _1214, 1.0), vec4(_837, _840, _843, _846));
        float _1243 = dot(vec4(cbModelParam._m0[39u]), vec4(_1212, _1213, _1214, 1.0));
        _1255 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1255 = 1.0;
    }
    float _1266;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1257 = dot(vec4(cbModelParam._m0[40u]), vec4(_1212, _1213, _1214, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1257) ? 0.0 : (isnan(0.0) ? _1257 : max(0.0, _1257))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1270 = (_1266 * cbModelParam._m0[1u].x) + (_1255 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1359;
    float _1361;
    float _1363;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1326 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1330 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1334 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1337 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1340 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1343 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1369;
        if (_1337 > 0.0)
        {
            _1369 = abs((1.0 - _1326) / _1337);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1326 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1369 = frontier_phi_14_12_ladder;
        }
        float _1542;
        if (_1340 > 0.0)
        {
            _1542 = abs((1.0 - _1330) / _1340);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1330 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1542 = frontier_phi_23_19_ladder;
        }
        float _1838;
        if (_1343 > 0.0)
        {
            _1838 = abs((1.0 - _1334) / _1343);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1334 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1838 = frontier_phi_35_30_ladder;
        }
        float _1840 = isnan(_1542) ? _1369 : (isnan(_1369) ? _1542 : min(_1369, _1542));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1337) + _1326;
        float _1846 = (_1841 * _1340) + _1330;
        float _1847 = (_1841 * _1343) + _1334;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1850 = (-1.0) - _1848;
        float _1852 = _1848 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1847 > _1852) || ((_1847 < _1850) || ((_1846 > _1852) || ((_1846 < _1850) || ((_1845 < _1850) || (_1845 > _1852))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1847, cbModelParam._m0[9u].z, fma(_1846, cbModelParam._m0[9u].y, _1845 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1847, cbModelParam._m0[10u].z, fma(_1846, cbModelParam._m0[10u].y, _1845 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1847, cbModelParam._m0[11u].z, fma(_1846, cbModelParam._m0[11u].y, _1845 * cbModelParam._m0[11u].x))), _1279);
            frontier_phi_13_35_ladder = _1992.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1992.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1992.x * cbModelParam._m0[1u].y;
        }
        _1359 = frontier_phi_13_35_ladder_2;
        _1361 = frontier_phi_13_35_ladder_1;
        _1363 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1279);
        _1359 = _1347.x * cbModelParam._m0[1u].y;
        _1361 = _1347.y * cbModelParam._m0[1u].y;
        _1363 = _1347.z * cbModelParam._m0[1u].y;
    }
    float _1366 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1422 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1426 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1430 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1433 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1436 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1439 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1547;
        if (_1433 > 0.0)
        {
            _1547 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1547 = frontier_phi_25_21_ladder;
        }
        float _1865;
        if (_1436 > 0.0)
        {
            _1865 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1865 = frontier_phi_37_32_ladder;
        }
        float _2138;
        if (_1439 > 0.0)
        {
            _2138 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2138 = frontier_phi_47_44_ladder;
        }
        float _2140 = isnan(_1865) ? _1547 : (isnan(_1547) ? _1865 : min(_1547, _1865));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1433) + _1422;
        float _2146 = (_2141 * _1436) + _1426;
        float _2147 = (_2141 * _1439) + _1430;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1366);
            frontier_phi_22_47_ladder = _2238.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2238.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2238.x * cbModelParam._m0[1u].z;
        }
        _1458 = frontier_phi_22_47_ladder_2;
        _1460 = frontier_phi_22_47_ladder_1;
        _1462 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1366);
        _1458 = _1442.x * cbModelParam._m0[1u].z;
        _1460 = _1442.y * cbModelParam._m0[1u].z;
        _1462 = _1442.z * cbModelParam._m0[1u].z;
    }
    float _1474 = _492 * 0.01200000010430812835693359375;
    float _1476 = _1474 * ((cbModelParam._m0[1u].w * (_1458 - _1359)) + _1359);
    float _1477 = _1474 * ((cbModelParam._m0[1u].w * (_1460 - _1361)) + _1361);
    float _1478 = _1474 * ((cbModelParam._m0[1u].w * (_1462 - _1363)) + _1363);
    float _1481 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, _1476 * cbSceneParam._m0[91u].x));
    float _1521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1525 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1529 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1534 = _1521 / _1533;
    float _1535 = _1525 / _1533;
    float _1536 = _1529 / _1533;
    float _1683;
    float _1684;
    float _1685;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1563 = ((uint(_1536 > cbSceneParam._m0[59u].y) + uint(_1536 > cbSceneParam._m0[59u].x)) + uint(_1536 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1564 = _1563 + 43u;
        uint _1572 = _1563 + 44u;
        uint _1580 = _1563 + 45u;
        uint _1588 = _1563 + 46u;
        float _1599 = fma(_1533, cbSceneParam._m0[_1564].w, fma(_1529, cbSceneParam._m0[_1564].z, fma(_1525, cbSceneParam._m0[_1564].y, _1521 * cbSceneParam._m0[_1564].x)));
        float _1603 = fma(_1533, cbSceneParam._m0[_1572].w, fma(_1529, cbSceneParam._m0[_1572].z, fma(_1525, cbSceneParam._m0[_1572].y, _1521 * cbSceneParam._m0[_1572].x)));
        float _1611 = fma(_1533, cbSceneParam._m0[_1588].w, fma(_1529, cbSceneParam._m0[_1588].z, fma(_1525, cbSceneParam._m0[_1588].y, _1521 * cbSceneParam._m0[_1588].x)));
        float _1616 = cbSceneParam._m0[33u].z * _1611;
        float _1618 = cbSceneParam._m0[33u].w * _1611;
        float _1621 = fma(_1533, cbSceneParam._m0[_1580].w, fma(_1529, cbSceneParam._m0[_1580].z, fma(_1525, cbSceneParam._m0[_1580].y, _1521 * cbSceneParam._m0[_1580].x))) / _1611;
        float _1669 = (cbSceneParam._m0[33u].x - sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536))) * cbSceneParam._m0[33u].y;
        float _3695 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1676 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1616 + _1599) / _1611, (_1618 + _1603) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1618 + _1599) / _1611, (_1603 - _1616) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1599 - _1616) / _1611, (_1603 - _1618) / _1611), _1621), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1599 - _1618) / _1611, (_1616 + _1603) / _1611), _1621), 0.0)).x), vec4(0.25)));
        _1683 = 1.0 - (_1676 * cbSceneParam._m0[34u].x);
        _1684 = 1.0 - (_1676 * cbSceneParam._m0[34u].y);
        _1685 = 1.0 - (_1676 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1683 = 1.0;
        _1684 = 1.0;
        _1685 = 1.0;
    }
    float _1749;
    float _1751;
    float _1753;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1737 = fma(_1533, cbSceneParam._m0[63u].w, fma(_1529, cbSceneParam._m0[63u].z, fma(_1525, cbSceneParam._m0[63u].y, _1521 * cbSceneParam._m0[63u].x)));
        float _1738 = fma(_1533, cbSceneParam._m0[60u].w, fma(_1529, cbSceneParam._m0[60u].z, fma(_1525, cbSceneParam._m0[60u].y, _1521 * cbSceneParam._m0[60u].x))) / _1737;
        float _1739 = fma(_1533, cbSceneParam._m0[61u].w, fma(_1529, cbSceneParam._m0[61u].z, fma(_1525, cbSceneParam._m0[61u].y, _1521 * cbSceneParam._m0[61u].x))) / _1737;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1738 >= cbSceneParam._m0[64u].x) && (_1739 >= cbSceneParam._m0[64u].y)) && (_1738 <= cbSceneParam._m0[64u].z)) && (_1739 <= cbSceneParam._m0[64u].w))
        {
            float _1878 = fma(_1533, cbSceneParam._m0[62u].w, fma(_1529, cbSceneParam._m0[62u].z, fma(_1525, cbSceneParam._m0[62u].y, _1521 * cbSceneParam._m0[62u].x))) / _1737;
            float _1882 = isnan(cbSceneParam._m0[41u].w) ? _1878 : (isnan(_1878) ? cbSceneParam._m0[41u].w : max(_1878, cbSceneParam._m0[41u].w));
            float _1925 = (cbSceneParam._m0[33u].x - sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536))) * cbSceneParam._m0[33u].y;
            float _3711 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
            float _1932 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1738, cbSceneParam._m0[33u].w + _1739), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1738, _1739 - cbSceneParam._m0[33u].z), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1738 - cbSceneParam._m0[33u].z, _1739 - cbSceneParam._m0[33u].w), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1738 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1739), _1882), 0.0)).x), vec4(0.25)));
            float _1936 = 1.0 - (_1932 * cbSceneParam._m0[34u].x);
            float _1937 = 1.0 - (_1932 * cbSceneParam._m0[34u].y);
            float _1938 = 1.0 - (_1932 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1938) ? _1685 : (isnan(_1685) ? _1938 : min(_1685, _1938));
            frontier_phi_34_33_ladder_1 = isnan(_1937) ? _1684 : (isnan(_1684) ? _1937 : min(_1684, _1937));
            frontier_phi_34_33_ladder_2 = isnan(_1936) ? _1683 : (isnan(_1683) ? _1936 : min(_1683, _1936));
        }
        else
        {
            frontier_phi_34_33_ladder = _1685;
            frontier_phi_34_33_ladder_1 = _1684;
            frontier_phi_34_33_ladder_2 = _1683;
        }
        _1749 = frontier_phi_34_33_ladder_2;
        _1751 = frontier_phi_34_33_ladder_1;
        _1753 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1749 = _1683;
        _1751 = _1684;
        _1753 = _1685;
    }
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _492 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1797 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1801 = _1760 | 1u;
    float _1812 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_339, _340, _341));
    float _1815 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_339, _340, _341));
    float _3747 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _3758 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1820 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1822 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1829 = ((cbLight._m0[_1777].x * _1783) * _1822) + (((cbLight._m0[_1787].x * _1749) * _1797) * _1820);
    float _1830 = ((_1783 * cbLight._m0[_1777].y) * _1822) + (((cbLight._m0[_1787].y * _1751) * _1797) * _1820);
    float _1831 = ((_1783 * cbLight._m0[_1777].z) * _1822) + (((cbLight._m0[_1787].z * _1753) * _1797) * _1820);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1837)
    {
        _1939 = _1829;
        _1941 = _1830;
        _1943 = _1831;
    }
    else
    {
        uint _1947 = _1760 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _3769 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1966 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1829;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1830;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1831;
    }
    bool _1946 = _1835.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1946)
    {
        _2001 = _1939;
        _2003 = _1941;
        _2005 = _1943;
    }
    else
    {
        uint _2109 = _1760 + 7u;
        float _2125 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _3785 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _2128 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2001 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _1939;
        _2003 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _1941;
        _2005 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _1943;
    }
    uint _2007 = _1760 + 8u;
    float _2013 = cbLight._m0[_1760].x + _418;
    float _2014 = cbLight._m0[_1760].y + _419;
    float _2015 = cbLight._m0[_1760].z + _420;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2023 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1760].xyz));
    float _3801 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _2027 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_2013 * _2019, _2014 * _2019, _2015 * _2019));
    float _3823 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2045 = (0.5 / ((_2026 + 9.9999999392252902907785028219223e-09) + _2027)) * _2026;
    float _3834 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.31831014156341552734375;
    uint _2061 = _1760 + 9u;
    float _2067 = cbLight._m0[_1801].x + _418;
    float _2068 = cbLight._m0[_1801].y + _419;
    float _2069 = cbLight._m0[_1801].z + _420;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2077 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1801].xyz));
    float _3845 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_2067 * _2073, _2068 * _2073, _2069 * _2073));
    float _3856 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2090 = (exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2094 = (0.5 / ((_2080 + 9.9999999392252902907785028219223e-09) + _2027)) * _2080;
    float _3867 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.31831014156341552734375;
    float _2106 = (((_2090 * cbLight._m0[_2061].x) * _2096) * _1783) + ((((cbLight._m0[_2007].x * _1749) * _2039) * _2047) * _1797);
    float _2107 = (((_2090 * cbLight._m0[_2061].y) * _2096) * _1783) + ((((cbLight._m0[_2007].y * _1751) * _2039) * _2047) * _1797);
    float _2108 = (((_2090 * cbLight._m0[_2061].z) * _2096) * _1783) + ((((cbLight._m0[_2007].z * _1753) * _2039) * _2047) * _1797);
    float _2164;
    float _2166;
    float _2168;
    if (_1837)
    {
        _2164 = _2106;
        _2166 = _2107;
        _2168 = _2108;
    }
    else
    {
        uint _2170 = _1760 + 10u;
        uint _2176 = _1760 + 2u;
        float _2182 = cbLight._m0[_2176].x + _418;
        float _2183 = cbLight._m0[_2176].y + _419;
        float _2184 = cbLight._m0[_2176].z + _420;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2192 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_2176].xyz));
        float _3878 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2182 * _2188, _2183 * _2188, _2184 * _2188));
        float _3889 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2209 = (0.5 / ((_2195 + 9.9999999392252902907785028219223e-09) + _2027)) * _2195;
        float _3900 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.31831014156341552734375;
        float _2212 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2164 = (((_2205 * cbLight._m0[_2170].x) * _2211) * _2212) + _2106;
        _2166 = (((_2205 * cbLight._m0[_2170].y) * _2211) * _2212) + _2107;
        _2168 = (((_2205 * cbLight._m0[_2170].z) * _2211) * _2212) + _2108;
    }
    float _2243;
    float _2245;
    float _2247;
    if (_1946)
    {
        _2243 = _2164;
        _2245 = _2166;
        _2247 = _2168;
    }
    else
    {
        uint _2254 = _1760 + 11u;
        uint _2260 = _1760 + 3u;
        float _2266 = cbLight._m0[_2260].x + _418;
        float _2267 = cbLight._m0[_2260].y + _419;
        float _2268 = cbLight._m0[_2260].z + _420;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2276 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_2260].xyz));
        float _3916 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2266 * _2272, _2267 * _2272, _2268 * _2272));
        float _3927 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2289 = (exp2(log2(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = (0.5 / ((_2279 + 9.9999999392252902907785028219223e-09) + _2027)) * _2279;
        float _3938 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.31831014156341552734375;
        float _2296 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2243 = (((_2289 * cbLight._m0[_2254].x) * _2295) * _2296) + _2164;
        _2245 = (((_2289 * cbLight._m0[_2254].y) * _2295) * _2296) + _2166;
        _2247 = (((_2289 * cbLight._m0[_2254].z) * _2295) * _2296) + _2168;
    }
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_1758.y == 0u)
    {
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _427) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _426) / _2318)));
        float _2339 = (log2(_1536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
        }
        else
        {
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            uint _2615 = 0u;
            uint _2624;
            bool _2625;
            for (;;)
            {
                _2624 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                _2625 = _2624 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2625)
                {
                    frontier_phi_66_pred = _2614;
                    frontier_phi_66_pred_1 = _2613;
                    frontier_phi_66_pred_2 = _2612;
                    frontier_phi_66_pred_3 = _2611;
                    frontier_phi_66_pred_4 = _2610;
                    frontier_phi_66_pred_5 = _2609;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2614;
                    _2739 = _2624;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2615 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _1534;
                        float _2800 = _2759.y - _1535;
                        float _2801 = _2759.z - _1536;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _3964 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * dot(vec3(_448, _451, _454), vec3(_2805 * _2799, _2805 * _2800, _2805 * _2801))) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _1534;
                        float _2835 = (-0.0) - _1535;
                        float _2836 = (-0.0) - _1536;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2844 = dot(vec3(_448, _451, _454), vec3(_2840 * _2834, _2840 * _2835, _2840 * _2836));
                        float _3980 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _3991 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2848 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2852 = (0.5 / (((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) + 9.9999999392252902907785028219223e-09) + _2848)) * _2848;
                        float _4002 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2861 = (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 3.1415927410125732421875) / ((_2826 * 2.1991131305694580078125) + 3.141590118408203125)) * _2815;
                        _2668 = (_2830 * _2778.x) + _2736;
                        _2669 = (_2830 * _2778.y) + _2737;
                        _2670 = (_2830 * _2778.z) + _2738;
                        _2665 = (_2861 * _2795.x) + _2733;
                        _2666 = (_2861 * _2795.y) + _2734;
                        _2667 = (_2861 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2670;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_66_pred = _2670;
                    frontier_phi_66_pred_1 = _2669;
                    frontier_phi_66_pred_2 = _2668;
                    frontier_phi_66_pred_3 = _2667;
                    frontier_phi_66_pred_4 = _2666;
                    frontier_phi_66_pred_5 = _2665;
                }
                _2469 = frontier_phi_66_pred;
                _2467 = frontier_phi_66_pred_1;
                _2465 = frontier_phi_66_pred_2;
                _2463 = frontier_phi_66_pred_3;
                _2461 = frontier_phi_66_pred_4;
                _2459 = frontier_phi_66_pred_5;
                uint _2616 = _2615 + 1u;
                if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2609 = _2459;
                    _2610 = _2461;
                    _2611 = _2463;
                    _2612 = _2465;
                    _2613 = _2467;
                    _2614 = _2469;
                    _2615 = _2616;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
        }
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.z;
        uint _2475 = (_2473 >> 8u) & 15u;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((4294967295u << _2475) & _2349) == 0u)
        {
            _2580 = _2458;
            _2582 = _2460;
            _2584 = _2462;
            _2586 = _2464;
            _2588 = _2466;
            _2590 = _2468;
        }
        else
        {
            float _2605 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2475 < ((_2473 >> 12u) & 15u))
            {
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2716 = _2458;
                float _2717 = _2460;
                float _2718 = _2462;
                float _2719 = _2464;
                float _2720 = _2466;
                float _2721 = _2468;
                uint _2722 = _2475;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2732)
                    {
                        frontier_phi_72_pred = _2721;
                        frontier_phi_72_pred_1 = _2720;
                        frontier_phi_72_pred_2 = _2719;
                        frontier_phi_72_pred_3 = _2718;
                        frontier_phi_72_pred_4 = _2717;
                        frontier_phi_72_pred_5 = _2716;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _2879 = _2716;
                        float _2880 = _2717;
                        float _2881 = _2718;
                        float _2882 = _2719;
                        float _2883 = _2720;
                        float _2884 = _2721;
                        uint _2885 = _2731;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2896 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2941 = (_2896 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2896 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2896 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2896 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_1536, _3005.z, fma(_1535, _3005.y, _3005.x * _1534)) + _3005.w;
                            _3018 = !((fma(_1536, _2986.z, fma(_1535, _2986.y, _2986.x * _1534)) + _2986.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2911.x - _1534;
                                float _3046 = _2911.y - _1535;
                                float _3047 = _2911.z - _1536;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2912 * _2912));
                                float _4013 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                                float _3063 = sqrt(_3048) * _2927.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3067 = 1.0 - _3066;
                                float _3069 = (_3067 * dot(vec3(_3052, _3053, _3054), vec3(_448, _451, _454))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_1536, _2954.z, fma(_1535, _2954.y, _2954.x * _1534)) + _2954.w) / _3017;
                                float _3077 = (fma(_1536, _2970.z, fma(_1535, _2970.y, _2970.x * _1534)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4029 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3093 = dot(vec3(_448, _451, _454), vec3((-0.0) - (_1534 * _2605), (-0.0) - (_1535 * _2605), (-0.0) - (_1536 * _2605)));
                                float _4040 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3101 = (_3067 * dot(vec3(_448, _451, _454), vec3(_3052, _3053, _3054))) + _3066;
                                float _4051 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3102 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3106 = (0.5 / (((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) + 9.9999999392252902907785028219223e-09) + _3102)) * _3102;
                                float _4062 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3113 = (_3082 * _3059) * (((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 3.1415927410125732421875) / ((_3072 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3083 * _2927.y;
                                frontier_phi_78_pred_1 = _3083 * _2927.x;
                                frontier_phi_78_pred_2 = _3113 * _2939.z;
                                frontier_phi_78_pred_3 = _3113 * _2939.y;
                                frontier_phi_78_pred_4 = _3113 * _2939.x;
                                frontier_phi_78_pred_5 = _3083 * _2927.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_78_pred;
                            _3120 = frontier_phi_78_pred_1;
                            _3119 = frontier_phi_78_pred_2;
                            _3118 = frontier_phi_78_pred_3;
                            _3117 = frontier_phi_78_pred_4;
                            _3122 = frontier_phi_78_pred_5;
                            _2869 = _3120 + _2882;
                            _2870 = _3121 + _2883;
                            _2871 = _3122 + _2884;
                            _2866 = _3117 + _2879;
                            _2867 = _3118 + _2880;
                            _2868 = _3119 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2871;
                        frontier_phi_72_pred_1 = _2870;
                        frontier_phi_72_pred_2 = _2869;
                        frontier_phi_72_pred_3 = _2868;
                        frontier_phi_72_pred_4 = _2867;
                        frontier_phi_72_pred_5 = _2866;
                    }
                    _2591 = frontier_phi_72_pred;
                    _2589 = frontier_phi_72_pred_1;
                    _2587 = frontier_phi_72_pred_2;
                    _2585 = frontier_phi_72_pred_3;
                    _2583 = frontier_phi_72_pred_4;
                    _2581 = frontier_phi_72_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2581;
                        _2717 = _2583;
                        _2718 = _2585;
                        _2719 = _2587;
                        _2720 = _2589;
                        _2721 = _2591;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2591;
                frontier_phi_60_61_ladder_1 = _2589;
                frontier_phi_60_61_ladder_2 = _2585;
                frontier_phi_60_61_ladder_3 = _2583;
                frontier_phi_60_61_ladder_4 = _2581;
                frontier_phi_60_61_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_60_61_ladder = _2468;
                frontier_phi_60_61_ladder_1 = _2466;
                frontier_phi_60_61_ladder_2 = _2462;
                frontier_phi_60_61_ladder_3 = _2460;
                frontier_phi_60_61_ladder_4 = _2458;
                frontier_phi_60_61_ladder_5 = _2464;
            }
            _2580 = frontier_phi_60_61_ladder_4;
            _2582 = frontier_phi_60_61_ladder_3;
            _2584 = frontier_phi_60_61_ladder_2;
            _2586 = frontier_phi_60_61_ladder_5;
            _2588 = frontier_phi_60_61_ladder_1;
            _2590 = frontier_phi_60_61_ladder;
        }
        float _2595 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2362 = (_2595 * _2586) + _2001;
        _2364 = (_2595 * _2588) + _2003;
        _2366 = (_2595 * _2590) + _2005;
        _2368 = ((_2580 * 0.039999999105930328369140625) * _2595) + _2243;
        _2370 = ((_2582 * 0.039999999105930328369140625) * _2595) + _2245;
        _2372 = ((_2584 * 0.039999999105930328369140625) * _2595) + _2247;
    }
    else
    {
        _2362 = _2001;
        _2364 = _2003;
        _2366 = _2005;
        _2368 = _2243;
        _2370 = _2245;
        _2372 = _2247;
    }
    uint _2378 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _2384 = (_331 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _296.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _267.x))) * cbInstanceData._m0[_2378].x;
    float _2385 = (_331 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _296.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _267.y))) * cbInstanceData._m0[_2378].y;
    float _2386 = (_331 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _296.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _267.z))) * cbInstanceData._m0[_2378].z;
    float _4078 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4089 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4100 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2403 = (((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2362 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _492))) + ((_2368 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _1270)) * cbPerFrame._m0[3u].x)) + _2384;
    float _2405 = (_2385 + ((_2370 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _1270)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2364 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _492)));
    float _2407 = (_2386 + ((_2372 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1270)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_2366 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _492)));
    float _4126 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2420 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    uint _2421 = _467 + 6u;
    float _2429 = _426 / cbSceneParam._m0[86u].x;
    float _2430 = _427 / cbSceneParam._m0[86u].y;
    vec4 _2444 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2446 = _2444.x;
    float _2447 = _2444.y;
    float _2448 = _2444.z;
    float _2449 = _2444.w;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2483 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2484 = _2483 / _360;
        float _2495 = _2484 * _411;
        float _2496 = _412 * _2484;
        float _2497 = (-0.0) - _2496;
        float _2499 = _2484 * _413;
        float _2501 = (cbSceneParam._m0[77u].w * _2497) / _2483;
        float _2502 = _2501 + cbSceneParam._m0[79u].w;
        float _2503 = cbSceneParam._m0[79u].w - _2496;
        float _2509 = sqrt(((_2495 * _2495) + (_2496 * _2496)) + (_2499 * _2499));
        float _2512 = (1.0 - (cbSceneParam._m0[77u].w / _2483)) * _2509;
        float _2517 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2519 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2678;
        if (abs((_2497 - _2501) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2678 = ((((_2502 > 0.0) ? exp2(_2517 * _2502) : (2.0 - exp2(_2519 * _2502))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2512;
        }
        else
        {
            float _2638 = 1.0 / cbSceneParam._m0[80u].x;
            float _2639 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : max(_2502, _2503));
            float _2640 = isnan(_2503) ? _2502 : (isnan(_2502) ? _2503 : min(_2502, _2503));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            _2678 = ((abs(_2509 / _2497) * cbSceneParam._m0[80u].y) * ((((_2649 - _2650) * 2.0) - ((exp2(_2517 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)))) - exp2(_2517 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))))) * _2638)) - ((exp2(_2519 * _2649) - exp2(_2519 * _2650)) * _2638))) + (_2512 * cbSceneParam._m0[80u].z);
        }
        vec4 _2680 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, 1.0), 0.0);
        float _2689 = exp2((_2678 * (-1.44269502162933349609375)) * (1.0 - _2680.w));
        float _2690 = log2(_2689);
        float _2706 = log2(_2449);
        _2521 = (exp2(_2706 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].x)) * _2680.x) / cbSceneParam._m0[78u].x)) + _2446;
        _2523 = (exp2(_2706 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].y)) * _2680.y) / cbSceneParam._m0[78u].y)) + _2447;
        _2525 = (exp2(_2706 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2690 * cbSceneParam._m0[78u].z)) * _2680.z) / cbSceneParam._m0[78u].z)) + _2448;
        _2527 = _2689 * _2449;
    }
    else
    {
        _2521 = _2446;
        _2523 = _2447;
        _2525 = _2448;
        _2527 = _2449;
    }
    float _2539 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2540 = _2539 == 3.0;
    float _2541 = log2(_2527);
    float _2545 = exp2(_2541 * cbSceneParam._m0[78u].x);
    float _2546 = exp2(_2541 * cbSceneParam._m0[78u].y);
    float _2547 = exp2(_2541 * cbSceneParam._m0[78u].z);
    float _2548 = _2545 * (isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0)));
    float _2549 = _2546 * (isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0)));
    float _2550 = _2547 * (isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0)));
    float _2559 = (_2539 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2559 * (_2540 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2521)));
    SV_Target.y = _2559 * (_2540 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2523)));
    SV_Target.z = _2559 * (_2540 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.w = cbInstanceData._m0[_2421].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2384) * _2420) * _2545) * _2559;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2385) * _2420) * _2546) * _2559;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2386) * _2420) * _2547) * _2559;
    SV_Target_1.w = cbInstanceData._m0[_2421].w;
}


