#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _853;
float _3052;
float _3053;
float _3054;
float _3055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _267 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _296 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _313 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _314 = _313 * _176;
    float _315 = _313 * _177;
    float _316 = _313 * _178;
    float _3064 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3075 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3086 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _401 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _403 = _401.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _532 = sqrt(((_387 * _387) + (_388 * _388)) + (_389 * _389));
        float _538 = (cbMatDynParam._m0[5u].x * _532) + cbMatDynParam._m0[5u].y;
        float _3097 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
        float _539 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
        float _543 = (cbMatDynParam._m0[5u].z * _532) + cbMatDynParam._m0[5u].w;
        float _3108 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0))) - _539)) + _539) < ((_403 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _439 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _442 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _456 = _455 + 9u;
    uint _457 = _456 + uint(cbMatDynParam._m0[0u].w);
    float _463 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0)))) * cbInstanceData._m0[_457].x;
    float _464 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0)))) * cbInstanceData._m0[_457].y;
    float _465 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0)))) * cbInstanceData._m0[_457].z;
    float _3119 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
    float _3130 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _3141 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _480 = _477.x * TEXCOORD_4;
    float _481 = dot(vec3(_314, _315, _316), vec3(_394, _395, _396));
    float _484 = _481 * 2.0;
    float _489 = (_484 * _314) - _394;
    float _490 = (_484 * _315) - _395;
    float _491 = (_484 * _316) - _396;
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_521, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _513));
        float _581 = fma(_521, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _513));
        float _585 = fma(_521, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _513));
        float _610 = _513 + _314;
        float _611 = _517 + _315;
        float _612 = _521 + _316;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_314, _315, _316), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3167 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3178 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3189 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_314, _315, _316), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3200 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3211 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3222 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_314, _315, _316), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3255 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _896 = fma(_521, cbModelParam._m0[30u].z, fma(_517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _513));
        float _900 = fma(_521, cbModelParam._m0[31u].z, fma(_517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _513));
        float _904 = fma(_521, cbModelParam._m0[32u].z, fma(_517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _513));
        float _927 = _513 + _314;
        float _928 = _517 + _315;
        float _929 = _521 + _316;
        float _939 = fma(_929, cbModelParam._m0[30u].z, fma(_928, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[31u].z, fma(_928, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[32u].z, fma(_928, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_896 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_900 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[35u].z) + ((((((_904 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _995 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_962.x + (-0.5));
        float _997 = _995 * (_962.y + (-0.5));
        float _998 = _995 * (_962.z + (-0.5));
        float _1005 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_969.x + (-0.5));
        float _1007 = _1005 * (_969.y + (-0.5));
        float _1008 = _1005 * (_969.z + (-0.5));
        float _1015 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_976.x + (-0.5));
        float _1017 = _1015 * (_976.y + (-0.5));
        float _1018 = _1015 * (_976.z + (-0.5));
        float _1025 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_983.x + (-0.5));
        float _1027 = _1025 * (_983.y + (-0.5));
        float _1028 = _1025 * (_983.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_314, _315, _316), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3296 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3307 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3318 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * (_1059 + 1.0))) + _1064) * _1029;
        float _1074 = _997 * 0.5;
        float _1075 = _1007 * 0.5;
        float _1076 = _1017 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_314, _315, _316), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3329 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3340 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3351 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * (_1101 + 1.0))) + _1106) * _1030;
        float _1116 = _998 * 0.5;
        float _1117 = _1008 * 0.5;
        float _1118 = _1018 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_314, _315, _316), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3362 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3373 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3384 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) * (_1143 + 1.0))) + _1148) * _1031;
        _1165 = _998;
        _1166 = _997;
        _1167 = _996;
        _1168 = _1008;
        _1169 = _1007;
        _1170 = _1006;
        _1171 = _1018;
        _1172 = _1017;
        _1173 = _1016;
        _1174 = _1031;
        _1175 = _1030;
        _1176 = _1029;
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = _853;
        _1175 = _853;
        _1176 = _853;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1212 = fma(_1191, cbSceneParam._m0[89u].z, fma(_1190, cbSceneParam._m0[89u].y, _1189 * cbSceneParam._m0[89u].x));
    float _1215 = fma(_1191, cbSceneParam._m0[90u].z, fma(_1190, cbSceneParam._m0[90u].y, _1189 * cbSceneParam._m0[90u].x));
    float _1218 = fma(_1191, cbSceneParam._m0[91u].z, fma(_1190, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1189));
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1239 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1242 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1276;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1249 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_852, _856, _859, _862));
        float _1253 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_854, _857, _860, _863));
        float _1257 = dot(vec4(_1233, _1234, _1235, 1.0), vec4(_855, _858, _861, _864));
        float _1264 = dot(vec4(cbModelParam._m0[39u]), vec4(_1233, _1234, _1235, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1287;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1278 = dot(vec4(cbModelParam._m0[40u]), vec4(_1233, _1234, _1235, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1291 = (_1287 * cbModelParam._m0[1u].x) + (_1276 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_521, cbModelParam._m0[13u].z, fma(_517, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_521, cbModelParam._m0[14u].z, fma(_517, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_521, cbModelParam._m0[15u].z, fma(_517, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1362 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1365 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1391;
        if (_1359 > 0.0)
        {
            _1391 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1391 = frontier_phi_17_15_ladder;
        }
        float _1597;
        if (_1362 > 0.0)
        {
            _1597 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1597 = frontier_phi_26_22_ladder;
        }
        float _1786;
        if (_1365 > 0.0)
        {
            _1786 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1786 = frontier_phi_38_33_ladder;
        }
        float _1788 = isnan(_1597) ? _1391 : (isnan(_1391) ? _1597 : min(_1391, _1597));
        float _1789 = isnan(_1786) ? _1788 : (isnan(_1788) ? _1786 : min(_1788, _1786));
        float _1793 = (_1789 * _1359) + _1348;
        float _1794 = (_1789 * _1362) + _1352;
        float _1795 = (_1789 * _1365) + _1356;
        float _1796 = _1789 * 9.9999997473787516355514526367188e-05;
        float _1798 = (-1.0) - _1796;
        float _1800 = _1796 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1795 > _1800) || ((_1795 < _1798) || ((_1794 > _1800) || ((_1794 < _1798) || ((_1793 < _1798) || (_1793 > _1800))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1795, cbModelParam._m0[9u].z, fma(_1794, cbModelParam._m0[9u].y, _1793 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1795, cbModelParam._m0[10u].z, fma(_1794, cbModelParam._m0[10u].y, _1793 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1795, cbModelParam._m0[11u].z, fma(_1794, cbModelParam._m0[11u].y, _1793 * cbModelParam._m0[11u].x))), _1300);
            frontier_phi_16_38_ladder = _1892.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1892.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1892.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_16_38_ladder_2;
        _1383 = frontier_phi_16_38_ladder_1;
        _1385 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1300);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1388 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_521, cbModelParam._m0[21u].z, fma(_517, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_521, cbModelParam._m0[22u].z, fma(_517, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_521, cbModelParam._m0[23u].z, fma(_517, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1458 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1461 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1602;
        if (_1455 > 0.0)
        {
            _1602 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1602 = frontier_phi_28_24_ladder;
        }
        float _1813;
        if (_1458 > 0.0)
        {
            _1813 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1813 = frontier_phi_40_35_ladder;
        }
        float _1964;
        if (_1461 > 0.0)
        {
            _1964 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1964 = frontier_phi_49_46_ladder;
        }
        float _1966 = isnan(_1813) ? _1602 : (isnan(_1602) ? _1813 : min(_1602, _1813));
        float _1967 = isnan(_1964) ? _1966 : (isnan(_1966) ? _1964 : min(_1966, _1964));
        float _1971 = (_1967 * _1455) + _1444;
        float _1972 = (_1967 * _1458) + _1448;
        float _1973 = (_1967 * _1461) + _1452;
        float _1974 = _1967 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1974;
        float _1977 = _1974 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1973 > _1977) || ((_1973 < _1975) || ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 < _1975) || (_1971 > _1977))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2201 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1973, cbModelParam._m0[17u].z, fma(_1972, cbModelParam._m0[17u].y, _1971 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1973, cbModelParam._m0[18u].z, fma(_1972, cbModelParam._m0[18u].y, _1971 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1973, cbModelParam._m0[19u].z, fma(_1972, cbModelParam._m0[19u].y, _1971 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_25_49_ladder = _2201.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2201.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2201.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_25_49_ladder_2;
        _1482 = frontier_phi_25_49_ladder_1;
        _1484 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1388);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1496 = _480 * 0.01200000010430812835693359375;
    float _1498 = _1496 * ((cbModelParam._m0[1u].w * (_1480 - _1381)) + _1381);
    float _1499 = _1496 * ((cbModelParam._m0[1u].w * (_1482 - _1383)) + _1383);
    float _1500 = _1496 * ((cbModelParam._m0[1u].w * (_1484 - _1385)) + _1385);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    uvec4 _1519 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1521 = _1519.x * 14u;
    uint _1522 = _1521 + 13u;
    float _1529 = _480 + (-1.0);
    float _1535 = (cbLight._m0[_1522].x * _1529) + 1.0;
    float _1536 = (cbLight._m0[_1522].y * _1529) + 1.0;
    float _1537 = (cbLight._m0[_1522].z * _1529) + 1.0;
    float _1538 = (cbLight._m0[_1522].w * _1529) + 1.0;
    uint _1539 = _1521 + 5u;
    float _1545 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1549 = _1521 + 4u;
    float _1556 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1560 = _1521 | 1u;
    float _1571 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_314, _315, _316));
    float _1574 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_314, _315, _316));
    float _3520 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _3531 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1579 = (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.3183098733425140380859375;
    float _1581 = (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * 0.3183098733425140380859375;
    float _1588 = ((cbLight._m0[_1539].x * _1545) * _1581) + ((cbLight._m0[_1549].x * _1556) * _1579);
    float _1589 = ((_1545 * cbLight._m0[_1539].y) * _1581) + ((_1556 * cbLight._m0[_1549].y) * _1579);
    float _1590 = ((_1545 * cbLight._m0[_1539].z) * _1581) + ((_1556 * cbLight._m0[_1549].z) * _1579);
    uvec4 _1594 = floatBitsToUint(cbLight._m0[_1521 + 12u]);
    bool _1596 = _1594.x == 0u;
    float _1607;
    float _1609;
    float _1611;
    if (_1596)
    {
        _1607 = _1588;
        _1609 = _1589;
        _1611 = _1590;
    }
    else
    {
        uint _1615 = _1521 + 6u;
        float _1631 = (dot(vec3(cbLight._m0[_1521 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1632 = _1631 * _1631;
        float _3542 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1634 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1607 = (((cbLight._m0[_1615].x * 0.3183098733425140380859375) * _1633) * _1634) + _1588;
        _1609 = (((cbLight._m0[_1615].y * 0.3183098733425140380859375) * _1633) * _1634) + _1589;
        _1611 = (((cbLight._m0[_1615].z * 0.3183098733425140380859375) * _1633) * _1634) + _1590;
    }
    bool _1614 = _1594.y == 0u;
    float _1652;
    float _1654;
    float _1656;
    if (_1614)
    {
        _1652 = _1607;
        _1654 = _1609;
        _1656 = _1611;
    }
    else
    {
        uint _1757 = _1521 + 7u;
        float _1773 = (dot(vec3(cbLight._m0[_1521 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1774 = _1773 * _1773;
        float _3558 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1776 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1652 = (((cbLight._m0[_1757].x * 0.3183098733425140380859375) * _1775) * _1776) + _1607;
        _1654 = (((cbLight._m0[_1757].y * 0.3183098733425140380859375) * _1775) * _1776) + _1609;
        _1656 = (((cbLight._m0[_1757].z * 0.3183098733425140380859375) * _1775) * _1776) + _1611;
    }
    uint _1658 = _1521 + 8u;
    float _1664 = cbLight._m0[_1521].x + _394;
    float _1665 = cbLight._m0[_1521].y + _395;
    float _1666 = cbLight._m0[_1521].z + _396;
    float _1670 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
    float _1674 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1521].xyz));
    float _3574 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1677 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1678 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _1679 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_1664 * _1670, _1665 * _1670, _1666 * _1670));
    float _3596 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1690 = (exp2(log2(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1696 = (0.5 / ((_1677 + 9.9999999392252902907785028219223e-09) + _1678)) * _1677;
    float _3607 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1698 = (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.31831014156341552734375;
    uint _1709 = _1521 + 9u;
    float _1715 = cbLight._m0[_1560].x + _394;
    float _1716 = cbLight._m0[_1560].y + _395;
    float _1717 = cbLight._m0[_1560].z + _396;
    float _1721 = inversesqrt(dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717)));
    float _1725 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1560].xyz));
    float _3618 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1728 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _1729 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_1715 * _1721, _1716 * _1721, _1717 * _1721));
    float _3629 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1742 = (0.5 / ((_1728 + 9.9999999392252902907785028219223e-09) + _1678)) * _1728;
    float _3640 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.31831014156341552734375;
    float _1754 = (((_1738 * cbLight._m0[_1709].x) * _1744) * _1545) + (((_1690 * cbLight._m0[_1658].x) * _1698) * _1556);
    float _1755 = (((_1738 * cbLight._m0[_1709].y) * _1744) * _1545) + (((_1690 * cbLight._m0[_1658].y) * _1698) * _1556);
    float _1756 = (((_1738 * cbLight._m0[_1709].z) * _1744) * _1545) + (((_1690 * cbLight._m0[_1658].z) * _1698) * _1556);
    float _1818;
    float _1820;
    float _1822;
    if (_1596)
    {
        _1818 = _1754;
        _1820 = _1755;
        _1822 = _1756;
    }
    else
    {
        uint _1824 = _1521 + 10u;
        uint _1830 = _1521 + 2u;
        float _1836 = cbLight._m0[_1830].x + _394;
        float _1837 = cbLight._m0[_1830].y + _395;
        float _1838 = cbLight._m0[_1830].z + _396;
        float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
        float _1846 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1830].xyz));
        float _3651 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1849 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1850 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1836 * _1842, _1837 * _1842, _1838 * _1842));
        float _3662 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = (exp2(log2(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1863 = (0.5 / ((_1849 + 9.9999999392252902907785028219223e-09) + _1678)) * _1849;
        float _3673 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1865 = (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.31831014156341552734375;
        float _1866 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1818 = (((_1859 * cbLight._m0[_1824].x) * _1865) * _1866) + _1754;
        _1820 = (((_1859 * cbLight._m0[_1824].y) * _1865) * _1866) + _1755;
        _1822 = (((_1859 * cbLight._m0[_1824].z) * _1865) * _1866) + _1756;
    }
    float _1901;
    float _1903;
    float _1905;
    if (_1614)
    {
        _1901 = _1818;
        _1903 = _1820;
        _1905 = _1822;
    }
    else
    {
        uint _1912 = _1521 + 11u;
        uint _1918 = _1521 + 3u;
        float _1924 = cbLight._m0[_1918].x + _394;
        float _1925 = cbLight._m0[_1918].y + _395;
        float _1926 = cbLight._m0[_1918].z + _396;
        float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
        float _1934 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1918].xyz));
        float _3689 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_1924 * _1930, _1925 * _1930, _1926 * _1930));
        float _3700 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1951 = (0.5 / ((_1937 + 9.9999999392252902907785028219223e-09) + _1678)) * _1937;
        float _3711 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1953 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.31831014156341552734375;
        float _1954 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1901 = (((_1947 * cbLight._m0[_1912].x) * _1953) * _1954) + _1818;
        _1903 = (((_1947 * cbLight._m0[_1912].y) * _1953) * _1954) + _1820;
        _1905 = (((_1947 * cbLight._m0[_1912].z) * _1953) * _1954) + _1822;
    }
    float _2089;
    float _2091;
    float _2093;
    float _2095;
    float _2097;
    float _2099;
    if (_1519.y == 0u)
    {
        float _2029 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2030 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2029;
        float _2031 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2029;
        float _2032 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2029;
        uvec4 _2044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2045 = _2044.x;
        uint _2056 = uint((float(_2044.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2045))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2045)));
        float _2066 = (log2(_2032 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2067 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        uint _2070 = uint(isnan(14.0) ? _2067 : (isnan(_2067) ? 14.0 : min(_2067, 14.0)));
        uvec4 _2075 = texelFetch(g_lightClusterGridBuffer, int(((_2070 << 2u) + (_2056 << 6u)) >> 2u));
        uint _2076 = _2075.x;
        uint _2077 = _2044.z;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((((1u << ((_2077 >> 4u) & 15u)) + 4294967295u) & _2076) == 0u) || ((_2077 & 240u) == 0u))
        {
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
        }
        else
        {
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            uint _2373 = 0u;
            uint _2382;
            bool _2383;
            for (;;)
            {
                _2382 = texelFetch(g_lightClassification, int((((_2070 << 5u) + (_2056 << 9u)) + (_2373 << 2u)) >> 2u)).x;
                _2383 = _2382 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2383)
                {
                    frontier_phi_66_pred = _2367;
                    frontier_phi_66_pred_1 = _2372;
                    frontier_phi_66_pred_2 = _2371;
                    frontier_phi_66_pred_3 = _2370;
                    frontier_phi_66_pred_4 = _2369;
                    frontier_phi_66_pred_5 = _2368;
                }
                else
                {
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    uint _2518;
                    _2512 = _2367;
                    _2513 = _2368;
                    _2514 = _2369;
                    _2515 = _2370;
                    _2516 = _2371;
                    _2517 = _2372;
                    _2518 = _2382;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    for (;;)
                    {
                        uint _2522 = uint(findLSB(_2518)) + (_2373 << 5u);
                        uint _2519 = (_2518 + 4294967295u) & _2518;
                        uint _2524 = _2522 * 48u;
                        vec4 _2538 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2524)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 3u)).x));
                        uint _2544 = (_2522 * 48u) + 4u;
                        vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2544)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 3u)).x));
                        uint _2563 = (_2522 * 48u) + 8u;
                        vec3 _2574 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2563)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 2u)).x));
                        float _2578 = _2538.x - _2030;
                        float _2579 = _2538.y - _2031;
                        float _2580 = _2538.z - _2032;
                        float _2581 = dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580));
                        float _2584 = inversesqrt(_2581);
                        float _2593 = 1.0 - (_2581 * _2538.w);
                        float _3737 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _2594 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
                        float _2595 = sqrt(_2581) * _2557.w;
                        float _2598 = 1.39999997615814208984375 / (_2595 + 1.39999997615814208984375);
                        float _2599 = _2598 * _2598;
                        float _2602 = ((1.0 - _2599) * dot(vec3(_436, _439, _442), vec3(_2584 * _2578, _2584 * _2579, _2584 * _2580))) + _2599;
                        float _2605 = _2595 * _2595;
                        float _2609 = ((isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0))) * _2594) / ((_2605 * 0.699999988079071044921875) + 1.0);
                        float _2613 = (-0.0) - _2030;
                        float _2614 = (-0.0) - _2031;
                        float _2615 = (-0.0) - _2032;
                        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
                        float _2623 = dot(vec3(_436, _439, _442), vec3(_2619 * _2613, _2619 * _2614, _2619 * _2615));
                        float _3753 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                        float _3764 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                        float _2627 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
                        float _2631 = (0.5 / (((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) + 9.9999999392252902907785028219223e-09) + _2627)) * _2627;
                        float _3775 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                        float _2640 = (((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 3.1415927410125732421875) / ((_2605 * 2.1991131305694580078125) + 3.141590118408203125)) * _2594;
                        _2442 = (_2609 * _2557.x) + _2515;
                        _2443 = (_2609 * _2557.y) + _2516;
                        _2444 = (_2609 * _2557.z) + _2517;
                        _2439 = (_2640 * _2574.x) + _2512;
                        _2440 = (_2640 * _2574.y) + _2513;
                        _2441 = (_2640 * _2574.z) + _2514;
                        if (_2519 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2512 = _2439;
                            _2513 = _2440;
                            _2514 = _2441;
                            _2515 = _2442;
                            _2516 = _2443;
                            _2517 = _2444;
                            _2518 = _2519;
                        }
                    }
                    frontier_phi_66_pred = _2439;
                    frontier_phi_66_pred_1 = _2444;
                    frontier_phi_66_pred_2 = _2443;
                    frontier_phi_66_pred_3 = _2442;
                    frontier_phi_66_pred_4 = _2441;
                    frontier_phi_66_pred_5 = _2440;
                }
                _2207 = frontier_phi_66_pred;
                _2217 = frontier_phi_66_pred_1;
                _2215 = frontier_phi_66_pred_2;
                _2213 = frontier_phi_66_pred_3;
                _2211 = frontier_phi_66_pred_4;
                _2209 = frontier_phi_66_pred_5;
                uint _2374 = _2373 + 1u;
                if (_2374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2367 = _2207;
                    _2368 = _2209;
                    _2369 = _2211;
                    _2370 = _2213;
                    _2371 = _2215;
                    _2372 = _2217;
                    _2373 = _2374;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
        }
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.z;
        uint _2223 = (_2221 >> 8u) & 15u;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((4294967295u << _2223) & _2076) == 0u)
        {
            _2338 = _2206;
            _2340 = _2208;
            _2342 = _2210;
            _2344 = _2212;
            _2346 = _2214;
            _2348 = _2216;
        }
        else
        {
            float _2363 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2223 < ((_2221 >> 12u) & 15u))
            {
                float _2339;
                float _2341;
                float _2343;
                float _2345;
                float _2347;
                float _2349;
                float _2495 = _2206;
                float _2496 = _2208;
                float _2497 = _2210;
                float _2498 = _2212;
                float _2499 = _2214;
                float _2500 = _2216;
                uint _2501 = _2223;
                uint _2510;
                bool _2511;
                for (;;)
                {
                    _2510 = texelFetch(g_lightClassification, int((((_2070 << 5u) + (_2056 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                    _2511 = _2510 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2511)
                    {
                        frontier_phi_77_pred = _2500;
                        frontier_phi_77_pred_1 = _2499;
                        frontier_phi_77_pred_2 = _2498;
                        frontier_phi_77_pred_3 = _2497;
                        frontier_phi_77_pred_4 = _2496;
                        frontier_phi_77_pred_5 = _2495;
                    }
                    else
                    {
                        float _2654;
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2667 = _2495;
                        float _2668 = _2496;
                        float _2669 = _2497;
                        float _2670 = _2498;
                        float _2671 = _2499;
                        float _2672 = _2500;
                        uint _2673 = _2510;
                        uint _2674;
                        vec4 _2699;
                        float _2700;
                        vec4 _2715;
                        vec3 _2727;
                        vec4 _2742;
                        vec4 _2758;
                        float _2805;
                        bool _2806;
                        for (;;)
                        {
                            uint _2684 = ((_2501 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2673));
                            _2674 = (_2673 + 4294967295u) & _2673;
                            uint _2686 = _2684 * 40u;
                            _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            _2700 = _2699.w;
                            uint _2702 = (_2684 * 40u) + 4u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            uint _2717 = (_2684 * 40u) + 8u;
                            _2727 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x));
                            uint _2729 = (_2684 * 40u) + 16u;
                            _2742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 3u)).x));
                            uint _2745 = (_2684 * 40u) + 20u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            uint _2761 = (_2684 * 40u) + 24u;
                            vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2780 = (_2684 * 40u) + 28u;
                            vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            _2805 = fma(_2032, _2793.z, fma(_2031, _2793.y, _2793.x * _2030)) + _2793.w;
                            _2806 = !((fma(_2032, _2774.z, fma(_2031, _2774.y, _2774.x * _2030)) + _2774.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2806)
                            {
                                float _2833 = _2699.x - _2030;
                                float _2834 = _2699.y - _2031;
                                float _2835 = _2699.z - _2032;
                                float _2836 = dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835));
                                float _2839 = inversesqrt(_2836);
                                float _2840 = _2839 * _2833;
                                float _2841 = _2839 * _2834;
                                float _2842 = _2839 * _2835;
                                float _2846 = 1.0 - (_2836 / (_2700 * _2700));
                                float _3786 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                                float _2847 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                                float _2851 = sqrt(_2836) * _2715.w;
                                float _2853 = 1.39999997615814208984375 / (_2851 + 1.39999997615814208984375);
                                float _2854 = _2853 * _2853;
                                float _2855 = 1.0 - _2854;
                                float _2857 = (_2855 * dot(vec3(_2840, _2841, _2842), vec3(_436, _439, _442))) + _2854;
                                float _2860 = _2851 * _2851;
                                float _2864 = (fma(_2032, _2742.z, fma(_2031, _2742.y, _2742.x * _2030)) + _2742.w) / _2805;
                                float _2865 = (fma(_2032, _2758.z, fma(_2031, _2758.y, _2758.x * _2030)) + _2758.w) / _2805;
                                float _2869 = 1.0 - dot(vec2(_2864, _2865), vec2(_2864, _2865));
                                float _3802 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                                float _2870 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
                                float _2871 = _2870 * (((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * _2847) / ((_2860 * 0.699999988079071044921875) + 1.0));
                                float _2881 = dot(vec3(_436, _439, _442), vec3((-0.0) - (_2030 * _2363), (-0.0) - (_2031 * _2363), (-0.0) - (_2032 * _2363)));
                                float _3813 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2889 = (_2855 * dot(vec3(_436, _439, _442), vec3(_2840, _2841, _2842))) + _2854;
                                float _3824 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2890 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                                float _2894 = (0.5 / (((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) + 9.9999999392252902907785028219223e-09) + _2890)) * _2890;
                                float _3835 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                                float _2901 = (_2870 * _2847) * (((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 3.1415927410125732421875) / ((_2860 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2871 * _2715.y;
                                frontier_phi_83_pred_1 = _2871 * _2715.x;
                                frontier_phi_83_pred_2 = _2901 * _2727.z;
                                frontier_phi_83_pred_3 = _2901 * _2727.y;
                                frontier_phi_83_pred_4 = _2901 * _2727.x;
                                frontier_phi_83_pred_5 = _2871 * _2715.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2909 = frontier_phi_83_pred;
                            _2908 = frontier_phi_83_pred_1;
                            _2907 = frontier_phi_83_pred_2;
                            _2906 = frontier_phi_83_pred_3;
                            _2905 = frontier_phi_83_pred_4;
                            _2910 = frontier_phi_83_pred_5;
                            _2657 = _2908 + _2670;
                            _2658 = _2909 + _2671;
                            _2659 = _2910 + _2672;
                            _2654 = _2905 + _2667;
                            _2655 = _2906 + _2668;
                            _2656 = _2907 + _2669;
                            if (_2674 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2667 = _2654;
                                _2668 = _2655;
                                _2669 = _2656;
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2674;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2659;
                        frontier_phi_77_pred_1 = _2658;
                        frontier_phi_77_pred_2 = _2657;
                        frontier_phi_77_pred_3 = _2656;
                        frontier_phi_77_pred_4 = _2655;
                        frontier_phi_77_pred_5 = _2654;
                    }
                    _2349 = frontier_phi_77_pred;
                    _2347 = frontier_phi_77_pred_1;
                    _2345 = frontier_phi_77_pred_2;
                    _2343 = frontier_phi_77_pred_3;
                    _2341 = frontier_phi_77_pred_4;
                    _2339 = frontier_phi_77_pred_5;
                    uint _2502 = _2501 + 1u;
                    if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2495 = _2339;
                        _2496 = _2341;
                        _2497 = _2343;
                        _2498 = _2345;
                        _2499 = _2347;
                        _2500 = _2349;
                        _2501 = _2502;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2343;
                frontier_phi_58_59_ladder_1 = _2349;
                frontier_phi_58_59_ladder_2 = _2347;
                frontier_phi_58_59_ladder_3 = _2345;
                frontier_phi_58_59_ladder_4 = _2341;
                frontier_phi_58_59_ladder_5 = _2339;
            }
            else
            {
                frontier_phi_58_59_ladder = _2210;
                frontier_phi_58_59_ladder_1 = _2216;
                frontier_phi_58_59_ladder_2 = _2214;
                frontier_phi_58_59_ladder_3 = _2212;
                frontier_phi_58_59_ladder_4 = _2208;
                frontier_phi_58_59_ladder_5 = _2206;
            }
            _2338 = frontier_phi_58_59_ladder_5;
            _2340 = frontier_phi_58_59_ladder_4;
            _2342 = frontier_phi_58_59_ladder;
            _2344 = frontier_phi_58_59_ladder_3;
            _2346 = frontier_phi_58_59_ladder_2;
            _2348 = frontier_phi_58_59_ladder_1;
        }
        float _2353 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2089 = (_2353 * _2344) + _1652;
        _2091 = (_2353 * _2346) + _1654;
        _2093 = (_2353 * _2348) + _1656;
        _2095 = ((_2338 * 0.039999999105930328369140625) * _2353) + _1901;
        _2097 = ((_2340 * 0.039999999105930328369140625) * _2353) + _1903;
        _2099 = ((_2342 * 0.039999999105930328369140625) * _2353) + _1905;
    }
    else
    {
        _2089 = _1652;
        _2091 = _1654;
        _2093 = _1656;
        _2095 = _1901;
        _2097 = _1903;
        _2099 = _1905;
    }
    uint _2105 = _456 + uint(cbMatDynParam._m0[0u].w);
    float _2111 = cbInstanceData._m0[_2105].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _296.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _267.x));
    float _2112 = cbInstanceData._m0[_2105].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _296.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _267.y));
    float _2113 = cbInstanceData._m0[_2105].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _296.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _267.z));
    float _3851 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3862 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3873 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _2130 = (((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_2089 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _480))) + ((_2095 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1291)) * cbPerFrame._m0[3u].x)) + _2111;
    float _2132 = (_2112 + ((_2097 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1291)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_2091 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _480)));
    float _2134 = (_2113 + ((_2099 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1291)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_2093 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _480)));
    float _2135 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2136 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2143 = cbMtdParam._m0[2u].x * _2111;
    float _2144 = cbMtdParam._m0[2u].y * _2112;
    float _2145 = cbMtdParam._m0[2u].z * _2113;
    float _3899 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2147 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    uint _2148 = _455 + 6u;
    float _2156 = _415 / cbSceneParam._m0[86u].x;
    float _2157 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2171 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2156, _2157, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2173 = _2171.x;
    float _2174 = _2171.y;
    float _2175 = _2171.z;
    float _2176 = _2171.w;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2231 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2232 = _2231 / _336;
        float _2243 = _2232 * _387;
        float _2244 = _388 * _2232;
        float _2245 = (-0.0) - _2244;
        float _2247 = _2232 * _389;
        float _2249 = (cbSceneParam._m0[77u].w * _2245) / _2231;
        float _2250 = _2249 + cbSceneParam._m0[79u].w;
        float _2251 = cbSceneParam._m0[79u].w - _2244;
        float _2257 = sqrt(((_2243 * _2243) + (_2244 * _2244)) + (_2247 * _2247));
        float _2260 = (1.0 - (cbSceneParam._m0[77u].w / _2231)) * _2257;
        float _2265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2452;
        if (abs((_2245 - _2249) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2452 = ((((_2250 > 0.0) ? exp2(_2265 * _2250) : (2.0 - exp2(_2267 * _2250))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2260;
        }
        else
        {
            float _2396 = 1.0 / cbSceneParam._m0[80u].x;
            float _2397 = isnan(_2251) ? _2250 : (isnan(_2250) ? _2251 : max(_2250, _2251));
            float _2398 = isnan(_2251) ? _2250 : (isnan(_2250) ? _2251 : min(_2250, _2251));
            float _2407 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : min(_2397, 0.0));
            float _2408 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : min(_2398, 0.0));
            _2452 = ((abs(_2257 / _2245) * cbSceneParam._m0[80u].y) * ((((_2407 - _2408) * 2.0) - ((exp2(_2265 * (isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0)))) - exp2(_2265 * (isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))))) * _2396)) - ((exp2(_2267 * _2407) - exp2(_2267 * _2408)) * _2396))) + (_2260 * cbSceneParam._m0[80u].z);
        }
        vec4 _2454 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2156, _2157, 1.0), 0.0);
        float _2463 = exp2((_2452 * (-1.44269502162933349609375)) * (1.0 - _2454.w));
        float _2464 = log2(_2463);
        float _2480 = log2(_2176);
        _2269 = (exp2(_2480 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].x)) * _2454.x) / cbSceneParam._m0[78u].x)) + _2173;
        _2271 = (exp2(_2480 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].y)) * _2454.y) / cbSceneParam._m0[78u].y)) + _2174;
        _2273 = (exp2(_2480 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].z)) * _2454.z) / cbSceneParam._m0[78u].z)) + _2175;
        _2275 = _2463 * _2176;
    }
    else
    {
        _2269 = _2173;
        _2271 = _2174;
        _2273 = _2175;
        _2275 = _2176;
    }
    bool _2490;
    vec4 _2285;
    vec4 _2308;
    float _2310;
    float _2314;
    float _2315;
    float _2316;
    float _2319;
    float _2322;
    float _2325;
    float _2326;
    bool _2337;
    for (;;)
    {
        _2285 = cbMatDynParam._m0[0u];
        float _2287 = roundEven(_2285.y);
        bool _2288 = _2287 == 3.0;
        float _2290 = log2(_2275);
        float _2294 = exp2(_2290 * cbSceneParam._m0[78u].x);
        float _2295 = exp2(_2290 * cbSceneParam._m0[78u].y);
        float _2296 = exp2(_2290 * cbSceneParam._m0[78u].z);
        float _2297 = _2294 * _2135;
        float _2298 = _2295 * _2136;
        float _2299 = _2296 * _2137;
        float _2306 = _403 + (-0.5);
        _2308 = cbMtdParam._m0[1u];
        _2310 = _2308.y * _2306;
        float _2313 = (_2287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2314 = _2313 * (_2288 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2269)));
        _2315 = _2313 * (_2288 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2271)));
        _2316 = _2313 * (_2288 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2273)));
        _2319 = ((_2143 * _2147) * _2294) * _2313;
        _2322 = ((_2144 * _2147) * _2295) * _2313;
        _2325 = ((_2145 * _2147) * _2296) * _2313;
        _2326 = _2306 * 0.999000012874603271484375;
        _2337 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2337)
        {
            if ((cbInstanceData._m0[_455 + 7u].x + _2326) < 0.5)
            {
                _2490 = true;
                break;
            }
        }
        uint _2431 = _456 + uint(_2285.w);
        if ((cbInstanceData._m0[_2431].w < 1.0) && ((cbInstanceData._m0[_2431].w + _2326) < 0.5))
        {
            _2490 = true;
            break;
        }
        if ((_2310 + 1.0) < _2308.x)
        {
            _2490 = true;
            break;
        }
        _2490 = false;
        break;
    }
    float _2645;
    if (_2490)
    {
        discard_state = true;
        _2645 = 0.0;
    }
    else
    {
        _2645 = cbInstanceData._m0[_2148].w;
    }
    SV_Target.x = _2314;
    SV_Target.y = _2315;
    SV_Target.z = _2316;
    SV_Target.w = _2645;
    SV_Target_1.x = _2319;
    SV_Target_1.y = _2322;
    SV_Target_1.z = _2325;
    SV_Target_1.w = cbInstanceData._m0[_2148].w;
    discard_exit();
}


