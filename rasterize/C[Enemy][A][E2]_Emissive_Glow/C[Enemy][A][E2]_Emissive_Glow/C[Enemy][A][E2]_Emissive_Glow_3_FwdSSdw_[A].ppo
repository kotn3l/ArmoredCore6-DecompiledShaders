#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _878;
float _3098;
float _3099;
float _3100;
float _3101;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _178 = _177 * NORMAL.x;
    float _179 = _177 * NORMAL.y;
    float _180 = _177 * NORMAL.z;
    vec4 _199 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _225 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _233 = (_225.x * cbMtdParam._m0[12u].x) + (_199.x * cbMtdParam._m0[9u].x);
    float _234 = (_225.y * cbMtdParam._m0[12u].y) + (_199.y * cbMtdParam._m0[9u].y);
    float _235 = (_225.z * cbMtdParam._m0[12u].z) + (_199.z * cbMtdParam._m0[9u].z);
    vec4 _269 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _298 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _323 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3110 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
    float _333 = (((_325 * _325) * (3.0 - (_325 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _340 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _341 = _340 * _178;
    float _342 = _340 * _179;
    float _343 = _340 * _180;
    float _3121 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3132 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3143 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _362 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    vec4 _427 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _429 = _427.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _557 = sqrt(((_413 * _413) + (_414 * _414)) + (_415 * _415));
        float _563 = (cbMatDynParam._m0[5u].x * _557) + cbMatDynParam._m0[5u].y;
        float _3154 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _564 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _568 = (cbMatDynParam._m0[5u].z * _557) + cbMatDynParam._m0[5u].w;
        float _3165 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) - _564)) + _564) < ((_429 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _462 = fma(_343, cbSceneParam._m0[5u].z, fma(_342, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _341));
    float _465 = fma(_343, cbSceneParam._m0[6u].z, fma(_342, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _341));
    float _468 = fma(_343, cbSceneParam._m0[7u].z, fma(_342, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _341));
    uint _481 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = _481 + 9u;
    uint _483 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3176 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
    float _3187 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    float _3198 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _506 = _503.x * TEXCOORD_4;
    float _507 = dot(vec3(_341, _342, _343), vec3(_420, _421, _422));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _341) - _420;
    float _515 = (_510 * _342) - _421;
    float _516 = (_510 * _343) - _422;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _877;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _602 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _606 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _610 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _635 = _538 + _341;
        float _636 = _542 + _342;
        float _637 = _546 + _343;
        float _647 = fma(_637, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635)) - _602;
        float _648 = fma(_637, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635)) - _606;
        float _649 = fma(_637, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635)) - _610;
        float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
        float _666 = ((_653 * _647) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_602 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_653 * _648) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_606 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_653 * _649) / cbModelParam._m0[34u].z) + ((((((_610 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        float _705 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_671.x + (-0.5));
        float _707 = _705 * (_671.y + (-0.5));
        float _708 = _705 * (_671.z + (-0.5));
        float _715 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_678.x + (-0.5));
        float _717 = _715 * (_678.y + (-0.5));
        float _718 = _715 * (_678.z + (-0.5));
        float _725 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_685.x + (-0.5));
        float _727 = _725 * (_685.y + (-0.5));
        float _728 = _725 * (_685.z + (-0.5));
        float _735 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_692.x + (-0.5));
        float _737 = _735 * (_692.y + (-0.5));
        float _738 = _735 * (_692.z + (-0.5));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = _706 * 0.5;
        float _743 = _716 * 0.5;
        float _744 = _726 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _759 = (dot(vec3(_341, _342, _343), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3224 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _769 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3235 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3246 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_771 + 1.0))) + _776) * _739;
        float _786 = _707 * 0.5;
        float _787 = _717 * 0.5;
        float _788 = _727 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_341, _342, _343), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3279 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_813 + 1.0))) + _818) * _740;
        float _828 = _708 * 0.5;
        float _829 = _718 * 0.5;
        float _830 = _728 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_341, _342, _343), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3312 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_855 + 1.0))) + _860) * _741;
        _877 = _708;
        _879 = _707;
        _880 = _706;
        _881 = _718;
        _882 = _717;
        _883 = _716;
        _884 = _728;
        _885 = _727;
        _886 = _726;
        _887 = _741;
        _888 = _740;
        _889 = _739;
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
    }
    else
    {
        _877 = _878;
        _879 = _878;
        _880 = _878;
        _881 = _878;
        _882 = _878;
        _883 = _878;
        _884 = _878;
        _885 = _878;
        _886 = _878;
        _887 = _878;
        _888 = _878;
        _889 = _878;
        _890 = 0.0;
        _891 = 0.0;
        _892 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _925 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _929 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _952 = _538 + _341;
        float _953 = _542 + _342;
        float _954 = _546 + _343;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_341, _342, _343), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3353 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3364 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3375 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_341, _342, _343), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3408 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_341, _342, _343), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3441 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _878;
        _1191 = _878;
        _1192 = _878;
        _1193 = _878;
        _1194 = _878;
        _1195 = _878;
        _1196 = _878;
        _1197 = _878;
        _1198 = _878;
        _1199 = _878;
        _1200 = _878;
        _1201 = _878;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _514 * 0.5;
    float _1259 = _515 * 0.5;
    float _1260 = _516 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_877, _881, _884, _887));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_879, _882, _885, _888));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _883, _886, _889));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1325 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1405;
    float _1407;
    float _1409;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1372 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1376 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1380 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1383 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1386 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1389 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1415;
        if (_1383 > 0.0)
        {
            _1415 = abs((1.0 - _1372) / _1383);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1372 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1415 = frontier_phi_17_15_ladder;
        }
        float _1641;
        if (_1386 > 0.0)
        {
            _1641 = abs((1.0 - _1376) / _1386);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1376 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1641 = frontier_phi_26_22_ladder;
        }
        float _1833;
        if (_1389 > 0.0)
        {
            _1833 = abs((1.0 - _1380) / _1389);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1380 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1833 = frontier_phi_38_33_ladder;
        }
        float _1835 = isnan(_1641) ? _1415 : (isnan(_1415) ? _1641 : min(_1415, _1641));
        float _1836 = isnan(_1833) ? _1835 : (isnan(_1835) ? _1833 : min(_1835, _1833));
        float _1840 = (_1836 * _1383) + _1372;
        float _1841 = (_1836 * _1386) + _1376;
        float _1842 = (_1836 * _1389) + _1380;
        float _1843 = _1836 * 9.9999997473787516355514526367188e-05;
        float _1845 = (-1.0) - _1843;
        float _1847 = _1843 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1842 > _1847) || ((_1842 < _1845) || ((_1841 > _1847) || ((_1841 < _1845) || ((_1840 < _1845) || (_1840 > _1847))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1842, cbModelParam._m0[9u].z, fma(_1841, cbModelParam._m0[9u].y, _1840 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1842, cbModelParam._m0[10u].z, fma(_1841, cbModelParam._m0[10u].y, _1840 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1842, cbModelParam._m0[11u].z, fma(_1841, cbModelParam._m0[11u].y, _1840 * cbModelParam._m0[11u].x))), _1325);
            frontier_phi_16_38_ladder = _1939.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1939.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1939.x * cbModelParam._m0[1u].y;
        }
        _1405 = frontier_phi_16_38_ladder_2;
        _1407 = frontier_phi_16_38_ladder_1;
        _1409 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1393 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1325);
        _1405 = _1393.x * cbModelParam._m0[1u].y;
        _1407 = _1393.y * cbModelParam._m0[1u].y;
        _1409 = _1393.z * cbModelParam._m0[1u].y;
    }
    float _1412 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1482 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1485 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1646;
        if (_1479 > 0.0)
        {
            _1646 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1646 = frontier_phi_28_24_ladder;
        }
        float _1860;
        if (_1482 > 0.0)
        {
            _1860 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1860 = frontier_phi_40_35_ladder;
        }
        float _2011;
        if (_1485 > 0.0)
        {
            _2011 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2011 = frontier_phi_49_46_ladder;
        }
        float _2013 = isnan(_1860) ? _1646 : (isnan(_1646) ? _1860 : min(_1646, _1860));
        float _2014 = isnan(_2011) ? _2013 : (isnan(_2013) ? _2011 : min(_2013, _2011));
        float _2018 = (_2014 * _1479) + _1468;
        float _2019 = (_2014 * _1482) + _1472;
        float _2020 = (_2014 * _1485) + _1476;
        float _2021 = _2014 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2021;
        float _2024 = _2021 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2020 > _2024) || ((_2020 < _2022) || ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 < _2022) || (_2018 > _2024))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2020, cbModelParam._m0[17u].z, fma(_2019, cbModelParam._m0[17u].y, _2018 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2020, cbModelParam._m0[18u].z, fma(_2019, cbModelParam._m0[18u].y, _2018 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2020, cbModelParam._m0[19u].z, fma(_2019, cbModelParam._m0[19u].y, _2018 * cbModelParam._m0[19u].x))), _1412);
            frontier_phi_25_49_ladder = _2248.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2248.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2248.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_25_49_ladder_2;
        _1506 = frontier_phi_25_49_ladder_1;
        _1508 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1412);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1520 = _506 * 0.01200000010430812835693359375;
    float _1522 = _1520 * ((cbModelParam._m0[1u].w * (_1504 - _1405)) + _1405);
    float _1523 = _1520 * ((cbModelParam._m0[1u].w * (_1506 - _1407)) + _1407);
    float _1524 = _1520 * ((cbModelParam._m0[1u].w * (_1508 - _1409)) + _1409);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    vec4 _1541 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_441, _442));
    float _1543 = _1541.w;
    float _1555 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1543);
    float _1556 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1543);
    float _1557 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1543);
    uvec4 _1561 = floatBitsToUint(cbInstanceData._m0[_481 + 5u]);
    uint _1563 = _1561.x * 14u;
    uint _1564 = _1563 + 13u;
    float _1571 = _506 + (-1.0);
    float _1576 = (cbLight._m0[_1564].x * _1571) + 1.0;
    float _1577 = (cbLight._m0[_1564].y * _1571) + 1.0;
    float _1578 = (cbLight._m0[_1564].z * _1571) + 1.0;
    float _1579 = (cbLight._m0[_1564].w * _1571) + 1.0;
    uint _1580 = _1563 + 5u;
    float _1586 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1590 = _1563 + 4u;
    float _1600 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
    uint _1604 = _1563 | 1u;
    float _1615 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_341, _342, _343));
    float _1618 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_341, _342, _343));
    float _3577 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _3588 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1623 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.3183098733425140380859375;
    float _1625 = (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 0.3183098733425140380859375;
    float _1632 = ((cbLight._m0[_1580].x * _1586) * _1625) + (((cbLight._m0[_1590].x * _1555) * _1600) * _1623);
    float _1633 = ((_1586 * cbLight._m0[_1580].y) * _1625) + (((cbLight._m0[_1590].y * _1556) * _1600) * _1623);
    float _1634 = ((_1586 * cbLight._m0[_1580].z) * _1625) + (((cbLight._m0[_1590].z * _1557) * _1600) * _1623);
    uvec4 _1638 = floatBitsToUint(cbLight._m0[_1563 + 12u]);
    bool _1640 = _1638.x == 0u;
    float _1651;
    float _1653;
    float _1655;
    if (_1640)
    {
        _1651 = _1632;
        _1653 = _1633;
        _1655 = _1634;
    }
    else
    {
        uint _1659 = _1563 + 6u;
        float _1675 = (dot(vec3(cbLight._m0[_1563 + 2u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _1676 = _1675 * _1675;
        float _3599 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1678 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1651 = (((cbLight._m0[_1659].x * 0.3183098733425140380859375) * _1677) * _1678) + _1632;
        _1653 = (((cbLight._m0[_1659].y * 0.3183098733425140380859375) * _1677) * _1678) + _1633;
        _1655 = (((cbLight._m0[_1659].z * 0.3183098733425140380859375) * _1677) * _1678) + _1634;
    }
    bool _1658 = _1638.y == 0u;
    float _1696;
    float _1698;
    float _1700;
    if (_1658)
    {
        _1696 = _1651;
        _1698 = _1653;
        _1700 = _1655;
    }
    else
    {
        uint _1804 = _1563 + 7u;
        float _1820 = (dot(vec3(cbLight._m0[_1563 + 3u].xyz), vec3(_341, _342, _343)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3615 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1823 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1696 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1651;
        _1698 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1653;
        _1700 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1655;
    }
    uint _1702 = _1563 + 8u;
    float _1708 = cbLight._m0[_1563].x + _420;
    float _1709 = cbLight._m0[_1563].y + _421;
    float _1710 = cbLight._m0[_1563].z + _422;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1718 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1563].xyz));
    float _3631 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _1722 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _1723 = dot(vec3(cbLight._m0[_1563].xyz), vec3(_1708 * _1714, _1709 * _1714, _1710 * _1714));
    float _3653 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1734 = (exp2(log2(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1740 = (0.5 / ((_1721 + 9.9999999392252902907785028219223e-09) + _1722)) * _1721;
    float _3664 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1742 = (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.31831014156341552734375;
    uint _1756 = _1563 + 9u;
    float _1762 = cbLight._m0[_1604].x + _420;
    float _1763 = cbLight._m0[_1604].y + _421;
    float _1764 = cbLight._m0[_1604].z + _422;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1772 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1604].xyz));
    float _3675 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1776 = dot(vec3(cbLight._m0[_1604].xyz), vec3(_1762 * _1768, _1763 * _1768, _1764 * _1768));
    float _3686 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1785 = (exp2(log2(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1789 = (0.5 / ((_1775 + 9.9999999392252902907785028219223e-09) + _1722)) * _1775;
    float _3697 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.31831014156341552734375;
    float _1801 = (((_1785 * cbLight._m0[_1756].x) * _1791) * _1586) + ((((cbLight._m0[_1702].x * _1555) * _1734) * _1742) * _1600);
    float _1802 = (((_1785 * cbLight._m0[_1756].y) * _1791) * _1586) + ((((cbLight._m0[_1702].y * _1556) * _1734) * _1742) * _1600);
    float _1803 = (((_1785 * cbLight._m0[_1756].z) * _1791) * _1586) + ((((cbLight._m0[_1702].z * _1557) * _1734) * _1742) * _1600);
    float _1865;
    float _1867;
    float _1869;
    if (_1640)
    {
        _1865 = _1801;
        _1867 = _1802;
        _1869 = _1803;
    }
    else
    {
        uint _1871 = _1563 + 10u;
        uint _1877 = _1563 + 2u;
        float _1883 = cbLight._m0[_1877].x + _420;
        float _1884 = cbLight._m0[_1877].y + _421;
        float _1885 = cbLight._m0[_1877].z + _422;
        float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
        float _1893 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1877].xyz));
        float _3708 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1896 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1897 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_1883 * _1889, _1884 * _1889, _1885 * _1889));
        float _3719 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1910 = (0.5 / ((_1896 + 9.9999999392252902907785028219223e-09) + _1722)) * _1896;
        float _3730 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1912 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.31831014156341552734375;
        float _1913 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
        _1865 = (((_1906 * cbLight._m0[_1871].x) * _1912) * _1913) + _1801;
        _1867 = (((_1906 * cbLight._m0[_1871].y) * _1912) * _1913) + _1802;
        _1869 = (((_1906 * cbLight._m0[_1871].z) * _1912) * _1913) + _1803;
    }
    float _1948;
    float _1950;
    float _1952;
    if (_1658)
    {
        _1948 = _1865;
        _1950 = _1867;
        _1952 = _1869;
    }
    else
    {
        uint _1959 = _1563 + 11u;
        uint _1965 = _1563 + 3u;
        float _1971 = cbLight._m0[_1965].x + _420;
        float _1972 = cbLight._m0[_1965].y + _421;
        float _1973 = cbLight._m0[_1965].z + _422;
        float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
        float _1981 = dot(vec3(_341, _342, _343), vec3(cbLight._m0[_1965].xyz));
        float _3746 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1984 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1985 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1971 * _1977, _1972 * _1977, _1973 * _1977));
        float _3757 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1998 = (0.5 / ((_1984 + 9.9999999392252902907785028219223e-09) + _1722)) * _1984;
        float _3768 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2000 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.31831014156341552734375;
        float _2001 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1948 = (((_1994 * cbLight._m0[_1959].x) * _2000) * _2001) + _1865;
        _1950 = (((_1994 * cbLight._m0[_1959].y) * _2000) * _2001) + _1867;
        _1952 = (((_1994 * cbLight._m0[_1959].z) * _2000) * _2001) + _1869;
    }
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    float _2146;
    if (_1561.y == 0u)
    {
        float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2077 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2076;
        float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2076;
        float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2076;
        uvec4 _2091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2092 = _2091.x;
        uint _2103 = uint((float(_2091.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2092))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2092)));
        float _2113 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2114 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        uint _2117 = uint(isnan(14.0) ? _2114 : (isnan(_2114) ? 14.0 : min(_2114, 14.0)));
        uvec4 _2122 = texelFetch(g_lightClusterGridBuffer, int(((_2117 << 2u) + (_2103 << 6u)) >> 2u));
        uint _2123 = _2122.x;
        uint _2124 = _2091.z;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        if (((((1u << ((_2124 >> 4u) & 15u)) + 4294967295u) & _2123) == 0u) || ((_2124 & 240u) == 0u))
        {
            _2253 = 0.0;
            _2255 = 0.0;
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
        }
        else
        {
            float _2254;
            float _2256;
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            uint _2419 = 0u;
            uint _2428;
            bool _2429;
            for (;;)
            {
                _2428 = texelFetch(g_lightClassification, int((((_2117 << 5u) + (_2103 << 9u)) + (_2419 << 2u)) >> 2u)).x;
                _2429 = _2428 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2429)
                {
                    frontier_phi_66_pred = _2413;
                    frontier_phi_66_pred_1 = _2418;
                    frontier_phi_66_pred_2 = _2417;
                    frontier_phi_66_pred_3 = _2416;
                    frontier_phi_66_pred_4 = _2415;
                    frontier_phi_66_pred_5 = _2414;
                }
                else
                {
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    uint _2564;
                    _2558 = _2413;
                    _2559 = _2414;
                    _2560 = _2415;
                    _2561 = _2416;
                    _2562 = _2417;
                    _2563 = _2418;
                    _2564 = _2428;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    for (;;)
                    {
                        uint _2568 = uint(findLSB(_2564)) + (_2419 << 5u);
                        uint _2565 = (_2564 + 4294967295u) & _2564;
                        uint _2570 = _2568 * 48u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2590 = (_2568 * 48u) + 4u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2609 = (_2568 * 48u) + 8u;
                        vec3 _2620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x));
                        float _2624 = _2584.x - _2077;
                        float _2625 = _2584.y - _2078;
                        float _2626 = _2584.z - _2079;
                        float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                        float _2630 = inversesqrt(_2627);
                        float _2639 = 1.0 - (_2627 * _2584.w);
                        float _3794 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                        float _2641 = sqrt(_2627) * _2603.w;
                        float _2644 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                        float _2645 = _2644 * _2644;
                        float _2648 = ((1.0 - _2645) * dot(vec3(_462, _465, _468), vec3(_2630 * _2624, _2630 * _2625, _2630 * _2626))) + _2645;
                        float _2651 = _2641 * _2641;
                        float _2655 = ((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2640) / ((_2651 * 0.699999988079071044921875) + 1.0);
                        float _2659 = (-0.0) - _2077;
                        float _2660 = (-0.0) - _2078;
                        float _2661 = (-0.0) - _2079;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(_462, _465, _468), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3810 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _3821 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2673 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                        float _2677 = (0.5 / (((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) + 9.9999999392252902907785028219223e-09) + _2673)) * _2673;
                        float _3832 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2686 = (((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 3.1415927410125732421875) / ((_2651 * 2.1991131305694580078125) + 3.141590118408203125)) * _2640;
                        _2488 = (_2655 * _2603.x) + _2561;
                        _2489 = (_2655 * _2603.y) + _2562;
                        _2490 = (_2655 * _2603.z) + _2563;
                        _2485 = (_2686 * _2620.x) + _2558;
                        _2486 = (_2686 * _2620.y) + _2559;
                        _2487 = (_2686 * _2620.z) + _2560;
                        if (_2565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2558 = _2485;
                            _2559 = _2486;
                            _2560 = _2487;
                            _2561 = _2488;
                            _2562 = _2489;
                            _2563 = _2490;
                            _2564 = _2565;
                        }
                    }
                    frontier_phi_66_pred = _2485;
                    frontier_phi_66_pred_1 = _2490;
                    frontier_phi_66_pred_2 = _2489;
                    frontier_phi_66_pred_3 = _2488;
                    frontier_phi_66_pred_4 = _2487;
                    frontier_phi_66_pred_5 = _2486;
                }
                _2254 = frontier_phi_66_pred;
                _2264 = frontier_phi_66_pred_1;
                _2262 = frontier_phi_66_pred_2;
                _2260 = frontier_phi_66_pred_3;
                _2258 = frontier_phi_66_pred_4;
                _2256 = frontier_phi_66_pred_5;
                uint _2420 = _2419 + 1u;
                if (_2420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2413 = _2254;
                    _2414 = _2256;
                    _2415 = _2258;
                    _2416 = _2260;
                    _2417 = _2262;
                    _2418 = _2264;
                    _2419 = _2420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2253 = _2254;
            _2255 = _2256;
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
        }
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.z;
        uint _2270 = (_2268 >> 8u) & 15u;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        if (((4294967295u << _2270) & _2123) == 0u)
        {
            _2384 = _2253;
            _2386 = _2255;
            _2388 = _2257;
            _2390 = _2259;
            _2392 = _2261;
            _2394 = _2263;
        }
        else
        {
            float _2409 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2270 < ((_2268 >> 12u) & 15u))
            {
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2541 = _2253;
                float _2542 = _2255;
                float _2543 = _2257;
                float _2544 = _2259;
                float _2545 = _2261;
                float _2546 = _2263;
                uint _2547 = _2270;
                uint _2556;
                bool _2557;
                for (;;)
                {
                    _2556 = texelFetch(g_lightClassification, int((((_2117 << 5u) + (_2103 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                    _2557 = _2556 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2557)
                    {
                        frontier_phi_77_pred = _2546;
                        frontier_phi_77_pred_1 = _2545;
                        frontier_phi_77_pred_2 = _2544;
                        frontier_phi_77_pred_3 = _2543;
                        frontier_phi_77_pred_4 = _2542;
                        frontier_phi_77_pred_5 = _2541;
                    }
                    else
                    {
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2713 = _2541;
                        float _2714 = _2542;
                        float _2715 = _2543;
                        float _2716 = _2544;
                        float _2717 = _2545;
                        float _2718 = _2546;
                        uint _2719 = _2556;
                        uint _2720;
                        vec4 _2745;
                        float _2746;
                        vec4 _2761;
                        vec3 _2773;
                        vec4 _2788;
                        vec4 _2804;
                        float _2851;
                        bool _2852;
                        for (;;)
                        {
                            uint _2730 = ((_2547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2719));
                            _2720 = (_2719 + 4294967295u) & _2719;
                            uint _2732 = _2730 * 40u;
                            _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            _2746 = _2745.w;
                            uint _2748 = (_2730 * 40u) + 4u;
                            _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            uint _2763 = (_2730 * 40u) + 8u;
                            _2773 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x));
                            uint _2775 = (_2730 * 40u) + 16u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            uint _2791 = (_2730 * 40u) + 20u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2807 = (_2730 * 40u) + 24u;
                            vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2826 = (_2730 * 40u) + 28u;
                            vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            _2851 = fma(_2079, _2839.z, fma(_2078, _2839.y, _2839.x * _2077)) + _2839.w;
                            _2852 = !((fma(_2079, _2820.z, fma(_2078, _2820.y, _2820.x * _2077)) + _2820.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2852)
                            {
                                float _2879 = _2745.x - _2077;
                                float _2880 = _2745.y - _2078;
                                float _2881 = _2745.z - _2079;
                                float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                                float _2885 = inversesqrt(_2882);
                                float _2886 = _2885 * _2879;
                                float _2887 = _2885 * _2880;
                                float _2888 = _2885 * _2881;
                                float _2892 = 1.0 - (_2882 / (_2746 * _2746));
                                float _3843 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                                float _2893 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
                                float _2897 = sqrt(_2882) * _2761.w;
                                float _2899 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                                float _2900 = _2899 * _2899;
                                float _2901 = 1.0 - _2900;
                                float _2903 = (_2901 * dot(vec3(_2886, _2887, _2888), vec3(_462, _465, _468))) + _2900;
                                float _2906 = _2897 * _2897;
                                float _2910 = (fma(_2079, _2788.z, fma(_2078, _2788.y, _2788.x * _2077)) + _2788.w) / _2851;
                                float _2911 = (fma(_2079, _2804.z, fma(_2078, _2804.y, _2804.x * _2077)) + _2804.w) / _2851;
                                float _2915 = 1.0 - dot(vec2(_2910, _2911), vec2(_2910, _2911));
                                float _3859 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2916 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
                                float _2917 = _2916 * (((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2893) / ((_2906 * 0.699999988079071044921875) + 1.0));
                                float _2927 = dot(vec3(_462, _465, _468), vec3((-0.0) - (_2077 * _2409), (-0.0) - (_2078 * _2409), (-0.0) - (_2079 * _2409)));
                                float _3870 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                                float _2935 = (_2901 * dot(vec3(_462, _465, _468), vec3(_2886, _2887, _2888))) + _2900;
                                float _3881 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                                float _2940 = (0.5 / (((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) + 9.9999999392252902907785028219223e-09) + _2936)) * _2936;
                                float _3892 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                                float _2947 = (_2916 * _2893) * (((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 3.1415927410125732421875) / ((_2906 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2917 * _2761.y;
                                frontier_phi_83_pred_1 = _2917 * _2761.x;
                                frontier_phi_83_pred_2 = _2947 * _2773.z;
                                frontier_phi_83_pred_3 = _2947 * _2773.y;
                                frontier_phi_83_pred_4 = _2947 * _2773.x;
                                frontier_phi_83_pred_5 = _2917 * _2761.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2955 = frontier_phi_83_pred;
                            _2954 = frontier_phi_83_pred_1;
                            _2953 = frontier_phi_83_pred_2;
                            _2952 = frontier_phi_83_pred_3;
                            _2951 = frontier_phi_83_pred_4;
                            _2956 = frontier_phi_83_pred_5;
                            _2703 = _2954 + _2716;
                            _2704 = _2955 + _2717;
                            _2705 = _2956 + _2718;
                            _2700 = _2951 + _2713;
                            _2701 = _2952 + _2714;
                            _2702 = _2953 + _2715;
                            if (_2720 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2703;
                                _2717 = _2704;
                                _2718 = _2705;
                                _2719 = _2720;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2705;
                        frontier_phi_77_pred_1 = _2704;
                        frontier_phi_77_pred_2 = _2703;
                        frontier_phi_77_pred_3 = _2702;
                        frontier_phi_77_pred_4 = _2701;
                        frontier_phi_77_pred_5 = _2700;
                    }
                    _2395 = frontier_phi_77_pred;
                    _2393 = frontier_phi_77_pred_1;
                    _2391 = frontier_phi_77_pred_2;
                    _2389 = frontier_phi_77_pred_3;
                    _2387 = frontier_phi_77_pred_4;
                    _2385 = frontier_phi_77_pred_5;
                    uint _2548 = _2547 + 1u;
                    if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2541 = _2385;
                        _2542 = _2387;
                        _2543 = _2389;
                        _2544 = _2391;
                        _2545 = _2393;
                        _2546 = _2395;
                        _2547 = _2548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2389;
                frontier_phi_58_59_ladder_1 = _2395;
                frontier_phi_58_59_ladder_2 = _2393;
                frontier_phi_58_59_ladder_3 = _2391;
                frontier_phi_58_59_ladder_4 = _2387;
                frontier_phi_58_59_ladder_5 = _2385;
            }
            else
            {
                frontier_phi_58_59_ladder = _2257;
                frontier_phi_58_59_ladder_1 = _2263;
                frontier_phi_58_59_ladder_2 = _2261;
                frontier_phi_58_59_ladder_3 = _2259;
                frontier_phi_58_59_ladder_4 = _2255;
                frontier_phi_58_59_ladder_5 = _2253;
            }
            _2384 = frontier_phi_58_59_ladder_5;
            _2386 = frontier_phi_58_59_ladder_4;
            _2388 = frontier_phi_58_59_ladder;
            _2390 = frontier_phi_58_59_ladder_3;
            _2392 = frontier_phi_58_59_ladder_2;
            _2394 = frontier_phi_58_59_ladder_1;
        }
        float _2399 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2136 = (_2399 * _2390) + _1696;
        _2138 = (_2399 * _2392) + _1698;
        _2140 = (_2399 * _2394) + _1700;
        _2142 = ((_2384 * 0.039999999105930328369140625) * _2399) + _1948;
        _2144 = ((_2386 * 0.039999999105930328369140625) * _2399) + _1950;
        _2146 = ((_2388 * 0.039999999105930328369140625) * _2399) + _1952;
    }
    else
    {
        _2136 = _1696;
        _2138 = _1698;
        _2140 = _1700;
        _2142 = _1948;
        _2144 = _1950;
        _2146 = _1952;
    }
    uint _2152 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _2158 = (_333 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _298.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _269.x))) * cbInstanceData._m0[_2152].x;
    float _2159 = (_333 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _298.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _269.y))) * cbInstanceData._m0[_2152].y;
    float _2160 = (_333 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _298.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _269.z))) * cbInstanceData._m0[_2152].z;
    float _3908 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3919 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3930 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _2177 = (((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_2136 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _506))) + ((_2142 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + _2158;
    float _2179 = (_2159 + ((_2144 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2138 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _506)));
    float _2181 = (_2160 + ((_2146 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1316)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2140 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _506)));
    float _2182 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2183 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2190 = cbMtdParam._m0[2u].x * _2158;
    float _2191 = cbMtdParam._m0[2u].y * _2159;
    float _2192 = cbMtdParam._m0[2u].z * _2160;
    float _3956 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2194 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    uint _2195 = _481 + 6u;
    float _2203 = _441 / cbSceneParam._m0[86u].x;
    float _2204 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2218 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2203, _2204, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2220 = _2218.x;
    float _2221 = _2218.y;
    float _2222 = _2218.z;
    float _2223 = _2218.w;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2278 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2279 = _2278 / _362;
        float _2290 = _2279 * _413;
        float _2291 = _414 * _2279;
        float _2292 = (-0.0) - _2291;
        float _2294 = _2279 * _415;
        float _2296 = (cbSceneParam._m0[77u].w * _2292) / _2278;
        float _2297 = _2296 + cbSceneParam._m0[79u].w;
        float _2298 = cbSceneParam._m0[79u].w - _2291;
        float _2304 = sqrt(((_2290 * _2290) + (_2291 * _2291)) + (_2294 * _2294));
        float _2307 = (1.0 - (cbSceneParam._m0[77u].w / _2278)) * _2304;
        float _2312 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2314 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2498;
        if (abs((_2292 - _2296) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2498 = ((((_2297 > 0.0) ? exp2(_2312 * _2297) : (2.0 - exp2(_2314 * _2297))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2307;
        }
        else
        {
            float _2442 = 1.0 / cbSceneParam._m0[80u].x;
            float _2443 = isnan(_2298) ? _2297 : (isnan(_2297) ? _2298 : max(_2297, _2298));
            float _2444 = isnan(_2298) ? _2297 : (isnan(_2297) ? _2298 : min(_2297, _2298));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            float _2454 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : min(_2444, 0.0));
            _2498 = ((abs(_2304 / _2292) * cbSceneParam._m0[80u].y) * ((((_2453 - _2454) * 2.0) - ((exp2(_2312 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)))) - exp2(_2312 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0))))) * _2442)) - ((exp2(_2314 * _2453) - exp2(_2314 * _2454)) * _2442))) + (_2307 * cbSceneParam._m0[80u].z);
        }
        vec4 _2500 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2203, _2204, 1.0), 0.0);
        float _2509 = exp2((_2498 * (-1.44269502162933349609375)) * (1.0 - _2500.w));
        float _2510 = log2(_2509);
        float _2526 = log2(_2223);
        _2316 = (exp2(_2526 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].x)) * _2500.x) / cbSceneParam._m0[78u].x)) + _2220;
        _2318 = (exp2(_2526 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].y)) * _2500.y) / cbSceneParam._m0[78u].y)) + _2221;
        _2320 = (exp2(_2526 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].z)) * _2500.z) / cbSceneParam._m0[78u].z)) + _2222;
        _2322 = _2509 * _2223;
    }
    else
    {
        _2316 = _2220;
        _2318 = _2221;
        _2320 = _2222;
        _2322 = _2223;
    }
    bool _2536;
    vec4 _2332;
    vec4 _2354;
    float _2356;
    float _2360;
    float _2361;
    float _2362;
    float _2365;
    float _2368;
    float _2371;
    float _2372;
    bool _2383;
    for (;;)
    {
        _2332 = cbMatDynParam._m0[0u];
        float _2334 = roundEven(_2332.y);
        bool _2335 = _2334 == 3.0;
        float _2336 = log2(_2322);
        float _2340 = exp2(_2336 * cbSceneParam._m0[78u].x);
        float _2341 = exp2(_2336 * cbSceneParam._m0[78u].y);
        float _2342 = exp2(_2336 * cbSceneParam._m0[78u].z);
        float _2343 = _2340 * _2182;
        float _2344 = _2341 * _2183;
        float _2345 = _2342 * _2184;
        float _2352 = _429 + (-0.5);
        _2354 = cbMtdParam._m0[1u];
        _2356 = _2354.y * _2352;
        float _2359 = (_2334 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2360 = _2359 * (_2335 ? _2343 : (_2343 + (cbSceneParam._m0[72u].w * _2316)));
        _2361 = _2359 * (_2335 ? _2344 : (_2344 + (cbSceneParam._m0[72u].w * _2318)));
        _2362 = _2359 * (_2335 ? _2345 : (_2345 + (cbSceneParam._m0[72u].w * _2320)));
        _2365 = ((_2190 * _2194) * _2340) * _2359;
        _2368 = ((_2191 * _2194) * _2341) * _2359;
        _2371 = ((_2192 * _2194) * _2342) * _2359;
        _2372 = _2352 * 0.999000012874603271484375;
        _2383 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2383)
        {
            if ((cbInstanceData._m0[_481 + 7u].x + _2372) < 0.5)
            {
                _2536 = true;
                break;
            }
        }
        uint _2477 = _482 + uint(_2332.w);
        if ((cbInstanceData._m0[_2477].w < 1.0) && ((cbInstanceData._m0[_2477].w + _2372) < 0.5))
        {
            _2536 = true;
            break;
        }
        if ((_2356 + 1.0) < _2354.x)
        {
            _2536 = true;
            break;
        }
        _2536 = false;
        break;
    }
    float _2691;
    if (_2536)
    {
        discard_state = true;
        _2691 = 0.0;
    }
    else
    {
        _2691 = cbInstanceData._m0[_2195].w;
    }
    SV_Target.x = _2360;
    SV_Target.y = _2361;
    SV_Target.z = _2362;
    SV_Target.w = _2691;
    SV_Target_1.x = _2365;
    SV_Target_1.y = _2368;
    SV_Target_1.z = _2371;
    SV_Target_1.w = cbInstanceData._m0[_2195].w;
    discard_exit();
}


