#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _837;
float _3038;
float _3039;
float _3040;
float _3041;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _193 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _219 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _227 = (_219.x * cbMtdParam._m0[12u].x) + (_193.x * cbMtdParam._m0[9u].x);
    float _228 = (_219.y * cbMtdParam._m0[12u].y) + (_193.y * cbMtdParam._m0[9u].y);
    float _229 = (_219.z * cbMtdParam._m0[12u].z) + (_193.z * cbMtdParam._m0[9u].z);
    vec4 _251 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _280 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _297 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _298 = _297 * _171;
    float _299 = _297 * _172;
    float _300 = _297 * _173;
    float _3050 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3061 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3072 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    vec4 _385 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _387 = _385.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _516 = sqrt(((_371 * _371) + (_372 * _372)) + (_373 * _373));
        float _522 = (cbMatDynParam._m0[5u].x * _516) + cbMatDynParam._m0[5u].y;
        float _3083 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
        float _523 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _527 = (cbMatDynParam._m0[5u].z * _516) + cbMatDynParam._m0[5u].w;
        float _3094 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0))) - _523)) + _523) < ((_387 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _423 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _426 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _439 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3105 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
    float _3116 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
    float _3127 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
    vec4 _461 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _464 = _461.x * TEXCOORD_4;
    float _465 = dot(vec3(_298, _299, _300), vec3(_378, _379, _380));
    float _468 = _465 * 2.0;
    float _473 = (_468 * _298) - _378;
    float _474 = (_468 * _299) - _379;
    float _475 = (_468 * _300) - _380;
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _836;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _561 = fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497));
        float _565 = fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497));
        float _569 = fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497));
        float _594 = _497 + _298;
        float _595 = _501 + _299;
        float _596 = _505 + _300;
        float _606 = fma(_596, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594)) - _561;
        float _607 = fma(_596, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594)) - _565;
        float _608 = fma(_596, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594)) - _569;
        float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
        float _625 = ((_612 * _606) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_561 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_612 * _607) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_565 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _627 = ((_612 * _608) / cbModelParam._m0[34u].z) + ((((((_569 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _630 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_625, _626, _627), 0.0);
        float _664 = exp2((_630.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_630.x + (-0.5));
        float _666 = _664 * (_630.y + (-0.5));
        float _667 = _664 * (_630.z + (-0.5));
        float _674 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_637.x + (-0.5));
        float _676 = _674 * (_637.y + (-0.5));
        float _677 = _674 * (_637.z + (-0.5));
        float _684 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_644.x + (-0.5));
        float _686 = _684 * (_644.y + (-0.5));
        float _687 = _684 * (_644.z + (-0.5));
        float _694 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_651.x + (-0.5));
        float _696 = _694 * (_651.y + (-0.5));
        float _697 = _694 * (_651.z + (-0.5));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = _665 * 0.5;
        float _702 = _675 * 0.5;
        float _703 = _685 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _718 = (dot(vec3(_298, _299, _300), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3153 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _728 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3164 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _3175 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))) * (_730 + 1.0))) + _735) * _698;
        float _745 = _666 * 0.5;
        float _746 = _676 * 0.5;
        float _747 = _686 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _761 = (dot(vec3(_298, _299, _300), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _3186 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _770 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3197 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3208 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * (_772 + 1.0))) + _777) * _699;
        float _787 = _667 * 0.5;
        float _788 = _677 * 0.5;
        float _789 = _687 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_298, _299, _300), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3219 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3230 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3241 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))) * (_814 + 1.0))) + _819) * _700;
        _836 = _667;
        _838 = _666;
        _839 = _665;
        _840 = _677;
        _841 = _676;
        _842 = _675;
        _843 = _687;
        _844 = _686;
        _845 = _685;
        _846 = _700;
        _847 = _699;
        _848 = _698;
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
    }
    else
    {
        _836 = _837;
        _838 = _837;
        _839 = _837;
        _840 = _837;
        _841 = _837;
        _842 = _837;
        _843 = _837;
        _844 = _837;
        _845 = _837;
        _846 = _837;
        _847 = _837;
        _848 = _837;
        _849 = 0.0;
        _850 = 0.0;
        _851 = 0.0;
    }
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497));
        float _884 = fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497));
        float _888 = fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497));
        float _911 = _497 + _298;
        float _912 = _501 + _299;
        float _913 = _505 + _300;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_946.x + (-0.5));
        float _981 = _979 * (_946.y + (-0.5));
        float _982 = _979 * (_946.z + (-0.5));
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_953.x + (-0.5));
        float _991 = _989 * (_953.y + (-0.5));
        float _992 = _989 * (_953.z + (-0.5));
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_960.x + (-0.5));
        float _1001 = _999 * (_960.y + (-0.5));
        float _1002 = _999 * (_960.z + (-0.5));
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_298, _299, _300), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3282 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3293 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3304 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * (_1043 + 1.0))) + _1048) * _1013;
        float _1058 = _981 * 0.5;
        float _1059 = _991 * 0.5;
        float _1060 = _1001 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_298, _299, _300), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3337 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_1085 + 1.0))) + _1090) * _1014;
        float _1100 = _982 * 0.5;
        float _1101 = _992 * 0.5;
        float _1102 = _1002 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_298, _299, _300), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3370 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_1127 + 1.0))) + _1132) * _1015;
        _1149 = _982;
        _1150 = _981;
        _1151 = _980;
        _1152 = _992;
        _1153 = _991;
        _1154 = _990;
        _1155 = _1002;
        _1156 = _1001;
        _1157 = _1000;
        _1158 = _1015;
        _1159 = _1014;
        _1160 = _1013;
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _837;
        _1150 = _837;
        _1151 = _837;
        _1152 = _837;
        _1153 = _837;
        _1154 = _837;
        _1155 = _837;
        _1156 = _837;
        _1157 = _837;
        _1158 = _837;
        _1159 = _837;
        _1160 = _837;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _849)) + _849;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _850)) + _850;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _851)) + _851;
    float _1196 = fma(_1175, cbSceneParam._m0[89u].z, fma(_1174, cbSceneParam._m0[89u].y, _1173 * cbSceneParam._m0[89u].x));
    float _1199 = fma(_1175, cbSceneParam._m0[90u].z, fma(_1174, cbSceneParam._m0[90u].y, _1173 * cbSceneParam._m0[90u].x));
    float _1202 = fma(_1175, cbSceneParam._m0[91u].z, fma(_1174, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1173));
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = _475 * 0.5;
    float _1220 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1223 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1226 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1260;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1233 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_836, _840, _843, _846));
        float _1237 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_838, _841, _844, _847));
        float _1241 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_839, _842, _845, _848));
        float _1248 = dot(vec4(cbModelParam._m0[39u]), vec4(_1217, _1218, _1219, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1271;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1262 = dot(vec4(cbModelParam._m0[40u]), vec4(_1217, _1218, _1219, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1275 = (_1271 * cbModelParam._m0[1u].x) + (_1260 * (1.0 - cbModelParam._m0[1u].x));
    float _1284 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1366;
    float _1368;
    float _1370;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1333 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _1337 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _1341 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _1344 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _1347 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _1350 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _1376;
        if (_1344 > 0.0)
        {
            _1376 = abs((1.0 - _1333) / _1344);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1333 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1376 = frontier_phi_17_15_ladder;
        }
        float _1583;
        if (_1347 > 0.0)
        {
            _1583 = abs((1.0 - _1337) / _1347);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1337 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1583 = frontier_phi_26_22_ladder;
        }
        float _1772;
        if (_1350 > 0.0)
        {
            _1772 = abs((1.0 - _1341) / _1350);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1341 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1772 = frontier_phi_38_33_ladder;
        }
        float _1774 = isnan(_1583) ? _1376 : (isnan(_1376) ? _1583 : min(_1376, _1583));
        float _1775 = isnan(_1772) ? _1774 : (isnan(_1774) ? _1772 : min(_1774, _1772));
        float _1779 = (_1775 * _1344) + _1333;
        float _1780 = (_1775 * _1347) + _1337;
        float _1781 = (_1775 * _1350) + _1341;
        float _1782 = _1775 * 9.9999997473787516355514526367188e-05;
        float _1784 = (-1.0) - _1782;
        float _1786 = _1782 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1781 > _1786) || ((_1781 < _1784) || ((_1780 > _1786) || ((_1780 < _1784) || ((_1779 < _1784) || (_1779 > _1786))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1781, cbModelParam._m0[9u].z, fma(_1780, cbModelParam._m0[9u].y, _1779 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1781, cbModelParam._m0[10u].z, fma(_1780, cbModelParam._m0[10u].y, _1779 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1781, cbModelParam._m0[11u].z, fma(_1780, cbModelParam._m0[11u].y, _1779 * cbModelParam._m0[11u].x))), _1284);
            frontier_phi_16_38_ladder = _1878.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1878.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1878.x * cbModelParam._m0[1u].y;
        }
        _1366 = frontier_phi_16_38_ladder_2;
        _1368 = frontier_phi_16_38_ladder_1;
        _1370 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _1284);
        _1366 = _1354.x * cbModelParam._m0[1u].y;
        _1368 = _1354.y * cbModelParam._m0[1u].y;
        _1370 = _1354.z * cbModelParam._m0[1u].y;
    }
    float _1373 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1430 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1434 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1438 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1441 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1444 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1447 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1588;
        if (_1441 > 0.0)
        {
            _1588 = abs((1.0 - _1430) / _1441);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1430 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1588 = frontier_phi_28_24_ladder;
        }
        float _1799;
        if (_1444 > 0.0)
        {
            _1799 = abs((1.0 - _1434) / _1444);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1434 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1799 = frontier_phi_40_35_ladder;
        }
        float _1950;
        if (_1447 > 0.0)
        {
            _1950 = abs((1.0 - _1438) / _1447);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1438 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1950 = frontier_phi_49_46_ladder;
        }
        float _1952 = isnan(_1799) ? _1588 : (isnan(_1588) ? _1799 : min(_1588, _1799));
        float _1953 = isnan(_1950) ? _1952 : (isnan(_1952) ? _1950 : min(_1952, _1950));
        float _1957 = (_1953 * _1441) + _1430;
        float _1958 = (_1953 * _1444) + _1434;
        float _1959 = (_1953 * _1447) + _1438;
        float _1960 = _1953 * 9.9999997473787516355514526367188e-05;
        float _1961 = (-1.0) - _1960;
        float _1963 = _1960 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1959 > _1963) || ((_1959 < _1961) || ((_1958 > _1963) || ((_1958 < _1961) || ((_1957 < _1961) || (_1957 > _1963))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2187 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1959, cbModelParam._m0[17u].z, fma(_1958, cbModelParam._m0[17u].y, _1957 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1959, cbModelParam._m0[18u].z, fma(_1958, cbModelParam._m0[18u].y, _1957 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1959, cbModelParam._m0[19u].z, fma(_1958, cbModelParam._m0[19u].y, _1957 * cbModelParam._m0[19u].x))), _1373);
            frontier_phi_25_49_ladder = _2187.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2187.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2187.x * cbModelParam._m0[1u].z;
        }
        _1466 = frontier_phi_25_49_ladder_2;
        _1468 = frontier_phi_25_49_ladder_1;
        _1470 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _1373);
        _1466 = _1450.x * cbModelParam._m0[1u].z;
        _1468 = _1450.y * cbModelParam._m0[1u].z;
        _1470 = _1450.z * cbModelParam._m0[1u].z;
    }
    float _1482 = _464 * 0.01200000010430812835693359375;
    float _1484 = _1482 * ((cbModelParam._m0[1u].w * (_1466 - _1366)) + _1366);
    float _1485 = _1482 * ((cbModelParam._m0[1u].w * (_1468 - _1368)) + _1368);
    float _1486 = _1482 * ((cbModelParam._m0[1u].w * (_1470 - _1370)) + _1370);
    float _1489 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, _1484 * cbSceneParam._m0[91u].x));
    uvec4 _1505 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1507 = _1505.x * 14u;
    uint _1508 = _1507 + 13u;
    float _1515 = _464 + (-1.0);
    float _1521 = (cbLight._m0[_1508].x * _1515) + 1.0;
    float _1522 = (cbLight._m0[_1508].y * _1515) + 1.0;
    float _1523 = (cbLight._m0[_1508].z * _1515) + 1.0;
    float _1524 = (cbLight._m0[_1508].w * _1515) + 1.0;
    uint _1525 = _1507 + 5u;
    float _1531 = isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0));
    uint _1535 = _1507 + 4u;
    float _1542 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
    uint _1546 = _1507 | 1u;
    float _1557 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_298, _299, _300));
    float _1560 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_298, _299, _300));
    float _3506 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _3517 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1565 = (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.3183098733425140380859375;
    float _1567 = (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * 0.3183098733425140380859375;
    float _1574 = ((cbLight._m0[_1525].x * _1531) * _1567) + ((cbLight._m0[_1535].x * _1542) * _1565);
    float _1575 = ((_1531 * cbLight._m0[_1525].y) * _1567) + ((_1542 * cbLight._m0[_1535].y) * _1565);
    float _1576 = ((_1531 * cbLight._m0[_1525].z) * _1567) + ((_1542 * cbLight._m0[_1535].z) * _1565);
    uvec4 _1580 = floatBitsToUint(cbLight._m0[_1507 + 12u]);
    bool _1582 = _1580.x == 0u;
    float _1593;
    float _1595;
    float _1597;
    if (_1582)
    {
        _1593 = _1574;
        _1595 = _1575;
        _1597 = _1576;
    }
    else
    {
        uint _1601 = _1507 + 6u;
        float _1617 = (dot(vec3(cbLight._m0[_1507 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1618 = _1617 * _1617;
        float _3528 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1620 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _1593 = (((cbLight._m0[_1601].x * 0.3183098733425140380859375) * _1619) * _1620) + _1574;
        _1595 = (((cbLight._m0[_1601].y * 0.3183098733425140380859375) * _1619) * _1620) + _1575;
        _1597 = (((cbLight._m0[_1601].z * 0.3183098733425140380859375) * _1619) * _1620) + _1576;
    }
    bool _1600 = _1580.y == 0u;
    float _1638;
    float _1640;
    float _1642;
    if (_1600)
    {
        _1638 = _1593;
        _1640 = _1595;
        _1642 = _1597;
    }
    else
    {
        uint _1743 = _1507 + 7u;
        float _1759 = (dot(vec3(cbLight._m0[_1507 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1760 = _1759 * _1759;
        float _3544 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1762 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
        _1638 = (((cbLight._m0[_1743].x * 0.3183098733425140380859375) * _1761) * _1762) + _1593;
        _1640 = (((cbLight._m0[_1743].y * 0.3183098733425140380859375) * _1761) * _1762) + _1595;
        _1642 = (((cbLight._m0[_1743].z * 0.3183098733425140380859375) * _1761) * _1762) + _1597;
    }
    uint _1644 = _1507 + 8u;
    float _1650 = cbLight._m0[_1507].x + _378;
    float _1651 = cbLight._m0[_1507].y + _379;
    float _1652 = cbLight._m0[_1507].z + _380;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1660 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1507].xyz));
    float _3560 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _1664 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _1665 = dot(vec3(cbLight._m0[_1507].xyz), vec3(_1650 * _1656, _1651 * _1656, _1652 * _1656));
    float _3582 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1676 = (exp2(log2(1.0 - (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1682 = (0.5 / ((_1663 + 9.9999999392252902907785028219223e-09) + _1664)) * _1663;
    float _3593 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1684 = (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.31831014156341552734375;
    uint _1695 = _1507 + 9u;
    float _1701 = cbLight._m0[_1546].x + _378;
    float _1702 = cbLight._m0[_1546].y + _379;
    float _1703 = cbLight._m0[_1546].z + _380;
    float _1707 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
    float _1711 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1546].xyz));
    float _3604 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1546].xyz), vec3(_1701 * _1707, _1702 * _1707, _1703 * _1707));
    float _3615 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1724 = (exp2(log2(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1728 = (0.5 / ((_1714 + 9.9999999392252902907785028219223e-09) + _1664)) * _1714;
    float _3626 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1730 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * 0.31831014156341552734375;
    float _1740 = (((_1724 * cbLight._m0[_1695].x) * _1730) * _1531) + (((_1676 * cbLight._m0[_1644].x) * _1684) * _1542);
    float _1741 = (((_1724 * cbLight._m0[_1695].y) * _1730) * _1531) + (((_1676 * cbLight._m0[_1644].y) * _1684) * _1542);
    float _1742 = (((_1724 * cbLight._m0[_1695].z) * _1730) * _1531) + (((_1676 * cbLight._m0[_1644].z) * _1684) * _1542);
    float _1804;
    float _1806;
    float _1808;
    if (_1582)
    {
        _1804 = _1740;
        _1806 = _1741;
        _1808 = _1742;
    }
    else
    {
        uint _1810 = _1507 + 10u;
        uint _1816 = _1507 + 2u;
        float _1822 = cbLight._m0[_1816].x + _378;
        float _1823 = cbLight._m0[_1816].y + _379;
        float _1824 = cbLight._m0[_1816].z + _380;
        float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
        float _1832 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1816].xyz));
        float _3637 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1835 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1836 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1822 * _1828, _1823 * _1828, _1824 * _1828));
        float _3648 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = (exp2(log2(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1849 = (0.5 / ((_1835 + 9.9999999392252902907785028219223e-09) + _1664)) * _1835;
        float _3659 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1851 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.31831014156341552734375;
        float _1852 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _1804 = (((_1845 * cbLight._m0[_1810].x) * _1851) * _1852) + _1740;
        _1806 = (((_1845 * cbLight._m0[_1810].y) * _1851) * _1852) + _1741;
        _1808 = (((_1845 * cbLight._m0[_1810].z) * _1851) * _1852) + _1742;
    }
    float _1887;
    float _1889;
    float _1891;
    if (_1600)
    {
        _1887 = _1804;
        _1889 = _1806;
        _1891 = _1808;
    }
    else
    {
        uint _1898 = _1507 + 11u;
        uint _1904 = _1507 + 3u;
        float _1910 = cbLight._m0[_1904].x + _378;
        float _1911 = cbLight._m0[_1904].y + _379;
        float _1912 = cbLight._m0[_1904].z + _380;
        float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
        float _1920 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1904].xyz));
        float _3675 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1923 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1924 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_1910 * _1916, _1911 * _1916, _1912 * _1916));
        float _3686 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1933 = (exp2(log2(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1937 = (0.5 / ((_1923 + 9.9999999392252902907785028219223e-09) + _1664)) * _1923;
        float _3697 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1939 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.31831014156341552734375;
        float _1940 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
        _1887 = (((_1933 * cbLight._m0[_1898].x) * _1939) * _1940) + _1804;
        _1889 = (((_1933 * cbLight._m0[_1898].y) * _1939) * _1940) + _1806;
        _1891 = (((_1933 * cbLight._m0[_1898].z) * _1939) * _1940) + _1808;
    }
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    float _2085;
    if (_1505.y == 0u)
    {
        float _2015 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2016 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2015;
        float _2017 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2015;
        float _2018 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2015;
        uvec4 _2030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2031 = _2030.x;
        uint _2042 = uint((float(_2030.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2031))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2031)));
        float _2052 = (log2(_2018 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2053 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        uint _2056 = uint(isnan(14.0) ? _2053 : (isnan(_2053) ? 14.0 : min(_2053, 14.0)));
        uvec4 _2061 = texelFetch(g_lightClusterGridBuffer, int(((_2056 << 2u) + (_2042 << 6u)) >> 2u));
        uint _2062 = _2061.x;
        uint _2063 = _2030.z;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        if (((((1u << ((_2063 >> 4u) & 15u)) + 4294967295u) & _2062) == 0u) || ((_2063 & 240u) == 0u))
        {
            _2192 = 0.0;
            _2194 = 0.0;
            _2196 = 0.0;
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
        }
        else
        {
            float _2193;
            float _2195;
            float _2197;
            float _2199;
            float _2201;
            float _2203;
            float _2353 = 0.0;
            float _2354 = 0.0;
            float _2355 = 0.0;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            uint _2359 = 0u;
            uint _2368;
            bool _2369;
            for (;;)
            {
                _2368 = texelFetch(g_lightClassification, int((((_2056 << 5u) + (_2042 << 9u)) + (_2359 << 2u)) >> 2u)).x;
                _2369 = _2368 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2369)
                {
                    frontier_phi_66_pred = _2353;
                    frontier_phi_66_pred_1 = _2358;
                    frontier_phi_66_pred_2 = _2357;
                    frontier_phi_66_pred_3 = _2356;
                    frontier_phi_66_pred_4 = _2355;
                    frontier_phi_66_pred_5 = _2354;
                }
                else
                {
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    uint _2504;
                    _2498 = _2353;
                    _2499 = _2354;
                    _2500 = _2355;
                    _2501 = _2356;
                    _2502 = _2357;
                    _2503 = _2358;
                    _2504 = _2368;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    for (;;)
                    {
                        uint _2508 = uint(findLSB(_2504)) + (_2359 << 5u);
                        uint _2505 = (_2504 + 4294967295u) & _2504;
                        uint _2510 = _2508 * 48u;
                        vec4 _2524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2510)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 3u)).x));
                        uint _2530 = (_2508 * 48u) + 4u;
                        vec4 _2543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2530)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2530 + 3u)).x));
                        uint _2549 = (_2508 * 48u) + 8u;
                        vec3 _2560 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2549)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 2u)).x));
                        float _2564 = _2524.x - _2016;
                        float _2565 = _2524.y - _2017;
                        float _2566 = _2524.z - _2018;
                        float _2567 = dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566));
                        float _2570 = inversesqrt(_2567);
                        float _2579 = 1.0 - (_2567 * _2524.w);
                        float _3723 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _2580 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2581 = sqrt(_2567) * _2543.w;
                        float _2584 = 1.39999997615814208984375 / (_2581 + 1.39999997615814208984375);
                        float _2585 = _2584 * _2584;
                        float _2588 = ((1.0 - _2585) * dot(vec3(_420, _423, _426), vec3(_2570 * _2564, _2570 * _2565, _2570 * _2566))) + _2585;
                        float _2591 = _2581 * _2581;
                        float _2595 = ((isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0))) * _2580) / ((_2591 * 0.699999988079071044921875) + 1.0);
                        float _2599 = (-0.0) - _2016;
                        float _2600 = (-0.0) - _2017;
                        float _2601 = (-0.0) - _2018;
                        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
                        float _2609 = dot(vec3(_420, _423, _426), vec3(_2605 * _2599, _2605 * _2600, _2605 * _2601));
                        float _3739 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                        float _3750 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2613 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
                        float _2617 = (0.5 / (((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) + 9.9999999392252902907785028219223e-09) + _2613)) * _2613;
                        float _3761 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2626 = (((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 3.1415927410125732421875) / ((_2591 * 2.1991131305694580078125) + 3.141590118408203125)) * _2580;
                        _2428 = (_2595 * _2543.x) + _2501;
                        _2429 = (_2595 * _2543.y) + _2502;
                        _2430 = (_2595 * _2543.z) + _2503;
                        _2425 = (_2626 * _2560.x) + _2498;
                        _2426 = (_2626 * _2560.y) + _2499;
                        _2427 = (_2626 * _2560.z) + _2500;
                        if (_2505 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2498 = _2425;
                            _2499 = _2426;
                            _2500 = _2427;
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2505;
                        }
                    }
                    frontier_phi_66_pred = _2425;
                    frontier_phi_66_pred_1 = _2430;
                    frontier_phi_66_pred_2 = _2429;
                    frontier_phi_66_pred_3 = _2428;
                    frontier_phi_66_pred_4 = _2427;
                    frontier_phi_66_pred_5 = _2426;
                }
                _2193 = frontier_phi_66_pred;
                _2203 = frontier_phi_66_pred_1;
                _2201 = frontier_phi_66_pred_2;
                _2199 = frontier_phi_66_pred_3;
                _2197 = frontier_phi_66_pred_4;
                _2195 = frontier_phi_66_pred_5;
                uint _2360 = _2359 + 1u;
                if (_2360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2353 = _2193;
                    _2354 = _2195;
                    _2355 = _2197;
                    _2356 = _2199;
                    _2357 = _2201;
                    _2358 = _2203;
                    _2359 = _2360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2192 = _2193;
            _2194 = _2195;
            _2196 = _2197;
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
        }
        uvec4 _2206 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2207 = _2206.z;
        uint _2209 = (_2207 >> 8u) & 15u;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        if (((4294967295u << _2209) & _2062) == 0u)
        {
            _2324 = _2192;
            _2326 = _2194;
            _2328 = _2196;
            _2330 = _2198;
            _2332 = _2200;
            _2334 = _2202;
        }
        else
        {
            float _2349 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2209 < ((_2207 >> 12u) & 15u))
            {
                float _2325;
                float _2327;
                float _2329;
                float _2331;
                float _2333;
                float _2335;
                float _2481 = _2192;
                float _2482 = _2194;
                float _2483 = _2196;
                float _2484 = _2198;
                float _2485 = _2200;
                float _2486 = _2202;
                uint _2487 = _2209;
                uint _2496;
                bool _2497;
                for (;;)
                {
                    _2496 = texelFetch(g_lightClassification, int((((_2056 << 5u) + (_2042 << 9u)) + (_2487 << 2u)) >> 2u)).x;
                    _2497 = _2496 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2497)
                    {
                        frontier_phi_77_pred = _2486;
                        frontier_phi_77_pred_1 = _2485;
                        frontier_phi_77_pred_2 = _2484;
                        frontier_phi_77_pred_3 = _2483;
                        frontier_phi_77_pred_4 = _2482;
                        frontier_phi_77_pred_5 = _2481;
                    }
                    else
                    {
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2653 = _2481;
                        float _2654 = _2482;
                        float _2655 = _2483;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        uint _2659 = _2496;
                        uint _2660;
                        vec4 _2685;
                        float _2686;
                        vec4 _2701;
                        vec3 _2713;
                        vec4 _2728;
                        vec4 _2744;
                        float _2791;
                        bool _2792;
                        for (;;)
                        {
                            uint _2670 = ((_2487 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2659));
                            _2660 = (_2659 + 4294967295u) & _2659;
                            uint _2672 = _2670 * 40u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            _2686 = _2685.w;
                            uint _2688 = (_2670 * 40u) + 4u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            uint _2703 = (_2670 * 40u) + 8u;
                            _2713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2703 + 2u)).x));
                            uint _2715 = (_2670 * 40u) + 16u;
                            _2728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 3u)).x));
                            uint _2731 = (_2670 * 40u) + 20u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            uint _2747 = (_2670 * 40u) + 24u;
                            vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2766 = (_2670 * 40u) + 28u;
                            vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            _2791 = fma(_2018, _2779.z, fma(_2017, _2779.y, _2779.x * _2016)) + _2779.w;
                            _2792 = !((fma(_2018, _2760.z, fma(_2017, _2760.y, _2760.x * _2016)) + _2760.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2792)
                            {
                                float _2819 = _2685.x - _2016;
                                float _2820 = _2685.y - _2017;
                                float _2821 = _2685.z - _2018;
                                float _2822 = dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821));
                                float _2825 = inversesqrt(_2822);
                                float _2826 = _2825 * _2819;
                                float _2827 = _2825 * _2820;
                                float _2828 = _2825 * _2821;
                                float _2832 = 1.0 - (_2822 / (_2686 * _2686));
                                float _3772 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
                                float _2837 = sqrt(_2822) * _2701.w;
                                float _2839 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                                float _2840 = _2839 * _2839;
                                float _2841 = 1.0 - _2840;
                                float _2843 = (_2841 * dot(vec3(_2826, _2827, _2828), vec3(_420, _423, _426))) + _2840;
                                float _2846 = _2837 * _2837;
                                float _2850 = (fma(_2018, _2728.z, fma(_2017, _2728.y, _2728.x * _2016)) + _2728.w) / _2791;
                                float _2851 = (fma(_2018, _2744.z, fma(_2017, _2744.y, _2744.x * _2016)) + _2744.w) / _2791;
                                float _2855 = 1.0 - dot(vec2(_2850, _2851), vec2(_2850, _2851));
                                float _3788 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2856 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2857 = _2856 * (((isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))) * _2833) / ((_2846 * 0.699999988079071044921875) + 1.0));
                                float _2867 = dot(vec3(_420, _423, _426), vec3((-0.0) - (_2016 * _2349), (-0.0) - (_2017 * _2349), (-0.0) - (_2018 * _2349)));
                                float _3799 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2875 = (_2841 * dot(vec3(_420, _423, _426), vec3(_2826, _2827, _2828))) + _2840;
                                float _3810 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                                float _2880 = (0.5 / (((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) + 9.9999999392252902907785028219223e-09) + _2876)) * _2876;
                                float _3821 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2887 = (_2856 * _2833) * (((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 3.1415927410125732421875) / ((_2846 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2857 * _2701.y;
                                frontier_phi_83_pred_1 = _2857 * _2701.x;
                                frontier_phi_83_pred_2 = _2887 * _2713.z;
                                frontier_phi_83_pred_3 = _2887 * _2713.y;
                                frontier_phi_83_pred_4 = _2887 * _2713.x;
                                frontier_phi_83_pred_5 = _2857 * _2701.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2895 = frontier_phi_83_pred;
                            _2894 = frontier_phi_83_pred_1;
                            _2893 = frontier_phi_83_pred_2;
                            _2892 = frontier_phi_83_pred_3;
                            _2891 = frontier_phi_83_pred_4;
                            _2896 = frontier_phi_83_pred_5;
                            _2643 = _2894 + _2656;
                            _2644 = _2895 + _2657;
                            _2645 = _2896 + _2658;
                            _2640 = _2891 + _2653;
                            _2641 = _2892 + _2654;
                            _2642 = _2893 + _2655;
                            if (_2660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2653 = _2640;
                                _2654 = _2641;
                                _2655 = _2642;
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2660;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2645;
                        frontier_phi_77_pred_1 = _2644;
                        frontier_phi_77_pred_2 = _2643;
                        frontier_phi_77_pred_3 = _2642;
                        frontier_phi_77_pred_4 = _2641;
                        frontier_phi_77_pred_5 = _2640;
                    }
                    _2335 = frontier_phi_77_pred;
                    _2333 = frontier_phi_77_pred_1;
                    _2331 = frontier_phi_77_pred_2;
                    _2329 = frontier_phi_77_pred_3;
                    _2327 = frontier_phi_77_pred_4;
                    _2325 = frontier_phi_77_pred_5;
                    uint _2488 = _2487 + 1u;
                    if (_2488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2481 = _2325;
                        _2482 = _2327;
                        _2483 = _2329;
                        _2484 = _2331;
                        _2485 = _2333;
                        _2486 = _2335;
                        _2487 = _2488;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2329;
                frontier_phi_58_59_ladder_1 = _2335;
                frontier_phi_58_59_ladder_2 = _2333;
                frontier_phi_58_59_ladder_3 = _2331;
                frontier_phi_58_59_ladder_4 = _2327;
                frontier_phi_58_59_ladder_5 = _2325;
            }
            else
            {
                frontier_phi_58_59_ladder = _2196;
                frontier_phi_58_59_ladder_1 = _2202;
                frontier_phi_58_59_ladder_2 = _2200;
                frontier_phi_58_59_ladder_3 = _2198;
                frontier_phi_58_59_ladder_4 = _2194;
                frontier_phi_58_59_ladder_5 = _2192;
            }
            _2324 = frontier_phi_58_59_ladder_5;
            _2326 = frontier_phi_58_59_ladder_4;
            _2328 = frontier_phi_58_59_ladder;
            _2330 = frontier_phi_58_59_ladder_3;
            _2332 = frontier_phi_58_59_ladder_2;
            _2334 = frontier_phi_58_59_ladder_1;
        }
        float _2339 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
        _2075 = (_2339 * _2330) + _1638;
        _2077 = (_2339 * _2332) + _1640;
        _2079 = (_2339 * _2334) + _1642;
        _2081 = ((_2324 * 0.039999999105930328369140625) * _2339) + _1887;
        _2083 = ((_2326 * 0.039999999105930328369140625) * _2339) + _1889;
        _2085 = ((_2328 * 0.039999999105930328369140625) * _2339) + _1891;
    }
    else
    {
        _2075 = _1638;
        _2077 = _1640;
        _2079 = _1642;
        _2081 = _1887;
        _2083 = _1889;
        _2085 = _1891;
    }
    uint _2091 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _2097 = cbInstanceData._m0[_2091].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _280.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _251.x));
    float _2098 = cbInstanceData._m0[_2091].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _280.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _251.y));
    float _2099 = cbInstanceData._m0[_2091].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _280.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _251.z));
    float _3837 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3848 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3859 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2116 = (((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_2075 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _464))) + ((_2081 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1275)) * cbPerFrame._m0[3u].x)) + _2097;
    float _2118 = (_2098 + ((_2083 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1275)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_2077 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _464)));
    float _2120 = (_2099 + ((_2085 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1275)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_2079 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _464)));
    float _2121 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2122 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2123 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2129 = cbMtdParam._m0[2u].x * _2097;
    float _2130 = cbMtdParam._m0[2u].y * _2098;
    float _2131 = cbMtdParam._m0[2u].z * _2099;
    float _3885 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2133 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    uint _2134 = _439 + 6u;
    float _2142 = _399 / cbSceneParam._m0[86u].x;
    float _2143 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2157 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2142, _2143, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2159 = _2157.x;
    float _2160 = _2157.y;
    float _2161 = _2157.z;
    float _2162 = _2157.w;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2217 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2218 = _2217 / _320;
        float _2229 = _2218 * _371;
        float _2230 = _372 * _2218;
        float _2231 = (-0.0) - _2230;
        float _2233 = _2218 * _373;
        float _2235 = (cbSceneParam._m0[77u].w * _2231) / _2217;
        float _2236 = _2235 + cbSceneParam._m0[79u].w;
        float _2237 = cbSceneParam._m0[79u].w - _2230;
        float _2243 = sqrt(((_2229 * _2229) + (_2230 * _2230)) + (_2233 * _2233));
        float _2246 = (1.0 - (cbSceneParam._m0[77u].w / _2217)) * _2243;
        float _2251 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2253 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2438;
        if (abs((_2231 - _2235) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2438 = ((((_2236 > 0.0) ? exp2(_2251 * _2236) : (2.0 - exp2(_2253 * _2236))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2246;
        }
        else
        {
            float _2382 = 1.0 / cbSceneParam._m0[80u].x;
            float _2383 = isnan(_2237) ? _2236 : (isnan(_2236) ? _2237 : max(_2236, _2237));
            float _2384 = isnan(_2237) ? _2236 : (isnan(_2236) ? _2237 : min(_2236, _2237));
            float _2393 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : min(_2383, 0.0));
            float _2394 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : min(_2384, 0.0));
            _2438 = ((abs(_2243 / _2231) * cbSceneParam._m0[80u].y) * ((((_2393 - _2394) * 2.0) - ((exp2(_2251 * (isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0)))) - exp2(_2251 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0))))) * _2382)) - ((exp2(_2253 * _2393) - exp2(_2253 * _2394)) * _2382))) + (_2246 * cbSceneParam._m0[80u].z);
        }
        vec4 _2440 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2142, _2143, 1.0), 0.0);
        float _2449 = exp2((_2438 * (-1.44269502162933349609375)) * (1.0 - _2440.w));
        float _2450 = log2(_2449);
        float _2466 = log2(_2162);
        _2255 = (exp2(_2466 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].x)) * _2440.x) / cbSceneParam._m0[78u].x)) + _2159;
        _2257 = (exp2(_2466 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].y)) * _2440.y) / cbSceneParam._m0[78u].y)) + _2160;
        _2259 = (exp2(_2466 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2450 * cbSceneParam._m0[78u].z)) * _2440.z) / cbSceneParam._m0[78u].z)) + _2161;
        _2261 = _2449 * _2162;
    }
    else
    {
        _2255 = _2159;
        _2257 = _2160;
        _2259 = _2161;
        _2261 = _2162;
    }
    bool _2476;
    vec4 _2271;
    vec4 _2294;
    float _2296;
    float _2300;
    float _2301;
    float _2302;
    float _2305;
    float _2308;
    float _2311;
    float _2312;
    bool _2323;
    for (;;)
    {
        _2271 = cbMatDynParam._m0[0u];
        float _2273 = roundEven(_2271.y);
        bool _2274 = _2273 == 3.0;
        float _2276 = log2(_2261);
        float _2280 = exp2(_2276 * cbSceneParam._m0[78u].x);
        float _2281 = exp2(_2276 * cbSceneParam._m0[78u].y);
        float _2282 = exp2(_2276 * cbSceneParam._m0[78u].z);
        float _2283 = _2280 * _2121;
        float _2284 = _2281 * _2122;
        float _2285 = _2282 * _2123;
        float _2292 = _387 + (-0.5);
        _2294 = cbMtdParam._m0[1u];
        _2296 = _2294.y * _2292;
        float _2299 = (_2273 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2300 = _2299 * (_2274 ? _2283 : (_2283 + (cbSceneParam._m0[72u].w * _2255)));
        _2301 = _2299 * (_2274 ? _2284 : (_2284 + (cbSceneParam._m0[72u].w * _2257)));
        _2302 = _2299 * (_2274 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2259)));
        _2305 = ((_2129 * _2133) * _2280) * _2299;
        _2308 = ((_2130 * _2133) * _2281) * _2299;
        _2311 = ((_2131 * _2133) * _2282) * _2299;
        _2312 = _2292 * 0.999000012874603271484375;
        _2323 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2323)
        {
            if ((cbInstanceData._m0[_439 + 7u].x + _2312) < 0.5)
            {
                _2476 = true;
                break;
            }
        }
        uint _2417 = _440 + uint(_2271.w);
        if ((cbInstanceData._m0[_2417].w < 1.0) && ((cbInstanceData._m0[_2417].w + _2312) < 0.5))
        {
            _2476 = true;
            break;
        }
        if ((_2296 + 1.0) < _2294.x)
        {
            _2476 = true;
            break;
        }
        _2476 = false;
        break;
    }
    float _2631;
    if (_2476)
    {
        discard_state = true;
        _2631 = 0.0;
    }
    else
    {
        _2631 = cbInstanceData._m0[_2134].w;
    }
    SV_Target.x = _2300;
    SV_Target.y = _2301;
    SV_Target.z = _2302;
    SV_Target.w = _2631;
    SV_Target_1.x = _2305;
    SV_Target_1.y = _2308;
    SV_Target_1.z = _2311;
    SV_Target_1.w = cbInstanceData._m0[_2134].w;
    discard_exit();
}


