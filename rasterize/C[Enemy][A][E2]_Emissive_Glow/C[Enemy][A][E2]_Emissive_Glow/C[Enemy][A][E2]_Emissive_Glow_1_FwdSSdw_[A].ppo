#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _866;
float _3087;
float _3088;
float _3089;
float _3090;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _178 = _177 * NORMAL.x;
    float _179 = _177 * NORMAL.y;
    float _180 = _177 * NORMAL.z;
    vec4 _199 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _225 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _233 = (_225.x * cbMtdParam._m0[12u].x) + (_199.x * cbMtdParam._m0[9u].x);
    float _234 = (_225.y * cbMtdParam._m0[12u].y) + (_199.y * cbMtdParam._m0[9u].y);
    float _235 = (_225.z * cbMtdParam._m0[12u].z) + (_199.z * cbMtdParam._m0[9u].z);
    vec4 _257 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _286 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _311 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3099 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _313 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
    float _321 = (((_313 * _313) * (3.0 - (_313 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _328 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _329 = _328 * _178;
    float _330 = _328 * _179;
    float _331 = _328 * _180;
    float _3110 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3121 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3132 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _350 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _401 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _391);
    float _402 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _391);
    float _403 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _391);
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _408 = _401 * _407;
    float _409 = _402 * _407;
    float _410 = _403 * _407;
    vec4 _415 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _417 = _415.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _545 = sqrt(((_401 * _401) + (_402 * _402)) + (_403 * _403));
        float _551 = (cbMatDynParam._m0[5u].x * _545) + cbMatDynParam._m0[5u].y;
        float _3143 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _552 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _556 = (cbMatDynParam._m0[5u].z * _545) + cbMatDynParam._m0[5u].w;
        float _3154 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) - _552)) + _552) < ((_417 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _429 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _430 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _450 = fma(_331, cbSceneParam._m0[5u].z, fma(_330, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _329));
    float _453 = fma(_331, cbSceneParam._m0[6u].z, fma(_330, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _329));
    float _456 = fma(_331, cbSceneParam._m0[7u].z, fma(_330, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _329));
    uint _469 = uint(roundEven(NORMAL.w)) * 13u;
    uint _470 = _469 + 9u;
    uint _471 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3165 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
    float _3176 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
    float _3187 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _429, cbSceneParam._m0[86u].y * _430));
    float _494 = _491.x * TEXCOORD_4;
    float _495 = dot(vec3(_329, _330, _331), vec3(_408, _409, _410));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _329) - _408;
    float _503 = (_498 * _330) - _409;
    float _504 = (_498 * _331) - _410;
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _865;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _590 = fma(_534, cbModelParam._m0[26u].z, fma(_530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526));
        float _594 = fma(_534, cbModelParam._m0[27u].z, fma(_530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526));
        float _598 = fma(_534, cbModelParam._m0[28u].z, fma(_530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526));
        float _623 = _526 + _329;
        float _624 = _530 + _330;
        float _625 = _534 + _331;
        float _635 = fma(_625, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623)) - _590;
        float _636 = fma(_625, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623)) - _594;
        float _637 = fma(_625, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623)) - _598;
        float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
        float _654 = ((_641 * _635) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_590 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_641 * _636) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_594 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_641 * _637) / cbModelParam._m0[34u].z) + ((((((_598 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_659.x + (-0.5));
        float _695 = _693 * (_659.y + (-0.5));
        float _696 = _693 * (_659.z + (-0.5));
        float _703 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_666.x + (-0.5));
        float _705 = _703 * (_666.y + (-0.5));
        float _706 = _703 * (_666.z + (-0.5));
        float _713 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_673.x + (-0.5));
        float _715 = _713 * (_673.y + (-0.5));
        float _716 = _713 * (_673.z + (-0.5));
        float _723 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_680.x + (-0.5));
        float _725 = _723 * (_680.y + (-0.5));
        float _726 = _723 * (_680.z + (-0.5));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = _694 * 0.5;
        float _731 = _704 * 0.5;
        float _732 = _714 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _747 = (dot(vec3(_329, _330, _331), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _757 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3235 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_759 + 1.0))) + _764) * _727;
        float _774 = _695 * 0.5;
        float _775 = _705 * 0.5;
        float _776 = _715 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_329, _330, _331), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3246 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3257 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3268 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_801 + 1.0))) + _806) * _728;
        float _816 = _696 * 0.5;
        float _817 = _706 * 0.5;
        float _818 = _716 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_329, _330, _331), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3279 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3290 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3301 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * (_843 + 1.0))) + _848) * _729;
        _865 = _696;
        _867 = _695;
        _868 = _694;
        _869 = _706;
        _870 = _705;
        _871 = _704;
        _872 = _716;
        _873 = _715;
        _874 = _714;
        _875 = _729;
        _876 = _728;
        _877 = _727;
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
    }
    else
    {
        _865 = _866;
        _867 = _866;
        _868 = _866;
        _869 = _866;
        _870 = _866;
        _871 = _866;
        _872 = _866;
        _873 = _866;
        _874 = _866;
        _875 = _866;
        _876 = _866;
        _877 = _866;
        _878 = 0.0;
        _879 = 0.0;
        _880 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_534, cbModelParam._m0[30u].z, fma(_530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _526));
        float _913 = fma(_534, cbModelParam._m0[31u].z, fma(_530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _526));
        float _917 = fma(_534, cbModelParam._m0[32u].z, fma(_530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _526));
        float _940 = _526 + _329;
        float _941 = _530 + _330;
        float _942 = _534 + _331;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_329, _330, _331), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3364 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_329, _330, _331), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3397 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_329, _330, _331), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3430 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _866;
        _1179 = _866;
        _1180 = _866;
        _1181 = _866;
        _1182 = _866;
        _1183 = _866;
        _1184 = _866;
        _1185 = _866;
        _1186 = _866;
        _1187 = _866;
        _1188 = _866;
        _1189 = _866;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _879)) + _879;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _502 * 0.5;
    float _1247 = _503 * 0.5;
    float _1248 = _504 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_865, _869, _872, _875));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_867, _870, _873, _876));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _871, _874, _877));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1313 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1394;
    float _1396;
    float _1398;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1361 = fma(_534, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526)) + cbModelParam._m0[13u].w;
        float _1365 = fma(_534, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526)) + cbModelParam._m0[14u].w;
        float _1369 = fma(_534, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526)) + cbModelParam._m0[15u].w;
        float _1372 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1375 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1378 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1404;
        if (_1372 > 0.0)
        {
            _1404 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1404 = frontier_phi_17_15_ladder;
        }
        float _1630;
        if (_1375 > 0.0)
        {
            _1630 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1630 = frontier_phi_26_22_ladder;
        }
        float _1822;
        if (_1378 > 0.0)
        {
            _1822 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1822 = frontier_phi_38_33_ladder;
        }
        float _1824 = isnan(_1630) ? _1404 : (isnan(_1404) ? _1630 : min(_1404, _1630));
        float _1825 = isnan(_1822) ? _1824 : (isnan(_1824) ? _1822 : min(_1824, _1822));
        float _1829 = (_1825 * _1372) + _1361;
        float _1830 = (_1825 * _1375) + _1365;
        float _1831 = (_1825 * _1378) + _1369;
        float _1832 = _1825 * 9.9999997473787516355514526367188e-05;
        float _1834 = (-1.0) - _1832;
        float _1836 = _1832 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1831 > _1836) || ((_1831 < _1834) || ((_1830 > _1836) || ((_1830 < _1834) || ((_1829 < _1834) || (_1829 > _1836))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1831, cbModelParam._m0[9u].z, fma(_1830, cbModelParam._m0[9u].y, _1829 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1831, cbModelParam._m0[10u].z, fma(_1830, cbModelParam._m0[10u].y, _1829 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1831, cbModelParam._m0[11u].z, fma(_1830, cbModelParam._m0[11u].y, _1829 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_16_38_ladder = _1928.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1928.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1928.x * cbModelParam._m0[1u].y;
        }
        _1394 = frontier_phi_16_38_ladder_2;
        _1396 = frontier_phi_16_38_ladder_1;
        _1398 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1313);
        _1394 = _1382.x * cbModelParam._m0[1u].y;
        _1396 = _1382.y * cbModelParam._m0[1u].y;
        _1398 = _1382.z * cbModelParam._m0[1u].y;
    }
    float _1401 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_534, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_534, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_534, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1471 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1474 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1635;
        if (_1468 > 0.0)
        {
            _1635 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1635 = frontier_phi_28_24_ladder;
        }
        float _1849;
        if (_1471 > 0.0)
        {
            _1849 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1849 = frontier_phi_40_35_ladder;
        }
        float _2000;
        if (_1474 > 0.0)
        {
            _2000 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2000 = frontier_phi_49_46_ladder;
        }
        float _2002 = isnan(_1849) ? _1635 : (isnan(_1635) ? _1849 : min(_1635, _1849));
        float _2003 = isnan(_2000) ? _2002 : (isnan(_2002) ? _2000 : min(_2002, _2000));
        float _2007 = (_2003 * _1468) + _1457;
        float _2008 = (_2003 * _1471) + _1461;
        float _2009 = (_2003 * _1474) + _1465;
        float _2010 = _2003 * 9.9999997473787516355514526367188e-05;
        float _2011 = (-1.0) - _2010;
        float _2013 = _2010 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2009 > _2013) || ((_2009 < _2011) || ((_2008 > _2013) || ((_2008 < _2011) || ((_2007 < _2011) || (_2007 > _2013))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2009, cbModelParam._m0[17u].z, fma(_2008, cbModelParam._m0[17u].y, _2007 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2009, cbModelParam._m0[18u].z, fma(_2008, cbModelParam._m0[18u].y, _2007 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2009, cbModelParam._m0[19u].z, fma(_2008, cbModelParam._m0[19u].y, _2007 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_25_49_ladder = _2237.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2237.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2237.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_25_49_ladder_2;
        _1495 = frontier_phi_25_49_ladder_1;
        _1497 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1401);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1509 = _494 * 0.01200000010430812835693359375;
    float _1511 = _1509 * ((cbModelParam._m0[1u].w * (_1493 - _1394)) + _1394);
    float _1512 = _1509 * ((cbModelParam._m0[1u].w * (_1495 - _1396)) + _1396);
    float _1513 = _1509 * ((cbModelParam._m0[1u].w * (_1497 - _1398)) + _1398);
    float _1516 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1511 * cbSceneParam._m0[91u].x));
    vec4 _1530 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_429, _430));
    float _1532 = _1530.w;
    float _1544 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1532);
    float _1545 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1532);
    float _1546 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1532);
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_469 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _494 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1589 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1593 = _1552 | 1u;
    float _1604 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_329, _330, _331));
    float _1607 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_329, _330, _331));
    float _3566 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _3577 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1612 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.3183098733425140380859375;
    float _1614 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.3183098733425140380859375;
    float _1621 = ((cbLight._m0[_1569].x * _1575) * _1614) + (((cbLight._m0[_1579].x * _1544) * _1589) * _1612);
    float _1622 = ((_1575 * cbLight._m0[_1569].y) * _1614) + (((cbLight._m0[_1579].y * _1545) * _1589) * _1612);
    float _1623 = ((_1575 * cbLight._m0[_1569].z) * _1614) + (((cbLight._m0[_1579].z * _1546) * _1589) * _1612);
    uvec4 _1627 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1629 = _1627.x == 0u;
    float _1640;
    float _1642;
    float _1644;
    if (_1629)
    {
        _1640 = _1621;
        _1642 = _1622;
        _1644 = _1623;
    }
    else
    {
        uint _1648 = _1552 + 6u;
        float _1664 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_329, _330, _331)) * 0.5) + 0.5;
        float _1665 = _1664 * _1664;
        float _3588 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1667 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1640 = (((cbLight._m0[_1648].x * 0.3183098733425140380859375) * _1666) * _1667) + _1621;
        _1642 = (((cbLight._m0[_1648].y * 0.3183098733425140380859375) * _1666) * _1667) + _1622;
        _1644 = (((cbLight._m0[_1648].z * 0.3183098733425140380859375) * _1666) * _1667) + _1623;
    }
    bool _1647 = _1627.y == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1647)
    {
        _1685 = _1640;
        _1687 = _1642;
        _1689 = _1644;
    }
    else
    {
        uint _1793 = _1552 + 7u;
        float _1809 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_329, _330, _331)) * 0.5) + 0.5;
        float _1810 = _1809 * _1809;
        float _3604 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1812 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1685 = (((cbLight._m0[_1793].x * 0.3183098733425140380859375) * _1811) * _1812) + _1640;
        _1687 = (((cbLight._m0[_1793].y * 0.3183098733425140380859375) * _1811) * _1812) + _1642;
        _1689 = (((cbLight._m0[_1793].z * 0.3183098733425140380859375) * _1811) * _1812) + _1644;
    }
    uint _1691 = _1552 + 8u;
    float _1697 = cbLight._m0[_1552].x + _408;
    float _1698 = cbLight._m0[_1552].y + _409;
    float _1699 = cbLight._m0[_1552].z + _410;
    float _1703 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
    float _1707 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1552].xyz));
    float _3620 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _1711 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _1712 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1697 * _1703, _1698 * _1703, _1699 * _1703));
    float _3642 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1723 = (exp2(log2(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1729 = (0.5 / ((_1710 + 9.9999999392252902907785028219223e-09) + _1711)) * _1710;
    float _3653 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1731 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.31831014156341552734375;
    uint _1745 = _1552 + 9u;
    float _1751 = cbLight._m0[_1593].x + _408;
    float _1752 = cbLight._m0[_1593].y + _409;
    float _1753 = cbLight._m0[_1593].z + _410;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1761 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1593].xyz));
    float _3664 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1751 * _1757, _1752 * _1757, _1753 * _1757));
    float _3675 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1774 = (exp2(log2(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1778 = (0.5 / ((_1764 + 9.9999999392252902907785028219223e-09) + _1711)) * _1764;
    float _3686 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1780 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.31831014156341552734375;
    float _1790 = (((_1774 * cbLight._m0[_1745].x) * _1780) * _1575) + ((((cbLight._m0[_1691].x * _1544) * _1723) * _1731) * _1589);
    float _1791 = (((_1774 * cbLight._m0[_1745].y) * _1780) * _1575) + ((((cbLight._m0[_1691].y * _1545) * _1723) * _1731) * _1589);
    float _1792 = (((_1774 * cbLight._m0[_1745].z) * _1780) * _1575) + ((((cbLight._m0[_1691].z * _1546) * _1723) * _1731) * _1589);
    float _1854;
    float _1856;
    float _1858;
    if (_1629)
    {
        _1854 = _1790;
        _1856 = _1791;
        _1858 = _1792;
    }
    else
    {
        uint _1860 = _1552 + 10u;
        uint _1866 = _1552 + 2u;
        float _1872 = cbLight._m0[_1866].x + _408;
        float _1873 = cbLight._m0[_1866].y + _409;
        float _1874 = cbLight._m0[_1866].z + _410;
        float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
        float _1882 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1866].xyz));
        float _3697 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1885 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1886 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_1872 * _1878, _1873 * _1878, _1874 * _1878));
        float _3708 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1895 = (exp2(log2(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1899 = (0.5 / ((_1885 + 9.9999999392252902907785028219223e-09) + _1711)) * _1885;
        float _3719 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1901 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.31831014156341552734375;
        float _1902 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1854 = (((_1895 * cbLight._m0[_1860].x) * _1901) * _1902) + _1790;
        _1856 = (((_1895 * cbLight._m0[_1860].y) * _1901) * _1902) + _1791;
        _1858 = (((_1895 * cbLight._m0[_1860].z) * _1901) * _1902) + _1792;
    }
    float _1937;
    float _1939;
    float _1941;
    if (_1647)
    {
        _1937 = _1854;
        _1939 = _1856;
        _1941 = _1858;
    }
    else
    {
        uint _1948 = _1552 + 11u;
        uint _1954 = _1552 + 3u;
        float _1960 = cbLight._m0[_1954].x + _408;
        float _1961 = cbLight._m0[_1954].y + _409;
        float _1962 = cbLight._m0[_1954].z + _410;
        float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
        float _1970 = dot(vec3(_329, _330, _331), vec3(cbLight._m0[_1954].xyz));
        float _3735 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1973 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1974 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_1960 * _1966, _1961 * _1966, _1962 * _1966));
        float _3746 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1983 = (exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1987 = (0.5 / ((_1973 + 9.9999999392252902907785028219223e-09) + _1711)) * _1973;
        float _3757 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1989 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.31831014156341552734375;
        float _1990 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1937 = (((_1983 * cbLight._m0[_1948].x) * _1989) * _1990) + _1854;
        _1939 = (((_1983 * cbLight._m0[_1948].y) * _1989) * _1990) + _1856;
        _1941 = (((_1983 * cbLight._m0[_1948].z) * _1989) * _1990) + _1858;
    }
    float _2125;
    float _2127;
    float _2129;
    float _2131;
    float _2133;
    float _2135;
    if (_1550.y == 0u)
    {
        float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2066 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2065;
        float _2067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2065;
        float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2065;
        uvec4 _2080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2081 = _2080.x;
        uint _2092 = uint((float(_2080.y) * floor(float(uint(cbSceneParam._m0[85u].y * _430) / _2081))) + floor(float(uint(cbSceneParam._m0[85u].x * _429) / _2081)));
        float _2102 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2103 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        uint _2106 = uint(isnan(14.0) ? _2103 : (isnan(_2103) ? 14.0 : min(_2103, 14.0)));
        uvec4 _2111 = texelFetch(g_lightClusterGridBuffer, int(((_2106 << 2u) + (_2092 << 6u)) >> 2u));
        uint _2112 = _2111.x;
        uint _2113 = _2080.z;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        if (((((1u << ((_2113 >> 4u) & 15u)) + 4294967295u) & _2112) == 0u) || ((_2113 & 240u) == 0u))
        {
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
            _2250 = 0.0;
            _2252 = 0.0;
        }
        else
        {
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2251;
            float _2253;
            float _2402 = 0.0;
            float _2403 = 0.0;
            float _2404 = 0.0;
            float _2405 = 0.0;
            float _2406 = 0.0;
            float _2407 = 0.0;
            uint _2408 = 0u;
            uint _2417;
            bool _2418;
            for (;;)
            {
                _2417 = texelFetch(g_lightClassification, int((((_2106 << 5u) + (_2092 << 9u)) + (_2408 << 2u)) >> 2u)).x;
                _2418 = _2417 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2418)
                {
                    frontier_phi_66_pred = _2402;
                    frontier_phi_66_pred_1 = _2407;
                    frontier_phi_66_pred_2 = _2406;
                    frontier_phi_66_pred_3 = _2405;
                    frontier_phi_66_pred_4 = _2404;
                    frontier_phi_66_pred_5 = _2403;
                }
                else
                {
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    uint _2553;
                    _2547 = _2402;
                    _2548 = _2403;
                    _2549 = _2404;
                    _2550 = _2405;
                    _2551 = _2406;
                    _2552 = _2407;
                    _2553 = _2417;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    for (;;)
                    {
                        uint _2557 = uint(findLSB(_2553)) + (_2408 << 5u);
                        uint _2554 = (_2553 + 4294967295u) & _2553;
                        uint _2559 = _2557 * 48u;
                        vec4 _2573 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2559)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 3u)).x));
                        uint _2579 = (_2557 * 48u) + 4u;
                        vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 3u)).x));
                        uint _2598 = (_2557 * 48u) + 8u;
                        vec3 _2609 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x));
                        float _2613 = _2573.x - _2066;
                        float _2614 = _2573.y - _2067;
                        float _2615 = _2573.z - _2068;
                        float _2616 = dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615));
                        float _2619 = inversesqrt(_2616);
                        float _2628 = 1.0 - (_2616 * _2573.w);
                        float _3783 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                        float _2629 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                        float _2630 = sqrt(_2616) * _2592.w;
                        float _2633 = 1.39999997615814208984375 / (_2630 + 1.39999997615814208984375);
                        float _2634 = _2633 * _2633;
                        float _2637 = ((1.0 - _2634) * dot(vec3(_450, _453, _456), vec3(_2619 * _2613, _2619 * _2614, _2619 * _2615))) + _2634;
                        float _2640 = _2630 * _2630;
                        float _2644 = ((isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))) * _2629) / ((_2640 * 0.699999988079071044921875) + 1.0);
                        float _2648 = (-0.0) - _2066;
                        float _2649 = (-0.0) - _2067;
                        float _2650 = (-0.0) - _2068;
                        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
                        float _2658 = dot(vec3(_450, _453, _456), vec3(_2654 * _2648, _2654 * _2649, _2654 * _2650));
                        float _3799 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _3810 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                        float _2662 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                        float _2666 = (0.5 / (((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) + 9.9999999392252902907785028219223e-09) + _2662)) * _2662;
                        float _3821 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2675 = (((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 3.1415927410125732421875) / ((_2640 * 2.1991131305694580078125) + 3.141590118408203125)) * _2629;
                        _2477 = (_2644 * _2592.x) + _2550;
                        _2478 = (_2644 * _2592.y) + _2551;
                        _2479 = (_2644 * _2592.z) + _2552;
                        _2474 = (_2675 * _2609.x) + _2547;
                        _2475 = (_2675 * _2609.y) + _2548;
                        _2476 = (_2675 * _2609.z) + _2549;
                        if (_2554 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2547 = _2474;
                            _2548 = _2475;
                            _2549 = _2476;
                            _2550 = _2477;
                            _2551 = _2478;
                            _2552 = _2479;
                            _2553 = _2554;
                        }
                    }
                    frontier_phi_66_pred = _2474;
                    frontier_phi_66_pred_1 = _2479;
                    frontier_phi_66_pred_2 = _2478;
                    frontier_phi_66_pred_3 = _2477;
                    frontier_phi_66_pred_4 = _2476;
                    frontier_phi_66_pred_5 = _2475;
                }
                _2243 = frontier_phi_66_pred;
                _2253 = frontier_phi_66_pred_1;
                _2251 = frontier_phi_66_pred_2;
                _2249 = frontier_phi_66_pred_3;
                _2247 = frontier_phi_66_pred_4;
                _2245 = frontier_phi_66_pred_5;
                uint _2409 = _2408 + 1u;
                if (_2409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2402 = _2243;
                    _2403 = _2245;
                    _2404 = _2247;
                    _2405 = _2249;
                    _2406 = _2251;
                    _2407 = _2253;
                    _2408 = _2409;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
            _2250 = _2251;
            _2252 = _2253;
        }
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.z;
        uint _2259 = (_2257 >> 8u) & 15u;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        if (((4294967295u << _2259) & _2112) == 0u)
        {
            _2373 = _2242;
            _2375 = _2244;
            _2377 = _2246;
            _2379 = _2248;
            _2381 = _2250;
            _2383 = _2252;
        }
        else
        {
            float _2398 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2259 < ((_2257 >> 12u) & 15u))
            {
                float _2374;
                float _2376;
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2530 = _2242;
                float _2531 = _2244;
                float _2532 = _2246;
                float _2533 = _2248;
                float _2534 = _2250;
                float _2535 = _2252;
                uint _2536 = _2259;
                uint _2545;
                bool _2546;
                for (;;)
                {
                    _2545 = texelFetch(g_lightClassification, int((((_2106 << 5u) + (_2092 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                    _2546 = _2545 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2546)
                    {
                        frontier_phi_77_pred = _2535;
                        frontier_phi_77_pred_1 = _2534;
                        frontier_phi_77_pred_2 = _2533;
                        frontier_phi_77_pred_3 = _2532;
                        frontier_phi_77_pred_4 = _2531;
                        frontier_phi_77_pred_5 = _2530;
                    }
                    else
                    {
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2702 = _2530;
                        float _2703 = _2531;
                        float _2704 = _2532;
                        float _2705 = _2533;
                        float _2706 = _2534;
                        float _2707 = _2535;
                        uint _2708 = _2545;
                        uint _2709;
                        vec4 _2734;
                        float _2735;
                        vec4 _2750;
                        vec3 _2762;
                        vec4 _2777;
                        vec4 _2793;
                        float _2840;
                        bool _2841;
                        for (;;)
                        {
                            uint _2719 = ((_2536 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2708));
                            _2709 = (_2708 + 4294967295u) & _2708;
                            uint _2721 = _2719 * 40u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            _2735 = _2734.w;
                            uint _2737 = (_2719 * 40u) + 4u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            uint _2752 = (_2719 * 40u) + 8u;
                            _2762 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x));
                            uint _2764 = (_2719 * 40u) + 16u;
                            _2777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 3u)).x));
                            uint _2780 = (_2719 * 40u) + 20u;
                            _2793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 3u)).x));
                            uint _2796 = (_2719 * 40u) + 24u;
                            vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2815 = (_2719 * 40u) + 28u;
                            vec4 _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            _2840 = fma(_2068, _2828.z, fma(_2067, _2828.y, _2828.x * _2066)) + _2828.w;
                            _2841 = !((fma(_2068, _2809.z, fma(_2067, _2809.y, _2809.x * _2066)) + _2809.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2841)
                            {
                                float _2868 = _2734.x - _2066;
                                float _2869 = _2734.y - _2067;
                                float _2870 = _2734.z - _2068;
                                float _2871 = dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870));
                                float _2874 = inversesqrt(_2871);
                                float _2875 = _2874 * _2868;
                                float _2876 = _2874 * _2869;
                                float _2877 = _2874 * _2870;
                                float _2881 = 1.0 - (_2871 / (_2735 * _2735));
                                float _3832 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2882 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                                float _2886 = sqrt(_2871) * _2750.w;
                                float _2888 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                                float _2889 = _2888 * _2888;
                                float _2890 = 1.0 - _2889;
                                float _2892 = (_2890 * dot(vec3(_2875, _2876, _2877), vec3(_450, _453, _456))) + _2889;
                                float _2895 = _2886 * _2886;
                                float _2899 = (fma(_2068, _2777.z, fma(_2067, _2777.y, _2777.x * _2066)) + _2777.w) / _2840;
                                float _2900 = (fma(_2068, _2793.z, fma(_2067, _2793.y, _2793.x * _2066)) + _2793.w) / _2840;
                                float _2904 = 1.0 - dot(vec2(_2899, _2900), vec2(_2899, _2900));
                                float _3848 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                                float _2905 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                                float _2906 = _2905 * (((isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))) * _2882) / ((_2895 * 0.699999988079071044921875) + 1.0));
                                float _2916 = dot(vec3(_450, _453, _456), vec3((-0.0) - (_2066 * _2398), (-0.0) - (_2067 * _2398), (-0.0) - (_2068 * _2398)));
                                float _3859 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                                float _2924 = (_2890 * dot(vec3(_450, _453, _456), vec3(_2875, _2876, _2877))) + _2889;
                                float _3870 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
                                float _2929 = (0.5 / (((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) + 9.9999999392252902907785028219223e-09) + _2925)) * _2925;
                                float _3881 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2936 = (_2905 * _2882) * (((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 3.1415927410125732421875) / ((_2895 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2906 * _2750.y;
                                frontier_phi_83_pred_1 = _2906 * _2750.x;
                                frontier_phi_83_pred_2 = _2936 * _2762.z;
                                frontier_phi_83_pred_3 = _2936 * _2762.y;
                                frontier_phi_83_pred_4 = _2936 * _2762.x;
                                frontier_phi_83_pred_5 = _2906 * _2750.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2944 = frontier_phi_83_pred;
                            _2943 = frontier_phi_83_pred_1;
                            _2942 = frontier_phi_83_pred_2;
                            _2941 = frontier_phi_83_pred_3;
                            _2940 = frontier_phi_83_pred_4;
                            _2945 = frontier_phi_83_pred_5;
                            _2692 = _2943 + _2705;
                            _2693 = _2944 + _2706;
                            _2694 = _2945 + _2707;
                            _2689 = _2940 + _2702;
                            _2690 = _2941 + _2703;
                            _2691 = _2942 + _2704;
                            if (_2709 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2709;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2694;
                        frontier_phi_77_pred_1 = _2693;
                        frontier_phi_77_pred_2 = _2692;
                        frontier_phi_77_pred_3 = _2691;
                        frontier_phi_77_pred_4 = _2690;
                        frontier_phi_77_pred_5 = _2689;
                    }
                    _2384 = frontier_phi_77_pred;
                    _2382 = frontier_phi_77_pred_1;
                    _2380 = frontier_phi_77_pred_2;
                    _2378 = frontier_phi_77_pred_3;
                    _2376 = frontier_phi_77_pred_4;
                    _2374 = frontier_phi_77_pred_5;
                    uint _2537 = _2536 + 1u;
                    if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2530 = _2374;
                        _2531 = _2376;
                        _2532 = _2378;
                        _2533 = _2380;
                        _2534 = _2382;
                        _2535 = _2384;
                        _2536 = _2537;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2378;
                frontier_phi_58_59_ladder_1 = _2384;
                frontier_phi_58_59_ladder_2 = _2382;
                frontier_phi_58_59_ladder_3 = _2380;
                frontier_phi_58_59_ladder_4 = _2376;
                frontier_phi_58_59_ladder_5 = _2374;
            }
            else
            {
                frontier_phi_58_59_ladder = _2246;
                frontier_phi_58_59_ladder_1 = _2252;
                frontier_phi_58_59_ladder_2 = _2250;
                frontier_phi_58_59_ladder_3 = _2248;
                frontier_phi_58_59_ladder_4 = _2244;
                frontier_phi_58_59_ladder_5 = _2242;
            }
            _2373 = frontier_phi_58_59_ladder_5;
            _2375 = frontier_phi_58_59_ladder_4;
            _2377 = frontier_phi_58_59_ladder;
            _2379 = frontier_phi_58_59_ladder_3;
            _2381 = frontier_phi_58_59_ladder_2;
            _2383 = frontier_phi_58_59_ladder_1;
        }
        float _2388 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2125 = (_2388 * _2379) + _1685;
        _2127 = (_2388 * _2381) + _1687;
        _2129 = (_2388 * _2383) + _1689;
        _2131 = ((_2373 * 0.039999999105930328369140625) * _2388) + _1937;
        _2133 = ((_2375 * 0.039999999105930328369140625) * _2388) + _1939;
        _2135 = ((_2377 * 0.039999999105930328369140625) * _2388) + _1941;
    }
    else
    {
        _2125 = _1685;
        _2127 = _1687;
        _2129 = _1689;
        _2131 = _1937;
        _2133 = _1939;
        _2135 = _1941;
    }
    uint _2141 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _2147 = (_321 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _286.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _257.x))) * cbInstanceData._m0[_2141].x;
    float _2148 = (_321 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _286.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _257.y))) * cbInstanceData._m0[_2141].y;
    float _2149 = (_321 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _286.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _257.z))) * cbInstanceData._m0[_2141].z;
    float _3897 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3908 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3919 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _2166 = (((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_2125 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _494))) + ((_2131 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + _2147;
    float _2168 = (_2148 + ((_2133 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_2127 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _494)));
    float _2170 = (_2149 + ((_2135 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1304)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_2129 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _494)));
    float _2171 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2172 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2179 = cbMtdParam._m0[2u].x * _2147;
    float _2180 = cbMtdParam._m0[2u].y * _2148;
    float _2181 = cbMtdParam._m0[2u].z * _2149;
    float _3945 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2183 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    uint _2184 = _469 + 6u;
    float _2192 = _429 / cbSceneParam._m0[86u].x;
    float _2193 = _430 / cbSceneParam._m0[86u].y;
    vec4 _2207 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2192, _2193, (log2((isnan(cbSceneParam._m0[77u].w) ? _350 : (isnan(_350) ? cbSceneParam._m0[77u].w : min(_350, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2209 = _2207.x;
    float _2210 = _2207.y;
    float _2211 = _2207.z;
    float _2212 = _2207.w;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_350 > cbSceneParam._m0[78u].w)
    {
        float _2267 = isnan(_350) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _350 : min(cbSceneParam._m0[80u].w, _350));
        float _2268 = _2267 / _350;
        float _2279 = _2268 * _401;
        float _2280 = _402 * _2268;
        float _2281 = (-0.0) - _2280;
        float _2283 = _2268 * _403;
        float _2285 = (cbSceneParam._m0[77u].w * _2281) / _2267;
        float _2286 = _2285 + cbSceneParam._m0[79u].w;
        float _2287 = cbSceneParam._m0[79u].w - _2280;
        float _2293 = sqrt(((_2279 * _2279) + (_2280 * _2280)) + (_2283 * _2283));
        float _2296 = (1.0 - (cbSceneParam._m0[77u].w / _2267)) * _2293;
        float _2301 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2303 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2487;
        if (abs((_2281 - _2285) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2487 = ((((_2286 > 0.0) ? exp2(_2301 * _2286) : (2.0 - exp2(_2303 * _2286))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2296;
        }
        else
        {
            float _2431 = 1.0 / cbSceneParam._m0[80u].x;
            float _2432 = isnan(_2287) ? _2286 : (isnan(_2286) ? _2287 : max(_2286, _2287));
            float _2433 = isnan(_2287) ? _2286 : (isnan(_2286) ? _2287 : min(_2286, _2287));
            float _2442 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : min(_2432, 0.0));
            float _2443 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : min(_2433, 0.0));
            _2487 = ((abs(_2293 / _2281) * cbSceneParam._m0[80u].y) * ((((_2442 - _2443) * 2.0) - ((exp2(_2301 * (isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0)))) - exp2(_2301 * (isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0))))) * _2431)) - ((exp2(_2303 * _2442) - exp2(_2303 * _2443)) * _2431))) + (_2296 * cbSceneParam._m0[80u].z);
        }
        vec4 _2489 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2192, _2193, 1.0), 0.0);
        float _2498 = exp2((_2487 * (-1.44269502162933349609375)) * (1.0 - _2489.w));
        float _2499 = log2(_2498);
        float _2515 = log2(_2212);
        _2305 = (exp2(_2515 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].x)) * _2489.x) / cbSceneParam._m0[78u].x)) + _2209;
        _2307 = (exp2(_2515 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].y)) * _2489.y) / cbSceneParam._m0[78u].y)) + _2210;
        _2309 = (exp2(_2515 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2499 * cbSceneParam._m0[78u].z)) * _2489.z) / cbSceneParam._m0[78u].z)) + _2211;
        _2311 = _2498 * _2212;
    }
    else
    {
        _2305 = _2209;
        _2307 = _2210;
        _2309 = _2211;
        _2311 = _2212;
    }
    bool _2525;
    vec4 _2321;
    vec4 _2343;
    float _2345;
    float _2349;
    float _2350;
    float _2351;
    float _2354;
    float _2357;
    float _2360;
    float _2361;
    bool _2372;
    for (;;)
    {
        _2321 = cbMatDynParam._m0[0u];
        float _2323 = roundEven(_2321.y);
        bool _2324 = _2323 == 3.0;
        float _2325 = log2(_2311);
        float _2329 = exp2(_2325 * cbSceneParam._m0[78u].x);
        float _2330 = exp2(_2325 * cbSceneParam._m0[78u].y);
        float _2331 = exp2(_2325 * cbSceneParam._m0[78u].z);
        float _2332 = _2329 * _2171;
        float _2333 = _2330 * _2172;
        float _2334 = _2331 * _2173;
        float _2341 = _417 + (-0.5);
        _2343 = cbMtdParam._m0[1u];
        _2345 = _2343.y * _2341;
        float _2348 = (_2323 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2349 = _2348 * (_2324 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2305)));
        _2350 = _2348 * (_2324 ? _2333 : (_2333 + (cbSceneParam._m0[72u].w * _2307)));
        _2351 = _2348 * (_2324 ? _2334 : (_2334 + (cbSceneParam._m0[72u].w * _2309)));
        _2354 = ((_2179 * _2183) * _2329) * _2348;
        _2357 = ((_2180 * _2183) * _2330) * _2348;
        _2360 = ((_2181 * _2183) * _2331) * _2348;
        _2361 = _2341 * 0.999000012874603271484375;
        _2372 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2372)
        {
            if ((cbInstanceData._m0[_469 + 7u].x + _2361) < 0.5)
            {
                _2525 = true;
                break;
            }
        }
        uint _2466 = _470 + uint(_2321.w);
        if ((cbInstanceData._m0[_2466].w < 1.0) && ((cbInstanceData._m0[_2466].w + _2361) < 0.5))
        {
            _2525 = true;
            break;
        }
        if ((_2345 + 1.0) < _2343.x)
        {
            _2525 = true;
            break;
        }
        _2525 = false;
        break;
    }
    float _2680;
    if (_2525)
    {
        discard_state = true;
        _2680 = 0.0;
    }
    else
    {
        _2680 = cbInstanceData._m0[_2184].w;
    }
    SV_Target.x = _2349;
    SV_Target.y = _2350;
    SV_Target.z = _2351;
    SV_Target.w = _2680;
    SV_Target_1.x = _2354;
    SV_Target_1.y = _2357;
    SV_Target_1.z = _2360;
    SV_Target_1.w = cbInstanceData._m0[_2184].w;
    discard_exit();
}


