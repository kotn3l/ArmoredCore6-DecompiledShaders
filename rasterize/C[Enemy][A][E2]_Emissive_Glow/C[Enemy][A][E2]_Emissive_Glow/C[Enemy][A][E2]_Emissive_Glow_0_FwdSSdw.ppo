#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _794;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _191 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _217 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _225 = (_217.x * cbMtdParam._m0[12u].x) + (_191.x * cbMtdParam._m0[9u].x);
    float _226 = (_217.y * cbMtdParam._m0[12u].y) + (_191.y * cbMtdParam._m0[9u].y);
    float _227 = (_217.z * cbMtdParam._m0[12u].z) + (_191.z * cbMtdParam._m0[9u].z);
    vec4 _249 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _278 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _295 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _296 = _295 * _169;
    float _297 = _295 * _170;
    float _298 = _295 * _171;
    float _2964 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _2975 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _2986 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _406 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _409 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _412 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _425 = uint(roundEven(NORMAL.w)) * 13u;
    uint _426 = _425 + 9u;
    uint _427 = _426 + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0)))) * cbInstanceData._m0[_427].z;
    float _2997 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0));
    float _3008 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _3019 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _450 = _447.x * TEXCOORD_4;
    float _451 = dot(vec3(_296, _297, _298), vec3(_376, _377, _378));
    float _454 = _451 * 2.0;
    float _459 = (_454 * _296) - _376;
    float _460 = (_454 * _297) - _377;
    float _461 = (_454 * _298) - _378;
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _491 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _793;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _518 = fma(_491, cbModelParam._m0[26u].z, fma(_487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483));
        float _522 = fma(_491, cbModelParam._m0[27u].z, fma(_487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483));
        float _526 = fma(_491, cbModelParam._m0[28u].z, fma(_487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483));
        float _551 = _483 + _296;
        float _552 = _487 + _297;
        float _553 = _491 + _298;
        float _563 = fma(_553, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551)) - _518;
        float _564 = fma(_553, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551)) - _522;
        float _565 = fma(_553, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551)) - _526;
        float _569 = inversesqrt(dot(vec3(_563, _564, _565), vec3(_563, _564, _565)));
        float _582 = ((_569 * _563) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_518 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _583 = ((_569 * _564) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_522 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _584 = ((_569 * _565) / cbModelParam._m0[34u].z) + ((((((_526 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_582, _583, _584), 0.0);
        float _621 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _622 = _621 * (_587.x + (-0.5));
        float _623 = _621 * (_587.y + (-0.5));
        float _624 = _621 * (_587.z + (-0.5));
        float _631 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_594.x + (-0.5));
        float _633 = _631 * (_594.y + (-0.5));
        float _634 = _631 * (_594.z + (-0.5));
        float _641 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_601.x + (-0.5));
        float _643 = _641 * (_601.y + (-0.5));
        float _644 = _641 * (_601.z + (-0.5));
        float _651 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_608.x + (-0.5));
        float _653 = _651 * (_608.y + (-0.5));
        float _654 = _651 * (_608.z + (-0.5));
        float _655 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _658 = _622 * 0.5;
        float _659 = _632 * 0.5;
        float _660 = _642 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _675 = (dot(vec3(_296, _297, _298), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3045 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _685 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_655 + 9.9999997473787516355514526367188e-06);
        float _3056 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
        float _687 = _686 * 2.0;
        float _691 = (1.0 - _686) / (_686 + 1.0);
        float _3067 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _701 = ((((1.0 - _692) * (_687 + 2.0)) * exp2(log2(isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) * (_687 + 1.0))) + _692) * _655;
        float _702 = _623 * 0.5;
        float _703 = _633 * 0.5;
        float _704 = _643 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _718 = (dot(vec3(_296, _297, _298), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3078 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _727 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3089 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3100 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_729 + 1.0))) + _734) * _656;
        float _744 = _624 * 0.5;
        float _745 = _634 * 0.5;
        float _746 = _644 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_296, _297, _298), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3111 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_657 + 9.9999997473787516355514526367188e-06);
        float _3122 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3133 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0))) * (_771 + 1.0))) + _776) * _657;
        _793 = _624;
        _795 = _623;
        _796 = _622;
        _797 = _634;
        _798 = _633;
        _799 = _632;
        _800 = _644;
        _801 = _643;
        _802 = _642;
        _803 = _657;
        _804 = _656;
        _805 = _655;
        _806 = cbModelParam._m0[36u].z * (isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0)));
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _808 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
    }
    else
    {
        _793 = _794;
        _795 = _794;
        _796 = _794;
        _797 = _794;
        _798 = _794;
        _799 = _794;
        _800 = _794;
        _801 = _794;
        _802 = _794;
        _803 = _794;
        _804 = _794;
        _805 = _794;
        _806 = 0.0;
        _807 = 0.0;
        _808 = 0.0;
    }
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _834 = fma(_491, cbModelParam._m0[30u].z, fma(_487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _483));
        float _838 = fma(_491, cbModelParam._m0[31u].z, fma(_487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _483));
        float _842 = fma(_491, cbModelParam._m0[32u].z, fma(_487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _483));
        float _865 = _483 + _296;
        float _866 = _487 + _297;
        float _867 = _491 + _298;
        float _877 = fma(_867, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865)) - _834;
        float _878 = fma(_867, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865)) - _838;
        float _879 = fma(_867, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865)) - _842;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_834 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_838 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[35u].z) + ((((((_842 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _933 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_900.x + (-0.5));
        float _935 = _933 * (_900.y + (-0.5));
        float _936 = _933 * (_900.z + (-0.5));
        float _943 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_907.x + (-0.5));
        float _945 = _943 * (_907.y + (-0.5));
        float _946 = _943 * (_907.z + (-0.5));
        float _953 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_914.x + (-0.5));
        float _955 = _953 * (_914.y + (-0.5));
        float _956 = _953 * (_914.z + (-0.5));
        float _963 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_921.x + (-0.5));
        float _965 = _963 * (_921.y + (-0.5));
        float _966 = _963 * (_921.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_296, _297, _298), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3174 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3185 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3196 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) * (_997 + 1.0))) + _1002) * _967;
        float _1012 = _935 * 0.5;
        float _1013 = _945 * 0.5;
        float _1014 = _955 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_296, _297, _298), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3229 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_1039 + 1.0))) + _1044) * _968;
        float _1054 = _936 * 0.5;
        float _1055 = _946 * 0.5;
        float _1056 = _956 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_296, _297, _298), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3262 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_1081 + 1.0))) + _1086) * _969;
        _1103 = _936;
        _1104 = _935;
        _1105 = _934;
        _1106 = _946;
        _1107 = _945;
        _1108 = _944;
        _1109 = _956;
        _1110 = _955;
        _1111 = _954;
        _1112 = _969;
        _1113 = _968;
        _1114 = _967;
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _794;
        _1104 = _794;
        _1105 = _794;
        _1106 = _794;
        _1107 = _794;
        _1108 = _794;
        _1109 = _794;
        _1110 = _794;
        _1111 = _794;
        _1112 = _794;
        _1113 = _794;
        _1114 = _794;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _806)) + _806;
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _807)) + _807;
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _808)) + _808;
    float _1150 = fma(_1129, cbSceneParam._m0[89u].z, fma(_1128, cbSceneParam._m0[89u].y, _1127 * cbSceneParam._m0[89u].x));
    float _1153 = fma(_1129, cbSceneParam._m0[90u].z, fma(_1128, cbSceneParam._m0[90u].y, _1127 * cbSceneParam._m0[90u].x));
    float _1156 = fma(_1129, cbSceneParam._m0[91u].z, fma(_1128, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1127));
    float _1171 = _459 * 0.5;
    float _1172 = _460 * 0.5;
    float _1173 = _461 * 0.5;
    float _1174 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1177 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1104, _1107, _1110, _1113));
    float _1180 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1214;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1187 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_793, _797, _800, _803));
        float _1191 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_795, _798, _801, _804));
        float _1195 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_796, _799, _802, _805));
        float _1202 = dot(vec4(cbModelParam._m0[39u]), vec4(_1171, _1172, _1173, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1225;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1216 = dot(vec4(cbModelParam._m0[40u]), vec4(_1171, _1172, _1173, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1229 = (_1225 * cbModelParam._m0[1u].x) + (_1214 * (1.0 - cbModelParam._m0[1u].x));
    float _1238 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1320;
    float _1322;
    float _1324;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1287 = fma(_491, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _483)) + cbModelParam._m0[13u].w;
        float _1291 = fma(_491, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _483)) + cbModelParam._m0[14u].w;
        float _1295 = fma(_491, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _483)) + cbModelParam._m0[15u].w;
        float _1298 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1301 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1304 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1330;
        if (_1298 > 0.0)
        {
            _1330 = abs((1.0 - _1287) / _1298);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1287 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1330 = frontier_phi_14_12_ladder;
        }
        float _1558;
        if (_1301 > 0.0)
        {
            _1558 = abs((1.0 - _1291) / _1301);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1291 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1558 = frontier_phi_23_19_ladder;
        }
        float _1750;
        if (_1304 > 0.0)
        {
            _1750 = abs((1.0 - _1295) / _1304);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1295 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1750 = frontier_phi_35_30_ladder;
        }
        float _1752 = isnan(_1558) ? _1330 : (isnan(_1330) ? _1558 : min(_1330, _1558));
        float _1753 = isnan(_1750) ? _1752 : (isnan(_1752) ? _1750 : min(_1752, _1750));
        float _1757 = (_1753 * _1298) + _1287;
        float _1758 = (_1753 * _1301) + _1291;
        float _1759 = (_1753 * _1304) + _1295;
        float _1760 = _1753 * 9.9999997473787516355514526367188e-05;
        float _1762 = (-1.0) - _1760;
        float _1764 = _1760 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1759 > _1764) || ((_1759 < _1762) || ((_1758 > _1764) || ((_1758 < _1762) || ((_1757 < _1762) || (_1757 > _1764))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1759, cbModelParam._m0[9u].z, fma(_1758, cbModelParam._m0[9u].y, _1757 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1759, cbModelParam._m0[10u].z, fma(_1758, cbModelParam._m0[10u].y, _1757 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1759, cbModelParam._m0[11u].z, fma(_1758, cbModelParam._m0[11u].y, _1757 * cbModelParam._m0[11u].x))), _1238);
            frontier_phi_13_35_ladder = _1856.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1856.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1856.x * cbModelParam._m0[1u].y;
        }
        _1320 = frontier_phi_13_35_ladder_2;
        _1322 = frontier_phi_13_35_ladder_1;
        _1324 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1308 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1238);
        _1320 = _1308.x * cbModelParam._m0[1u].y;
        _1322 = _1308.y * cbModelParam._m0[1u].y;
        _1324 = _1308.z * cbModelParam._m0[1u].y;
    }
    float _1327 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1384 = fma(_491, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _483)) + cbModelParam._m0[21u].w;
        float _1388 = fma(_491, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _483)) + cbModelParam._m0[22u].w;
        float _1392 = fma(_491, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _483)) + cbModelParam._m0[23u].w;
        float _1395 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1398 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1401 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1563;
        if (_1395 > 0.0)
        {
            _1563 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1563 = frontier_phi_25_21_ladder;
        }
        float _1777;
        if (_1398 > 0.0)
        {
            _1777 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1777 = frontier_phi_37_32_ladder;
        }
        float _1928;
        if (_1401 > 0.0)
        {
            _1928 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1928 = frontier_phi_46_43_ladder;
        }
        float _1930 = isnan(_1777) ? _1563 : (isnan(_1563) ? _1777 : min(_1563, _1777));
        float _1931 = isnan(_1928) ? _1930 : (isnan(_1930) ? _1928 : min(_1930, _1928));
        float _1935 = (_1931 * _1395) + _1384;
        float _1936 = (_1931 * _1398) + _1388;
        float _1937 = (_1931 * _1401) + _1392;
        float _1938 = _1931 * 9.9999997473787516355514526367188e-05;
        float _1939 = (-1.0) - _1938;
        float _1941 = _1938 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1937 > _1941) || ((_1937 < _1939) || ((_1936 > _1941) || ((_1936 < _1939) || ((_1935 < _1939) || (_1935 > _1941))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1937, cbModelParam._m0[17u].z, fma(_1936, cbModelParam._m0[17u].y, _1935 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1937, cbModelParam._m0[18u].z, fma(_1936, cbModelParam._m0[18u].y, _1935 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1937, cbModelParam._m0[19u].z, fma(_1936, cbModelParam._m0[19u].y, _1935 * cbModelParam._m0[19u].x))), _1327);
            frontier_phi_22_46_ladder = _2165.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2165.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2165.x * cbModelParam._m0[1u].z;
        }
        _1420 = frontier_phi_22_46_ladder_2;
        _1422 = frontier_phi_22_46_ladder_1;
        _1424 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1327);
        _1420 = _1404.x * cbModelParam._m0[1u].z;
        _1422 = _1404.y * cbModelParam._m0[1u].z;
        _1424 = _1404.z * cbModelParam._m0[1u].z;
    }
    float _1436 = _450 * 0.01200000010430812835693359375;
    float _1438 = _1436 * ((cbModelParam._m0[1u].w * (_1420 - _1320)) + _1320);
    float _1439 = _1436 * ((cbModelParam._m0[1u].w * (_1422 - _1322)) + _1322);
    float _1440 = _1436 * ((cbModelParam._m0[1u].w * (_1424 - _1324)) + _1324);
    float _1443 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, _1438 * cbSceneParam._m0[91u].x));
    vec4 _1457 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_384, _385));
    float _1459 = _1457.w;
    float _1471 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1459);
    float _1472 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1459);
    float _1473 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1459);
    uvec4 _1477 = floatBitsToUint(cbInstanceData._m0[_425 + 5u]);
    uint _1479 = _1477.x * 14u;
    uint _1480 = _1479 + 13u;
    float _1487 = _450 + (-1.0);
    float _1493 = (cbLight._m0[_1480].x * _1487) + 1.0;
    float _1494 = (cbLight._m0[_1480].y * _1487) + 1.0;
    float _1495 = (cbLight._m0[_1480].z * _1487) + 1.0;
    float _1496 = (cbLight._m0[_1480].w * _1487) + 1.0;
    uint _1497 = _1479 + 5u;
    float _1503 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1507 = _1479 + 4u;
    float _1517 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
    uint _1521 = _1479 | 1u;
    float _1532 = dot(vec3(cbLight._m0[_1479].xyz), vec3(_296, _297, _298));
    float _1535 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_296, _297, _298));
    float _3398 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
    float _3409 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _1540 = (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * 0.3183098733425140380859375;
    float _1542 = (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * 0.3183098733425140380859375;
    float _1549 = ((cbLight._m0[_1497].x * _1503) * _1542) + (((cbLight._m0[_1507].x * _1471) * _1517) * _1540);
    float _1550 = ((_1503 * cbLight._m0[_1497].y) * _1542) + (((cbLight._m0[_1507].y * _1472) * _1517) * _1540);
    float _1551 = ((_1503 * cbLight._m0[_1497].z) * _1542) + (((cbLight._m0[_1507].z * _1473) * _1517) * _1540);
    uvec4 _1555 = floatBitsToUint(cbLight._m0[_1479 + 12u]);
    bool _1557 = _1555.x == 0u;
    float _1568;
    float _1570;
    float _1572;
    if (_1557)
    {
        _1568 = _1549;
        _1570 = _1550;
        _1572 = _1551;
    }
    else
    {
        uint _1576 = _1479 + 6u;
        float _1592 = (dot(vec3(cbLight._m0[_1479 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1593 = _1592 * _1592;
        float _3420 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1595 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
        _1568 = (((cbLight._m0[_1576].x * 0.3183098733425140380859375) * _1594) * _1595) + _1549;
        _1570 = (((cbLight._m0[_1576].y * 0.3183098733425140380859375) * _1594) * _1595) + _1550;
        _1572 = (((cbLight._m0[_1576].z * 0.3183098733425140380859375) * _1594) * _1595) + _1551;
    }
    bool _1575 = _1555.y == 0u;
    float _1613;
    float _1615;
    float _1617;
    if (_1575)
    {
        _1613 = _1568;
        _1615 = _1570;
        _1617 = _1572;
    }
    else
    {
        uint _1721 = _1479 + 7u;
        float _1737 = (dot(vec3(cbLight._m0[_1479 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1738 = _1737 * _1737;
        float _3436 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1740 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1613 = (((cbLight._m0[_1721].x * 0.3183098733425140380859375) * _1739) * _1740) + _1568;
        _1615 = (((cbLight._m0[_1721].y * 0.3183098733425140380859375) * _1739) * _1740) + _1570;
        _1617 = (((cbLight._m0[_1721].z * 0.3183098733425140380859375) * _1739) * _1740) + _1572;
    }
    uint _1619 = _1479 + 8u;
    float _1625 = cbLight._m0[_1479].x + _376;
    float _1626 = cbLight._m0[_1479].y + _377;
    float _1627 = cbLight._m0[_1479].z + _378;
    float _1631 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
    float _1635 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1479].xyz));
    float _3452 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1638 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _1639 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _1640 = dot(vec3(cbLight._m0[_1479].xyz), vec3(_1625 * _1631, _1626 * _1631, _1627 * _1631));
    float _3474 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1651 = (exp2(log2(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1657 = (0.5 / ((_1638 + 9.9999999392252902907785028219223e-09) + _1639)) * _1638;
    float _3485 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1659 = (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.31831014156341552734375;
    uint _1673 = _1479 + 9u;
    float _1679 = cbLight._m0[_1521].x + _376;
    float _1680 = cbLight._m0[_1521].y + _377;
    float _1681 = cbLight._m0[_1521].z + _378;
    float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
    float _1689 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1521].xyz));
    float _3496 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1692 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _1693 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_1679 * _1685, _1680 * _1685, _1681 * _1685));
    float _3507 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1702 = (exp2(log2(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1706 = (0.5 / ((_1692 + 9.9999999392252902907785028219223e-09) + _1639)) * _1692;
    float _3518 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1708 = (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.31831014156341552734375;
    float _1718 = (((_1702 * cbLight._m0[_1673].x) * _1708) * _1503) + ((((cbLight._m0[_1619].x * _1471) * _1651) * _1659) * _1517);
    float _1719 = (((_1702 * cbLight._m0[_1673].y) * _1708) * _1503) + ((((cbLight._m0[_1619].y * _1472) * _1651) * _1659) * _1517);
    float _1720 = (((_1702 * cbLight._m0[_1673].z) * _1708) * _1503) + ((((cbLight._m0[_1619].z * _1473) * _1651) * _1659) * _1517);
    float _1782;
    float _1784;
    float _1786;
    if (_1557)
    {
        _1782 = _1718;
        _1784 = _1719;
        _1786 = _1720;
    }
    else
    {
        uint _1788 = _1479 + 10u;
        uint _1794 = _1479 + 2u;
        float _1800 = cbLight._m0[_1794].x + _376;
        float _1801 = cbLight._m0[_1794].y + _377;
        float _1802 = cbLight._m0[_1794].z + _378;
        float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
        float _1810 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1794].xyz));
        float _3529 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1813 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1814 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1800 * _1806, _1801 * _1806, _1802 * _1806));
        float _3540 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1827 = (0.5 / ((_1813 + 9.9999999392252902907785028219223e-09) + _1639)) * _1813;
        float _3551 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1829 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.31831014156341552734375;
        float _1830 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
        _1782 = (((_1823 * cbLight._m0[_1788].x) * _1829) * _1830) + _1718;
        _1784 = (((_1823 * cbLight._m0[_1788].y) * _1829) * _1830) + _1719;
        _1786 = (((_1823 * cbLight._m0[_1788].z) * _1829) * _1830) + _1720;
    }
    float _1865;
    float _1867;
    float _1869;
    if (_1575)
    {
        _1865 = _1782;
        _1867 = _1784;
        _1869 = _1786;
    }
    else
    {
        uint _1876 = _1479 + 11u;
        uint _1882 = _1479 + 3u;
        float _1888 = cbLight._m0[_1882].x + _376;
        float _1889 = cbLight._m0[_1882].y + _377;
        float _1890 = cbLight._m0[_1882].z + _378;
        float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
        float _1898 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1882].xyz));
        float _3567 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1901 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1902 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_1888 * _1894, _1889 * _1894, _1890 * _1894));
        float _3578 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1911 = (exp2(log2(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1915 = (0.5 / ((_1901 + 9.9999999392252902907785028219223e-09) + _1639)) * _1901;
        float _3589 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1917 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.31831014156341552734375;
        float _1918 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1865 = (((_1911 * cbLight._m0[_1876].x) * _1917) * _1918) + _1782;
        _1867 = (((_1911 * cbLight._m0[_1876].y) * _1917) * _1918) + _1784;
        _1869 = (((_1911 * cbLight._m0[_1876].z) * _1917) * _1918) + _1786;
    }
    float _2053;
    float _2055;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    if (_1477.y == 0u)
    {
        float _1993 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1994 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1993;
        float _1995 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1993;
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1993;
        uvec4 _2008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2009 = _2008.x;
        uint _2020 = uint((float(_2008.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2009))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2009)));
        float _2030 = (log2(_1996 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2031 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        uint _2034 = uint(isnan(14.0) ? _2031 : (isnan(_2031) ? 14.0 : min(_2031, 14.0)));
        uvec4 _2039 = texelFetch(g_lightClusterGridBuffer, int(((_2034 << 2u) + (_2020 << 6u)) >> 2u));
        uint _2040 = _2039.x;
        uint _2041 = _2008.z;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        if (((((1u << ((_2041 >> 4u) & 15u)) + 4294967295u) & _2040) == 0u) || ((_2041 & 240u) == 0u))
        {
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
        }
        else
        {
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            uint _2328 = 0u;
            uint _2337;
            bool _2338;
            for (;;)
            {
                _2337 = texelFetch(g_lightClassification, int((((_2034 << 5u) + (_2020 << 9u)) + (_2328 << 2u)) >> 2u)).x;
                _2338 = _2337 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2338)
                {
                    frontier_phi_61_pred = _2322;
                    frontier_phi_61_pred_1 = _2327;
                    frontier_phi_61_pred_2 = _2326;
                    frontier_phi_61_pred_3 = _2325;
                    frontier_phi_61_pred_4 = _2324;
                    frontier_phi_61_pred_5 = _2323;
                }
                else
                {
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    uint _2452;
                    _2446 = _2322;
                    _2447 = _2323;
                    _2448 = _2324;
                    _2449 = _2325;
                    _2450 = _2326;
                    _2451 = _2327;
                    _2452 = _2337;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    for (;;)
                    {
                        uint _2456 = uint(findLSB(_2452)) + (_2328 << 5u);
                        uint _2453 = (_2452 + 4294967295u) & _2452;
                        uint _2458 = _2456 * 48u;
                        vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 3u)).x));
                        uint _2478 = (_2456 * 48u) + 4u;
                        vec4 _2491 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 3u)).x));
                        uint _2497 = (_2456 * 48u) + 8u;
                        vec3 _2508 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2497)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 2u)).x));
                        float _2512 = _2472.x - _1994;
                        float _2513 = _2472.y - _1995;
                        float _2514 = _2472.z - _1996;
                        float _2515 = dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514));
                        float _2518 = inversesqrt(_2515);
                        float _2527 = 1.0 - (_2515 * _2472.w);
                        float _3615 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
                        float _2528 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                        float _2529 = sqrt(_2515) * _2491.w;
                        float _2532 = 1.39999997615814208984375 / (_2529 + 1.39999997615814208984375);
                        float _2533 = _2532 * _2532;
                        float _2536 = ((1.0 - _2533) * dot(vec3(_406, _409, _412), vec3(_2518 * _2512, _2518 * _2513, _2518 * _2514))) + _2533;
                        float _2539 = _2529 * _2529;
                        float _2543 = ((isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0))) * _2528) / ((_2539 * 0.699999988079071044921875) + 1.0);
                        float _2547 = (-0.0) - _1994;
                        float _2548 = (-0.0) - _1995;
                        float _2549 = (-0.0) - _1996;
                        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
                        float _2557 = dot(vec3(_406, _409, _412), vec3(_2553 * _2547, _2553 * _2548, _2553 * _2549));
                        float _3631 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
                        float _3642 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _2561 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
                        float _2565 = (0.5 / (((isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) + 9.9999999392252902907785028219223e-09) + _2561)) * _2561;
                        float _3653 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2574 = (((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 3.1415927410125732421875) / ((_2539 * 2.1991131305694580078125) + 3.141590118408203125)) * _2528;
                        _2381 = (_2543 * _2491.x) + _2449;
                        _2382 = (_2543 * _2491.y) + _2450;
                        _2383 = (_2543 * _2491.z) + _2451;
                        _2378 = (_2574 * _2508.x) + _2446;
                        _2379 = (_2574 * _2508.y) + _2447;
                        _2380 = (_2574 * _2508.z) + _2448;
                        if (_2453 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2446 = _2378;
                            _2447 = _2379;
                            _2448 = _2380;
                            _2449 = _2381;
                            _2450 = _2382;
                            _2451 = _2383;
                            _2452 = _2453;
                        }
                    }
                    frontier_phi_61_pred = _2378;
                    frontier_phi_61_pred_1 = _2383;
                    frontier_phi_61_pred_2 = _2382;
                    frontier_phi_61_pred_3 = _2381;
                    frontier_phi_61_pred_4 = _2380;
                    frontier_phi_61_pred_5 = _2379;
                }
                _2171 = frontier_phi_61_pred;
                _2181 = frontier_phi_61_pred_1;
                _2179 = frontier_phi_61_pred_2;
                _2177 = frontier_phi_61_pred_3;
                _2175 = frontier_phi_61_pred_4;
                _2173 = frontier_phi_61_pred_5;
                uint _2329 = _2328 + 1u;
                if (_2329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2322 = _2171;
                    _2323 = _2173;
                    _2324 = _2175;
                    _2325 = _2177;
                    _2326 = _2179;
                    _2327 = _2181;
                    _2328 = _2329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
        }
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.z;
        uint _2187 = (_2185 >> 8u) & 15u;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        if (((4294967295u << _2187) & _2040) == 0u)
        {
            _2293 = _2170;
            _2295 = _2172;
            _2297 = _2174;
            _2299 = _2176;
            _2301 = _2178;
            _2303 = _2180;
        }
        else
        {
            float _2318 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2187 < ((_2185 >> 12u) & 15u))
            {
                float _2294;
                float _2296;
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2429 = _2170;
                float _2430 = _2172;
                float _2431 = _2174;
                float _2432 = _2176;
                float _2433 = _2178;
                float _2434 = _2180;
                uint _2435 = _2187;
                uint _2444;
                bool _2445;
                for (;;)
                {
                    _2444 = texelFetch(g_lightClassification, int((((_2034 << 5u) + (_2020 << 9u)) + (_2435 << 2u)) >> 2u)).x;
                    _2445 = _2444 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2445)
                    {
                        frontier_phi_67_pred = _2432;
                        frontier_phi_67_pred_1 = _2433;
                        frontier_phi_67_pred_2 = _2434;
                        frontier_phi_67_pred_3 = _2431;
                        frontier_phi_67_pred_4 = _2430;
                        frontier_phi_67_pred_5 = _2429;
                    }
                    else
                    {
                        float _2579;
                        float _2580;
                        float _2581;
                        float _2582;
                        float _2583;
                        float _2584;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2592 = _2429;
                        float _2593 = _2430;
                        float _2594 = _2431;
                        float _2595 = _2432;
                        float _2596 = _2433;
                        float _2597 = _2434;
                        uint _2598 = _2444;
                        uint _2599;
                        vec4 _2624;
                        float _2625;
                        vec4 _2640;
                        vec3 _2652;
                        vec4 _2667;
                        vec4 _2683;
                        float _2730;
                        bool _2731;
                        for (;;)
                        {
                            uint _2609 = ((_2435 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2598));
                            _2599 = (_2598 + 4294967295u) & _2598;
                            uint _2611 = _2609 * 40u;
                            _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            _2625 = _2624.w;
                            uint _2627 = (_2609 * 40u) + 4u;
                            _2640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2627 + 3u)).x));
                            uint _2642 = (_2609 * 40u) + 8u;
                            _2652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x));
                            uint _2654 = (_2609 * 40u) + 16u;
                            _2667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2654 + 3u)).x));
                            uint _2670 = (_2609 * 40u) + 20u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            uint _2686 = (_2609 * 40u) + 24u;
                            vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            uint _2705 = (_2609 * 40u) + 28u;
                            vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            _2730 = fma(_1996, _2718.z, fma(_1995, _2718.y, _2718.x * _1994)) + _2718.w;
                            _2731 = !((fma(_1996, _2699.z, fma(_1995, _2699.y, _2699.x * _1994)) + _2699.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2731)
                            {
                                float _2758 = _2624.x - _1994;
                                float _2759 = _2624.y - _1995;
                                float _2760 = _2624.z - _1996;
                                float _2761 = dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760));
                                float _2764 = inversesqrt(_2761);
                                float _2765 = _2764 * _2758;
                                float _2766 = _2764 * _2759;
                                float _2767 = _2764 * _2760;
                                float _2771 = 1.0 - (_2761 / (_2625 * _2625));
                                float _3664 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                                float _2772 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
                                float _2776 = sqrt(_2761) * _2640.w;
                                float _2778 = 1.39999997615814208984375 / (_2776 + 1.39999997615814208984375);
                                float _2779 = _2778 * _2778;
                                float _2780 = 1.0 - _2779;
                                float _2782 = (_2780 * dot(vec3(_2765, _2766, _2767), vec3(_406, _409, _412))) + _2779;
                                float _2785 = _2776 * _2776;
                                float _2789 = (fma(_1996, _2667.z, fma(_1995, _2667.y, _2667.x * _1994)) + _2667.w) / _2730;
                                float _2790 = (fma(_1996, _2683.z, fma(_1995, _2683.y, _2683.x * _1994)) + _2683.w) / _2730;
                                float _2794 = 1.0 - dot(vec2(_2789, _2790), vec2(_2789, _2790));
                                float _3680 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2795 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                                float _2796 = _2795 * (((isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))) * _2772) / ((_2785 * 0.699999988079071044921875) + 1.0));
                                float _2806 = dot(vec3(_406, _409, _412), vec3((-0.0) - (_1994 * _2318), (-0.0) - (_1995 * _2318), (-0.0) - (_1996 * _2318)));
                                float _3691 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                                float _2814 = (_2780 * dot(vec3(_406, _409, _412), vec3(_2765, _2766, _2767))) + _2779;
                                float _3702 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                                float _2815 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                                float _2819 = (0.5 / (((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) + 9.9999999392252902907785028219223e-09) + _2815)) * _2815;
                                float _3713 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                                float _2826 = (_2795 * _2772) * (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 3.1415927410125732421875) / ((_2785 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2826 * _2652.x;
                                frontier_phi_73_pred_1 = _2826 * _2652.y;
                                frontier_phi_73_pred_2 = _2796 * _2640.z;
                                frontier_phi_73_pred_3 = _2796 * _2640.y;
                                frontier_phi_73_pred_4 = _2796 * _2640.x;
                                frontier_phi_73_pred_5 = _2826 * _2652.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2830 = frontier_phi_73_pred;
                            _2831 = frontier_phi_73_pred_1;
                            _2835 = frontier_phi_73_pred_2;
                            _2834 = frontier_phi_73_pred_3;
                            _2833 = frontier_phi_73_pred_4;
                            _2832 = frontier_phi_73_pred_5;
                            _2582 = _2833 + _2595;
                            _2583 = _2834 + _2596;
                            _2584 = _2835 + _2597;
                            _2579 = _2830 + _2592;
                            _2580 = _2831 + _2593;
                            _2581 = _2832 + _2594;
                            if (_2599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2592 = _2579;
                                _2593 = _2580;
                                _2594 = _2581;
                                _2595 = _2582;
                                _2596 = _2583;
                                _2597 = _2584;
                                _2598 = _2599;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2582;
                        frontier_phi_67_pred_1 = _2583;
                        frontier_phi_67_pred_2 = _2584;
                        frontier_phi_67_pred_3 = _2581;
                        frontier_phi_67_pred_4 = _2580;
                        frontier_phi_67_pred_5 = _2579;
                    }
                    _2300 = frontier_phi_67_pred;
                    _2302 = frontier_phi_67_pred_1;
                    _2304 = frontier_phi_67_pred_2;
                    _2298 = frontier_phi_67_pred_3;
                    _2296 = frontier_phi_67_pred_4;
                    _2294 = frontier_phi_67_pred_5;
                    uint _2436 = _2435 + 1u;
                    if (_2436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2429 = _2294;
                        _2430 = _2296;
                        _2431 = _2298;
                        _2432 = _2300;
                        _2433 = _2302;
                        _2434 = _2304;
                        _2435 = _2436;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2302;
                frontier_phi_55_56_ladder_1 = _2304;
                frontier_phi_55_56_ladder_2 = _2300;
                frontier_phi_55_56_ladder_3 = _2298;
                frontier_phi_55_56_ladder_4 = _2296;
                frontier_phi_55_56_ladder_5 = _2294;
            }
            else
            {
                frontier_phi_55_56_ladder = _2178;
                frontier_phi_55_56_ladder_1 = _2180;
                frontier_phi_55_56_ladder_2 = _2176;
                frontier_phi_55_56_ladder_3 = _2174;
                frontier_phi_55_56_ladder_4 = _2172;
                frontier_phi_55_56_ladder_5 = _2170;
            }
            _2293 = frontier_phi_55_56_ladder_5;
            _2295 = frontier_phi_55_56_ladder_4;
            _2297 = frontier_phi_55_56_ladder_3;
            _2299 = frontier_phi_55_56_ladder_2;
            _2301 = frontier_phi_55_56_ladder;
            _2303 = frontier_phi_55_56_ladder_1;
        }
        float _2308 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _2053 = (_2308 * _2299) + _1613;
        _2055 = (_2308 * _2301) + _1615;
        _2057 = (_2308 * _2303) + _1617;
        _2059 = ((_2293 * 0.039999999105930328369140625) * _2308) + _1865;
        _2061 = ((_2295 * 0.039999999105930328369140625) * _2308) + _1867;
        _2063 = ((_2297 * 0.039999999105930328369140625) * _2308) + _1869;
    }
    else
    {
        _2053 = _1613;
        _2055 = _1615;
        _2057 = _1617;
        _2059 = _1865;
        _2061 = _1867;
        _2063 = _1869;
    }
    uint _2069 = _426 + uint(cbMatDynParam._m0[0u].w);
    float _2075 = cbInstanceData._m0[_2069].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _278.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _249.x));
    float _2076 = cbInstanceData._m0[_2069].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _278.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _249.y));
    float _2077 = cbInstanceData._m0[_2069].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _278.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _249.z));
    float _3729 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3740 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3751 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _2094 = (((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_2053 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _450))) + ((_2059 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + _2075;
    float _2096 = (_2076 + ((_2061 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_2055 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _450)));
    float _2098 = (_2077 + ((_2063 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_2057 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _450)));
    float _3777 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2111 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    uint _2112 = _425 + 6u;
    float _2120 = _384 / cbSceneParam._m0[86u].x;
    float _2121 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2135 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2120, _2121, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2137 = _2135.x;
    float _2138 = _2135.y;
    float _2139 = _2135.z;
    float _2140 = _2135.w;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2195 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2196 = _2195 / _318;
        float _2207 = _2196 * _369;
        float _2208 = _370 * _2196;
        float _2209 = (-0.0) - _2208;
        float _2211 = _2196 * _371;
        float _2213 = (cbSceneParam._m0[77u].w * _2209) / _2195;
        float _2214 = _2213 + cbSceneParam._m0[79u].w;
        float _2215 = cbSceneParam._m0[79u].w - _2208;
        float _2221 = sqrt(((_2207 * _2207) + (_2208 * _2208)) + (_2211 * _2211));
        float _2224 = (1.0 - (cbSceneParam._m0[77u].w / _2195)) * _2221;
        float _2229 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2231 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2391;
        if (abs((_2209 - _2213) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2391 = ((((_2214 > 0.0) ? exp2(_2229 * _2214) : (2.0 - exp2(_2231 * _2214))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2224;
        }
        else
        {
            float _2351 = 1.0 / cbSceneParam._m0[80u].x;
            float _2352 = isnan(_2215) ? _2214 : (isnan(_2214) ? _2215 : max(_2214, _2215));
            float _2353 = isnan(_2215) ? _2214 : (isnan(_2214) ? _2215 : min(_2214, _2215));
            float _2362 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : min(_2352, 0.0));
            float _2363 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : min(_2353, 0.0));
            _2391 = ((abs(_2221 / _2209) * cbSceneParam._m0[80u].y) * ((((_2362 - _2363) * 2.0) - ((exp2(_2229 * (isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0)))) - exp2(_2229 * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))))) * _2351)) - ((exp2(_2231 * _2362) - exp2(_2231 * _2363)) * _2351))) + (_2224 * cbSceneParam._m0[80u].z);
        }
        vec4 _2393 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2120, _2121, 1.0), 0.0);
        float _2402 = exp2((_2391 * (-1.44269502162933349609375)) * (1.0 - _2393.w));
        float _2403 = log2(_2402);
        float _2419 = log2(_2140);
        _2233 = (exp2(_2419 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].x)) * _2393.x) / cbSceneParam._m0[78u].x)) + _2137;
        _2235 = (exp2(_2419 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].y)) * _2393.y) / cbSceneParam._m0[78u].y)) + _2138;
        _2237 = (exp2(_2419 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2403 * cbSceneParam._m0[78u].z)) * _2393.z) / cbSceneParam._m0[78u].z)) + _2139;
        _2239 = _2402 * _2140;
    }
    else
    {
        _2233 = _2137;
        _2235 = _2138;
        _2237 = _2139;
        _2239 = _2140;
    }
    float _2251 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2252 = _2251 == 3.0;
    float _2254 = log2(_2239);
    float _2258 = exp2(_2254 * cbSceneParam._m0[78u].x);
    float _2259 = exp2(_2254 * cbSceneParam._m0[78u].y);
    float _2260 = exp2(_2254 * cbSceneParam._m0[78u].z);
    float _2261 = _2258 * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)));
    float _2262 = _2259 * (isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)));
    float _2263 = _2260 * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)));
    float _2272 = (_2251 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2272 * (_2252 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2233)));
    SV_Target.y = _2272 * (_2252 ? _2262 : (_2262 + (cbSceneParam._m0[72u].w * _2235)));
    SV_Target.z = _2272 * (_2252 ? _2263 : (_2263 + (cbSceneParam._m0[72u].w * _2237)));
    SV_Target.w = cbInstanceData._m0[_2112].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2075) * _2111) * _2258) * _2272;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2076) * _2111) * _2259) * _2272;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2077) * _2111) * _2260) * _2272;
    SV_Target_1.w = cbInstanceData._m0[_2112].w;
}


