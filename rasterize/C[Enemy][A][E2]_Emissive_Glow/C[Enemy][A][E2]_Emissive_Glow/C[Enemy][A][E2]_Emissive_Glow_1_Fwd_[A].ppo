#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _864;
float _3061;
float _3062;
float _3063;
float _3064;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _255 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _284 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _309 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3073 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
    float _319 = (((_311 * _311) * (3.0 - (_311 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _326 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _327 = _326 * _176;
    float _328 = _326 * _177;
    float _329 = _326 * _178;
    float _3084 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3095 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3106 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _399 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _401 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _406 = _399 * _405;
    float _407 = _400 * _405;
    float _408 = _401 * _405;
    vec4 _413 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _415 = _413.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _543 = sqrt(((_399 * _399) + (_400 * _400)) + (_401 * _401));
        float _549 = (cbMatDynParam._m0[5u].x * _543) + cbMatDynParam._m0[5u].y;
        float _3117 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _543) + cbMatDynParam._m0[5u].w;
        float _3128 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) - _550)) + _550) < ((_415 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _448 = fma(_329, cbSceneParam._m0[5u].z, fma(_328, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _327));
    float _451 = fma(_329, cbSceneParam._m0[6u].z, fma(_328, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _327));
    float _454 = fma(_329, cbSceneParam._m0[7u].z, fma(_328, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _327));
    uint _467 = uint(roundEven(NORMAL.w)) * 13u;
    uint _468 = _467 + 9u;
    uint _469 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _475 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0)))) * cbInstanceData._m0[_469].x;
    float _476 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * cbInstanceData._m0[_469].y;
    float _477 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0)))) * cbInstanceData._m0[_469].z;
    float _3139 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    float _3150 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    vec4 _489 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _492 = _489.x * TEXCOORD_4;
    float _493 = dot(vec3(_327, _328, _329), vec3(_406, _407, _408));
    float _496 = _493 * 2.0;
    float _500 = (_496 * _327) - _406;
    float _501 = (_496 * _328) - _407;
    float _502 = (_496 * _329) - _408;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _592 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _596 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _621 = _524 + _327;
        float _622 = _528 + _328;
        float _623 = _532 + _329;
        float _633 = fma(_623, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) - _588;
        float _634 = fma(_623, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) - _592;
        float _635 = fma(_623, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) - _596;
        float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
        float _652 = ((_639 * _633) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_588 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_639 * _634) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_592 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_639 * _635) / cbModelParam._m0[34u].z) + ((((((_596 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(_327, _328, _329), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3209 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_327, _328, _329), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3220 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3231 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3242 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_327, _328, _329), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3275 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _865 = _693;
        _866 = _692;
        _867 = _704;
        _868 = _703;
        _869 = _702;
        _870 = _714;
        _871 = _713;
        _872 = _712;
        _873 = _727;
        _874 = _726;
        _875 = _725;
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _864;
        _865 = _864;
        _866 = _864;
        _867 = _864;
        _868 = _864;
        _869 = _864;
        _870 = _864;
        _871 = _864;
        _872 = _864;
        _873 = _864;
        _874 = _864;
        _875 = _864;
        _876 = 0.0;
        _877 = 0.0;
        _878 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _911 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _915 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _938 = _524 + _327;
        float _939 = _528 + _328;
        float _940 = _532 + _329;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_327, _328, _329), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3338 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_327, _328, _329), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3371 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_327, _328, _329), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3404 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _864;
        _1177 = _864;
        _1178 = _864;
        _1179 = _864;
        _1180 = _864;
        _1181 = _864;
        _1182 = _864;
        _1183 = _864;
        _1184 = _864;
        _1185 = _864;
        _1186 = _864;
        _1187 = _864;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _876)) + _876;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _877)) + _877;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _500 * 0.5;
    float _1245 = _501 * 0.5;
    float _1246 = _502 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_863, _867, _870, _873));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_865, _868, _871, _874));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _869, _872, _875));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1311 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1359 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1363 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1367 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1370 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1373 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1376 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1402;
        if (_1370 > 0.0)
        {
            _1402 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1402 = frontier_phi_17_15_ladder;
        }
        float _1607;
        if (_1373 > 0.0)
        {
            _1607 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1607 = frontier_phi_26_22_ladder;
        }
        float _1796;
        if (_1376 > 0.0)
        {
            _1796 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1796 = frontier_phi_38_33_ladder;
        }
        float _1798 = isnan(_1607) ? _1402 : (isnan(_1402) ? _1607 : min(_1402, _1607));
        float _1799 = isnan(_1796) ? _1798 : (isnan(_1798) ? _1796 : min(_1798, _1796));
        float _1803 = (_1799 * _1370) + _1359;
        float _1804 = (_1799 * _1373) + _1363;
        float _1805 = (_1799 * _1376) + _1367;
        float _1806 = _1799 * 9.9999997473787516355514526367188e-05;
        float _1808 = (-1.0) - _1806;
        float _1810 = _1806 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1805 > _1810) || ((_1805 < _1808) || ((_1804 > _1810) || ((_1804 < _1808) || ((_1803 < _1808) || (_1803 > _1810))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1805, cbModelParam._m0[9u].z, fma(_1804, cbModelParam._m0[9u].y, _1803 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1805, cbModelParam._m0[10u].z, fma(_1804, cbModelParam._m0[10u].y, _1803 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1805, cbModelParam._m0[11u].z, fma(_1804, cbModelParam._m0[11u].y, _1803 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_16_38_ladder = _1902.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1902.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1902.x * cbModelParam._m0[1u].y;
        }
        _1392 = frontier_phi_16_38_ladder_2;
        _1394 = frontier_phi_16_38_ladder_1;
        _1396 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1311);
        _1392 = _1380.x * cbModelParam._m0[1u].y;
        _1394 = _1380.y * cbModelParam._m0[1u].y;
        _1396 = _1380.z * cbModelParam._m0[1u].y;
    }
    float _1399 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1469 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1472 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1612;
        if (_1466 > 0.0)
        {
            _1612 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1612 = frontier_phi_28_24_ladder;
        }
        float _1823;
        if (_1469 > 0.0)
        {
            _1823 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1823 = frontier_phi_40_35_ladder;
        }
        float _1974;
        if (_1472 > 0.0)
        {
            _1974 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1974 = frontier_phi_49_46_ladder;
        }
        float _1976 = isnan(_1823) ? _1612 : (isnan(_1612) ? _1823 : min(_1612, _1823));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1466) + _1455;
        float _1982 = (_1977 * _1469) + _1459;
        float _1983 = (_1977 * _1472) + _1463;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1985 = (-1.0) - _1984;
        float _1987 = _1984 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1983 > _1987) || ((_1983 < _1985) || ((_1982 > _1987) || ((_1982 < _1985) || ((_1981 < _1985) || (_1981 > _1987))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1983, cbModelParam._m0[17u].z, fma(_1982, cbModelParam._m0[17u].y, _1981 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1983, cbModelParam._m0[18u].z, fma(_1982, cbModelParam._m0[18u].y, _1981 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1983, cbModelParam._m0[19u].z, fma(_1982, cbModelParam._m0[19u].y, _1981 * cbModelParam._m0[19u].x))), _1399);
            frontier_phi_25_49_ladder = _2211.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2211.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2211.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_25_49_ladder_2;
        _1493 = frontier_phi_25_49_ladder_1;
        _1495 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1399);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1507 = _492 * 0.01200000010430812835693359375;
    float _1509 = _1507 * ((cbModelParam._m0[1u].w * (_1491 - _1392)) + _1392);
    float _1510 = _1507 * ((cbModelParam._m0[1u].w * (_1493 - _1394)) + _1394);
    float _1511 = _1507 * ((cbModelParam._m0[1u].w * (_1495 - _1396)) + _1396);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1509 * cbSceneParam._m0[91u].x));
    uvec4 _1530 = floatBitsToUint(cbInstanceData._m0[_467 + 5u]);
    uint _1532 = _1530.x * 14u;
    uint _1533 = _1532 + 13u;
    float _1540 = _492 + (-1.0);
    float _1545 = (cbLight._m0[_1533].x * _1540) + 1.0;
    float _1546 = (cbLight._m0[_1533].y * _1540) + 1.0;
    float _1547 = (cbLight._m0[_1533].z * _1540) + 1.0;
    float _1548 = (cbLight._m0[_1533].w * _1540) + 1.0;
    uint _1549 = _1532 + 5u;
    float _1555 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1559 = _1532 + 4u;
    float _1566 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1570 = _1532 | 1u;
    float _1581 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_327, _328, _329));
    float _1584 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_327, _328, _329));
    float _3540 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _3551 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1589 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.3183098733425140380859375;
    float _1591 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.3183098733425140380859375;
    float _1598 = ((cbLight._m0[_1549].x * _1555) * _1591) + ((cbLight._m0[_1559].x * _1566) * _1589);
    float _1599 = ((_1555 * cbLight._m0[_1549].y) * _1591) + ((_1566 * cbLight._m0[_1559].y) * _1589);
    float _1600 = ((_1555 * cbLight._m0[_1549].z) * _1591) + ((_1566 * cbLight._m0[_1559].z) * _1589);
    uvec4 _1604 = floatBitsToUint(cbLight._m0[_1532 + 12u]);
    bool _1606 = _1604.x == 0u;
    float _1617;
    float _1619;
    float _1621;
    if (_1606)
    {
        _1617 = _1598;
        _1619 = _1599;
        _1621 = _1600;
    }
    else
    {
        uint _1625 = _1532 + 6u;
        float _1641 = (dot(vec3(cbLight._m0[_1532 + 2u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _1642 = _1641 * _1641;
        float _3562 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1644 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1617 = (((cbLight._m0[_1625].x * 0.3183098733425140380859375) * _1643) * _1644) + _1598;
        _1619 = (((cbLight._m0[_1625].y * 0.3183098733425140380859375) * _1643) * _1644) + _1599;
        _1621 = (((cbLight._m0[_1625].z * 0.3183098733425140380859375) * _1643) * _1644) + _1600;
    }
    bool _1624 = _1604.y == 0u;
    float _1662;
    float _1664;
    float _1666;
    if (_1624)
    {
        _1662 = _1617;
        _1664 = _1619;
        _1666 = _1621;
    }
    else
    {
        uint _1767 = _1532 + 7u;
        float _1783 = (dot(vec3(cbLight._m0[_1532 + 3u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _1784 = _1783 * _1783;
        float _3578 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1786 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1662 = (((cbLight._m0[_1767].x * 0.3183098733425140380859375) * _1785) * _1786) + _1617;
        _1664 = (((cbLight._m0[_1767].y * 0.3183098733425140380859375) * _1785) * _1786) + _1619;
        _1666 = (((cbLight._m0[_1767].z * 0.3183098733425140380859375) * _1785) * _1786) + _1621;
    }
    uint _1668 = _1532 + 8u;
    float _1674 = cbLight._m0[_1532].x + _406;
    float _1675 = cbLight._m0[_1532].y + _407;
    float _1676 = cbLight._m0[_1532].z + _408;
    float _1680 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
    float _1684 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1532].xyz));
    float _3594 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _1688 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _1689 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1674 * _1680, _1675 * _1680, _1676 * _1680));
    float _3616 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1700 = (exp2(log2(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1706 = (0.5 / ((_1687 + 9.9999999392252902907785028219223e-09) + _1688)) * _1687;
    float _3627 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1708 = (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.31831014156341552734375;
    uint _1719 = _1532 + 9u;
    float _1725 = cbLight._m0[_1570].x + _406;
    float _1726 = cbLight._m0[_1570].y + _407;
    float _1727 = cbLight._m0[_1570].z + _408;
    float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
    float _1735 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1570].xyz));
    float _3638 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _1739 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1725 * _1731, _1726 * _1731, _1727 * _1731));
    float _3649 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1748 = (exp2(log2(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1752 = (0.5 / ((_1738 + 9.9999999392252902907785028219223e-09) + _1688)) * _1738;
    float _3660 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1754 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.31831014156341552734375;
    float _1764 = (((_1748 * cbLight._m0[_1719].x) * _1754) * _1555) + (((_1700 * cbLight._m0[_1668].x) * _1708) * _1566);
    float _1765 = (((_1748 * cbLight._m0[_1719].y) * _1754) * _1555) + (((_1700 * cbLight._m0[_1668].y) * _1708) * _1566);
    float _1766 = (((_1748 * cbLight._m0[_1719].z) * _1754) * _1555) + (((_1700 * cbLight._m0[_1668].z) * _1708) * _1566);
    float _1828;
    float _1830;
    float _1832;
    if (_1606)
    {
        _1828 = _1764;
        _1830 = _1765;
        _1832 = _1766;
    }
    else
    {
        uint _1834 = _1532 + 10u;
        uint _1840 = _1532 + 2u;
        float _1846 = cbLight._m0[_1840].x + _406;
        float _1847 = cbLight._m0[_1840].y + _407;
        float _1848 = cbLight._m0[_1840].z + _408;
        float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
        float _1856 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1840].xyz));
        float _3671 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1859 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1860 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1846 * _1852, _1847 * _1852, _1848 * _1852));
        float _3682 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1869 = (exp2(log2(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1873 = (0.5 / ((_1859 + 9.9999999392252902907785028219223e-09) + _1688)) * _1859;
        float _3693 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1875 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.31831014156341552734375;
        float _1876 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1828 = (((_1869 * cbLight._m0[_1834].x) * _1875) * _1876) + _1764;
        _1830 = (((_1869 * cbLight._m0[_1834].y) * _1875) * _1876) + _1765;
        _1832 = (((_1869 * cbLight._m0[_1834].z) * _1875) * _1876) + _1766;
    }
    float _1911;
    float _1913;
    float _1915;
    if (_1624)
    {
        _1911 = _1828;
        _1913 = _1830;
        _1915 = _1832;
    }
    else
    {
        uint _1922 = _1532 + 11u;
        uint _1928 = _1532 + 3u;
        float _1934 = cbLight._m0[_1928].x + _406;
        float _1935 = cbLight._m0[_1928].y + _407;
        float _1936 = cbLight._m0[_1928].z + _408;
        float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
        float _1944 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1928].xyz));
        float _3709 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_1934 * _1940, _1935 * _1940, _1936 * _1940));
        float _3720 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1961 = (0.5 / ((_1947 + 9.9999999392252902907785028219223e-09) + _1688)) * _1947;
        float _3731 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1963 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.31831014156341552734375;
        float _1964 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1911 = (((_1957 * cbLight._m0[_1922].x) * _1963) * _1964) + _1828;
        _1913 = (((_1957 * cbLight._m0[_1922].y) * _1963) * _1964) + _1830;
        _1915 = (((_1957 * cbLight._m0[_1922].z) * _1963) * _1964) + _1832;
    }
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    if (_1530.y == 0u)
    {
        float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2039;
        float _2041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2039;
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2039;
        uvec4 _2054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2055 = _2054.x;
        uint _2066 = uint((float(_2054.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2055))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2055)));
        float _2076 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2077 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        uint _2080 = uint(isnan(14.0) ? _2077 : (isnan(_2077) ? 14.0 : min(_2077, 14.0)));
        uvec4 _2085 = texelFetch(g_lightClusterGridBuffer, int(((_2080 << 2u) + (_2066 << 6u)) >> 2u));
        uint _2086 = _2085.x;
        uint _2087 = _2054.z;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        if (((((1u << ((_2087 >> 4u) & 15u)) + 4294967295u) & _2086) == 0u) || ((_2087 & 240u) == 0u))
        {
            _2216 = 0.0;
            _2218 = 0.0;
            _2220 = 0.0;
            _2222 = 0.0;
            _2224 = 0.0;
            _2226 = 0.0;
        }
        else
        {
            float _2217;
            float _2219;
            float _2221;
            float _2223;
            float _2225;
            float _2227;
            float _2376 = 0.0;
            float _2377 = 0.0;
            float _2378 = 0.0;
            float _2379 = 0.0;
            float _2380 = 0.0;
            float _2381 = 0.0;
            uint _2382 = 0u;
            uint _2391;
            bool _2392;
            for (;;)
            {
                _2391 = texelFetch(g_lightClassification, int((((_2080 << 5u) + (_2066 << 9u)) + (_2382 << 2u)) >> 2u)).x;
                _2392 = _2391 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2392)
                {
                    frontier_phi_66_pred = _2376;
                    frontier_phi_66_pred_1 = _2381;
                    frontier_phi_66_pred_2 = _2380;
                    frontier_phi_66_pred_3 = _2379;
                    frontier_phi_66_pred_4 = _2378;
                    frontier_phi_66_pred_5 = _2377;
                }
                else
                {
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    uint _2527;
                    _2521 = _2376;
                    _2522 = _2377;
                    _2523 = _2378;
                    _2524 = _2379;
                    _2525 = _2380;
                    _2526 = _2381;
                    _2527 = _2391;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    for (;;)
                    {
                        uint _2531 = uint(findLSB(_2527)) + (_2382 << 5u);
                        uint _2528 = (_2527 + 4294967295u) & _2527;
                        uint _2533 = _2531 * 48u;
                        vec4 _2547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 3u)).x));
                        uint _2553 = (_2531 * 48u) + 4u;
                        vec4 _2566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2553)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2553 + 3u)).x));
                        uint _2572 = (_2531 * 48u) + 8u;
                        vec3 _2583 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x));
                        float _2587 = _2547.x - _2040;
                        float _2588 = _2547.y - _2041;
                        float _2589 = _2547.z - _2042;
                        float _2590 = dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589));
                        float _2593 = inversesqrt(_2590);
                        float _2602 = 1.0 - (_2590 * _2547.w);
                        float _3757 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                        float _2603 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                        float _2604 = sqrt(_2590) * _2566.w;
                        float _2607 = 1.39999997615814208984375 / (_2604 + 1.39999997615814208984375);
                        float _2608 = _2607 * _2607;
                        float _2611 = ((1.0 - _2608) * dot(vec3(_448, _451, _454), vec3(_2593 * _2587, _2593 * _2588, _2593 * _2589))) + _2608;
                        float _2614 = _2604 * _2604;
                        float _2618 = ((isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))) * _2603) / ((_2614 * 0.699999988079071044921875) + 1.0);
                        float _2622 = (-0.0) - _2040;
                        float _2623 = (-0.0) - _2041;
                        float _2624 = (-0.0) - _2042;
                        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
                        float _2632 = dot(vec3(_448, _451, _454), vec3(_2628 * _2622, _2628 * _2623, _2628 * _2624));
                        float _3773 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                        float _3784 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2636 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
                        float _2640 = (0.5 / (((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) + 9.9999999392252902907785028219223e-09) + _2636)) * _2636;
                        float _3795 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _2649 = (((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 3.1415927410125732421875) / ((_2614 * 2.1991131305694580078125) + 3.141590118408203125)) * _2603;
                        _2451 = (_2618 * _2566.x) + _2524;
                        _2452 = (_2618 * _2566.y) + _2525;
                        _2453 = (_2618 * _2566.z) + _2526;
                        _2448 = (_2649 * _2583.x) + _2521;
                        _2449 = (_2649 * _2583.y) + _2522;
                        _2450 = (_2649 * _2583.z) + _2523;
                        if (_2528 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2521 = _2448;
                            _2522 = _2449;
                            _2523 = _2450;
                            _2524 = _2451;
                            _2525 = _2452;
                            _2526 = _2453;
                            _2527 = _2528;
                        }
                    }
                    frontier_phi_66_pred = _2448;
                    frontier_phi_66_pred_1 = _2453;
                    frontier_phi_66_pred_2 = _2452;
                    frontier_phi_66_pred_3 = _2451;
                    frontier_phi_66_pred_4 = _2450;
                    frontier_phi_66_pred_5 = _2449;
                }
                _2217 = frontier_phi_66_pred;
                _2227 = frontier_phi_66_pred_1;
                _2225 = frontier_phi_66_pred_2;
                _2223 = frontier_phi_66_pred_3;
                _2221 = frontier_phi_66_pred_4;
                _2219 = frontier_phi_66_pred_5;
                uint _2383 = _2382 + 1u;
                if (_2383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2376 = _2217;
                    _2377 = _2219;
                    _2378 = _2221;
                    _2379 = _2223;
                    _2380 = _2225;
                    _2381 = _2227;
                    _2382 = _2383;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2216 = _2217;
            _2218 = _2219;
            _2220 = _2221;
            _2222 = _2223;
            _2224 = _2225;
            _2226 = _2227;
        }
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.z;
        uint _2233 = (_2231 >> 8u) & 15u;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((4294967295u << _2233) & _2086) == 0u)
        {
            _2347 = _2216;
            _2349 = _2218;
            _2351 = _2220;
            _2353 = _2222;
            _2355 = _2224;
            _2357 = _2226;
        }
        else
        {
            float _2372 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2233 < ((_2231 >> 12u) & 15u))
            {
                float _2348;
                float _2350;
                float _2352;
                float _2354;
                float _2356;
                float _2358;
                float _2504 = _2216;
                float _2505 = _2218;
                float _2506 = _2220;
                float _2507 = _2222;
                float _2508 = _2224;
                float _2509 = _2226;
                uint _2510 = _2233;
                uint _2519;
                bool _2520;
                for (;;)
                {
                    _2519 = texelFetch(g_lightClassification, int((((_2080 << 5u) + (_2066 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                    _2520 = _2519 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2520)
                    {
                        frontier_phi_77_pred = _2509;
                        frontier_phi_77_pred_1 = _2508;
                        frontier_phi_77_pred_2 = _2507;
                        frontier_phi_77_pred_3 = _2506;
                        frontier_phi_77_pred_4 = _2505;
                        frontier_phi_77_pred_5 = _2504;
                    }
                    else
                    {
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2667;
                        float _2668;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2676 = _2504;
                        float _2677 = _2505;
                        float _2678 = _2506;
                        float _2679 = _2507;
                        float _2680 = _2508;
                        float _2681 = _2509;
                        uint _2682 = _2519;
                        uint _2683;
                        vec4 _2708;
                        float _2709;
                        vec4 _2724;
                        vec3 _2736;
                        vec4 _2751;
                        vec4 _2767;
                        float _2814;
                        bool _2815;
                        for (;;)
                        {
                            uint _2693 = ((_2510 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2682));
                            _2683 = (_2682 + 4294967295u) & _2682;
                            uint _2695 = _2693 * 40u;
                            _2708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 3u)).x));
                            _2709 = _2708.w;
                            uint _2711 = (_2693 * 40u) + 4u;
                            _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            uint _2726 = (_2693 * 40u) + 8u;
                            _2736 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x));
                            uint _2738 = (_2693 * 40u) + 16u;
                            _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            uint _2754 = (_2693 * 40u) + 20u;
                            _2767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2754 + 3u)).x));
                            uint _2770 = (_2693 * 40u) + 24u;
                            vec4 _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            uint _2789 = (_2693 * 40u) + 28u;
                            vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            _2814 = fma(_2042, _2802.z, fma(_2041, _2802.y, _2802.x * _2040)) + _2802.w;
                            _2815 = !((fma(_2042, _2783.z, fma(_2041, _2783.y, _2783.x * _2040)) + _2783.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2815)
                            {
                                float _2842 = _2708.x - _2040;
                                float _2843 = _2708.y - _2041;
                                float _2844 = _2708.z - _2042;
                                float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                                float _2848 = inversesqrt(_2845);
                                float _2849 = _2848 * _2842;
                                float _2850 = _2848 * _2843;
                                float _2851 = _2848 * _2844;
                                float _2855 = 1.0 - (_2845 / (_2709 * _2709));
                                float _3806 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                                float _2856 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
                                float _2860 = sqrt(_2845) * _2724.w;
                                float _2862 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                                float _2863 = _2862 * _2862;
                                float _2864 = 1.0 - _2863;
                                float _2866 = (_2864 * dot(vec3(_2849, _2850, _2851), vec3(_448, _451, _454))) + _2863;
                                float _2869 = _2860 * _2860;
                                float _2873 = (fma(_2042, _2751.z, fma(_2041, _2751.y, _2751.x * _2040)) + _2751.w) / _2814;
                                float _2874 = (fma(_2042, _2767.z, fma(_2041, _2767.y, _2767.x * _2040)) + _2767.w) / _2814;
                                float _2878 = 1.0 - dot(vec2(_2873, _2874), vec2(_2873, _2874));
                                float _3822 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2879 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                                float _2880 = _2879 * (((isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))) * _2856) / ((_2869 * 0.699999988079071044921875) + 1.0));
                                float _2890 = dot(vec3(_448, _451, _454), vec3((-0.0) - (_2040 * _2372), (-0.0) - (_2041 * _2372), (-0.0) - (_2042 * _2372)));
                                float _3833 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                                float _2898 = (_2864 * dot(vec3(_448, _451, _454), vec3(_2849, _2850, _2851))) + _2863;
                                float _3844 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                                float _2903 = (0.5 / (((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) + 9.9999999392252902907785028219223e-09) + _2899)) * _2899;
                                float _3855 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2910 = (_2879 * _2856) * (((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 3.1415927410125732421875) / ((_2869 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2880 * _2724.y;
                                frontier_phi_83_pred_1 = _2880 * _2724.x;
                                frontier_phi_83_pred_2 = _2910 * _2736.z;
                                frontier_phi_83_pred_3 = _2910 * _2736.y;
                                frontier_phi_83_pred_4 = _2910 * _2736.x;
                                frontier_phi_83_pred_5 = _2880 * _2724.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2918 = frontier_phi_83_pred;
                            _2917 = frontier_phi_83_pred_1;
                            _2916 = frontier_phi_83_pred_2;
                            _2915 = frontier_phi_83_pred_3;
                            _2914 = frontier_phi_83_pred_4;
                            _2919 = frontier_phi_83_pred_5;
                            _2666 = _2917 + _2679;
                            _2667 = _2918 + _2680;
                            _2668 = _2919 + _2681;
                            _2663 = _2914 + _2676;
                            _2664 = _2915 + _2677;
                            _2665 = _2916 + _2678;
                            if (_2683 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2667;
                                _2681 = _2668;
                                _2682 = _2683;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2668;
                        frontier_phi_77_pred_1 = _2667;
                        frontier_phi_77_pred_2 = _2666;
                        frontier_phi_77_pred_3 = _2665;
                        frontier_phi_77_pred_4 = _2664;
                        frontier_phi_77_pred_5 = _2663;
                    }
                    _2358 = frontier_phi_77_pred;
                    _2356 = frontier_phi_77_pred_1;
                    _2354 = frontier_phi_77_pred_2;
                    _2352 = frontier_phi_77_pred_3;
                    _2350 = frontier_phi_77_pred_4;
                    _2348 = frontier_phi_77_pred_5;
                    uint _2511 = _2510 + 1u;
                    if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2504 = _2348;
                        _2505 = _2350;
                        _2506 = _2352;
                        _2507 = _2354;
                        _2508 = _2356;
                        _2509 = _2358;
                        _2510 = _2511;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2352;
                frontier_phi_58_59_ladder_1 = _2358;
                frontier_phi_58_59_ladder_2 = _2356;
                frontier_phi_58_59_ladder_3 = _2354;
                frontier_phi_58_59_ladder_4 = _2350;
                frontier_phi_58_59_ladder_5 = _2348;
            }
            else
            {
                frontier_phi_58_59_ladder = _2220;
                frontier_phi_58_59_ladder_1 = _2226;
                frontier_phi_58_59_ladder_2 = _2224;
                frontier_phi_58_59_ladder_3 = _2222;
                frontier_phi_58_59_ladder_4 = _2218;
                frontier_phi_58_59_ladder_5 = _2216;
            }
            _2347 = frontier_phi_58_59_ladder_5;
            _2349 = frontier_phi_58_59_ladder_4;
            _2351 = frontier_phi_58_59_ladder;
            _2353 = frontier_phi_58_59_ladder_3;
            _2355 = frontier_phi_58_59_ladder_2;
            _2357 = frontier_phi_58_59_ladder_1;
        }
        float _2362 = isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0));
        _2099 = (_2362 * _2353) + _1662;
        _2101 = (_2362 * _2355) + _1664;
        _2103 = (_2362 * _2357) + _1666;
        _2105 = ((_2347 * 0.039999999105930328369140625) * _2362) + _1911;
        _2107 = ((_2349 * 0.039999999105930328369140625) * _2362) + _1913;
        _2109 = ((_2351 * 0.039999999105930328369140625) * _2362) + _1915;
    }
    else
    {
        _2099 = _1662;
        _2101 = _1664;
        _2103 = _1666;
        _2105 = _1911;
        _2107 = _1913;
        _2109 = _1915;
    }
    uint _2115 = _468 + uint(cbMatDynParam._m0[0u].w);
    float _2121 = (_319 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _284.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _255.x))) * cbInstanceData._m0[_2115].x;
    float _2122 = (_319 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _284.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _255.y))) * cbInstanceData._m0[_2115].y;
    float _2123 = (_319 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _284.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _255.z))) * cbInstanceData._m0[_2115].z;
    float _3871 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3882 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3893 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _2140 = (((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_2099 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _492))) + ((_2105 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + _2121;
    float _2142 = (_2122 + ((_2107 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_2101 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _492)));
    float _2144 = (_2123 + ((_2109 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1302)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_2103 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _492)));
    float _2145 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2146 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2153 = cbMtdParam._m0[2u].x * _2121;
    float _2154 = cbMtdParam._m0[2u].y * _2122;
    float _2155 = cbMtdParam._m0[2u].z * _2123;
    float _3919 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2157 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    uint _2158 = _467 + 6u;
    float _2166 = _427 / cbSceneParam._m0[86u].x;
    float _2167 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2181 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2166, _2167, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2183 = _2181.x;
    float _2184 = _2181.y;
    float _2185 = _2181.z;
    float _2186 = _2181.w;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _2241 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _2242 = _2241 / _348;
        float _2253 = _2242 * _399;
        float _2254 = _400 * _2242;
        float _2255 = (-0.0) - _2254;
        float _2257 = _2242 * _401;
        float _2259 = (cbSceneParam._m0[77u].w * _2255) / _2241;
        float _2260 = _2259 + cbSceneParam._m0[79u].w;
        float _2261 = cbSceneParam._m0[79u].w - _2254;
        float _2267 = sqrt(((_2253 * _2253) + (_2254 * _2254)) + (_2257 * _2257));
        float _2270 = (1.0 - (cbSceneParam._m0[77u].w / _2241)) * _2267;
        float _2275 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2277 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2461;
        if (abs((_2255 - _2259) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2461 = ((((_2260 > 0.0) ? exp2(_2275 * _2260) : (2.0 - exp2(_2277 * _2260))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2270;
        }
        else
        {
            float _2405 = 1.0 / cbSceneParam._m0[80u].x;
            float _2406 = isnan(_2261) ? _2260 : (isnan(_2260) ? _2261 : max(_2260, _2261));
            float _2407 = isnan(_2261) ? _2260 : (isnan(_2260) ? _2261 : min(_2260, _2261));
            float _2416 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : min(_2406, 0.0));
            float _2417 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : min(_2407, 0.0));
            _2461 = ((abs(_2267 / _2255) * cbSceneParam._m0[80u].y) * ((((_2416 - _2417) * 2.0) - ((exp2(_2275 * (isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0)))) - exp2(_2275 * (isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))))) * _2405)) - ((exp2(_2277 * _2416) - exp2(_2277 * _2417)) * _2405))) + (_2270 * cbSceneParam._m0[80u].z);
        }
        vec4 _2463 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2166, _2167, 1.0), 0.0);
        float _2472 = exp2((_2461 * (-1.44269502162933349609375)) * (1.0 - _2463.w));
        float _2473 = log2(_2472);
        float _2489 = log2(_2186);
        _2279 = (exp2(_2489 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].x)) * _2463.x) / cbSceneParam._m0[78u].x)) + _2183;
        _2281 = (exp2(_2489 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].y)) * _2463.y) / cbSceneParam._m0[78u].y)) + _2184;
        _2283 = (exp2(_2489 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2473 * cbSceneParam._m0[78u].z)) * _2463.z) / cbSceneParam._m0[78u].z)) + _2185;
        _2285 = _2472 * _2186;
    }
    else
    {
        _2279 = _2183;
        _2281 = _2184;
        _2283 = _2185;
        _2285 = _2186;
    }
    bool _2499;
    vec4 _2295;
    vec4 _2317;
    float _2319;
    float _2323;
    float _2324;
    float _2325;
    float _2328;
    float _2331;
    float _2334;
    float _2335;
    bool _2346;
    for (;;)
    {
        _2295 = cbMatDynParam._m0[0u];
        float _2297 = roundEven(_2295.y);
        bool _2298 = _2297 == 3.0;
        float _2299 = log2(_2285);
        float _2303 = exp2(_2299 * cbSceneParam._m0[78u].x);
        float _2304 = exp2(_2299 * cbSceneParam._m0[78u].y);
        float _2305 = exp2(_2299 * cbSceneParam._m0[78u].z);
        float _2306 = _2303 * _2145;
        float _2307 = _2304 * _2146;
        float _2308 = _2305 * _2147;
        float _2315 = _415 + (-0.5);
        _2317 = cbMtdParam._m0[1u];
        _2319 = _2317.y * _2315;
        float _2322 = (_2297 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2323 = _2322 * (_2298 ? _2306 : (_2306 + (cbSceneParam._m0[72u].w * _2279)));
        _2324 = _2322 * (_2298 ? _2307 : (_2307 + (cbSceneParam._m0[72u].w * _2281)));
        _2325 = _2322 * (_2298 ? _2308 : (_2308 + (cbSceneParam._m0[72u].w * _2283)));
        _2328 = ((_2153 * _2157) * _2303) * _2322;
        _2331 = ((_2154 * _2157) * _2304) * _2322;
        _2334 = ((_2155 * _2157) * _2305) * _2322;
        _2335 = _2315 * 0.999000012874603271484375;
        _2346 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2346)
        {
            if ((cbInstanceData._m0[_467 + 7u].x + _2335) < 0.5)
            {
                _2499 = true;
                break;
            }
        }
        uint _2440 = _468 + uint(_2295.w);
        if ((cbInstanceData._m0[_2440].w < 1.0) && ((cbInstanceData._m0[_2440].w + _2335) < 0.5))
        {
            _2499 = true;
            break;
        }
        if ((_2319 + 1.0) < _2317.x)
        {
            _2499 = true;
            break;
        }
        _2499 = false;
        break;
    }
    float _2654;
    if (_2499)
    {
        discard_state = true;
        _2654 = 0.0;
    }
    else
    {
        _2654 = cbInstanceData._m0[_2158].w;
    }
    SV_Target.x = _2323;
    SV_Target.y = _2324;
    SV_Target.z = _2325;
    SV_Target.w = _2654;
    SV_Target_1.x = _2328;
    SV_Target_1.y = _2331;
    SV_Target_1.z = _2334;
    SV_Target_1.w = cbInstanceData._m0[_2158].w;
    discard_exit();
}


