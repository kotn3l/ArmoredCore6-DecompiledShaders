#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _855;
float _3078;
float _3079;
float _3080;
float _3081;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _177 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _178 = _177 * NORMAL.x;
    float _179 = _177 * NORMAL.y;
    float _180 = _177 * NORMAL.z;
    vec4 _199 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _225 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _233 = (_225.x * cbMtdParam._m0[12u].x) + (_199.x * cbMtdParam._m0[9u].x);
    float _234 = (_225.y * cbMtdParam._m0[12u].y) + (_199.y * cbMtdParam._m0[9u].y);
    float _235 = (_225.z * cbMtdParam._m0[12u].z) + (_199.z * cbMtdParam._m0[9u].z);
    vec4 _269 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _298 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _315 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _316 = _315 * _178;
    float _317 = _315 * _179;
    float _318 = _315 * _180;
    float _3090 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3101 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3112 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    vec4 _403 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _405 = _403.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _534 = sqrt(((_389 * _389) + (_390 * _390)) + (_391 * _391));
        float _540 = (cbMatDynParam._m0[5u].x * _534) + cbMatDynParam._m0[5u].y;
        float _3123 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        float _541 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _545 = (cbMatDynParam._m0[5u].z * _534) + cbMatDynParam._m0[5u].w;
        float _3134 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0))) - _541)) + _541) < ((_405 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _417 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _418 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _441 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _444 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = _457 + 9u;
    uint _459 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _465 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0)))) * cbInstanceData._m0[_459].x;
    float _466 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0)))) * cbInstanceData._m0[_459].y;
    float _467 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0)))) * cbInstanceData._m0[_459].z;
    float _3145 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
    float _3156 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
    float _3167 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _417, cbSceneParam._m0[86u].y * _418));
    float _482 = _479.x * TEXCOORD_4;
    float _483 = dot(vec3(_316, _317, _318), vec3(_396, _397, _398));
    float _486 = _483 * 2.0;
    float _491 = (_486 * _316) - _396;
    float _492 = (_486 * _317) - _397;
    float _493 = (_486 * _318) - _398;
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_523, cbModelParam._m0[26u].z, fma(_519, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _515));
        float _583 = fma(_523, cbModelParam._m0[27u].z, fma(_519, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _515));
        float _587 = fma(_523, cbModelParam._m0[28u].z, fma(_519, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _515));
        float _612 = _515 + _316;
        float _613 = _519 + _317;
        float _614 = _523 + _318;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_316, _317, _318), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3215 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_316, _317, _318), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3248 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_316, _317, _318), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3281 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _898 = fma(_523, cbModelParam._m0[30u].z, fma(_519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _515));
        float _902 = fma(_523, cbModelParam._m0[31u].z, fma(_519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _515));
        float _906 = fma(_523, cbModelParam._m0[32u].z, fma(_519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _515));
        float _929 = _515 + _316;
        float _930 = _519 + _317;
        float _931 = _523 + _318;
        float _941 = fma(_931, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _929)) - _898;
        float _942 = fma(_931, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _929)) - _902;
        float _943 = fma(_931, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _929)) - _906;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_898 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_902 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[35u].z) + ((((((_906 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _997 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_964.x + (-0.5));
        float _999 = _997 * (_964.y + (-0.5));
        float _1000 = _997 * (_964.z + (-0.5));
        float _1007 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_971.x + (-0.5));
        float _1009 = _1007 * (_971.y + (-0.5));
        float _1010 = _1007 * (_971.z + (-0.5));
        float _1017 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_978.x + (-0.5));
        float _1019 = _1017 * (_978.y + (-0.5));
        float _1020 = _1017 * (_978.z + (-0.5));
        float _1027 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_985.x + (-0.5));
        float _1029 = _1027 * (_985.y + (-0.5));
        float _1030 = _1027 * (_985.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_316, _317, _318), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3344 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_1061 + 1.0))) + _1066) * _1031;
        float _1076 = _999 * 0.5;
        float _1077 = _1009 * 0.5;
        float _1078 = _1019 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_316, _317, _318), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3377 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_1103 + 1.0))) + _1108) * _1032;
        float _1118 = _1000 * 0.5;
        float _1119 = _1010 * 0.5;
        float _1120 = _1020 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_316, _317, _318), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3410 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_1145 + 1.0))) + _1150) * _1033;
        _1167 = _1000;
        _1168 = _999;
        _1169 = _998;
        _1170 = _1010;
        _1171 = _1009;
        _1172 = _1008;
        _1173 = _1020;
        _1174 = _1019;
        _1175 = _1018;
        _1176 = _1033;
        _1177 = _1032;
        _1178 = _1031;
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = _855;
        _1177 = _855;
        _1178 = _855;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1214 = fma(_1193, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1191 * cbSceneParam._m0[89u].x));
    float _1217 = fma(_1193, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1191 * cbSceneParam._m0[90u].x));
    float _1220 = fma(_1193, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1191));
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = _493 * 0.5;
    float _1238 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1241 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1244 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1278;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1251 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_854, _858, _861, _864));
        float _1255 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_856, _859, _862, _865));
        float _1259 = dot(vec4(_1235, _1236, _1237, 1.0), vec4(_857, _860, _863, _866));
        float _1266 = dot(vec4(cbModelParam._m0[39u]), vec4(_1235, _1236, _1237, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1289;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1280 = dot(vec4(cbModelParam._m0[40u]), vec4(_1235, _1236, _1237, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1280) ? 0.0 : (isnan(0.0) ? _1280 : max(0.0, _1280))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1293 = (_1289 * cbModelParam._m0[1u].x) + (_1278 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_523, cbModelParam._m0[13u].z, fma(_519, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_523, cbModelParam._m0[14u].z, fma(_519, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_523, cbModelParam._m0[15u].z, fma(_519, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_493, cbModelParam._m0[13u].z, fma(_492, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _491));
        float _1364 = fma(_493, cbModelParam._m0[14u].z, fma(_492, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _491));
        float _1367 = fma(_493, cbModelParam._m0[15u].z, fma(_492, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _491));
        float _1393;
        if (_1361 > 0.0)
        {
            _1393 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1393 = frontier_phi_17_15_ladder;
        }
        float _1620;
        if (_1364 > 0.0)
        {
            _1620 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1620 = frontier_phi_26_22_ladder;
        }
        float _1812;
        if (_1367 > 0.0)
        {
            _1812 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1812 = frontier_phi_38_33_ladder;
        }
        float _1814 = isnan(_1620) ? _1393 : (isnan(_1393) ? _1620 : min(_1393, _1620));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1361) + _1350;
        float _1820 = (_1815 * _1364) + _1354;
        float _1821 = (_1815 * _1367) + _1358;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1824 = (-1.0) - _1822;
        float _1826 = _1822 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1821 > _1826) || ((_1821 < _1824) || ((_1820 > _1826) || ((_1820 < _1824) || ((_1819 < _1824) || (_1819 > _1826))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1302);
            frontier_phi_16_38_ladder = _1918.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1918.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1918.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_16_38_ladder_2;
        _1385 = frontier_phi_16_38_ladder_1;
        _1387 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_491, _492, _493), _1302);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1390 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_523, cbModelParam._m0[21u].z, fma(_519, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_523, cbModelParam._m0[22u].z, fma(_519, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_523, cbModelParam._m0[23u].z, fma(_519, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_493, cbModelParam._m0[21u].z, fma(_492, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _491));
        float _1460 = fma(_493, cbModelParam._m0[22u].z, fma(_492, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _491));
        float _1463 = fma(_493, cbModelParam._m0[23u].z, fma(_492, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _491));
        float _1625;
        if (_1457 > 0.0)
        {
            _1625 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1625 = frontier_phi_28_24_ladder;
        }
        float _1839;
        if (_1460 > 0.0)
        {
            _1839 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1839 = frontier_phi_40_35_ladder;
        }
        float _1990;
        if (_1463 > 0.0)
        {
            _1990 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1990 = frontier_phi_49_46_ladder;
        }
        float _1992 = isnan(_1839) ? _1625 : (isnan(_1625) ? _1839 : min(_1625, _1839));
        float _1993 = isnan(_1990) ? _1992 : (isnan(_1992) ? _1990 : min(_1992, _1990));
        float _1997 = (_1993 * _1457) + _1446;
        float _1998 = (_1993 * _1460) + _1450;
        float _1999 = (_1993 * _1463) + _1454;
        float _2000 = _1993 * 9.9999997473787516355514526367188e-05;
        float _2001 = (-1.0) - _2000;
        float _2003 = _2000 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1999 > _2003) || ((_1999 < _2001) || ((_1998 > _2003) || ((_1998 < _2001) || ((_1997 < _2001) || (_1997 > _2003))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1999, cbModelParam._m0[17u].z, fma(_1998, cbModelParam._m0[17u].y, _1997 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1999, cbModelParam._m0[18u].z, fma(_1998, cbModelParam._m0[18u].y, _1997 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1999, cbModelParam._m0[19u].z, fma(_1998, cbModelParam._m0[19u].y, _1997 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_25_49_ladder = _2227.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2227.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2227.x * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_25_49_ladder_2;
        _1484 = frontier_phi_25_49_ladder_1;
        _1486 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_491, _492, _493), _1390);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1498 = _482 * 0.01200000010430812835693359375;
    float _1500 = _1498 * ((cbModelParam._m0[1u].w * (_1482 - _1383)) + _1383);
    float _1501 = _1498 * ((cbModelParam._m0[1u].w * (_1484 - _1385)) + _1385);
    float _1502 = _1498 * ((cbModelParam._m0[1u].w * (_1486 - _1387)) + _1387);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1500 * cbSceneParam._m0[91u].x));
    vec4 _1519 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_417, _418));
    float _1521 = _1519.w;
    float _1533 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1521);
    float _1534 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1521);
    float _1535 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1521);
    uvec4 _1539 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1541 = _1539.x * 14u;
    uint _1542 = _1541 + 13u;
    float _1549 = _482 + (-1.0);
    float _1555 = (cbLight._m0[_1542].x * _1549) + 1.0;
    float _1556 = (cbLight._m0[_1542].y * _1549) + 1.0;
    float _1557 = (cbLight._m0[_1542].z * _1549) + 1.0;
    float _1558 = (cbLight._m0[_1542].w * _1549) + 1.0;
    uint _1559 = _1541 + 5u;
    float _1565 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1569 = _1541 + 4u;
    float _1579 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1583 = _1541 | 1u;
    float _1594 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_316, _317, _318));
    float _1597 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_316, _317, _318));
    float _3546 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _3557 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1602 = (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.3183098733425140380859375;
    float _1604 = (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.3183098733425140380859375;
    float _1611 = ((cbLight._m0[_1559].x * _1565) * _1604) + (((cbLight._m0[_1569].x * _1533) * _1579) * _1602);
    float _1612 = ((_1565 * cbLight._m0[_1559].y) * _1604) + (((cbLight._m0[_1569].y * _1534) * _1579) * _1602);
    float _1613 = ((_1565 * cbLight._m0[_1559].z) * _1604) + (((cbLight._m0[_1569].z * _1535) * _1579) * _1602);
    uvec4 _1617 = floatBitsToUint(cbLight._m0[_1541 + 12u]);
    bool _1619 = _1617.x == 0u;
    float _1630;
    float _1632;
    float _1634;
    if (_1619)
    {
        _1630 = _1611;
        _1632 = _1612;
        _1634 = _1613;
    }
    else
    {
        uint _1638 = _1541 + 6u;
        float _1654 = (dot(vec3(cbLight._m0[_1541 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1655 = _1654 * _1654;
        float _3568 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1657 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1630 = (((cbLight._m0[_1638].x * 0.3183098733425140380859375) * _1656) * _1657) + _1611;
        _1632 = (((cbLight._m0[_1638].y * 0.3183098733425140380859375) * _1656) * _1657) + _1612;
        _1634 = (((cbLight._m0[_1638].z * 0.3183098733425140380859375) * _1656) * _1657) + _1613;
    }
    bool _1637 = _1617.y == 0u;
    float _1675;
    float _1677;
    float _1679;
    if (_1637)
    {
        _1675 = _1630;
        _1677 = _1632;
        _1679 = _1634;
    }
    else
    {
        uint _1783 = _1541 + 7u;
        float _1799 = (dot(vec3(cbLight._m0[_1541 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3584 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1802 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1675 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1630;
        _1677 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1632;
        _1679 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1634;
    }
    uint _1681 = _1541 + 8u;
    float _1687 = cbLight._m0[_1541].x + _396;
    float _1688 = cbLight._m0[_1541].y + _397;
    float _1689 = cbLight._m0[_1541].z + _398;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1697 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1541].xyz));
    float _3600 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _1701 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _1702 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1687 * _1693, _1688 * _1693, _1689 * _1693));
    float _3622 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1713 = (exp2(log2(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1719 = (0.5 / ((_1700 + 9.9999999392252902907785028219223e-09) + _1701)) * _1700;
    float _3633 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1721 = (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.31831014156341552734375;
    uint _1735 = _1541 + 9u;
    float _1741 = cbLight._m0[_1583].x + _396;
    float _1742 = cbLight._m0[_1583].y + _397;
    float _1743 = cbLight._m0[_1583].z + _398;
    float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
    float _1751 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1583].xyz));
    float _3644 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _1755 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1741 * _1747, _1742 * _1747, _1743 * _1747));
    float _3655 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1764 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1768 = (0.5 / ((_1754 + 9.9999999392252902907785028219223e-09) + _1701)) * _1754;
    float _3666 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1770 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
    float _1780 = (((_1764 * cbLight._m0[_1735].x) * _1770) * _1565) + ((((cbLight._m0[_1681].x * _1533) * _1713) * _1721) * _1579);
    float _1781 = (((_1764 * cbLight._m0[_1735].y) * _1770) * _1565) + ((((cbLight._m0[_1681].y * _1534) * _1713) * _1721) * _1579);
    float _1782 = (((_1764 * cbLight._m0[_1735].z) * _1770) * _1565) + ((((cbLight._m0[_1681].z * _1535) * _1713) * _1721) * _1579);
    float _1844;
    float _1846;
    float _1848;
    if (_1619)
    {
        _1844 = _1780;
        _1846 = _1781;
        _1848 = _1782;
    }
    else
    {
        uint _1850 = _1541 + 10u;
        uint _1856 = _1541 + 2u;
        float _1862 = cbLight._m0[_1856].x + _396;
        float _1863 = cbLight._m0[_1856].y + _397;
        float _1864 = cbLight._m0[_1856].z + _398;
        float _1868 = inversesqrt(dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864)));
        float _1872 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1856].xyz));
        float _3677 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1875 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1876 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_1862 * _1868, _1863 * _1868, _1864 * _1868));
        float _3688 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1885 = (exp2(log2(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1889 = (0.5 / ((_1875 + 9.9999999392252902907785028219223e-09) + _1701)) * _1875;
        float _3699 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1891 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.31831014156341552734375;
        float _1892 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1844 = (((_1885 * cbLight._m0[_1850].x) * _1891) * _1892) + _1780;
        _1846 = (((_1885 * cbLight._m0[_1850].y) * _1891) * _1892) + _1781;
        _1848 = (((_1885 * cbLight._m0[_1850].z) * _1891) * _1892) + _1782;
    }
    float _1927;
    float _1929;
    float _1931;
    if (_1637)
    {
        _1927 = _1844;
        _1929 = _1846;
        _1931 = _1848;
    }
    else
    {
        uint _1938 = _1541 + 11u;
        uint _1944 = _1541 + 3u;
        float _1950 = cbLight._m0[_1944].x + _396;
        float _1951 = cbLight._m0[_1944].y + _397;
        float _1952 = cbLight._m0[_1944].z + _398;
        float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
        float _1960 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1944].xyz));
        float _3715 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1950 * _1956, _1951 * _1956, _1952 * _1956));
        float _3726 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1977 = (0.5 / ((_1963 + 9.9999999392252902907785028219223e-09) + _1701)) * _1963;
        float _3737 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1979 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.31831014156341552734375;
        float _1980 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1927 = (((_1973 * cbLight._m0[_1938].x) * _1979) * _1980) + _1844;
        _1929 = (((_1973 * cbLight._m0[_1938].y) * _1979) * _1980) + _1846;
        _1931 = (((_1973 * cbLight._m0[_1938].z) * _1979) * _1980) + _1848;
    }
    float _2115;
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    if (_1539.y == 0u)
    {
        float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2056 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2055;
        float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2055;
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2055;
        uvec4 _2070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2071 = _2070.x;
        uint _2082 = uint((float(_2070.y) * floor(float(uint(cbSceneParam._m0[85u].y * _418) / _2071))) + floor(float(uint(cbSceneParam._m0[85u].x * _417) / _2071)));
        float _2092 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2093 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        uint _2096 = uint(isnan(14.0) ? _2093 : (isnan(_2093) ? 14.0 : min(_2093, 14.0)));
        uvec4 _2101 = texelFetch(g_lightClusterGridBuffer, int(((_2096 << 2u) + (_2082 << 6u)) >> 2u));
        uint _2102 = _2101.x;
        uint _2103 = _2070.z;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((((1u << ((_2103 >> 4u) & 15u)) + 4294967295u) & _2102) == 0u) || ((_2103 & 240u) == 0u))
        {
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
        }
        else
        {
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            float _2398 = 0.0;
            uint _2399 = 0u;
            uint _2408;
            bool _2409;
            for (;;)
            {
                _2408 = texelFetch(g_lightClassification, int((((_2096 << 5u) + (_2082 << 9u)) + (_2399 << 2u)) >> 2u)).x;
                _2409 = _2408 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2409)
                {
                    frontier_phi_66_pred = _2393;
                    frontier_phi_66_pred_1 = _2398;
                    frontier_phi_66_pred_2 = _2397;
                    frontier_phi_66_pred_3 = _2396;
                    frontier_phi_66_pred_4 = _2395;
                    frontier_phi_66_pred_5 = _2394;
                }
                else
                {
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    uint _2544;
                    _2538 = _2393;
                    _2539 = _2394;
                    _2540 = _2395;
                    _2541 = _2396;
                    _2542 = _2397;
                    _2543 = _2398;
                    _2544 = _2408;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    for (;;)
                    {
                        uint _2548 = uint(findLSB(_2544)) + (_2399 << 5u);
                        uint _2545 = (_2544 + 4294967295u) & _2544;
                        uint _2550 = _2548 * 48u;
                        vec4 _2564 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 3u)).x));
                        uint _2570 = (_2548 * 48u) + 4u;
                        vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2589 = (_2548 * 48u) + 8u;
                        vec3 _2600 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x));
                        float _2604 = _2564.x - _2056;
                        float _2605 = _2564.y - _2057;
                        float _2606 = _2564.z - _2058;
                        float _2607 = dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606));
                        float _2610 = inversesqrt(_2607);
                        float _2619 = 1.0 - (_2607 * _2564.w);
                        float _3763 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                        float _2620 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                        float _2621 = sqrt(_2607) * _2583.w;
                        float _2624 = 1.39999997615814208984375 / (_2621 + 1.39999997615814208984375);
                        float _2625 = _2624 * _2624;
                        float _2628 = ((1.0 - _2625) * dot(vec3(_438, _441, _444), vec3(_2610 * _2604, _2610 * _2605, _2610 * _2606))) + _2625;
                        float _2631 = _2621 * _2621;
                        float _2635 = ((isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0))) * _2620) / ((_2631 * 0.699999988079071044921875) + 1.0);
                        float _2639 = (-0.0) - _2056;
                        float _2640 = (-0.0) - _2057;
                        float _2641 = (-0.0) - _2058;
                        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
                        float _2649 = dot(vec3(_438, _441, _444), vec3(_2645 * _2639, _2645 * _2640, _2645 * _2641));
                        float _3779 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _3790 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                        float _2653 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                        float _2657 = (0.5 / (((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) + 9.9999999392252902907785028219223e-09) + _2653)) * _2653;
                        float _3801 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2666 = (((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 3.1415927410125732421875) / ((_2631 * 2.1991131305694580078125) + 3.141590118408203125)) * _2620;
                        _2468 = (_2635 * _2583.x) + _2541;
                        _2469 = (_2635 * _2583.y) + _2542;
                        _2470 = (_2635 * _2583.z) + _2543;
                        _2465 = (_2666 * _2600.x) + _2538;
                        _2466 = (_2666 * _2600.y) + _2539;
                        _2467 = (_2666 * _2600.z) + _2540;
                        if (_2545 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2538 = _2465;
                            _2539 = _2466;
                            _2540 = _2467;
                            _2541 = _2468;
                            _2542 = _2469;
                            _2543 = _2470;
                            _2544 = _2545;
                        }
                    }
                    frontier_phi_66_pred = _2465;
                    frontier_phi_66_pred_1 = _2470;
                    frontier_phi_66_pred_2 = _2469;
                    frontier_phi_66_pred_3 = _2468;
                    frontier_phi_66_pred_4 = _2467;
                    frontier_phi_66_pred_5 = _2466;
                }
                _2233 = frontier_phi_66_pred;
                _2243 = frontier_phi_66_pred_1;
                _2241 = frontier_phi_66_pred_2;
                _2239 = frontier_phi_66_pred_3;
                _2237 = frontier_phi_66_pred_4;
                _2235 = frontier_phi_66_pred_5;
                uint _2400 = _2399 + 1u;
                if (_2400 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2393 = _2233;
                    _2394 = _2235;
                    _2395 = _2237;
                    _2396 = _2239;
                    _2397 = _2241;
                    _2398 = _2243;
                    _2399 = _2400;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
        }
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.z;
        uint _2249 = (_2247 >> 8u) & 15u;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((4294967295u << _2249) & _2102) == 0u)
        {
            _2364 = _2232;
            _2366 = _2234;
            _2368 = _2236;
            _2370 = _2238;
            _2372 = _2240;
            _2374 = _2242;
        }
        else
        {
            float _2389 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2249 < ((_2247 >> 12u) & 15u))
            {
                float _2365;
                float _2367;
                float _2369;
                float _2371;
                float _2373;
                float _2375;
                float _2521 = _2232;
                float _2522 = _2234;
                float _2523 = _2236;
                float _2524 = _2238;
                float _2525 = _2240;
                float _2526 = _2242;
                uint _2527 = _2249;
                uint _2536;
                bool _2537;
                for (;;)
                {
                    _2536 = texelFetch(g_lightClassification, int((((_2096 << 5u) + (_2082 << 9u)) + (_2527 << 2u)) >> 2u)).x;
                    _2537 = _2536 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2537)
                    {
                        frontier_phi_77_pred = _2526;
                        frontier_phi_77_pred_1 = _2525;
                        frontier_phi_77_pred_2 = _2524;
                        frontier_phi_77_pred_3 = _2523;
                        frontier_phi_77_pred_4 = _2522;
                        frontier_phi_77_pred_5 = _2521;
                    }
                    else
                    {
                        float _2680;
                        float _2681;
                        float _2682;
                        float _2683;
                        float _2684;
                        float _2685;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2693 = _2521;
                        float _2694 = _2522;
                        float _2695 = _2523;
                        float _2696 = _2524;
                        float _2697 = _2525;
                        float _2698 = _2526;
                        uint _2699 = _2536;
                        uint _2700;
                        vec4 _2725;
                        float _2726;
                        vec4 _2741;
                        vec3 _2753;
                        vec4 _2768;
                        vec4 _2784;
                        float _2831;
                        bool _2832;
                        for (;;)
                        {
                            uint _2710 = ((_2527 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2699));
                            _2700 = (_2699 + 4294967295u) & _2699;
                            uint _2712 = _2710 * 40u;
                            _2725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2712 + 3u)).x));
                            _2726 = _2725.w;
                            uint _2728 = (_2710 * 40u) + 4u;
                            _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            uint _2743 = (_2710 * 40u) + 8u;
                            _2753 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x));
                            uint _2755 = (_2710 * 40u) + 16u;
                            _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            uint _2771 = (_2710 * 40u) + 20u;
                            _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            uint _2787 = (_2710 * 40u) + 24u;
                            vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            uint _2806 = (_2710 * 40u) + 28u;
                            vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2831 = fma(_2058, _2819.z, fma(_2057, _2819.y, _2819.x * _2056)) + _2819.w;
                            _2832 = !((fma(_2058, _2800.z, fma(_2057, _2800.y, _2800.x * _2056)) + _2800.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2832)
                            {
                                float _2859 = _2725.x - _2056;
                                float _2860 = _2725.y - _2057;
                                float _2861 = _2725.z - _2058;
                                float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                                float _2865 = inversesqrt(_2862);
                                float _2866 = _2865 * _2859;
                                float _2867 = _2865 * _2860;
                                float _2868 = _2865 * _2861;
                                float _2872 = 1.0 - (_2862 / (_2726 * _2726));
                                float _3812 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                                float _2873 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                                float _2877 = sqrt(_2862) * _2741.w;
                                float _2879 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                                float _2880 = _2879 * _2879;
                                float _2881 = 1.0 - _2880;
                                float _2883 = (_2881 * dot(vec3(_2866, _2867, _2868), vec3(_438, _441, _444))) + _2880;
                                float _2886 = _2877 * _2877;
                                float _2890 = (fma(_2058, _2768.z, fma(_2057, _2768.y, _2768.x * _2056)) + _2768.w) / _2831;
                                float _2891 = (fma(_2058, _2784.z, fma(_2057, _2784.y, _2784.x * _2056)) + _2784.w) / _2831;
                                float _2895 = 1.0 - dot(vec2(_2890, _2891), vec2(_2890, _2891));
                                float _3828 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                                float _2896 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
                                float _2897 = _2896 * (((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2873) / ((_2886 * 0.699999988079071044921875) + 1.0));
                                float _2907 = dot(vec3(_438, _441, _444), vec3((-0.0) - (_2056 * _2389), (-0.0) - (_2057 * _2389), (-0.0) - (_2058 * _2389)));
                                float _3839 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2915 = (_2881 * dot(vec3(_438, _441, _444), vec3(_2866, _2867, _2868))) + _2880;
                                float _3850 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2916 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2920 = (0.5 / (((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) + 9.9999999392252902907785028219223e-09) + _2916)) * _2916;
                                float _3861 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                                float _2927 = (_2896 * _2873) * (((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 3.1415927410125732421875) / ((_2886 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2897 * _2741.y;
                                frontier_phi_83_pred_1 = _2897 * _2741.x;
                                frontier_phi_83_pred_2 = _2927 * _2753.z;
                                frontier_phi_83_pred_3 = _2927 * _2753.y;
                                frontier_phi_83_pred_4 = _2927 * _2753.x;
                                frontier_phi_83_pred_5 = _2897 * _2741.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2935 = frontier_phi_83_pred;
                            _2934 = frontier_phi_83_pred_1;
                            _2933 = frontier_phi_83_pred_2;
                            _2932 = frontier_phi_83_pred_3;
                            _2931 = frontier_phi_83_pred_4;
                            _2936 = frontier_phi_83_pred_5;
                            _2683 = _2934 + _2696;
                            _2684 = _2935 + _2697;
                            _2685 = _2936 + _2698;
                            _2680 = _2931 + _2693;
                            _2681 = _2932 + _2694;
                            _2682 = _2933 + _2695;
                            if (_2700 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2693 = _2680;
                                _2694 = _2681;
                                _2695 = _2682;
                                _2696 = _2683;
                                _2697 = _2684;
                                _2698 = _2685;
                                _2699 = _2700;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2685;
                        frontier_phi_77_pred_1 = _2684;
                        frontier_phi_77_pred_2 = _2683;
                        frontier_phi_77_pred_3 = _2682;
                        frontier_phi_77_pred_4 = _2681;
                        frontier_phi_77_pred_5 = _2680;
                    }
                    _2375 = frontier_phi_77_pred;
                    _2373 = frontier_phi_77_pred_1;
                    _2371 = frontier_phi_77_pred_2;
                    _2369 = frontier_phi_77_pred_3;
                    _2367 = frontier_phi_77_pred_4;
                    _2365 = frontier_phi_77_pred_5;
                    uint _2528 = _2527 + 1u;
                    if (_2528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2521 = _2365;
                        _2522 = _2367;
                        _2523 = _2369;
                        _2524 = _2371;
                        _2525 = _2373;
                        _2526 = _2375;
                        _2527 = _2528;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2369;
                frontier_phi_58_59_ladder_1 = _2375;
                frontier_phi_58_59_ladder_2 = _2373;
                frontier_phi_58_59_ladder_3 = _2371;
                frontier_phi_58_59_ladder_4 = _2367;
                frontier_phi_58_59_ladder_5 = _2365;
            }
            else
            {
                frontier_phi_58_59_ladder = _2236;
                frontier_phi_58_59_ladder_1 = _2242;
                frontier_phi_58_59_ladder_2 = _2240;
                frontier_phi_58_59_ladder_3 = _2238;
                frontier_phi_58_59_ladder_4 = _2234;
                frontier_phi_58_59_ladder_5 = _2232;
            }
            _2364 = frontier_phi_58_59_ladder_5;
            _2366 = frontier_phi_58_59_ladder_4;
            _2368 = frontier_phi_58_59_ladder;
            _2370 = frontier_phi_58_59_ladder_3;
            _2372 = frontier_phi_58_59_ladder_2;
            _2374 = frontier_phi_58_59_ladder_1;
        }
        float _2379 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2115 = (_2379 * _2370) + _1675;
        _2117 = (_2379 * _2372) + _1677;
        _2119 = (_2379 * _2374) + _1679;
        _2121 = ((_2364 * 0.039999999105930328369140625) * _2379) + _1927;
        _2123 = ((_2366 * 0.039999999105930328369140625) * _2379) + _1929;
        _2125 = ((_2368 * 0.039999999105930328369140625) * _2379) + _1931;
    }
    else
    {
        _2115 = _1675;
        _2117 = _1677;
        _2119 = _1679;
        _2121 = _1927;
        _2123 = _1929;
        _2125 = _1931;
    }
    uint _2131 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _2137 = cbInstanceData._m0[_2131].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _298.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _269.x));
    float _2138 = cbInstanceData._m0[_2131].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _298.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _269.y));
    float _2139 = cbInstanceData._m0[_2131].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _298.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _269.z));
    float _3877 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3888 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3899 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _2156 = (((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_2115 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _482))) + ((_2121 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1293)) * cbPerFrame._m0[3u].x)) + _2137;
    float _2158 = (_2138 + ((_2123 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1293)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_2117 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _482)));
    float _2160 = (_2139 + ((_2125 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1293)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_2119 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _482)));
    float _2161 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2162 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2169 = cbMtdParam._m0[2u].x * _2137;
    float _2170 = cbMtdParam._m0[2u].y * _2138;
    float _2171 = cbMtdParam._m0[2u].z * _2139;
    float _3925 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2173 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    uint _2174 = _457 + 6u;
    float _2182 = _417 / cbSceneParam._m0[86u].x;
    float _2183 = _418 / cbSceneParam._m0[86u].y;
    vec4 _2197 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2182, _2183, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2199 = _2197.x;
    float _2200 = _2197.y;
    float _2201 = _2197.z;
    float _2202 = _2197.w;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2257 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2258 = _2257 / _338;
        float _2269 = _2258 * _389;
        float _2270 = _390 * _2258;
        float _2271 = (-0.0) - _2270;
        float _2273 = _2258 * _391;
        float _2275 = (cbSceneParam._m0[77u].w * _2271) / _2257;
        float _2276 = _2275 + cbSceneParam._m0[79u].w;
        float _2277 = cbSceneParam._m0[79u].w - _2270;
        float _2283 = sqrt(((_2269 * _2269) + (_2270 * _2270)) + (_2273 * _2273));
        float _2286 = (1.0 - (cbSceneParam._m0[77u].w / _2257)) * _2283;
        float _2291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2478;
        if (abs((_2271 - _2275) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2478 = ((((_2276 > 0.0) ? exp2(_2291 * _2276) : (2.0 - exp2(_2293 * _2276))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2286;
        }
        else
        {
            float _2422 = 1.0 / cbSceneParam._m0[80u].x;
            float _2423 = isnan(_2277) ? _2276 : (isnan(_2276) ? _2277 : max(_2276, _2277));
            float _2424 = isnan(_2277) ? _2276 : (isnan(_2276) ? _2277 : min(_2276, _2277));
            float _2433 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : min(_2423, 0.0));
            float _2434 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : min(_2424, 0.0));
            _2478 = ((abs(_2283 / _2271) * cbSceneParam._m0[80u].y) * ((((_2433 - _2434) * 2.0) - ((exp2(_2291 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0)))) - exp2(_2291 * (isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0))))) * _2422)) - ((exp2(_2293 * _2433) - exp2(_2293 * _2434)) * _2422))) + (_2286 * cbSceneParam._m0[80u].z);
        }
        vec4 _2480 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2182, _2183, 1.0), 0.0);
        float _2489 = exp2((_2478 * (-1.44269502162933349609375)) * (1.0 - _2480.w));
        float _2490 = log2(_2489);
        float _2506 = log2(_2202);
        _2295 = (exp2(_2506 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].x)) * _2480.x) / cbSceneParam._m0[78u].x)) + _2199;
        _2297 = (exp2(_2506 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].y)) * _2480.y) / cbSceneParam._m0[78u].y)) + _2200;
        _2299 = (exp2(_2506 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].z)) * _2480.z) / cbSceneParam._m0[78u].z)) + _2201;
        _2301 = _2489 * _2202;
    }
    else
    {
        _2295 = _2199;
        _2297 = _2200;
        _2299 = _2201;
        _2301 = _2202;
    }
    bool _2516;
    vec4 _2311;
    vec4 _2334;
    float _2336;
    float _2340;
    float _2341;
    float _2342;
    float _2345;
    float _2348;
    float _2351;
    float _2352;
    bool _2363;
    for (;;)
    {
        _2311 = cbMatDynParam._m0[0u];
        float _2313 = roundEven(_2311.y);
        bool _2314 = _2313 == 3.0;
        float _2316 = log2(_2301);
        float _2320 = exp2(_2316 * cbSceneParam._m0[78u].x);
        float _2321 = exp2(_2316 * cbSceneParam._m0[78u].y);
        float _2322 = exp2(_2316 * cbSceneParam._m0[78u].z);
        float _2323 = _2320 * _2161;
        float _2324 = _2321 * _2162;
        float _2325 = _2322 * _2163;
        float _2332 = _405 + (-0.5);
        _2334 = cbMtdParam._m0[1u];
        _2336 = _2334.y * _2332;
        float _2339 = (_2313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2340 = _2339 * (_2314 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2295)));
        _2341 = _2339 * (_2314 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2297)));
        _2342 = _2339 * (_2314 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2299)));
        _2345 = ((_2169 * _2173) * _2320) * _2339;
        _2348 = ((_2170 * _2173) * _2321) * _2339;
        _2351 = ((_2171 * _2173) * _2322) * _2339;
        _2352 = _2332 * 0.999000012874603271484375;
        _2363 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2363)
        {
            if ((cbInstanceData._m0[_457 + 7u].x + _2352) < 0.5)
            {
                _2516 = true;
                break;
            }
        }
        uint _2457 = _458 + uint(_2311.w);
        if ((cbInstanceData._m0[_2457].w < 1.0) && ((cbInstanceData._m0[_2457].w + _2352) < 0.5))
        {
            _2516 = true;
            break;
        }
        if ((_2336 + 1.0) < _2334.x)
        {
            _2516 = true;
            break;
        }
        _2516 = false;
        break;
    }
    float _2671;
    if (_2516)
    {
        discard_state = true;
        _2671 = 0.0;
    }
    else
    {
        _2671 = cbInstanceData._m0[_2174].w;
    }
    SV_Target.x = _2340;
    SV_Target.y = _2341;
    SV_Target.z = _2342;
    SV_Target.w = _2671;
    SV_Target_1.x = _2345;
    SV_Target_1.y = _2348;
    SV_Target_1.z = _2351;
    SV_Target_1.w = cbInstanceData._m0[_2174].w;
    discard_exit();
}


