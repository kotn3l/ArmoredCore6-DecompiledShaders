#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _810;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    vec4 _195 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _221 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _229 = (_221.x * cbMtdParam._m0[12u].x) + (_195.x * cbMtdParam._m0[9u].x);
    float _230 = (_221.y * cbMtdParam._m0[12u].y) + (_195.y * cbMtdParam._m0[9u].y);
    float _231 = (_221.z * cbMtdParam._m0[12u].z) + (_195.z * cbMtdParam._m0[9u].z);
    vec4 _265 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _294 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _311 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _312 = _311 * _174;
    float _313 = _311 * _175;
    float _314 = _311 * _176;
    float _2978 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _2989 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3000 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _425 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _428 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _441 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3011 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0));
    float _3022 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
    float _3033 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0));
    vec4 _463 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _466 = _463.x * TEXCOORD_4;
    float _467 = dot(vec3(_312, _313, _314), vec3(_392, _393, _394));
    float _470 = _467 * 2.0;
    float _475 = (_470 * _312) - _392;
    float _476 = (_470 * _313) - _393;
    float _477 = (_470 * _314) - _394;
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _809;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _534 = fma(_507, cbModelParam._m0[26u].z, fma(_503, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499));
        float _538 = fma(_507, cbModelParam._m0[27u].z, fma(_503, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499));
        float _542 = fma(_507, cbModelParam._m0[28u].z, fma(_503, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499));
        float _567 = _499 + _312;
        float _568 = _503 + _313;
        float _569 = _507 + _314;
        float _579 = fma(_569, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _567)) - _534;
        float _580 = fma(_569, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _567)) - _538;
        float _581 = fma(_569, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _567)) - _542;
        float _585 = inversesqrt(dot(vec3(_579, _580, _581), vec3(_579, _580, _581)));
        float _598 = ((_585 * _579) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_534 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _599 = ((_585 * _580) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_538 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_585 * _581) / cbModelParam._m0[34u].z) + ((((((_542 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        float _637 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_603.x + (-0.5));
        float _639 = _637 * (_603.y + (-0.5));
        float _640 = _637 * (_603.z + (-0.5));
        float _647 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_610.x + (-0.5));
        float _649 = _647 * (_610.y + (-0.5));
        float _650 = _647 * (_610.z + (-0.5));
        float _657 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_617.x + (-0.5));
        float _659 = _657 * (_617.y + (-0.5));
        float _660 = _657 * (_617.z + (-0.5));
        float _667 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_624.x + (-0.5));
        float _669 = _667 * (_624.y + (-0.5));
        float _670 = _667 * (_624.z + (-0.5));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = _638 * 0.5;
        float _675 = _648 * 0.5;
        float _676 = _658 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _691 = (dot(vec3(_312, _313, _314), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3059 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _701 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3070 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3081 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (_703 + 1.0))) + _708) * _671;
        float _718 = _639 * 0.5;
        float _719 = _649 * 0.5;
        float _720 = _659 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _734 = (dot(vec3(_312, _313, _314), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3092 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _743 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3103 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3114 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0))) * (_745 + 1.0))) + _750) * _672;
        float _760 = _640 * 0.5;
        float _761 = _650 * 0.5;
        float _762 = _660 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_312, _313, _314), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3147 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_787 + 1.0))) + _792) * _673;
        _809 = _640;
        _811 = _639;
        _812 = _638;
        _813 = _650;
        _814 = _649;
        _815 = _648;
        _816 = _660;
        _817 = _659;
        _818 = _658;
        _819 = _673;
        _820 = _672;
        _821 = _671;
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
    }
    else
    {
        _809 = _810;
        _811 = _810;
        _812 = _810;
        _813 = _810;
        _814 = _810;
        _815 = _810;
        _816 = _810;
        _817 = _810;
        _818 = _810;
        _819 = _810;
        _820 = _810;
        _821 = _810;
        _822 = 0.0;
        _823 = 0.0;
        _824 = 0.0;
    }
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _850 = fma(_507, cbModelParam._m0[30u].z, fma(_503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _499));
        float _854 = fma(_507, cbModelParam._m0[31u].z, fma(_503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _499));
        float _858 = fma(_507, cbModelParam._m0[32u].z, fma(_503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _499));
        float _881 = _499 + _312;
        float _882 = _503 + _313;
        float _883 = _507 + _314;
        float _893 = fma(_883, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881)) - _850;
        float _894 = fma(_883, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881)) - _854;
        float _895 = fma(_883, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881)) - _858;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_850 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_854 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[35u].z) + ((((((_858 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _949 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_916.x + (-0.5));
        float _951 = _949 * (_916.y + (-0.5));
        float _952 = _949 * (_916.z + (-0.5));
        float _959 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_923.x + (-0.5));
        float _961 = _959 * (_923.y + (-0.5));
        float _962 = _959 * (_923.z + (-0.5));
        float _969 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_930.x + (-0.5));
        float _971 = _969 * (_930.y + (-0.5));
        float _972 = _969 * (_930.z + (-0.5));
        float _979 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_937.x + (-0.5));
        float _981 = _979 * (_937.y + (-0.5));
        float _982 = _979 * (_937.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_312, _313, _314), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3210 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_1013 + 1.0))) + _1018) * _983;
        float _1028 = _951 * 0.5;
        float _1029 = _961 * 0.5;
        float _1030 = _971 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_312, _313, _314), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3221 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3232 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3243 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0))) * (_1055 + 1.0))) + _1060) * _984;
        float _1070 = _952 * 0.5;
        float _1071 = _962 * 0.5;
        float _1072 = _972 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_312, _313, _314), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3254 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3265 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3276 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0))) * (_1097 + 1.0))) + _1102) * _985;
        _1119 = _952;
        _1120 = _951;
        _1121 = _950;
        _1122 = _962;
        _1123 = _961;
        _1124 = _960;
        _1125 = _972;
        _1126 = _971;
        _1127 = _970;
        _1128 = _985;
        _1129 = _984;
        _1130 = _983;
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _810;
        _1120 = _810;
        _1121 = _810;
        _1122 = _810;
        _1123 = _810;
        _1124 = _810;
        _1125 = _810;
        _1126 = _810;
        _1127 = _810;
        _1128 = _810;
        _1129 = _810;
        _1130 = _810;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1166 = fma(_1145, cbSceneParam._m0[89u].z, fma(_1144, cbSceneParam._m0[89u].y, _1143 * cbSceneParam._m0[89u].x));
    float _1169 = fma(_1145, cbSceneParam._m0[90u].z, fma(_1144, cbSceneParam._m0[90u].y, _1143 * cbSceneParam._m0[90u].x));
    float _1172 = fma(_1145, cbSceneParam._m0[91u].z, fma(_1144, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1143));
    float _1187 = _475 * 0.5;
    float _1188 = _476 * 0.5;
    float _1189 = _477 * 0.5;
    float _1190 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1193 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1196 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1230;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1203 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_809, _813, _816, _819));
        float _1207 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_811, _814, _817, _820));
        float _1211 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_812, _815, _818, _821));
        float _1218 = dot(vec4(cbModelParam._m0[39u]), vec4(_1187, _1188, _1189, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1241;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1232 = dot(vec4(cbModelParam._m0[40u]), vec4(_1187, _1188, _1189, 1.0));
        _1241 = dot(vec3(isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1232) ? 0.0 : (isnan(0.0) ? _1232 : max(0.0, _1232))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1241 = 1.0;
    }
    float _1245 = (_1241 * cbModelParam._m0[1u].x) + (_1230 * (1.0 - cbModelParam._m0[1u].x));
    float _1254 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1335;
    float _1337;
    float _1339;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1302 = fma(_507, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499)) + cbModelParam._m0[13u].w;
        float _1306 = fma(_507, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499)) + cbModelParam._m0[14u].w;
        float _1310 = fma(_507, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499)) + cbModelParam._m0[15u].w;
        float _1313 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1316 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1319 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1345;
        if (_1313 > 0.0)
        {
            _1345 = abs((1.0 - _1302) / _1313);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1302 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1345 = frontier_phi_14_12_ladder;
        }
        float _1572;
        if (_1316 > 0.0)
        {
            _1572 = abs((1.0 - _1306) / _1316);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1306 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1572 = frontier_phi_23_19_ladder;
        }
        float _1764;
        if (_1319 > 0.0)
        {
            _1764 = abs((1.0 - _1310) / _1319);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1310 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1764 = frontier_phi_35_30_ladder;
        }
        float _1766 = isnan(_1572) ? _1345 : (isnan(_1345) ? _1572 : min(_1345, _1572));
        float _1767 = isnan(_1764) ? _1766 : (isnan(_1766) ? _1764 : min(_1766, _1764));
        float _1771 = (_1767 * _1313) + _1302;
        float _1772 = (_1767 * _1316) + _1306;
        float _1773 = (_1767 * _1319) + _1310;
        float _1774 = _1767 * 9.9999997473787516355514526367188e-05;
        float _1776 = (-1.0) - _1774;
        float _1778 = _1774 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1773 > _1778) || ((_1773 < _1776) || ((_1772 > _1778) || ((_1772 < _1776) || ((_1771 < _1776) || (_1771 > _1778))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1773, cbModelParam._m0[9u].z, fma(_1772, cbModelParam._m0[9u].y, _1771 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1773, cbModelParam._m0[10u].z, fma(_1772, cbModelParam._m0[10u].y, _1771 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1773, cbModelParam._m0[11u].z, fma(_1772, cbModelParam._m0[11u].y, _1771 * cbModelParam._m0[11u].x))), _1254);
            frontier_phi_13_35_ladder = _1870.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1870.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1870.x * cbModelParam._m0[1u].y;
        }
        _1335 = frontier_phi_13_35_ladder_2;
        _1337 = frontier_phi_13_35_ladder_1;
        _1339 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1254);
        _1335 = _1323.x * cbModelParam._m0[1u].y;
        _1337 = _1323.y * cbModelParam._m0[1u].y;
        _1339 = _1323.z * cbModelParam._m0[1u].y;
    }
    float _1342 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1398 = fma(_507, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499)) + cbModelParam._m0[21u].w;
        float _1402 = fma(_507, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499)) + cbModelParam._m0[22u].w;
        float _1406 = fma(_507, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499)) + cbModelParam._m0[23u].w;
        float _1409 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1412 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1415 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1577;
        if (_1409 > 0.0)
        {
            _1577 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1577 = frontier_phi_25_21_ladder;
        }
        float _1791;
        if (_1412 > 0.0)
        {
            _1791 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1791 = frontier_phi_37_32_ladder;
        }
        float _1942;
        if (_1415 > 0.0)
        {
            _1942 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1942 = frontier_phi_46_43_ladder;
        }
        float _1944 = isnan(_1791) ? _1577 : (isnan(_1577) ? _1791 : min(_1577, _1791));
        float _1945 = isnan(_1942) ? _1944 : (isnan(_1944) ? _1942 : min(_1944, _1942));
        float _1949 = (_1945 * _1409) + _1398;
        float _1950 = (_1945 * _1412) + _1402;
        float _1951 = (_1945 * _1415) + _1406;
        float _1952 = _1945 * 9.9999997473787516355514526367188e-05;
        float _1953 = (-1.0) - _1952;
        float _1955 = _1952 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1951 > _1955) || ((_1951 < _1953) || ((_1950 > _1955) || ((_1950 < _1953) || ((_1949 < _1953) || (_1949 > _1955))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1951, cbModelParam._m0[17u].z, fma(_1950, cbModelParam._m0[17u].y, _1949 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1951, cbModelParam._m0[18u].z, fma(_1950, cbModelParam._m0[18u].y, _1949 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1951, cbModelParam._m0[19u].z, fma(_1950, cbModelParam._m0[19u].y, _1949 * cbModelParam._m0[19u].x))), _1342);
            frontier_phi_22_46_ladder = _2179.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2179.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2179.x * cbModelParam._m0[1u].z;
        }
        _1434 = frontier_phi_22_46_ladder_2;
        _1436 = frontier_phi_22_46_ladder_1;
        _1438 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1342);
        _1434 = _1418.x * cbModelParam._m0[1u].z;
        _1436 = _1418.y * cbModelParam._m0[1u].z;
        _1438 = _1418.z * cbModelParam._m0[1u].z;
    }
    float _1450 = _466 * 0.01200000010430812835693359375;
    float _1452 = _1450 * ((cbModelParam._m0[1u].w * (_1434 - _1335)) + _1335);
    float _1453 = _1450 * ((cbModelParam._m0[1u].w * (_1436 - _1337)) + _1337);
    float _1454 = _1450 * ((cbModelParam._m0[1u].w * (_1438 - _1339)) + _1339);
    float _1457 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, _1452 * cbSceneParam._m0[91u].x));
    vec4 _1471 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_400, _401));
    float _1473 = _1471.w;
    float _1485 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1473);
    float _1486 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1473);
    float _1487 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1473);
    uvec4 _1491 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1493 = _1491.x * 14u;
    uint _1494 = _1493 + 13u;
    float _1501 = _466 + (-1.0);
    float _1507 = (cbLight._m0[_1494].x * _1501) + 1.0;
    float _1508 = (cbLight._m0[_1494].y * _1501) + 1.0;
    float _1509 = (cbLight._m0[_1494].z * _1501) + 1.0;
    float _1510 = (cbLight._m0[_1494].w * _1501) + 1.0;
    uint _1511 = _1493 + 5u;
    float _1517 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
    uint _1521 = _1493 + 4u;
    float _1531 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1535 = _1493 | 1u;
    float _1546 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_312, _313, _314));
    float _1549 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_312, _313, _314));
    float _3412 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _3423 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1554 = (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * 0.3183098733425140380859375;
    float _1556 = (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.3183098733425140380859375;
    float _1563 = ((cbLight._m0[_1511].x * _1517) * _1556) + (((cbLight._m0[_1521].x * _1485) * _1531) * _1554);
    float _1564 = ((_1517 * cbLight._m0[_1511].y) * _1556) + (((cbLight._m0[_1521].y * _1486) * _1531) * _1554);
    float _1565 = ((_1517 * cbLight._m0[_1511].z) * _1556) + (((cbLight._m0[_1521].z * _1487) * _1531) * _1554);
    uvec4 _1569 = floatBitsToUint(cbLight._m0[_1493 + 12u]);
    bool _1571 = _1569.x == 0u;
    float _1582;
    float _1584;
    float _1586;
    if (_1571)
    {
        _1582 = _1563;
        _1584 = _1564;
        _1586 = _1565;
    }
    else
    {
        uint _1590 = _1493 + 6u;
        float _1606 = (dot(vec3(cbLight._m0[_1493 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1607 = _1606 * _1606;
        float _3434 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1609 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1582 = (((cbLight._m0[_1590].x * 0.3183098733425140380859375) * _1608) * _1609) + _1563;
        _1584 = (((cbLight._m0[_1590].y * 0.3183098733425140380859375) * _1608) * _1609) + _1564;
        _1586 = (((cbLight._m0[_1590].z * 0.3183098733425140380859375) * _1608) * _1609) + _1565;
    }
    bool _1589 = _1569.y == 0u;
    float _1627;
    float _1629;
    float _1631;
    if (_1589)
    {
        _1627 = _1582;
        _1629 = _1584;
        _1631 = _1586;
    }
    else
    {
        uint _1735 = _1493 + 7u;
        float _1751 = (dot(vec3(cbLight._m0[_1493 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3450 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1754 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1627 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1582;
        _1629 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1584;
        _1631 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1586;
    }
    uint _1633 = _1493 + 8u;
    float _1639 = cbLight._m0[_1493].x + _392;
    float _1640 = cbLight._m0[_1493].y + _393;
    float _1641 = cbLight._m0[_1493].z + _394;
    float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
    float _1649 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1493].xyz));
    float _3466 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _1653 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _1654 = dot(vec3(cbLight._m0[_1493].xyz), vec3(_1639 * _1645, _1640 * _1645, _1641 * _1645));
    float _3488 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1665 = (exp2(log2(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1671 = (0.5 / ((_1652 + 9.9999999392252902907785028219223e-09) + _1653)) * _1652;
    float _3499 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1673 = (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.31831014156341552734375;
    uint _1687 = _1493 + 9u;
    float _1693 = cbLight._m0[_1535].x + _392;
    float _1694 = cbLight._m0[_1535].y + _393;
    float _1695 = cbLight._m0[_1535].z + _394;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1703 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1535].xyz));
    float _3510 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _1707 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1693 * _1699, _1694 * _1699, _1695 * _1699));
    float _3521 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1716 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1720 = (0.5 / ((_1706 + 9.9999999392252902907785028219223e-09) + _1653)) * _1706;
    float _3532 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1722 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
    float _1732 = (((_1716 * cbLight._m0[_1687].x) * _1722) * _1517) + ((((cbLight._m0[_1633].x * _1485) * _1665) * _1673) * _1531);
    float _1733 = (((_1716 * cbLight._m0[_1687].y) * _1722) * _1517) + ((((cbLight._m0[_1633].y * _1486) * _1665) * _1673) * _1531);
    float _1734 = (((_1716 * cbLight._m0[_1687].z) * _1722) * _1517) + ((((cbLight._m0[_1633].z * _1487) * _1665) * _1673) * _1531);
    float _1796;
    float _1798;
    float _1800;
    if (_1571)
    {
        _1796 = _1732;
        _1798 = _1733;
        _1800 = _1734;
    }
    else
    {
        uint _1802 = _1493 + 10u;
        uint _1808 = _1493 + 2u;
        float _1814 = cbLight._m0[_1808].x + _392;
        float _1815 = cbLight._m0[_1808].y + _393;
        float _1816 = cbLight._m0[_1808].z + _394;
        float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
        float _1824 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1808].xyz));
        float _3543 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1827 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1828 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1814 * _1820, _1815 * _1820, _1816 * _1820));
        float _3554 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = (exp2(log2(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1841 = (0.5 / ((_1827 + 9.9999999392252902907785028219223e-09) + _1653)) * _1827;
        float _3565 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1843 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.31831014156341552734375;
        float _1844 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1796 = (((_1837 * cbLight._m0[_1802].x) * _1843) * _1844) + _1732;
        _1798 = (((_1837 * cbLight._m0[_1802].y) * _1843) * _1844) + _1733;
        _1800 = (((_1837 * cbLight._m0[_1802].z) * _1843) * _1844) + _1734;
    }
    float _1879;
    float _1881;
    float _1883;
    if (_1589)
    {
        _1879 = _1796;
        _1881 = _1798;
        _1883 = _1800;
    }
    else
    {
        uint _1890 = _1493 + 11u;
        uint _1896 = _1493 + 3u;
        float _1902 = cbLight._m0[_1896].x + _392;
        float _1903 = cbLight._m0[_1896].y + _393;
        float _1904 = cbLight._m0[_1896].z + _394;
        float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
        float _1912 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1896].xyz));
        float _3581 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1915 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1916 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_1902 * _1908, _1903 * _1908, _1904 * _1908));
        float _3592 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1925 = (exp2(log2(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1929 = (0.5 / ((_1915 + 9.9999999392252902907785028219223e-09) + _1653)) * _1915;
        float _3603 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1931 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.31831014156341552734375;
        float _1932 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1879 = (((_1925 * cbLight._m0[_1890].x) * _1931) * _1932) + _1796;
        _1881 = (((_1925 * cbLight._m0[_1890].y) * _1931) * _1932) + _1798;
        _1883 = (((_1925 * cbLight._m0[_1890].z) * _1931) * _1932) + _1800;
    }
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    if (_1491.y == 0u)
    {
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2007;
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2007;
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2007;
        uvec4 _2022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2023 = _2022.x;
        uint _2034 = uint((float(_2022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2023))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2023)));
        float _2044 = (log2(_2010 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2045 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        uint _2048 = uint(isnan(14.0) ? _2045 : (isnan(_2045) ? 14.0 : min(_2045, 14.0)));
        uvec4 _2053 = texelFetch(g_lightClusterGridBuffer, int(((_2048 << 2u) + (_2034 << 6u)) >> 2u));
        uint _2054 = _2053.x;
        uint _2055 = _2022.z;
        float _2184;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        if (((((1u << ((_2055 >> 4u) & 15u)) + 4294967295u) & _2054) == 0u) || ((_2055 & 240u) == 0u))
        {
            _2184 = 0.0;
            _2186 = 0.0;
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
        }
        else
        {
            float _2185;
            float _2187;
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            uint _2342 = 0u;
            uint _2351;
            bool _2352;
            for (;;)
            {
                _2351 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2342 << 2u)) >> 2u)).x;
                _2352 = _2351 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2352)
                {
                    frontier_phi_61_pred = _2336;
                    frontier_phi_61_pred_1 = _2341;
                    frontier_phi_61_pred_2 = _2340;
                    frontier_phi_61_pred_3 = _2339;
                    frontier_phi_61_pred_4 = _2338;
                    frontier_phi_61_pred_5 = _2337;
                }
                else
                {
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    float _2465;
                    uint _2466;
                    _2460 = _2336;
                    _2461 = _2337;
                    _2462 = _2338;
                    _2463 = _2339;
                    _2464 = _2340;
                    _2465 = _2341;
                    _2466 = _2351;
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    for (;;)
                    {
                        uint _2470 = uint(findLSB(_2466)) + (_2342 << 5u);
                        uint _2467 = (_2466 + 4294967295u) & _2466;
                        uint _2472 = _2470 * 48u;
                        vec4 _2486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2472)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2472 + 3u)).x));
                        uint _2492 = (_2470 * 48u) + 4u;
                        vec4 _2505 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2492)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2492 + 3u)).x));
                        uint _2511 = (_2470 * 48u) + 8u;
                        vec3 _2522 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x));
                        float _2526 = _2486.x - _2008;
                        float _2527 = _2486.y - _2009;
                        float _2528 = _2486.z - _2010;
                        float _2529 = dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528));
                        float _2532 = inversesqrt(_2529);
                        float _2541 = 1.0 - (_2529 * _2486.w);
                        float _3629 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
                        float _2542 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
                        float _2543 = sqrt(_2529) * _2505.w;
                        float _2546 = 1.39999997615814208984375 / (_2543 + 1.39999997615814208984375);
                        float _2547 = _2546 * _2546;
                        float _2550 = ((1.0 - _2547) * dot(vec3(_422, _425, _428), vec3(_2532 * _2526, _2532 * _2527, _2532 * _2528))) + _2547;
                        float _2553 = _2543 * _2543;
                        float _2557 = ((isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))) * _2542) / ((_2553 * 0.699999988079071044921875) + 1.0);
                        float _2561 = (-0.0) - _2008;
                        float _2562 = (-0.0) - _2009;
                        float _2563 = (-0.0) - _2010;
                        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
                        float _2571 = dot(vec3(_422, _425, _428), vec3(_2567 * _2561, _2567 * _2562, _2567 * _2563));
                        float _3645 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                        float _3656 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
                        float _2575 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
                        float _2579 = (0.5 / (((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) + 9.9999999392252902907785028219223e-09) + _2575)) * _2575;
                        float _3667 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _2588 = (((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 3.1415927410125732421875) / ((_2553 * 2.1991131305694580078125) + 3.141590118408203125)) * _2542;
                        _2395 = (_2557 * _2505.x) + _2463;
                        _2396 = (_2557 * _2505.y) + _2464;
                        _2397 = (_2557 * _2505.z) + _2465;
                        _2392 = (_2588 * _2522.x) + _2460;
                        _2393 = (_2588 * _2522.y) + _2461;
                        _2394 = (_2588 * _2522.z) + _2462;
                        if (_2467 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2460 = _2392;
                            _2461 = _2393;
                            _2462 = _2394;
                            _2463 = _2395;
                            _2464 = _2396;
                            _2465 = _2397;
                            _2466 = _2467;
                        }
                    }
                    frontier_phi_61_pred = _2392;
                    frontier_phi_61_pred_1 = _2397;
                    frontier_phi_61_pred_2 = _2396;
                    frontier_phi_61_pred_3 = _2395;
                    frontier_phi_61_pred_4 = _2394;
                    frontier_phi_61_pred_5 = _2393;
                }
                _2185 = frontier_phi_61_pred;
                _2195 = frontier_phi_61_pred_1;
                _2193 = frontier_phi_61_pred_2;
                _2191 = frontier_phi_61_pred_3;
                _2189 = frontier_phi_61_pred_4;
                _2187 = frontier_phi_61_pred_5;
                uint _2343 = _2342 + 1u;
                if (_2343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2336 = _2185;
                    _2337 = _2187;
                    _2338 = _2189;
                    _2339 = _2191;
                    _2340 = _2193;
                    _2341 = _2195;
                    _2342 = _2343;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2184 = _2185;
            _2186 = _2187;
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
        }
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.z;
        uint _2201 = (_2199 >> 8u) & 15u;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((4294967295u << _2201) & _2054) == 0u)
        {
            _2307 = _2184;
            _2309 = _2186;
            _2311 = _2188;
            _2313 = _2190;
            _2315 = _2192;
            _2317 = _2194;
        }
        else
        {
            float _2332 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2201 < ((_2199 >> 12u) & 15u))
            {
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2443 = _2184;
                float _2444 = _2186;
                float _2445 = _2188;
                float _2446 = _2190;
                float _2447 = _2192;
                float _2448 = _2194;
                uint _2449 = _2201;
                uint _2458;
                bool _2459;
                for (;;)
                {
                    _2458 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2449 << 2u)) >> 2u)).x;
                    _2459 = _2458 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2459)
                    {
                        frontier_phi_67_pred = _2446;
                        frontier_phi_67_pred_1 = _2447;
                        frontier_phi_67_pred_2 = _2448;
                        frontier_phi_67_pred_3 = _2445;
                        frontier_phi_67_pred_4 = _2444;
                        frontier_phi_67_pred_5 = _2443;
                    }
                    else
                    {
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2606 = _2443;
                        float _2607 = _2444;
                        float _2608 = _2445;
                        float _2609 = _2446;
                        float _2610 = _2447;
                        float _2611 = _2448;
                        uint _2612 = _2458;
                        uint _2613;
                        vec4 _2638;
                        float _2639;
                        vec4 _2654;
                        vec3 _2666;
                        vec4 _2681;
                        vec4 _2697;
                        float _2744;
                        bool _2745;
                        for (;;)
                        {
                            uint _2623 = ((_2449 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2612));
                            _2613 = (_2612 + 4294967295u) & _2612;
                            uint _2625 = _2623 * 40u;
                            _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            _2639 = _2638.w;
                            uint _2641 = (_2623 * 40u) + 4u;
                            _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            uint _2656 = (_2623 * 40u) + 8u;
                            _2666 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x));
                            uint _2668 = (_2623 * 40u) + 16u;
                            _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2684 = (_2623 * 40u) + 20u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2700 = (_2623 * 40u) + 24u;
                            vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2719 = (_2623 * 40u) + 28u;
                            vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 3u)).x));
                            _2744 = fma(_2010, _2732.z, fma(_2009, _2732.y, _2732.x * _2008)) + _2732.w;
                            _2745 = !((fma(_2010, _2713.z, fma(_2009, _2713.y, _2713.x * _2008)) + _2713.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2745)
                            {
                                float _2772 = _2638.x - _2008;
                                float _2773 = _2638.y - _2009;
                                float _2774 = _2638.z - _2010;
                                float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                                float _2778 = inversesqrt(_2775);
                                float _2779 = _2778 * _2772;
                                float _2780 = _2778 * _2773;
                                float _2781 = _2778 * _2774;
                                float _2785 = 1.0 - (_2775 / (_2639 * _2639));
                                float _3678 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                                float _2786 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
                                float _2790 = sqrt(_2775) * _2654.w;
                                float _2792 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                                float _2793 = _2792 * _2792;
                                float _2794 = 1.0 - _2793;
                                float _2796 = (_2794 * dot(vec3(_2779, _2780, _2781), vec3(_422, _425, _428))) + _2793;
                                float _2799 = _2790 * _2790;
                                float _2803 = (fma(_2010, _2681.z, fma(_2009, _2681.y, _2681.x * _2008)) + _2681.w) / _2744;
                                float _2804 = (fma(_2010, _2697.z, fma(_2009, _2697.y, _2697.x * _2008)) + _2697.w) / _2744;
                                float _2808 = 1.0 - dot(vec2(_2803, _2804), vec2(_2803, _2804));
                                float _3694 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                                float _2809 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
                                float _2810 = _2809 * (((isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * _2786) / ((_2799 * 0.699999988079071044921875) + 1.0));
                                float _2820 = dot(vec3(_422, _425, _428), vec3((-0.0) - (_2008 * _2332), (-0.0) - (_2009 * _2332), (-0.0) - (_2010 * _2332)));
                                float _3705 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                                float _2828 = (_2794 * dot(vec3(_422, _425, _428), vec3(_2779, _2780, _2781))) + _2793;
                                float _3716 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                                float _2829 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
                                float _2833 = (0.5 / (((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) + 9.9999999392252902907785028219223e-09) + _2829)) * _2829;
                                float _3727 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2840 = (_2809 * _2786) * (((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 3.1415927410125732421875) / ((_2799 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2840 * _2666.x;
                                frontier_phi_73_pred_1 = _2840 * _2666.y;
                                frontier_phi_73_pred_2 = _2810 * _2654.z;
                                frontier_phi_73_pred_3 = _2810 * _2654.y;
                                frontier_phi_73_pred_4 = _2810 * _2654.x;
                                frontier_phi_73_pred_5 = _2840 * _2666.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2844 = frontier_phi_73_pred;
                            _2845 = frontier_phi_73_pred_1;
                            _2849 = frontier_phi_73_pred_2;
                            _2848 = frontier_phi_73_pred_3;
                            _2847 = frontier_phi_73_pred_4;
                            _2846 = frontier_phi_73_pred_5;
                            _2596 = _2847 + _2609;
                            _2597 = _2848 + _2610;
                            _2598 = _2849 + _2611;
                            _2593 = _2844 + _2606;
                            _2594 = _2845 + _2607;
                            _2595 = _2846 + _2608;
                            if (_2613 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2613;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2596;
                        frontier_phi_67_pred_1 = _2597;
                        frontier_phi_67_pred_2 = _2598;
                        frontier_phi_67_pred_3 = _2595;
                        frontier_phi_67_pred_4 = _2594;
                        frontier_phi_67_pred_5 = _2593;
                    }
                    _2314 = frontier_phi_67_pred;
                    _2316 = frontier_phi_67_pred_1;
                    _2318 = frontier_phi_67_pred_2;
                    _2312 = frontier_phi_67_pred_3;
                    _2310 = frontier_phi_67_pred_4;
                    _2308 = frontier_phi_67_pred_5;
                    uint _2450 = _2449 + 1u;
                    if (_2450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2443 = _2308;
                        _2444 = _2310;
                        _2445 = _2312;
                        _2446 = _2314;
                        _2447 = _2316;
                        _2448 = _2318;
                        _2449 = _2450;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2316;
                frontier_phi_55_56_ladder_1 = _2318;
                frontier_phi_55_56_ladder_2 = _2314;
                frontier_phi_55_56_ladder_3 = _2312;
                frontier_phi_55_56_ladder_4 = _2310;
                frontier_phi_55_56_ladder_5 = _2308;
            }
            else
            {
                frontier_phi_55_56_ladder = _2192;
                frontier_phi_55_56_ladder_1 = _2194;
                frontier_phi_55_56_ladder_2 = _2190;
                frontier_phi_55_56_ladder_3 = _2188;
                frontier_phi_55_56_ladder_4 = _2186;
                frontier_phi_55_56_ladder_5 = _2184;
            }
            _2307 = frontier_phi_55_56_ladder_5;
            _2309 = frontier_phi_55_56_ladder_4;
            _2311 = frontier_phi_55_56_ladder_3;
            _2313 = frontier_phi_55_56_ladder_2;
            _2315 = frontier_phi_55_56_ladder;
            _2317 = frontier_phi_55_56_ladder_1;
        }
        float _2322 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
        _2067 = (_2322 * _2313) + _1627;
        _2069 = (_2322 * _2315) + _1629;
        _2071 = (_2322 * _2317) + _1631;
        _2073 = ((_2307 * 0.039999999105930328369140625) * _2322) + _1879;
        _2075 = ((_2309 * 0.039999999105930328369140625) * _2322) + _1881;
        _2077 = ((_2311 * 0.039999999105930328369140625) * _2322) + _1883;
    }
    else
    {
        _2067 = _1627;
        _2069 = _1629;
        _2071 = _1631;
        _2073 = _1879;
        _2075 = _1881;
        _2077 = _1883;
    }
    uint _2083 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _2089 = cbInstanceData._m0[_2083].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _294.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _265.x));
    float _2090 = cbInstanceData._m0[_2083].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _294.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _265.y));
    float _2091 = cbInstanceData._m0[_2083].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _294.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _265.z));
    float _3743 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3754 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3765 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2108 = (((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_2067 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _466))) + ((_2073 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1245)) * cbPerFrame._m0[3u].x)) + _2089;
    float _2110 = (_2090 + ((_2075 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1245)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_2069 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _466)));
    float _2112 = (_2091 + ((_2077 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1245)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_2071 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _466)));
    float _3791 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2125 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    uint _2126 = _441 + 6u;
    float _2134 = _400 / cbSceneParam._m0[86u].x;
    float _2135 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2149 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2134, _2135, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2151 = _2149.x;
    float _2152 = _2149.y;
    float _2153 = _2149.z;
    float _2154 = _2149.w;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2209 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2210 = _2209 / _334;
        float _2221 = _2210 * _385;
        float _2222 = _386 * _2210;
        float _2223 = (-0.0) - _2222;
        float _2225 = _2210 * _387;
        float _2227 = (cbSceneParam._m0[77u].w * _2223) / _2209;
        float _2228 = _2227 + cbSceneParam._m0[79u].w;
        float _2229 = cbSceneParam._m0[79u].w - _2222;
        float _2235 = sqrt(((_2221 * _2221) + (_2222 * _2222)) + (_2225 * _2225));
        float _2238 = (1.0 - (cbSceneParam._m0[77u].w / _2209)) * _2235;
        float _2243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2405;
        if (abs((_2223 - _2227) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2405 = ((((_2228 > 0.0) ? exp2(_2243 * _2228) : (2.0 - exp2(_2245 * _2228))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2238;
        }
        else
        {
            float _2365 = 1.0 / cbSceneParam._m0[80u].x;
            float _2366 = isnan(_2229) ? _2228 : (isnan(_2228) ? _2229 : max(_2228, _2229));
            float _2367 = isnan(_2229) ? _2228 : (isnan(_2228) ? _2229 : min(_2228, _2229));
            float _2376 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : min(_2366, 0.0));
            float _2377 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : min(_2367, 0.0));
            _2405 = ((abs(_2235 / _2223) * cbSceneParam._m0[80u].y) * ((((_2376 - _2377) * 2.0) - ((exp2(_2243 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0)))) - exp2(_2243 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0))))) * _2365)) - ((exp2(_2245 * _2376) - exp2(_2245 * _2377)) * _2365))) + (_2238 * cbSceneParam._m0[80u].z);
        }
        vec4 _2407 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2134, _2135, 1.0), 0.0);
        float _2416 = exp2((_2405 * (-1.44269502162933349609375)) * (1.0 - _2407.w));
        float _2417 = log2(_2416);
        float _2433 = log2(_2154);
        _2247 = (exp2(_2433 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].x)) * _2407.x) / cbSceneParam._m0[78u].x)) + _2151;
        _2249 = (exp2(_2433 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].y)) * _2407.y) / cbSceneParam._m0[78u].y)) + _2152;
        _2251 = (exp2(_2433 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2417 * cbSceneParam._m0[78u].z)) * _2407.z) / cbSceneParam._m0[78u].z)) + _2153;
        _2253 = _2416 * _2154;
    }
    else
    {
        _2247 = _2151;
        _2249 = _2152;
        _2251 = _2153;
        _2253 = _2154;
    }
    float _2265 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2266 = _2265 == 3.0;
    float _2268 = log2(_2253);
    float _2272 = exp2(_2268 * cbSceneParam._m0[78u].x);
    float _2273 = exp2(_2268 * cbSceneParam._m0[78u].y);
    float _2274 = exp2(_2268 * cbSceneParam._m0[78u].z);
    float _2275 = _2272 * (isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0)));
    float _2276 = _2273 * (isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0)));
    float _2277 = _2274 * (isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0)));
    float _2286 = (_2265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2286 * (_2266 ? _2275 : (_2275 + (cbSceneParam._m0[72u].w * _2247)));
    SV_Target.y = _2286 * (_2266 ? _2276 : (_2276 + (cbSceneParam._m0[72u].w * _2249)));
    SV_Target.z = _2286 * (_2266 ? _2277 : (_2277 + (cbSceneParam._m0[72u].w * _2251)));
    SV_Target.w = cbInstanceData._m0[_2126].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2089) * _2125) * _2272) * _2286;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2090) * _2125) * _2273) * _2286;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2091) * _2125) * _2274) * _2286;
    SV_Target_1.w = cbInstanceData._m0[_2126].w;
}


