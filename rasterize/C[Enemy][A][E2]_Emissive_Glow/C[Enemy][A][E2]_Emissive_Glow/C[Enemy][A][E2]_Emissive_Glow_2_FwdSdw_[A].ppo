#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _857;
float _3340;
float _3341;
float _3342;
float _3343;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _179 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _180 = _179 * NORMAL.x;
    float _181 = _179 * NORMAL.y;
    float _182 = _179 * NORMAL.z;
    vec4 _201 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _227 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _235 = (_227.x * cbMtdParam._m0[12u].x) + (_201.x * cbMtdParam._m0[9u].x);
    float _236 = (_227.y * cbMtdParam._m0[12u].y) + (_201.y * cbMtdParam._m0[9u].y);
    float _237 = (_227.z * cbMtdParam._m0[12u].z) + (_201.z * cbMtdParam._m0[9u].z);
    vec4 _271 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _300 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _317 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _318 = _317 * _180;
    float _319 = _317 * _181;
    float _320 = _317 * _182;
    float _3352 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3363 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3374 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    vec4 _405 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _407 = _405.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _536 = sqrt(((_391 * _391) + (_392 * _392)) + (_393 * _393));
        float _542 = (cbMatDynParam._m0[5u].x * _536) + cbMatDynParam._m0[5u].y;
        float _3385 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        float _543 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _547 = (cbMatDynParam._m0[5u].z * _536) + cbMatDynParam._m0[5u].w;
        float _3396 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) - _543)) + _543) < ((_407 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _419 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _420 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _440 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _443 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _446 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = _459 + 9u;
    uint _461 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_461].z;
    float _3407 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _419, cbSceneParam._m0[86u].y * _420));
    float _484 = _481.x * TEXCOORD_4;
    float _485 = dot(vec3(_318, _319, _320), vec3(_398, _399, _400));
    float _488 = _485 * 2.0;
    float _493 = (_488 * _318) - _398;
    float _494 = (_488 * _319) - _399;
    float _495 = (_488 * _320) - _400;
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_525, cbModelParam._m0[26u].z, fma(_521, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _517));
        float _585 = fma(_525, cbModelParam._m0[27u].z, fma(_521, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _517));
        float _589 = fma(_525, cbModelParam._m0[28u].z, fma(_521, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _517));
        float _614 = _517 + _318;
        float _615 = _521 + _319;
        float _616 = _525 + _320;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_318, _319, _320), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3477 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_318, _319, _320), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3510 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_318, _319, _320), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3543 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_525, cbModelParam._m0[30u].z, fma(_521, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _517));
        float _904 = fma(_525, cbModelParam._m0[31u].z, fma(_521, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _517));
        float _908 = fma(_525, cbModelParam._m0[32u].z, fma(_521, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _517));
        float _931 = _517 + _318;
        float _932 = _521 + _319;
        float _933 = _525 + _320;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_318, _319, _320), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3606 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_318, _319, _320), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3639 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_318, _319, _320), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3672 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = _857;
        _1179 = _857;
        _1180 = _857;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _493 * 0.5;
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_856, _860, _863, _866));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_858, _861, _864, _867));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _862, _865, _868));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_525, cbModelParam._m0[13u].z, fma(_521, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_525, cbModelParam._m0[14u].z, fma(_521, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_525, cbModelParam._m0[15u].z, fma(_521, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1366 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1369 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1395;
        if (_1363 > 0.0)
        {
            _1395 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1395 = frontier_phi_17_15_ladder;
        }
        float _1568;
        if (_1366 > 0.0)
        {
            _1568 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1568 = frontier_phi_26_22_ladder;
        }
        float _1865;
        if (_1369 > 0.0)
        {
            _1865 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1865 = frontier_phi_38_33_ladder;
        }
        float _1867 = isnan(_1568) ? _1395 : (isnan(_1395) ? _1568 : min(_1395, _1568));
        float _1868 = isnan(_1865) ? _1867 : (isnan(_1867) ? _1865 : min(_1867, _1865));
        float _1872 = (_1868 * _1363) + _1352;
        float _1873 = (_1868 * _1366) + _1356;
        float _1874 = (_1868 * _1369) + _1360;
        float _1875 = _1868 * 9.9999997473787516355514526367188e-05;
        float _1877 = (-1.0) - _1875;
        float _1879 = _1875 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1874 > _1879) || ((_1874 < _1877) || ((_1873 > _1879) || ((_1873 < _1877) || ((_1872 < _1877) || (_1872 > _1879))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1874, cbModelParam._m0[9u].z, fma(_1873, cbModelParam._m0[9u].y, _1872 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1874, cbModelParam._m0[10u].z, fma(_1873, cbModelParam._m0[10u].y, _1872 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1874, cbModelParam._m0[11u].z, fma(_1873, cbModelParam._m0[11u].y, _1872 * cbModelParam._m0[11u].x))), _1304);
            frontier_phi_16_38_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_16_38_ladder_2;
        _1387 = frontier_phi_16_38_ladder_1;
        _1389 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1304);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1392 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_525, cbModelParam._m0[21u].z, fma(_521, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_525, cbModelParam._m0[22u].z, fma(_521, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_525, cbModelParam._m0[23u].z, fma(_521, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1462 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1465 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1573;
        if (_1459 > 0.0)
        {
            _1573 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1573 = frontier_phi_28_24_ladder;
        }
        float _1892;
        if (_1462 > 0.0)
        {
            _1892 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1892 = frontier_phi_40_35_ladder;
        }
        float _2165;
        if (_1465 > 0.0)
        {
            _2165 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2165 = frontier_phi_50_47_ladder;
        }
        float _2167 = isnan(_1892) ? _1573 : (isnan(_1573) ? _1892 : min(_1573, _1892));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1459) + _1448;
        float _2173 = (_2168 * _1462) + _1452;
        float _2174 = (_2168 * _1465) + _1456;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2175;
        float _2178 = _2175 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2174 > _2178) || ((_2174 < _2176) || ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 < _2176) || (_2172 > _2178))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2174, cbModelParam._m0[17u].z, fma(_2173, cbModelParam._m0[17u].y, _2172 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2174, cbModelParam._m0[18u].z, fma(_2173, cbModelParam._m0[18u].y, _2172 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2174, cbModelParam._m0[19u].z, fma(_2173, cbModelParam._m0[19u].y, _2172 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_25_50_ladder = _2265.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2265.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2265.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_25_50_ladder_2;
        _1486 = frontier_phi_25_50_ladder_1;
        _1488 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1392);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1500 = _484 * 0.01200000010430812835693359375;
    float _1502 = _1500 * ((cbModelParam._m0[1u].w * (_1484 - _1385)) + _1385);
    float _1503 = _1500 * ((cbModelParam._m0[1u].w * (_1486 - _1387)) + _1387);
    float _1504 = _1500 * ((cbModelParam._m0[1u].w * (_1488 - _1389)) + _1389);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1559 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1560 = _1547 / _1559;
    float _1561 = _1551 / _1559;
    float _1562 = _1555 / _1559;
    float _1709;
    float _1710;
    float _1711;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1589 = ((uint(_1562 > cbSceneParam._m0[59u].y) + uint(_1562 > cbSceneParam._m0[59u].x)) + uint(_1562 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1590 = _1589 + 43u;
        uint _1598 = _1589 + 44u;
        uint _1606 = _1589 + 45u;
        uint _1614 = _1589 + 46u;
        float _1625 = fma(_1559, cbSceneParam._m0[_1590].w, fma(_1555, cbSceneParam._m0[_1590].z, fma(_1551, cbSceneParam._m0[_1590].y, _1547 * cbSceneParam._m0[_1590].x)));
        float _1629 = fma(_1559, cbSceneParam._m0[_1598].w, fma(_1555, cbSceneParam._m0[_1598].z, fma(_1551, cbSceneParam._m0[_1598].y, _1547 * cbSceneParam._m0[_1598].x)));
        float _1637 = fma(_1559, cbSceneParam._m0[_1614].w, fma(_1555, cbSceneParam._m0[_1614].z, fma(_1551, cbSceneParam._m0[_1614].y, _1547 * cbSceneParam._m0[_1614].x)));
        float _1642 = cbSceneParam._m0[33u].z * _1637;
        float _1644 = cbSceneParam._m0[33u].w * _1637;
        float _1647 = fma(_1559, cbSceneParam._m0[_1606].w, fma(_1555, cbSceneParam._m0[_1606].z, fma(_1551, cbSceneParam._m0[_1606].y, _1547 * cbSceneParam._m0[_1606].x))) / _1637;
        float _1695 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
        float _3798 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1702 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 + _1625) / _1637, (_1644 + _1629) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1625) / _1637, (_1629 - _1642) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1642) / _1637, (_1629 - _1644) / _1637), _1647), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1625 - _1644) / _1637, (_1642 + _1629) / _1637), _1647), 0.0)).x), vec4(0.25)));
        _1709 = 1.0 - (_1702 * cbSceneParam._m0[34u].x);
        _1710 = 1.0 - (_1702 * cbSceneParam._m0[34u].y);
        _1711 = 1.0 - (_1702 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1709 = 1.0;
        _1710 = 1.0;
        _1711 = 1.0;
    }
    float _1775;
    float _1777;
    float _1779;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1763 = fma(_1559, cbSceneParam._m0[63u].w, fma(_1555, cbSceneParam._m0[63u].z, fma(_1551, cbSceneParam._m0[63u].y, _1547 * cbSceneParam._m0[63u].x)));
        float _1764 = fma(_1559, cbSceneParam._m0[60u].w, fma(_1555, cbSceneParam._m0[60u].z, fma(_1551, cbSceneParam._m0[60u].y, _1547 * cbSceneParam._m0[60u].x))) / _1763;
        float _1765 = fma(_1559, cbSceneParam._m0[61u].w, fma(_1555, cbSceneParam._m0[61u].z, fma(_1551, cbSceneParam._m0[61u].y, _1547 * cbSceneParam._m0[61u].x))) / _1763;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1764 >= cbSceneParam._m0[64u].x) && (_1765 >= cbSceneParam._m0[64u].y)) && (_1764 <= cbSceneParam._m0[64u].z)) && (_1765 <= cbSceneParam._m0[64u].w))
        {
            float _1905 = fma(_1559, cbSceneParam._m0[62u].w, fma(_1555, cbSceneParam._m0[62u].z, fma(_1551, cbSceneParam._m0[62u].y, _1547 * cbSceneParam._m0[62u].x))) / _1763;
            float _1909 = isnan(cbSceneParam._m0[41u].w) ? _1905 : (isnan(_1905) ? cbSceneParam._m0[41u].w : max(_1905, cbSceneParam._m0[41u].w));
            float _1952 = (cbSceneParam._m0[33u].x - sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562))) * cbSceneParam._m0[33u].y;
            float _3814 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
            float _1959 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1764, cbSceneParam._m0[33u].w + _1765), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1764, _1765 - cbSceneParam._m0[33u].z), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].z, _1765 - cbSceneParam._m0[33u].w), _1909), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1764 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1765), _1909), 0.0)).x), vec4(0.25)));
            float _1963 = 1.0 - (_1959 * cbSceneParam._m0[34u].x);
            float _1964 = 1.0 - (_1959 * cbSceneParam._m0[34u].y);
            float _1965 = 1.0 - (_1959 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1965) ? _1711 : (isnan(_1711) ? _1965 : min(_1711, _1965));
            frontier_phi_37_36_ladder_1 = isnan(_1964) ? _1710 : (isnan(_1710) ? _1964 : min(_1710, _1964));
            frontier_phi_37_36_ladder_2 = isnan(_1963) ? _1709 : (isnan(_1709) ? _1963 : min(_1709, _1963));
        }
        else
        {
            frontier_phi_37_36_ladder = _1711;
            frontier_phi_37_36_ladder_1 = _1710;
            frontier_phi_37_36_ladder_2 = _1709;
        }
        _1775 = frontier_phi_37_36_ladder_2;
        _1777 = frontier_phi_37_36_ladder_1;
        _1779 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1775 = _1709;
        _1777 = _1710;
        _1779 = _1711;
    }
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _484 + (-1.0);
    float _1800 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1803 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1804 = _1786 + 5u;
    float _1810 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1814 = _1786 + 4u;
    float _1824 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1828 = _1786 | 1u;
    float _1839 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_318, _319, _320));
    float _1842 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_318, _319, _320));
    float _3850 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _3861 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1847 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * 0.3183098733425140380859375;
    float _1849 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1856 = ((cbLight._m0[_1804].x * _1810) * _1849) + (((cbLight._m0[_1814].x * _1775) * _1824) * _1847);
    float _1857 = ((_1810 * cbLight._m0[_1804].y) * _1849) + (((cbLight._m0[_1814].y * _1777) * _1824) * _1847);
    float _1858 = ((_1810 * cbLight._m0[_1804].z) * _1849) + (((cbLight._m0[_1814].z * _1779) * _1824) * _1847);
    uvec4 _1862 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1864 = _1862.x == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1864)
    {
        _1966 = _1856;
        _1968 = _1857;
        _1970 = _1858;
    }
    else
    {
        uint _1974 = _1786 + 6u;
        float _1990 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _3872 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1993 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1966 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1856;
        _1968 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1857;
        _1970 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1858;
    }
    bool _1973 = _1862.y == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_1973)
    {
        _2028 = _1966;
        _2030 = _1968;
        _2032 = _1970;
    }
    else
    {
        uint _2136 = _1786 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _3888 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2155 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2028 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1966;
        _2030 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1968;
        _2032 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1970;
    }
    uint _2034 = _1786 + 8u;
    float _2040 = cbLight._m0[_1786].x + _398;
    float _2041 = cbLight._m0[_1786].y + _399;
    float _2042 = cbLight._m0[_1786].z + _400;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2050 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1786].xyz));
    float _3904 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _2054 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_2040 * _2046, _2041 * _2046, _2042 * _2046));
    float _3926 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2072 = (0.5 / ((_2053 + 9.9999999392252902907785028219223e-09) + _2054)) * _2053;
    float _3937 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2074 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.31831014156341552734375;
    uint _2088 = _1786 + 9u;
    float _2094 = cbLight._m0[_1828].x + _398;
    float _2095 = cbLight._m0[_1828].y + _399;
    float _2096 = cbLight._m0[_1828].z + _400;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2104 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1828].xyz));
    float _3948 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_2094 * _2100, _2095 * _2100, _2096 * _2100));
    float _3959 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2121 = (0.5 / ((_2107 + 9.9999999392252902907785028219223e-09) + _2054)) * _2107;
    float _3970 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.31831014156341552734375;
    float _2133 = (((_2117 * cbLight._m0[_2088].x) * _2123) * _1810) + ((((cbLight._m0[_2034].x * _1775) * _2066) * _2074) * _1824);
    float _2134 = (((_2117 * cbLight._m0[_2088].y) * _2123) * _1810) + ((((cbLight._m0[_2034].y * _1777) * _2066) * _2074) * _1824);
    float _2135 = (((_2117 * cbLight._m0[_2088].z) * _2123) * _1810) + ((((cbLight._m0[_2034].z * _1779) * _2066) * _2074) * _1824);
    float _2191;
    float _2193;
    float _2195;
    if (_1864)
    {
        _2191 = _2133;
        _2193 = _2134;
        _2195 = _2135;
    }
    else
    {
        uint _2197 = _1786 + 10u;
        uint _2203 = _1786 + 2u;
        float _2209 = cbLight._m0[_2203].x + _398;
        float _2210 = cbLight._m0[_2203].y + _399;
        float _2211 = cbLight._m0[_2203].z + _400;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2219 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2203].xyz));
        float _3981 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2209 * _2215, _2210 * _2215, _2211 * _2215));
        float _3992 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2236 = (0.5 / ((_2222 + 9.9999999392252902907785028219223e-09) + _2054)) * _2222;
        float _4003 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.31831014156341552734375;
        float _2239 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2191 = (((_2232 * cbLight._m0[_2197].x) * _2238) * _2239) + _2133;
        _2193 = (((_2232 * cbLight._m0[_2197].y) * _2238) * _2239) + _2134;
        _2195 = (((_2232 * cbLight._m0[_2197].z) * _2238) * _2239) + _2135;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1973)
    {
        _2270 = _2191;
        _2272 = _2193;
        _2274 = _2195;
    }
    else
    {
        uint _2281 = _1786 + 11u;
        uint _2287 = _1786 + 3u;
        float _2293 = cbLight._m0[_2287].x + _398;
        float _2294 = cbLight._m0[_2287].y + _399;
        float _2295 = cbLight._m0[_2287].z + _400;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2303 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2287].xyz));
        float _4019 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2293 * _2299, _2294 * _2299, _2295 * _2299));
        float _4030 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2320 = (0.5 / ((_2306 + 9.9999999392252902907785028219223e-09) + _2054)) * _2306;
        float _4041 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2322 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.31831014156341552734375;
        float _2323 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2270 = (((_2316 * cbLight._m0[_2281].x) * _2322) * _2323) + _2191;
        _2272 = (((_2316 * cbLight._m0[_2281].y) * _2322) * _2323) + _2193;
        _2274 = (((_2316 * cbLight._m0[_2281].z) * _2322) * _2323) + _2195;
    }
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_1784.y == 0u)
    {
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.x;
        uint _2356 = uint((float(_2344.y) * floor(float(uint(cbSceneParam._m0[85u].y * _420) / _2345))) + floor(float(uint(cbSceneParam._m0[85u].x * _419) / _2345)));
        float _2366 = (log2(_1562 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2367 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        uint _2370 = uint(isnan(14.0) ? _2367 : (isnan(_2367) ? 14.0 : min(_2367, 14.0)));
        uvec4 _2375 = texelFetch(g_lightClusterGridBuffer, int(((_2370 << 2u) + (_2356 << 6u)) >> 2u));
        uint _2376 = _2375.x;
        uint _2377 = _2344.z;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((((1u << ((_2377 >> 4u) & 15u)) + 4294967295u) & _2376) == 0u) || ((_2377 & 240u) == 0u))
        {
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
        }
        else
        {
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2662)
                {
                    frontier_phi_71_pred = _2651;
                    frontier_phi_71_pred_1 = _2650;
                    frontier_phi_71_pred_2 = _2649;
                    frontier_phi_71_pred_3 = _2648;
                    frontier_phi_71_pred_4 = _2647;
                    frontier_phi_71_pred_5 = _2646;
                }
                else
                {
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    uint _2797;
                    _2791 = _2646;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2661;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    for (;;)
                    {
                        uint _2801 = uint(findLSB(_2797)) + (_2652 << 5u);
                        uint _2798 = (_2797 + 4294967295u) & _2797;
                        uint _2803 = _2801 * 48u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2823 = (_2801 * 48u) + 4u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2842 = (_2801 * 48u) + 8u;
                        vec3 _2853 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x));
                        float _2857 = _2817.x - _1560;
                        float _2858 = _2817.y - _1561;
                        float _2859 = _2817.z - _1562;
                        float _2860 = dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859));
                        float _2863 = inversesqrt(_2860);
                        float _2872 = 1.0 - (_2860 * _2817.w);
                        float _4067 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2874 = sqrt(_2860) * _2836.w;
                        float _2877 = 1.39999997615814208984375 / (_2874 + 1.39999997615814208984375);
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * dot(vec3(_440, _443, _446), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859))) + _2878;
                        float _2884 = _2874 * _2874;
                        float _2888 = ((isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))) * _2873) / ((_2884 * 0.699999988079071044921875) + 1.0);
                        float _2892 = (-0.0) - _1560;
                        float _2893 = (-0.0) - _1561;
                        float _2894 = (-0.0) - _1562;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_440, _443, _446), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4083 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _4094 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2906 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2910 = (0.5 / (((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) + 9.9999999392252902907785028219223e-09) + _2906)) * _2906;
                        float _4105 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2919 = (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 3.1415927410125732421875) / ((_2884 * 2.1991131305694580078125) + 3.141590118408203125)) * _2873;
                        _2721 = (_2888 * _2836.x) + _2794;
                        _2722 = (_2888 * _2836.y) + _2795;
                        _2723 = (_2888 * _2836.z) + _2796;
                        _2718 = (_2919 * _2853.x) + _2791;
                        _2719 = (_2919 * _2853.y) + _2792;
                        _2720 = (_2919 * _2853.z) + _2793;
                        if (_2798 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2791 = _2718;
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2798;
                        }
                    }
                    frontier_phi_71_pred = _2723;
                    frontier_phi_71_pred_1 = _2722;
                    frontier_phi_71_pred_2 = _2721;
                    frontier_phi_71_pred_3 = _2720;
                    frontier_phi_71_pred_4 = _2719;
                    frontier_phi_71_pred_5 = _2718;
                }
                _2496 = frontier_phi_71_pred;
                _2494 = frontier_phi_71_pred_1;
                _2492 = frontier_phi_71_pred_2;
                _2490 = frontier_phi_71_pred_3;
                _2488 = frontier_phi_71_pred_4;
                _2486 = frontier_phi_71_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2486;
                    _2647 = _2488;
                    _2648 = _2490;
                    _2649 = _2492;
                    _2650 = _2494;
                    _2651 = _2496;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
        }
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.z;
        uint _2502 = (_2500 >> 8u) & 15u;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((4294967295u << _2502) & _2376) == 0u)
        {
            _2617 = _2485;
            _2619 = _2487;
            _2621 = _2489;
            _2623 = _2491;
            _2625 = _2493;
            _2627 = _2495;
        }
        else
        {
            float _2642 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2502 < ((_2500 >> 12u) & 15u))
            {
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2774 = _2485;
                float _2775 = _2487;
                float _2776 = _2489;
                float _2777 = _2491;
                float _2778 = _2493;
                float _2779 = _2495;
                uint _2780 = _2502;
                uint _2789;
                bool _2790;
                for (;;)
                {
                    _2789 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                    _2790 = _2789 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2790)
                    {
                        frontier_phi_82_pred = _2779;
                        frontier_phi_82_pred_1 = _2778;
                        frontier_phi_82_pred_2 = _2777;
                        frontier_phi_82_pred_3 = _2776;
                        frontier_phi_82_pred_4 = _2775;
                        frontier_phi_82_pred_5 = _2774;
                    }
                    else
                    {
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _2946 = _2774;
                        float _2947 = _2775;
                        float _2948 = _2776;
                        float _2949 = _2777;
                        float _2950 = _2778;
                        float _2951 = _2779;
                        uint _2952 = _2789;
                        uint _2953;
                        vec4 _2978;
                        float _2979;
                        vec4 _2994;
                        vec3 _3006;
                        vec4 _3021;
                        vec4 _3037;
                        float _3084;
                        bool _3085;
                        for (;;)
                        {
                            uint _2963 = ((_2780 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2952));
                            _2953 = (_2952 + 4294967295u) & _2952;
                            uint _2965 = _2963 * 40u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2979 = _2978.w;
                            uint _2981 = (_2963 * 40u) + 4u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2996 = (_2963 * 40u) + 8u;
                            _3006 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x));
                            uint _3008 = (_2963 * 40u) + 16u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3024 = (_2963 * 40u) + 20u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3040 = (_2963 * 40u) + 24u;
                            vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3059 = (_2963 * 40u) + 28u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3084 = fma(_1562, _3072.z, fma(_1561, _3072.y, _3072.x * _1560)) + _3072.w;
                            _3085 = !((fma(_1562, _3053.z, fma(_1561, _3053.y, _3053.x * _1560)) + _3053.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3085)
                            {
                                float _3112 = _2978.x - _1560;
                                float _3113 = _2978.y - _1561;
                                float _3114 = _2978.z - _1562;
                                float _3115 = dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114));
                                float _3118 = inversesqrt(_3115);
                                float _3119 = _3118 * _3112;
                                float _3120 = _3118 * _3113;
                                float _3121 = _3118 * _3114;
                                float _3125 = 1.0 - (_3115 / (_2979 * _2979));
                                float _4116 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3130 = sqrt(_3115) * _2994.w;
                                float _3132 = 1.39999997615814208984375 / (_3130 + 1.39999997615814208984375);
                                float _3133 = _3132 * _3132;
                                float _3134 = 1.0 - _3133;
                                float _3136 = (_3134 * dot(vec3(_3119, _3120, _3121), vec3(_440, _443, _446))) + _3133;
                                float _3139 = _3130 * _3130;
                                float _3143 = (fma(_1562, _3021.z, fma(_1561, _3021.y, _3021.x * _1560)) + _3021.w) / _3084;
                                float _3144 = (fma(_1562, _3037.z, fma(_1561, _3037.y, _3037.x * _1560)) + _3037.w) / _3084;
                                float _3148 = 1.0 - dot(vec2(_3143, _3144), vec2(_3143, _3144));
                                float _4132 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3150 = _3149 * (((isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))) * _3126) / ((_3139 * 0.699999988079071044921875) + 1.0));
                                float _3160 = dot(vec3(_440, _443, _446), vec3((-0.0) - (_1560 * _2642), (-0.0) - (_1561 * _2642), (-0.0) - (_1562 * _2642)));
                                float _4143 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3168 = (_3134 * dot(vec3(_440, _443, _446), vec3(_3119, _3120, _3121))) + _3133;
                                float _4154 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3173 = (0.5 / (((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) + 9.9999999392252902907785028219223e-09) + _3169)) * _3169;
                                float _4165 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3180 = (_3149 * _3126) * (((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 3.1415927410125732421875) / ((_3139 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3150 * _2994.z;
                                frontier_phi_88_pred_1 = _3150 * _2994.y;
                                frontier_phi_88_pred_2 = _3150 * _2994.x;
                                frontier_phi_88_pred_3 = _3180 * _3006.z;
                                frontier_phi_88_pred_4 = _3180 * _3006.y;
                                frontier_phi_88_pred_5 = _3180 * _3006.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3189 = frontier_phi_88_pred;
                            _3188 = frontier_phi_88_pred_1;
                            _3187 = frontier_phi_88_pred_2;
                            _3186 = frontier_phi_88_pred_3;
                            _3185 = frontier_phi_88_pred_4;
                            _3184 = frontier_phi_88_pred_5;
                            _2936 = _3187 + _2949;
                            _2937 = _3188 + _2950;
                            _2938 = _3189 + _2951;
                            _2933 = _3184 + _2946;
                            _2934 = _3185 + _2947;
                            _2935 = _3186 + _2948;
                            if (_2953 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2953;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2938;
                        frontier_phi_82_pred_1 = _2937;
                        frontier_phi_82_pred_2 = _2936;
                        frontier_phi_82_pred_3 = _2935;
                        frontier_phi_82_pred_4 = _2934;
                        frontier_phi_82_pred_5 = _2933;
                    }
                    _2628 = frontier_phi_82_pred;
                    _2626 = frontier_phi_82_pred_1;
                    _2624 = frontier_phi_82_pred_2;
                    _2622 = frontier_phi_82_pred_3;
                    _2620 = frontier_phi_82_pred_4;
                    _2618 = frontier_phi_82_pred_5;
                    uint _2781 = _2780 + 1u;
                    if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2774 = _2618;
                        _2775 = _2620;
                        _2776 = _2622;
                        _2777 = _2624;
                        _2778 = _2626;
                        _2779 = _2628;
                        _2780 = _2781;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2624;
                frontier_phi_63_64_ladder_1 = _2628;
                frontier_phi_63_64_ladder_2 = _2626;
                frontier_phi_63_64_ladder_3 = _2622;
                frontier_phi_63_64_ladder_4 = _2620;
                frontier_phi_63_64_ladder_5 = _2618;
            }
            else
            {
                frontier_phi_63_64_ladder = _2491;
                frontier_phi_63_64_ladder_1 = _2495;
                frontier_phi_63_64_ladder_2 = _2493;
                frontier_phi_63_64_ladder_3 = _2489;
                frontier_phi_63_64_ladder_4 = _2487;
                frontier_phi_63_64_ladder_5 = _2485;
            }
            _2617 = frontier_phi_63_64_ladder_5;
            _2619 = frontier_phi_63_64_ladder_4;
            _2621 = frontier_phi_63_64_ladder_3;
            _2623 = frontier_phi_63_64_ladder;
            _2625 = frontier_phi_63_64_ladder_2;
            _2627 = frontier_phi_63_64_ladder_1;
        }
        float _2632 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2389 = (_2632 * _2623) + _2028;
        _2391 = (_2632 * _2625) + _2030;
        _2393 = (_2632 * _2627) + _2032;
        _2395 = ((_2617 * 0.039999999105930328369140625) * _2632) + _2270;
        _2397 = ((_2619 * 0.039999999105930328369140625) * _2632) + _2272;
        _2399 = ((_2621 * 0.039999999105930328369140625) * _2632) + _2274;
    }
    else
    {
        _2389 = _2028;
        _2391 = _2030;
        _2393 = _2032;
        _2395 = _2270;
        _2397 = _2272;
        _2399 = _2274;
    }
    uint _2405 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _2411 = cbInstanceData._m0[_2405].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _300.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _271.x));
    float _2412 = cbInstanceData._m0[_2405].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _300.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _271.y));
    float _2413 = cbInstanceData._m0[_2405].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _300.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _271.z));
    float _4181 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4192 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4203 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _2430 = (((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2389 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _484))) + ((_2395 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1295)) * cbPerFrame._m0[3u].x)) + _2411;
    float _2432 = (_2412 + ((_2397 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1295)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2391 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _484)));
    float _2434 = (_2413 + ((_2399 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1295)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2393 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _484)));
    float _2435 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2436 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2437 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2443 = cbMtdParam._m0[2u].x * _2411;
    float _2444 = cbMtdParam._m0[2u].y * _2412;
    float _2445 = cbMtdParam._m0[2u].z * _2413;
    float _4229 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2447 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    uint _2448 = _459 + 6u;
    float _2456 = _419 / cbSceneParam._m0[86u].x;
    float _2457 = _420 / cbSceneParam._m0[86u].y;
    vec4 _2471 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2473 = _2471.x;
    float _2474 = _2471.y;
    float _2475 = _2471.z;
    float _2476 = _2471.w;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2510 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2511 = _2510 / _340;
        float _2522 = _2511 * _391;
        float _2523 = _392 * _2511;
        float _2524 = (-0.0) - _2523;
        float _2526 = _2511 * _393;
        float _2528 = (cbSceneParam._m0[77u].w * _2524) / _2510;
        float _2529 = _2528 + cbSceneParam._m0[79u].w;
        float _2530 = cbSceneParam._m0[79u].w - _2523;
        float _2536 = sqrt(((_2522 * _2522) + (_2523 * _2523)) + (_2526 * _2526));
        float _2539 = (1.0 - (cbSceneParam._m0[77u].w / _2510)) * _2536;
        float _2544 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2546 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2731;
        if (abs((_2524 - _2528) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2731 = ((((_2529 > 0.0) ? exp2(_2544 * _2529) : (2.0 - exp2(_2546 * _2529))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2539;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : max(_2529, _2530));
            float _2677 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : min(_2529, _2530));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2731 = ((abs(_2536 / _2524) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2544 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2544 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2546 * _2686) - exp2(_2546 * _2687)) * _2675))) + (_2539 * cbSceneParam._m0[80u].z);
        }
        vec4 _2733 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2456, _2457, 1.0), 0.0);
        float _2742 = exp2((_2731 * (-1.44269502162933349609375)) * (1.0 - _2733.w));
        float _2743 = log2(_2742);
        float _2759 = log2(_2476);
        _2548 = (exp2(_2759 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].x)) * _2733.x) / cbSceneParam._m0[78u].x)) + _2473;
        _2550 = (exp2(_2759 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].y)) * _2733.y) / cbSceneParam._m0[78u].y)) + _2474;
        _2552 = (exp2(_2759 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2743 * cbSceneParam._m0[78u].z)) * _2733.z) / cbSceneParam._m0[78u].z)) + _2475;
        _2554 = _2742 * _2476;
    }
    else
    {
        _2548 = _2473;
        _2550 = _2474;
        _2552 = _2475;
        _2554 = _2476;
    }
    bool _2769;
    vec4 _2564;
    vec4 _2587;
    float _2589;
    float _2593;
    float _2594;
    float _2595;
    float _2598;
    float _2601;
    float _2604;
    float _2605;
    bool _2616;
    for (;;)
    {
        _2564 = cbMatDynParam._m0[0u];
        float _2566 = roundEven(_2564.y);
        bool _2567 = _2566 == 3.0;
        float _2569 = log2(_2554);
        float _2573 = exp2(_2569 * cbSceneParam._m0[78u].x);
        float _2574 = exp2(_2569 * cbSceneParam._m0[78u].y);
        float _2575 = exp2(_2569 * cbSceneParam._m0[78u].z);
        float _2576 = _2573 * _2435;
        float _2577 = _2574 * _2436;
        float _2578 = _2575 * _2437;
        float _2585 = _407 + (-0.5);
        _2587 = cbMtdParam._m0[1u];
        _2589 = _2587.y * _2585;
        float _2592 = (_2566 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2593 = _2592 * (_2567 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2548)));
        _2594 = _2592 * (_2567 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
        _2595 = _2592 * (_2567 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
        _2598 = ((_2443 * _2447) * _2573) * _2592;
        _2601 = ((_2444 * _2447) * _2574) * _2592;
        _2604 = ((_2445 * _2447) * _2575) * _2592;
        _2605 = _2585 * 0.999000012874603271484375;
        _2616 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2616)
        {
            if ((cbInstanceData._m0[_459 + 7u].x + _2605) < 0.5)
            {
                _2769 = true;
                break;
            }
        }
        uint _2710 = _460 + uint(_2564.w);
        if ((cbInstanceData._m0[_2710].w < 1.0) && ((cbInstanceData._m0[_2710].w + _2605) < 0.5))
        {
            _2769 = true;
            break;
        }
        if ((_2589 + 1.0) < _2587.x)
        {
            _2769 = true;
            break;
        }
        _2769 = false;
        break;
    }
    float _2924;
    if (_2769)
    {
        discard_state = true;
        _2924 = 0.0;
    }
    else
    {
        _2924 = cbInstanceData._m0[_2448].w;
    }
    SV_Target.x = _2593;
    SV_Target.y = _2594;
    SV_Target.z = _2595;
    SV_Target.w = _2924;
    SV_Target_1.x = _2598;
    SV_Target_1.y = _2601;
    SV_Target_1.z = _2604;
    SV_Target_1.w = cbInstanceData._m0[_2448].w;
    discard_exit();
}


