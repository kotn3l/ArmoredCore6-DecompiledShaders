#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _841;
float _3326;
float _3327;
float _3328;
float _3329;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _175 = _174 * NORMAL.x;
    float _176 = _174 * NORMAL.y;
    float _177 = _174 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _255 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _284 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _301 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _302 = _301 * _175;
    float _303 = _301 * _176;
    float _304 = _301 * _177;
    float _3338 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3349 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3360 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _520 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _526 = (cbMatDynParam._m0[5u].x * _520) + cbMatDynParam._m0[5u].y;
        float _3371 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
        float _527 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _531 = (cbMatDynParam._m0[5u].z * _520) + cbMatDynParam._m0[5u].w;
        float _3382 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) - _527)) + _527) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _427 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _430 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _443 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3393 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _468 = _465.x * TEXCOORD_4;
    float _469 = dot(vec3(_302, _303, _304), vec3(_382, _383, _384));
    float _472 = _469 * 2.0;
    float _477 = (_472 * _302) - _382;
    float _478 = (_472 * _303) - _383;
    float _479 = (_472 * _304) - _384;
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _840;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _565 = fma(_509, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501));
        float _569 = fma(_509, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501));
        float _573 = fma(_509, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501));
        float _598 = _501 + _302;
        float _599 = _505 + _303;
        float _600 = _509 + _304;
        float _610 = fma(_600, cbModelParam._m0[26u].z, fma(_599, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598)) - _565;
        float _611 = fma(_600, cbModelParam._m0[27u].z, fma(_599, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598)) - _569;
        float _612 = fma(_600, cbModelParam._m0[28u].z, fma(_599, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598)) - _573;
        float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
        float _629 = ((_616 * _610) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_565 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _630 = ((_616 * _611) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_569 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_616 * _612) / cbModelParam._m0[34u].z) + ((((((_573 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_629, _630, _631), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_629, _630, _631), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_629, _630, _631), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_629, _630, _631), 0.0);
        float _668 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_634.x + (-0.5));
        float _670 = _668 * (_634.y + (-0.5));
        float _671 = _668 * (_634.z + (-0.5));
        float _678 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_641.x + (-0.5));
        float _680 = _678 * (_641.y + (-0.5));
        float _681 = _678 * (_641.z + (-0.5));
        float _688 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_648.x + (-0.5));
        float _690 = _688 * (_648.y + (-0.5));
        float _691 = _688 * (_648.z + (-0.5));
        float _698 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_655.x + (-0.5));
        float _700 = _698 * (_655.y + (-0.5));
        float _701 = _698 * (_655.z + (-0.5));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = _669 * 0.5;
        float _706 = _679 * 0.5;
        float _707 = _689 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _722 = (dot(vec3(_302, _303, _304), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _732 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3463 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_734 + 1.0))) + _739) * _702;
        float _749 = _670 * 0.5;
        float _750 = _680 * 0.5;
        float _751 = _690 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _765 = (dot(vec3(_302, _303, _304), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _774 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3496 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_776 + 1.0))) + _781) * _703;
        float _791 = _671 * 0.5;
        float _792 = _681 * 0.5;
        float _793 = _691 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_302, _303, _304), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3529 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_818 + 1.0))) + _823) * _704;
        _840 = _671;
        _842 = _670;
        _843 = _669;
        _844 = _681;
        _845 = _680;
        _846 = _679;
        _847 = _691;
        _848 = _690;
        _849 = _689;
        _850 = _704;
        _851 = _703;
        _852 = _702;
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
    }
    else
    {
        _840 = _841;
        _842 = _841;
        _843 = _841;
        _844 = _841;
        _845 = _841;
        _846 = _841;
        _847 = _841;
        _848 = _841;
        _849 = _841;
        _850 = _841;
        _851 = _841;
        _852 = _841;
        _853 = 0.0;
        _854 = 0.0;
        _855 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_509, cbModelParam._m0[30u].z, fma(_505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _501));
        float _888 = fma(_509, cbModelParam._m0[31u].z, fma(_505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _501));
        float _892 = fma(_509, cbModelParam._m0[32u].z, fma(_505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _501));
        float _915 = _501 + _302;
        float _916 = _505 + _303;
        float _917 = _509 + _304;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_302, _303, _304), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3592 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_302, _303, _304), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3625 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_302, _303, _304), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3658 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _841;
        _1154 = _841;
        _1155 = _841;
        _1156 = _841;
        _1157 = _841;
        _1158 = _841;
        _1159 = _841;
        _1160 = _841;
        _1161 = _841;
        _1162 = _841;
        _1163 = _841;
        _1164 = _841;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _853)) + _853;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _854)) + _854;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _855)) + _855;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_840, _844, _847, _850));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_842, _845, _848, _851));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _846, _849, _852));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1288 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1337 = fma(_509, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501)) + cbModelParam._m0[13u].w;
        float _1341 = fma(_509, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501)) + cbModelParam._m0[14u].w;
        float _1345 = fma(_509, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501)) + cbModelParam._m0[15u].w;
        float _1348 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1351 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1354 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1380;
        if (_1348 > 0.0)
        {
            _1380 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1380 = frontier_phi_17_15_ladder;
        }
        float _1554;
        if (_1351 > 0.0)
        {
            _1554 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1554 = frontier_phi_26_22_ladder;
        }
        float _1851;
        if (_1354 > 0.0)
        {
            _1851 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1851 = frontier_phi_38_33_ladder;
        }
        float _1853 = isnan(_1554) ? _1380 : (isnan(_1380) ? _1554 : min(_1380, _1554));
        float _1854 = isnan(_1851) ? _1853 : (isnan(_1853) ? _1851 : min(_1853, _1851));
        float _1858 = (_1854 * _1348) + _1337;
        float _1859 = (_1854 * _1351) + _1341;
        float _1860 = (_1854 * _1354) + _1345;
        float _1861 = _1854 * 9.9999997473787516355514526367188e-05;
        float _1863 = (-1.0) - _1861;
        float _1865 = _1861 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1860 > _1865) || ((_1860 < _1863) || ((_1859 > _1865) || ((_1859 < _1863) || ((_1858 < _1863) || (_1858 > _1865))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2005 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1860, cbModelParam._m0[9u].z, fma(_1859, cbModelParam._m0[9u].y, _1858 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1860, cbModelParam._m0[10u].z, fma(_1859, cbModelParam._m0[10u].y, _1858 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1860, cbModelParam._m0[11u].z, fma(_1859, cbModelParam._m0[11u].y, _1858 * cbModelParam._m0[11u].x))), _1288);
            frontier_phi_16_38_ladder = _2005.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2005.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2005.x * cbModelParam._m0[1u].y;
        }
        _1370 = frontier_phi_16_38_ladder_2;
        _1372 = frontier_phi_16_38_ladder_1;
        _1374 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1288);
        _1370 = _1358.x * cbModelParam._m0[1u].y;
        _1372 = _1358.y * cbModelParam._m0[1u].y;
        _1374 = _1358.z * cbModelParam._m0[1u].y;
    }
    float _1377 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1434 = fma(_509, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501)) + cbModelParam._m0[21u].w;
        float _1438 = fma(_509, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501)) + cbModelParam._m0[22u].w;
        float _1442 = fma(_509, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501)) + cbModelParam._m0[23u].w;
        float _1445 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1448 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1451 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1559;
        if (_1445 > 0.0)
        {
            _1559 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1559 = frontier_phi_28_24_ladder;
        }
        float _1878;
        if (_1448 > 0.0)
        {
            _1878 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1878 = frontier_phi_40_35_ladder;
        }
        float _2151;
        if (_1451 > 0.0)
        {
            _2151 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2151 = frontier_phi_50_47_ladder;
        }
        float _2153 = isnan(_1878) ? _1559 : (isnan(_1559) ? _1878 : min(_1559, _1878));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1445) + _1434;
        float _2159 = (_2154 * _1448) + _1438;
        float _2160 = (_2154 * _1451) + _1442;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2161;
        float _2164 = _2161 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2160 > _2164) || ((_2160 < _2162) || ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 < _2162) || (_2158 > _2164))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2160, cbModelParam._m0[17u].z, fma(_2159, cbModelParam._m0[17u].y, _2158 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2160, cbModelParam._m0[18u].z, fma(_2159, cbModelParam._m0[18u].y, _2158 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2160, cbModelParam._m0[19u].z, fma(_2159, cbModelParam._m0[19u].y, _2158 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_25_50_ladder = _2251.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2251.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2251.x * cbModelParam._m0[1u].z;
        }
        _1470 = frontier_phi_25_50_ladder_2;
        _1472 = frontier_phi_25_50_ladder_1;
        _1474 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1377);
        _1470 = _1454.x * cbModelParam._m0[1u].z;
        _1472 = _1454.y * cbModelParam._m0[1u].z;
        _1474 = _1454.z * cbModelParam._m0[1u].z;
    }
    float _1486 = _468 * 0.01200000010430812835693359375;
    float _1488 = _1486 * ((cbModelParam._m0[1u].w * (_1470 - _1370)) + _1370);
    float _1489 = _1486 * ((cbModelParam._m0[1u].w * (_1472 - _1372)) + _1372);
    float _1490 = _1486 * ((cbModelParam._m0[1u].w * (_1474 - _1374)) + _1374);
    float _1493 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, _1488 * cbSceneParam._m0[91u].x));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1546 = _1533 / _1545;
    float _1547 = _1537 / _1545;
    float _1548 = _1541 / _1545;
    float _1695;
    float _1696;
    float _1697;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1575 = ((uint(_1548 > cbSceneParam._m0[59u].y) + uint(_1548 > cbSceneParam._m0[59u].x)) + uint(_1548 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1576 = _1575 + 43u;
        uint _1584 = _1575 + 44u;
        uint _1592 = _1575 + 45u;
        uint _1600 = _1575 + 46u;
        float _1611 = fma(_1545, cbSceneParam._m0[_1576].w, fma(_1541, cbSceneParam._m0[_1576].z, fma(_1537, cbSceneParam._m0[_1576].y, _1533 * cbSceneParam._m0[_1576].x)));
        float _1615 = fma(_1545, cbSceneParam._m0[_1584].w, fma(_1541, cbSceneParam._m0[_1584].z, fma(_1537, cbSceneParam._m0[_1584].y, _1533 * cbSceneParam._m0[_1584].x)));
        float _1623 = fma(_1545, cbSceneParam._m0[_1600].w, fma(_1541, cbSceneParam._m0[_1600].z, fma(_1537, cbSceneParam._m0[_1600].y, _1533 * cbSceneParam._m0[_1600].x)));
        float _1628 = cbSceneParam._m0[33u].z * _1623;
        float _1630 = cbSceneParam._m0[33u].w * _1623;
        float _1633 = fma(_1545, cbSceneParam._m0[_1592].w, fma(_1541, cbSceneParam._m0[_1592].z, fma(_1537, cbSceneParam._m0[_1592].y, _1533 * cbSceneParam._m0[_1592].x))) / _1623;
        float _1681 = (cbSceneParam._m0[33u].x - sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548))) * cbSceneParam._m0[33u].y;
        float _3784 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1688 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1628 + _1611) / _1623, (_1630 + _1615) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 + _1611) / _1623, (_1615 - _1628) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1611 - _1628) / _1623, (_1615 - _1630) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1611 - _1630) / _1623, (_1628 + _1615) / _1623), _1633), 0.0)).x), vec4(0.25)));
        _1695 = 1.0 - (_1688 * cbSceneParam._m0[34u].x);
        _1696 = 1.0 - (_1688 * cbSceneParam._m0[34u].y);
        _1697 = 1.0 - (_1688 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1695 = 1.0;
        _1696 = 1.0;
        _1697 = 1.0;
    }
    float _1761;
    float _1763;
    float _1765;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1749 = fma(_1545, cbSceneParam._m0[63u].w, fma(_1541, cbSceneParam._m0[63u].z, fma(_1537, cbSceneParam._m0[63u].y, _1533 * cbSceneParam._m0[63u].x)));
        float _1750 = fma(_1545, cbSceneParam._m0[60u].w, fma(_1541, cbSceneParam._m0[60u].z, fma(_1537, cbSceneParam._m0[60u].y, _1533 * cbSceneParam._m0[60u].x))) / _1749;
        float _1751 = fma(_1545, cbSceneParam._m0[61u].w, fma(_1541, cbSceneParam._m0[61u].z, fma(_1537, cbSceneParam._m0[61u].y, _1533 * cbSceneParam._m0[61u].x))) / _1749;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1750 >= cbSceneParam._m0[64u].x) && (_1751 >= cbSceneParam._m0[64u].y)) && (_1750 <= cbSceneParam._m0[64u].z)) && (_1751 <= cbSceneParam._m0[64u].w))
        {
            float _1891 = fma(_1545, cbSceneParam._m0[62u].w, fma(_1541, cbSceneParam._m0[62u].z, fma(_1537, cbSceneParam._m0[62u].y, _1533 * cbSceneParam._m0[62u].x))) / _1749;
            float _1895 = isnan(cbSceneParam._m0[41u].w) ? _1891 : (isnan(_1891) ? cbSceneParam._m0[41u].w : max(_1891, cbSceneParam._m0[41u].w));
            float _1938 = (cbSceneParam._m0[33u].x - sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548))) * cbSceneParam._m0[33u].y;
            float _3800 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
            float _1945 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1750, cbSceneParam._m0[33u].w + _1751), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1750, _1751 - cbSceneParam._m0[33u].z), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1750 - cbSceneParam._m0[33u].z, _1751 - cbSceneParam._m0[33u].w), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1750 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1751), _1895), 0.0)).x), vec4(0.25)));
            float _1949 = 1.0 - (_1945 * cbSceneParam._m0[34u].x);
            float _1950 = 1.0 - (_1945 * cbSceneParam._m0[34u].y);
            float _1951 = 1.0 - (_1945 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1951) ? _1697 : (isnan(_1697) ? _1951 : min(_1697, _1951));
            frontier_phi_37_36_ladder_1 = isnan(_1950) ? _1696 : (isnan(_1696) ? _1950 : min(_1696, _1950));
            frontier_phi_37_36_ladder_2 = isnan(_1949) ? _1695 : (isnan(_1695) ? _1949 : min(_1695, _1949));
        }
        else
        {
            frontier_phi_37_36_ladder = _1697;
            frontier_phi_37_36_ladder_1 = _1696;
            frontier_phi_37_36_ladder_2 = _1695;
        }
        _1761 = frontier_phi_37_36_ladder_2;
        _1763 = frontier_phi_37_36_ladder_1;
        _1765 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1761 = _1695;
        _1763 = _1696;
        _1765 = _1697;
    }
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1780 = _468 + (-1.0);
    float _1786 = (cbLight._m0[_1773].x * _1780) + 1.0;
    float _1787 = (cbLight._m0[_1773].y * _1780) + 1.0;
    float _1788 = (cbLight._m0[_1773].z * _1780) + 1.0;
    float _1789 = (cbLight._m0[_1773].w * _1780) + 1.0;
    uint _1790 = _1772 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1772 + 4u;
    float _1810 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1814 = _1772 | 1u;
    float _1825 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_302, _303, _304));
    float _1828 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_302, _303, _304));
    float _3836 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _3847 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1833 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1835 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1842 = ((cbLight._m0[_1790].x * _1796) * _1835) + (((cbLight._m0[_1800].x * _1761) * _1810) * _1833);
    float _1843 = ((_1796 * cbLight._m0[_1790].y) * _1835) + (((cbLight._m0[_1800].y * _1763) * _1810) * _1833);
    float _1844 = ((_1796 * cbLight._m0[_1790].z) * _1835) + (((cbLight._m0[_1800].z * _1765) * _1810) * _1833);
    uvec4 _1848 = floatBitsToUint(cbLight._m0[_1772 + 12u]);
    bool _1850 = _1848.x == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1850)
    {
        _1952 = _1842;
        _1954 = _1843;
        _1956 = _1844;
    }
    else
    {
        uint _1960 = _1772 + 6u;
        float _1976 = (dot(vec3(cbLight._m0[_1772 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1977 = _1976 * _1976;
        float _3858 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1978 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1979 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1952 = (((cbLight._m0[_1960].x * 0.3183098733425140380859375) * _1978) * _1979) + _1842;
        _1954 = (((cbLight._m0[_1960].y * 0.3183098733425140380859375) * _1978) * _1979) + _1843;
        _1956 = (((cbLight._m0[_1960].z * 0.3183098733425140380859375) * _1978) * _1979) + _1844;
    }
    bool _1959 = _1848.y == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_1959)
    {
        _2014 = _1952;
        _2016 = _1954;
        _2018 = _1956;
    }
    else
    {
        uint _2122 = _1772 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1772 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _3874 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2141 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2014 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1952;
        _2016 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1954;
        _2018 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1956;
    }
    uint _2020 = _1772 + 8u;
    float _2026 = cbLight._m0[_1772].x + _382;
    float _2027 = cbLight._m0[_1772].y + _383;
    float _2028 = cbLight._m0[_1772].z + _384;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2036 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1772].xyz));
    float _3890 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2040 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_2026 * _2032, _2027 * _2032, _2028 * _2032));
    float _3912 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2058 = (0.5 / ((_2039 + 9.9999999392252902907785028219223e-09) + _2040)) * _2039;
    float _3923 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.31831014156341552734375;
    uint _2074 = _1772 + 9u;
    float _2080 = cbLight._m0[_1814].x + _382;
    float _2081 = cbLight._m0[_1814].y + _383;
    float _2082 = cbLight._m0[_1814].z + _384;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2090 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1814].xyz));
    float _3934 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_2080 * _2086, _2081 * _2086, _2082 * _2086));
    float _3945 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = (0.5 / ((_2093 + 9.9999999392252902907785028219223e-09) + _2040)) * _2093;
    float _3956 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.31831014156341552734375;
    float _2119 = (((_2103 * cbLight._m0[_2074].x) * _2109) * _1796) + ((((cbLight._m0[_2020].x * _1761) * _2052) * _2060) * _1810);
    float _2120 = (((_2103 * cbLight._m0[_2074].y) * _2109) * _1796) + ((((cbLight._m0[_2020].y * _1763) * _2052) * _2060) * _1810);
    float _2121 = (((_2103 * cbLight._m0[_2074].z) * _2109) * _1796) + ((((cbLight._m0[_2020].z * _1765) * _2052) * _2060) * _1810);
    float _2177;
    float _2179;
    float _2181;
    if (_1850)
    {
        _2177 = _2119;
        _2179 = _2120;
        _2181 = _2121;
    }
    else
    {
        uint _2183 = _1772 + 10u;
        uint _2189 = _1772 + 2u;
        float _2195 = cbLight._m0[_2189].x + _382;
        float _2196 = cbLight._m0[_2189].y + _383;
        float _2197 = cbLight._m0[_2189].z + _384;
        float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
        float _2205 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2189].xyz));
        float _3967 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2195 * _2201, _2196 * _2201, _2197 * _2201));
        float _3978 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2222 = (0.5 / ((_2208 + 9.9999999392252902907785028219223e-09) + _2040)) * _2208;
        float _3989 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.31831014156341552734375;
        float _2225 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2177 = (((_2218 * cbLight._m0[_2183].x) * _2224) * _2225) + _2119;
        _2179 = (((_2218 * cbLight._m0[_2183].y) * _2224) * _2225) + _2120;
        _2181 = (((_2218 * cbLight._m0[_2183].z) * _2224) * _2225) + _2121;
    }
    float _2256;
    float _2258;
    float _2260;
    if (_1959)
    {
        _2256 = _2177;
        _2258 = _2179;
        _2260 = _2181;
    }
    else
    {
        uint _2267 = _1772 + 11u;
        uint _2273 = _1772 + 3u;
        float _2279 = cbLight._m0[_2273].x + _382;
        float _2280 = cbLight._m0[_2273].y + _383;
        float _2281 = cbLight._m0[_2273].z + _384;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2289 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2273].xyz));
        float _4005 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2279 * _2285, _2280 * _2285, _2281 * _2285));
        float _4016 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2306 = (0.5 / ((_2292 + 9.9999999392252902907785028219223e-09) + _2040)) * _2292;
        float _4027 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.31831014156341552734375;
        float _2309 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2256 = (((_2302 * cbLight._m0[_2267].x) * _2308) * _2309) + _2177;
        _2258 = (((_2302 * cbLight._m0[_2267].y) * _2308) * _2309) + _2179;
        _2260 = (((_2302 * cbLight._m0[_2267].z) * _2308) * _2309) + _2181;
    }
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_1770.y == 0u)
    {
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.x;
        uint _2342 = uint((float(_2330.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2331))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2331)));
        float _2352 = (log2(_1548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2353 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        uint _2356 = uint(isnan(14.0) ? _2353 : (isnan(_2353) ? 14.0 : min(_2353, 14.0)));
        uvec4 _2361 = texelFetch(g_lightClusterGridBuffer, int(((_2356 << 2u) + (_2342 << 6u)) >> 2u));
        uint _2362 = _2361.x;
        uint _2363 = _2330.z;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((((1u << ((_2363 >> 4u) & 15u)) + 4294967295u) & _2362) == 0u) || ((_2363 & 240u) == 0u))
        {
            _2471 = 0.0;
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
        }
        else
        {
            float _2472;
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2648)
                {
                    frontier_phi_71_pred = _2637;
                    frontier_phi_71_pred_1 = _2636;
                    frontier_phi_71_pred_2 = _2635;
                    frontier_phi_71_pred_3 = _2634;
                    frontier_phi_71_pred_4 = _2633;
                    frontier_phi_71_pred_5 = _2632;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2647;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2638 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _1546;
                        float _2844 = _2803.y - _1547;
                        float _2845 = _2803.z - _1548;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4053 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * dot(vec3(_424, _427, _430), vec3(_2849 * _2843, _2849 * _2844, _2849 * _2845))) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _1546;
                        float _2879 = (-0.0) - _1547;
                        float _2880 = (-0.0) - _1548;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_424, _427, _430), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4069 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _4080 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2892 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2896 = (0.5 / (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) + 9.9999999392252902907785028219223e-09) + _2892)) * _2892;
                        float _4091 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2905 = (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 3.1415927410125732421875) / ((_2870 * 2.1991131305694580078125) + 3.141590118408203125)) * _2859;
                        _2707 = (_2874 * _2822.x) + _2780;
                        _2708 = (_2874 * _2822.y) + _2781;
                        _2709 = (_2874 * _2822.z) + _2782;
                        _2704 = (_2905 * _2839.x) + _2777;
                        _2705 = (_2905 * _2839.y) + _2778;
                        _2706 = (_2905 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_71_pred = _2709;
                    frontier_phi_71_pred_1 = _2708;
                    frontier_phi_71_pred_2 = _2707;
                    frontier_phi_71_pred_3 = _2706;
                    frontier_phi_71_pred_4 = _2705;
                    frontier_phi_71_pred_5 = _2704;
                }
                _2482 = frontier_phi_71_pred;
                _2480 = frontier_phi_71_pred_1;
                _2478 = frontier_phi_71_pred_2;
                _2476 = frontier_phi_71_pred_3;
                _2474 = frontier_phi_71_pred_4;
                _2472 = frontier_phi_71_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2472;
                    _2633 = _2474;
                    _2634 = _2476;
                    _2635 = _2478;
                    _2636 = _2480;
                    _2637 = _2482;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2471 = _2472;
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
        }
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.z;
        uint _2488 = (_2486 >> 8u) & 15u;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        if (((4294967295u << _2488) & _2362) == 0u)
        {
            _2603 = _2471;
            _2605 = _2473;
            _2607 = _2475;
            _2609 = _2477;
            _2611 = _2479;
            _2613 = _2481;
        }
        else
        {
            float _2628 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2488 < ((_2486 >> 12u) & 15u))
            {
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2760 = _2471;
                float _2761 = _2473;
                float _2762 = _2475;
                float _2763 = _2477;
                float _2764 = _2479;
                float _2765 = _2481;
                uint _2766 = _2488;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2776)
                    {
                        frontier_phi_82_pred = _2765;
                        frontier_phi_82_pred_1 = _2764;
                        frontier_phi_82_pred_2 = _2763;
                        frontier_phi_82_pred_3 = _2762;
                        frontier_phi_82_pred_4 = _2761;
                        frontier_phi_82_pred_5 = _2760;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _2932 = _2760;
                        float _2933 = _2761;
                        float _2934 = _2762;
                        float _2935 = _2763;
                        float _2936 = _2764;
                        float _2937 = _2765;
                        uint _2938 = _2775;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2949 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2994 = (_2949 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2949 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2949 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2949 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_1548, _3058.z, fma(_1547, _3058.y, _3058.x * _1546)) + _3058.w;
                            _3071 = !((fma(_1548, _3039.z, fma(_1547, _3039.y, _3039.x * _1546)) + _3039.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2964.x - _1546;
                                float _3099 = _2964.y - _1547;
                                float _3100 = _2964.z - _1548;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2965 * _2965));
                                float _4102 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3116 = sqrt(_3101) * _2980.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3120 = 1.0 - _3119;
                                float _3122 = (_3120 * dot(vec3(_3105, _3106, _3107), vec3(_424, _427, _430))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_1548, _3007.z, fma(_1547, _3007.y, _3007.x * _1546)) + _3007.w) / _3070;
                                float _3130 = (fma(_1548, _3023.z, fma(_1547, _3023.y, _3023.x * _1546)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4118 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3146 = dot(vec3(_424, _427, _430), vec3((-0.0) - (_1546 * _2628), (-0.0) - (_1547 * _2628), (-0.0) - (_1548 * _2628)));
                                float _4129 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3154 = (_3120 * dot(vec3(_424, _427, _430), vec3(_3105, _3106, _3107))) + _3119;
                                float _4140 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3159 = (0.5 / (((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) + 9.9999999392252902907785028219223e-09) + _3155)) * _3155;
                                float _4151 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3166 = (_3135 * _3112) * (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 3.1415927410125732421875) / ((_3125 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3136 * _2980.z;
                                frontier_phi_88_pred_1 = _3136 * _2980.y;
                                frontier_phi_88_pred_2 = _3136 * _2980.x;
                                frontier_phi_88_pred_3 = _3166 * _2992.z;
                                frontier_phi_88_pred_4 = _3166 * _2992.y;
                                frontier_phi_88_pred_5 = _3166 * _2992.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_88_pred;
                            _3174 = frontier_phi_88_pred_1;
                            _3173 = frontier_phi_88_pred_2;
                            _3172 = frontier_phi_88_pred_3;
                            _3171 = frontier_phi_88_pred_4;
                            _3170 = frontier_phi_88_pred_5;
                            _2922 = _3173 + _2935;
                            _2923 = _3174 + _2936;
                            _2924 = _3175 + _2937;
                            _2919 = _3170 + _2932;
                            _2920 = _3171 + _2933;
                            _2921 = _3172 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2924;
                        frontier_phi_82_pred_1 = _2923;
                        frontier_phi_82_pred_2 = _2922;
                        frontier_phi_82_pred_3 = _2921;
                        frontier_phi_82_pred_4 = _2920;
                        frontier_phi_82_pred_5 = _2919;
                    }
                    _2614 = frontier_phi_82_pred;
                    _2612 = frontier_phi_82_pred_1;
                    _2610 = frontier_phi_82_pred_2;
                    _2608 = frontier_phi_82_pred_3;
                    _2606 = frontier_phi_82_pred_4;
                    _2604 = frontier_phi_82_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2604;
                        _2761 = _2606;
                        _2762 = _2608;
                        _2763 = _2610;
                        _2764 = _2612;
                        _2765 = _2614;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2610;
                frontier_phi_63_64_ladder_1 = _2614;
                frontier_phi_63_64_ladder_2 = _2612;
                frontier_phi_63_64_ladder_3 = _2608;
                frontier_phi_63_64_ladder_4 = _2606;
                frontier_phi_63_64_ladder_5 = _2604;
            }
            else
            {
                frontier_phi_63_64_ladder = _2477;
                frontier_phi_63_64_ladder_1 = _2481;
                frontier_phi_63_64_ladder_2 = _2479;
                frontier_phi_63_64_ladder_3 = _2475;
                frontier_phi_63_64_ladder_4 = _2473;
                frontier_phi_63_64_ladder_5 = _2471;
            }
            _2603 = frontier_phi_63_64_ladder_5;
            _2605 = frontier_phi_63_64_ladder_4;
            _2607 = frontier_phi_63_64_ladder_3;
            _2609 = frontier_phi_63_64_ladder;
            _2611 = frontier_phi_63_64_ladder_2;
            _2613 = frontier_phi_63_64_ladder_1;
        }
        float _2618 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2375 = (_2618 * _2609) + _2014;
        _2377 = (_2618 * _2611) + _2016;
        _2379 = (_2618 * _2613) + _2018;
        _2381 = ((_2603 * 0.039999999105930328369140625) * _2618) + _2256;
        _2383 = ((_2605 * 0.039999999105930328369140625) * _2618) + _2258;
        _2385 = ((_2607 * 0.039999999105930328369140625) * _2618) + _2260;
    }
    else
    {
        _2375 = _2014;
        _2377 = _2016;
        _2379 = _2018;
        _2381 = _2256;
        _2383 = _2258;
        _2385 = _2260;
    }
    uint _2391 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _2397 = cbInstanceData._m0[_2391].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _284.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _255.x));
    float _2398 = cbInstanceData._m0[_2391].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _284.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _255.y));
    float _2399 = cbInstanceData._m0[_2391].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _284.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _255.z));
    float _4167 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4178 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4189 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2416 = (((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2375 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _468))) + ((_2381 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + _2397;
    float _2418 = (_2398 + ((_2383 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2377 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _468)));
    float _2420 = (_2399 + ((_2385 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2379 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _468)));
    float _2421 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2422 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2423 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2429 = cbMtdParam._m0[2u].x * _2397;
    float _2430 = cbMtdParam._m0[2u].y * _2398;
    float _2431 = cbMtdParam._m0[2u].z * _2399;
    float _4215 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2433 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    uint _2434 = _443 + 6u;
    float _2442 = _403 / cbSceneParam._m0[86u].x;
    float _2443 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2459 = _2457.x;
    float _2460 = _2457.y;
    float _2461 = _2457.z;
    float _2462 = _2457.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2496 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2497 = _2496 / _324;
        float _2508 = _2497 * _375;
        float _2509 = _376 * _2497;
        float _2510 = (-0.0) - _2509;
        float _2512 = _2497 * _377;
        float _2514 = (cbSceneParam._m0[77u].w * _2510) / _2496;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2509;
        float _2522 = sqrt(((_2508 * _2508) + (_2509 * _2509)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2496)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2717;
        if (abs((_2510 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2717 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2663 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2717 = ((abs(_2522 / _2510) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2532 * _2672) - exp2(_2532 * _2673)) * _2661))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2719 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, 1.0), 0.0);
        float _2728 = exp2((_2717 * (-1.44269502162933349609375)) * (1.0 - _2719.w));
        float _2729 = log2(_2728);
        float _2745 = log2(_2462);
        _2534 = (exp2(_2745 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].x)) * _2719.x) / cbSceneParam._m0[78u].x)) + _2459;
        _2536 = (exp2(_2745 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].y)) * _2719.y) / cbSceneParam._m0[78u].y)) + _2460;
        _2538 = (exp2(_2745 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].z)) * _2719.z) / cbSceneParam._m0[78u].z)) + _2461;
        _2540 = _2728 * _2462;
    }
    else
    {
        _2534 = _2459;
        _2536 = _2460;
        _2538 = _2461;
        _2540 = _2462;
    }
    bool _2755;
    vec4 _2550;
    vec4 _2573;
    float _2575;
    float _2579;
    float _2580;
    float _2581;
    float _2584;
    float _2587;
    float _2590;
    float _2591;
    bool _2602;
    for (;;)
    {
        _2550 = cbMatDynParam._m0[0u];
        float _2552 = roundEven(_2550.y);
        bool _2553 = _2552 == 3.0;
        float _2555 = log2(_2540);
        float _2559 = exp2(_2555 * cbSceneParam._m0[78u].x);
        float _2560 = exp2(_2555 * cbSceneParam._m0[78u].y);
        float _2561 = exp2(_2555 * cbSceneParam._m0[78u].z);
        float _2562 = _2559 * _2421;
        float _2563 = _2560 * _2422;
        float _2564 = _2561 * _2423;
        float _2571 = _391 + (-0.5);
        _2573 = cbMtdParam._m0[1u];
        _2575 = _2573.y * _2571;
        float _2578 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2579 = _2578 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2534)));
        _2580 = _2578 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2536)));
        _2581 = _2578 * (_2553 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
        _2584 = ((_2429 * _2433) * _2559) * _2578;
        _2587 = ((_2430 * _2433) * _2560) * _2578;
        _2590 = ((_2431 * _2433) * _2561) * _2578;
        _2591 = _2571 * 0.999000012874603271484375;
        _2602 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2602)
        {
            if ((cbInstanceData._m0[_443 + 7u].x + _2591) < 0.5)
            {
                _2755 = true;
                break;
            }
        }
        uint _2696 = _444 + uint(_2550.w);
        if ((cbInstanceData._m0[_2696].w < 1.0) && ((cbInstanceData._m0[_2696].w + _2591) < 0.5))
        {
            _2755 = true;
            break;
        }
        if ((_2575 + 1.0) < _2573.x)
        {
            _2755 = true;
            break;
        }
        _2755 = false;
        break;
    }
    float _2910;
    if (_2755)
    {
        discard_state = true;
        _2910 = 0.0;
    }
    else
    {
        _2910 = cbInstanceData._m0[_2434].w;
    }
    SV_Target.x = _2579;
    SV_Target.y = _2580;
    SV_Target.z = _2581;
    SV_Target.w = _2910;
    SV_Target_1.x = _2584;
    SV_Target_1.y = _2587;
    SV_Target_1.z = _2590;
    SV_Target_1.w = cbInstanceData._m0[_2434].w;
    discard_exit();
}


