#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _812;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _267 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _296 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _313 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _314 = _313 * _176;
    float _315 = _313 * _177;
    float _316 = _313 * _178;
    float _3240 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3251 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3262 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _427 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _430 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = _443 + 9u;
    uint _445 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3273 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _468 = _465.x * TEXCOORD_4;
    float _469 = dot(vec3(_314, _315, _316), vec3(_394, _395, _396));
    float _472 = _469 * 2.0;
    float _477 = (_472 * _314) - _394;
    float _478 = (_472 * _315) - _395;
    float _479 = (_472 * _316) - _396;
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _811;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _536 = fma(_509, cbModelParam._m0[26u].z, fma(_505, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501));
        float _540 = fma(_509, cbModelParam._m0[27u].z, fma(_505, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501));
        float _544 = fma(_509, cbModelParam._m0[28u].z, fma(_505, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501));
        float _569 = _501 + _314;
        float _570 = _505 + _315;
        float _571 = _509 + _316;
        float _581 = fma(_571, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _569)) - _536;
        float _582 = fma(_571, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _569)) - _540;
        float _583 = fma(_571, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _569)) - _544;
        float _587 = inversesqrt(dot(vec3(_581, _582, _583), vec3(_581, _582, _583)));
        float _600 = ((_587 * _581) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_536 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_587 * _582) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_540 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_587 * _583) / cbModelParam._m0[34u].z) + ((((((_544 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_600, _601, _602), 0.0);
        float _639 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_605.x + (-0.5));
        float _641 = _639 * (_605.y + (-0.5));
        float _642 = _639 * (_605.z + (-0.5));
        float _649 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_612.x + (-0.5));
        float _651 = _649 * (_612.y + (-0.5));
        float _652 = _649 * (_612.z + (-0.5));
        float _659 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_619.x + (-0.5));
        float _661 = _659 * (_619.y + (-0.5));
        float _662 = _659 * (_619.z + (-0.5));
        float _669 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_626.x + (-0.5));
        float _671 = _669 * (_626.y + (-0.5));
        float _672 = _669 * (_626.z + (-0.5));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = _640 * 0.5;
        float _677 = _650 * 0.5;
        float _678 = _660 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _693 = (dot(vec3(_314, _315, _316), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _703 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3343 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_705 + 1.0))) + _710) * _673;
        float _720 = _641 * 0.5;
        float _721 = _651 * 0.5;
        float _722 = _661 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _736 = (dot(vec3(_314, _315, _316), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _745 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3376 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_747 + 1.0))) + _752) * _674;
        float _762 = _642 * 0.5;
        float _763 = _652 * 0.5;
        float _764 = _662 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_314, _315, _316), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3409 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_789 + 1.0))) + _794) * _675;
        _811 = _642;
        _813 = _641;
        _814 = _640;
        _815 = _652;
        _816 = _651;
        _817 = _650;
        _818 = _662;
        _819 = _661;
        _820 = _660;
        _821 = _675;
        _822 = _674;
        _823 = _673;
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
    }
    else
    {
        _811 = _812;
        _813 = _812;
        _814 = _812;
        _815 = _812;
        _816 = _812;
        _817 = _812;
        _818 = _812;
        _819 = _812;
        _820 = _812;
        _821 = _812;
        _822 = _812;
        _823 = _812;
        _824 = 0.0;
        _825 = 0.0;
        _826 = 0.0;
    }
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _852 = fma(_509, cbModelParam._m0[30u].z, fma(_505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _501));
        float _856 = fma(_509, cbModelParam._m0[31u].z, fma(_505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _501));
        float _860 = fma(_509, cbModelParam._m0[32u].z, fma(_505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _501));
        float _883 = _501 + _314;
        float _884 = _505 + _315;
        float _885 = _509 + _316;
        float _895 = fma(_885, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_852 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_856 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[35u].z) + ((((((_860 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _951 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_918.x + (-0.5));
        float _953 = _951 * (_918.y + (-0.5));
        float _954 = _951 * (_918.z + (-0.5));
        float _961 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_925.x + (-0.5));
        float _963 = _961 * (_925.y + (-0.5));
        float _964 = _961 * (_925.z + (-0.5));
        float _971 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_932.x + (-0.5));
        float _973 = _971 * (_932.y + (-0.5));
        float _974 = _971 * (_932.z + (-0.5));
        float _981 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_939.x + (-0.5));
        float _983 = _981 * (_939.y + (-0.5));
        float _984 = _981 * (_939.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_314, _315, _316), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3472 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1015 + 1.0))) + _1020) * _985;
        float _1030 = _953 * 0.5;
        float _1031 = _963 * 0.5;
        float _1032 = _973 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_314, _315, _316), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3505 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1057 + 1.0))) + _1062) * _986;
        float _1072 = _954 * 0.5;
        float _1073 = _964 * 0.5;
        float _1074 = _974 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_314, _315, _316), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3538 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1099 + 1.0))) + _1104) * _987;
        _1121 = _954;
        _1122 = _953;
        _1123 = _952;
        _1124 = _964;
        _1125 = _963;
        _1126 = _962;
        _1127 = _974;
        _1128 = _973;
        _1129 = _972;
        _1130 = _987;
        _1131 = _986;
        _1132 = _985;
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _812;
        _1122 = _812;
        _1123 = _812;
        _1124 = _812;
        _1125 = _812;
        _1126 = _812;
        _1127 = _812;
        _1128 = _812;
        _1129 = _812;
        _1130 = _812;
        _1131 = _812;
        _1132 = _812;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1168 = fma(_1147, cbSceneParam._m0[89u].z, fma(_1146, cbSceneParam._m0[89u].y, _1145 * cbSceneParam._m0[89u].x));
    float _1171 = fma(_1147, cbSceneParam._m0[90u].z, fma(_1146, cbSceneParam._m0[90u].y, _1145 * cbSceneParam._m0[90u].x));
    float _1174 = fma(_1147, cbSceneParam._m0[91u].z, fma(_1146, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1145));
    float _1189 = _477 * 0.5;
    float _1190 = _478 * 0.5;
    float _1191 = _479 * 0.5;
    float _1192 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1195 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1198 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1232;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1205 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_811, _815, _818, _821));
        float _1209 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_813, _816, _819, _822));
        float _1213 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_814, _817, _820, _823));
        float _1220 = dot(vec4(cbModelParam._m0[39u]), vec4(_1189, _1190, _1191, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1243;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1234 = dot(vec4(cbModelParam._m0[40u]), vec4(_1189, _1190, _1191, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1247 = (_1243 * cbModelParam._m0[1u].x) + (_1232 * (1.0 - cbModelParam._m0[1u].x));
    float _1256 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1337;
    float _1339;
    float _1341;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1304 = fma(_509, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _501)) + cbModelParam._m0[13u].w;
        float _1308 = fma(_509, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _501)) + cbModelParam._m0[14u].w;
        float _1312 = fma(_509, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _501)) + cbModelParam._m0[15u].w;
        float _1315 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1318 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1321 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1347;
        if (_1315 > 0.0)
        {
            _1347 = abs((1.0 - _1304) / _1315);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1304 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1347 = frontier_phi_14_12_ladder;
        }
        float _1520;
        if (_1318 > 0.0)
        {
            _1520 = abs((1.0 - _1308) / _1318);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1308 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1520 = frontier_phi_23_19_ladder;
        }
        float _1817;
        if (_1321 > 0.0)
        {
            _1817 = abs((1.0 - _1312) / _1321);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1312 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1817 = frontier_phi_35_30_ladder;
        }
        float _1819 = isnan(_1520) ? _1347 : (isnan(_1347) ? _1520 : min(_1347, _1520));
        float _1820 = isnan(_1817) ? _1819 : (isnan(_1819) ? _1817 : min(_1819, _1817));
        float _1824 = (_1820 * _1315) + _1304;
        float _1825 = (_1820 * _1318) + _1308;
        float _1826 = (_1820 * _1321) + _1312;
        float _1827 = _1820 * 9.9999997473787516355514526367188e-05;
        float _1829 = (-1.0) - _1827;
        float _1831 = _1827 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1826 > _1831) || ((_1826 < _1829) || ((_1825 > _1831) || ((_1825 < _1829) || ((_1824 < _1829) || (_1824 > _1831))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1826, cbModelParam._m0[9u].z, fma(_1825, cbModelParam._m0[9u].y, _1824 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1826, cbModelParam._m0[10u].z, fma(_1825, cbModelParam._m0[10u].y, _1824 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1826, cbModelParam._m0[11u].z, fma(_1825, cbModelParam._m0[11u].y, _1824 * cbModelParam._m0[11u].x))), _1256);
            frontier_phi_13_35_ladder = _1971.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1971.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1971.x * cbModelParam._m0[1u].y;
        }
        _1337 = frontier_phi_13_35_ladder_2;
        _1339 = frontier_phi_13_35_ladder_1;
        _1341 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1256);
        _1337 = _1325.x * cbModelParam._m0[1u].y;
        _1339 = _1325.y * cbModelParam._m0[1u].y;
        _1341 = _1325.z * cbModelParam._m0[1u].y;
    }
    float _1344 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1400 = fma(_509, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _501)) + cbModelParam._m0[21u].w;
        float _1404 = fma(_509, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _501)) + cbModelParam._m0[22u].w;
        float _1408 = fma(_509, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _501)) + cbModelParam._m0[23u].w;
        float _1411 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1414 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1417 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1525;
        if (_1411 > 0.0)
        {
            _1525 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1525 = frontier_phi_25_21_ladder;
        }
        float _1844;
        if (_1414 > 0.0)
        {
            _1844 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1844 = frontier_phi_37_32_ladder;
        }
        float _2117;
        if (_1417 > 0.0)
        {
            _2117 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2117 = frontier_phi_47_44_ladder;
        }
        float _2119 = isnan(_1844) ? _1525 : (isnan(_1525) ? _1844 : min(_1525, _1844));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1411) + _1400;
        float _2125 = (_2120 * _1414) + _1404;
        float _2126 = (_2120 * _1417) + _1408;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2127;
        float _2130 = _2127 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2126 > _2130) || ((_2126 < _2128) || ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 < _2128) || (_2124 > _2130))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2126, cbModelParam._m0[17u].z, fma(_2125, cbModelParam._m0[17u].y, _2124 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2126, cbModelParam._m0[18u].z, fma(_2125, cbModelParam._m0[18u].y, _2124 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2126, cbModelParam._m0[19u].z, fma(_2125, cbModelParam._m0[19u].y, _2124 * cbModelParam._m0[19u].x))), _1344);
            frontier_phi_22_47_ladder = _2217.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2217.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2217.x * cbModelParam._m0[1u].z;
        }
        _1436 = frontier_phi_22_47_ladder_2;
        _1438 = frontier_phi_22_47_ladder_1;
        _1440 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1344);
        _1436 = _1420.x * cbModelParam._m0[1u].z;
        _1438 = _1420.y * cbModelParam._m0[1u].z;
        _1440 = _1420.z * cbModelParam._m0[1u].z;
    }
    float _1452 = _468 * 0.01200000010430812835693359375;
    float _1454 = _1452 * ((cbModelParam._m0[1u].w * (_1436 - _1337)) + _1337);
    float _1455 = _1452 * ((cbModelParam._m0[1u].w * (_1438 - _1339)) + _1339);
    float _1456 = _1452 * ((cbModelParam._m0[1u].w * (_1440 - _1341)) + _1341);
    float _1459 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, _1454 * cbSceneParam._m0[91u].x));
    float _1499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1503 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1511 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1512 = _1499 / _1511;
    float _1513 = _1503 / _1511;
    float _1514 = _1507 / _1511;
    float _1661;
    float _1662;
    float _1663;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1541 = ((uint(_1514 > cbSceneParam._m0[59u].y) + uint(_1514 > cbSceneParam._m0[59u].x)) + uint(_1514 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1542 = _1541 + 43u;
        uint _1550 = _1541 + 44u;
        uint _1558 = _1541 + 45u;
        uint _1566 = _1541 + 46u;
        float _1577 = fma(_1511, cbSceneParam._m0[_1542].w, fma(_1507, cbSceneParam._m0[_1542].z, fma(_1503, cbSceneParam._m0[_1542].y, _1499 * cbSceneParam._m0[_1542].x)));
        float _1581 = fma(_1511, cbSceneParam._m0[_1550].w, fma(_1507, cbSceneParam._m0[_1550].z, fma(_1503, cbSceneParam._m0[_1550].y, _1499 * cbSceneParam._m0[_1550].x)));
        float _1589 = fma(_1511, cbSceneParam._m0[_1566].w, fma(_1507, cbSceneParam._m0[_1566].z, fma(_1503, cbSceneParam._m0[_1566].y, _1499 * cbSceneParam._m0[_1566].x)));
        float _1594 = cbSceneParam._m0[33u].z * _1589;
        float _1596 = cbSceneParam._m0[33u].w * _1589;
        float _1599 = fma(_1511, cbSceneParam._m0[_1558].w, fma(_1507, cbSceneParam._m0[_1558].z, fma(_1503, cbSceneParam._m0[_1558].y, _1499 * cbSceneParam._m0[_1558].x))) / _1589;
        float _1647 = (cbSceneParam._m0[33u].x - sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514))) * cbSceneParam._m0[33u].y;
        float _3664 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1654 = (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1594 + _1577) / _1589, (_1596 + _1581) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1596 + _1577) / _1589, (_1581 - _1594) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 - _1594) / _1589, (_1581 - _1596) / _1589), _1599), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1577 - _1596) / _1589, (_1594 + _1581) / _1589), _1599), 0.0)).x), vec4(0.25)));
        _1661 = 1.0 - (_1654 * cbSceneParam._m0[34u].x);
        _1662 = 1.0 - (_1654 * cbSceneParam._m0[34u].y);
        _1663 = 1.0 - (_1654 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1661 = 1.0;
        _1662 = 1.0;
        _1663 = 1.0;
    }
    float _1727;
    float _1729;
    float _1731;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1715 = fma(_1511, cbSceneParam._m0[63u].w, fma(_1507, cbSceneParam._m0[63u].z, fma(_1503, cbSceneParam._m0[63u].y, _1499 * cbSceneParam._m0[63u].x)));
        float _1716 = fma(_1511, cbSceneParam._m0[60u].w, fma(_1507, cbSceneParam._m0[60u].z, fma(_1503, cbSceneParam._m0[60u].y, _1499 * cbSceneParam._m0[60u].x))) / _1715;
        float _1717 = fma(_1511, cbSceneParam._m0[61u].w, fma(_1507, cbSceneParam._m0[61u].z, fma(_1503, cbSceneParam._m0[61u].y, _1499 * cbSceneParam._m0[61u].x))) / _1715;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1716 >= cbSceneParam._m0[64u].x) && (_1717 >= cbSceneParam._m0[64u].y)) && (_1716 <= cbSceneParam._m0[64u].z)) && (_1717 <= cbSceneParam._m0[64u].w))
        {
            float _1857 = fma(_1511, cbSceneParam._m0[62u].w, fma(_1507, cbSceneParam._m0[62u].z, fma(_1503, cbSceneParam._m0[62u].y, _1499 * cbSceneParam._m0[62u].x))) / _1715;
            float _1861 = isnan(cbSceneParam._m0[41u].w) ? _1857 : (isnan(_1857) ? cbSceneParam._m0[41u].w : max(_1857, cbSceneParam._m0[41u].w));
            float _1904 = (cbSceneParam._m0[33u].x - sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514))) * cbSceneParam._m0[33u].y;
            float _3680 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
            float _1911 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1716, cbSceneParam._m0[33u].w + _1717), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1716, _1717 - cbSceneParam._m0[33u].z), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1716 - cbSceneParam._m0[33u].z, _1717 - cbSceneParam._m0[33u].w), _1861), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1716 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1717), _1861), 0.0)).x), vec4(0.25)));
            float _1915 = 1.0 - (_1911 * cbSceneParam._m0[34u].x);
            float _1916 = 1.0 - (_1911 * cbSceneParam._m0[34u].y);
            float _1917 = 1.0 - (_1911 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1917) ? _1663 : (isnan(_1663) ? _1917 : min(_1663, _1917));
            frontier_phi_34_33_ladder_1 = isnan(_1916) ? _1662 : (isnan(_1662) ? _1916 : min(_1662, _1916));
            frontier_phi_34_33_ladder_2 = isnan(_1915) ? _1661 : (isnan(_1661) ? _1915 : min(_1661, _1915));
        }
        else
        {
            frontier_phi_34_33_ladder = _1663;
            frontier_phi_34_33_ladder_1 = _1662;
            frontier_phi_34_33_ladder_2 = _1661;
        }
        _1727 = frontier_phi_34_33_ladder_2;
        _1729 = frontier_phi_34_33_ladder_1;
        _1731 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1727 = _1661;
        _1729 = _1662;
        _1731 = _1663;
    }
    uvec4 _1736 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1738 = _1736.x * 14u;
    uint _1739 = _1738 + 13u;
    float _1746 = _468 + (-1.0);
    float _1752 = (cbLight._m0[_1739].x * _1746) + 1.0;
    float _1753 = (cbLight._m0[_1739].y * _1746) + 1.0;
    float _1754 = (cbLight._m0[_1739].z * _1746) + 1.0;
    float _1755 = (cbLight._m0[_1739].w * _1746) + 1.0;
    uint _1756 = _1738 + 5u;
    float _1762 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1766 = _1738 + 4u;
    float _1776 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1780 = _1738 | 1u;
    float _1791 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_314, _315, _316));
    float _1794 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_314, _315, _316));
    float _3716 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _3727 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1799 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.3183098733425140380859375;
    float _1801 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.3183098733425140380859375;
    float _1808 = ((cbLight._m0[_1756].x * _1762) * _1801) + (((cbLight._m0[_1766].x * _1727) * _1776) * _1799);
    float _1809 = ((_1762 * cbLight._m0[_1756].y) * _1801) + (((cbLight._m0[_1766].y * _1729) * _1776) * _1799);
    float _1810 = ((_1762 * cbLight._m0[_1756].z) * _1801) + (((cbLight._m0[_1766].z * _1731) * _1776) * _1799);
    uvec4 _1814 = floatBitsToUint(cbLight._m0[_1738 + 12u]);
    bool _1816 = _1814.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1816)
    {
        _1918 = _1808;
        _1920 = _1809;
        _1922 = _1810;
    }
    else
    {
        uint _1926 = _1738 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1738 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3738 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1945 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1808;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1809;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1810;
    }
    bool _1925 = _1814.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1925)
    {
        _1980 = _1918;
        _1982 = _1920;
        _1984 = _1922;
    }
    else
    {
        uint _2088 = _1738 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1738 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _3754 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _2107 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1980 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1918;
        _1982 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1920;
        _1984 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1922;
    }
    uint _1986 = _1738 + 8u;
    float _1992 = cbLight._m0[_1738].x + _394;
    float _1993 = cbLight._m0[_1738].y + _395;
    float _1994 = cbLight._m0[_1738].z + _396;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _2002 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1738].xyz));
    float _3770 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _2006 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1992 * _1998, _1993 * _1998, _1994 * _1998));
    float _3792 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2018 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = (0.5 / ((_2005 + 9.9999999392252902907785028219223e-09) + _2006)) * _2005;
    float _3803 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * 0.31831014156341552734375;
    uint _2040 = _1738 + 9u;
    float _2046 = cbLight._m0[_1780].x + _394;
    float _2047 = cbLight._m0[_1780].y + _395;
    float _2048 = cbLight._m0[_1780].z + _396;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2056 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1780].xyz));
    float _3814 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_2046 * _2052, _2047 * _2052, _2048 * _2052));
    float _3825 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = (0.5 / ((_2059 + 9.9999999392252902907785028219223e-09) + _2006)) * _2059;
    float _3836 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.31831014156341552734375;
    float _2085 = (((_2069 * cbLight._m0[_2040].x) * _2075) * _1762) + ((((cbLight._m0[_1986].x * _1727) * _2018) * _2026) * _1776);
    float _2086 = (((_2069 * cbLight._m0[_2040].y) * _2075) * _1762) + ((((cbLight._m0[_1986].y * _1729) * _2018) * _2026) * _1776);
    float _2087 = (((_2069 * cbLight._m0[_2040].z) * _2075) * _1762) + ((((cbLight._m0[_1986].z * _1731) * _2018) * _2026) * _1776);
    float _2143;
    float _2145;
    float _2147;
    if (_1816)
    {
        _2143 = _2085;
        _2145 = _2086;
        _2147 = _2087;
    }
    else
    {
        uint _2149 = _1738 + 10u;
        uint _2155 = _1738 + 2u;
        float _2161 = cbLight._m0[_2155].x + _394;
        float _2162 = cbLight._m0[_2155].y + _395;
        float _2163 = cbLight._m0[_2155].z + _396;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2171 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2155].xyz));
        float _3847 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _2175 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2161 * _2167, _2162 * _2167, _2163 * _2167));
        float _3858 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2188 = (0.5 / ((_2174 + 9.9999999392252902907785028219223e-09) + _2006)) * _2174;
        float _3869 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.31831014156341552734375;
        float _2191 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2143 = (((_2184 * cbLight._m0[_2149].x) * _2190) * _2191) + _2085;
        _2145 = (((_2184 * cbLight._m0[_2149].y) * _2190) * _2191) + _2086;
        _2147 = (((_2184 * cbLight._m0[_2149].z) * _2190) * _2191) + _2087;
    }
    float _2222;
    float _2224;
    float _2226;
    if (_1925)
    {
        _2222 = _2143;
        _2224 = _2145;
        _2226 = _2147;
    }
    else
    {
        uint _2233 = _1738 + 11u;
        uint _2239 = _1738 + 3u;
        float _2245 = cbLight._m0[_2239].x + _394;
        float _2246 = cbLight._m0[_2239].y + _395;
        float _2247 = cbLight._m0[_2239].z + _396;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2255 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2239].xyz));
        float _3885 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2245 * _2251, _2246 * _2251, _2247 * _2251));
        float _3896 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2268 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = (0.5 / ((_2258 + 9.9999999392252902907785028219223e-09) + _2006)) * _2258;
        float _3907 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.31831014156341552734375;
        float _2275 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2222 = (((_2268 * cbLight._m0[_2233].x) * _2274) * _2275) + _2143;
        _2224 = (((_2268 * cbLight._m0[_2233].y) * _2274) * _2275) + _2145;
        _2226 = (((_2268 * cbLight._m0[_2233].z) * _2274) * _2275) + _2147;
    }
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    if (_1736.y == 0u)
    {
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.x;
        uint _2308 = uint((float(_2296.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2297))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2297)));
        float _2318 = (log2(_1514 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2319 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        uint _2322 = uint(isnan(14.0) ? _2319 : (isnan(_2319) ? 14.0 : min(_2319, 14.0)));
        uvec4 _2327 = texelFetch(g_lightClusterGridBuffer, int(((_2322 << 2u) + (_2308 << 6u)) >> 2u));
        uint _2328 = _2327.x;
        uint _2329 = _2296.z;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((((1u << ((_2329 >> 4u) & 15u)) + 4294967295u) & _2328) == 0u) || ((_2329 & 240u) == 0u))
        {
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
        }
        else
        {
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            uint _2595 = 0u;
            uint _2604;
            bool _2605;
            for (;;)
            {
                _2604 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                _2605 = _2604 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2605)
                {
                    frontier_phi_66_pred = _2594;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    uint _2719;
                    _2713 = _2589;
                    _2714 = _2590;
                    _2715 = _2591;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2604;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    for (;;)
                    {
                        uint _2723 = uint(findLSB(_2719)) + (_2595 << 5u);
                        uint _2720 = (_2719 + 4294967295u) & _2719;
                        uint _2725 = _2723 * 48u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2745 = (_2723 * 48u) + 4u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2764 = (_2723 * 48u) + 8u;
                        vec3 _2775 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x));
                        float _2779 = _2739.x - _1512;
                        float _2780 = _2739.y - _1513;
                        float _2781 = _2739.z - _1514;
                        float _2782 = dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781));
                        float _2785 = inversesqrt(_2782);
                        float _2794 = 1.0 - (_2782 * _2739.w);
                        float _3933 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2795 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2796 = sqrt(_2782) * _2758.w;
                        float _2799 = 1.39999997615814208984375 / (_2796 + 1.39999997615814208984375);
                        float _2800 = _2799 * _2799;
                        float _2803 = ((1.0 - _2800) * dot(vec3(_424, _427, _430), vec3(_2785 * _2779, _2785 * _2780, _2785 * _2781))) + _2800;
                        float _2806 = _2796 * _2796;
                        float _2810 = ((isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * _2795) / ((_2806 * 0.699999988079071044921875) + 1.0);
                        float _2814 = (-0.0) - _1512;
                        float _2815 = (-0.0) - _1513;
                        float _2816 = (-0.0) - _1514;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2824 = dot(vec3(_424, _427, _430), vec3(_2820 * _2814, _2820 * _2815, _2820 * _2816));
                        float _3949 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _3960 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2828 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2832 = (0.5 / (((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) + 9.9999999392252902907785028219223e-09) + _2828)) * _2828;
                        float _3971 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2841 = (((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 3.1415927410125732421875) / ((_2806 * 2.1991131305694580078125) + 3.141590118408203125)) * _2795;
                        _2648 = (_2810 * _2758.x) + _2716;
                        _2649 = (_2810 * _2758.y) + _2717;
                        _2650 = (_2810 * _2758.z) + _2718;
                        _2645 = (_2841 * _2775.x) + _2713;
                        _2646 = (_2841 * _2775.y) + _2714;
                        _2647 = (_2841 * _2775.z) + _2715;
                        if (_2720 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2713 = _2645;
                            _2714 = _2646;
                            _2715 = _2647;
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2720;
                        }
                    }
                    frontier_phi_66_pred = _2650;
                    frontier_phi_66_pred_1 = _2649;
                    frontier_phi_66_pred_2 = _2648;
                    frontier_phi_66_pred_3 = _2647;
                    frontier_phi_66_pred_4 = _2646;
                    frontier_phi_66_pred_5 = _2645;
                }
                _2448 = frontier_phi_66_pred;
                _2446 = frontier_phi_66_pred_1;
                _2444 = frontier_phi_66_pred_2;
                _2442 = frontier_phi_66_pred_3;
                _2440 = frontier_phi_66_pred_4;
                _2438 = frontier_phi_66_pred_5;
                uint _2596 = _2595 + 1u;
                if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2589 = _2438;
                    _2590 = _2440;
                    _2591 = _2442;
                    _2592 = _2444;
                    _2593 = _2446;
                    _2594 = _2448;
                    _2595 = _2596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
        }
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.z;
        uint _2454 = (_2452 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2454) & _2328) == 0u)
        {
            _2560 = _2437;
            _2562 = _2439;
            _2564 = _2441;
            _2566 = _2443;
            _2568 = _2445;
            _2570 = _2447;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2454 < ((_2452 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2696 = _2437;
                float _2697 = _2439;
                float _2698 = _2441;
                float _2699 = _2443;
                float _2700 = _2445;
                float _2701 = _2447;
                uint _2702 = _2454;
                uint _2711;
                bool _2712;
                for (;;)
                {
                    _2711 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2702 << 2u)) >> 2u)).x;
                    _2712 = _2711 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2712)
                    {
                        frontier_phi_72_pred = _2701;
                        frontier_phi_72_pred_1 = _2700;
                        frontier_phi_72_pred_2 = _2699;
                        frontier_phi_72_pred_3 = _2698;
                        frontier_phi_72_pred_4 = _2697;
                        frontier_phi_72_pred_5 = _2696;
                    }
                    else
                    {
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _2859 = _2696;
                        float _2860 = _2697;
                        float _2861 = _2698;
                        float _2862 = _2699;
                        float _2863 = _2700;
                        float _2864 = _2701;
                        uint _2865 = _2711;
                        uint _2866;
                        vec4 _2891;
                        float _2892;
                        vec4 _2907;
                        vec3 _2919;
                        vec4 _2934;
                        vec4 _2950;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2876 = ((_2702 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2865));
                            _2866 = (_2865 + 4294967295u) & _2865;
                            uint _2878 = _2876 * 40u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            _2892 = _2891.w;
                            uint _2894 = (_2876 * 40u) + 4u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2909 = (_2876 * 40u) + 8u;
                            _2919 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x));
                            uint _2921 = (_2876 * 40u) + 16u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2937 = (_2876 * 40u) + 20u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2953 = (_2876 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2876 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_1514, _2985.z, fma(_1513, _2985.y, _2985.x * _1512)) + _2985.w;
                            _2998 = !((fma(_1514, _2966.z, fma(_1513, _2966.y, _2966.x * _1512)) + _2966.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2891.x - _1512;
                                float _3026 = _2891.y - _1513;
                                float _3027 = _2891.z - _1514;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2892 * _2892));
                                float _3982 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _3043 = sqrt(_3028) * _2907.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3047 = 1.0 - _3046;
                                float _3049 = (_3047 * dot(vec3(_3032, _3033, _3034), vec3(_424, _427, _430))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_1514, _2934.z, fma(_1513, _2934.y, _2934.x * _1512)) + _2934.w) / _2997;
                                float _3057 = (fma(_1514, _2950.z, fma(_1513, _2950.y, _2950.x * _1512)) + _2950.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _3998 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3073 = dot(vec3(_424, _427, _430), vec3((-0.0) - (_1512 * _2585), (-0.0) - (_1513 * _2585), (-0.0) - (_1514 * _2585)));
                                float _4009 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3081 = (_3047 * dot(vec3(_424, _427, _430), vec3(_3032, _3033, _3034))) + _3046;
                                float _4020 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3086 = (0.5 / (((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) + 9.9999999392252902907785028219223e-09) + _3082)) * _3082;
                                float _4031 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3093 = (_3062 * _3039) * (((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 3.1415927410125732421875) / ((_3052 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3063 * _2907.y;
                                frontier_phi_78_pred_1 = _3063 * _2907.x;
                                frontier_phi_78_pred_2 = _3093 * _2919.z;
                                frontier_phi_78_pred_3 = _3093 * _2919.y;
                                frontier_phi_78_pred_4 = _3093 * _2919.x;
                                frontier_phi_78_pred_5 = _3063 * _2907.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_78_pred;
                            _3100 = frontier_phi_78_pred_1;
                            _3099 = frontier_phi_78_pred_2;
                            _3098 = frontier_phi_78_pred_3;
                            _3097 = frontier_phi_78_pred_4;
                            _3102 = frontier_phi_78_pred_5;
                            _2849 = _3100 + _2862;
                            _2850 = _3101 + _2863;
                            _2851 = _3102 + _2864;
                            _2846 = _3097 + _2859;
                            _2847 = _3098 + _2860;
                            _2848 = _3099 + _2861;
                            if (_2866 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2866;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2851;
                        frontier_phi_72_pred_1 = _2850;
                        frontier_phi_72_pred_2 = _2849;
                        frontier_phi_72_pred_3 = _2848;
                        frontier_phi_72_pred_4 = _2847;
                        frontier_phi_72_pred_5 = _2846;
                    }
                    _2571 = frontier_phi_72_pred;
                    _2569 = frontier_phi_72_pred_1;
                    _2567 = frontier_phi_72_pred_2;
                    _2565 = frontier_phi_72_pred_3;
                    _2563 = frontier_phi_72_pred_4;
                    _2561 = frontier_phi_72_pred_5;
                    uint _2703 = _2702 + 1u;
                    if (_2703 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2696 = _2561;
                        _2697 = _2563;
                        _2698 = _2565;
                        _2699 = _2567;
                        _2700 = _2569;
                        _2701 = _2571;
                        _2702 = _2703;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2571;
                frontier_phi_60_61_ladder_1 = _2569;
                frontier_phi_60_61_ladder_2 = _2565;
                frontier_phi_60_61_ladder_3 = _2563;
                frontier_phi_60_61_ladder_4 = _2561;
                frontier_phi_60_61_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_60_61_ladder = _2447;
                frontier_phi_60_61_ladder_1 = _2445;
                frontier_phi_60_61_ladder_2 = _2441;
                frontier_phi_60_61_ladder_3 = _2439;
                frontier_phi_60_61_ladder_4 = _2437;
                frontier_phi_60_61_ladder_5 = _2443;
            }
            _2560 = frontier_phi_60_61_ladder_4;
            _2562 = frontier_phi_60_61_ladder_3;
            _2564 = frontier_phi_60_61_ladder_2;
            _2566 = frontier_phi_60_61_ladder_5;
            _2568 = frontier_phi_60_61_ladder_1;
            _2570 = frontier_phi_60_61_ladder;
        }
        float _2575 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2341 = (_2575 * _2566) + _1980;
        _2343 = (_2575 * _2568) + _1982;
        _2345 = (_2575 * _2570) + _1984;
        _2347 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2222;
        _2349 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2224;
        _2351 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2226;
    }
    else
    {
        _2341 = _1980;
        _2343 = _1982;
        _2345 = _1984;
        _2347 = _2222;
        _2349 = _2224;
        _2351 = _2226;
    }
    uint _2357 = _444 + uint(cbMatDynParam._m0[0u].w);
    float _2363 = cbInstanceData._m0[_2357].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _296.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _267.x));
    float _2364 = cbInstanceData._m0[_2357].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _296.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _267.y));
    float _2365 = cbInstanceData._m0[_2357].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _296.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _267.z));
    float _4047 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4058 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4069 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2382 = (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2341 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _468))) + ((_2347 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1247)) * cbPerFrame._m0[3u].x)) + _2363;
    float _2384 = (_2364 + ((_2349 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1247)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2343 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _468)));
    float _2386 = (_2365 + ((_2351 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1247)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2345 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _468)));
    float _4095 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2399 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    uint _2400 = _443 + 6u;
    float _2408 = _402 / cbSceneParam._m0[86u].x;
    float _2409 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2423 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2425 = _2423.x;
    float _2426 = _2423.y;
    float _2427 = _2423.z;
    float _2428 = _2423.w;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2462 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2463 = _2462 / _336;
        float _2474 = _2463 * _387;
        float _2475 = _388 * _2463;
        float _2476 = (-0.0) - _2475;
        float _2478 = _2463 * _389;
        float _2480 = (cbSceneParam._m0[77u].w * _2476) / _2462;
        float _2481 = _2480 + cbSceneParam._m0[79u].w;
        float _2482 = cbSceneParam._m0[79u].w - _2475;
        float _2488 = sqrt(((_2474 * _2474) + (_2475 * _2475)) + (_2478 * _2478));
        float _2491 = (1.0 - (cbSceneParam._m0[77u].w / _2462)) * _2488;
        float _2496 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2498 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2658;
        if (abs((_2476 - _2480) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2658 = ((((_2481 > 0.0) ? exp2(_2496 * _2481) : (2.0 - exp2(_2498 * _2481))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2491;
        }
        else
        {
            float _2618 = 1.0 / cbSceneParam._m0[80u].x;
            float _2619 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : max(_2481, _2482));
            float _2620 = isnan(_2482) ? _2481 : (isnan(_2481) ? _2482 : min(_2481, _2482));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            _2658 = ((abs(_2488 / _2476) * cbSceneParam._m0[80u].y) * ((((_2629 - _2630) * 2.0) - ((exp2(_2496 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)))) - exp2(_2496 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))))) * _2618)) - ((exp2(_2498 * _2629) - exp2(_2498 * _2630)) * _2618))) + (_2491 * cbSceneParam._m0[80u].z);
        }
        vec4 _2660 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, 1.0), 0.0);
        float _2669 = exp2((_2658 * (-1.44269502162933349609375)) * (1.0 - _2660.w));
        float _2670 = log2(_2669);
        float _2686 = log2(_2428);
        _2500 = (exp2(_2686 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].x)) * _2660.x) / cbSceneParam._m0[78u].x)) + _2425;
        _2502 = (exp2(_2686 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].y)) * _2660.y) / cbSceneParam._m0[78u].y)) + _2426;
        _2504 = (exp2(_2686 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].z)) * _2660.z) / cbSceneParam._m0[78u].z)) + _2427;
        _2506 = _2669 * _2428;
    }
    else
    {
        _2500 = _2425;
        _2502 = _2426;
        _2504 = _2427;
        _2506 = _2428;
    }
    float _2518 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2519 = _2518 == 3.0;
    float _2521 = log2(_2506);
    float _2525 = exp2(_2521 * cbSceneParam._m0[78u].x);
    float _2526 = exp2(_2521 * cbSceneParam._m0[78u].y);
    float _2527 = exp2(_2521 * cbSceneParam._m0[78u].z);
    float _2528 = _2525 * (isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0)));
    float _2529 = _2526 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)));
    float _2530 = _2527 * (isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0)));
    float _2539 = (_2518 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2539 * (_2519 ? _2528 : (_2528 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.y = _2539 * (_2519 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2502)));
    SV_Target.z = _2539 * (_2519 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2504)));
    SV_Target.w = cbInstanceData._m0[_2400].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2363) * _2399) * _2525) * _2539;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2364) * _2399) * _2526) * _2539;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2365) * _2399) * _2527) * _2539;
    SV_Target_1.w = cbInstanceData._m0[_2400].w;
}


