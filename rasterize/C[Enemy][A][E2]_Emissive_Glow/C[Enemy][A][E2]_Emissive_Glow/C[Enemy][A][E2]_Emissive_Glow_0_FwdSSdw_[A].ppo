#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _839;
float _3064;
float _3065;
float _3066;
float _3067;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _195 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _221 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _229 = (_221.x * cbMtdParam._m0[12u].x) + (_195.x * cbMtdParam._m0[9u].x);
    float _230 = (_221.y * cbMtdParam._m0[12u].y) + (_195.y * cbMtdParam._m0[9u].y);
    float _231 = (_221.z * cbMtdParam._m0[12u].z) + (_195.z * cbMtdParam._m0[9u].z);
    vec4 _253 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _282 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _299 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _300 = _299 * _173;
    float _301 = _299 * _174;
    float _302 = _299 * _175;
    float _3076 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3087 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3098 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    vec4 _387 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _389 = _387.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _518 = sqrt(((_373 * _373) + (_374 * _374)) + (_375 * _375));
        float _524 = (cbMatDynParam._m0[5u].x * _518) + cbMatDynParam._m0[5u].y;
        float _3109 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
        float _525 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _529 = (cbMatDynParam._m0[5u].z * _518) + cbMatDynParam._m0[5u].w;
        float _3120 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))) - _525)) + _525) < ((_389 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _425 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _428 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _441 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3131 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
    float _3142 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
    float _3153 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    vec4 _463 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _466 = _463.x * TEXCOORD_4;
    float _467 = dot(vec3(_300, _301, _302), vec3(_380, _381, _382));
    float _470 = _467 * 2.0;
    float _475 = (_470 * _300) - _380;
    float _476 = (_470 * _301) - _381;
    float _477 = (_470 * _302) - _382;
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _838;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _563 = fma(_507, cbModelParam._m0[26u].z, fma(_503, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499));
        float _567 = fma(_507, cbModelParam._m0[27u].z, fma(_503, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499));
        float _571 = fma(_507, cbModelParam._m0[28u].z, fma(_503, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499));
        float _596 = _499 + _300;
        float _597 = _503 + _301;
        float _598 = _507 + _302;
        float _608 = fma(_598, cbModelParam._m0[26u].z, fma(_597, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596)) - _563;
        float _609 = fma(_598, cbModelParam._m0[27u].z, fma(_597, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596)) - _567;
        float _610 = fma(_598, cbModelParam._m0[28u].z, fma(_597, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596)) - _571;
        float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
        float _627 = ((_614 * _608) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_563 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _628 = ((_614 * _609) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_567 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _629 = ((_614 * _610) / cbModelParam._m0[34u].z) + ((((((_571 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_627, _628, _629), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_627, _628, _629), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_627, _628, _629), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_627, _628, _629), 0.0);
        float _666 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_632.x + (-0.5));
        float _668 = _666 * (_632.y + (-0.5));
        float _669 = _666 * (_632.z + (-0.5));
        float _676 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_639.x + (-0.5));
        float _678 = _676 * (_639.y + (-0.5));
        float _679 = _676 * (_639.z + (-0.5));
        float _686 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_646.x + (-0.5));
        float _688 = _686 * (_646.y + (-0.5));
        float _689 = _686 * (_646.z + (-0.5));
        float _696 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_653.x + (-0.5));
        float _698 = _696 * (_653.y + (-0.5));
        float _699 = _696 * (_653.z + (-0.5));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = _667 * 0.5;
        float _704 = _677 * 0.5;
        float _705 = _687 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _720 = (dot(vec3(_300, _301, _302), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _3179 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _730 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3190 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3201 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0))) * (_732 + 1.0))) + _737) * _700;
        float _747 = _668 * 0.5;
        float _748 = _678 * 0.5;
        float _749 = _688 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _763 = (dot(vec3(_300, _301, _302), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3212 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _772 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3223 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _3234 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * (_774 + 1.0))) + _779) * _701;
        float _789 = _669 * 0.5;
        float _790 = _679 * 0.5;
        float _791 = _689 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(_300, _301, _302), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _3245 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3256 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _3267 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * (_816 + 1.0))) + _821) * _702;
        _838 = _669;
        _840 = _668;
        _841 = _667;
        _842 = _679;
        _843 = _678;
        _844 = _677;
        _845 = _689;
        _846 = _688;
        _847 = _687;
        _848 = _702;
        _849 = _701;
        _850 = _700;
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
    }
    else
    {
        _838 = _839;
        _840 = _839;
        _841 = _839;
        _842 = _839;
        _843 = _839;
        _844 = _839;
        _845 = _839;
        _846 = _839;
        _847 = _839;
        _848 = _839;
        _849 = _839;
        _850 = _839;
        _851 = 0.0;
        _852 = 0.0;
        _853 = 0.0;
    }
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _882 = fma(_507, cbModelParam._m0[30u].z, fma(_503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _499));
        float _886 = fma(_507, cbModelParam._m0[31u].z, fma(_503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _499));
        float _890 = fma(_507, cbModelParam._m0[32u].z, fma(_503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _499));
        float _913 = _499 + _300;
        float _914 = _503 + _301;
        float _915 = _507 + _302;
        float _925 = fma(_915, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913)) - _882;
        float _926 = fma(_915, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913)) - _886;
        float _927 = fma(_915, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913)) - _890;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_882 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_886 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[35u].z) + ((((((_890 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _981 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_948.x + (-0.5));
        float _983 = _981 * (_948.y + (-0.5));
        float _984 = _981 * (_948.z + (-0.5));
        float _991 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_955.x + (-0.5));
        float _993 = _991 * (_955.y + (-0.5));
        float _994 = _991 * (_955.z + (-0.5));
        float _1001 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_962.x + (-0.5));
        float _1003 = _1001 * (_962.y + (-0.5));
        float _1004 = _1001 * (_962.z + (-0.5));
        float _1011 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_969.x + (-0.5));
        float _1013 = _1011 * (_969.y + (-0.5));
        float _1014 = _1011 * (_969.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_300, _301, _302), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3330 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_1045 + 1.0))) + _1050) * _1015;
        float _1060 = _983 * 0.5;
        float _1061 = _993 * 0.5;
        float _1062 = _1003 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_300, _301, _302), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3363 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_1087 + 1.0))) + _1092) * _1016;
        float _1102 = _984 * 0.5;
        float _1103 = _994 * 0.5;
        float _1104 = _1004 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_300, _301, _302), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3396 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_1129 + 1.0))) + _1134) * _1017;
        _1151 = _984;
        _1152 = _983;
        _1153 = _982;
        _1154 = _994;
        _1155 = _993;
        _1156 = _992;
        _1157 = _1004;
        _1158 = _1003;
        _1159 = _1002;
        _1160 = _1017;
        _1161 = _1016;
        _1162 = _1015;
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _839;
        _1152 = _839;
        _1153 = _839;
        _1154 = _839;
        _1155 = _839;
        _1156 = _839;
        _1157 = _839;
        _1158 = _839;
        _1159 = _839;
        _1160 = _839;
        _1161 = _839;
        _1162 = _839;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _851)) + _851;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _852)) + _852;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _853)) + _853;
    float _1198 = fma(_1177, cbSceneParam._m0[89u].z, fma(_1176, cbSceneParam._m0[89u].y, _1175 * cbSceneParam._m0[89u].x));
    float _1201 = fma(_1177, cbSceneParam._m0[90u].z, fma(_1176, cbSceneParam._m0[90u].y, _1175 * cbSceneParam._m0[90u].x));
    float _1204 = fma(_1177, cbSceneParam._m0[91u].z, fma(_1176, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1175));
    float _1219 = _475 * 0.5;
    float _1220 = _476 * 0.5;
    float _1221 = _477 * 0.5;
    float _1222 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1225 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1228 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1262;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1235 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_838, _842, _845, _848));
        float _1239 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_840, _843, _846, _849));
        float _1243 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_841, _844, _847, _850));
        float _1250 = dot(vec4(cbModelParam._m0[39u]), vec4(_1219, _1220, _1221, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1273;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1264 = dot(vec4(cbModelParam._m0[40u]), vec4(_1219, _1220, _1221, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1277 = (_1273 * cbModelParam._m0[1u].x) + (_1262 * (1.0 - cbModelParam._m0[1u].x));
    float _1286 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1335 = fma(_507, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499)) + cbModelParam._m0[13u].w;
        float _1339 = fma(_507, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499)) + cbModelParam._m0[14u].w;
        float _1343 = fma(_507, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499)) + cbModelParam._m0[15u].w;
        float _1346 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1349 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1352 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1378;
        if (_1346 > 0.0)
        {
            _1378 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1378 = frontier_phi_17_15_ladder;
        }
        float _1606;
        if (_1349 > 0.0)
        {
            _1606 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1606 = frontier_phi_26_22_ladder;
        }
        float _1798;
        if (_1352 > 0.0)
        {
            _1798 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1798 = frontier_phi_38_33_ladder;
        }
        float _1800 = isnan(_1606) ? _1378 : (isnan(_1378) ? _1606 : min(_1378, _1606));
        float _1801 = isnan(_1798) ? _1800 : (isnan(_1800) ? _1798 : min(_1800, _1798));
        float _1805 = (_1801 * _1346) + _1335;
        float _1806 = (_1801 * _1349) + _1339;
        float _1807 = (_1801 * _1352) + _1343;
        float _1808 = _1801 * 9.9999997473787516355514526367188e-05;
        float _1810 = (-1.0) - _1808;
        float _1812 = _1808 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1807 > _1812) || ((_1807 < _1810) || ((_1806 > _1812) || ((_1806 < _1810) || ((_1805 < _1810) || (_1805 > _1812))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1807, cbModelParam._m0[9u].z, fma(_1806, cbModelParam._m0[9u].y, _1805 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1807, cbModelParam._m0[10u].z, fma(_1806, cbModelParam._m0[10u].y, _1805 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1807, cbModelParam._m0[11u].z, fma(_1806, cbModelParam._m0[11u].y, _1805 * cbModelParam._m0[11u].x))), _1286);
            frontier_phi_16_38_ladder = _1904.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1904.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1904.x * cbModelParam._m0[1u].y;
        }
        _1368 = frontier_phi_16_38_ladder_2;
        _1370 = frontier_phi_16_38_ladder_1;
        _1372 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1286);
        _1368 = _1356.x * cbModelParam._m0[1u].y;
        _1370 = _1356.y * cbModelParam._m0[1u].y;
        _1372 = _1356.z * cbModelParam._m0[1u].y;
    }
    float _1375 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1432 = fma(_507, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499)) + cbModelParam._m0[21u].w;
        float _1436 = fma(_507, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499)) + cbModelParam._m0[22u].w;
        float _1440 = fma(_507, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499)) + cbModelParam._m0[23u].w;
        float _1443 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1446 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1449 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1611;
        if (_1443 > 0.0)
        {
            _1611 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1611 = frontier_phi_28_24_ladder;
        }
        float _1825;
        if (_1446 > 0.0)
        {
            _1825 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1825 = frontier_phi_40_35_ladder;
        }
        float _1976;
        if (_1449 > 0.0)
        {
            _1976 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1976 = frontier_phi_49_46_ladder;
        }
        float _1978 = isnan(_1825) ? _1611 : (isnan(_1611) ? _1825 : min(_1611, _1825));
        float _1979 = isnan(_1976) ? _1978 : (isnan(_1978) ? _1976 : min(_1978, _1976));
        float _1983 = (_1979 * _1443) + _1432;
        float _1984 = (_1979 * _1446) + _1436;
        float _1985 = (_1979 * _1449) + _1440;
        float _1986 = _1979 * 9.9999997473787516355514526367188e-05;
        float _1987 = (-1.0) - _1986;
        float _1989 = _1986 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1985 > _1989) || ((_1985 < _1987) || ((_1984 > _1989) || ((_1984 < _1987) || ((_1983 < _1987) || (_1983 > _1989))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1985, cbModelParam._m0[17u].z, fma(_1984, cbModelParam._m0[17u].y, _1983 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1985, cbModelParam._m0[18u].z, fma(_1984, cbModelParam._m0[18u].y, _1983 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1985, cbModelParam._m0[19u].z, fma(_1984, cbModelParam._m0[19u].y, _1983 * cbModelParam._m0[19u].x))), _1375);
            frontier_phi_25_49_ladder = _2213.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2213.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2213.x * cbModelParam._m0[1u].z;
        }
        _1468 = frontier_phi_25_49_ladder_2;
        _1470 = frontier_phi_25_49_ladder_1;
        _1472 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1375);
        _1468 = _1452.x * cbModelParam._m0[1u].z;
        _1470 = _1452.y * cbModelParam._m0[1u].z;
        _1472 = _1452.z * cbModelParam._m0[1u].z;
    }
    float _1484 = _466 * 0.01200000010430812835693359375;
    float _1486 = _1484 * ((cbModelParam._m0[1u].w * (_1468 - _1368)) + _1368);
    float _1487 = _1484 * ((cbModelParam._m0[1u].w * (_1470 - _1370)) + _1370);
    float _1488 = _1484 * ((cbModelParam._m0[1u].w * (_1472 - _1372)) + _1372);
    float _1491 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, _1486 * cbSceneParam._m0[91u].x));
    vec4 _1505 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_401, _402));
    float _1507 = _1505.w;
    float _1519 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1507);
    float _1520 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1507);
    float _1521 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1507);
    uvec4 _1525 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1527 = _1525.x * 14u;
    uint _1528 = _1527 + 13u;
    float _1535 = _466 + (-1.0);
    float _1541 = (cbLight._m0[_1528].x * _1535) + 1.0;
    float _1542 = (cbLight._m0[_1528].y * _1535) + 1.0;
    float _1543 = (cbLight._m0[_1528].z * _1535) + 1.0;
    float _1544 = (cbLight._m0[_1528].w * _1535) + 1.0;
    uint _1545 = _1527 + 5u;
    float _1551 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
    uint _1555 = _1527 + 4u;
    float _1565 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
    uint _1569 = _1527 | 1u;
    float _1580 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_300, _301, _302));
    float _1583 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_300, _301, _302));
    float _3532 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
    float _3543 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1588 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.3183098733425140380859375;
    float _1590 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.3183098733425140380859375;
    float _1597 = ((cbLight._m0[_1545].x * _1551) * _1590) + (((cbLight._m0[_1555].x * _1519) * _1565) * _1588);
    float _1598 = ((_1551 * cbLight._m0[_1545].y) * _1590) + (((cbLight._m0[_1555].y * _1520) * _1565) * _1588);
    float _1599 = ((_1551 * cbLight._m0[_1545].z) * _1590) + (((cbLight._m0[_1555].z * _1521) * _1565) * _1588);
    uvec4 _1603 = floatBitsToUint(cbLight._m0[_1527 + 12u]);
    bool _1605 = _1603.x == 0u;
    float _1616;
    float _1618;
    float _1620;
    if (_1605)
    {
        _1616 = _1597;
        _1618 = _1598;
        _1620 = _1599;
    }
    else
    {
        uint _1624 = _1527 + 6u;
        float _1640 = (dot(vec3(cbLight._m0[_1527 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1641 = _1640 * _1640;
        float _3554 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1643 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1616 = (((cbLight._m0[_1624].x * 0.3183098733425140380859375) * _1642) * _1643) + _1597;
        _1618 = (((cbLight._m0[_1624].y * 0.3183098733425140380859375) * _1642) * _1643) + _1598;
        _1620 = (((cbLight._m0[_1624].z * 0.3183098733425140380859375) * _1642) * _1643) + _1599;
    }
    bool _1623 = _1603.y == 0u;
    float _1661;
    float _1663;
    float _1665;
    if (_1623)
    {
        _1661 = _1616;
        _1663 = _1618;
        _1665 = _1620;
    }
    else
    {
        uint _1769 = _1527 + 7u;
        float _1785 = (dot(vec3(cbLight._m0[_1527 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1786 = _1785 * _1785;
        float _3570 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1788 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1661 = (((cbLight._m0[_1769].x * 0.3183098733425140380859375) * _1787) * _1788) + _1616;
        _1663 = (((cbLight._m0[_1769].y * 0.3183098733425140380859375) * _1787) * _1788) + _1618;
        _1665 = (((cbLight._m0[_1769].z * 0.3183098733425140380859375) * _1787) * _1788) + _1620;
    }
    uint _1667 = _1527 + 8u;
    float _1673 = cbLight._m0[_1527].x + _380;
    float _1674 = cbLight._m0[_1527].y + _381;
    float _1675 = cbLight._m0[_1527].z + _382;
    float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
    float _1683 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1527].xyz));
    float _3586 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _1687 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1527].xyz), vec3(_1673 * _1679, _1674 * _1679, _1675 * _1679));
    float _3608 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1699 = (exp2(log2(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1705 = (0.5 / ((_1686 + 9.9999999392252902907785028219223e-09) + _1687)) * _1686;
    float _3619 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1707 = (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * 0.31831014156341552734375;
    uint _1721 = _1527 + 9u;
    float _1727 = cbLight._m0[_1569].x + _380;
    float _1728 = cbLight._m0[_1569].y + _381;
    float _1729 = cbLight._m0[_1569].z + _382;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1737 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1569].xyz));
    float _3630 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _1741 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1727 * _1733, _1728 * _1733, _1729 * _1733));
    float _3641 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1750 = (exp2(log2(1.0 - (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1754 = (0.5 / ((_1740 + 9.9999999392252902907785028219223e-09) + _1687)) * _1740;
    float _3652 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1756 = (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * 0.31831014156341552734375;
    float _1766 = (((_1750 * cbLight._m0[_1721].x) * _1756) * _1551) + ((((cbLight._m0[_1667].x * _1519) * _1699) * _1707) * _1565);
    float _1767 = (((_1750 * cbLight._m0[_1721].y) * _1756) * _1551) + ((((cbLight._m0[_1667].y * _1520) * _1699) * _1707) * _1565);
    float _1768 = (((_1750 * cbLight._m0[_1721].z) * _1756) * _1551) + ((((cbLight._m0[_1667].z * _1521) * _1699) * _1707) * _1565);
    float _1830;
    float _1832;
    float _1834;
    if (_1605)
    {
        _1830 = _1766;
        _1832 = _1767;
        _1834 = _1768;
    }
    else
    {
        uint _1836 = _1527 + 10u;
        uint _1842 = _1527 + 2u;
        float _1848 = cbLight._m0[_1842].x + _380;
        float _1849 = cbLight._m0[_1842].y + _381;
        float _1850 = cbLight._m0[_1842].z + _382;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1858 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1842].xyz));
        float _3663 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1862 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1848 * _1854, _1849 * _1854, _1850 * _1854));
        float _3674 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1875 = (0.5 / ((_1861 + 9.9999999392252902907785028219223e-09) + _1687)) * _1861;
        float _3685 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1877 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.31831014156341552734375;
        float _1878 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1830 = (((_1871 * cbLight._m0[_1836].x) * _1877) * _1878) + _1766;
        _1832 = (((_1871 * cbLight._m0[_1836].y) * _1877) * _1878) + _1767;
        _1834 = (((_1871 * cbLight._m0[_1836].z) * _1877) * _1878) + _1768;
    }
    float _1913;
    float _1915;
    float _1917;
    if (_1623)
    {
        _1913 = _1830;
        _1915 = _1832;
        _1917 = _1834;
    }
    else
    {
        uint _1924 = _1527 + 11u;
        uint _1930 = _1527 + 3u;
        float _1936 = cbLight._m0[_1930].x + _380;
        float _1937 = cbLight._m0[_1930].y + _381;
        float _1938 = cbLight._m0[_1930].z + _382;
        float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
        float _1946 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1930].xyz));
        float _3701 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1949 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1950 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_1936 * _1942, _1937 * _1942, _1938 * _1942));
        float _3712 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1959 = (exp2(log2(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1963 = (0.5 / ((_1949 + 9.9999999392252902907785028219223e-09) + _1687)) * _1949;
        float _3723 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1965 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.31831014156341552734375;
        float _1966 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1913 = (((_1959 * cbLight._m0[_1924].x) * _1965) * _1966) + _1830;
        _1915 = (((_1959 * cbLight._m0[_1924].y) * _1965) * _1966) + _1832;
        _1917 = (((_1959 * cbLight._m0[_1924].z) * _1965) * _1966) + _1834;
    }
    float _2101;
    float _2103;
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    if (_1525.y == 0u)
    {
        float _2041 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2041;
        float _2043 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2041;
        float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2041;
        uvec4 _2056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2057 = _2056.x;
        uint _2068 = uint((float(_2056.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2057))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2057)));
        float _2078 = (log2(_2044 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2079 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        uint _2082 = uint(isnan(14.0) ? _2079 : (isnan(_2079) ? 14.0 : min(_2079, 14.0)));
        uvec4 _2087 = texelFetch(g_lightClusterGridBuffer, int(((_2082 << 2u) + (_2068 << 6u)) >> 2u));
        uint _2088 = _2087.x;
        uint _2089 = _2056.z;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        if (((((1u << ((_2089 >> 4u) & 15u)) + 4294967295u) & _2088) == 0u) || ((_2089 & 240u) == 0u))
        {
            _2218 = 0.0;
            _2220 = 0.0;
            _2222 = 0.0;
            _2224 = 0.0;
            _2226 = 0.0;
            _2228 = 0.0;
        }
        else
        {
            float _2219;
            float _2221;
            float _2223;
            float _2225;
            float _2227;
            float _2229;
            float _2379 = 0.0;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            uint _2385 = 0u;
            uint _2394;
            bool _2395;
            for (;;)
            {
                _2394 = texelFetch(g_lightClassification, int((((_2082 << 5u) + (_2068 << 9u)) + (_2385 << 2u)) >> 2u)).x;
                _2395 = _2394 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2395)
                {
                    frontier_phi_66_pred = _2379;
                    frontier_phi_66_pred_1 = _2384;
                    frontier_phi_66_pred_2 = _2383;
                    frontier_phi_66_pred_3 = _2382;
                    frontier_phi_66_pred_4 = _2381;
                    frontier_phi_66_pred_5 = _2380;
                }
                else
                {
                    float _2524;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    uint _2530;
                    _2524 = _2379;
                    _2525 = _2380;
                    _2526 = _2381;
                    _2527 = _2382;
                    _2528 = _2383;
                    _2529 = _2384;
                    _2530 = _2394;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    for (;;)
                    {
                        uint _2534 = uint(findLSB(_2530)) + (_2385 << 5u);
                        uint _2531 = (_2530 + 4294967295u) & _2530;
                        uint _2536 = _2534 * 48u;
                        vec4 _2550 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 3u)).x));
                        uint _2556 = (_2534 * 48u) + 4u;
                        vec4 _2569 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2556)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2556 + 3u)).x));
                        uint _2575 = (_2534 * 48u) + 8u;
                        vec3 _2586 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x));
                        float _2590 = _2550.x - _2042;
                        float _2591 = _2550.y - _2043;
                        float _2592 = _2550.z - _2044;
                        float _2593 = dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592));
                        float _2596 = inversesqrt(_2593);
                        float _2605 = 1.0 - (_2593 * _2550.w);
                        float _3749 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
                        float _2606 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                        float _2607 = sqrt(_2593) * _2569.w;
                        float _2610 = 1.39999997615814208984375 / (_2607 + 1.39999997615814208984375);
                        float _2611 = _2610 * _2610;
                        float _2614 = ((1.0 - _2611) * dot(vec3(_422, _425, _428), vec3(_2596 * _2590, _2596 * _2591, _2596 * _2592))) + _2611;
                        float _2617 = _2607 * _2607;
                        float _2621 = ((isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0))) * _2606) / ((_2617 * 0.699999988079071044921875) + 1.0);
                        float _2625 = (-0.0) - _2042;
                        float _2626 = (-0.0) - _2043;
                        float _2627 = (-0.0) - _2044;
                        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
                        float _2635 = dot(vec3(_422, _425, _428), vec3(_2631 * _2625, _2631 * _2626, _2631 * _2627));
                        float _3765 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _3776 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
                        float _2639 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                        float _2643 = (0.5 / (((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) + 9.9999999392252902907785028219223e-09) + _2639)) * _2639;
                        float _3787 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2652 = (((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 3.1415927410125732421875) / ((_2617 * 2.1991131305694580078125) + 3.141590118408203125)) * _2606;
                        _2454 = (_2621 * _2569.x) + _2527;
                        _2455 = (_2621 * _2569.y) + _2528;
                        _2456 = (_2621 * _2569.z) + _2529;
                        _2451 = (_2652 * _2586.x) + _2524;
                        _2452 = (_2652 * _2586.y) + _2525;
                        _2453 = (_2652 * _2586.z) + _2526;
                        if (_2531 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2524 = _2451;
                            _2525 = _2452;
                            _2526 = _2453;
                            _2527 = _2454;
                            _2528 = _2455;
                            _2529 = _2456;
                            _2530 = _2531;
                        }
                    }
                    frontier_phi_66_pred = _2451;
                    frontier_phi_66_pred_1 = _2456;
                    frontier_phi_66_pred_2 = _2455;
                    frontier_phi_66_pred_3 = _2454;
                    frontier_phi_66_pred_4 = _2453;
                    frontier_phi_66_pred_5 = _2452;
                }
                _2219 = frontier_phi_66_pred;
                _2229 = frontier_phi_66_pred_1;
                _2227 = frontier_phi_66_pred_2;
                _2225 = frontier_phi_66_pred_3;
                _2223 = frontier_phi_66_pred_4;
                _2221 = frontier_phi_66_pred_5;
                uint _2386 = _2385 + 1u;
                if (_2386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2379 = _2219;
                    _2380 = _2221;
                    _2381 = _2223;
                    _2382 = _2225;
                    _2383 = _2227;
                    _2384 = _2229;
                    _2385 = _2386;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2218 = _2219;
            _2220 = _2221;
            _2222 = _2223;
            _2224 = _2225;
            _2226 = _2227;
            _2228 = _2229;
        }
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.z;
        uint _2235 = (_2233 >> 8u) & 15u;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((4294967295u << _2235) & _2088) == 0u)
        {
            _2350 = _2218;
            _2352 = _2220;
            _2354 = _2222;
            _2356 = _2224;
            _2358 = _2226;
            _2360 = _2228;
        }
        else
        {
            float _2375 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2235 < ((_2233 >> 12u) & 15u))
            {
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2507 = _2218;
                float _2508 = _2220;
                float _2509 = _2222;
                float _2510 = _2224;
                float _2511 = _2226;
                float _2512 = _2228;
                uint _2513 = _2235;
                uint _2522;
                bool _2523;
                for (;;)
                {
                    _2522 = texelFetch(g_lightClassification, int((((_2082 << 5u) + (_2068 << 9u)) + (_2513 << 2u)) >> 2u)).x;
                    _2523 = _2522 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2523)
                    {
                        frontier_phi_77_pred = _2512;
                        frontier_phi_77_pred_1 = _2511;
                        frontier_phi_77_pred_2 = _2510;
                        frontier_phi_77_pred_3 = _2509;
                        frontier_phi_77_pred_4 = _2508;
                        frontier_phi_77_pred_5 = _2507;
                    }
                    else
                    {
                        float _2666;
                        float _2667;
                        float _2668;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2679 = _2507;
                        float _2680 = _2508;
                        float _2681 = _2509;
                        float _2682 = _2510;
                        float _2683 = _2511;
                        float _2684 = _2512;
                        uint _2685 = _2522;
                        uint _2686;
                        vec4 _2711;
                        float _2712;
                        vec4 _2727;
                        vec3 _2739;
                        vec4 _2754;
                        vec4 _2770;
                        float _2817;
                        bool _2818;
                        for (;;)
                        {
                            uint _2696 = ((_2513 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2685));
                            _2686 = (_2685 + 4294967295u) & _2685;
                            uint _2698 = _2696 * 40u;
                            _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            _2712 = _2711.w;
                            uint _2714 = (_2696 * 40u) + 4u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            uint _2729 = (_2696 * 40u) + 8u;
                            _2739 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 2u)).x));
                            uint _2741 = (_2696 * 40u) + 16u;
                            _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            uint _2757 = (_2696 * 40u) + 20u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2773 = (_2696 * 40u) + 24u;
                            vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            uint _2792 = (_2696 * 40u) + 28u;
                            vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            _2817 = fma(_2044, _2805.z, fma(_2043, _2805.y, _2805.x * _2042)) + _2805.w;
                            _2818 = !((fma(_2044, _2786.z, fma(_2043, _2786.y, _2786.x * _2042)) + _2786.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2818)
                            {
                                float _2845 = _2711.x - _2042;
                                float _2846 = _2711.y - _2043;
                                float _2847 = _2711.z - _2044;
                                float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                                float _2851 = inversesqrt(_2848);
                                float _2852 = _2851 * _2845;
                                float _2853 = _2851 * _2846;
                                float _2854 = _2851 * _2847;
                                float _2858 = 1.0 - (_2848 / (_2712 * _2712));
                                float _3798 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                                float _2859 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                                float _2863 = sqrt(_2848) * _2727.w;
                                float _2865 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                                float _2866 = _2865 * _2865;
                                float _2867 = 1.0 - _2866;
                                float _2869 = (_2867 * dot(vec3(_2852, _2853, _2854), vec3(_422, _425, _428))) + _2866;
                                float _2872 = _2863 * _2863;
                                float _2876 = (fma(_2044, _2754.z, fma(_2043, _2754.y, _2754.x * _2042)) + _2754.w) / _2817;
                                float _2877 = (fma(_2044, _2770.z, fma(_2043, _2770.y, _2770.x * _2042)) + _2770.w) / _2817;
                                float _2881 = 1.0 - dot(vec2(_2876, _2877), vec2(_2876, _2877));
                                float _3814 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2882 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                                float _2883 = _2882 * (((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2859) / ((_2872 * 0.699999988079071044921875) + 1.0));
                                float _2893 = dot(vec3(_422, _425, _428), vec3((-0.0) - (_2042 * _2375), (-0.0) - (_2043 * _2375), (-0.0) - (_2044 * _2375)));
                                float _3825 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2901 = (_2867 * dot(vec3(_422, _425, _428), vec3(_2852, _2853, _2854))) + _2866;
                                float _3836 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2902 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2906 = (0.5 / (((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) + 9.9999999392252902907785028219223e-09) + _2902)) * _2902;
                                float _3847 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2913 = (_2882 * _2859) * (((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 3.1415927410125732421875) / ((_2872 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2883 * _2727.y;
                                frontier_phi_83_pred_1 = _2883 * _2727.x;
                                frontier_phi_83_pred_2 = _2913 * _2739.z;
                                frontier_phi_83_pred_3 = _2913 * _2739.y;
                                frontier_phi_83_pred_4 = _2913 * _2739.x;
                                frontier_phi_83_pred_5 = _2883 * _2727.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2921 = frontier_phi_83_pred;
                            _2920 = frontier_phi_83_pred_1;
                            _2919 = frontier_phi_83_pred_2;
                            _2918 = frontier_phi_83_pred_3;
                            _2917 = frontier_phi_83_pred_4;
                            _2922 = frontier_phi_83_pred_5;
                            _2669 = _2920 + _2682;
                            _2670 = _2921 + _2683;
                            _2671 = _2922 + _2684;
                            _2666 = _2917 + _2679;
                            _2667 = _2918 + _2680;
                            _2668 = _2919 + _2681;
                            if (_2686 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2679 = _2666;
                                _2680 = _2667;
                                _2681 = _2668;
                                _2682 = _2669;
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2686;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2671;
                        frontier_phi_77_pred_1 = _2670;
                        frontier_phi_77_pred_2 = _2669;
                        frontier_phi_77_pred_3 = _2668;
                        frontier_phi_77_pred_4 = _2667;
                        frontier_phi_77_pred_5 = _2666;
                    }
                    _2361 = frontier_phi_77_pred;
                    _2359 = frontier_phi_77_pred_1;
                    _2357 = frontier_phi_77_pred_2;
                    _2355 = frontier_phi_77_pred_3;
                    _2353 = frontier_phi_77_pred_4;
                    _2351 = frontier_phi_77_pred_5;
                    uint _2514 = _2513 + 1u;
                    if (_2514 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2507 = _2351;
                        _2508 = _2353;
                        _2509 = _2355;
                        _2510 = _2357;
                        _2511 = _2359;
                        _2512 = _2361;
                        _2513 = _2514;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2355;
                frontier_phi_58_59_ladder_1 = _2361;
                frontier_phi_58_59_ladder_2 = _2359;
                frontier_phi_58_59_ladder_3 = _2357;
                frontier_phi_58_59_ladder_4 = _2353;
                frontier_phi_58_59_ladder_5 = _2351;
            }
            else
            {
                frontier_phi_58_59_ladder = _2222;
                frontier_phi_58_59_ladder_1 = _2228;
                frontier_phi_58_59_ladder_2 = _2226;
                frontier_phi_58_59_ladder_3 = _2224;
                frontier_phi_58_59_ladder_4 = _2220;
                frontier_phi_58_59_ladder_5 = _2218;
            }
            _2350 = frontier_phi_58_59_ladder_5;
            _2352 = frontier_phi_58_59_ladder_4;
            _2354 = frontier_phi_58_59_ladder;
            _2356 = frontier_phi_58_59_ladder_3;
            _2358 = frontier_phi_58_59_ladder_2;
            _2360 = frontier_phi_58_59_ladder_1;
        }
        float _2365 = isnan(1.0) ? _466 : (isnan(_466) ? 1.0 : min(_466, 1.0));
        _2101 = (_2365 * _2356) + _1661;
        _2103 = (_2365 * _2358) + _1663;
        _2105 = (_2365 * _2360) + _1665;
        _2107 = ((_2350 * 0.039999999105930328369140625) * _2365) + _1913;
        _2109 = ((_2352 * 0.039999999105930328369140625) * _2365) + _1915;
        _2111 = ((_2354 * 0.039999999105930328369140625) * _2365) + _1917;
    }
    else
    {
        _2101 = _1661;
        _2103 = _1663;
        _2105 = _1665;
        _2107 = _1913;
        _2109 = _1915;
        _2111 = _1917;
    }
    uint _2117 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _2123 = cbInstanceData._m0[_2117].x * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _282.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _253.x));
    float _2124 = cbInstanceData._m0[_2117].y * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _282.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _253.y));
    float _2125 = cbInstanceData._m0[_2117].z * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _282.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _253.z));
    float _3863 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3874 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3885 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2142 = (((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_2101 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _466))) + ((_2107 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + _2123;
    float _2144 = (_2124 + ((_2109 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_2103 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _466)));
    float _2146 = (_2125 + ((_2111 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1277)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2105 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _466)));
    float _2147 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2148 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2155 = cbMtdParam._m0[2u].x * _2123;
    float _2156 = cbMtdParam._m0[2u].y * _2124;
    float _2157 = cbMtdParam._m0[2u].z * _2125;
    float _3911 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2159 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    uint _2160 = _441 + 6u;
    float _2168 = _401 / cbSceneParam._m0[86u].x;
    float _2169 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2183 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2168, _2169, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2185 = _2183.x;
    float _2186 = _2183.y;
    float _2187 = _2183.z;
    float _2188 = _2183.w;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2243 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2244 = _2243 / _322;
        float _2255 = _2244 * _373;
        float _2256 = _374 * _2244;
        float _2257 = (-0.0) - _2256;
        float _2259 = _2244 * _375;
        float _2261 = (cbSceneParam._m0[77u].w * _2257) / _2243;
        float _2262 = _2261 + cbSceneParam._m0[79u].w;
        float _2263 = cbSceneParam._m0[79u].w - _2256;
        float _2269 = sqrt(((_2255 * _2255) + (_2256 * _2256)) + (_2259 * _2259));
        float _2272 = (1.0 - (cbSceneParam._m0[77u].w / _2243)) * _2269;
        float _2277 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2279 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2464;
        if (abs((_2257 - _2261) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2464 = ((((_2262 > 0.0) ? exp2(_2277 * _2262) : (2.0 - exp2(_2279 * _2262))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2272;
        }
        else
        {
            float _2408 = 1.0 / cbSceneParam._m0[80u].x;
            float _2409 = isnan(_2263) ? _2262 : (isnan(_2262) ? _2263 : max(_2262, _2263));
            float _2410 = isnan(_2263) ? _2262 : (isnan(_2262) ? _2263 : min(_2262, _2263));
            float _2419 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : min(_2409, 0.0));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            _2464 = ((abs(_2269 / _2257) * cbSceneParam._m0[80u].y) * ((((_2419 - _2420) * 2.0) - ((exp2(_2277 * (isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0)))) - exp2(_2277 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0))))) * _2408)) - ((exp2(_2279 * _2419) - exp2(_2279 * _2420)) * _2408))) + (_2272 * cbSceneParam._m0[80u].z);
        }
        vec4 _2466 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2168, _2169, 1.0), 0.0);
        float _2475 = exp2((_2464 * (-1.44269502162933349609375)) * (1.0 - _2466.w));
        float _2476 = log2(_2475);
        float _2492 = log2(_2188);
        _2281 = (exp2(_2492 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].x)) * _2466.x) / cbSceneParam._m0[78u].x)) + _2185;
        _2283 = (exp2(_2492 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].y)) * _2466.y) / cbSceneParam._m0[78u].y)) + _2186;
        _2285 = (exp2(_2492 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].z)) * _2466.z) / cbSceneParam._m0[78u].z)) + _2187;
        _2287 = _2475 * _2188;
    }
    else
    {
        _2281 = _2185;
        _2283 = _2186;
        _2285 = _2187;
        _2287 = _2188;
    }
    bool _2502;
    vec4 _2297;
    vec4 _2320;
    float _2322;
    float _2326;
    float _2327;
    float _2328;
    float _2331;
    float _2334;
    float _2337;
    float _2338;
    bool _2349;
    for (;;)
    {
        _2297 = cbMatDynParam._m0[0u];
        float _2299 = roundEven(_2297.y);
        bool _2300 = _2299 == 3.0;
        float _2302 = log2(_2287);
        float _2306 = exp2(_2302 * cbSceneParam._m0[78u].x);
        float _2307 = exp2(_2302 * cbSceneParam._m0[78u].y);
        float _2308 = exp2(_2302 * cbSceneParam._m0[78u].z);
        float _2309 = _2306 * _2147;
        float _2310 = _2307 * _2148;
        float _2311 = _2308 * _2149;
        float _2318 = _389 + (-0.5);
        _2320 = cbMtdParam._m0[1u];
        _2322 = _2320.y * _2318;
        float _2325 = (_2299 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2326 = _2325 * (_2300 ? _2309 : (_2309 + (cbSceneParam._m0[72u].w * _2281)));
        _2327 = _2325 * (_2300 ? _2310 : (_2310 + (cbSceneParam._m0[72u].w * _2283)));
        _2328 = _2325 * (_2300 ? _2311 : (_2311 + (cbSceneParam._m0[72u].w * _2285)));
        _2331 = ((_2155 * _2159) * _2306) * _2325;
        _2334 = ((_2156 * _2159) * _2307) * _2325;
        _2337 = ((_2157 * _2159) * _2308) * _2325;
        _2338 = _2318 * 0.999000012874603271484375;
        _2349 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2349)
        {
            if ((cbInstanceData._m0[_441 + 7u].x + _2338) < 0.5)
            {
                _2502 = true;
                break;
            }
        }
        uint _2443 = _442 + uint(_2297.w);
        if ((cbInstanceData._m0[_2443].w < 1.0) && ((cbInstanceData._m0[_2443].w + _2338) < 0.5))
        {
            _2502 = true;
            break;
        }
        if ((_2322 + 1.0) < _2320.x)
        {
            _2502 = true;
            break;
        }
        _2502 = false;
        break;
    }
    float _2657;
    if (_2502)
    {
        discard_state = true;
        _2657 = 0.0;
    }
    else
    {
        _2657 = cbInstanceData._m0[_2160].w;
    }
    SV_Target.x = _2326;
    SV_Target.y = _2327;
    SV_Target.z = _2328;
    SV_Target.w = _2657;
    SV_Target_1.x = _2331;
    SV_Target_1.y = _2334;
    SV_Target_1.z = _2337;
    SV_Target_1.w = cbInstanceData._m0[_2160].w;
    discard_exit();
}


