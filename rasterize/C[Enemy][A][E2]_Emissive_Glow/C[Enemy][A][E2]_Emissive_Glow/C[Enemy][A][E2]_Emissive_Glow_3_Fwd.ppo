#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _831;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    vec4 _193 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _219 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _227 = (_219.x * cbMtdParam._m0[12u].x) + (_193.x * cbMtdParam._m0[9u].x);
    float _228 = (_219.y * cbMtdParam._m0[12u].y) + (_193.y * cbMtdParam._m0[9u].y);
    float _229 = (_219.z * cbMtdParam._m0[12u].z) + (_193.z * cbMtdParam._m0[9u].z);
    vec4 _263 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _292 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _317 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2972 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
    float _327 = (((_319 * _319) * (3.0 - (_319 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _334 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _335 = _334 * _172;
    float _336 = _334 * _173;
    float _337 = _334 * _174;
    float _2983 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _2994 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3005 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _356 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _407 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _397);
    float _408 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _397);
    float _409 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _397);
    float _413 = inversesqrt(dot(vec3(_407, _408, _409), vec3(_407, _408, _409)));
    float _414 = _407 * _413;
    float _415 = _408 * _413;
    float _416 = _409 * _413;
    float _422 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _423 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_337, cbSceneParam._m0[5u].z, fma(_336, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _335));
    float _447 = fma(_337, cbSceneParam._m0[6u].z, fma(_336, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _335));
    float _450 = fma(_337, cbSceneParam._m0[7u].z, fma(_336, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _335));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = _463 + 9u;
    uint _465 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _471 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0)))) * cbInstanceData._m0[_465].x;
    float _472 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0)))) * cbInstanceData._m0[_465].y;
    float _473 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0)))) * cbInstanceData._m0[_465].z;
    float _3016 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
    float _3027 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0));
    float _3038 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0));
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _422, cbSceneParam._m0[86u].y * _423));
    float _488 = _485.x * TEXCOORD_4;
    float _489 = dot(vec3(_335, _336, _337), vec3(_414, _415, _416));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _335) - _414;
    float _497 = (_492 * _336) - _415;
    float _498 = (_492 * _337) - _416;
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _830;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _555 = fma(_528, cbModelParam._m0[26u].z, fma(_524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _520));
        float _559 = fma(_528, cbModelParam._m0[27u].z, fma(_524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _520));
        float _563 = fma(_528, cbModelParam._m0[28u].z, fma(_524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _520));
        float _588 = _520 + _335;
        float _589 = _524 + _336;
        float _590 = _528 + _337;
        float _600 = fma(_590, cbModelParam._m0[26u].z, fma(_589, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588)) - _555;
        float _601 = fma(_590, cbModelParam._m0[27u].z, fma(_589, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588)) - _559;
        float _602 = fma(_590, cbModelParam._m0[28u].z, fma(_589, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588)) - _563;
        float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
        float _619 = ((_606 * _600) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_555 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _620 = ((_606 * _601) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_559 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_606 * _602) / cbModelParam._m0[34u].z) + ((((((_563 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        float _658 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_624.x + (-0.5));
        float _660 = _658 * (_624.y + (-0.5));
        float _661 = _658 * (_624.z + (-0.5));
        float _668 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_631.x + (-0.5));
        float _670 = _668 * (_631.y + (-0.5));
        float _671 = _668 * (_631.z + (-0.5));
        float _678 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_638.x + (-0.5));
        float _680 = _678 * (_638.y + (-0.5));
        float _681 = _678 * (_638.z + (-0.5));
        float _688 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_645.x + (-0.5));
        float _690 = _688 * (_645.y + (-0.5));
        float _691 = _688 * (_645.z + (-0.5));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = _659 * 0.5;
        float _696 = _669 * 0.5;
        float _697 = _679 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _712 = (dot(vec3(_335, _336, _337), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3064 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _722 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3075 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3086 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0))) * (_724 + 1.0))) + _729) * _692;
        float _739 = _660 * 0.5;
        float _740 = _670 * 0.5;
        float _741 = _680 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(_335, _336, _337), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3097 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3108 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3119 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0))) * (_766 + 1.0))) + _771) * _693;
        float _781 = _661 * 0.5;
        float _782 = _671 * 0.5;
        float _783 = _681 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_335, _336, _337), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3152 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_808 + 1.0))) + _813) * _694;
        _830 = _661;
        _832 = _660;
        _833 = _659;
        _834 = _671;
        _835 = _670;
        _836 = _669;
        _837 = _681;
        _838 = _680;
        _839 = _679;
        _840 = _694;
        _841 = _693;
        _842 = _692;
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
    }
    else
    {
        _830 = _831;
        _832 = _831;
        _833 = _831;
        _834 = _831;
        _835 = _831;
        _836 = _831;
        _837 = _831;
        _838 = _831;
        _839 = _831;
        _840 = _831;
        _841 = _831;
        _842 = _831;
        _843 = 0.0;
        _844 = 0.0;
        _845 = 0.0;
    }
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _871 = fma(_528, cbModelParam._m0[30u].z, fma(_524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _520));
        float _875 = fma(_528, cbModelParam._m0[31u].z, fma(_524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _520));
        float _879 = fma(_528, cbModelParam._m0[32u].z, fma(_524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _520));
        float _902 = _520 + _335;
        float _903 = _524 + _336;
        float _904 = _528 + _337;
        float _914 = fma(_904, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _902)) - _871;
        float _915 = fma(_904, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _902)) - _875;
        float _916 = fma(_904, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _902)) - _879;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_871 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_875 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[35u].z) + ((((((_879 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _970 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_937.x + (-0.5));
        float _972 = _970 * (_937.y + (-0.5));
        float _973 = _970 * (_937.z + (-0.5));
        float _980 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_944.x + (-0.5));
        float _982 = _980 * (_944.y + (-0.5));
        float _983 = _980 * (_944.z + (-0.5));
        float _990 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_951.x + (-0.5));
        float _992 = _990 * (_951.y + (-0.5));
        float _993 = _990 * (_951.z + (-0.5));
        float _1000 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_958.x + (-0.5));
        float _1002 = _1000 * (_958.y + (-0.5));
        float _1003 = _1000 * (_958.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_335, _336, _337), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3215 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_1034 + 1.0))) + _1039) * _1004;
        float _1049 = _972 * 0.5;
        float _1050 = _982 * 0.5;
        float _1051 = _992 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_335, _336, _337), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3248 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_1076 + 1.0))) + _1081) * _1005;
        float _1091 = _973 * 0.5;
        float _1092 = _983 * 0.5;
        float _1093 = _993 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_335, _336, _337), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3281 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_1118 + 1.0))) + _1123) * _1006;
        _1140 = _973;
        _1141 = _972;
        _1142 = _971;
        _1143 = _983;
        _1144 = _982;
        _1145 = _981;
        _1146 = _993;
        _1147 = _992;
        _1148 = _991;
        _1149 = _1006;
        _1150 = _1005;
        _1151 = _1004;
        _1152 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _831;
        _1141 = _831;
        _1142 = _831;
        _1143 = _831;
        _1144 = _831;
        _1145 = _831;
        _1146 = _831;
        _1147 = _831;
        _1148 = _831;
        _1149 = _831;
        _1150 = _831;
        _1151 = _831;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1164 = (cbModelParam._m0[1u].x * (_1152 - _843)) + _843;
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1187 = fma(_1166, cbSceneParam._m0[89u].z, fma(_1165, cbSceneParam._m0[89u].y, _1164 * cbSceneParam._m0[89u].x));
    float _1190 = fma(_1166, cbSceneParam._m0[90u].z, fma(_1165, cbSceneParam._m0[90u].y, _1164 * cbSceneParam._m0[90u].x));
    float _1193 = fma(_1166, cbSceneParam._m0[91u].z, fma(_1165, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1164));
    float _1208 = _496 * 0.5;
    float _1209 = _497 * 0.5;
    float _1210 = _498 * 0.5;
    float _1211 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1214 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1217 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_1140, _1143, _1146, _1149));
    float _1251;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1224 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_830, _834, _837, _840));
        float _1228 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_832, _835, _838, _841));
        float _1232 = dot(vec4(_1208, _1209, _1210, 1.0), vec4(_833, _836, _839, _842));
        float _1239 = dot(vec4(cbModelParam._m0[39u]), vec4(_1208, _1209, _1210, 1.0));
        _1251 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1239) ? 0.0 : (isnan(0.0) ? _1239 : max(0.0, _1239))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1251 = 1.0;
    }
    float _1262;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1253 = dot(vec4(cbModelParam._m0[40u]), vec4(_1208, _1209, _1210, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1266 = (_1262 * cbModelParam._m0[1u].x) + (_1251 * (1.0 - cbModelParam._m0[1u].x));
    float _1275 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1355;
    float _1357;
    float _1359;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1322 = fma(_528, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _520)) + cbModelParam._m0[13u].w;
        float _1326 = fma(_528, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _520)) + cbModelParam._m0[14u].w;
        float _1330 = fma(_528, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _520)) + cbModelParam._m0[15u].w;
        float _1333 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1336 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1339 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1365;
        if (_1333 > 0.0)
        {
            _1365 = abs((1.0 - _1322) / _1333);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1322 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1365 = frontier_phi_14_12_ladder;
        }
        float _1570;
        if (_1336 > 0.0)
        {
            _1570 = abs((1.0 - _1326) / _1336);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1326 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1570 = frontier_phi_23_19_ladder;
        }
        float _1759;
        if (_1339 > 0.0)
        {
            _1759 = abs((1.0 - _1330) / _1339);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1330 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1759 = frontier_phi_35_30_ladder;
        }
        float _1761 = isnan(_1570) ? _1365 : (isnan(_1365) ? _1570 : min(_1365, _1570));
        float _1762 = isnan(_1759) ? _1761 : (isnan(_1761) ? _1759 : min(_1761, _1759));
        float _1766 = (_1762 * _1333) + _1322;
        float _1767 = (_1762 * _1336) + _1326;
        float _1768 = (_1762 * _1339) + _1330;
        float _1769 = _1762 * 9.9999997473787516355514526367188e-05;
        float _1771 = (-1.0) - _1769;
        float _1773 = _1769 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1768 > _1773) || ((_1768 < _1771) || ((_1767 > _1773) || ((_1767 < _1771) || ((_1766 < _1771) || (_1766 > _1773))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1768, cbModelParam._m0[9u].z, fma(_1767, cbModelParam._m0[9u].y, _1766 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1768, cbModelParam._m0[10u].z, fma(_1767, cbModelParam._m0[10u].y, _1766 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1768, cbModelParam._m0[11u].z, fma(_1767, cbModelParam._m0[11u].y, _1766 * cbModelParam._m0[11u].x))), _1275);
            frontier_phi_13_35_ladder = _1865.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1865.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1865.x * cbModelParam._m0[1u].y;
        }
        _1355 = frontier_phi_13_35_ladder_2;
        _1357 = frontier_phi_13_35_ladder_1;
        _1359 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1275);
        _1355 = _1343.x * cbModelParam._m0[1u].y;
        _1357 = _1343.y * cbModelParam._m0[1u].y;
        _1359 = _1343.z * cbModelParam._m0[1u].y;
    }
    float _1362 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1454;
    float _1456;
    float _1458;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1418 = fma(_528, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _520)) + cbModelParam._m0[21u].w;
        float _1422 = fma(_528, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _520)) + cbModelParam._m0[22u].w;
        float _1426 = fma(_528, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _520)) + cbModelParam._m0[23u].w;
        float _1429 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1432 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1435 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1575;
        if (_1429 > 0.0)
        {
            _1575 = abs((1.0 - _1418) / _1429);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1418 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1575 = frontier_phi_25_21_ladder;
        }
        float _1786;
        if (_1432 > 0.0)
        {
            _1786 = abs((1.0 - _1422) / _1432);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1422 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1786 = frontier_phi_37_32_ladder;
        }
        float _1937;
        if (_1435 > 0.0)
        {
            _1937 = abs((1.0 - _1426) / _1435);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1426 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1937 = frontier_phi_46_43_ladder;
        }
        float _1939 = isnan(_1786) ? _1575 : (isnan(_1575) ? _1786 : min(_1575, _1786));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1429) + _1418;
        float _1945 = (_1940 * _1432) + _1422;
        float _1946 = (_1940 * _1435) + _1426;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1947;
        float _1950 = _1947 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1946 > _1950) || ((_1946 < _1948) || ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 < _1948) || (_1944 > _1950))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1946, cbModelParam._m0[17u].z, fma(_1945, cbModelParam._m0[17u].y, _1944 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1946, cbModelParam._m0[18u].z, fma(_1945, cbModelParam._m0[18u].y, _1944 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1946, cbModelParam._m0[19u].z, fma(_1945, cbModelParam._m0[19u].y, _1944 * cbModelParam._m0[19u].x))), _1362);
            frontier_phi_22_46_ladder = _2174.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2174.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2174.x * cbModelParam._m0[1u].z;
        }
        _1454 = frontier_phi_22_46_ladder_2;
        _1456 = frontier_phi_22_46_ladder_1;
        _1458 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1438 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1362);
        _1454 = _1438.x * cbModelParam._m0[1u].z;
        _1456 = _1438.y * cbModelParam._m0[1u].z;
        _1458 = _1438.z * cbModelParam._m0[1u].z;
    }
    float _1470 = _488 * 0.01200000010430812835693359375;
    float _1472 = _1470 * ((cbModelParam._m0[1u].w * (_1454 - _1355)) + _1355);
    float _1473 = _1470 * ((cbModelParam._m0[1u].w * (_1456 - _1357)) + _1357);
    float _1474 = _1470 * ((cbModelParam._m0[1u].w * (_1458 - _1359)) + _1359);
    float _1477 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, _1472 * cbSceneParam._m0[91u].x));
    uvec4 _1493 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1495 = _1493.x * 14u;
    uint _1496 = _1495 + 13u;
    float _1503 = _488 + (-1.0);
    float _1508 = (cbLight._m0[_1496].x * _1503) + 1.0;
    float _1509 = (cbLight._m0[_1496].y * _1503) + 1.0;
    float _1510 = (cbLight._m0[_1496].z * _1503) + 1.0;
    float _1511 = (cbLight._m0[_1496].w * _1503) + 1.0;
    uint _1512 = _1495 + 5u;
    float _1518 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
    uint _1522 = _1495 + 4u;
    float _1529 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
    uint _1533 = _1495 | 1u;
    float _1544 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_335, _336, _337));
    float _1547 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_335, _336, _337));
    float _3417 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _3428 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1552 = (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.3183098733425140380859375;
    float _1554 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.3183098733425140380859375;
    float _1561 = ((cbLight._m0[_1512].x * _1518) * _1554) + ((cbLight._m0[_1522].x * _1529) * _1552);
    float _1562 = ((_1518 * cbLight._m0[_1512].y) * _1554) + ((_1529 * cbLight._m0[_1522].y) * _1552);
    float _1563 = ((_1518 * cbLight._m0[_1512].z) * _1554) + ((_1529 * cbLight._m0[_1522].z) * _1552);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1495 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1561;
        _1582 = _1562;
        _1584 = _1563;
    }
    else
    {
        uint _1588 = _1495 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1495 + 2u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3439 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1607 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1563;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1730 = _1495 + 7u;
        float _1746 = (dot(vec3(cbLight._m0[_1495 + 3u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _1747 = _1746 * _1746;
        float _3455 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1749 = isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0));
        _1625 = (((cbLight._m0[_1730].x * 0.3183098733425140380859375) * _1748) * _1749) + _1580;
        _1627 = (((cbLight._m0[_1730].y * 0.3183098733425140380859375) * _1748) * _1749) + _1582;
        _1629 = (((cbLight._m0[_1730].z * 0.3183098733425140380859375) * _1748) * _1749) + _1584;
    }
    uint _1631 = _1495 + 8u;
    float _1637 = cbLight._m0[_1495].x + _414;
    float _1638 = cbLight._m0[_1495].y + _415;
    float _1639 = cbLight._m0[_1495].z + _416;
    float _1643 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
    float _1647 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1495].xyz));
    float _3471 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1650 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1651 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _1652 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_1637 * _1643, _1638 * _1643, _1639 * _1643));
    float _3493 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1663 = (exp2(log2(1.0 - (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1669 = (0.5 / ((_1650 + 9.9999999392252902907785028219223e-09) + _1651)) * _1650;
    float _3504 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1671 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.31831014156341552734375;
    uint _1682 = _1495 + 9u;
    float _1688 = cbLight._m0[_1533].x + _414;
    float _1689 = cbLight._m0[_1533].y + _415;
    float _1690 = cbLight._m0[_1533].z + _416;
    float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
    float _1698 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1533].xyz));
    float _3515 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1701 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _1702 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1688 * _1694, _1689 * _1694, _1690 * _1694));
    float _3526 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1711 = (exp2(log2(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1715 = (0.5 / ((_1701 + 9.9999999392252902907785028219223e-09) + _1651)) * _1701;
    float _3537 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1717 = (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * 0.31831014156341552734375;
    float _1727 = (((_1711 * cbLight._m0[_1682].x) * _1717) * _1518) + (((_1663 * cbLight._m0[_1631].x) * _1671) * _1529);
    float _1728 = (((_1711 * cbLight._m0[_1682].y) * _1717) * _1518) + (((_1663 * cbLight._m0[_1631].y) * _1671) * _1529);
    float _1729 = (((_1711 * cbLight._m0[_1682].z) * _1717) * _1518) + (((_1663 * cbLight._m0[_1631].z) * _1671) * _1529);
    float _1791;
    float _1793;
    float _1795;
    if (_1569)
    {
        _1791 = _1727;
        _1793 = _1728;
        _1795 = _1729;
    }
    else
    {
        uint _1797 = _1495 + 10u;
        uint _1803 = _1495 + 2u;
        float _1809 = cbLight._m0[_1803].x + _414;
        float _1810 = cbLight._m0[_1803].y + _415;
        float _1811 = cbLight._m0[_1803].z + _416;
        float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
        float _1819 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1803].xyz));
        float _3548 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1822 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1823 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1809 * _1815, _1810 * _1815, _1811 * _1815));
        float _3559 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1836 = (0.5 / ((_1822 + 9.9999999392252902907785028219223e-09) + _1651)) * _1822;
        float _3570 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1838 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.31831014156341552734375;
        float _1839 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1791 = (((_1832 * cbLight._m0[_1797].x) * _1838) * _1839) + _1727;
        _1793 = (((_1832 * cbLight._m0[_1797].y) * _1838) * _1839) + _1728;
        _1795 = (((_1832 * cbLight._m0[_1797].z) * _1838) * _1839) + _1729;
    }
    float _1874;
    float _1876;
    float _1878;
    if (_1587)
    {
        _1874 = _1791;
        _1876 = _1793;
        _1878 = _1795;
    }
    else
    {
        uint _1885 = _1495 + 11u;
        uint _1891 = _1495 + 3u;
        float _1897 = cbLight._m0[_1891].x + _414;
        float _1898 = cbLight._m0[_1891].y + _415;
        float _1899 = cbLight._m0[_1891].z + _416;
        float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
        float _1907 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1891].xyz));
        float _3586 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1910 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1911 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_1897 * _1903, _1898 * _1903, _1899 * _1903));
        float _3597 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1924 = (0.5 / ((_1910 + 9.9999999392252902907785028219223e-09) + _1651)) * _1910;
        float _3608 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1926 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.31831014156341552734375;
        float _1927 = isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0));
        _1874 = (((_1920 * cbLight._m0[_1885].x) * _1926) * _1927) + _1791;
        _1876 = (((_1920 * cbLight._m0[_1885].y) * _1926) * _1927) + _1793;
        _1878 = (((_1920 * cbLight._m0[_1885].z) * _1926) * _1927) + _1795;
    }
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    float _2072;
    if (_1493.y == 0u)
    {
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2002;
        float _2004 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2002;
        float _2005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2002;
        uvec4 _2017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2018 = _2017.x;
        uint _2029 = uint((float(_2017.y) * floor(float(uint(cbSceneParam._m0[85u].y * _423) / _2018))) + floor(float(uint(cbSceneParam._m0[85u].x * _422) / _2018)));
        float _2039 = (log2(_2005 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2040 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        uint _2043 = uint(isnan(14.0) ? _2040 : (isnan(_2040) ? 14.0 : min(_2040, 14.0)));
        uvec4 _2048 = texelFetch(g_lightClusterGridBuffer, int(((_2043 << 2u) + (_2029 << 6u)) >> 2u));
        uint _2049 = _2048.x;
        uint _2050 = _2017.z;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        float _2187;
        float _2189;
        if (((((1u << ((_2050 >> 4u) & 15u)) + 4294967295u) & _2049) == 0u) || ((_2050 & 240u) == 0u))
        {
            _2179 = 0.0;
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
            _2187 = 0.0;
            _2189 = 0.0;
        }
        else
        {
            float _2180;
            float _2182;
            float _2184;
            float _2186;
            float _2188;
            float _2190;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            uint _2336 = 0u;
            uint _2345;
            bool _2346;
            for (;;)
            {
                _2345 = texelFetch(g_lightClassification, int((((_2043 << 5u) + (_2029 << 9u)) + (_2336 << 2u)) >> 2u)).x;
                _2346 = _2345 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2346)
                {
                    frontier_phi_61_pred = _2330;
                    frontier_phi_61_pred_1 = _2335;
                    frontier_phi_61_pred_2 = _2334;
                    frontier_phi_61_pred_3 = _2333;
                    frontier_phi_61_pred_4 = _2332;
                    frontier_phi_61_pred_5 = _2331;
                }
                else
                {
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    uint _2460;
                    _2454 = _2330;
                    _2455 = _2331;
                    _2456 = _2332;
                    _2457 = _2333;
                    _2458 = _2334;
                    _2459 = _2335;
                    _2460 = _2345;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    for (;;)
                    {
                        uint _2464 = uint(findLSB(_2460)) + (_2336 << 5u);
                        uint _2461 = (_2460 + 4294967295u) & _2460;
                        uint _2466 = _2464 * 48u;
                        vec4 _2480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2466)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2466 + 3u)).x));
                        uint _2486 = (_2464 * 48u) + 4u;
                        vec4 _2499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2486)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 3u)).x));
                        uint _2505 = (_2464 * 48u) + 8u;
                        vec3 _2516 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2505)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 2u)).x));
                        float _2520 = _2480.x - _2003;
                        float _2521 = _2480.y - _2004;
                        float _2522 = _2480.z - _2005;
                        float _2523 = dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522));
                        float _2526 = inversesqrt(_2523);
                        float _2535 = 1.0 - (_2523 * _2480.w);
                        float _3634 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
                        float _2536 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                        float _2537 = sqrt(_2523) * _2499.w;
                        float _2540 = 1.39999997615814208984375 / (_2537 + 1.39999997615814208984375);
                        float _2541 = _2540 * _2540;
                        float _2544 = ((1.0 - _2541) * dot(vec3(_444, _447, _450), vec3(_2526 * _2520, _2526 * _2521, _2526 * _2522))) + _2541;
                        float _2547 = _2537 * _2537;
                        float _2551 = ((isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))) * _2536) / ((_2547 * 0.699999988079071044921875) + 1.0);
                        float _2555 = (-0.0) - _2003;
                        float _2556 = (-0.0) - _2004;
                        float _2557 = (-0.0) - _2005;
                        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
                        float _2565 = dot(vec3(_444, _447, _450), vec3(_2561 * _2555, _2561 * _2556, _2561 * _2557));
                        float _3650 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _3661 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                        float _2569 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
                        float _2573 = (0.5 / (((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) + 9.9999999392252902907785028219223e-09) + _2569)) * _2569;
                        float _3672 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2582 = (((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 3.1415927410125732421875) / ((_2547 * 2.1991131305694580078125) + 3.141590118408203125)) * _2536;
                        _2389 = (_2551 * _2499.x) + _2457;
                        _2390 = (_2551 * _2499.y) + _2458;
                        _2391 = (_2551 * _2499.z) + _2459;
                        _2386 = (_2582 * _2516.x) + _2454;
                        _2387 = (_2582 * _2516.y) + _2455;
                        _2388 = (_2582 * _2516.z) + _2456;
                        if (_2461 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2454 = _2386;
                            _2455 = _2387;
                            _2456 = _2388;
                            _2457 = _2389;
                            _2458 = _2390;
                            _2459 = _2391;
                            _2460 = _2461;
                        }
                    }
                    frontier_phi_61_pred = _2386;
                    frontier_phi_61_pred_1 = _2391;
                    frontier_phi_61_pred_2 = _2390;
                    frontier_phi_61_pred_3 = _2389;
                    frontier_phi_61_pred_4 = _2388;
                    frontier_phi_61_pred_5 = _2387;
                }
                _2180 = frontier_phi_61_pred;
                _2190 = frontier_phi_61_pred_1;
                _2188 = frontier_phi_61_pred_2;
                _2186 = frontier_phi_61_pred_3;
                _2184 = frontier_phi_61_pred_4;
                _2182 = frontier_phi_61_pred_5;
                uint _2337 = _2336 + 1u;
                if (_2337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2330 = _2180;
                    _2331 = _2182;
                    _2332 = _2184;
                    _2333 = _2186;
                    _2334 = _2188;
                    _2335 = _2190;
                    _2336 = _2337;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2179 = _2180;
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
            _2187 = _2188;
            _2189 = _2190;
        }
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.z;
        uint _2196 = (_2194 >> 8u) & 15u;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((4294967295u << _2196) & _2049) == 0u)
        {
            _2301 = _2179;
            _2303 = _2181;
            _2305 = _2183;
            _2307 = _2185;
            _2309 = _2187;
            _2311 = _2189;
        }
        else
        {
            float _2326 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2196 < ((_2194 >> 12u) & 15u))
            {
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2310;
                float _2312;
                float _2437 = _2179;
                float _2438 = _2181;
                float _2439 = _2183;
                float _2440 = _2185;
                float _2441 = _2187;
                float _2442 = _2189;
                uint _2443 = _2196;
                uint _2452;
                bool _2453;
                for (;;)
                {
                    _2452 = texelFetch(g_lightClassification, int((((_2043 << 5u) + (_2029 << 9u)) + (_2443 << 2u)) >> 2u)).x;
                    _2453 = _2452 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2453)
                    {
                        frontier_phi_67_pred = _2440;
                        frontier_phi_67_pred_1 = _2441;
                        frontier_phi_67_pred_2 = _2442;
                        frontier_phi_67_pred_3 = _2439;
                        frontier_phi_67_pred_4 = _2438;
                        frontier_phi_67_pred_5 = _2437;
                    }
                    else
                    {
                        float _2587;
                        float _2588;
                        float _2589;
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2600 = _2437;
                        float _2601 = _2438;
                        float _2602 = _2439;
                        float _2603 = _2440;
                        float _2604 = _2441;
                        float _2605 = _2442;
                        uint _2606 = _2452;
                        uint _2607;
                        vec4 _2632;
                        float _2633;
                        vec4 _2648;
                        vec3 _2660;
                        vec4 _2675;
                        vec4 _2691;
                        float _2738;
                        bool _2739;
                        for (;;)
                        {
                            uint _2617 = ((_2443 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2606));
                            _2607 = (_2606 + 4294967295u) & _2606;
                            uint _2619 = _2617 * 40u;
                            _2632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 3u)).x));
                            _2633 = _2632.w;
                            uint _2635 = (_2617 * 40u) + 4u;
                            _2648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2635 + 3u)).x));
                            uint _2650 = (_2617 * 40u) + 8u;
                            _2660 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x));
                            uint _2662 = (_2617 * 40u) + 16u;
                            _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            uint _2678 = (_2617 * 40u) + 20u;
                            _2691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 3u)).x));
                            uint _2694 = (_2617 * 40u) + 24u;
                            vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2713 = (_2617 * 40u) + 28u;
                            vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 3u)).x));
                            _2738 = fma(_2005, _2726.z, fma(_2004, _2726.y, _2726.x * _2003)) + _2726.w;
                            _2739 = !((fma(_2005, _2707.z, fma(_2004, _2707.y, _2707.x * _2003)) + _2707.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2739)
                            {
                                float _2766 = _2632.x - _2003;
                                float _2767 = _2632.y - _2004;
                                float _2768 = _2632.z - _2005;
                                float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                                float _2772 = inversesqrt(_2769);
                                float _2773 = _2772 * _2766;
                                float _2774 = _2772 * _2767;
                                float _2775 = _2772 * _2768;
                                float _2779 = 1.0 - (_2769 / (_2633 * _2633));
                                float _3683 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                                float _2780 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
                                float _2784 = sqrt(_2769) * _2648.w;
                                float _2786 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                                float _2787 = _2786 * _2786;
                                float _2788 = 1.0 - _2787;
                                float _2790 = (_2788 * dot(vec3(_2773, _2774, _2775), vec3(_444, _447, _450))) + _2787;
                                float _2793 = _2784 * _2784;
                                float _2797 = (fma(_2005, _2675.z, fma(_2004, _2675.y, _2675.x * _2003)) + _2675.w) / _2738;
                                float _2798 = (fma(_2005, _2691.z, fma(_2004, _2691.y, _2691.x * _2003)) + _2691.w) / _2738;
                                float _2802 = 1.0 - dot(vec2(_2797, _2798), vec2(_2797, _2798));
                                float _3699 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
                                float _2804 = _2803 * (((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2780) / ((_2793 * 0.699999988079071044921875) + 1.0));
                                float _2814 = dot(vec3(_444, _447, _450), vec3((-0.0) - (_2003 * _2326), (-0.0) - (_2004 * _2326), (-0.0) - (_2005 * _2326)));
                                float _3710 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                                float _2822 = (_2788 * dot(vec3(_444, _447, _450), vec3(_2773, _2774, _2775))) + _2787;
                                float _3721 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                                float _2827 = (0.5 / (((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) + 9.9999999392252902907785028219223e-09) + _2823)) * _2823;
                                float _3732 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2834 = (_2803 * _2780) * (((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 3.1415927410125732421875) / ((_2793 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2834 * _2660.x;
                                frontier_phi_73_pred_1 = _2834 * _2660.y;
                                frontier_phi_73_pred_2 = _2804 * _2648.z;
                                frontier_phi_73_pred_3 = _2804 * _2648.y;
                                frontier_phi_73_pred_4 = _2804 * _2648.x;
                                frontier_phi_73_pred_5 = _2834 * _2660.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2838 = frontier_phi_73_pred;
                            _2839 = frontier_phi_73_pred_1;
                            _2843 = frontier_phi_73_pred_2;
                            _2842 = frontier_phi_73_pred_3;
                            _2841 = frontier_phi_73_pred_4;
                            _2840 = frontier_phi_73_pred_5;
                            _2590 = _2841 + _2603;
                            _2591 = _2842 + _2604;
                            _2592 = _2843 + _2605;
                            _2587 = _2838 + _2600;
                            _2588 = _2839 + _2601;
                            _2589 = _2840 + _2602;
                            if (_2607 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2589;
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2607;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2590;
                        frontier_phi_67_pred_1 = _2591;
                        frontier_phi_67_pred_2 = _2592;
                        frontier_phi_67_pred_3 = _2589;
                        frontier_phi_67_pred_4 = _2588;
                        frontier_phi_67_pred_5 = _2587;
                    }
                    _2308 = frontier_phi_67_pred;
                    _2310 = frontier_phi_67_pred_1;
                    _2312 = frontier_phi_67_pred_2;
                    _2306 = frontier_phi_67_pred_3;
                    _2304 = frontier_phi_67_pred_4;
                    _2302 = frontier_phi_67_pred_5;
                    uint _2444 = _2443 + 1u;
                    if (_2444 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2437 = _2302;
                        _2438 = _2304;
                        _2439 = _2306;
                        _2440 = _2308;
                        _2441 = _2310;
                        _2442 = _2312;
                        _2443 = _2444;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2310;
                frontier_phi_55_56_ladder_1 = _2312;
                frontier_phi_55_56_ladder_2 = _2308;
                frontier_phi_55_56_ladder_3 = _2306;
                frontier_phi_55_56_ladder_4 = _2304;
                frontier_phi_55_56_ladder_5 = _2302;
            }
            else
            {
                frontier_phi_55_56_ladder = _2187;
                frontier_phi_55_56_ladder_1 = _2189;
                frontier_phi_55_56_ladder_2 = _2185;
                frontier_phi_55_56_ladder_3 = _2183;
                frontier_phi_55_56_ladder_4 = _2181;
                frontier_phi_55_56_ladder_5 = _2179;
            }
            _2301 = frontier_phi_55_56_ladder_5;
            _2303 = frontier_phi_55_56_ladder_4;
            _2305 = frontier_phi_55_56_ladder_3;
            _2307 = frontier_phi_55_56_ladder_2;
            _2309 = frontier_phi_55_56_ladder;
            _2311 = frontier_phi_55_56_ladder_1;
        }
        float _2316 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2062 = (_2316 * _2307) + _1625;
        _2064 = (_2316 * _2309) + _1627;
        _2066 = (_2316 * _2311) + _1629;
        _2068 = ((_2301 * 0.039999999105930328369140625) * _2316) + _1874;
        _2070 = ((_2303 * 0.039999999105930328369140625) * _2316) + _1876;
        _2072 = ((_2305 * 0.039999999105930328369140625) * _2316) + _1878;
    }
    else
    {
        _2062 = _1625;
        _2064 = _1627;
        _2066 = _1629;
        _2068 = _1874;
        _2070 = _1876;
        _2072 = _1878;
    }
    uint _2078 = _464 + uint(cbMatDynParam._m0[0u].w);
    float _2084 = (_327 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _292.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _263.x))) * cbInstanceData._m0[_2078].x;
    float _2085 = (_327 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _292.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _263.y))) * cbInstanceData._m0[_2078].y;
    float _2086 = (_327 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _292.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _263.z))) * cbInstanceData._m0[_2078].z;
    float _3748 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3759 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3770 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2103 = (((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_2062 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _488))) + ((_2068 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1266)) * cbPerFrame._m0[3u].x)) + _2084;
    float _2105 = (_2085 + ((_2070 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1266)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_2064 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _488)));
    float _2107 = (_2086 + ((_2072 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1266)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_2066 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _488)));
    float _3796 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2120 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    uint _2121 = _463 + 6u;
    float _2129 = _422 / cbSceneParam._m0[86u].x;
    float _2130 = _423 / cbSceneParam._m0[86u].y;
    vec4 _2144 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2129, _2130, (log2((isnan(cbSceneParam._m0[77u].w) ? _356 : (isnan(_356) ? cbSceneParam._m0[77u].w : min(_356, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2146 = _2144.x;
    float _2147 = _2144.y;
    float _2148 = _2144.z;
    float _2149 = _2144.w;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    if (_356 > cbSceneParam._m0[78u].w)
    {
        float _2204 = isnan(_356) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _356 : min(cbSceneParam._m0[80u].w, _356));
        float _2205 = _2204 / _356;
        float _2216 = _2205 * _407;
        float _2217 = _408 * _2205;
        float _2218 = (-0.0) - _2217;
        float _2220 = _2205 * _409;
        float _2222 = (cbSceneParam._m0[77u].w * _2218) / _2204;
        float _2223 = _2222 + cbSceneParam._m0[79u].w;
        float _2224 = cbSceneParam._m0[79u].w - _2217;
        float _2230 = sqrt(((_2216 * _2216) + (_2217 * _2217)) + (_2220 * _2220));
        float _2233 = (1.0 - (cbSceneParam._m0[77u].w / _2204)) * _2230;
        float _2238 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2240 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2399;
        if (abs((_2218 - _2222) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2399 = ((((_2223 > 0.0) ? exp2(_2238 * _2223) : (2.0 - exp2(_2240 * _2223))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2233;
        }
        else
        {
            float _2359 = 1.0 / cbSceneParam._m0[80u].x;
            float _2360 = isnan(_2224) ? _2223 : (isnan(_2223) ? _2224 : max(_2223, _2224));
            float _2361 = isnan(_2224) ? _2223 : (isnan(_2223) ? _2224 : min(_2223, _2224));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            float _2371 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : min(_2361, 0.0));
            _2399 = ((abs(_2230 / _2218) * cbSceneParam._m0[80u].y) * ((((_2370 - _2371) * 2.0) - ((exp2(_2238 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0)))) - exp2(_2238 * (isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0))))) * _2359)) - ((exp2(_2240 * _2370) - exp2(_2240 * _2371)) * _2359))) + (_2233 * cbSceneParam._m0[80u].z);
        }
        vec4 _2401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2129, _2130, 1.0), 0.0);
        float _2410 = exp2((_2399 * (-1.44269502162933349609375)) * (1.0 - _2401.w));
        float _2411 = log2(_2410);
        float _2427 = log2(_2149);
        _2242 = (exp2(_2427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].x)) * _2401.x) / cbSceneParam._m0[78u].x)) + _2146;
        _2244 = (exp2(_2427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].y)) * _2401.y) / cbSceneParam._m0[78u].y)) + _2147;
        _2246 = (exp2(_2427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].z)) * _2401.z) / cbSceneParam._m0[78u].z)) + _2148;
        _2248 = _2410 * _2149;
    }
    else
    {
        _2242 = _2146;
        _2244 = _2147;
        _2246 = _2148;
        _2248 = _2149;
    }
    float _2260 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2261 = _2260 == 3.0;
    float _2262 = log2(_2248);
    float _2266 = exp2(_2262 * cbSceneParam._m0[78u].x);
    float _2267 = exp2(_2262 * cbSceneParam._m0[78u].y);
    float _2268 = exp2(_2262 * cbSceneParam._m0[78u].z);
    float _2269 = _2266 * (isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)));
    float _2270 = _2267 * (isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0)));
    float _2271 = _2268 * (isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0)));
    float _2280 = (_2260 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2280 * (_2261 ? _2269 : (_2269 + (cbSceneParam._m0[72u].w * _2242)));
    SV_Target.y = _2280 * (_2261 ? _2270 : (_2270 + (cbSceneParam._m0[72u].w * _2244)));
    SV_Target.z = _2280 * (_2261 ? _2271 : (_2271 + (cbSceneParam._m0[72u].w * _2246)));
    SV_Target.w = cbInstanceData._m0[_2121].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2084) * _2120) * _2266) * _2280;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2085) * _2120) * _2267) * _2280;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2086) * _2120) * _2268) * _2280;
    SV_Target_1.w = cbInstanceData._m0[_2121].w;
}


