#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _821;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    vec4 _195 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _221 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _229 = (_221.x * cbMtdParam._m0[12u].x) + (_195.x * cbMtdParam._m0[9u].x);
    float _230 = (_221.y * cbMtdParam._m0[12u].y) + (_195.y * cbMtdParam._m0[9u].y);
    float _231 = (_221.z * cbMtdParam._m0[12u].z) + (_195.z * cbMtdParam._m0[9u].z);
    vec4 _253 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _282 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _307 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2987 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _309 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
    float _317 = (((_309 * _309) * (3.0 - (_309 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _324 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _325 = _324 * _174;
    float _326 = _324 * _175;
    float _327 = _324 * _176;
    float _2998 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3009 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3020 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_327, cbSceneParam._m0[5u].z, fma(_326, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _325));
    float _437 = fma(_327, cbSceneParam._m0[6u].z, fma(_326, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _325));
    float _440 = fma(_327, cbSceneParam._m0[7u].z, fma(_326, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _325));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _454 = _453 + 9u;
    uint _455 = _454 + uint(cbMatDynParam._m0[0u].w);
    float _461 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0)))) * cbInstanceData._m0[_455].x;
    float _462 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0)))) * cbInstanceData._m0[_455].y;
    float _463 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0)))) * cbInstanceData._m0[_455].z;
    float _3031 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
    float _3042 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
    float _3053 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0));
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _478 = _475.x * TEXCOORD_4;
    float _479 = dot(vec3(_325, _326, _327), vec3(_404, _405, _406));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _325) - _404;
    float _487 = (_482 * _326) - _405;
    float _488 = (_482 * _327) - _406;
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _820;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _545 = fma(_518, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510));
        float _549 = fma(_518, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510));
        float _553 = fma(_518, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510));
        float _578 = _510 + _325;
        float _579 = _514 + _326;
        float _580 = _518 + _327;
        float _590 = fma(_580, cbModelParam._m0[26u].z, fma(_579, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _578)) - _545;
        float _591 = fma(_580, cbModelParam._m0[27u].z, fma(_579, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _578)) - _549;
        float _592 = fma(_580, cbModelParam._m0[28u].z, fma(_579, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _578)) - _553;
        float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
        float _609 = ((_596 * _590) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_545 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _610 = ((_596 * _591) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_549 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_596 * _592) / cbModelParam._m0[34u].z) + ((((((_553 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _628 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_609, _610, _611), 0.0);
        float _648 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_614.x + (-0.5));
        float _650 = _648 * (_614.y + (-0.5));
        float _651 = _648 * (_614.z + (-0.5));
        float _658 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_621.x + (-0.5));
        float _660 = _658 * (_621.y + (-0.5));
        float _661 = _658 * (_621.z + (-0.5));
        float _668 = exp2((_628.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_628.x + (-0.5));
        float _670 = _668 * (_628.y + (-0.5));
        float _671 = _668 * (_628.z + (-0.5));
        float _678 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_635.x + (-0.5));
        float _680 = _678 * (_635.y + (-0.5));
        float _681 = _678 * (_635.z + (-0.5));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = _649 * 0.5;
        float _686 = _659 * 0.5;
        float _687 = _669 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _702 = (dot(vec3(_325, _326, _327), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3079 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _712 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3090 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _714 = _713 * 2.0;
        float _718 = (1.0 - _713) / (_713 + 1.0);
        float _3101 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _728 = ((((1.0 - _719) * (_714 + 2.0)) * exp2(log2(isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * (_714 + 1.0))) + _719) * _682;
        float _729 = _650 * 0.5;
        float _730 = _660 * 0.5;
        float _731 = _670 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _745 = (dot(vec3(_325, _326, _327), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3112 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _754 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3123 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3134 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))) * (_756 + 1.0))) + _761) * _683;
        float _771 = _651 * 0.5;
        float _772 = _661 * 0.5;
        float _773 = _671 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_325, _326, _327), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3145 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3156 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3167 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))) * (_798 + 1.0))) + _803) * _684;
        _820 = _651;
        _822 = _650;
        _823 = _649;
        _824 = _661;
        _825 = _660;
        _826 = _659;
        _827 = _671;
        _828 = _670;
        _829 = _669;
        _830 = _684;
        _831 = _683;
        _832 = _682;
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
    }
    else
    {
        _820 = _821;
        _822 = _821;
        _823 = _821;
        _824 = _821;
        _825 = _821;
        _826 = _821;
        _827 = _821;
        _828 = _821;
        _829 = _821;
        _830 = _821;
        _831 = _821;
        _832 = _821;
        _833 = 0.0;
        _834 = 0.0;
        _835 = 0.0;
    }
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _861 = fma(_518, cbModelParam._m0[30u].z, fma(_514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _510));
        float _865 = fma(_518, cbModelParam._m0[31u].z, fma(_514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _510));
        float _869 = fma(_518, cbModelParam._m0[32u].z, fma(_514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _510));
        float _892 = _510 + _325;
        float _893 = _514 + _326;
        float _894 = _518 + _327;
        float _904 = fma(_894, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892)) - _861;
        float _905 = fma(_894, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892)) - _865;
        float _906 = fma(_894, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892)) - _869;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_861 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_865 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[35u].z) + ((((((_869 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _960 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_927.x + (-0.5));
        float _962 = _960 * (_927.y + (-0.5));
        float _963 = _960 * (_927.z + (-0.5));
        float _970 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_934.x + (-0.5));
        float _972 = _970 * (_934.y + (-0.5));
        float _973 = _970 * (_934.z + (-0.5));
        float _980 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_941.x + (-0.5));
        float _982 = _980 * (_941.y + (-0.5));
        float _983 = _980 * (_941.z + (-0.5));
        float _990 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_948.x + (-0.5));
        float _992 = _990 * (_948.y + (-0.5));
        float _993 = _990 * (_948.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_325, _326, _327), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3208 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3219 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3230 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))) * (_1024 + 1.0))) + _1029) * _994;
        float _1039 = _962 * 0.5;
        float _1040 = _972 * 0.5;
        float _1041 = _982 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_325, _326, _327), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3241 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3252 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3263 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * (_1066 + 1.0))) + _1071) * _995;
        float _1081 = _963 * 0.5;
        float _1082 = _973 * 0.5;
        float _1083 = _983 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_325, _326, _327), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3296 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_1108 + 1.0))) + _1113) * _996;
        _1130 = _963;
        _1131 = _962;
        _1132 = _961;
        _1133 = _973;
        _1134 = _972;
        _1135 = _971;
        _1136 = _983;
        _1137 = _982;
        _1138 = _981;
        _1139 = _996;
        _1140 = _995;
        _1141 = _994;
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _821;
        _1131 = _821;
        _1132 = _821;
        _1133 = _821;
        _1134 = _821;
        _1135 = _821;
        _1136 = _821;
        _1137 = _821;
        _1138 = _821;
        _1139 = _821;
        _1140 = _821;
        _1141 = _821;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1177 = fma(_1156, cbSceneParam._m0[89u].z, fma(_1155, cbSceneParam._m0[89u].y, _1154 * cbSceneParam._m0[89u].x));
    float _1180 = fma(_1156, cbSceneParam._m0[90u].z, fma(_1155, cbSceneParam._m0[90u].y, _1154 * cbSceneParam._m0[90u].x));
    float _1183 = fma(_1156, cbSceneParam._m0[91u].z, fma(_1155, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1154));
    float _1198 = _486 * 0.5;
    float _1199 = _487 * 0.5;
    float _1200 = _488 * 0.5;
    float _1201 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1204 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1207 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1241;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1214 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_820, _824, _827, _830));
        float _1218 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_822, _825, _828, _831));
        float _1222 = dot(vec4(_1198, _1199, _1200, 1.0), vec4(_823, _826, _829, _832));
        float _1229 = dot(vec4(cbModelParam._m0[39u]), vec4(_1198, _1199, _1200, 1.0));
        _1241 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1241 = 1.0;
    }
    float _1252;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1243 = dot(vec4(cbModelParam._m0[40u]), vec4(_1198, _1199, _1200, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1243) ? 0.0 : (isnan(0.0) ? _1243 : max(0.0, _1243))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1256 = (_1252 * cbModelParam._m0[1u].x) + (_1241 * (1.0 - cbModelParam._m0[1u].x));
    float _1265 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1313 = fma(_518, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510)) + cbModelParam._m0[13u].w;
        float _1317 = fma(_518, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510)) + cbModelParam._m0[14u].w;
        float _1321 = fma(_518, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510)) + cbModelParam._m0[15u].w;
        float _1324 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1327 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1330 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1356;
        if (_1324 > 0.0)
        {
            _1356 = abs((1.0 - _1313) / _1324);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1313 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1356 = frontier_phi_14_12_ladder;
        }
        float _1582;
        if (_1327 > 0.0)
        {
            _1582 = abs((1.0 - _1317) / _1327);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1317 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1582 = frontier_phi_23_19_ladder;
        }
        float _1774;
        if (_1330 > 0.0)
        {
            _1774 = abs((1.0 - _1321) / _1330);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1321 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1774 = frontier_phi_35_30_ladder;
        }
        float _1776 = isnan(_1582) ? _1356 : (isnan(_1356) ? _1582 : min(_1356, _1582));
        float _1777 = isnan(_1774) ? _1776 : (isnan(_1776) ? _1774 : min(_1776, _1774));
        float _1781 = (_1777 * _1324) + _1313;
        float _1782 = (_1777 * _1327) + _1317;
        float _1783 = (_1777 * _1330) + _1321;
        float _1784 = _1777 * 9.9999997473787516355514526367188e-05;
        float _1786 = (-1.0) - _1784;
        float _1788 = _1784 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1783 > _1788) || ((_1783 < _1786) || ((_1782 > _1788) || ((_1782 < _1786) || ((_1781 < _1786) || (_1781 > _1788))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1783, cbModelParam._m0[9u].z, fma(_1782, cbModelParam._m0[9u].y, _1781 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1783, cbModelParam._m0[10u].z, fma(_1782, cbModelParam._m0[10u].y, _1781 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1783, cbModelParam._m0[11u].z, fma(_1782, cbModelParam._m0[11u].y, _1781 * cbModelParam._m0[11u].x))), _1265);
            frontier_phi_13_35_ladder = _1880.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1880.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1880.x * cbModelParam._m0[1u].y;
        }
        _1346 = frontier_phi_13_35_ladder_2;
        _1348 = frontier_phi_13_35_ladder_1;
        _1350 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1265);
        _1346 = _1334.x * cbModelParam._m0[1u].y;
        _1348 = _1334.y * cbModelParam._m0[1u].y;
        _1350 = _1334.z * cbModelParam._m0[1u].y;
    }
    float _1353 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1409 = fma(_518, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510)) + cbModelParam._m0[21u].w;
        float _1413 = fma(_518, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510)) + cbModelParam._m0[22u].w;
        float _1417 = fma(_518, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510)) + cbModelParam._m0[23u].w;
        float _1420 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1423 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1426 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1587;
        if (_1420 > 0.0)
        {
            _1587 = abs((1.0 - _1409) / _1420);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1409 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1587 = frontier_phi_25_21_ladder;
        }
        float _1801;
        if (_1423 > 0.0)
        {
            _1801 = abs((1.0 - _1413) / _1423);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1413 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1801 = frontier_phi_37_32_ladder;
        }
        float _1952;
        if (_1426 > 0.0)
        {
            _1952 = abs((1.0 - _1417) / _1426);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1417 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1952 = frontier_phi_46_43_ladder;
        }
        float _1954 = isnan(_1801) ? _1587 : (isnan(_1587) ? _1801 : min(_1587, _1801));
        float _1955 = isnan(_1952) ? _1954 : (isnan(_1954) ? _1952 : min(_1954, _1952));
        float _1959 = (_1955 * _1420) + _1409;
        float _1960 = (_1955 * _1423) + _1413;
        float _1961 = (_1955 * _1426) + _1417;
        float _1962 = _1955 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1962;
        float _1965 = _1962 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1961 > _1965) || ((_1961 < _1963) || ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 < _1963) || (_1959 > _1965))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1961, cbModelParam._m0[17u].z, fma(_1960, cbModelParam._m0[17u].y, _1959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1961, cbModelParam._m0[18u].z, fma(_1960, cbModelParam._m0[18u].y, _1959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1961, cbModelParam._m0[19u].z, fma(_1960, cbModelParam._m0[19u].y, _1959 * cbModelParam._m0[19u].x))), _1353);
            frontier_phi_22_46_ladder = _2189.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2189.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2189.x * cbModelParam._m0[1u].z;
        }
        _1445 = frontier_phi_22_46_ladder_2;
        _1447 = frontier_phi_22_46_ladder_1;
        _1449 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1353);
        _1445 = _1429.x * cbModelParam._m0[1u].z;
        _1447 = _1429.y * cbModelParam._m0[1u].z;
        _1449 = _1429.z * cbModelParam._m0[1u].z;
    }
    float _1461 = _478 * 0.01200000010430812835693359375;
    float _1463 = _1461 * ((cbModelParam._m0[1u].w * (_1445 - _1346)) + _1346);
    float _1464 = _1461 * ((cbModelParam._m0[1u].w * (_1447 - _1348)) + _1348);
    float _1465 = _1461 * ((cbModelParam._m0[1u].w * (_1449 - _1350)) + _1350);
    float _1468 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, _1463 * cbSceneParam._m0[91u].x));
    vec4 _1482 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_412, _413));
    float _1484 = _1482.w;
    float _1496 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1484);
    float _1497 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1484);
    float _1498 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1484);
    uvec4 _1502 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1504 = _1502.x * 14u;
    uint _1505 = _1504 + 13u;
    float _1512 = _478 + (-1.0);
    float _1517 = (cbLight._m0[_1505].x * _1512) + 1.0;
    float _1518 = (cbLight._m0[_1505].y * _1512) + 1.0;
    float _1519 = (cbLight._m0[_1505].z * _1512) + 1.0;
    float _1520 = (cbLight._m0[_1505].w * _1512) + 1.0;
    uint _1521 = _1504 + 5u;
    float _1527 = isnan(1.0) ? _1518 : (isnan(_1518) ? 1.0 : min(_1518, 1.0));
    uint _1531 = _1504 + 4u;
    float _1541 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
    uint _1545 = _1504 | 1u;
    float _1556 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_325, _326, _327));
    float _1559 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_325, _326, _327));
    float _3432 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _3443 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _1564 = (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * 0.3183098733425140380859375;
    float _1566 = (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.3183098733425140380859375;
    float _1573 = ((cbLight._m0[_1521].x * _1527) * _1566) + (((cbLight._m0[_1531].x * _1496) * _1541) * _1564);
    float _1574 = ((_1527 * cbLight._m0[_1521].y) * _1566) + (((cbLight._m0[_1531].y * _1497) * _1541) * _1564);
    float _1575 = ((_1527 * cbLight._m0[_1521].z) * _1566) + (((cbLight._m0[_1531].z * _1498) * _1541) * _1564);
    uvec4 _1579 = floatBitsToUint(cbLight._m0[_1504 + 12u]);
    bool _1581 = _1579.x == 0u;
    float _1592;
    float _1594;
    float _1596;
    if (_1581)
    {
        _1592 = _1573;
        _1594 = _1574;
        _1596 = _1575;
    }
    else
    {
        uint _1600 = _1504 + 6u;
        float _1616 = (dot(vec3(cbLight._m0[_1504 + 2u].xyz), vec3(_325, _326, _327)) * 0.5) + 0.5;
        float _1617 = _1616 * _1616;
        float _3454 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1619 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1592 = (((cbLight._m0[_1600].x * 0.3183098733425140380859375) * _1618) * _1619) + _1573;
        _1594 = (((cbLight._m0[_1600].y * 0.3183098733425140380859375) * _1618) * _1619) + _1574;
        _1596 = (((cbLight._m0[_1600].z * 0.3183098733425140380859375) * _1618) * _1619) + _1575;
    }
    bool _1599 = _1579.y == 0u;
    float _1637;
    float _1639;
    float _1641;
    if (_1599)
    {
        _1637 = _1592;
        _1639 = _1594;
        _1641 = _1596;
    }
    else
    {
        uint _1745 = _1504 + 7u;
        float _1761 = (dot(vec3(cbLight._m0[_1504 + 3u].xyz), vec3(_325, _326, _327)) * 0.5) + 0.5;
        float _1762 = _1761 * _1761;
        float _3470 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1764 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1637 = (((cbLight._m0[_1745].x * 0.3183098733425140380859375) * _1763) * _1764) + _1592;
        _1639 = (((cbLight._m0[_1745].y * 0.3183098733425140380859375) * _1763) * _1764) + _1594;
        _1641 = (((cbLight._m0[_1745].z * 0.3183098733425140380859375) * _1763) * _1764) + _1596;
    }
    uint _1643 = _1504 + 8u;
    float _1649 = cbLight._m0[_1504].x + _404;
    float _1650 = cbLight._m0[_1504].y + _405;
    float _1651 = cbLight._m0[_1504].z + _406;
    float _1655 = inversesqrt(dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651)));
    float _1659 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1504].xyz));
    float _3486 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1662 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _1663 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _1664 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1649 * _1655, _1650 * _1655, _1651 * _1655));
    float _3508 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1675 = (exp2(log2(1.0 - (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1681 = (0.5 / ((_1662 + 9.9999999392252902907785028219223e-09) + _1663)) * _1662;
    float _3519 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) * 0.31831014156341552734375;
    uint _1697 = _1504 + 9u;
    float _1703 = cbLight._m0[_1545].x + _404;
    float _1704 = cbLight._m0[_1545].y + _405;
    float _1705 = cbLight._m0[_1545].z + _406;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1713 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1545].xyz));
    float _3530 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1703 * _1709, _1704 * _1709, _1705 * _1709));
    float _3541 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1726 = (exp2(log2(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1730 = (0.5 / ((_1716 + 9.9999999392252902907785028219223e-09) + _1663)) * _1716;
    float _3552 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1732 = (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.31831014156341552734375;
    float _1742 = (((_1726 * cbLight._m0[_1697].x) * _1732) * _1527) + ((((cbLight._m0[_1643].x * _1496) * _1675) * _1683) * _1541);
    float _1743 = (((_1726 * cbLight._m0[_1697].y) * _1732) * _1527) + ((((cbLight._m0[_1643].y * _1497) * _1675) * _1683) * _1541);
    float _1744 = (((_1726 * cbLight._m0[_1697].z) * _1732) * _1527) + ((((cbLight._m0[_1643].z * _1498) * _1675) * _1683) * _1541);
    float _1806;
    float _1808;
    float _1810;
    if (_1581)
    {
        _1806 = _1742;
        _1808 = _1743;
        _1810 = _1744;
    }
    else
    {
        uint _1812 = _1504 + 10u;
        uint _1818 = _1504 + 2u;
        float _1824 = cbLight._m0[_1818].x + _404;
        float _1825 = cbLight._m0[_1818].y + _405;
        float _1826 = cbLight._m0[_1818].z + _406;
        float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
        float _1834 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1818].xyz));
        float _3563 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1837 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1838 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1824 * _1830, _1825 * _1830, _1826 * _1830));
        float _3574 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = (exp2(log2(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1851 = (0.5 / ((_1837 + 9.9999999392252902907785028219223e-09) + _1663)) * _1837;
        float _3585 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1853 = (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 0.31831014156341552734375;
        float _1854 = isnan(1.0) ? _1519 : (isnan(_1519) ? 1.0 : min(_1519, 1.0));
        _1806 = (((_1847 * cbLight._m0[_1812].x) * _1853) * _1854) + _1742;
        _1808 = (((_1847 * cbLight._m0[_1812].y) * _1853) * _1854) + _1743;
        _1810 = (((_1847 * cbLight._m0[_1812].z) * _1853) * _1854) + _1744;
    }
    float _1889;
    float _1891;
    float _1893;
    if (_1599)
    {
        _1889 = _1806;
        _1891 = _1808;
        _1893 = _1810;
    }
    else
    {
        uint _1900 = _1504 + 11u;
        uint _1906 = _1504 + 3u;
        float _1912 = cbLight._m0[_1906].x + _404;
        float _1913 = cbLight._m0[_1906].y + _405;
        float _1914 = cbLight._m0[_1906].z + _406;
        float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
        float _1922 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1906].xyz));
        float _3601 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1925 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1926 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_1912 * _1918, _1913 * _1918, _1914 * _1918));
        float _3612 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1939 = (0.5 / ((_1925 + 9.9999999392252902907785028219223e-09) + _1663)) * _1925;
        float _3623 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1941 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.31831014156341552734375;
        float _1942 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1889 = (((_1935 * cbLight._m0[_1900].x) * _1941) * _1942) + _1806;
        _1891 = (((_1935 * cbLight._m0[_1900].y) * _1941) * _1942) + _1808;
        _1893 = (((_1935 * cbLight._m0[_1900].z) * _1941) * _1942) + _1810;
    }
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    float _2085;
    float _2087;
    if (_1502.y == 0u)
    {
        float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2018 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2017;
        float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2017;
        float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2017;
        uvec4 _2032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2033 = _2032.x;
        uint _2044 = uint((float(_2032.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2033))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2033)));
        float _2054 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2055 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        uint _2058 = uint(isnan(14.0) ? _2055 : (isnan(_2055) ? 14.0 : min(_2055, 14.0)));
        uvec4 _2063 = texelFetch(g_lightClusterGridBuffer, int(((_2058 << 2u) + (_2044 << 6u)) >> 2u));
        uint _2064 = _2063.x;
        uint _2065 = _2032.z;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        if (((((1u << ((_2065 >> 4u) & 15u)) + 4294967295u) & _2064) == 0u) || ((_2065 & 240u) == 0u))
        {
            _2194 = 0.0;
            _2196 = 0.0;
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
        }
        else
        {
            float _2195;
            float _2197;
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            float _2348 = 0.0;
            float _2349 = 0.0;
            float _2350 = 0.0;
            uint _2351 = 0u;
            uint _2360;
            bool _2361;
            for (;;)
            {
                _2360 = texelFetch(g_lightClassification, int((((_2058 << 5u) + (_2044 << 9u)) + (_2351 << 2u)) >> 2u)).x;
                _2361 = _2360 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2361)
                {
                    frontier_phi_61_pred = _2345;
                    frontier_phi_61_pred_1 = _2350;
                    frontier_phi_61_pred_2 = _2349;
                    frontier_phi_61_pred_3 = _2348;
                    frontier_phi_61_pred_4 = _2347;
                    frontier_phi_61_pred_5 = _2346;
                }
                else
                {
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    uint _2475;
                    _2469 = _2345;
                    _2470 = _2346;
                    _2471 = _2347;
                    _2472 = _2348;
                    _2473 = _2349;
                    _2474 = _2350;
                    _2475 = _2360;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    for (;;)
                    {
                        uint _2479 = uint(findLSB(_2475)) + (_2351 << 5u);
                        uint _2476 = (_2475 + 4294967295u) & _2475;
                        uint _2481 = _2479 * 48u;
                        vec4 _2495 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2481)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2481 + 3u)).x));
                        uint _2501 = (_2479 * 48u) + 4u;
                        vec4 _2514 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2501)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 3u)).x));
                        uint _2520 = (_2479 * 48u) + 8u;
                        vec3 _2531 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2520)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 2u)).x));
                        float _2535 = _2495.x - _2018;
                        float _2536 = _2495.y - _2019;
                        float _2537 = _2495.z - _2020;
                        float _2538 = dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537));
                        float _2541 = inversesqrt(_2538);
                        float _2550 = 1.0 - (_2538 * _2495.w);
                        float _3649 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
                        float _2551 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                        float _2552 = sqrt(_2538) * _2514.w;
                        float _2555 = 1.39999997615814208984375 / (_2552 + 1.39999997615814208984375);
                        float _2556 = _2555 * _2555;
                        float _2559 = ((1.0 - _2556) * dot(vec3(_434, _437, _440), vec3(_2541 * _2535, _2541 * _2536, _2541 * _2537))) + _2556;
                        float _2562 = _2552 * _2552;
                        float _2566 = ((isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))) * _2551) / ((_2562 * 0.699999988079071044921875) + 1.0);
                        float _2570 = (-0.0) - _2018;
                        float _2571 = (-0.0) - _2019;
                        float _2572 = (-0.0) - _2020;
                        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
                        float _2580 = dot(vec3(_434, _437, _440), vec3(_2576 * _2570, _2576 * _2571, _2576 * _2572));
                        float _3665 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _3676 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2584 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2588 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2584)) * _2584;
                        float _3687 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2597 = (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2562 * 2.1991131305694580078125) + 3.141590118408203125)) * _2551;
                        _2404 = (_2566 * _2514.x) + _2472;
                        _2405 = (_2566 * _2514.y) + _2473;
                        _2406 = (_2566 * _2514.z) + _2474;
                        _2401 = (_2597 * _2531.x) + _2469;
                        _2402 = (_2597 * _2531.y) + _2470;
                        _2403 = (_2597 * _2531.z) + _2471;
                        if (_2476 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2469 = _2401;
                            _2470 = _2402;
                            _2471 = _2403;
                            _2472 = _2404;
                            _2473 = _2405;
                            _2474 = _2406;
                            _2475 = _2476;
                        }
                    }
                    frontier_phi_61_pred = _2401;
                    frontier_phi_61_pred_1 = _2406;
                    frontier_phi_61_pred_2 = _2405;
                    frontier_phi_61_pred_3 = _2404;
                    frontier_phi_61_pred_4 = _2403;
                    frontier_phi_61_pred_5 = _2402;
                }
                _2195 = frontier_phi_61_pred;
                _2205 = frontier_phi_61_pred_1;
                _2203 = frontier_phi_61_pred_2;
                _2201 = frontier_phi_61_pred_3;
                _2199 = frontier_phi_61_pred_4;
                _2197 = frontier_phi_61_pred_5;
                uint _2352 = _2351 + 1u;
                if (_2352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2345 = _2195;
                    _2346 = _2197;
                    _2347 = _2199;
                    _2348 = _2201;
                    _2349 = _2203;
                    _2350 = _2205;
                    _2351 = _2352;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2194 = _2195;
            _2196 = _2197;
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
        }
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.z;
        uint _2211 = (_2209 >> 8u) & 15u;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((4294967295u << _2211) & _2064) == 0u)
        {
            _2316 = _2194;
            _2318 = _2196;
            _2320 = _2198;
            _2322 = _2200;
            _2324 = _2202;
            _2326 = _2204;
        }
        else
        {
            float _2341 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2211 < ((_2209 >> 12u) & 15u))
            {
                float _2317;
                float _2319;
                float _2321;
                float _2323;
                float _2325;
                float _2327;
                float _2452 = _2194;
                float _2453 = _2196;
                float _2454 = _2198;
                float _2455 = _2200;
                float _2456 = _2202;
                float _2457 = _2204;
                uint _2458 = _2211;
                uint _2467;
                bool _2468;
                for (;;)
                {
                    _2467 = texelFetch(g_lightClassification, int((((_2058 << 5u) + (_2044 << 9u)) + (_2458 << 2u)) >> 2u)).x;
                    _2468 = _2467 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2468)
                    {
                        frontier_phi_67_pred = _2455;
                        frontier_phi_67_pred_1 = _2456;
                        frontier_phi_67_pred_2 = _2457;
                        frontier_phi_67_pred_3 = _2454;
                        frontier_phi_67_pred_4 = _2453;
                        frontier_phi_67_pred_5 = _2452;
                    }
                    else
                    {
                        float _2602;
                        float _2603;
                        float _2604;
                        float _2605;
                        float _2606;
                        float _2607;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2615 = _2452;
                        float _2616 = _2453;
                        float _2617 = _2454;
                        float _2618 = _2455;
                        float _2619 = _2456;
                        float _2620 = _2457;
                        uint _2621 = _2467;
                        uint _2622;
                        vec4 _2647;
                        float _2648;
                        vec4 _2663;
                        vec3 _2675;
                        vec4 _2690;
                        vec4 _2706;
                        float _2753;
                        bool _2754;
                        for (;;)
                        {
                            uint _2632 = ((_2458 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2621));
                            _2622 = (_2621 + 4294967295u) & _2621;
                            uint _2634 = _2632 * 40u;
                            _2647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 3u)).x));
                            _2648 = _2647.w;
                            uint _2650 = (_2632 * 40u) + 4u;
                            _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            uint _2665 = (_2632 * 40u) + 8u;
                            _2675 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2665 + 2u)).x));
                            uint _2677 = (_2632 * 40u) + 16u;
                            _2690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2677 + 3u)).x));
                            uint _2693 = (_2632 * 40u) + 20u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            uint _2709 = (_2632 * 40u) + 24u;
                            vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2728 = (_2632 * 40u) + 28u;
                            vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2728 + 3u)).x));
                            _2753 = fma(_2020, _2741.z, fma(_2019, _2741.y, _2741.x * _2018)) + _2741.w;
                            _2754 = !((fma(_2020, _2722.z, fma(_2019, _2722.y, _2722.x * _2018)) + _2722.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2754)
                            {
                                float _2781 = _2647.x - _2018;
                                float _2782 = _2647.y - _2019;
                                float _2783 = _2647.z - _2020;
                                float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                                float _2787 = inversesqrt(_2784);
                                float _2788 = _2787 * _2781;
                                float _2789 = _2787 * _2782;
                                float _2790 = _2787 * _2783;
                                float _2794 = 1.0 - (_2784 / (_2648 * _2648));
                                float _3698 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2795 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                                float _2799 = sqrt(_2784) * _2663.w;
                                float _2801 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                                float _2802 = _2801 * _2801;
                                float _2803 = 1.0 - _2802;
                                float _2805 = (_2803 * dot(vec3(_2788, _2789, _2790), vec3(_434, _437, _440))) + _2802;
                                float _2808 = _2799 * _2799;
                                float _2812 = (fma(_2020, _2690.z, fma(_2019, _2690.y, _2690.x * _2018)) + _2690.w) / _2753;
                                float _2813 = (fma(_2020, _2706.z, fma(_2019, _2706.y, _2706.x * _2018)) + _2706.w) / _2753;
                                float _2817 = 1.0 - dot(vec2(_2812, _2813), vec2(_2812, _2813));
                                float _3714 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                                float _2818 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                                float _2819 = _2818 * (((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2795) / ((_2808 * 0.699999988079071044921875) + 1.0));
                                float _2829 = dot(vec3(_434, _437, _440), vec3((-0.0) - (_2018 * _2341), (-0.0) - (_2019 * _2341), (-0.0) - (_2020 * _2341)));
                                float _3725 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                                float _2837 = (_2803 * dot(vec3(_434, _437, _440), vec3(_2788, _2789, _2790))) + _2802;
                                float _3736 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                                float _2838 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2842 = (0.5 / (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) + 9.9999999392252902907785028219223e-09) + _2838)) * _2838;
                                float _3747 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2849 = (_2818 * _2795) * (((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 3.1415927410125732421875) / ((_2808 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2849 * _2675.x;
                                frontier_phi_73_pred_1 = _2849 * _2675.y;
                                frontier_phi_73_pred_2 = _2819 * _2663.z;
                                frontier_phi_73_pred_3 = _2819 * _2663.y;
                                frontier_phi_73_pred_4 = _2819 * _2663.x;
                                frontier_phi_73_pred_5 = _2849 * _2675.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2853 = frontier_phi_73_pred;
                            _2854 = frontier_phi_73_pred_1;
                            _2858 = frontier_phi_73_pred_2;
                            _2857 = frontier_phi_73_pred_3;
                            _2856 = frontier_phi_73_pred_4;
                            _2855 = frontier_phi_73_pred_5;
                            _2605 = _2856 + _2618;
                            _2606 = _2857 + _2619;
                            _2607 = _2858 + _2620;
                            _2602 = _2853 + _2615;
                            _2603 = _2854 + _2616;
                            _2604 = _2855 + _2617;
                            if (_2622 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2615 = _2602;
                                _2616 = _2603;
                                _2617 = _2604;
                                _2618 = _2605;
                                _2619 = _2606;
                                _2620 = _2607;
                                _2621 = _2622;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2605;
                        frontier_phi_67_pred_1 = _2606;
                        frontier_phi_67_pred_2 = _2607;
                        frontier_phi_67_pred_3 = _2604;
                        frontier_phi_67_pred_4 = _2603;
                        frontier_phi_67_pred_5 = _2602;
                    }
                    _2323 = frontier_phi_67_pred;
                    _2325 = frontier_phi_67_pred_1;
                    _2327 = frontier_phi_67_pred_2;
                    _2321 = frontier_phi_67_pred_3;
                    _2319 = frontier_phi_67_pred_4;
                    _2317 = frontier_phi_67_pred_5;
                    uint _2459 = _2458 + 1u;
                    if (_2459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2452 = _2317;
                        _2453 = _2319;
                        _2454 = _2321;
                        _2455 = _2323;
                        _2456 = _2325;
                        _2457 = _2327;
                        _2458 = _2459;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2325;
                frontier_phi_55_56_ladder_1 = _2327;
                frontier_phi_55_56_ladder_2 = _2323;
                frontier_phi_55_56_ladder_3 = _2321;
                frontier_phi_55_56_ladder_4 = _2319;
                frontier_phi_55_56_ladder_5 = _2317;
            }
            else
            {
                frontier_phi_55_56_ladder = _2202;
                frontier_phi_55_56_ladder_1 = _2204;
                frontier_phi_55_56_ladder_2 = _2200;
                frontier_phi_55_56_ladder_3 = _2198;
                frontier_phi_55_56_ladder_4 = _2196;
                frontier_phi_55_56_ladder_5 = _2194;
            }
            _2316 = frontier_phi_55_56_ladder_5;
            _2318 = frontier_phi_55_56_ladder_4;
            _2320 = frontier_phi_55_56_ladder_3;
            _2322 = frontier_phi_55_56_ladder_2;
            _2324 = frontier_phi_55_56_ladder;
            _2326 = frontier_phi_55_56_ladder_1;
        }
        float _2331 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2077 = (_2331 * _2322) + _1637;
        _2079 = (_2331 * _2324) + _1639;
        _2081 = (_2331 * _2326) + _1641;
        _2083 = ((_2316 * 0.039999999105930328369140625) * _2331) + _1889;
        _2085 = ((_2318 * 0.039999999105930328369140625) * _2331) + _1891;
        _2087 = ((_2320 * 0.039999999105930328369140625) * _2331) + _1893;
    }
    else
    {
        _2077 = _1637;
        _2079 = _1639;
        _2081 = _1641;
        _2083 = _1889;
        _2085 = _1891;
        _2087 = _1893;
    }
    uint _2093 = _454 + uint(cbMatDynParam._m0[0u].w);
    float _2099 = (_317 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _282.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _253.x))) * cbInstanceData._m0[_2093].x;
    float _2100 = (_317 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _282.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _253.y))) * cbInstanceData._m0[_2093].y;
    float _2101 = (_317 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _282.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _253.z))) * cbInstanceData._m0[_2093].z;
    float _3763 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3774 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3785 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2118 = (((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_2077 + ((isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))) * _478))) + ((_2083 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1256)) * cbPerFrame._m0[3u].x)) + _2099;
    float _2120 = (_2100 + ((_2085 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1256)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_2079 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _478)));
    float _2122 = (_2101 + ((_2087 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1256)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_2081 + ((isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))) * _478)));
    float _3811 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2135 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    uint _2136 = _453 + 6u;
    float _2144 = _412 / cbSceneParam._m0[86u].x;
    float _2145 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2161 = _2159.x;
    float _2162 = _2159.y;
    float _2163 = _2159.z;
    float _2164 = _2159.w;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2219 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2220 = _2219 / _346;
        float _2231 = _2220 * _397;
        float _2232 = _398 * _2220;
        float _2233 = (-0.0) - _2232;
        float _2235 = _2220 * _399;
        float _2237 = (cbSceneParam._m0[77u].w * _2233) / _2219;
        float _2238 = _2237 + cbSceneParam._m0[79u].w;
        float _2239 = cbSceneParam._m0[79u].w - _2232;
        float _2245 = sqrt(((_2231 * _2231) + (_2232 * _2232)) + (_2235 * _2235));
        float _2248 = (1.0 - (cbSceneParam._m0[77u].w / _2219)) * _2245;
        float _2253 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2255 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2414;
        if (abs((_2233 - _2237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2414 = ((((_2238 > 0.0) ? exp2(_2253 * _2238) : (2.0 - exp2(_2255 * _2238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2248;
        }
        else
        {
            float _2374 = 1.0 / cbSceneParam._m0[80u].x;
            float _2375 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : max(_2238, _2239));
            float _2376 = isnan(_2239) ? _2238 : (isnan(_2238) ? _2239 : min(_2238, _2239));
            float _2385 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : min(_2375, 0.0));
            float _2386 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : min(_2376, 0.0));
            _2414 = ((abs(_2245 / _2233) * cbSceneParam._m0[80u].y) * ((((_2385 - _2386) * 2.0) - ((exp2(_2253 * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0)))) - exp2(_2253 * (isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0))))) * _2374)) - ((exp2(_2255 * _2385) - exp2(_2255 * _2386)) * _2374))) + (_2248 * cbSceneParam._m0[80u].z);
        }
        vec4 _2416 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2144, _2145, 1.0), 0.0);
        float _2425 = exp2((_2414 * (-1.44269502162933349609375)) * (1.0 - _2416.w));
        float _2426 = log2(_2425);
        float _2442 = log2(_2164);
        _2257 = (exp2(_2442 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].x)) * _2416.x) / cbSceneParam._m0[78u].x)) + _2161;
        _2259 = (exp2(_2442 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].y)) * _2416.y) / cbSceneParam._m0[78u].y)) + _2162;
        _2261 = (exp2(_2442 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].z)) * _2416.z) / cbSceneParam._m0[78u].z)) + _2163;
        _2263 = _2425 * _2164;
    }
    else
    {
        _2257 = _2161;
        _2259 = _2162;
        _2261 = _2163;
        _2263 = _2164;
    }
    float _2275 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2276 = _2275 == 3.0;
    float _2277 = log2(_2263);
    float _2281 = exp2(_2277 * cbSceneParam._m0[78u].x);
    float _2282 = exp2(_2277 * cbSceneParam._m0[78u].y);
    float _2283 = exp2(_2277 * cbSceneParam._m0[78u].z);
    float _2284 = _2281 * (isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)));
    float _2285 = _2282 * (isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0)));
    float _2286 = _2283 * (isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0)));
    float _2295 = (_2275 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2295 * (_2276 ? _2284 : (_2284 + (cbSceneParam._m0[72u].w * _2257)));
    SV_Target.y = _2295 * (_2276 ? _2285 : (_2285 + (cbSceneParam._m0[72u].w * _2259)));
    SV_Target.z = _2295 * (_2276 ? _2286 : (_2286 + (cbSceneParam._m0[72u].w * _2261)));
    SV_Target.w = cbInstanceData._m0[_2136].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2099) * _2135) * _2281) * _2295;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2100) * _2135) * _2282) * _2295;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2101) * _2135) * _2283) * _2295;
    SV_Target_1.w = cbInstanceData._m0[_2136].w;
}


