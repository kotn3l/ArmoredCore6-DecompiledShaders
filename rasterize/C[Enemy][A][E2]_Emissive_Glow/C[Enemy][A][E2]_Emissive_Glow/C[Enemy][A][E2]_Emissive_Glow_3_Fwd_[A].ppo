#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _876;
float _3072;
float _3073;
float _3074;
float _3075;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    vec4 _197 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _223 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _231 = (_223.x * cbMtdParam._m0[12u].x) + (_197.x * cbMtdParam._m0[9u].x);
    float _232 = (_223.y * cbMtdParam._m0[12u].y) + (_197.y * cbMtdParam._m0[9u].y);
    float _233 = (_223.z * cbMtdParam._m0[12u].z) + (_197.z * cbMtdParam._m0[9u].z);
    vec4 _267 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[15u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[15u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[13u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    vec4 _296 = texture(sampler2D(C_Enemy_A_E2_Emissive_Glow_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _321 = abs((fract(cbMtdParam._m0[14u].y * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3084 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    float _331 = (((_323 * _323) * (3.0 - (_323 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[13u].w;
    float _338 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _339 = _338 * _176;
    float _340 = _338 * _177;
    float _341 = _338 * _178;
    float _3095 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3106 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3117 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _360 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _411 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _401);
    float _412 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _401);
    float _413 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _401);
    float _417 = inversesqrt(dot(vec3(_411, _412, _413), vec3(_411, _412, _413)));
    float _418 = _411 * _417;
    float _419 = _412 * _417;
    float _420 = _413 * _417;
    vec4 _425 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _427 = _425.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _555 = sqrt(((_411 * _411) + (_412 * _412)) + (_413 * _413));
        float _561 = (cbMatDynParam._m0[5u].x * _555) + cbMatDynParam._m0[5u].y;
        float _3128 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        float _562 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _566 = (cbMatDynParam._m0[5u].z * _555) + cbMatDynParam._m0[5u].w;
        float _3139 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) - _562)) + _562) < ((_427 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _460 = fma(_341, cbSceneParam._m0[5u].z, fma(_340, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _339));
    float _463 = fma(_341, cbSceneParam._m0[6u].z, fma(_340, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _339));
    float _466 = fma(_341, cbSceneParam._m0[7u].z, fma(_340, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _339));
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _480 = _479 + 9u;
    uint _481 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3150 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _504 = _501.x * TEXCOORD_4;
    float _505 = dot(vec3(_339, _340, _341), vec3(_418, _419, _420));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _339) - _418;
    float _513 = (_508 * _340) - _419;
    float _514 = (_508 * _341) - _420;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _875;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _600 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _604 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _608 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _633 = _536 + _339;
        float _634 = _540 + _340;
        float _635 = _544 + _341;
        float _645 = fma(_635, cbModelParam._m0[26u].z, fma(_634, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633)) - _600;
        float _646 = fma(_635, cbModelParam._m0[27u].z, fma(_634, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633)) - _604;
        float _647 = fma(_635, cbModelParam._m0[28u].z, fma(_634, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633)) - _608;
        float _651 = inversesqrt(dot(vec3(_645, _646, _647), vec3(_645, _646, _647)));
        float _664 = ((_651 * _645) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_600 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_651 * _646) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_604 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_651 * _647) / cbModelParam._m0[34u].z) + ((((((_608 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_664, _665, _666), 0.0);
        float _703 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_669.x + (-0.5));
        float _705 = _703 * (_669.y + (-0.5));
        float _706 = _703 * (_669.z + (-0.5));
        float _713 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_676.x + (-0.5));
        float _715 = _713 * (_676.y + (-0.5));
        float _716 = _713 * (_676.z + (-0.5));
        float _723 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_683.x + (-0.5));
        float _725 = _723 * (_683.y + (-0.5));
        float _726 = _723 * (_683.z + (-0.5));
        float _733 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_690.x + (-0.5));
        float _735 = _733 * (_690.y + (-0.5));
        float _736 = _733 * (_690.z + (-0.5));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = _704 * 0.5;
        float _741 = _714 * 0.5;
        float _742 = _724 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _757 = (dot(vec3(_339, _340, _341), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _767 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3220 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_769 + 1.0))) + _774) * _737;
        float _784 = _705 * 0.5;
        float _785 = _715 * 0.5;
        float _786 = _725 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_339, _340, _341), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3253 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_811 + 1.0))) + _816) * _738;
        float _826 = _706 * 0.5;
        float _827 = _716 * 0.5;
        float _828 = _726 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_339, _340, _341), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3286 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_853 + 1.0))) + _858) * _739;
        _875 = _706;
        _877 = _705;
        _878 = _704;
        _879 = _716;
        _880 = _715;
        _881 = _714;
        _882 = _726;
        _883 = _725;
        _884 = _724;
        _885 = _739;
        _886 = _738;
        _887 = _737;
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
    }
    else
    {
        _875 = _876;
        _877 = _876;
        _878 = _876;
        _879 = _876;
        _880 = _876;
        _881 = _876;
        _882 = _876;
        _883 = _876;
        _884 = _876;
        _885 = _876;
        _886 = _876;
        _887 = _876;
        _888 = 0.0;
        _889 = 0.0;
        _890 = 0.0;
    }
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _919 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _923 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _927 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _950 = _536 + _339;
        float _951 = _540 + _340;
        float _952 = _544 + _341;
        float _962 = fma(_952, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950)) - _919;
        float _963 = fma(_952, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950)) - _923;
        float _964 = fma(_952, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950)) - _927;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_919 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_923 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[35u].z) + ((((((_927 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1018 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_985.x + (-0.5));
        float _1020 = _1018 * (_985.y + (-0.5));
        float _1021 = _1018 * (_985.z + (-0.5));
        float _1028 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_992.x + (-0.5));
        float _1030 = _1028 * (_992.y + (-0.5));
        float _1031 = _1028 * (_992.z + (-0.5));
        float _1038 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_999.x + (-0.5));
        float _1040 = _1038 * (_999.y + (-0.5));
        float _1041 = _1038 * (_999.z + (-0.5));
        float _1048 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1006.x + (-0.5));
        float _1050 = _1048 * (_1006.y + (-0.5));
        float _1051 = _1048 * (_1006.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_339, _340, _341), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3349 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1082 + 1.0))) + _1087) * _1052;
        float _1097 = _1020 * 0.5;
        float _1098 = _1030 * 0.5;
        float _1099 = _1040 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_339, _340, _341), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3382 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1124 + 1.0))) + _1129) * _1053;
        float _1139 = _1021 * 0.5;
        float _1140 = _1031 * 0.5;
        float _1141 = _1041 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_339, _340, _341), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3415 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1166 + 1.0))) + _1171) * _1054;
        _1188 = _1021;
        _1189 = _1020;
        _1190 = _1019;
        _1191 = _1031;
        _1192 = _1030;
        _1193 = _1029;
        _1194 = _1041;
        _1195 = _1040;
        _1196 = _1039;
        _1197 = _1054;
        _1198 = _1053;
        _1199 = _1052;
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _876;
        _1189 = _876;
        _1190 = _876;
        _1191 = _876;
        _1192 = _876;
        _1193 = _876;
        _1194 = _876;
        _1195 = _876;
        _1196 = _876;
        _1197 = _876;
        _1198 = _876;
        _1199 = _876;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _888)) + _888;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1235 = fma(_1214, cbSceneParam._m0[89u].z, fma(_1213, cbSceneParam._m0[89u].y, _1212 * cbSceneParam._m0[89u].x));
    float _1238 = fma(_1214, cbSceneParam._m0[90u].z, fma(_1213, cbSceneParam._m0[90u].y, _1212 * cbSceneParam._m0[90u].x));
    float _1241 = fma(_1214, cbSceneParam._m0[91u].z, fma(_1213, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1212));
    float _1256 = _512 * 0.5;
    float _1257 = _513 * 0.5;
    float _1258 = _514 * 0.5;
    float _1259 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1262 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1265 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1299;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1272 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_875, _879, _882, _885));
        float _1276 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_877, _880, _883, _886));
        float _1280 = dot(vec4(_1256, _1257, _1258, 1.0), vec4(_878, _881, _884, _887));
        float _1287 = dot(vec4(cbModelParam._m0[39u]), vec4(_1256, _1257, _1258, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1310;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1301 = dot(vec4(cbModelParam._m0[40u]), vec4(_1256, _1257, _1258, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1314 = (_1310 * cbModelParam._m0[1u].x) + (_1299 * (1.0 - cbModelParam._m0[1u].x));
    float _1323 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1403;
    float _1405;
    float _1407;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1370 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1374 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1378 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1381 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1384 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1387 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1413;
        if (_1381 > 0.0)
        {
            _1413 = abs((1.0 - _1370) / _1381);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1370 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1413 = frontier_phi_17_15_ladder;
        }
        float _1618;
        if (_1384 > 0.0)
        {
            _1618 = abs((1.0 - _1374) / _1384);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1374 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1618 = frontier_phi_26_22_ladder;
        }
        float _1807;
        if (_1387 > 0.0)
        {
            _1807 = abs((1.0 - _1378) / _1387);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1378 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1807 = frontier_phi_38_33_ladder;
        }
        float _1809 = isnan(_1618) ? _1413 : (isnan(_1413) ? _1618 : min(_1413, _1618));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1381) + _1370;
        float _1815 = (_1810 * _1384) + _1374;
        float _1816 = (_1810 * _1387) + _1378;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1817;
        float _1821 = _1817 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 > _1821) || ((_1815 < _1819) || ((_1814 < _1819) || (_1814 > _1821))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1816, cbModelParam._m0[9u].z, fma(_1815, cbModelParam._m0[9u].y, _1814 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1816, cbModelParam._m0[10u].z, fma(_1815, cbModelParam._m0[10u].y, _1814 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1816, cbModelParam._m0[11u].z, fma(_1815, cbModelParam._m0[11u].y, _1814 * cbModelParam._m0[11u].x))), _1323);
            frontier_phi_16_38_ladder = _1913.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1913.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1913.x * cbModelParam._m0[1u].y;
        }
        _1403 = frontier_phi_16_38_ladder_2;
        _1405 = frontier_phi_16_38_ladder_1;
        _1407 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1323);
        _1403 = _1391.x * cbModelParam._m0[1u].y;
        _1405 = _1391.y * cbModelParam._m0[1u].y;
        _1407 = _1391.z * cbModelParam._m0[1u].y;
    }
    float _1410 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1466 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1470 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1474 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1477 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1480 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1483 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1623;
        if (_1477 > 0.0)
        {
            _1623 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1623 = frontier_phi_28_24_ladder;
        }
        float _1834;
        if (_1480 > 0.0)
        {
            _1834 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1834 = frontier_phi_40_35_ladder;
        }
        float _1985;
        if (_1483 > 0.0)
        {
            _1985 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1985 = frontier_phi_49_46_ladder;
        }
        float _1987 = isnan(_1834) ? _1623 : (isnan(_1623) ? _1834 : min(_1623, _1834));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1477) + _1466;
        float _1993 = (_1988 * _1480) + _1470;
        float _1994 = (_1988 * _1483) + _1474;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1996 = (-1.0) - _1995;
        float _1998 = _1995 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1994 > _1998) || ((_1994 < _1996) || ((_1993 > _1998) || ((_1993 < _1996) || ((_1992 < _1996) || (_1992 > _1998))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1994, cbModelParam._m0[17u].z, fma(_1993, cbModelParam._m0[17u].y, _1992 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1994, cbModelParam._m0[18u].z, fma(_1993, cbModelParam._m0[18u].y, _1992 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1994, cbModelParam._m0[19u].z, fma(_1993, cbModelParam._m0[19u].y, _1992 * cbModelParam._m0[19u].x))), _1410);
            frontier_phi_25_49_ladder = _2222.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2222.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2222.x * cbModelParam._m0[1u].z;
        }
        _1502 = frontier_phi_25_49_ladder_2;
        _1504 = frontier_phi_25_49_ladder_1;
        _1506 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1410);
        _1502 = _1486.x * cbModelParam._m0[1u].z;
        _1504 = _1486.y * cbModelParam._m0[1u].z;
        _1506 = _1486.z * cbModelParam._m0[1u].z;
    }
    float _1518 = _504 * 0.01200000010430812835693359375;
    float _1520 = _1518 * ((cbModelParam._m0[1u].w * (_1502 - _1403)) + _1403);
    float _1521 = _1518 * ((cbModelParam._m0[1u].w * (_1504 - _1405)) + _1405);
    float _1522 = _1518 * ((cbModelParam._m0[1u].w * (_1506 - _1407)) + _1407);
    float _1525 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, _1520 * cbSceneParam._m0[91u].x));
    uvec4 _1541 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1543 = _1541.x * 14u;
    uint _1544 = _1543 + 13u;
    float _1551 = _504 + (-1.0);
    float _1556 = (cbLight._m0[_1544].x * _1551) + 1.0;
    float _1557 = (cbLight._m0[_1544].y * _1551) + 1.0;
    float _1558 = (cbLight._m0[_1544].z * _1551) + 1.0;
    float _1559 = (cbLight._m0[_1544].w * _1551) + 1.0;
    uint _1560 = _1543 + 5u;
    float _1566 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
    uint _1570 = _1543 + 4u;
    float _1577 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1581 = _1543 | 1u;
    float _1592 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_339, _340, _341));
    float _1595 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_339, _340, _341));
    float _3551 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _3562 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1600 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.3183098733425140380859375;
    float _1602 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.3183098733425140380859375;
    float _1609 = ((cbLight._m0[_1560].x * _1566) * _1602) + ((cbLight._m0[_1570].x * _1577) * _1600);
    float _1610 = ((_1566 * cbLight._m0[_1560].y) * _1602) + ((_1577 * cbLight._m0[_1570].y) * _1600);
    float _1611 = ((_1566 * cbLight._m0[_1560].z) * _1602) + ((_1577 * cbLight._m0[_1570].z) * _1600);
    uvec4 _1615 = floatBitsToUint(cbLight._m0[_1543 + 12u]);
    bool _1617 = _1615.x == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1617)
    {
        _1628 = _1609;
        _1630 = _1610;
        _1632 = _1611;
    }
    else
    {
        uint _1636 = _1543 + 6u;
        float _1652 = (dot(vec3(cbLight._m0[_1543 + 2u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1653 = _1652 * _1652;
        float _3573 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1655 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1628 = (((cbLight._m0[_1636].x * 0.3183098733425140380859375) * _1654) * _1655) + _1609;
        _1630 = (((cbLight._m0[_1636].y * 0.3183098733425140380859375) * _1654) * _1655) + _1610;
        _1632 = (((cbLight._m0[_1636].z * 0.3183098733425140380859375) * _1654) * _1655) + _1611;
    }
    bool _1635 = _1615.y == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1635)
    {
        _1673 = _1628;
        _1675 = _1630;
        _1677 = _1632;
    }
    else
    {
        uint _1778 = _1543 + 7u;
        float _1794 = (dot(vec3(cbLight._m0[_1543 + 3u].xyz), vec3(_339, _340, _341)) * 0.5) + 0.5;
        float _1795 = _1794 * _1794;
        float _3589 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1797 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1673 = (((cbLight._m0[_1778].x * 0.3183098733425140380859375) * _1796) * _1797) + _1628;
        _1675 = (((cbLight._m0[_1778].y * 0.3183098733425140380859375) * _1796) * _1797) + _1630;
        _1677 = (((cbLight._m0[_1778].z * 0.3183098733425140380859375) * _1796) * _1797) + _1632;
    }
    uint _1679 = _1543 + 8u;
    float _1685 = cbLight._m0[_1543].x + _418;
    float _1686 = cbLight._m0[_1543].y + _419;
    float _1687 = cbLight._m0[_1543].z + _420;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1695 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1543].xyz));
    float _3605 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1699 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _1700 = dot(vec3(cbLight._m0[_1543].xyz), vec3(_1685 * _1691, _1686 * _1691, _1687 * _1691));
    float _3627 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1711 = (exp2(log2(1.0 - (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1717 = (0.5 / ((_1698 + 9.9999999392252902907785028219223e-09) + _1699)) * _1698;
    float _3638 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1719 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.31831014156341552734375;
    uint _1730 = _1543 + 9u;
    float _1736 = cbLight._m0[_1581].x + _418;
    float _1737 = cbLight._m0[_1581].y + _419;
    float _1738 = cbLight._m0[_1581].z + _420;
    float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
    float _1746 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1581].xyz));
    float _3649 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1736 * _1742, _1737 * _1742, _1738 * _1742));
    float _3660 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1763 = (0.5 / ((_1749 + 9.9999999392252902907785028219223e-09) + _1699)) * _1749;
    float _3671 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.31831014156341552734375;
    float _1775 = (((_1759 * cbLight._m0[_1730].x) * _1765) * _1566) + (((_1711 * cbLight._m0[_1679].x) * _1719) * _1577);
    float _1776 = (((_1759 * cbLight._m0[_1730].y) * _1765) * _1566) + (((_1711 * cbLight._m0[_1679].y) * _1719) * _1577);
    float _1777 = (((_1759 * cbLight._m0[_1730].z) * _1765) * _1566) + (((_1711 * cbLight._m0[_1679].z) * _1719) * _1577);
    float _1839;
    float _1841;
    float _1843;
    if (_1617)
    {
        _1839 = _1775;
        _1841 = _1776;
        _1843 = _1777;
    }
    else
    {
        uint _1845 = _1543 + 10u;
        uint _1851 = _1543 + 2u;
        float _1857 = cbLight._m0[_1851].x + _418;
        float _1858 = cbLight._m0[_1851].y + _419;
        float _1859 = cbLight._m0[_1851].z + _420;
        float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
        float _1867 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1851].xyz));
        float _3682 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1870 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1871 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_1857 * _1863, _1858 * _1863, _1859 * _1863));
        float _3693 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1884 = (0.5 / ((_1870 + 9.9999999392252902907785028219223e-09) + _1699)) * _1870;
        float _3704 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1886 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.31831014156341552734375;
        float _1887 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1839 = (((_1880 * cbLight._m0[_1845].x) * _1886) * _1887) + _1775;
        _1841 = (((_1880 * cbLight._m0[_1845].y) * _1886) * _1887) + _1776;
        _1843 = (((_1880 * cbLight._m0[_1845].z) * _1886) * _1887) + _1777;
    }
    float _1922;
    float _1924;
    float _1926;
    if (_1635)
    {
        _1922 = _1839;
        _1924 = _1841;
        _1926 = _1843;
    }
    else
    {
        uint _1933 = _1543 + 11u;
        uint _1939 = _1543 + 3u;
        float _1945 = cbLight._m0[_1939].x + _418;
        float _1946 = cbLight._m0[_1939].y + _419;
        float _1947 = cbLight._m0[_1939].z + _420;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1955 = dot(vec3(_339, _340, _341), vec3(cbLight._m0[_1939].xyz));
        float _3720 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1945 * _1951, _1946 * _1951, _1947 * _1951));
        float _3731 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1972 = (0.5 / ((_1958 + 9.9999999392252902907785028219223e-09) + _1699)) * _1958;
        float _3742 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1974 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.31831014156341552734375;
        float _1975 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _1922 = (((_1968 * cbLight._m0[_1933].x) * _1974) * _1975) + _1839;
        _1924 = (((_1968 * cbLight._m0[_1933].y) * _1974) * _1975) + _1841;
        _1926 = (((_1968 * cbLight._m0[_1933].z) * _1974) * _1975) + _1843;
    }
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    float _2118;
    float _2120;
    if (_1541.y == 0u)
    {
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2050;
        float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2050;
        float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2050;
        uvec4 _2065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2066 = _2065.x;
        uint _2077 = uint((float(_2065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2066))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2066)));
        float _2087 = (log2(_2053 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2088 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        uint _2091 = uint(isnan(14.0) ? _2088 : (isnan(_2088) ? 14.0 : min(_2088, 14.0)));
        uvec4 _2096 = texelFetch(g_lightClusterGridBuffer, int(((_2091 << 2u) + (_2077 << 6u)) >> 2u));
        uint _2097 = _2096.x;
        uint _2098 = _2065.z;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        if (((((1u << ((_2098 >> 4u) & 15u)) + 4294967295u) & _2097) == 0u) || ((_2098 & 240u) == 0u))
        {
            _2227 = 0.0;
            _2229 = 0.0;
            _2231 = 0.0;
            _2233 = 0.0;
            _2235 = 0.0;
            _2237 = 0.0;
        }
        else
        {
            float _2228;
            float _2230;
            float _2232;
            float _2234;
            float _2236;
            float _2238;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            uint _2393 = 0u;
            uint _2402;
            bool _2403;
            for (;;)
            {
                _2402 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2393 << 2u)) >> 2u)).x;
                _2403 = _2402 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2403)
                {
                    frontier_phi_66_pred = _2387;
                    frontier_phi_66_pred_1 = _2392;
                    frontier_phi_66_pred_2 = _2391;
                    frontier_phi_66_pred_3 = _2390;
                    frontier_phi_66_pred_4 = _2389;
                    frontier_phi_66_pred_5 = _2388;
                }
                else
                {
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    uint _2538;
                    _2532 = _2387;
                    _2533 = _2388;
                    _2534 = _2389;
                    _2535 = _2390;
                    _2536 = _2391;
                    _2537 = _2392;
                    _2538 = _2402;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    float _2464;
                    for (;;)
                    {
                        uint _2542 = uint(findLSB(_2538)) + (_2393 << 5u);
                        uint _2539 = (_2538 + 4294967295u) & _2538;
                        uint _2544 = _2542 * 48u;
                        vec4 _2558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2544)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 3u)).x));
                        uint _2564 = (_2542 * 48u) + 4u;
                        vec4 _2577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2564)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 3u)).x));
                        uint _2583 = (_2542 * 48u) + 8u;
                        vec3 _2594 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2583)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 2u)).x));
                        float _2598 = _2558.x - _2051;
                        float _2599 = _2558.y - _2052;
                        float _2600 = _2558.z - _2053;
                        float _2601 = dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600));
                        float _2604 = inversesqrt(_2601);
                        float _2613 = 1.0 - (_2601 * _2558.w);
                        float _3768 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _2614 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                        float _2615 = sqrt(_2601) * _2577.w;
                        float _2618 = 1.39999997615814208984375 / (_2615 + 1.39999997615814208984375);
                        float _2619 = _2618 * _2618;
                        float _2622 = ((1.0 - _2619) * dot(vec3(_460, _463, _466), vec3(_2604 * _2598, _2604 * _2599, _2604 * _2600))) + _2619;
                        float _2625 = _2615 * _2615;
                        float _2629 = ((isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))) * _2614) / ((_2625 * 0.699999988079071044921875) + 1.0);
                        float _2633 = (-0.0) - _2051;
                        float _2634 = (-0.0) - _2052;
                        float _2635 = (-0.0) - _2053;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2643 = dot(vec3(_460, _463, _466), vec3(_2639 * _2633, _2639 * _2634, _2639 * _2635));
                        float _3784 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _3795 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                        float _2647 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
                        float _2651 = (0.5 / (((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) + 9.9999999392252902907785028219223e-09) + _2647)) * _2647;
                        float _3806 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2660 = (((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 3.1415927410125732421875) / ((_2625 * 2.1991131305694580078125) + 3.141590118408203125)) * _2614;
                        _2462 = (_2629 * _2577.x) + _2535;
                        _2463 = (_2629 * _2577.y) + _2536;
                        _2464 = (_2629 * _2577.z) + _2537;
                        _2459 = (_2660 * _2594.x) + _2532;
                        _2460 = (_2660 * _2594.y) + _2533;
                        _2461 = (_2660 * _2594.z) + _2534;
                        if (_2539 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2532 = _2459;
                            _2533 = _2460;
                            _2534 = _2461;
                            _2535 = _2462;
                            _2536 = _2463;
                            _2537 = _2464;
                            _2538 = _2539;
                        }
                    }
                    frontier_phi_66_pred = _2459;
                    frontier_phi_66_pred_1 = _2464;
                    frontier_phi_66_pred_2 = _2463;
                    frontier_phi_66_pred_3 = _2462;
                    frontier_phi_66_pred_4 = _2461;
                    frontier_phi_66_pred_5 = _2460;
                }
                _2228 = frontier_phi_66_pred;
                _2238 = frontier_phi_66_pred_1;
                _2236 = frontier_phi_66_pred_2;
                _2234 = frontier_phi_66_pred_3;
                _2232 = frontier_phi_66_pred_4;
                _2230 = frontier_phi_66_pred_5;
                uint _2394 = _2393 + 1u;
                if (_2394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2387 = _2228;
                    _2388 = _2230;
                    _2389 = _2232;
                    _2390 = _2234;
                    _2391 = _2236;
                    _2392 = _2238;
                    _2393 = _2394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2227 = _2228;
            _2229 = _2230;
            _2231 = _2232;
            _2233 = _2234;
            _2235 = _2236;
            _2237 = _2238;
        }
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.z;
        uint _2244 = (_2242 >> 8u) & 15u;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((4294967295u << _2244) & _2097) == 0u)
        {
            _2358 = _2227;
            _2360 = _2229;
            _2362 = _2231;
            _2364 = _2233;
            _2366 = _2235;
            _2368 = _2237;
        }
        else
        {
            float _2383 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2244 < ((_2242 >> 12u) & 15u))
            {
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2515 = _2227;
                float _2516 = _2229;
                float _2517 = _2231;
                float _2518 = _2233;
                float _2519 = _2235;
                float _2520 = _2237;
                uint _2521 = _2244;
                uint _2530;
                bool _2531;
                for (;;)
                {
                    _2530 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                    _2531 = _2530 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2531)
                    {
                        frontier_phi_77_pred = _2520;
                        frontier_phi_77_pred_1 = _2519;
                        frontier_phi_77_pred_2 = _2518;
                        frontier_phi_77_pred_3 = _2517;
                        frontier_phi_77_pred_4 = _2516;
                        frontier_phi_77_pred_5 = _2515;
                    }
                    else
                    {
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2687 = _2515;
                        float _2688 = _2516;
                        float _2689 = _2517;
                        float _2690 = _2518;
                        float _2691 = _2519;
                        float _2692 = _2520;
                        uint _2693 = _2530;
                        uint _2694;
                        vec4 _2719;
                        float _2720;
                        vec4 _2735;
                        vec3 _2747;
                        vec4 _2762;
                        vec4 _2778;
                        float _2825;
                        bool _2826;
                        for (;;)
                        {
                            uint _2704 = ((_2521 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2693));
                            _2694 = (_2693 + 4294967295u) & _2693;
                            uint _2706 = _2704 * 40u;
                            _2719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 3u)).x));
                            _2720 = _2719.w;
                            uint _2722 = (_2704 * 40u) + 4u;
                            _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            uint _2737 = (_2704 * 40u) + 8u;
                            _2747 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x));
                            uint _2749 = (_2704 * 40u) + 16u;
                            _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            uint _2765 = (_2704 * 40u) + 20u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2781 = (_2704 * 40u) + 24u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2800 = (_2704 * 40u) + 28u;
                            vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            _2825 = fma(_2053, _2813.z, fma(_2052, _2813.y, _2813.x * _2051)) + _2813.w;
                            _2826 = !((fma(_2053, _2794.z, fma(_2052, _2794.y, _2794.x * _2051)) + _2794.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2826)
                            {
                                float _2853 = _2719.x - _2051;
                                float _2854 = _2719.y - _2052;
                                float _2855 = _2719.z - _2053;
                                float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                                float _2859 = inversesqrt(_2856);
                                float _2860 = _2859 * _2853;
                                float _2861 = _2859 * _2854;
                                float _2862 = _2859 * _2855;
                                float _2866 = 1.0 - (_2856 / (_2720 * _2720));
                                float _3817 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2867 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
                                float _2871 = sqrt(_2856) * _2735.w;
                                float _2873 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                                float _2874 = _2873 * _2873;
                                float _2875 = 1.0 - _2874;
                                float _2877 = (_2875 * dot(vec3(_2860, _2861, _2862), vec3(_460, _463, _466))) + _2874;
                                float _2880 = _2871 * _2871;
                                float _2884 = (fma(_2053, _2762.z, fma(_2052, _2762.y, _2762.x * _2051)) + _2762.w) / _2825;
                                float _2885 = (fma(_2053, _2778.z, fma(_2052, _2778.y, _2778.x * _2051)) + _2778.w) / _2825;
                                float _2889 = 1.0 - dot(vec2(_2884, _2885), vec2(_2884, _2885));
                                float _3833 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2890 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
                                float _2891 = _2890 * (((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2867) / ((_2880 * 0.699999988079071044921875) + 1.0));
                                float _2901 = dot(vec3(_460, _463, _466), vec3((-0.0) - (_2051 * _2383), (-0.0) - (_2052 * _2383), (-0.0) - (_2053 * _2383)));
                                float _3844 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2909 = (_2875 * dot(vec3(_460, _463, _466), vec3(_2860, _2861, _2862))) + _2874;
                                float _3855 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                                float _2914 = (0.5 / (((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) + 9.9999999392252902907785028219223e-09) + _2910)) * _2910;
                                float _3866 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2921 = (_2890 * _2867) * (((isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 3.1415927410125732421875) / ((_2880 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2891 * _2735.y;
                                frontier_phi_83_pred_1 = _2891 * _2735.x;
                                frontier_phi_83_pred_2 = _2921 * _2747.z;
                                frontier_phi_83_pred_3 = _2921 * _2747.y;
                                frontier_phi_83_pred_4 = _2921 * _2747.x;
                                frontier_phi_83_pred_5 = _2891 * _2735.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2929 = frontier_phi_83_pred;
                            _2928 = frontier_phi_83_pred_1;
                            _2927 = frontier_phi_83_pred_2;
                            _2926 = frontier_phi_83_pred_3;
                            _2925 = frontier_phi_83_pred_4;
                            _2930 = frontier_phi_83_pred_5;
                            _2677 = _2928 + _2690;
                            _2678 = _2929 + _2691;
                            _2679 = _2930 + _2692;
                            _2674 = _2925 + _2687;
                            _2675 = _2926 + _2688;
                            _2676 = _2927 + _2689;
                            if (_2694 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2678;
                                _2692 = _2679;
                                _2693 = _2694;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2679;
                        frontier_phi_77_pred_1 = _2678;
                        frontier_phi_77_pred_2 = _2677;
                        frontier_phi_77_pred_3 = _2676;
                        frontier_phi_77_pred_4 = _2675;
                        frontier_phi_77_pred_5 = _2674;
                    }
                    _2369 = frontier_phi_77_pred;
                    _2367 = frontier_phi_77_pred_1;
                    _2365 = frontier_phi_77_pred_2;
                    _2363 = frontier_phi_77_pred_3;
                    _2361 = frontier_phi_77_pred_4;
                    _2359 = frontier_phi_77_pred_5;
                    uint _2522 = _2521 + 1u;
                    if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2515 = _2359;
                        _2516 = _2361;
                        _2517 = _2363;
                        _2518 = _2365;
                        _2519 = _2367;
                        _2520 = _2369;
                        _2521 = _2522;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2363;
                frontier_phi_58_59_ladder_1 = _2369;
                frontier_phi_58_59_ladder_2 = _2367;
                frontier_phi_58_59_ladder_3 = _2365;
                frontier_phi_58_59_ladder_4 = _2361;
                frontier_phi_58_59_ladder_5 = _2359;
            }
            else
            {
                frontier_phi_58_59_ladder = _2231;
                frontier_phi_58_59_ladder_1 = _2237;
                frontier_phi_58_59_ladder_2 = _2235;
                frontier_phi_58_59_ladder_3 = _2233;
                frontier_phi_58_59_ladder_4 = _2229;
                frontier_phi_58_59_ladder_5 = _2227;
            }
            _2358 = frontier_phi_58_59_ladder_5;
            _2360 = frontier_phi_58_59_ladder_4;
            _2362 = frontier_phi_58_59_ladder;
            _2364 = frontier_phi_58_59_ladder_3;
            _2366 = frontier_phi_58_59_ladder_2;
            _2368 = frontier_phi_58_59_ladder_1;
        }
        float _2373 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2110 = (_2373 * _2364) + _1673;
        _2112 = (_2373 * _2366) + _1675;
        _2114 = (_2373 * _2368) + _1677;
        _2116 = ((_2358 * 0.039999999105930328369140625) * _2373) + _1922;
        _2118 = ((_2360 * 0.039999999105930328369140625) * _2373) + _1924;
        _2120 = ((_2362 * 0.039999999105930328369140625) * _2373) + _1926;
    }
    else
    {
        _2110 = _1673;
        _2112 = _1675;
        _2114 = _1677;
        _2116 = _1922;
        _2118 = _1924;
        _2120 = _1926;
    }
    uint _2126 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _2132 = (_331 * (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _296.x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[13u].x) * _267.x))) * cbInstanceData._m0[_2126].x;
    float _2133 = (_331 * (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _296.y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[13u].x) * _267.y))) * cbInstanceData._m0[_2126].y;
    float _2134 = (_331 * (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _296.z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[13u].x) * _267.z))) * cbInstanceData._m0[_2126].z;
    float _3882 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3893 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3904 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2151 = (((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_2110 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _504))) + ((_2116 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + _2132;
    float _2153 = (_2133 + ((_2118 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_2112 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _504)));
    float _2155 = (_2134 + ((_2120 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1314)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_2114 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _504)));
    float _2156 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2157 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2164 = cbMtdParam._m0[2u].x * _2132;
    float _2165 = cbMtdParam._m0[2u].y * _2133;
    float _2166 = cbMtdParam._m0[2u].z * _2134;
    float _3930 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2168 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    uint _2169 = _479 + 6u;
    float _2177 = _439 / cbSceneParam._m0[86u].x;
    float _2178 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2192 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2177, _2178, (log2((isnan(cbSceneParam._m0[77u].w) ? _360 : (isnan(_360) ? cbSceneParam._m0[77u].w : min(_360, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2194 = _2192.x;
    float _2195 = _2192.y;
    float _2196 = _2192.z;
    float _2197 = _2192.w;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_360 > cbSceneParam._m0[78u].w)
    {
        float _2252 = isnan(_360) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _360 : min(cbSceneParam._m0[80u].w, _360));
        float _2253 = _2252 / _360;
        float _2264 = _2253 * _411;
        float _2265 = _412 * _2253;
        float _2266 = (-0.0) - _2265;
        float _2268 = _2253 * _413;
        float _2270 = (cbSceneParam._m0[77u].w * _2266) / _2252;
        float _2271 = _2270 + cbSceneParam._m0[79u].w;
        float _2272 = cbSceneParam._m0[79u].w - _2265;
        float _2278 = sqrt(((_2264 * _2264) + (_2265 * _2265)) + (_2268 * _2268));
        float _2281 = (1.0 - (cbSceneParam._m0[77u].w / _2252)) * _2278;
        float _2286 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2288 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2472;
        if (abs((_2266 - _2270) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2472 = ((((_2271 > 0.0) ? exp2(_2286 * _2271) : (2.0 - exp2(_2288 * _2271))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2281;
        }
        else
        {
            float _2416 = 1.0 / cbSceneParam._m0[80u].x;
            float _2417 = isnan(_2272) ? _2271 : (isnan(_2271) ? _2272 : max(_2271, _2272));
            float _2418 = isnan(_2272) ? _2271 : (isnan(_2271) ? _2272 : min(_2271, _2272));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            float _2428 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : min(_2418, 0.0));
            _2472 = ((abs(_2278 / _2266) * cbSceneParam._m0[80u].y) * ((((_2427 - _2428) * 2.0) - ((exp2(_2286 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0)))) - exp2(_2286 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0))))) * _2416)) - ((exp2(_2288 * _2427) - exp2(_2288 * _2428)) * _2416))) + (_2281 * cbSceneParam._m0[80u].z);
        }
        vec4 _2474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2177, _2178, 1.0), 0.0);
        float _2483 = exp2((_2472 * (-1.44269502162933349609375)) * (1.0 - _2474.w));
        float _2484 = log2(_2483);
        float _2500 = log2(_2197);
        _2290 = (exp2(_2500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].x)) * _2474.x) / cbSceneParam._m0[78u].x)) + _2194;
        _2292 = (exp2(_2500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].y)) * _2474.y) / cbSceneParam._m0[78u].y)) + _2195;
        _2294 = (exp2(_2500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2484 * cbSceneParam._m0[78u].z)) * _2474.z) / cbSceneParam._m0[78u].z)) + _2196;
        _2296 = _2483 * _2197;
    }
    else
    {
        _2290 = _2194;
        _2292 = _2195;
        _2294 = _2196;
        _2296 = _2197;
    }
    bool _2510;
    vec4 _2306;
    vec4 _2328;
    float _2330;
    float _2334;
    float _2335;
    float _2336;
    float _2339;
    float _2342;
    float _2345;
    float _2346;
    bool _2357;
    for (;;)
    {
        _2306 = cbMatDynParam._m0[0u];
        float _2308 = roundEven(_2306.y);
        bool _2309 = _2308 == 3.0;
        float _2310 = log2(_2296);
        float _2314 = exp2(_2310 * cbSceneParam._m0[78u].x);
        float _2315 = exp2(_2310 * cbSceneParam._m0[78u].y);
        float _2316 = exp2(_2310 * cbSceneParam._m0[78u].z);
        float _2317 = _2314 * _2156;
        float _2318 = _2315 * _2157;
        float _2319 = _2316 * _2158;
        float _2326 = _427 + (-0.5);
        _2328 = cbMtdParam._m0[1u];
        _2330 = _2328.y * _2326;
        float _2333 = (_2308 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2334 = _2333 * (_2309 ? _2317 : (_2317 + (cbSceneParam._m0[72u].w * _2290)));
        _2335 = _2333 * (_2309 ? _2318 : (_2318 + (cbSceneParam._m0[72u].w * _2292)));
        _2336 = _2333 * (_2309 ? _2319 : (_2319 + (cbSceneParam._m0[72u].w * _2294)));
        _2339 = ((_2164 * _2168) * _2314) * _2333;
        _2342 = ((_2165 * _2168) * _2315) * _2333;
        _2345 = ((_2166 * _2168) * _2316) * _2333;
        _2346 = _2326 * 0.999000012874603271484375;
        _2357 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2357)
        {
            if ((cbInstanceData._m0[_479 + 7u].x + _2346) < 0.5)
            {
                _2510 = true;
                break;
            }
        }
        uint _2451 = _480 + uint(_2306.w);
        if ((cbInstanceData._m0[_2451].w < 1.0) && ((cbInstanceData._m0[_2451].w + _2346) < 0.5))
        {
            _2510 = true;
            break;
        }
        if ((_2330 + 1.0) < _2328.x)
        {
            _2510 = true;
            break;
        }
        _2510 = false;
        break;
    }
    float _2665;
    if (_2510)
    {
        discard_state = true;
        _2665 = 0.0;
    }
    else
    {
        _2665 = cbInstanceData._m0[_2169].w;
    }
    SV_Target.x = _2334;
    SV_Target.y = _2335;
    SV_Target.z = _2336;
    SV_Target.w = _2665;
    SV_Target_1.x = _2339;
    SV_Target_1.y = _2342;
    SV_Target_1.z = _2345;
    SV_Target_1.w = cbInstanceData._m0[_2169].w;
    discard_exit();
}


