#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1157;
float _3577;
float _3578;
float _3579;
float _3580;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _243 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _256 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_242 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_243 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _262 = _256.x * cbMtdParam._m0[9u].x;
    float _263 = _256.y * cbMtdParam._m0[9u].y;
    float _264 = _256.z * cbMtdParam._m0[9u].z;
    float _268 = _262 - (_262 * TEXCOORD_6.x);
    float _269 = _263 - (_263 * TEXCOORD_6.x);
    float _270 = _264 - (_264 * TEXCOORD_6.x);
    float _274 = _268 - (_268 * TEXCOORD_6.y);
    float _275 = _269 - (_269 * TEXCOORD_6.y);
    float _276 = _270 - (_270 * TEXCOORD_6.y);
    vec4 _292 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _242) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _243) + cbTextureTilingScale._m0[1u].w));
    float _300 = (_292.x * 2.0) + (-1.0);
    float _302 = (_292.y * 2.0) + (-1.0);
    float _303 = dot(vec2(_300, _302), vec2(_300, _302));
    float _3589 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _309 = sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))));
    float _310 = _292.z * cbMtdParam._m0[16u].w;
    float _312 = _310 - (_310 * TEXCOORD_6.x);
    float _314 = _312 - (_312 * TEXCOORD_6.y);
    vec4 _346 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _350 = cbPerFrame._m0[22u].x * 2.0;
    float _351 = _350 * cbMtdParam._m0[15u].w;
    float _354 = (_346.x * 0.5) + (-0.25);
    float _357 = (_346.y * 0.5) + (-0.25);
    float _358 = _357 * cbMtdParam._m0[15u].z;
    float _360 = (-0.0) - (cbMtdParam._m0[15u].z * _354);
    float _362 = fract(_351);
    float _364 = fract(_351 + 0.5);
    float _375 = abs((_362 * 2.0) + (-1.0));
    vec4 _392 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_362 * _360) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_358 * _362) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _394 = _392.x;
    float _395 = _392.y;
    float _396 = _392.z;
    vec4 _397 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_364 * _360) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_358 * _364) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _408 = ((_397.x - _394) * _375) + _394;
    float _409 = ((_397.y - _395) * _375) + _395;
    float _410 = ((_397.z - _396) * _375) + _396;
    vec4 _462 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _242) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _243) + cbTextureTilingScale._m0[2u].w));
    float _483 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _484 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _487 = _350 * cbMtdParam._m0[16u].z;
    float _488 = _357 * cbMtdParam._m0[16u].y;
    float _490 = (-0.0) - (cbMtdParam._m0[16u].y * _354);
    float _491 = fract(_487);
    float _493 = fract(_487 + 0.5);
    float _504 = abs((_491 * 2.0) + (-1.0));
    vec4 _521 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_491 * _490) + _483) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_488 * _491) + _484) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    vec4 _526 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_493 * _490) + _483) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_488 * _493) + _484) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _543 = ((((_526.x - _523) * _504) + _523) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _462.x);
    float _544 = ((((_526.y - _524) * _504) + _524) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _462.y);
    float _545 = ((((_526.z - _525) * _504) + _525) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _462.z);
    float _552 = ((((cbMtdParam._m0[16u].x * _408) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _543) * TEXCOORD_6.x) + _543;
    float _553 = ((((cbMtdParam._m0[16u].x * _409) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _544) * TEXCOORD_6.x) + _544;
    float _554 = ((((cbMtdParam._m0[16u].x * _410) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _545) * TEXCOORD_6.x) + _545;
    float _570 = _300 - (_300 * TEXCOORD_6.x);
    float _571 = _302 - (_302 * TEXCOORD_6.x);
    float _572 = _309 - (_309 * TEXCOORD_6.x);
    float _576 = _570 - (_570 * TEXCOORD_6.y);
    float _577 = _571 - (_571 * TEXCOORD_6.y);
    float _578 = _572 - (_572 * TEXCOORD_6.y);
    float _581 = fma(_578, _218 * NORMAL.x, fma(_577, _225 * TANGENT.x, (_211 * _204) * _576));
    float _584 = fma(_578, _218 * NORMAL.y, fma(_577, _225 * TANGENT.y, (_211 * _205) * _576));
    float _587 = fma(_578, _218 * NORMAL.z, fma(_577, _225 * TANGENT.z, (_211 * _206) * _576));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3600 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _595 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3622 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3633 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    vec4 _679 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _681 = _679.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_665 * _665) + (_666 * _666)) + (_667 * _667));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3644 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3655 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) - _844)) + _844) < ((_681 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _716 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _719 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _732 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = _732 + 9u;
    uint _734 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3666 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _757 = _754.x * TEXCOORD_6.z;
    float _758 = dot(vec3(_592, _593, _594), vec3(_672, _673, _674));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _592) - _672;
    float _766 = (_761 * _593) - _673;
    float _767 = (_761 * _594) - _674;
    float _771 = abs(dot(vec3(_672, _673, _674), vec3(_592, _593, _594)));
    float _3699 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_595);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _882 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _886 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _890 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _914 = _818 + _592;
        float _915 = _822 + _593;
        float _916 = _826 + _594;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _882;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _886;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _890;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_882 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_886 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_890 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_592, _593, _594), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3747 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_592, _593, _594), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3780 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_592, _593, _594), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3813 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1200 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1204 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1208 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1231 = _818 + _592;
        float _1232 = _822 + _593;
        float _1233 = _826 + _594;
        float _1243 = fma(_1233, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231)) - _1200;
        float _1244 = fma(_1233, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231)) - _1204;
        float _1245 = fma(_1233, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231)) - _1208;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1200 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1204 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[35u].z) + ((((((_1208 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1299 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1266.x + (-0.5));
        float _1301 = _1299 * (_1266.y + (-0.5));
        float _1302 = _1299 * (_1266.z + (-0.5));
        float _1309 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1273.x + (-0.5));
        float _1311 = _1309 * (_1273.y + (-0.5));
        float _1312 = _1309 * (_1273.z + (-0.5));
        float _1319 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1280.x + (-0.5));
        float _1321 = _1319 * (_1280.y + (-0.5));
        float _1322 = _1319 * (_1280.z + (-0.5));
        float _1329 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1287.x + (-0.5));
        float _1331 = _1329 * (_1287.y + (-0.5));
        float _1332 = _1329 * (_1287.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_592, _593, _594), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3876 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1363 + 1.0))) + _1368) * _1333;
        float _1378 = _1301 * 0.5;
        float _1379 = _1311 * 0.5;
        float _1380 = _1321 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_592, _593, _594), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3909 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1405 + 1.0))) + _1410) * _1334;
        float _1420 = _1302 * 0.5;
        float _1421 = _1312 * 0.5;
        float _1422 = _1322 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_592, _593, _594), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3942 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1447 + 1.0))) + _1452) * _1335;
        _1469 = _1302;
        _1470 = _1301;
        _1471 = _1300;
        _1472 = _1312;
        _1473 = _1311;
        _1474 = _1310;
        _1475 = _1322;
        _1476 = _1321;
        _1477 = _1320;
        _1478 = _1335;
        _1479 = _1334;
        _1480 = _1333;
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = _1157;
        _1479 = _1157;
        _1480 = _1157;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1169)) + _1169;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1170)) + _1170;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1171)) + _1171;
    float _1516 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1493));
    float _1537 = _765 * 0.5;
    float _1538 = _766 * 0.5;
    float _1539 = _767 * 0.5;
    float _1540 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1543 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1546 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1580;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1553 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1557 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1561 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1568 = dot(vec4(cbModelParam._m0[39u]), vec4(_1537, _1538, _1539, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1591;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1582 = dot(vec4(cbModelParam._m0[40u]), vec4(_1537, _1538, _1539, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1595 = (_1591 * cbModelParam._m0[1u].x) + (_1580 * (1.0 - cbModelParam._m0[1u].x));
    float _1605 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1605 : min(cbModelParam._m0[25u].z, _1605));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1667 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1670 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1868;
        if (_1667 > 0.0)
        {
            _1868 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1868 = frontier_phi_26_22_ladder;
        }
        float _2312;
        if (_1670 > 0.0)
        {
            _2312 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2312 = frontier_phi_38_33_ladder;
        }
        float _2314 = isnan(_1868) ? _1698 : (isnan(_1698) ? _1868 : min(_1698, _1868));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1664) + _1653;
        float _2320 = (_2315 * _1667) + _1657;
        float _2321 = (_2315 * _1670) + _1661;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1606);
            frontier_phi_16_38_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1606);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1749 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1753 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1757 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1760 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1763 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1766 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1873;
        if (_1760 > 0.0)
        {
            _1873 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1873 = frontier_phi_28_24_ladder;
        }
        float _2339;
        if (_1763 > 0.0)
        {
            _2339 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2339 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_1766 > 0.0)
        {
            _2719 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2719 = frontier_phi_52_47_ladder;
        }
        float _2721 = isnan(_2339) ? _1873 : (isnan(_1873) ? _2339 : min(_1873, _2339));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _1760) + _1749;
        float _2727 = (_2722 * _1763) + _1753;
        float _2728 = (_2722 * _1766) + _1757;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_52_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _1785 = frontier_phi_25_52_ladder_2;
        _1787 = frontier_phi_25_52_ladder_1;
        _1789 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1695);
        _1785 = _1769.x * cbModelParam._m0[1u].z;
        _1787 = _1769.y * cbModelParam._m0[1u].z;
        _1789 = _1769.z * cbModelParam._m0[1u].z;
    }
    float _1801 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1802 = _1801 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1803 = _1801 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1804 = _1801 * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, _1802 * cbSceneParam._m0[91u].x));
    float _1847 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1860 = _1847 / _1859;
    float _1861 = _1851 / _1859;
    float _1862 = _1855 / _1859;
    float _2009;
    float _2010;
    float _2011;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1889 = ((uint(_1862 > cbSceneParam._m0[59u].y) + uint(_1862 > cbSceneParam._m0[59u].x)) + uint(_1862 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1890 = _1889 + 43u;
        uint _1898 = _1889 + 44u;
        uint _1906 = _1889 + 45u;
        uint _1914 = _1889 + 46u;
        float _1925 = fma(_1859, cbSceneParam._m0[_1890].w, fma(_1855, cbSceneParam._m0[_1890].z, fma(_1851, cbSceneParam._m0[_1890].y, _1847 * cbSceneParam._m0[_1890].x)));
        float _1929 = fma(_1859, cbSceneParam._m0[_1898].w, fma(_1855, cbSceneParam._m0[_1898].z, fma(_1851, cbSceneParam._m0[_1898].y, _1847 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1859, cbSceneParam._m0[_1914].w, fma(_1855, cbSceneParam._m0[_1914].z, fma(_1851, cbSceneParam._m0[_1914].y, _1847 * cbSceneParam._m0[_1914].x)));
        float _1942 = cbSceneParam._m0[33u].z * _1937;
        float _1944 = cbSceneParam._m0[33u].w * _1937;
        float _1947 = fma(_1859, cbSceneParam._m0[_1906].w, fma(_1855, cbSceneParam._m0[_1906].z, fma(_1851, cbSceneParam._m0[_1906].y, _1847 * cbSceneParam._m0[_1906].x))) / _1937;
        float _1995 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
        float _4068 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _2002 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1925) / _1937, (_1944 + _1929) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1925) / _1937, (_1929 - _1942) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1942) / _1937, (_1929 - _1944) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1944) / _1937, (_1942 + _1929) / _1937), _1947), 0.0)).x), vec4(0.25)));
        _2009 = 1.0 - (_2002 * cbSceneParam._m0[34u].x);
        _2010 = 1.0 - (_2002 * cbSceneParam._m0[34u].y);
        _2011 = 1.0 - (_2002 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2009 = 1.0;
        _2010 = 1.0;
        _2011 = 1.0;
    }
    float _2075;
    float _2077;
    float _2079;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2063 = fma(_1859, cbSceneParam._m0[63u].w, fma(_1855, cbSceneParam._m0[63u].z, fma(_1851, cbSceneParam._m0[63u].y, _1847 * cbSceneParam._m0[63u].x)));
        float _2064 = fma(_1859, cbSceneParam._m0[60u].w, fma(_1855, cbSceneParam._m0[60u].z, fma(_1851, cbSceneParam._m0[60u].y, _1847 * cbSceneParam._m0[60u].x))) / _2063;
        float _2065 = fma(_1859, cbSceneParam._m0[61u].w, fma(_1855, cbSceneParam._m0[61u].z, fma(_1851, cbSceneParam._m0[61u].y, _1847 * cbSceneParam._m0[61u].x))) / _2063;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2064 >= cbSceneParam._m0[64u].x) && (_2065 >= cbSceneParam._m0[64u].y)) && (_2064 <= cbSceneParam._m0[64u].z)) && (_2065 <= cbSceneParam._m0[64u].w))
        {
            float _2352 = fma(_1859, cbSceneParam._m0[62u].w, fma(_1855, cbSceneParam._m0[62u].z, fma(_1851, cbSceneParam._m0[62u].y, _1847 * cbSceneParam._m0[62u].x))) / _2063;
            float _2356 = isnan(cbSceneParam._m0[41u].w) ? _2352 : (isnan(_2352) ? cbSceneParam._m0[41u].w : max(_2352, cbSceneParam._m0[41u].w));
            float _2399 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
            float _4084 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
            float _2406 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2064, cbSceneParam._m0[33u].w + _2065), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2064, _2065 - cbSceneParam._m0[33u].z), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].z, _2065 - cbSceneParam._m0[33u].w), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2065), _2356), 0.0)).x), vec4(0.25)));
            float _2410 = 1.0 - (_2406 * cbSceneParam._m0[34u].x);
            float _2411 = 1.0 - (_2406 * cbSceneParam._m0[34u].y);
            float _2412 = 1.0 - (_2406 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2412) ? _2011 : (isnan(_2011) ? _2412 : min(_2011, _2412));
            frontier_phi_37_36_ladder_1 = isnan(_2411) ? _2010 : (isnan(_2010) ? _2411 : min(_2010, _2411));
            frontier_phi_37_36_ladder_2 = isnan(_2410) ? _2009 : (isnan(_2009) ? _2410 : min(_2009, _2410));
        }
        else
        {
            frontier_phi_37_36_ladder = _2011;
            frontier_phi_37_36_ladder_1 = _2010;
            frontier_phi_37_36_ladder_2 = _2009;
        }
        _2075 = frontier_phi_37_36_ladder_2;
        _2077 = frontier_phi_37_36_ladder_1;
        _2079 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2075 = _2009;
        _2077 = _2010;
        _2079 = _2011;
    }
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_732 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2092 = _757 + (-1.0);
    float _2095 = (cbLight._m0[_2087].x * _2092) + 1.0;
    float _2096 = (cbLight._m0[_2087].y * _2092) + 1.0;
    uint _2097 = _2086 + 5u;
    float _2103 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2107 = _2086 + 4u;
    float _2116 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2120 = _2086 | 1u;
    float _2131 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_592, _593, _594));
    float _2134 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_592, _593, _594));
    float _4120 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _4131 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2139 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.3183098733425140380859375;
    float _2141 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.3183098733425140380859375;
    float _2148 = ((cbLight._m0[_2097].x * _2103) * _2141) + (((cbLight._m0[_2107].x * _2075) * _2116) * _2139);
    float _2149 = ((_2103 * cbLight._m0[_2097].y) * _2141) + (((cbLight._m0[_2107].y * _2077) * _2116) * _2139);
    float _2150 = ((_2103 * cbLight._m0[_2097].z) * _2141) + (((cbLight._m0[_2107].z * _2079) * _2116) * _2139);
    uint _2152 = _2086 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _595) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_2086].x + _672;
    float _2168 = cbLight._m0[_2086].y + _673;
    float _2169 = cbLight._m0[_2086].z + _674;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2086].xyz));
    float _4142 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2181 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2182 = dot(vec3(_592, _593, _594), vec3(_2174, _2175, _2176));
    float _4164 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2174, _2175, _2176));
    float _4175 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2206 = 1.0 - _2166;
    float _2217 = (0.5 / (((_2181 * ((_2180 * _2206) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2206) + _2166) * _2180))) * _2180;
    float _4186 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2233 = _2086 + 9u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _595) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2120].x + _672;
    float _2247 = cbLight._m0[_2120].y + _673;
    float _2248 = cbLight._m0[_2120].z + _674;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2120].xyz));
    float _4197 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2260 = dot(vec3(_592, _593, _594), vec3(_2253, _2254, _2255));
    float _4208 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2253, _2254, _2255));
    float _4219 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2245 * _2245;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2282 = 1.0 - _2245;
    float _2292 = (0.5 / (((_2181 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2282) + _2245) * _2259))) * _2259;
    float _4230 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    float _2304 = (((_2281 * cbLight._m0[_2233].x) * _2294) * _2103) + ((((cbLight._m0[_2152].x * _2075) * _2205) * _2219) * _2116);
    float _2305 = (((_2281 * cbLight._m0[_2233].y) * _2294) * _2103) + ((((cbLight._m0[_2152].y * _2077) * _2205) * _2219) * _2116);
    float _2306 = (((_2281 * cbLight._m0[_2233].z) * _2294) * _2103) + ((((cbLight._m0[_2152].z * _2079) * _2205) * _2219) * _2116);
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_2084.y == 0u)
    {
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.x;
        uint _2436 = uint((float(_2424.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2425))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2425)));
        float _2446 = (log2(_1862 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2447 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        uint _2450 = uint(isnan(14.0) ? _2447 : (isnan(_2447) ? 14.0 : min(_2447, 14.0)));
        uvec4 _2455 = texelFetch(g_lightClusterGridBuffer, int(((_2450 << 2u) + (_2436 << 6u)) >> 2u));
        uint _2456 = _2455.x;
        uint _2457 = _2424.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2457 >> 4u) & 15u)) + 4294967295u) & _2456) == 0u) || ((_2457 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            uint _2783 = 0u;
            uint _2792;
            bool _2793;
            for (;;)
            {
                _2792 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                _2793 = _2792 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2793)
                {
                    frontier_phi_63_pred = _2782;
                    frontier_phi_63_pred_1 = _2781;
                    frontier_phi_63_pred_2 = _2780;
                    frontier_phi_63_pred_3 = _2779;
                    frontier_phi_63_pred_4 = _2778;
                    frontier_phi_63_pred_5 = _2777;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2777;
                    _2944 = _2778;
                    _2945 = _2779;
                    _2946 = _2780;
                    _2947 = _2781;
                    _2948 = _2782;
                    _2949 = _2792;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2783 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _1860;
                        float _3010 = _2969.y - _1861;
                        float _3011 = _2969.z - _1862;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_713, _716, _719), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4251 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _1860;
                        float _3045 = (-0.0) - _1861;
                        float _3046 = (-0.0) - _1862;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3060 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3061 = 1.0 - _773;
                        float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                        float _3069 = _3068 * _3068;
                        float _3070 = _3069 * _3069;
                        float _3071 = _3051 + _3016;
                        float _3072 = _3052 + _3017;
                        float _3073 = _3053 + _3018;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3081 = dot(vec3(_713, _716, _719), vec3(_3051, _3052, _3053));
                        float _4267 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3084 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _3085 = dot(vec3(_713, _716, _719), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                        float _4278 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                        float _3093 = _3029 * _3069;
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3019) + _3094;
                        float _4289 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3099 = 1.0 - _3069;
                        float _3109 = (0.5 / (((_3098 * ((_3084 * _3099) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3069) * _3084))) * _3098;
                        float _4300 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3120 = (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_3092 * _3092) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2873 = (_3040 * _2988.x) + _2946;
                        _2874 = (_3040 * _2988.y) + _2947;
                        _2875 = (_3040 * _2988.z) + _2948;
                        _2870 = (_3120 * _3005.x) + _2943;
                        _2871 = (_3120 * _3005.y) + _2944;
                        _2872 = (_3120 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_63_pred = _2875;
                    frontier_phi_63_pred_1 = _2874;
                    frontier_phi_63_pred_2 = _2873;
                    frontier_phi_63_pred_3 = _2872;
                    frontier_phi_63_pred_4 = _2871;
                    frontier_phi_63_pred_5 = _2870;
                }
                _2601 = frontier_phi_63_pred;
                _2599 = frontier_phi_63_pred_1;
                _2597 = frontier_phi_63_pred_2;
                _2595 = frontier_phi_63_pred_3;
                _2593 = frontier_phi_63_pred_4;
                _2591 = frontier_phi_63_pred_5;
                uint _2784 = _2783 + 1u;
                if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2777 = _2591;
                    _2778 = _2593;
                    _2779 = _2595;
                    _2780 = _2597;
                    _2781 = _2599;
                    _2782 = _2601;
                    _2783 = _2784;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((4294967295u << _2607) & _2456) == 0u)
        {
            _2745 = _2590;
            _2747 = _2592;
            _2749 = _2594;
            _2751 = _2596;
            _2753 = _2598;
            _2755 = _2600;
        }
        else
        {
            float _2770 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
            float _2771 = _2770 * _1860;
            float _2772 = _2770 * _1861;
            float _2773 = _2770 * _1862;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            float frontier_phi_54_55_ladder_3;
            float frontier_phi_54_55_ladder_4;
            float frontier_phi_54_55_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2926 = _2590;
                float _2927 = _2592;
                float _2928 = _2594;
                float _2929 = _2596;
                float _2930 = _2598;
                float _2931 = _2600;
                uint _2932 = _2607;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2942)
                    {
                        frontier_phi_74_pred = _2930;
                        frontier_phi_74_pred_1 = _2929;
                        frontier_phi_74_pred_2 = _2928;
                        frontier_phi_74_pred_3 = _2927;
                        frontier_phi_74_pred_4 = _2926;
                        frontier_phi_74_pred_5 = _2931;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3147 = _2926;
                        float _3148 = _2927;
                        float _3149 = _2928;
                        float _3150 = _2929;
                        float _3151 = _2930;
                        float _3152 = _2931;
                        uint _3153 = _2941;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3222;
                        vec4 _3238;
                        float _3285;
                        bool _3286;
                        for (;;)
                        {
                            uint _3164 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3209 = (_3164 * 40u) + 16u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3225 = (_3164 * 40u) + 20u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3241 = (_3164 * 40u) + 24u;
                            vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3260 = (_3164 * 40u) + 28u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3285 = fma(_1862, _3273.z, fma(_1861, _3273.y, _3273.x * _1860)) + _3273.w;
                            _3286 = !((fma(_1862, _3254.z, fma(_1861, _3254.y, _3254.x * _1860)) + _3254.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3286)
                            {
                                float _3313 = _3179.x - _1860;
                                float _3314 = _3179.y - _1861;
                                float _3315 = _3179.z - _1862;
                                float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                                float _3319 = inversesqrt(_3316);
                                float _3320 = _3319 * _3313;
                                float _3321 = _3319 * _3314;
                                float _3322 = _3319 * _3315;
                                float _3326 = 1.0 - (_3316 / (_3180 * _3180));
                                float _4311 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3331 = sqrt(_3316) * _3195.w;
                                float _3333 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                                float _3334 = _3333 * _3333;
                                float _3337 = ((1.0 - _3334) * dot(vec3(_3320, _3321, _3322), vec3(_713, _716, _719))) + _3334;
                                float _3340 = _3331 * _3331;
                                float _3344 = (fma(_1862, _3222.z, fma(_1861, _3222.y, _3222.x * _1860)) + _3222.w) / _3285;
                                float _3345 = (fma(_1862, _3238.z, fma(_1861, _3238.y, _3238.x * _1860)) + _3238.w) / _3285;
                                float _3349 = 1.0 - dot(vec2(_3344, _3345), vec2(_3344, _3345));
                                float _4327 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3351 = _3350 * (((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3327) / ((_3340 * 0.699999988079071044921875) + 1.0));
                                float _3363 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                                float _3364 = 1.0 - _773;
                                float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                                float _3372 = _3371 * _3371;
                                float _3373 = _3372 * _3372;
                                float _3374 = _3320 - _2771;
                                float _3375 = _3321 - _2772;
                                float _3376 = _3322 - _2773;
                                float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                                float _3384 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2771, (-0.0) - _2772, (-0.0) - _2773));
                                float _4338 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3388 = dot(vec3(_713, _716, _719), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                                float _4349 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                                float _3396 = _3333 * _3372;
                                float _3397 = _3396 * _3396;
                                float _3403 = ((1.0 - _3397) * dot(vec3(_713, _716, _719), vec3(_3320, _3321, _3322))) + _3397;
                                float _4360 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3405 = 1.0 - _3372;
                                float _3415 = (0.5 / (((_3404 * ((_3387 * _3405) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3372) * _3387))) * _3404;
                                float _4371 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3425 = (_3350 * _3327) * (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3395 * _3395) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3351 * _3195.z;
                                frontier_phi_80_pred_1 = _3351 * _3195.y;
                                frontier_phi_80_pred_2 = _3351 * _3195.x;
                                frontier_phi_80_pred_3 = _3425 * _3207.z;
                                frontier_phi_80_pred_4 = _3425 * _3207.y;
                                frontier_phi_80_pred_5 = _3425 * _3207.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_80_pred;
                            _3433 = frontier_phi_80_pred_1;
                            _3432 = frontier_phi_80_pred_2;
                            _3431 = frontier_phi_80_pred_3;
                            _3430 = frontier_phi_80_pred_4;
                            _3429 = frontier_phi_80_pred_5;
                            _3137 = _3432 + _3150;
                            _3138 = _3433 + _3151;
                            _3139 = _3434 + _3152;
                            _3134 = _3429 + _3147;
                            _3135 = _3430 + _3148;
                            _3136 = _3431 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3138;
                        frontier_phi_74_pred_1 = _3137;
                        frontier_phi_74_pred_2 = _3136;
                        frontier_phi_74_pred_3 = _3135;
                        frontier_phi_74_pred_4 = _3134;
                        frontier_phi_74_pred_5 = _3139;
                    }
                    _2754 = frontier_phi_74_pred;
                    _2752 = frontier_phi_74_pred_1;
                    _2750 = frontier_phi_74_pred_2;
                    _2748 = frontier_phi_74_pred_3;
                    _2746 = frontier_phi_74_pred_4;
                    _2756 = frontier_phi_74_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2746;
                        _2927 = _2748;
                        _2928 = _2750;
                        _2929 = _2752;
                        _2930 = _2754;
                        _2931 = _2756;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _2756;
                frontier_phi_54_55_ladder_1 = _2754;
                frontier_phi_54_55_ladder_2 = _2752;
                frontier_phi_54_55_ladder_3 = _2750;
                frontier_phi_54_55_ladder_4 = _2746;
                frontier_phi_54_55_ladder_5 = _2748;
            }
            else
            {
                frontier_phi_54_55_ladder = _2600;
                frontier_phi_54_55_ladder_1 = _2598;
                frontier_phi_54_55_ladder_2 = _2596;
                frontier_phi_54_55_ladder_3 = _2594;
                frontier_phi_54_55_ladder_4 = _2590;
                frontier_phi_54_55_ladder_5 = _2592;
            }
            _2745 = frontier_phi_54_55_ladder_4;
            _2747 = frontier_phi_54_55_ladder_5;
            _2749 = frontier_phi_54_55_ladder_3;
            _2751 = frontier_phi_54_55_ladder_2;
            _2753 = frontier_phi_54_55_ladder_1;
            _2755 = frontier_phi_54_55_ladder;
        }
        float _2760 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2469 = (_2760 * _2751) + _2148;
        _2471 = (_2760 * _2753) + _2149;
        _2473 = (_2760 * _2755) + _2150;
        _2475 = ((_2745 * 0.039999999105930328369140625) * _2760) + _2304;
        _2477 = ((_2747 * 0.039999999105930328369140625) * _2760) + _2305;
        _2479 = ((_2749 * 0.039999999105930328369140625) * _2760) + _2306;
    }
    else
    {
        _2469 = _2148;
        _2471 = _2149;
        _2473 = _2150;
        _2475 = _2304;
        _2477 = _2305;
        _2479 = _2306;
    }
    uint _2485 = _733 + uint(cbMatDynParam._m0[0u].w);
    float _2491 = (((((_408 * cbMtdParam._m0[12u].x) - _552) * TEXCOORD_6.y) + _552) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2485].x;
    float _2492 = (((((_409 * cbMtdParam._m0[12u].y) - _553) * TEXCOORD_6.y) + _553) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2485].y;
    float _2493 = (((((_410 * cbMtdParam._m0[12u].z) - _554) * TEXCOORD_6.y) + _554) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2485].z;
    float _4387 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4398 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4409 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _2510 = (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2469 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _757))) + ((_2475 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + _2491;
    float _2512 = (_2492 + ((_2477 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2471 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _757)));
    float _2514 = (_2493 + ((_2479 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1595)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2473 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _757)));
    float _2515 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2516 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2517 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2523 = cbMtdParam._m0[2u].x * _2491;
    float _2524 = cbMtdParam._m0[2u].y * _2492;
    float _2525 = cbMtdParam._m0[2u].z * _2493;
    float _4435 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2527 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    uint _2528 = _732 + 6u;
    float _2536 = _693 / cbSceneParam._m0[86u].x;
    float _2537 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2616 = _2615 / _614;
        float _2627 = _2616 * _665;
        float _2628 = _666 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _667;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2883;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2883 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2806 = 1.0 / cbSceneParam._m0[80u].x;
            float _2807 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2808 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            _2883 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2817 - _2818) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))))) * _2806)) - ((exp2(_2650 * _2817) - exp2(_2650 * _2818)) * _2806))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2885 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2894 = exp2((_2883 * (-1.44269502162933349609375)) * (1.0 - _2885.w));
        float _2895 = log2(_2894);
        float _2911 = log2(_2556);
        _2652 = (exp2(_2911 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].x)) * _2885.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2654 = (exp2(_2911 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].y)) * _2885.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2656 = (exp2(_2911 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].z)) * _2885.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2658 = _2894 * _2556;
    }
    else
    {
        _2652 = _2553;
        _2654 = _2554;
        _2656 = _2555;
        _2658 = _2556;
    }
    bool _2921;
    vec4 _2668;
    vec4 _2690;
    float _2692;
    float _2696;
    float _2697;
    float _2698;
    float _2701;
    float _2704;
    float _2707;
    float _2708;
    bool _2718;
    for (;;)
    {
        _2668 = cbMatDynParam._m0[0u];
        float _2670 = roundEven(_2668.y);
        bool _2671 = _2670 == 3.0;
        float _2672 = log2(_2658);
        float _2676 = exp2(_2672 * cbSceneParam._m0[78u].x);
        float _2677 = exp2(_2672 * cbSceneParam._m0[78u].y);
        float _2678 = exp2(_2672 * cbSceneParam._m0[78u].z);
        float _2679 = _2676 * _2515;
        float _2680 = _2677 * _2516;
        float _2681 = _2678 * _2517;
        float _2688 = _681 + (-0.5);
        _2690 = cbMtdParam._m0[1u];
        _2692 = _2690.y * _2688;
        float _2695 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2696 = _2695 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
        _2697 = _2695 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
        _2698 = _2695 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
        _2701 = ((_2523 * _2527) * _2676) * _2695;
        _2704 = ((_2524 * _2527) * _2677) * _2695;
        _2707 = ((_2525 * _2527) * _2678) * _2695;
        _2708 = _2688 * 0.999000012874603271484375;
        _2718 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2718)
        {
            if ((cbInstanceData._m0[_732 + 7u].x + _2708) < 0.5)
            {
                _2921 = true;
                break;
            }
        }
        uint _2841 = _733 + uint(_2668.w);
        if ((cbInstanceData._m0[_2841].w < 1.0) && ((cbInstanceData._m0[_2841].w + _2708) < 0.5))
        {
            _2921 = true;
            break;
        }
        if ((_2692 + 1.0) < _2690.x)
        {
            _2921 = true;
            break;
        }
        _2921 = false;
        break;
    }
    float _3125;
    if (_2921)
    {
        discard_state = true;
        _3125 = 0.0;
    }
    else
    {
        _3125 = cbInstanceData._m0[_2528].w;
    }
    SV_Target.x = _2696;
    SV_Target.y = _2697;
    SV_Target.z = _2698;
    SV_Target.w = _3125;
    SV_Target_1.x = _2701;
    SV_Target_1.y = _2704;
    SV_Target_1.z = _2707;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
    discard_exit();
}


