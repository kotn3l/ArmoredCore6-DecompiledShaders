#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1108;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _235 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _248 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_234 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_235 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    float _260 = _254 - (_254 * TEXCOORD_6.x);
    float _261 = _255 - (_255 * TEXCOORD_6.x);
    float _262 = _256 - (_256 * TEXCOORD_6.x);
    float _266 = _260 - (_260 * TEXCOORD_6.y);
    float _267 = _261 - (_261 * TEXCOORD_6.y);
    float _268 = _262 - (_262 * TEXCOORD_6.y);
    vec4 _284 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _234) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _235) + cbTextureTilingScale._m0[1u].w));
    float _292 = (_284.x * 2.0) + (-1.0);
    float _294 = (_284.y * 2.0) + (-1.0);
    float _295 = dot(vec2(_292, _294), vec2(_292, _294));
    float _3191 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _301 = sqrt(1.0 - (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))));
    float _302 = _284.z * cbMtdParam._m0[16u].w;
    float _304 = _302 - (_302 * TEXCOORD_6.x);
    float _306 = _304 - (_304 * TEXCOORD_6.y);
    vec4 _338 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _342 = cbPerFrame._m0[22u].x * 2.0;
    float _343 = _342 * cbMtdParam._m0[15u].w;
    float _346 = (_338.x * 0.5) + (-0.25);
    float _349 = (_338.y * 0.5) + (-0.25);
    float _350 = _349 * cbMtdParam._m0[15u].z;
    float _352 = (-0.0) - (cbMtdParam._m0[15u].z * _346);
    float _354 = fract(_343);
    float _356 = fract(_343 + 0.5);
    float _367 = abs((_354 * 2.0) + (-1.0));
    vec4 _384 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_354 * _352) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_350 * _354) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _386 = _384.x;
    float _387 = _384.y;
    float _388 = _384.z;
    vec4 _389 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_356 * _352) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_350 * _356) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _400 = ((_389.x - _386) * _367) + _386;
    float _401 = ((_389.y - _387) * _367) + _387;
    float _402 = ((_389.z - _388) * _367) + _388;
    vec4 _454 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _234) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _235) + cbTextureTilingScale._m0[2u].w));
    float _475 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _476 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _479 = _342 * cbMtdParam._m0[16u].z;
    float _480 = _349 * cbMtdParam._m0[16u].y;
    float _482 = (-0.0) - (cbMtdParam._m0[16u].y * _346);
    float _483 = fract(_479);
    float _485 = fract(_479 + 0.5);
    float _496 = abs((_483 * 2.0) + (-1.0));
    vec4 _513 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_483 * _482) + _475) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_480 * _483) + _476) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    vec4 _518 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_485 * _482) + _475) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_480 * _485) + _476) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _535 = ((((_518.x - _515) * _496) + _515) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _454.x);
    float _536 = ((((_518.y - _516) * _496) + _516) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _454.y);
    float _537 = ((((_518.z - _517) * _496) + _517) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _454.z);
    float _544 = ((((cbMtdParam._m0[16u].x * _400) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _535) * TEXCOORD_6.x) + _535;
    float _545 = ((((cbMtdParam._m0[16u].x * _401) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _536) * TEXCOORD_6.x) + _536;
    float _546 = ((((cbMtdParam._m0[16u].x * _402) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _537) * TEXCOORD_6.x) + _537;
    float _562 = _292 - (_292 * TEXCOORD_6.x);
    float _563 = _294 - (_294 * TEXCOORD_6.x);
    float _564 = _301 - (_301 * TEXCOORD_6.x);
    float _568 = _562 - (_562 * TEXCOORD_6.y);
    float _569 = _563 - (_563 * TEXCOORD_6.y);
    float _570 = _564 - (_564 * TEXCOORD_6.y);
    float _573 = fma(_570, _210 * NORMAL.x, fma(_569, _217 * TANGENT.x, (_203 * _196) * _568));
    float _576 = fma(_570, _210 * NORMAL.y, fma(_569, _217 * TANGENT.y, (_203 * _197) * _568));
    float _579 = fma(_570, _210 * NORMAL.z, fma(_569, _217 * TANGENT.z, (_203 * _198) * _568));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3202 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _587 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3224 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3235 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _606 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _657 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _647);
    float _658 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _647);
    float _659 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _647);
    float _663 = inversesqrt(dot(vec3(_657, _658, _659), vec3(_657, _658, _659)));
    float _664 = _657 * _663;
    float _665 = _658 * _663;
    float _666 = _659 * _663;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _693 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _696 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _699 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    uint _712 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = _712 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3246 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _737 = _734.x * TEXCOORD_6.z;
    float _738 = dot(vec3(_584, _585, _586), vec3(_664, _665, _666));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _584) - _664;
    float _746 = (_741 * _585) - _665;
    float _747 = (_741 * _586) - _666;
    float _751 = abs(dot(vec3(_664, _665, _666), vec3(_584, _585, _586)));
    float _3279 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_587);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1107;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _837 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _841 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _865 = _798 + _584;
        float _866 = _802 + _585;
        float _867 = _806 + _586;
        float _877 = fma(_867, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865)) - _833;
        float _878 = fma(_867, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865)) - _837;
        float _879 = fma(_867, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865)) - _841;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _935 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_901.x + (-0.5));
        float _937 = _935 * (_901.y + (-0.5));
        float _938 = _935 * (_901.z + (-0.5));
        float _945 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_908.x + (-0.5));
        float _947 = _945 * (_908.y + (-0.5));
        float _948 = _945 * (_908.z + (-0.5));
        float _955 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_915.x + (-0.5));
        float _957 = _955 * (_915.y + (-0.5));
        float _958 = _955 * (_915.z + (-0.5));
        float _965 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_922.x + (-0.5));
        float _967 = _965 * (_922.y + (-0.5));
        float _968 = _965 * (_922.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _989 = (dot(vec3(_584, _585, _586), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _999 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3327 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1001 + 1.0))) + _1006) * _969;
        float _1016 = _937 * 0.5;
        float _1017 = _947 * 0.5;
        float _1018 = _957 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_584, _585, _586), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3338 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3349 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3360 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * (_1043 + 1.0))) + _1048) * _970;
        float _1058 = _938 * 0.5;
        float _1059 = _948 * 0.5;
        float _1060 = _958 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_584, _585, _586), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3393 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_1085 + 1.0))) + _1090) * _971;
        _1107 = _938;
        _1109 = _937;
        _1110 = _936;
        _1111 = _948;
        _1112 = _947;
        _1113 = _946;
        _1114 = _958;
        _1115 = _957;
        _1116 = _956;
        _1117 = _971;
        _1118 = _970;
        _1119 = _969;
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _1108;
        _1109 = _1108;
        _1110 = _1108;
        _1111 = _1108;
        _1112 = _1108;
        _1113 = _1108;
        _1114 = _1108;
        _1115 = _1108;
        _1116 = _1108;
        _1117 = _1108;
        _1118 = _1108;
        _1119 = _1108;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1152 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1156 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1179 = _798 + _584;
        float _1180 = _802 + _585;
        float _1181 = _806 + _586;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_584, _585, _586), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3456 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_584, _585, _586), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3489 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_584, _585, _586), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3522 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1108;
        _1418 = _1108;
        _1419 = _1108;
        _1420 = _1108;
        _1421 = _1108;
        _1422 = _1108;
        _1423 = _1108;
        _1424 = _1108;
        _1425 = _1108;
        _1426 = _1108;
        _1427 = _1108;
        _1428 = _1108;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1120)) + _1120;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1121)) + _1121;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1122)) + _1122;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _745 * 0.5;
    float _1486 = _746 * 0.5;
    float _1487 = _747 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1107, _1111, _1114, _1117));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _587);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1601 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1605 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1609 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1612 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1615 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1618 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1646;
        if (_1612 > 0.0)
        {
            _1646 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1646 = frontier_phi_14_12_ladder;
        }
        float _1993;
        if (_1615 > 0.0)
        {
            _1993 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1993 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1618 > 0.0)
        {
            _2328 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_37_30_ladder;
        }
        float _2330 = isnan(_1993) ? _1646 : (isnan(_1646) ? _1993 : min(_1646, _1993));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1612) + _1601;
        float _2336 = (_2331 * _1615) + _1605;
        float _2337 = (_2331 * _1618) + _1609;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2463 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_13_37_ladder = _2463.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2463.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2463.x * cbModelParam._m0[1u].y;
        }
        _1634 = frontier_phi_13_37_ladder_2;
        _1636 = frontier_phi_13_37_ladder_1;
        _1638 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1554);
        _1634 = _1622.x * cbModelParam._m0[1u].y;
        _1636 = _1622.y * cbModelParam._m0[1u].y;
        _1638 = _1622.z * cbModelParam._m0[1u].y;
    }
    float _1642 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _587);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1642 : min(cbModelParam._m0[25u].w, _1642));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1711 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1714 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1998;
        if (_1708 > 0.0)
        {
            _1998 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1998 = frontier_phi_25_21_ladder;
        }
        float _2354;
        if (_1711 > 0.0)
        {
            _2354 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2354 = frontier_phi_39_32_ladder;
        }
        float _2523;
        if (_1714 > 0.0)
        {
            _2523 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2523 = frontier_phi_53_48_ladder;
        }
        float _2525 = isnan(_2354) ? _1998 : (isnan(_1998) ? _2354 : min(_1998, _2354));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1708) + _1697;
        float _2531 = (_2526 * _1711) + _1701;
        float _2532 = (_2526 * _1714) + _1705;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1643);
            frontier_phi_22_53_ladder = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_22_53_ladder_2;
        _1735 = frontier_phi_22_53_ladder;
        _1737 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1643);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1749 = ((((1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _753)) * _737;
    float _1750 = _1749 * ((cbModelParam._m0[1u].w * (_1733 - _1634)) + _1634);
    float _1751 = _1749 * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1752 = _1749 * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_712 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1779 = _737 + (-1.0);
    float _1782 = (cbLight._m0[_1774].x * _1779) + 1.0;
    float _1783 = (cbLight._m0[_1774].y * _1779) + 1.0;
    uint _1784 = _1773 + 5u;
    float _1790 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1794 = _1773 + 4u;
    float _1800 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1804 = _1773 | 1u;
    float _1815 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_584, _585, _586));
    float _1818 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_584, _585, _586));
    float _3658 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _3669 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1823 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.3183098733425140380859375;
    float _1825 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.3183098733425140380859375;
    float _1832 = ((cbLight._m0[_1784].x * _1790) * _1825) + ((cbLight._m0[_1794].x * _1800) * _1823);
    float _1833 = ((_1790 * cbLight._m0[_1784].y) * _1825) + ((_1800 * cbLight._m0[_1794].y) * _1823);
    float _1834 = ((_1790 * cbLight._m0[_1784].z) * _1825) + ((_1800 * cbLight._m0[_1794].z) * _1823);
    uint _1836 = _1773 + 8u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _587) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1773].x + _664;
    float _1852 = cbLight._m0[_1773].y + _665;
    float _1853 = cbLight._m0[_1773].z + _666;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1773].xyz));
    float _3680 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1865 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _1866 = dot(vec3(_584, _585, _586), vec3(_1858, _1859, _1860));
    float _3702 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1870 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1858, _1859, _1860));
    float _3713 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1874 = _1850 * _1850;
    float _1878 = ((_1869 * _1869) * (_1874 + (-1.0))) + 1.0;
    float _1889 = (exp2(log2(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1890 = 1.0 - _1850;
    float _1901 = (0.5 / (((_1865 * ((_1864 * _1890) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1890) + _1850) * _1864))) * _1864;
    float _3724 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1874 / ((_1878 * _1878) * 3.141590118408203125));
    uint _1914 = _1773 + 9u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1804].w)) * _587) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1804].x + _664;
    float _1928 = cbLight._m0[_1804].y + _665;
    float _1929 = cbLight._m0[_1804].z + _666;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1804].xyz));
    float _3735 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _1941 = dot(vec3(_584, _585, _586), vec3(_1934, _1935, _1936));
    float _3746 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_1934, _1935, _1936));
    float _3757 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1926 * _1926;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1963 = 1.0 - _1926;
    float _1973 = (0.5 / (((_1865 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1963) + _1926) * _1940))) * _1940;
    float _3768 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    float _1985 = (((_1962 * cbLight._m0[_1914].x) * _1975) * _1790) + (((_1889 * cbLight._m0[_1836].x) * _1903) * _1800);
    float _1986 = (((_1962 * cbLight._m0[_1914].y) * _1975) * _1790) + (((_1889 * cbLight._m0[_1836].y) * _1903) * _1800);
    float _1987 = (((_1962 * cbLight._m0[_1914].z) * _1975) * _1790) + (((_1889 * cbLight._m0[_1836].z) * _1903) * _1800);
    float _2102;
    float _2104;
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    if (_1771.y == 0u)
    {
        float _2042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2042;
        float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2042;
        float _2045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2042;
        uvec4 _2057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2058 = _2057.x;
        uint _2069 = uint((float(_2057.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2058))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2058)));
        float _2079 = (log2(_2045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2080 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        uint _2083 = uint(isnan(14.0) ? _2080 : (isnan(_2080) ? 14.0 : min(_2080, 14.0)));
        uvec4 _2088 = texelFetch(g_lightClusterGridBuffer, int(((_2083 << 2u) + (_2069 << 6u)) >> 2u));
        uint _2089 = _2088.x;
        uint _2090 = _2057.z;
        float _2206;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        if (((((1u << ((_2090 >> 4u) & 15u)) + 4294967295u) & _2089) == 0u) || ((_2090 & 240u) == 0u))
        {
            _2206 = 0.0;
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
        }
        else
        {
            float _2207;
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            uint _2397 = 0u;
            uint _2406;
            bool _2407;
            for (;;)
            {
                _2406 = texelFetch(g_lightClassification, int((((_2083 << 5u) + (_2069 << 9u)) + (_2397 << 2u)) >> 2u)).x;
                _2407 = _2406 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2407)
                {
                    frontier_phi_50_pred = _2394;
                    frontier_phi_50_pred_1 = _2396;
                    frontier_phi_50_pred_2 = _2395;
                    frontier_phi_50_pred_3 = _2393;
                    frontier_phi_50_pred_4 = _2392;
                    frontier_phi_50_pred_5 = _2391;
                }
                else
                {
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    uint _2572;
                    _2566 = _2391;
                    _2567 = _2392;
                    _2568 = _2393;
                    _2569 = _2394;
                    _2570 = _2395;
                    _2571 = _2396;
                    _2572 = _2406;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    for (;;)
                    {
                        uint _2576 = uint(findLSB(_2572)) + (_2397 << 5u);
                        uint _2573 = (_2572 + 4294967295u) & _2572;
                        uint _2578 = _2576 * 48u;
                        vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 3u)).x));
                        uint _2598 = (_2576 * 48u) + 4u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2617 = (_2576 * 48u) + 8u;
                        vec3 _2628 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x));
                        float _2632 = _2592.x - _2043;
                        float _2633 = _2592.y - _2044;
                        float _2634 = _2592.z - _2045;
                        float _2635 = dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634));
                        float _2638 = inversesqrt(_2635);
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2642 = dot(vec3(_693, _696, _699), vec3(_2639, _2640, _2641));
                        float _2647 = 1.0 - (_2635 * _2592.w);
                        float _3789 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                        float _2649 = sqrt(_2635) * _2611.w;
                        float _2652 = 1.39999997615814208984375 / (_2649 + 1.39999997615814208984375);
                        float _2653 = _2652 * _2652;
                        float _2656 = ((1.0 - _2653) * _2642) + _2653;
                        float _2659 = _2649 * _2649;
                        float _2663 = ((isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))) * _2648) / ((_2659 * 0.699999988079071044921875) + 1.0);
                        float _2667 = (-0.0) - _2043;
                        float _2668 = (-0.0) - _2044;
                        float _2669 = (-0.0) - _2045;
                        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2684 = exp2(log2(1.0 / ((_2659 * 3.5) + 5.0)) * 0.25);
                        float _2685 = 1.0 - _753;
                        float _2692 = sqrt(1.0 - ((1.0 - (_2685 * _2685)) * (1.0 - (_2684 * _2684))));
                        float _2693 = _2692 * _2692;
                        float _2694 = _2693 * _2693;
                        float _2695 = _2674 + _2639;
                        float _2696 = _2675 + _2640;
                        float _2697 = _2676 + _2641;
                        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
                        float _2705 = dot(vec3(_693, _696, _699), vec3(_2674, _2675, _2676));
                        float _3805 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2708 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                        float _2709 = dot(vec3(_693, _696, _699), vec3(_2701 * _2695, _2701 * _2696, _2701 * _2697));
                        float _3816 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2716 = ((_2712 * _2712) * (_2694 + (-1.0))) + 1.0;
                        float _2717 = _2652 * _2693;
                        float _2718 = _2717 * _2717;
                        float _2721 = ((1.0 - _2718) * _2642) + _2718;
                        float _3827 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2723 = 1.0 - _2693;
                        float _2733 = (0.5 / (((_2722 * ((_2708 * _2723) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2723) + _2693) * _2708))) * _2722;
                        float _3838 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2744 = (((_2694 * 3.1415927410125732421875) * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) / ((_2716 * _2716) * ((_2659 * 2.1991131305694580078125) + 3.141590118408203125))) * _2648;
                        _2475 = (_2663 * _2611.x) + _2569;
                        _2476 = (_2663 * _2611.y) + _2570;
                        _2477 = (_2663 * _2611.z) + _2571;
                        _2472 = (_2744 * _2628.x) + _2566;
                        _2473 = (_2744 * _2628.y) + _2567;
                        _2474 = (_2744 * _2628.z) + _2568;
                        if (_2573 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2566 = _2472;
                            _2567 = _2473;
                            _2568 = _2474;
                            _2569 = _2475;
                            _2570 = _2476;
                            _2571 = _2477;
                            _2572 = _2573;
                        }
                    }
                    frontier_phi_50_pred = _2475;
                    frontier_phi_50_pred_1 = _2477;
                    frontier_phi_50_pred_2 = _2476;
                    frontier_phi_50_pred_3 = _2474;
                    frontier_phi_50_pred_4 = _2473;
                    frontier_phi_50_pred_5 = _2472;
                }
                _2213 = frontier_phi_50_pred;
                _2217 = frontier_phi_50_pred_1;
                _2215 = frontier_phi_50_pred_2;
                _2211 = frontier_phi_50_pred_3;
                _2209 = frontier_phi_50_pred_4;
                _2207 = frontier_phi_50_pred_5;
                uint _2398 = _2397 + 1u;
                if (_2398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2391 = _2207;
                    _2392 = _2209;
                    _2393 = _2211;
                    _2394 = _2213;
                    _2395 = _2215;
                    _2396 = _2217;
                    _2397 = _2398;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2206 = _2207;
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
        }
        uvec4 _2220 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2221 = _2220.z;
        uint _2223 = (_2221 >> 8u) & 15u;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((4294967295u << _2223) & _2089) == 0u)
        {
            _2359 = _2206;
            _2361 = _2208;
            _2363 = _2210;
            _2365 = _2212;
            _2367 = _2214;
            _2369 = _2216;
        }
        else
        {
            float _2384 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
            float _2385 = _2384 * _2043;
            float _2386 = _2384 * _2044;
            float _2387 = _2384 * _2045;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2223 < ((_2221 >> 12u) & 15u))
            {
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2368;
                float _2370;
                float _2549 = _2206;
                float _2550 = _2208;
                float _2551 = _2210;
                float _2552 = _2212;
                float _2553 = _2214;
                float _2554 = _2216;
                uint _2555 = _2223;
                uint _2564;
                bool _2565;
                for (;;)
                {
                    _2564 = texelFetch(g_lightClassification, int((((_2083 << 5u) + (_2069 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                    _2565 = _2564 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2565)
                    {
                        frontier_phi_59_pred = _2554;
                        frontier_phi_59_pred_1 = _2553;
                        frontier_phi_59_pred_2 = _2552;
                        frontier_phi_59_pred_3 = _2551;
                        frontier_phi_59_pred_4 = _2550;
                        frontier_phi_59_pred_5 = _2549;
                    }
                    else
                    {
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2783 = _2549;
                        float _2784 = _2550;
                        float _2785 = _2551;
                        float _2786 = _2552;
                        float _2787 = _2553;
                        float _2788 = _2554;
                        uint _2789 = _2564;
                        uint _2790;
                        vec4 _2815;
                        float _2816;
                        vec4 _2831;
                        vec3 _2843;
                        vec4 _2858;
                        vec4 _2874;
                        float _2921;
                        bool _2922;
                        for (;;)
                        {
                            uint _2800 = ((_2555 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2789));
                            _2790 = (_2789 + 4294967295u) & _2789;
                            uint _2802 = _2800 * 40u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            _2816 = _2815.w;
                            uint _2818 = (_2800 * 40u) + 4u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2800 * 40u) + 8u;
                            _2843 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x));
                            uint _2845 = (_2800 * 40u) + 16u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2800 * 40u) + 20u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2800 * 40u) + 24u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2896 = (_2800 * 40u) + 28u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            _2921 = fma(_2045, _2909.z, fma(_2044, _2909.y, _2909.x * _2043)) + _2909.w;
                            _2922 = !((fma(_2045, _2890.z, fma(_2044, _2890.y, _2890.x * _2043)) + _2890.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2922)
                            {
                                float _2949 = _2815.x - _2043;
                                float _2950 = _2815.y - _2044;
                                float _2951 = _2815.z - _2045;
                                float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                                float _2955 = inversesqrt(_2952);
                                float _2956 = _2955 * _2949;
                                float _2957 = _2955 * _2950;
                                float _2958 = _2955 * _2951;
                                float _2962 = 1.0 - (_2952 / (_2816 * _2816));
                                float _3849 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
                                float _2967 = sqrt(_2952) * _2831.w;
                                float _2969 = 1.39999997615814208984375 / (_2967 + 1.39999997615814208984375);
                                float _2970 = _2969 * _2969;
                                float _2973 = ((1.0 - _2970) * dot(vec3(_2956, _2957, _2958), vec3(_693, _696, _699))) + _2970;
                                float _2976 = _2967 * _2967;
                                float _2980 = (fma(_2045, _2858.z, fma(_2044, _2858.y, _2858.x * _2043)) + _2858.w) / _2921;
                                float _2981 = (fma(_2045, _2874.z, fma(_2044, _2874.y, _2874.x * _2043)) + _2874.w) / _2921;
                                float _2985 = 1.0 - dot(vec2(_2980, _2981), vec2(_2980, _2981));
                                float _3865 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                                float _2987 = _2986 * (((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2963) / ((_2976 * 0.699999988079071044921875) + 1.0));
                                float _2999 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                                float _3000 = 1.0 - _753;
                                float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                                float _3008 = _3007 * _3007;
                                float _3009 = _3008 * _3008;
                                float _3010 = _2956 - _2385;
                                float _3011 = _2957 - _2386;
                                float _3012 = _2958 - _2387;
                                float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                                float _3020 = dot(vec3(_693, _696, _699), vec3((-0.0) - _2385, (-0.0) - _2386, (-0.0) - _2387));
                                float _3876 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3023 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _3024 = dot(vec3(_693, _696, _699), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                                float _3887 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3027 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                                float _3032 = _2969 * _3008;
                                float _3033 = _3032 * _3032;
                                float _3039 = ((1.0 - _3033) * dot(vec3(_693, _696, _699), vec3(_2956, _2957, _2958))) + _3033;
                                float _3898 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                                float _3041 = 1.0 - _3008;
                                float _3051 = (0.5 / (((_3040 * ((_3023 * _3041) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3040 * _3041) + _3008) * _3023))) * _3040;
                                float _3909 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3061 = (_2986 * _2963) * (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) / ((_3031 * _3031) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _2987 * _2831.z;
                                frontier_phi_65_pred_1 = _2987 * _2831.y;
                                frontier_phi_65_pred_2 = _2987 * _2831.x;
                                frontier_phi_65_pred_3 = _3061 * _2843.z;
                                frontier_phi_65_pred_4 = _3061 * _2843.y;
                                frontier_phi_65_pred_5 = _3061 * _2843.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3070 = frontier_phi_65_pred;
                            _3069 = frontier_phi_65_pred_1;
                            _3068 = frontier_phi_65_pred_2;
                            _3067 = frontier_phi_65_pred_3;
                            _3066 = frontier_phi_65_pred_4;
                            _3065 = frontier_phi_65_pred_5;
                            _2773 = _3068 + _2786;
                            _2774 = _3069 + _2787;
                            _2775 = _3070 + _2788;
                            _2770 = _3065 + _2783;
                            _2771 = _3066 + _2784;
                            _2772 = _3067 + _2785;
                            if (_2790 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2790;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2775;
                        frontier_phi_59_pred_1 = _2774;
                        frontier_phi_59_pred_2 = _2773;
                        frontier_phi_59_pred_3 = _2772;
                        frontier_phi_59_pred_4 = _2771;
                        frontier_phi_59_pred_5 = _2770;
                    }
                    _2370 = frontier_phi_59_pred;
                    _2368 = frontier_phi_59_pred_1;
                    _2366 = frontier_phi_59_pred_2;
                    _2364 = frontier_phi_59_pred_3;
                    _2362 = frontier_phi_59_pred_4;
                    _2360 = frontier_phi_59_pred_5;
                    uint _2556 = _2555 + 1u;
                    if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2549 = _2360;
                        _2550 = _2362;
                        _2551 = _2364;
                        _2552 = _2366;
                        _2553 = _2368;
                        _2554 = _2370;
                        _2555 = _2556;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2366;
                frontier_phi_41_42_ladder_1 = _2370;
                frontier_phi_41_42_ladder_2 = _2368;
                frontier_phi_41_42_ladder_3 = _2364;
                frontier_phi_41_42_ladder_4 = _2362;
                frontier_phi_41_42_ladder_5 = _2360;
            }
            else
            {
                frontier_phi_41_42_ladder = _2212;
                frontier_phi_41_42_ladder_1 = _2216;
                frontier_phi_41_42_ladder_2 = _2214;
                frontier_phi_41_42_ladder_3 = _2210;
                frontier_phi_41_42_ladder_4 = _2208;
                frontier_phi_41_42_ladder_5 = _2206;
            }
            _2359 = frontier_phi_41_42_ladder_5;
            _2361 = frontier_phi_41_42_ladder_4;
            _2363 = frontier_phi_41_42_ladder_3;
            _2365 = frontier_phi_41_42_ladder;
            _2367 = frontier_phi_41_42_ladder_2;
            _2369 = frontier_phi_41_42_ladder_1;
        }
        float _2374 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2102 = (_2374 * _2365) + _1832;
        _2104 = (_2374 * _2367) + _1833;
        _2106 = (_2374 * _2369) + _1834;
        _2108 = ((_2359 * 0.039999999105930328369140625) * _2374) + _1985;
        _2110 = ((_2361 * 0.039999999105930328369140625) * _2374) + _1986;
        _2112 = ((_2363 * 0.039999999105930328369140625) * _2374) + _1987;
    }
    else
    {
        _2102 = _1832;
        _2104 = _1833;
        _2106 = _1834;
        _2108 = _1985;
        _2110 = _1986;
        _2112 = _1987;
    }
    uint _2118 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _2124 = (((((_400 * cbMtdParam._m0[12u].x) - _544) * TEXCOORD_6.y) + _544) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2118].x;
    float _2125 = (((((_401 * cbMtdParam._m0[12u].y) - _545) * TEXCOORD_6.y) + _545) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2118].y;
    float _2126 = (((((_402 * cbMtdParam._m0[12u].z) - _546) * TEXCOORD_6.y) + _546) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2118].z;
    float _3925 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3936 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3947 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2143 = (((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2102 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _737))) + ((_2108 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + _2124;
    float _2145 = (_2125 + ((_2110 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2104 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _737)));
    float _2147 = (_2126 + ((_2112 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1543)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2106 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _737)));
    float _3973 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2160 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    uint _2161 = _712 + 6u;
    float _2169 = _672 / cbSceneParam._m0[86u].x;
    float _2170 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2184 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, (log2((isnan(cbSceneParam._m0[77u].w) ? _606 : (isnan(_606) ? cbSceneParam._m0[77u].w : min(_606, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2186 = _2184.x;
    float _2187 = _2184.y;
    float _2188 = _2184.z;
    float _2189 = _2184.w;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_606 > cbSceneParam._m0[78u].w)
    {
        float _2231 = isnan(_606) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _606 : min(cbSceneParam._m0[80u].w, _606));
        float _2232 = _2231 / _606;
        float _2243 = _2232 * _657;
        float _2244 = _658 * _2232;
        float _2245 = (-0.0) - _2244;
        float _2246 = _2232 * _659;
        float _2248 = (cbSceneParam._m0[77u].w * _2245) / _2231;
        float _2249 = _2248 + cbSceneParam._m0[79u].w;
        float _2250 = cbSceneParam._m0[79u].w - _2244;
        float _2256 = sqrt(((_2243 * _2243) + (_2244 * _2244)) + (_2246 * _2246));
        float _2259 = (1.0 - (cbSceneParam._m0[77u].w / _2231)) * _2256;
        float _2265 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2267 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2485;
        if (abs((_2245 - _2248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2485 = ((((_2249 > 0.0) ? exp2(_2265 * _2249) : (2.0 - exp2(_2267 * _2249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2259;
        }
        else
        {
            float _2420 = 1.0 / cbSceneParam._m0[80u].x;
            float _2421 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : max(_2249, _2250));
            float _2422 = isnan(_2250) ? _2249 : (isnan(_2249) ? _2250 : min(_2249, _2250));
            float _2431 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : min(_2421, 0.0));
            float _2432 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : min(_2422, 0.0));
            _2485 = ((abs(_2256 / _2245) * cbSceneParam._m0[80u].y) * ((((_2431 - _2432) * 2.0) - ((exp2(_2265 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)))) - exp2(_2265 * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0))))) * _2420)) - ((exp2(_2267 * _2431) - exp2(_2267 * _2432)) * _2420))) + (_2259 * cbSceneParam._m0[80u].z);
        }
        vec4 _2487 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2169, _2170, 1.0), 0.0);
        float _2496 = exp2((_2485 * (-1.44269502162933349609375)) * (1.0 - _2487.w));
        float _2497 = log2(_2496);
        float _2513 = log2(_2189);
        _2269 = (exp2(_2513 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].x)) * _2487.x) / cbSceneParam._m0[78u].x)) + _2186;
        _2271 = (exp2(_2513 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].y)) * _2487.y) / cbSceneParam._m0[78u].y)) + _2187;
        _2273 = (exp2(_2513 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].z)) * _2487.z) / cbSceneParam._m0[78u].z)) + _2188;
        _2275 = _2496 * _2189;
    }
    else
    {
        _2269 = _2186;
        _2271 = _2187;
        _2273 = _2188;
        _2275 = _2189;
    }
    float _2287 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2288 = _2287 == 3.0;
    float _2289 = log2(_2275);
    float _2293 = exp2(_2289 * cbSceneParam._m0[78u].x);
    float _2294 = exp2(_2289 * cbSceneParam._m0[78u].y);
    float _2295 = exp2(_2289 * cbSceneParam._m0[78u].z);
    float _2296 = _2293 * (isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)));
    float _2297 = _2294 * (isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)));
    float _2298 = _2295 * (isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)));
    float _2307 = (_2287 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2307 * (_2288 ? _2296 : (_2296 + (cbSceneParam._m0[72u].w * _2269)));
    SV_Target.y = _2307 * (_2288 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2271)));
    SV_Target.z = _2307 * (_2288 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2273)));
    SV_Target.w = cbInstanceData._m0[_2161].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2124) * _2160) * _2293) * _2307;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2125) * _2160) * _2294) * _2307;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2126) * _2160) * _2295) * _2307;
    SV_Target_1.w = cbInstanceData._m0[_2161].w;
}


