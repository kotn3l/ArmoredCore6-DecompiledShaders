#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec3 TEXCOORD_6;
layout(location = 4, component = 3) out float TEXCOORD_12;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    TEXCOORD_6.z = 0.0;
    TEXCOORD_12 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _189 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _213 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _215 = texelFetch(g_InstanceIndexBuffer, int(_213));
    uint _216 = _215.x;
    precise float _217 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _222 = isnan(_217) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _217 : max(0.001000000047497451305389404296875, _217));
    precise float _224 = BLENDWEIGHT.x / _222;
    precise float _225 = BLENDWEIGHT.y / _222;
    precise float _226 = BLENDWEIGHT.z / _222;
    precise float _227 = BLENDWEIGHT.w / _222;
    uint _229 = _216 * 13u;
    uvec4 _234 = floatBitsToUint(cbInstanceData._m0[_229 + 4u]);
    uint _235 = _234.x;
    uint _237 = (_235 + uint(float(BLENDINDICES.x))) * 3u;
    uint _244 = _237 + 1u;
    uint _251 = _237 + 2u;
    precise float _258 = _224 * cbObjMatrix._m0[_237].x;
    precise float _259 = _224 * cbObjMatrix._m0[_244].x;
    precise float _260 = _224 * cbObjMatrix._m0[_251].x;
    precise float _261 = _224 * cbObjMatrix._m0[_237].y;
    precise float _262 = _224 * cbObjMatrix._m0[_244].y;
    precise float _263 = _224 * cbObjMatrix._m0[_251].y;
    precise float _264 = _224 * cbObjMatrix._m0[_237].z;
    precise float _265 = _224 * cbObjMatrix._m0[_244].z;
    precise float _266 = _224 * cbObjMatrix._m0[_251].z;
    precise float _267 = _224 * cbObjMatrix._m0[_237].w;
    precise float _268 = _224 * cbObjMatrix._m0[_244].w;
    precise float _269 = _224 * cbObjMatrix._m0[_251].w;
    uint _272 = (_235 + uint(float(BLENDINDICES.y))) * 3u;
    uint _279 = _272 + 1u;
    uint _286 = _272 + 2u;
    precise float _293 = _225 * cbObjMatrix._m0[_272].x;
    precise float _294 = _225 * cbObjMatrix._m0[_279].x;
    precise float _295 = _225 * cbObjMatrix._m0[_286].x;
    precise float _296 = _225 * cbObjMatrix._m0[_272].y;
    precise float _297 = _225 * cbObjMatrix._m0[_279].y;
    precise float _298 = _225 * cbObjMatrix._m0[_286].y;
    precise float _299 = _225 * cbObjMatrix._m0[_272].z;
    precise float _300 = _225 * cbObjMatrix._m0[_279].z;
    precise float _301 = _225 * cbObjMatrix._m0[_286].z;
    precise float _302 = _225 * cbObjMatrix._m0[_272].w;
    precise float _303 = _225 * cbObjMatrix._m0[_279].w;
    precise float _304 = _225 * cbObjMatrix._m0[_286].w;
    precise float _305 = _258 + _293;
    precise float _306 = _259 + _294;
    precise float _307 = _260 + _295;
    precise float _308 = _261 + _296;
    precise float _309 = _262 + _297;
    precise float _310 = _263 + _298;
    precise float _311 = _264 + _299;
    precise float _312 = _265 + _300;
    precise float _313 = _266 + _301;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    uint _319 = (_235 + uint(float(BLENDINDICES.z))) * 3u;
    uint _326 = _319 + 1u;
    uint _333 = _319 + 2u;
    precise float _340 = _226 * cbObjMatrix._m0[_319].x;
    precise float _341 = _226 * cbObjMatrix._m0[_326].x;
    precise float _342 = _226 * cbObjMatrix._m0[_333].x;
    precise float _343 = _226 * cbObjMatrix._m0[_319].y;
    precise float _344 = _226 * cbObjMatrix._m0[_326].y;
    precise float _345 = _226 * cbObjMatrix._m0[_333].y;
    precise float _346 = _226 * cbObjMatrix._m0[_319].z;
    precise float _347 = _226 * cbObjMatrix._m0[_326].z;
    precise float _348 = _226 * cbObjMatrix._m0[_333].z;
    precise float _349 = _226 * cbObjMatrix._m0[_319].w;
    precise float _350 = _226 * cbObjMatrix._m0[_326].w;
    precise float _351 = _226 * cbObjMatrix._m0[_333].w;
    precise float _352 = _305 + _340;
    precise float _353 = _306 + _341;
    precise float _354 = _307 + _342;
    precise float _355 = _308 + _343;
    precise float _356 = _309 + _344;
    precise float _357 = _310 + _345;
    precise float _358 = _311 + _346;
    precise float _359 = _312 + _347;
    precise float _360 = _313 + _348;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    uint _366 = (_235 + uint(float(BLENDINDICES.w))) * 3u;
    uint _373 = _366 + 1u;
    uint _380 = _366 + 2u;
    precise float _387 = _227 * cbObjMatrix._m0[_366].x;
    precise float _388 = _227 * cbObjMatrix._m0[_373].x;
    precise float _389 = _227 * cbObjMatrix._m0[_380].x;
    precise float _390 = _227 * cbObjMatrix._m0[_366].y;
    precise float _391 = _227 * cbObjMatrix._m0[_373].y;
    precise float _392 = _227 * cbObjMatrix._m0[_380].y;
    precise float _393 = _227 * cbObjMatrix._m0[_366].z;
    precise float _394 = _227 * cbObjMatrix._m0[_373].z;
    precise float _395 = _227 * cbObjMatrix._m0[_380].z;
    precise float _396 = _227 * cbObjMatrix._m0[_366].w;
    precise float _397 = _227 * cbObjMatrix._m0[_373].w;
    precise float _398 = _227 * cbObjMatrix._m0[_380].w;
    precise float _399 = _352 + _387;
    precise float _400 = _353 + _388;
    precise float _401 = _354 + _389;
    precise float _402 = _355 + _390;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = POSITION.x * _399;
    precise float _412 = POSITION.y * _402;
    precise float _413 = _412 + _411;
    precise float _414 = POSITION.z * _405;
    precise float _415 = _414 + _413;
    precise float _416 = 1.0 * _408;
    precise float _417 = _416 + _415;
    precise float _418 = POSITION.x * _400;
    precise float _419 = POSITION.y * _403;
    precise float _420 = _419 + _418;
    precise float _421 = POSITION.z * _406;
    precise float _422 = _421 + _420;
    precise float _423 = 1.0 * _409;
    precise float _424 = _423 + _422;
    precise float _425 = POSITION.x * _401;
    precise float _426 = POSITION.y * _404;
    precise float _427 = _426 + _425;
    precise float _428 = POSITION.z * _407;
    precise float _429 = _428 + _427;
    precise float _430 = 1.0 * _410;
    precise float _431 = _430 + _429;
    float _437 = cbSceneParam._m0[3u].x - _417;
    float _438 = cbSceneParam._m0[3u].y - _424;
    float _439 = cbSceneParam._m0[3u].z - _431;
    precise float _465 = _417 - cbSceneParam._m0[3u].x;
    precise float _466 = _424 - cbSceneParam._m0[3u].y;
    precise float _467 = _431 - cbSceneParam._m0[3u].z;
    precise float _495 = _465 * cbSceneParam._m0[24u].x;
    precise float _496 = _466 * cbSceneParam._m0[24u].y;
    precise float _497 = _496 + _495;
    precise float _498 = _467 * cbSceneParam._m0[24u].z;
    precise float _499 = _498 + _497;
    precise float _500 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _501 = _500 + _499;
    precise float _502 = _465 * cbSceneParam._m0[25u].x;
    precise float _503 = _466 * cbSceneParam._m0[25u].y;
    precise float _504 = _503 + _502;
    precise float _505 = _467 * cbSceneParam._m0[25u].z;
    precise float _506 = _505 + _504;
    precise float _507 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _508 = _507 + _506;
    precise float _509 = _465 * cbSceneParam._m0[26u].x;
    precise float _510 = _466 * cbSceneParam._m0[26u].y;
    precise float _511 = _510 + _509;
    precise float _512 = _467 * cbSceneParam._m0[26u].z;
    precise float _513 = _512 + _511;
    precise float _514 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _515 = _514 + _513;
    precise float _516 = _465 * cbSceneParam._m0[27u].x;
    precise float _517 = _466 * cbSceneParam._m0[27u].y;
    precise float _518 = _517 + _516;
    precise float _519 = _467 * cbSceneParam._m0[27u].z;
    precise float _520 = _519 + _518;
    precise float _521 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _522 = _521 + _520;
    gl_Position.x = _501;
    gl_Position.y = _508;
    gl_Position.z = _515;
    gl_Position.w = _522;
    NORMAL_1.x = fma(_192, _405, fma(_191, _402, _399 * _189));
    NORMAL_1.y = fma(_192, _406, fma(_191, _403, _400 * _189));
    NORMAL_1.z = fma(_192, _407, fma(_191, _404, _401 * _189));
    NORMAL_1.w = float(_216);
    TANGENT_1.x = fma(_203, _405, fma(_202, _402, _399 * _201));
    TANGENT_1.y = fma(_203, _406, fma(_202, _403, _400 * _201));
    TANGENT_1.z = fma(_203, _407, fma(_202, _404, _401 * _201));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_6.x = TEXCOORD_1.x;
    TEXCOORD_6.y = TEXCOORD_1.y;
    TEXCOORD_6.z = COLOR_1.x;
    TEXCOORD_12 = sqrt(((_437 * _437) + (_438 * _438)) + (_439 * _439));
    gl_ClipDistance[0u] = dot(vec4(_501, _508, _515, _522), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_501, _508, _515, _522), vec4(cbInstanceData._m0[_229 + 3u]));
}


