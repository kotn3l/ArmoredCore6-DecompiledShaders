#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1110;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _237 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _250 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_236 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_237 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _256 = _250.x * cbMtdParam._m0[9u].x;
    float _257 = _250.y * cbMtdParam._m0[9u].y;
    float _258 = _250.z * cbMtdParam._m0[9u].z;
    float _262 = _256 - (_256 * TEXCOORD_6.x);
    float _263 = _257 - (_257 * TEXCOORD_6.x);
    float _264 = _258 - (_258 * TEXCOORD_6.x);
    float _268 = _262 - (_262 * TEXCOORD_6.y);
    float _269 = _263 - (_263 * TEXCOORD_6.y);
    float _270 = _264 - (_264 * TEXCOORD_6.y);
    vec4 _286 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _236) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _237) + cbTextureTilingScale._m0[1u].w));
    float _294 = (_286.x * 2.0) + (-1.0);
    float _296 = (_286.y * 2.0) + (-1.0);
    float _297 = dot(vec2(_294, _296), vec2(_294, _296));
    float _3217 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _303 = sqrt(1.0 - (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))));
    float _304 = _286.z * cbMtdParam._m0[16u].w;
    float _306 = _304 - (_304 * TEXCOORD_6.x);
    float _308 = _306 - (_306 * TEXCOORD_6.y);
    vec4 _340 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _344 = cbPerFrame._m0[22u].x * 2.0;
    float _345 = _344 * cbMtdParam._m0[15u].w;
    float _348 = (_340.x * 0.5) + (-0.25);
    float _351 = (_340.y * 0.5) + (-0.25);
    float _352 = _351 * cbMtdParam._m0[15u].z;
    float _354 = (-0.0) - (cbMtdParam._m0[15u].z * _348);
    float _356 = fract(_345);
    float _358 = fract(_345 + 0.5);
    float _369 = abs((_356 * 2.0) + (-1.0));
    vec4 _386 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_356 * _354) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_352 * _356) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _388 = _386.x;
    float _389 = _386.y;
    float _390 = _386.z;
    vec4 _391 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_358 * _354) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_352 * _358) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _402 = ((_391.x - _388) * _369) + _388;
    float _403 = ((_391.y - _389) * _369) + _389;
    float _404 = ((_391.z - _390) * _369) + _390;
    vec4 _456 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _236) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _237) + cbTextureTilingScale._m0[2u].w));
    float _477 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _478 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _481 = _344 * cbMtdParam._m0[16u].z;
    float _482 = _351 * cbMtdParam._m0[16u].y;
    float _484 = (-0.0) - (cbMtdParam._m0[16u].y * _348);
    float _485 = fract(_481);
    float _487 = fract(_481 + 0.5);
    float _498 = abs((_485 * 2.0) + (-1.0));
    vec4 _515 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_485 * _484) + _477) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_482 * _485) + _478) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    vec4 _520 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_487 * _484) + _477) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_482 * _487) + _478) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _537 = ((((_520.x - _517) * _498) + _517) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _456.x);
    float _538 = ((((_520.y - _518) * _498) + _518) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _456.y);
    float _539 = ((((_520.z - _519) * _498) + _519) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _456.z);
    float _546 = ((((cbMtdParam._m0[16u].x * _402) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _537) * TEXCOORD_6.x) + _537;
    float _547 = ((((cbMtdParam._m0[16u].x * _403) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _538) * TEXCOORD_6.x) + _538;
    float _548 = ((((cbMtdParam._m0[16u].x * _404) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _539) * TEXCOORD_6.x) + _539;
    float _564 = _294 - (_294 * TEXCOORD_6.x);
    float _565 = _296 - (_296 * TEXCOORD_6.x);
    float _566 = _303 - (_303 * TEXCOORD_6.x);
    float _570 = _564 - (_564 * TEXCOORD_6.y);
    float _571 = _565 - (_565 * TEXCOORD_6.y);
    float _572 = _566 - (_566 * TEXCOORD_6.y);
    float _575 = fma(_572, _212 * NORMAL.x, fma(_571, _219 * TANGENT.x, (_205 * _198) * _570));
    float _578 = fma(_572, _212 * NORMAL.y, fma(_571, _219 * TANGENT.y, (_205 * _199) * _570));
    float _581 = fma(_572, _212 * NORMAL.z, fma(_571, _219 * TANGENT.z, (_205 * _200) * _570));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _3228 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _589 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3250 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3261 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _659 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _649);
    float _660 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _649);
    float _661 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _649);
    float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
    float _666 = _659 * _665;
    float _667 = _660 * _665;
    float _668 = _661 * _665;
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _695 = fma(_588, cbSceneParam._m0[5u].z, fma(_587, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _586));
    float _698 = fma(_588, cbSceneParam._m0[6u].z, fma(_587, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _586));
    float _701 = fma(_588, cbSceneParam._m0[7u].z, fma(_587, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _586));
    uint _714 = uint(roundEven(NORMAL.w)) * 13u;
    uint _715 = _714 + 9u;
    uint _716 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3272 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
    float _3283 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _739 = _736.x * TEXCOORD_6.z;
    float _740 = dot(vec3(_586, _587, _588), vec3(_666, _667, _668));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _586) - _666;
    float _748 = (_743 * _587) - _667;
    float _749 = (_743 * _588) - _668;
    float _753 = abs(dot(vec3(_666, _667, _668), vec3(_586, _587, _588)));
    float _3305 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_589);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _839 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _843 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _867 = _800 + _586;
        float _868 = _804 + _587;
        float _869 = _808 + _588;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _835;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _839;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _843;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_835 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_839 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_843 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_586, _587, _588), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3353 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_586, _587, _588), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3386 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_586, _587, _588), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3419 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1154 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1158 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1181 = _800 + _586;
        float _1182 = _804 + _587;
        float _1183 = _808 + _588;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_586, _587, _588), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3482 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_586, _587, _588), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3515 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_586, _587, _588), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3548 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1110;
        _1420 = _1110;
        _1421 = _1110;
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1122)) + _1122;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1123)) + _1123;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1124)) + _1124;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _747 * 0.5;
    float _1488 = _748 * 0.5;
    float _1489 = _749 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1617 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1620 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1648 = frontier_phi_14_12_ladder;
        }
        float _2019;
        if (_1617 > 0.0)
        {
            _2019 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2019 = frontier_phi_23_19_ladder;
        }
        float _2354;
        if (_1620 > 0.0)
        {
            _2354 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2354 = frontier_phi_37_30_ladder;
        }
        float _2356 = isnan(_2019) ? _1648 : (isnan(_1648) ? _2019 : min(_1648, _2019));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1614) + _1603;
        float _2362 = (_2357 * _1617) + _1607;
        float _2363 = (_2357 * _1620) + _1611;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2364;
        float _2367 = _2364 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2363 > _2367) || ((_2363 < _2365) || ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 < _2365) || (_2361 > _2367))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_13_37_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_13_37_ladder_2;
        _1638 = frontier_phi_13_37_ladder_1;
        _1640 = frontier_phi_13_37_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1556);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1699 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1703 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1707 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1710 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1713 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1716 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _2024;
        if (_1710 > 0.0)
        {
            _2024 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2024 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1713 > 0.0)
        {
            _2380 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_39_32_ladder;
        }
        float _2549;
        if (_1716 > 0.0)
        {
            _2549 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2549 = frontier_phi_53_48_ladder;
        }
        float _2551 = isnan(_2380) ? _2024 : (isnan(_2024) ? _2380 : min(_2024, _2380));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _1710) + _1699;
        float _2557 = (_2552 * _1713) + _1703;
        float _2558 = (_2552 * _1716) + _1707;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2559;
        float _2562 = _2559 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2558 > _2562) || ((_2558 < _2560) || ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 < _2560) || (_2556 > _2562))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2558, cbModelParam._m0[17u].z, fma(_2557, cbModelParam._m0[17u].y, _2556 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2558, cbModelParam._m0[18u].z, fma(_2557, cbModelParam._m0[18u].y, _2556 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2558, cbModelParam._m0[19u].z, fma(_2557, cbModelParam._m0[19u].y, _2556 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_22_53_ladder = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1735 = frontier_phi_22_53_ladder_2;
        _1737 = frontier_phi_22_53_ladder;
        _1739 = frontier_phi_22_53_ladder_1;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1645);
        _1735 = _1719.x * cbModelParam._m0[1u].z;
        _1737 = _1719.y * cbModelParam._m0[1u].z;
        _1739 = _1719.z * cbModelParam._m0[1u].z;
    }
    float _1751 = ((((1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_768 * _755)) * _739;
    float _1752 = _1751 * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1753 = _1751 * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1754 = _1751 * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, _1752 * cbSceneParam._m0[91u].x));
    vec4 _1771 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_674, _675));
    float _1773 = _1771.w;
    float _1785 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1773);
    float _1786 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1773);
    float _1787 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1773);
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_714 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1799 = _739 + (-1.0);
    float _1802 = (cbLight._m0[_1794].x * _1799) + 1.0;
    float _1803 = (cbLight._m0[_1794].y * _1799) + 1.0;
    uint _1804 = _1793 + 5u;
    float _1810 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1814 = _1793 + 4u;
    float _1823 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1827 = _1793 | 1u;
    float _1838 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_586, _587, _588));
    float _1841 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_586, _587, _588));
    float _3684 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _3695 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1846 = (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.3183098733425140380859375;
    float _1848 = (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.3183098733425140380859375;
    float _1855 = ((cbLight._m0[_1804].x * _1810) * _1848) + (((cbLight._m0[_1814].x * _1785) * _1823) * _1846);
    float _1856 = ((_1810 * cbLight._m0[_1804].y) * _1848) + (((cbLight._m0[_1814].y * _1786) * _1823) * _1846);
    float _1857 = ((_1810 * cbLight._m0[_1804].z) * _1848) + (((cbLight._m0[_1814].z * _1787) * _1823) * _1846);
    uint _1859 = _1793 + 8u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _589) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1793].x + _666;
    float _1875 = cbLight._m0[_1793].y + _667;
    float _1876 = cbLight._m0[_1793].z + _668;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1793].xyz));
    float _3706 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1888 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _1889 = dot(vec3(_586, _587, _588), vec3(_1881, _1882, _1883));
    float _3728 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1881, _1882, _1883));
    float _3739 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1873 * _1873;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1913 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1888 * ((_1887 * _1913) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1913) + _1873) * _1887))) * _1887;
    float _3750 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    uint _1940 = _1793 + 9u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _589) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1827].x + _666;
    float _1954 = cbLight._m0[_1827].y + _667;
    float _1955 = cbLight._m0[_1827].z + _668;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_586, _587, _588), vec3(cbLight._m0[_1827].xyz));
    float _3761 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _1967 = dot(vec3(_586, _587, _588), vec3(_1960, _1961, _1962));
    float _3772 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1960, _1961, _1962));
    float _3783 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1952 * _1952;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1988 = (exp2(log2(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1989 = 1.0 - _1952;
    float _1999 = (0.5 / (((_1888 * ((_1966 * _1989) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1989) + _1952) * _1966))) * _1966;
    float _3794 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    float _2011 = (((_1988 * cbLight._m0[_1940].x) * _2001) * _1810) + ((((cbLight._m0[_1859].x * _1785) * _1912) * _1926) * _1823);
    float _2012 = (((_1988 * cbLight._m0[_1940].y) * _2001) * _1810) + ((((cbLight._m0[_1859].y * _1786) * _1912) * _1926) * _1823);
    float _2013 = (((_1988 * cbLight._m0[_1940].z) * _2001) * _1810) + ((((cbLight._m0[_1859].z * _1787) * _1912) * _1926) * _1823);
    float _2128;
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    if (_1791.y == 0u)
    {
        float _2068 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2069 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2068;
        float _2070 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2068;
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2068;
        uvec4 _2083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2084 = _2083.x;
        uint _2095 = uint((float(_2083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2084))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2084)));
        float _2105 = (log2(_2071 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2106 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        uint _2109 = uint(isnan(14.0) ? _2106 : (isnan(_2106) ? 14.0 : min(_2106, 14.0)));
        uvec4 _2114 = texelFetch(g_lightClusterGridBuffer, int(((_2109 << 2u) + (_2095 << 6u)) >> 2u));
        uint _2115 = _2114.x;
        uint _2116 = _2083.z;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((((1u << ((_2116 >> 4u) & 15u)) + 4294967295u) & _2115) == 0u) || ((_2116 & 240u) == 0u))
        {
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
        }
        else
        {
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            uint _2423 = 0u;
            uint _2432;
            bool _2433;
            for (;;)
            {
                _2432 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2423 << 2u)) >> 2u)).x;
                _2433 = _2432 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                float frontier_phi_50_pred_3;
                float frontier_phi_50_pred_4;
                float frontier_phi_50_pred_5;
                if (_2433)
                {
                    frontier_phi_50_pred = _2420;
                    frontier_phi_50_pred_1 = _2422;
                    frontier_phi_50_pred_2 = _2421;
                    frontier_phi_50_pred_3 = _2419;
                    frontier_phi_50_pred_4 = _2418;
                    frontier_phi_50_pred_5 = _2417;
                }
                else
                {
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    uint _2598;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2419;
                    _2595 = _2420;
                    _2596 = _2421;
                    _2597 = _2422;
                    _2598 = _2432;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    for (;;)
                    {
                        uint _2602 = uint(findLSB(_2598)) + (_2423 << 5u);
                        uint _2599 = (_2598 + 4294967295u) & _2598;
                        uint _2604 = _2602 * 48u;
                        vec4 _2618 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2624 = (_2602 * 48u) + 4u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2643 = (_2602 * 48u) + 8u;
                        vec3 _2654 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x));
                        float _2658 = _2618.x - _2069;
                        float _2659 = _2618.y - _2070;
                        float _2660 = _2618.z - _2071;
                        float _2661 = dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660));
                        float _2664 = inversesqrt(_2661);
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2668 = dot(vec3(_695, _698, _701), vec3(_2665, _2666, _2667));
                        float _2673 = 1.0 - (_2661 * _2618.w);
                        float _3815 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                        float _2675 = sqrt(_2661) * _2637.w;
                        float _2678 = 1.39999997615814208984375 / (_2675 + 1.39999997615814208984375);
                        float _2679 = _2678 * _2678;
                        float _2682 = ((1.0 - _2679) * _2668) + _2679;
                        float _2685 = _2675 * _2675;
                        float _2689 = ((isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))) * _2674) / ((_2685 * 0.699999988079071044921875) + 1.0);
                        float _2693 = (-0.0) - _2069;
                        float _2694 = (-0.0) - _2070;
                        float _2695 = (-0.0) - _2071;
                        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2710 = exp2(log2(1.0 / ((_2685 * 3.5) + 5.0)) * 0.25);
                        float _2711 = 1.0 - _755;
                        float _2718 = sqrt(1.0 - ((1.0 - (_2711 * _2711)) * (1.0 - (_2710 * _2710))));
                        float _2719 = _2718 * _2718;
                        float _2720 = _2719 * _2719;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2731 = dot(vec3(_695, _698, _701), vec3(_2700, _2701, _2702));
                        float _3831 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
                        float _2735 = dot(vec3(_695, _698, _701), vec3(_2727 * _2721, _2727 * _2722, _2727 * _2723));
                        float _3842 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
                        float _2742 = ((_2738 * _2738) * (_2720 + (-1.0))) + 1.0;
                        float _2743 = _2678 * _2719;
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2668) + _2744;
                        float _3853 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2748 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                        float _2749 = 1.0 - _2719;
                        float _2759 = (0.5 / (((_2748 * ((_2734 * _2749) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2749) + _2719) * _2734))) * _2748;
                        float _3864 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2770 = (((_2720 * 3.1415927410125732421875) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) / ((_2742 * _2742) * ((_2685 * 2.1991131305694580078125) + 3.141590118408203125))) * _2674;
                        _2501 = (_2689 * _2637.x) + _2595;
                        _2502 = (_2689 * _2637.y) + _2596;
                        _2503 = (_2689 * _2637.z) + _2597;
                        _2498 = (_2770 * _2654.x) + _2592;
                        _2499 = (_2770 * _2654.y) + _2593;
                        _2500 = (_2770 * _2654.z) + _2594;
                        if (_2599 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2500;
                            _2595 = _2501;
                            _2596 = _2502;
                            _2597 = _2503;
                            _2598 = _2599;
                        }
                    }
                    frontier_phi_50_pred = _2501;
                    frontier_phi_50_pred_1 = _2503;
                    frontier_phi_50_pred_2 = _2502;
                    frontier_phi_50_pred_3 = _2500;
                    frontier_phi_50_pred_4 = _2499;
                    frontier_phi_50_pred_5 = _2498;
                }
                _2239 = frontier_phi_50_pred;
                _2243 = frontier_phi_50_pred_1;
                _2241 = frontier_phi_50_pred_2;
                _2237 = frontier_phi_50_pred_3;
                _2235 = frontier_phi_50_pred_4;
                _2233 = frontier_phi_50_pred_5;
                uint _2424 = _2423 + 1u;
                if (_2424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2417 = _2233;
                    _2418 = _2235;
                    _2419 = _2237;
                    _2420 = _2239;
                    _2421 = _2241;
                    _2422 = _2243;
                    _2423 = _2424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
        }
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.z;
        uint _2249 = (_2247 >> 8u) & 15u;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((4294967295u << _2249) & _2115) == 0u)
        {
            _2385 = _2232;
            _2387 = _2234;
            _2389 = _2236;
            _2391 = _2238;
            _2393 = _2240;
            _2395 = _2242;
        }
        else
        {
            float _2410 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
            float _2411 = _2410 * _2069;
            float _2412 = _2410 * _2070;
            float _2413 = _2410 * _2071;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            float frontier_phi_41_42_ladder_3;
            float frontier_phi_41_42_ladder_4;
            float frontier_phi_41_42_ladder_5;
            if (_2249 < ((_2247 >> 12u) & 15u))
            {
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2394;
                float _2396;
                float _2575 = _2232;
                float _2576 = _2234;
                float _2577 = _2236;
                float _2578 = _2238;
                float _2579 = _2240;
                float _2580 = _2242;
                uint _2581 = _2249;
                uint _2590;
                bool _2591;
                for (;;)
                {
                    _2590 = texelFetch(g_lightClassification, int((((_2109 << 5u) + (_2095 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                    _2591 = _2590 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    float frontier_phi_59_pred_3;
                    float frontier_phi_59_pred_4;
                    float frontier_phi_59_pred_5;
                    if (_2591)
                    {
                        frontier_phi_59_pred = _2580;
                        frontier_phi_59_pred_1 = _2579;
                        frontier_phi_59_pred_2 = _2578;
                        frontier_phi_59_pred_3 = _2577;
                        frontier_phi_59_pred_4 = _2576;
                        frontier_phi_59_pred_5 = _2575;
                    }
                    else
                    {
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _2809 = _2575;
                        float _2810 = _2576;
                        float _2811 = _2577;
                        float _2812 = _2578;
                        float _2813 = _2579;
                        float _2814 = _2580;
                        uint _2815 = _2590;
                        uint _2816;
                        vec4 _2841;
                        float _2842;
                        vec4 _2857;
                        vec3 _2869;
                        vec4 _2884;
                        vec4 _2900;
                        float _2947;
                        bool _2948;
                        for (;;)
                        {
                            uint _2826 = ((_2581 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2815));
                            _2816 = (_2815 + 4294967295u) & _2815;
                            uint _2828 = _2826 * 40u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            _2842 = _2841.w;
                            uint _2844 = (_2826 * 40u) + 4u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2859 = (_2826 * 40u) + 8u;
                            _2869 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x));
                            uint _2871 = (_2826 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2826 * 40u) + 20u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2826 * 40u) + 24u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2922 = (_2826 * 40u) + 28u;
                            vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            _2947 = fma(_2071, _2935.z, fma(_2070, _2935.y, _2935.x * _2069)) + _2935.w;
                            _2948 = !((fma(_2071, _2916.z, fma(_2070, _2916.y, _2916.x * _2069)) + _2916.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            float frontier_phi_65_pred_3;
                            float frontier_phi_65_pred_4;
                            float frontier_phi_65_pred_5;
                            if (_2948)
                            {
                                float _2975 = _2841.x - _2069;
                                float _2976 = _2841.y - _2070;
                                float _2977 = _2841.z - _2071;
                                float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                                float _2981 = inversesqrt(_2978);
                                float _2982 = _2981 * _2975;
                                float _2983 = _2981 * _2976;
                                float _2984 = _2981 * _2977;
                                float _2988 = 1.0 - (_2978 / (_2842 * _2842));
                                float _3875 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                                float _2993 = sqrt(_2978) * _2857.w;
                                float _2995 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                                float _2996 = _2995 * _2995;
                                float _2999 = ((1.0 - _2996) * dot(vec3(_2982, _2983, _2984), vec3(_695, _698, _701))) + _2996;
                                float _3002 = _2993 * _2993;
                                float _3006 = (fma(_2071, _2884.z, fma(_2070, _2884.y, _2884.x * _2069)) + _2884.w) / _2947;
                                float _3007 = (fma(_2071, _2900.z, fma(_2070, _2900.y, _2900.x * _2069)) + _2900.w) / _2947;
                                float _3011 = 1.0 - dot(vec2(_3006, _3007), vec2(_3006, _3007));
                                float _3891 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                                float _3013 = _3012 * (((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2989) / ((_3002 * 0.699999988079071044921875) + 1.0));
                                float _3025 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                                float _3026 = 1.0 - _755;
                                float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                                float _3034 = _3033 * _3033;
                                float _3035 = _3034 * _3034;
                                float _3036 = _2982 - _2411;
                                float _3037 = _2983 - _2412;
                                float _3038 = _2984 - _2413;
                                float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                                float _3046 = dot(vec3(_695, _698, _701), vec3((-0.0) - _2411, (-0.0) - _2412, (-0.0) - _2413));
                                float _3902 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                                float _3050 = dot(vec3(_695, _698, _701), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                                float _3913 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3053 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                                float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                                float _3058 = _2995 * _3034;
                                float _3059 = _3058 * _3058;
                                float _3065 = ((1.0 - _3059) * dot(vec3(_695, _698, _701), vec3(_2982, _2983, _2984))) + _3059;
                                float _3924 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _3067 = 1.0 - _3034;
                                float _3077 = (0.5 / (((_3066 * ((_3049 * _3067) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3034) * _3049))) * _3066;
                                float _3935 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3087 = (_3012 * _2989) * (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) / ((_3057 * _3057) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3013 * _2857.z;
                                frontier_phi_65_pred_1 = _3013 * _2857.y;
                                frontier_phi_65_pred_2 = _3013 * _2857.x;
                                frontier_phi_65_pred_3 = _3087 * _2869.z;
                                frontier_phi_65_pred_4 = _3087 * _2869.y;
                                frontier_phi_65_pred_5 = _3087 * _2869.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                                frontier_phi_65_pred_3 = 0.0;
                                frontier_phi_65_pred_4 = 0.0;
                                frontier_phi_65_pred_5 = 0.0;
                            }
                            _3096 = frontier_phi_65_pred;
                            _3095 = frontier_phi_65_pred_1;
                            _3094 = frontier_phi_65_pred_2;
                            _3093 = frontier_phi_65_pred_3;
                            _3092 = frontier_phi_65_pred_4;
                            _3091 = frontier_phi_65_pred_5;
                            _2799 = _3094 + _2812;
                            _2800 = _3095 + _2813;
                            _2801 = _3096 + _2814;
                            _2796 = _3091 + _2809;
                            _2797 = _3092 + _2810;
                            _2798 = _3093 + _2811;
                            if (_2816 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2816;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _2801;
                        frontier_phi_59_pred_1 = _2800;
                        frontier_phi_59_pred_2 = _2799;
                        frontier_phi_59_pred_3 = _2798;
                        frontier_phi_59_pred_4 = _2797;
                        frontier_phi_59_pred_5 = _2796;
                    }
                    _2396 = frontier_phi_59_pred;
                    _2394 = frontier_phi_59_pred_1;
                    _2392 = frontier_phi_59_pred_2;
                    _2390 = frontier_phi_59_pred_3;
                    _2388 = frontier_phi_59_pred_4;
                    _2386 = frontier_phi_59_pred_5;
                    uint _2582 = _2581 + 1u;
                    if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2575 = _2386;
                        _2576 = _2388;
                        _2577 = _2390;
                        _2578 = _2392;
                        _2579 = _2394;
                        _2580 = _2396;
                        _2581 = _2582;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2392;
                frontier_phi_41_42_ladder_1 = _2396;
                frontier_phi_41_42_ladder_2 = _2394;
                frontier_phi_41_42_ladder_3 = _2390;
                frontier_phi_41_42_ladder_4 = _2388;
                frontier_phi_41_42_ladder_5 = _2386;
            }
            else
            {
                frontier_phi_41_42_ladder = _2238;
                frontier_phi_41_42_ladder_1 = _2242;
                frontier_phi_41_42_ladder_2 = _2240;
                frontier_phi_41_42_ladder_3 = _2236;
                frontier_phi_41_42_ladder_4 = _2234;
                frontier_phi_41_42_ladder_5 = _2232;
            }
            _2385 = frontier_phi_41_42_ladder_5;
            _2387 = frontier_phi_41_42_ladder_4;
            _2389 = frontier_phi_41_42_ladder_3;
            _2391 = frontier_phi_41_42_ladder;
            _2393 = frontier_phi_41_42_ladder_2;
            _2395 = frontier_phi_41_42_ladder_1;
        }
        float _2400 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2128 = (_2400 * _2391) + _1855;
        _2130 = (_2400 * _2393) + _1856;
        _2132 = (_2400 * _2395) + _1857;
        _2134 = ((_2385 * 0.039999999105930328369140625) * _2400) + _2011;
        _2136 = ((_2387 * 0.039999999105930328369140625) * _2400) + _2012;
        _2138 = ((_2389 * 0.039999999105930328369140625) * _2400) + _2013;
    }
    else
    {
        _2128 = _1855;
        _2130 = _1856;
        _2132 = _1857;
        _2134 = _2011;
        _2136 = _2012;
        _2138 = _2013;
    }
    uint _2144 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _2150 = (((((_402 * cbMtdParam._m0[12u].x) - _546) * TEXCOORD_6.y) + _546) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2144].x;
    float _2151 = (((((_403 * cbMtdParam._m0[12u].y) - _547) * TEXCOORD_6.y) + _547) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2144].y;
    float _2152 = (((((_404 * cbMtdParam._m0[12u].z) - _548) * TEXCOORD_6.y) + _548) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2144].z;
    float _3951 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3962 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3973 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _2169 = (((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_2128 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _739))) + ((_2134 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + _2150;
    float _2171 = (_2151 + ((_2136 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_2130 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _739)));
    float _2173 = (_2152 + ((_2138 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1545)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2132 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _739)));
    float _3999 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2186 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    uint _2187 = _714 + 6u;
    float _2195 = _674 / cbSceneParam._m0[86u].x;
    float _2196 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2212 = _2210.x;
    float _2213 = _2210.y;
    float _2214 = _2210.z;
    float _2215 = _2210.w;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2257 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2258 = _2257 / _608;
        float _2269 = _2258 * _659;
        float _2270 = _660 * _2258;
        float _2271 = (-0.0) - _2270;
        float _2272 = _2258 * _661;
        float _2274 = (cbSceneParam._m0[77u].w * _2271) / _2257;
        float _2275 = _2274 + cbSceneParam._m0[79u].w;
        float _2276 = cbSceneParam._m0[79u].w - _2270;
        float _2282 = sqrt(((_2269 * _2269) + (_2270 * _2270)) + (_2272 * _2272));
        float _2285 = (1.0 - (cbSceneParam._m0[77u].w / _2257)) * _2282;
        float _2291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2511;
        if (abs((_2271 - _2274) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2511 = ((((_2275 > 0.0) ? exp2(_2291 * _2275) : (2.0 - exp2(_2293 * _2275))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2285;
        }
        else
        {
            float _2446 = 1.0 / cbSceneParam._m0[80u].x;
            float _2447 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : max(_2275, _2276));
            float _2448 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : min(_2275, _2276));
            float _2457 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : min(_2447, 0.0));
            float _2458 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : min(_2448, 0.0));
            _2511 = ((abs(_2282 / _2271) * cbSceneParam._m0[80u].y) * ((((_2457 - _2458) * 2.0) - ((exp2(_2291 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)))) - exp2(_2291 * (isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0))))) * _2446)) - ((exp2(_2293 * _2457) - exp2(_2293 * _2458)) * _2446))) + (_2285 * cbSceneParam._m0[80u].z);
        }
        vec4 _2513 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, 1.0), 0.0);
        float _2522 = exp2((_2511 * (-1.44269502162933349609375)) * (1.0 - _2513.w));
        float _2523 = log2(_2522);
        float _2539 = log2(_2215);
        _2295 = (exp2(_2539 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].x)) * _2513.x) / cbSceneParam._m0[78u].x)) + _2212;
        _2297 = (exp2(_2539 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].y)) * _2513.y) / cbSceneParam._m0[78u].y)) + _2213;
        _2299 = (exp2(_2539 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].z)) * _2513.z) / cbSceneParam._m0[78u].z)) + _2214;
        _2301 = _2522 * _2215;
    }
    else
    {
        _2295 = _2212;
        _2297 = _2213;
        _2299 = _2214;
        _2301 = _2215;
    }
    float _2313 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2314 = _2313 == 3.0;
    float _2315 = log2(_2301);
    float _2319 = exp2(_2315 * cbSceneParam._m0[78u].x);
    float _2320 = exp2(_2315 * cbSceneParam._m0[78u].y);
    float _2321 = exp2(_2315 * cbSceneParam._m0[78u].z);
    float _2322 = _2319 * (isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0)));
    float _2323 = _2320 * (isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0)));
    float _2324 = _2321 * (isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0)));
    float _2333 = (_2313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2333 * (_2314 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2295)));
    SV_Target.y = _2333 * (_2314 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2297)));
    SV_Target.z = _2333 * (_2314 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2299)));
    SV_Target.w = cbInstanceData._m0[_2187].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2150) * _2186) * _2319) * _2333;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2151) * _2186) * _2320) * _2333;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2152) * _2186) * _2321) * _2333;
    SV_Target_1.w = cbInstanceData._m0[_2187].w;
}


