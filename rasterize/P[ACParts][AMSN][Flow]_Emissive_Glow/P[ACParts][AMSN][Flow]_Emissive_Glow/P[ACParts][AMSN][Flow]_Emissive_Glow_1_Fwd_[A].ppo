#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1153;
float _3290;
float _3291;
float _3292;
float _3293;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _239 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _252 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_238 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_239 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _258 = _252.x * cbMtdParam._m0[9u].x;
    float _259 = _252.y * cbMtdParam._m0[9u].y;
    float _260 = _252.z * cbMtdParam._m0[9u].z;
    float _264 = _258 - (_258 * TEXCOORD_6.x);
    float _265 = _259 - (_259 * TEXCOORD_6.x);
    float _266 = _260 - (_260 * TEXCOORD_6.x);
    float _270 = _264 - (_264 * TEXCOORD_6.y);
    float _271 = _265 - (_265 * TEXCOORD_6.y);
    float _272 = _266 - (_266 * TEXCOORD_6.y);
    vec4 _288 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _238) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _239) + cbTextureTilingScale._m0[1u].w));
    float _296 = (_288.x * 2.0) + (-1.0);
    float _298 = (_288.y * 2.0) + (-1.0);
    float _299 = dot(vec2(_296, _298), vec2(_296, _298));
    float _3302 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))));
    float _306 = _288.z * cbMtdParam._m0[16u].w;
    float _308 = _306 - (_306 * TEXCOORD_6.x);
    float _310 = _308 - (_308 * TEXCOORD_6.y);
    vec4 _342 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _346 = cbPerFrame._m0[22u].x * 2.0;
    float _347 = _346 * cbMtdParam._m0[15u].w;
    float _350 = (_342.x * 0.5) + (-0.25);
    float _353 = (_342.y * 0.5) + (-0.25);
    float _354 = _353 * cbMtdParam._m0[15u].z;
    float _356 = (-0.0) - (cbMtdParam._m0[15u].z * _350);
    float _358 = fract(_347);
    float _360 = fract(_347 + 0.5);
    float _371 = abs((_358 * 2.0) + (-1.0));
    vec4 _388 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_358 * _356) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_354 * _358) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _390 = _388.x;
    float _391 = _388.y;
    float _392 = _388.z;
    vec4 _393 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_360 * _356) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_354 * _360) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _404 = ((_393.x - _390) * _371) + _390;
    float _405 = ((_393.y - _391) * _371) + _391;
    float _406 = ((_393.z - _392) * _371) + _392;
    vec4 _458 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _238) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _239) + cbTextureTilingScale._m0[2u].w));
    float _479 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _480 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _483 = _346 * cbMtdParam._m0[16u].z;
    float _484 = _353 * cbMtdParam._m0[16u].y;
    float _486 = (-0.0) - (cbMtdParam._m0[16u].y * _350);
    float _487 = fract(_483);
    float _489 = fract(_483 + 0.5);
    float _500 = abs((_487 * 2.0) + (-1.0));
    vec4 _517 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_487 * _486) + _479) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_484 * _487) + _480) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    vec4 _522 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_489 * _486) + _479) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_484 * _489) + _480) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _539 = ((((_522.x - _519) * _500) + _519) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _458.x);
    float _540 = ((((_522.y - _520) * _500) + _520) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _458.y);
    float _541 = ((((_522.z - _521) * _500) + _521) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _458.z);
    float _548 = ((((cbMtdParam._m0[16u].x * _404) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _539) * TEXCOORD_6.x) + _539;
    float _549 = ((((cbMtdParam._m0[16u].x * _405) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _540) * TEXCOORD_6.x) + _540;
    float _550 = ((((cbMtdParam._m0[16u].x * _406) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _541) * TEXCOORD_6.x) + _541;
    float _566 = _296 - (_296 * TEXCOORD_6.x);
    float _567 = _298 - (_298 * TEXCOORD_6.x);
    float _568 = _305 - (_305 * TEXCOORD_6.x);
    float _572 = _566 - (_566 * TEXCOORD_6.y);
    float _573 = _567 - (_567 * TEXCOORD_6.y);
    float _574 = _568 - (_568 * TEXCOORD_6.y);
    float _577 = fma(_574, _214 * NORMAL.x, fma(_573, _221 * TANGENT.x, (_207 * _200) * _572));
    float _580 = fma(_574, _214 * NORMAL.y, fma(_573, _221 * TANGENT.y, (_207 * _201) * _572));
    float _583 = fma(_574, _214 * NORMAL.z, fma(_573, _221 * TANGENT.z, (_207 * _202) * _572));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3313 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _591 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3335 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3346 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _610 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    vec4 _675 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _677 = _675.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _833 = sqrt(((_661 * _661) + (_662 * _662)) + (_663 * _663));
        float _839 = (cbMatDynParam._m0[5u].x * _833) + cbMatDynParam._m0[5u].y;
        float _3357 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _844 = (cbMatDynParam._m0[5u].z * _833) + cbMatDynParam._m0[5u].w;
        float _3368 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) - _840)) + _840) < ((_677 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _689 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _690 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _712 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _715 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _728 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _728 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3379 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
    float _3390 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _689, cbSceneParam._m0[86u].y * _690));
    float _753 = _750.x * TEXCOORD_6.z;
    float _754 = dot(vec3(_588, _589, _590), vec3(_668, _669, _670));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _588) - _668;
    float _762 = (_757 * _589) - _669;
    float _763 = (_757 * _590) - _670;
    float _767 = abs(dot(vec3(_668, _669, _670), vec3(_588, _589, _590)));
    float _3412 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_591);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1152;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _882 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _886 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _910 = _814 + _588;
        float _911 = _818 + _589;
        float _912 = _822 + _590;
        float _922 = fma(_912, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910)) - _878;
        float _923 = fma(_912, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910)) - _882;
        float _924 = fma(_912, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910)) - _886;
        float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
        float _941 = ((_928 * _922) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_928 * _923) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_928 * _924) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_941, _942, _943), 0.0);
        float _980 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_946.x + (-0.5));
        float _982 = _980 * (_946.y + (-0.5));
        float _983 = _980 * (_946.z + (-0.5));
        float _990 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_953.x + (-0.5));
        float _992 = _990 * (_953.y + (-0.5));
        float _993 = _990 * (_953.z + (-0.5));
        float _1000 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_960.x + (-0.5));
        float _1002 = _1000 * (_960.y + (-0.5));
        float _1003 = _1000 * (_960.z + (-0.5));
        float _1010 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_967.x + (-0.5));
        float _1012 = _1010 * (_967.y + (-0.5));
        float _1013 = _1010 * (_967.z + (-0.5));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = _981 * 0.5;
        float _1018 = _991 * 0.5;
        float _1019 = _1001 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1034 = (dot(vec3(_588, _589, _590), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1044 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3460 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1046 + 1.0))) + _1051) * _1014;
        float _1061 = _982 * 0.5;
        float _1062 = _992 * 0.5;
        float _1063 = _1002 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_588, _589, _590), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3493 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1088 + 1.0))) + _1093) * _1015;
        float _1103 = _983 * 0.5;
        float _1104 = _993 * 0.5;
        float _1105 = _1003 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_588, _589, _590), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3526 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1130 + 1.0))) + _1135) * _1016;
        _1152 = _983;
        _1154 = _982;
        _1155 = _981;
        _1156 = _993;
        _1157 = _992;
        _1158 = _991;
        _1159 = _1003;
        _1160 = _1002;
        _1161 = _1001;
        _1162 = _1016;
        _1163 = _1015;
        _1164 = _1014;
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _1153;
        _1154 = _1153;
        _1155 = _1153;
        _1156 = _1153;
        _1157 = _1153;
        _1158 = _1153;
        _1159 = _1153;
        _1160 = _1153;
        _1161 = _1153;
        _1162 = _1153;
        _1163 = _1153;
        _1164 = _1153;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1200 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1204 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1227 = _814 + _588;
        float _1228 = _818 + _589;
        float _1229 = _822 + _590;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_588, _589, _590), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3589 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_588, _589, _590), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3622 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_588, _589, _590), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3655 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1153;
        _1466 = _1153;
        _1467 = _1153;
        _1468 = _1153;
        _1469 = _1153;
        _1470 = _1153;
        _1471 = _1153;
        _1472 = _1153;
        _1473 = _1153;
        _1474 = _1153;
        _1475 = _1153;
        _1476 = _1153;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1165)) + _1165;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1166)) + _1166;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1167)) + _1167;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _761 * 0.5;
    float _1534 = _762 * 0.5;
    float _1535 = _763 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1152, _1156, _1159, _1162));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1649 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1653 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1657 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1660 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1663 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1666 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1694;
        if (_1660 > 0.0)
        {
            _1694 = abs((1.0 - _1649) / _1660);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1649 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1694 = frontier_phi_17_15_ladder;
        }
        float _2041;
        if (_1663 > 0.0)
        {
            _2041 = abs((1.0 - _1653) / _1663);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1653 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2041 = frontier_phi_26_22_ladder;
        }
        float _2384;
        if (_1666 > 0.0)
        {
            _2384 = abs((1.0 - _1657) / _1666);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1657 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_33_ladder;
        }
        float _2386 = isnan(_2041) ? _1694 : (isnan(_1694) ? _2041 : min(_1694, _2041));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1660) + _1649;
        float _2392 = (_2387 * _1663) + _1653;
        float _2393 = (_2387 * _1666) + _1657;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_16_40_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1682 = frontier_phi_16_40_ladder_2;
        _1684 = frontier_phi_16_40_ladder_1;
        _1686 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1602);
        _1682 = _1670.x * cbModelParam._m0[1u].y;
        _1684 = _1670.y * cbModelParam._m0[1u].y;
        _1686 = _1670.z * cbModelParam._m0[1u].y;
    }
    float _1690 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1690 : min(cbModelParam._m0[25u].w, _1690));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1759 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1762 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _2046;
        if (_1756 > 0.0)
        {
            _2046 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2046 = frontier_phi_28_24_ladder;
        }
        float _2410;
        if (_1759 > 0.0)
        {
            _2410 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2410 = frontier_phi_42_35_ladder;
        }
        float _2600;
        if (_1762 > 0.0)
        {
            _2600 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2600 = frontier_phi_60_53_ladder;
        }
        float _2602 = isnan(_2410) ? _2046 : (isnan(_2046) ? _2410 : min(_2046, _2410));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1756) + _1745;
        float _2608 = (_2603 * _1759) + _1749;
        float _2609 = (_2603 * _1762) + _1753;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1691);
            frontier_phi_25_60_ladder = _2851.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2851.y * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_25_60_ladder;
        _1783 = frontier_phi_25_60_ladder_2;
        _1785 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1691);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1797 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1798 = _1797 * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1799 = _1797 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1800 = _1797 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_728 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1827 = _753 + (-1.0);
    float _1830 = (cbLight._m0[_1822].x * _1827) + 1.0;
    float _1831 = (cbLight._m0[_1822].y * _1827) + 1.0;
    uint _1832 = _1821 + 5u;
    float _1838 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1842 = _1821 + 4u;
    float _1848 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1852 = _1821 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_588, _589, _590));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_588, _589, _590));
    float _3791 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _3802 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1832].x * _1838) * _1873) + ((cbLight._m0[_1842].x * _1848) * _1871);
    float _1881 = ((_1838 * cbLight._m0[_1832].y) * _1873) + ((_1848 * cbLight._m0[_1842].y) * _1871);
    float _1882 = ((_1838 * cbLight._m0[_1832].z) * _1873) + ((_1848 * cbLight._m0[_1842].z) * _1871);
    uint _1884 = _1821 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _591) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1821].x + _668;
    float _1900 = cbLight._m0[_1821].y + _669;
    float _1901 = cbLight._m0[_1821].z + _670;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1821].xyz));
    float _3813 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1913 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _1914 = dot(vec3(_588, _589, _590), vec3(_1906, _1907, _1908));
    float _3835 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1906, _1907, _1908));
    float _3846 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _3857 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1962 = _1821 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _591) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1852].x + _668;
    float _1976 = cbLight._m0[_1852].y + _669;
    float _1977 = cbLight._m0[_1852].z + _670;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1852].xyz));
    float _3868 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _1989 = dot(vec3(_588, _589, _590), vec3(_1982, _1983, _1984));
    float _3879 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_1982, _1983, _1984));
    float _3890 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1913 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2011) + _1974) * _1988))) * _1988;
    float _3901 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1838) + (((_1937 * cbLight._m0[_1884].x) * _1951) * _1848);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1838) + (((_1937 * cbLight._m0[_1884].y) * _1951) * _1848);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1838) + (((_1937 * cbLight._m0[_1884].z) * _1951) * _1848);
    float _2150;
    float _2152;
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    if (_1819.y == 0u)
    {
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2091 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2090;
        float _2092 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2090;
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2090;
        uvec4 _2105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2106 = _2105.x;
        uint _2117 = uint((float(_2105.y) * floor(float(uint(cbSceneParam._m0[85u].y * _690) / _2106))) + floor(float(uint(cbSceneParam._m0[85u].x * _689) / _2106)));
        float _2127 = (log2(_2093 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2128 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        uint _2131 = uint(isnan(14.0) ? _2128 : (isnan(_2128) ? 14.0 : min(_2128, 14.0)));
        uvec4 _2136 = texelFetch(g_lightClusterGridBuffer, int(((_2131 << 2u) + (_2117 << 6u)) >> 2u));
        uint _2137 = _2136.x;
        uint _2138 = _2105.z;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        if (((((1u << ((_2138 >> 4u) & 15u)) + 4294967295u) & _2137) == 0u) || ((_2138 & 240u) == 0u))
        {
            _2254 = 0.0;
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
        }
        else
        {
            float _2255;
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2265;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            uint _2453 = 0u;
            uint _2462;
            bool _2463;
            for (;;)
            {
                _2462 = texelFetch(g_lightClassification, int((((_2131 << 5u) + (_2117 << 9u)) + (_2453 << 2u)) >> 2u)).x;
                _2463 = _2462 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2463)
                {
                    frontier_phi_55_pred = _2451;
                    frontier_phi_55_pred_1 = _2452;
                    frontier_phi_55_pred_2 = _2450;
                    frontier_phi_55_pred_3 = _2449;
                    frontier_phi_55_pred_4 = _2448;
                    frontier_phi_55_pred_5 = _2447;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2447;
                    _2644 = _2448;
                    _2645 = _2449;
                    _2646 = _2450;
                    _2647 = _2451;
                    _2648 = _2452;
                    _2649 = _2462;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2453 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _2091;
                        float _2710 = _2669.y - _2092;
                        float _2711 = _2669.z - _2093;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2719 = dot(vec3(_709, _712, _715), vec3(_2716, _2717, _2718));
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _3922 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2719) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _2091;
                        float _2745 = (-0.0) - _2092;
                        float _2746 = (-0.0) - _2093;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2761 = exp2(log2(1.0 / ((_2736 * 3.5) + 5.0)) * 0.25);
                        float _2762 = 1.0 - _769;
                        float _2769 = sqrt(1.0 - ((1.0 - (_2762 * _2762)) * (1.0 - (_2761 * _2761))));
                        float _2770 = _2769 * _2769;
                        float _2771 = _2770 * _2770;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_709, _712, _715), vec3(_2751, _2752, _2753));
                        float _3938 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2786 = dot(vec3(_709, _712, _715), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _3949 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2793 = ((_2789 * _2789) * (_2771 + (-1.0))) + 1.0;
                        float _2794 = _2729 * _2770;
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2719) + _2795;
                        float _3960 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2800 = 1.0 - _2770;
                        float _2810 = (0.5 / (((_2799 * ((_2785 * _2800) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2799 * _2800) + _2770) * _2785))) * _2799;
                        float _3971 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2821 = (((_2771 * 3.1415927410125732421875) * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) / ((_2793 * _2793) * ((_2736 * 2.1991131305694580078125) + 3.141590118408203125))) * _2725;
                        _2547 = (_2740 * _2688.x) + _2646;
                        _2548 = (_2740 * _2688.y) + _2647;
                        _2549 = (_2740 * _2688.z) + _2648;
                        _2544 = (_2821 * _2705.x) + _2643;
                        _2545 = (_2821 * _2705.y) + _2644;
                        _2546 = (_2821 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2544;
                            _2644 = _2545;
                            _2645 = _2546;
                            _2646 = _2547;
                            _2647 = _2548;
                            _2648 = _2549;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_55_pred = _2548;
                    frontier_phi_55_pred_1 = _2549;
                    frontier_phi_55_pred_2 = _2547;
                    frontier_phi_55_pred_3 = _2546;
                    frontier_phi_55_pred_4 = _2545;
                    frontier_phi_55_pred_5 = _2544;
                }
                _2263 = frontier_phi_55_pred;
                _2265 = frontier_phi_55_pred_1;
                _2261 = frontier_phi_55_pred_2;
                _2259 = frontier_phi_55_pred_3;
                _2257 = frontier_phi_55_pred_4;
                _2255 = frontier_phi_55_pred_5;
                uint _2454 = _2453 + 1u;
                if (_2454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2447 = _2255;
                    _2448 = _2257;
                    _2449 = _2259;
                    _2450 = _2261;
                    _2451 = _2263;
                    _2452 = _2265;
                    _2453 = _2454;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2254 = _2255;
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
        }
        uvec4 _2268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2269 = _2268.z;
        uint _2271 = (_2269 >> 8u) & 15u;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((4294967295u << _2271) & _2137) == 0u)
        {
            _2415 = _2254;
            _2417 = _2256;
            _2419 = _2258;
            _2421 = _2260;
            _2423 = _2262;
            _2425 = _2264;
        }
        else
        {
            float _2440 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
            float _2441 = _2440 * _2091;
            float _2442 = _2440 * _2092;
            float _2443 = _2440 * _2093;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2271 < ((_2269 >> 12u) & 15u))
            {
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2626 = _2254;
                float _2627 = _2256;
                float _2628 = _2258;
                float _2629 = _2260;
                float _2630 = _2262;
                float _2631 = _2264;
                uint _2632 = _2271;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2131 << 5u) + (_2117 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2642)
                    {
                        frontier_phi_69_pred = _2631;
                        frontier_phi_69_pred_1 = _2630;
                        frontier_phi_69_pred_2 = _2629;
                        frontier_phi_69_pred_3 = _2628;
                        frontier_phi_69_pred_4 = _2627;
                        frontier_phi_69_pred_5 = _2626;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _2869 = _2626;
                        float _2870 = _2627;
                        float _2871 = _2628;
                        float _2872 = _2629;
                        float _2873 = _2630;
                        float _2874 = _2631;
                        uint _2875 = _2641;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2944;
                        vec4 _2960;
                        float _3007;
                        bool _3008;
                        for (;;)
                        {
                            uint _2886 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2931 = (_2886 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2886 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2963 = (_2886 * 40u) + 24u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2982 = (_2886 * 40u) + 28u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _3007 = fma(_2093, _2995.z, fma(_2092, _2995.y, _2995.x * _2091)) + _2995.w;
                            _3008 = !((fma(_2093, _2976.z, fma(_2092, _2976.y, _2976.x * _2091)) + _2976.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3008)
                            {
                                float _3035 = _2901.x - _2091;
                                float _3036 = _2901.y - _2092;
                                float _3037 = _2901.z - _2093;
                                float _3038 = dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037));
                                float _3041 = inversesqrt(_3038);
                                float _3042 = _3041 * _3035;
                                float _3043 = _3041 * _3036;
                                float _3044 = _3041 * _3037;
                                float _3048 = 1.0 - (_3038 / (_2902 * _2902));
                                float _3982 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _3053 = sqrt(_3038) * _2917.w;
                                float _3055 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                                float _3056 = _3055 * _3055;
                                float _3059 = ((1.0 - _3056) * dot(vec3(_3042, _3043, _3044), vec3(_709, _712, _715))) + _3056;
                                float _3062 = _3053 * _3053;
                                float _3066 = (fma(_2093, _2944.z, fma(_2092, _2944.y, _2944.x * _2091)) + _2944.w) / _3007;
                                float _3067 = (fma(_2093, _2960.z, fma(_2092, _2960.y, _2960.x * _2091)) + _2960.w) / _3007;
                                float _3071 = 1.0 - dot(vec2(_3066, _3067), vec2(_3066, _3067));
                                float _3998 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _3073 = _3072 * (((isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))) * _3049) / ((_3062 * 0.699999988079071044921875) + 1.0));
                                float _3085 = exp2(log2(1.0 / ((_3062 * 3.5) + 5.0)) * 0.25);
                                float _3086 = 1.0 - _769;
                                float _3093 = sqrt(1.0 - ((1.0 - (_3086 * _3086)) * (1.0 - (_3085 * _3085))));
                                float _3094 = _3093 * _3093;
                                float _3095 = _3094 * _3094;
                                float _3096 = _3042 - _2441;
                                float _3097 = _3043 - _2442;
                                float _3098 = _3044 - _2443;
                                float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                                float _3106 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2441, (-0.0) - _2442, (-0.0) - _2443));
                                float _4009 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3110 = dot(vec3(_709, _712, _715), vec3(_3102 * _3096, _3102 * _3097, _3102 * _3098));
                                float _4020 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3117 = ((_3113 * _3113) * (_3095 + (-1.0))) + 1.0;
                                float _3118 = _3055 * _3094;
                                float _3119 = _3118 * _3118;
                                float _3125 = ((1.0 - _3119) * dot(vec3(_709, _712, _715), vec3(_3042, _3043, _3044))) + _3119;
                                float _4031 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3127 = 1.0 - _3094;
                                float _3137 = (0.5 / (((_3126 * ((_3109 * _3127) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_3126 * _3127) + _3094) * _3109))) * _3126;
                                float _4042 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3147 = (_3072 * _3049) * (((_3095 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_3117 * _3117) * ((_3062 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3073 * _2917.x;
                                frontier_phi_75_pred_1 = _3073 * _2917.z;
                                frontier_phi_75_pred_2 = _3073 * _2917.y;
                                frontier_phi_75_pred_3 = _3147 * _2929.z;
                                frontier_phi_75_pred_4 = _3147 * _2929.y;
                                frontier_phi_75_pred_5 = _3147 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_75_pred;
                            _3156 = frontier_phi_75_pred_1;
                            _3155 = frontier_phi_75_pred_2;
                            _3153 = frontier_phi_75_pred_3;
                            _3152 = frontier_phi_75_pred_4;
                            _3151 = frontier_phi_75_pred_5;
                            _2859 = _3154 + _2872;
                            _2860 = _3155 + _2873;
                            _2861 = _3156 + _2874;
                            _2856 = _3151 + _2869;
                            _2857 = _3152 + _2870;
                            _2858 = _3153 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2861;
                        frontier_phi_69_pred_1 = _2860;
                        frontier_phi_69_pred_2 = _2859;
                        frontier_phi_69_pred_3 = _2858;
                        frontier_phi_69_pred_4 = _2857;
                        frontier_phi_69_pred_5 = _2856;
                    }
                    _2426 = frontier_phi_69_pred;
                    _2424 = frontier_phi_69_pred_1;
                    _2422 = frontier_phi_69_pred_2;
                    _2420 = frontier_phi_69_pred_3;
                    _2418 = frontier_phi_69_pred_4;
                    _2416 = frontier_phi_69_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2416;
                        _2627 = _2418;
                        _2628 = _2420;
                        _2629 = _2422;
                        _2630 = _2424;
                        _2631 = _2426;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2418;
                frontier_phi_44_45_ladder_1 = _2426;
                frontier_phi_44_45_ladder_2 = _2424;
                frontier_phi_44_45_ladder_3 = _2422;
                frontier_phi_44_45_ladder_4 = _2420;
                frontier_phi_44_45_ladder_5 = _2416;
            }
            else
            {
                frontier_phi_44_45_ladder = _2256;
                frontier_phi_44_45_ladder_1 = _2264;
                frontier_phi_44_45_ladder_2 = _2262;
                frontier_phi_44_45_ladder_3 = _2260;
                frontier_phi_44_45_ladder_4 = _2258;
                frontier_phi_44_45_ladder_5 = _2254;
            }
            _2415 = frontier_phi_44_45_ladder_5;
            _2417 = frontier_phi_44_45_ladder;
            _2419 = frontier_phi_44_45_ladder_4;
            _2421 = frontier_phi_44_45_ladder_3;
            _2423 = frontier_phi_44_45_ladder_2;
            _2425 = frontier_phi_44_45_ladder_1;
        }
        float _2430 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2150 = (_2430 * _2421) + _1880;
        _2152 = (_2430 * _2423) + _1881;
        _2154 = (_2430 * _2425) + _1882;
        _2156 = ((_2415 * 0.039999999105930328369140625) * _2430) + _2033;
        _2158 = ((_2417 * 0.039999999105930328369140625) * _2430) + _2034;
        _2160 = ((_2419 * 0.039999999105930328369140625) * _2430) + _2035;
    }
    else
    {
        _2150 = _1880;
        _2152 = _1881;
        _2154 = _1882;
        _2156 = _2033;
        _2158 = _2034;
        _2160 = _2035;
    }
    uint _2166 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _2172 = (((((_404 * cbMtdParam._m0[12u].x) - _548) * TEXCOORD_6.y) + _548) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2166].x;
    float _2173 = (((((_405 * cbMtdParam._m0[12u].y) - _549) * TEXCOORD_6.y) + _549) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2166].y;
    float _2174 = (((((_406 * cbMtdParam._m0[12u].z) - _550) * TEXCOORD_6.y) + _550) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2166].z;
    float _4058 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4069 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4080 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2191 = (((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2150 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _753))) + ((_2156 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + _2172;
    float _2193 = (_2173 + ((_2158 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2152 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _753)));
    float _2195 = (_2174 + ((_2160 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1591)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2154 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _753)));
    float _2196 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2197 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2204 = cbMtdParam._m0[2u].x * _2172;
    float _2205 = cbMtdParam._m0[2u].y * _2173;
    float _2206 = cbMtdParam._m0[2u].z * _2174;
    float _4106 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2208 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    uint _2209 = _728 + 6u;
    float _2217 = _689 / cbSceneParam._m0[86u].x;
    float _2218 = _690 / cbSceneParam._m0[86u].y;
    vec4 _2232 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2217, _2218, (log2((isnan(cbSceneParam._m0[77u].w) ? _610 : (isnan(_610) ? cbSceneParam._m0[77u].w : min(_610, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2234 = _2232.x;
    float _2235 = _2232.y;
    float _2236 = _2232.z;
    float _2237 = _2232.w;
    float _2317;
    float _2319;
    float _2321;
    float _2323;
    if (_610 > cbSceneParam._m0[78u].w)
    {
        float _2279 = isnan(_610) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _610 : min(cbSceneParam._m0[80u].w, _610));
        float _2280 = _2279 / _610;
        float _2291 = _2280 * _661;
        float _2292 = _662 * _2280;
        float _2293 = (-0.0) - _2292;
        float _2294 = _2280 * _663;
        float _2296 = (cbSceneParam._m0[77u].w * _2293) / _2279;
        float _2297 = _2296 + cbSceneParam._m0[79u].w;
        float _2298 = cbSceneParam._m0[79u].w - _2292;
        float _2304 = sqrt(((_2291 * _2291) + (_2292 * _2292)) + (_2294 * _2294));
        float _2307 = (1.0 - (cbSceneParam._m0[77u].w / _2279)) * _2304;
        float _2313 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2315 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2293 - _2296) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2297 > 0.0) ? exp2(_2313 * _2297) : (2.0 - exp2(_2315 * _2297))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2307;
        }
        else
        {
            float _2476 = 1.0 / cbSceneParam._m0[80u].x;
            float _2477 = isnan(_2298) ? _2297 : (isnan(_2297) ? _2298 : max(_2297, _2298));
            float _2478 = isnan(_2298) ? _2297 : (isnan(_2297) ? _2298 : min(_2297, _2298));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            _2557 = ((abs(_2304 / _2293) * cbSceneParam._m0[80u].y) * ((((_2487 - _2488) * 2.0) - ((exp2(_2313 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)))) - exp2(_2313 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))))) * _2476)) - ((exp2(_2315 * _2487) - exp2(_2315 * _2488)) * _2476))) + (_2307 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2217, _2218, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2237);
        _2317 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2234;
        _2319 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2235;
        _2321 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2236;
        _2323 = _2568 * _2237;
    }
    else
    {
        _2317 = _2234;
        _2319 = _2235;
        _2321 = _2236;
        _2323 = _2237;
    }
    bool _2595;
    vec4 _2333;
    vec4 _2355;
    float _2357;
    float _2361;
    float _2362;
    float _2363;
    float _2366;
    float _2369;
    float _2372;
    float _2373;
    bool _2383;
    for (;;)
    {
        _2333 = cbMatDynParam._m0[0u];
        float _2335 = roundEven(_2333.y);
        bool _2336 = _2335 == 3.0;
        float _2337 = log2(_2323);
        float _2341 = exp2(_2337 * cbSceneParam._m0[78u].x);
        float _2342 = exp2(_2337 * cbSceneParam._m0[78u].y);
        float _2343 = exp2(_2337 * cbSceneParam._m0[78u].z);
        float _2344 = _2341 * _2196;
        float _2345 = _2342 * _2197;
        float _2346 = _2343 * _2198;
        float _2353 = _677 + (-0.5);
        _2355 = cbMtdParam._m0[1u];
        _2357 = _2355.y * _2353;
        float _2360 = (_2335 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2361 = _2360 * (_2336 ? _2344 : (_2344 + (cbSceneParam._m0[72u].w * _2317)));
        _2362 = _2360 * (_2336 ? _2345 : (_2345 + (cbSceneParam._m0[72u].w * _2319)));
        _2363 = _2360 * (_2336 ? _2346 : (_2346 + (cbSceneParam._m0[72u].w * _2321)));
        _2366 = ((_2204 * _2208) * _2341) * _2360;
        _2369 = ((_2205 * _2208) * _2342) * _2360;
        _2372 = ((_2206 * _2208) * _2343) * _2360;
        _2373 = _2353 * 0.999000012874603271484375;
        _2383 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2383)
        {
            if ((cbInstanceData._m0[_728 + 7u].x + _2373) < 0.5)
            {
                _2595 = true;
                break;
            }
        }
        uint _2511 = _729 + uint(_2333.w);
        if ((cbInstanceData._m0[_2511].w < 1.0) && ((cbInstanceData._m0[_2511].w + _2373) < 0.5))
        {
            _2595 = true;
            break;
        }
        if ((_2357 + 1.0) < _2355.x)
        {
            _2595 = true;
            break;
        }
        _2595 = false;
        break;
    }
    float _2826;
    if (_2595)
    {
        discard_state = true;
        _2826 = 0.0;
    }
    else
    {
        _2826 = cbInstanceData._m0[_2209].w;
    }
    SV_Target.x = _2361;
    SV_Target.y = _2362;
    SV_Target.z = _2363;
    SV_Target.w = _2826;
    SV_Target_1.x = _2366;
    SV_Target_1.y = _2369;
    SV_Target_1.z = _2372;
    SV_Target_1.w = cbInstanceData._m0[_2209].w;
    discard_exit();
}


