#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1155;
float _3316;
float _3317;
float _3318;
float _3319;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _241 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _254 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_240 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_241 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _260 = _254.x * cbMtdParam._m0[9u].x;
    float _261 = _254.y * cbMtdParam._m0[9u].y;
    float _262 = _254.z * cbMtdParam._m0[9u].z;
    float _266 = _260 - (_260 * TEXCOORD_6.x);
    float _267 = _261 - (_261 * TEXCOORD_6.x);
    float _268 = _262 - (_262 * TEXCOORD_6.x);
    float _272 = _266 - (_266 * TEXCOORD_6.y);
    float _273 = _267 - (_267 * TEXCOORD_6.y);
    float _274 = _268 - (_268 * TEXCOORD_6.y);
    vec4 _290 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _240) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _241) + cbTextureTilingScale._m0[1u].w));
    float _298 = (_290.x * 2.0) + (-1.0);
    float _300 = (_290.y * 2.0) + (-1.0);
    float _301 = dot(vec2(_298, _300), vec2(_298, _300));
    float _3328 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _307 = sqrt(1.0 - (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))));
    float _308 = _290.z * cbMtdParam._m0[16u].w;
    float _310 = _308 - (_308 * TEXCOORD_6.x);
    float _312 = _310 - (_310 * TEXCOORD_6.y);
    vec4 _344 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _348 = cbPerFrame._m0[22u].x * 2.0;
    float _349 = _348 * cbMtdParam._m0[15u].w;
    float _352 = (_344.x * 0.5) + (-0.25);
    float _355 = (_344.y * 0.5) + (-0.25);
    float _356 = _355 * cbMtdParam._m0[15u].z;
    float _358 = (-0.0) - (cbMtdParam._m0[15u].z * _352);
    float _360 = fract(_349);
    float _362 = fract(_349 + 0.5);
    float _373 = abs((_360 * 2.0) + (-1.0));
    vec4 _390 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_360 * _358) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_356 * _360) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _394 = _390.z;
    vec4 _395 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_362 * _358) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_356 * _362) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _406 = ((_395.x - _392) * _373) + _392;
    float _407 = ((_395.y - _393) * _373) + _393;
    float _408 = ((_395.z - _394) * _373) + _394;
    vec4 _460 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _240) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _241) + cbTextureTilingScale._m0[2u].w));
    float _481 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _482 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _485 = _348 * cbMtdParam._m0[16u].z;
    float _486 = _355 * cbMtdParam._m0[16u].y;
    float _488 = (-0.0) - (cbMtdParam._m0[16u].y * _352);
    float _489 = fract(_485);
    float _491 = fract(_485 + 0.5);
    float _502 = abs((_489 * 2.0) + (-1.0));
    vec4 _519 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_489 * _488) + _481) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_486 * _489) + _482) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    vec4 _524 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_491 * _488) + _481) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_486 * _491) + _482) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _541 = ((((_524.x - _521) * _502) + _521) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _460.x);
    float _542 = ((((_524.y - _522) * _502) + _522) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _460.y);
    float _543 = ((((_524.z - _523) * _502) + _523) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _460.z);
    float _550 = ((((cbMtdParam._m0[16u].x * _406) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _541) * TEXCOORD_6.x) + _541;
    float _551 = ((((cbMtdParam._m0[16u].x * _407) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _542) * TEXCOORD_6.x) + _542;
    float _552 = ((((cbMtdParam._m0[16u].x * _408) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _543) * TEXCOORD_6.x) + _543;
    float _568 = _298 - (_298 * TEXCOORD_6.x);
    float _569 = _300 - (_300 * TEXCOORD_6.x);
    float _570 = _307 - (_307 * TEXCOORD_6.x);
    float _574 = _568 - (_568 * TEXCOORD_6.y);
    float _575 = _569 - (_569 * TEXCOORD_6.y);
    float _576 = _570 - (_570 * TEXCOORD_6.y);
    float _579 = fma(_576, _216 * NORMAL.x, fma(_575, _223 * TANGENT.x, (_209 * _202) * _574));
    float _582 = fma(_576, _216 * NORMAL.y, fma(_575, _223 * TANGENT.y, (_209 * _203) * _574));
    float _585 = fma(_576, _216 * NORMAL.z, fma(_575, _223 * TANGENT.z, (_209 * _204) * _574));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3339 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _593 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3361 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3372 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _663 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _653);
    float _664 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _653);
    float _665 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _653);
    float _669 = inversesqrt(dot(vec3(_663, _664, _665), vec3(_663, _664, _665)));
    float _670 = _663 * _669;
    float _671 = _664 * _669;
    float _672 = _665 * _669;
    vec4 _677 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _679 = _677.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _835 = sqrt(((_663 * _663) + (_664 * _664)) + (_665 * _665));
        float _841 = (cbMatDynParam._m0[5u].x * _835) + cbMatDynParam._m0[5u].y;
        float _3383 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _846 = (cbMatDynParam._m0[5u].z * _835) + cbMatDynParam._m0[5u].w;
        float _3394 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) - _842)) + _842) < ((_679 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _714 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _717 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _730 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3405 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _3416 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _3427 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _755 = _752.x * TEXCOORD_6.z;
    float _756 = dot(vec3(_590, _591, _592), vec3(_670, _671, _672));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _590) - _670;
    float _764 = (_759 * _591) - _671;
    float _765 = (_759 * _592) - _672;
    float _769 = abs(dot(vec3(_670, _671, _672), vec3(_590, _591, _592)));
    float _3438 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_593);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _884 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _888 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _912 = _816 + _590;
        float _913 = _820 + _591;
        float _914 = _824 + _592;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _880;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _884;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _888;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_590, _591, _592), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3486 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_590, _591, _592), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3519 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_590, _591, _592), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3552 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1202 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1206 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1229 = _816 + _590;
        float _1230 = _820 + _591;
        float _1231 = _824 + _592;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_590, _591, _592), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3615 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_590, _591, _592), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3648 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_590, _591, _592), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3681 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = _1155;
        _1477 = _1155;
        _1478 = _1155;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1167)) + _1167;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1168)) + _1168;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1169)) + _1169;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _763 * 0.5;
    float _1536 = _764 * 0.5;
    float _1537 = _765 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1651 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1655 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1659 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1662 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1665 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1668 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1696;
        if (_1662 > 0.0)
        {
            _1696 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1696 = frontier_phi_17_15_ladder;
        }
        float _2067;
        if (_1665 > 0.0)
        {
            _2067 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2067 = frontier_phi_26_22_ladder;
        }
        float _2410;
        if (_1668 > 0.0)
        {
            _2410 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2410 = frontier_phi_40_33_ladder;
        }
        float _2412 = isnan(_2067) ? _1696 : (isnan(_1696) ? _2067 : min(_1696, _2067));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1662) + _1651;
        float _2418 = (_2413 * _1665) + _1655;
        float _2419 = (_2413 * _1668) + _1659;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_16_40_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1684 = frontier_phi_16_40_ladder_2;
        _1686 = frontier_phi_16_40_ladder_1;
        _1688 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1604);
        _1684 = _1672.x * cbModelParam._m0[1u].y;
        _1686 = _1672.y * cbModelParam._m0[1u].y;
        _1688 = _1672.z * cbModelParam._m0[1u].y;
    }
    float _1692 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1692 : min(cbModelParam._m0[25u].w, _1692));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1761 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1764 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _2072;
        if (_1758 > 0.0)
        {
            _2072 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2072 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_1761 > 0.0)
        {
            _2436 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_42_35_ladder;
        }
        float _2626;
        if (_1764 > 0.0)
        {
            _2626 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2626 = frontier_phi_60_53_ladder;
        }
        float _2628 = isnan(_2436) ? _2072 : (isnan(_2072) ? _2436 : min(_2072, _2436));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1758) + _1747;
        float _2634 = (_2629 * _1761) + _1751;
        float _2635 = (_2629 * _1764) + _1755;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1693);
            frontier_phi_25_60_ladder = _2877.x * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _2877.y * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_25_60_ladder;
        _1785 = frontier_phi_25_60_ladder_2;
        _1787 = frontier_phi_25_60_ladder_1;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1693);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1799 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1800 = _1799 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1801 = _1799 * ((cbModelParam._m0[1u].w * (_1785 - _1686)) + _1686);
    float _1802 = _1799 * ((cbModelParam._m0[1u].w * (_1787 - _1688)) + _1688);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    vec4 _1819 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_691, _692));
    float _1821 = _1819.w;
    float _1833 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1821);
    float _1834 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1821);
    float _1835 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1821);
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_730 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1847 = _755 + (-1.0);
    float _1850 = (cbLight._m0[_1842].x * _1847) + 1.0;
    float _1851 = (cbLight._m0[_1842].y * _1847) + 1.0;
    uint _1852 = _1841 + 5u;
    float _1858 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1862 = _1841 + 4u;
    float _1871 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1875 = _1841 | 1u;
    float _1886 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_590, _591, _592));
    float _1889 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_590, _591, _592));
    float _3817 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _3828 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1894 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.3183098733425140380859375;
    float _1896 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.3183098733425140380859375;
    float _1903 = ((cbLight._m0[_1852].x * _1858) * _1896) + (((cbLight._m0[_1862].x * _1833) * _1871) * _1894);
    float _1904 = ((_1858 * cbLight._m0[_1852].y) * _1896) + (((cbLight._m0[_1862].y * _1834) * _1871) * _1894);
    float _1905 = ((_1858 * cbLight._m0[_1852].z) * _1896) + (((cbLight._m0[_1862].z * _1835) * _1871) * _1894);
    uint _1907 = _1841 + 8u;
    float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _593) * 0.949999988079071044921875);
    float _1921 = _1920 * _1920;
    float _1922 = cbLight._m0[_1841].x + _670;
    float _1923 = cbLight._m0[_1841].y + _671;
    float _1924 = cbLight._m0[_1841].z + _672;
    float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
    float _1929 = _1928 * _1922;
    float _1930 = _1928 * _1923;
    float _1931 = _1928 * _1924;
    float _1932 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1841].xyz));
    float _3839 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1936 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _1937 = dot(vec3(_590, _591, _592), vec3(_1929, _1930, _1931));
    float _3861 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_1929, _1930, _1931));
    float _3872 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1921 * _1921;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = 1.0 - _1921;
    float _1972 = (0.5 / (((_1936 * ((_1935 * _1961) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _1961) + _1921) * _1935))) * _1935;
    float _3883 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    uint _1988 = _1841 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _593) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1875].x + _670;
    float _2002 = cbLight._m0[_1875].y + _671;
    float _2003 = cbLight._m0[_1875].z + _672;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_1875].xyz));
    float _3894 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _2015 = dot(vec3(_590, _591, _592), vec3(_2008, _2009, _2010));
    float _3905 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2008, _2009, _2010));
    float _3916 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _2000;
    float _2047 = (0.5 / (((_1936 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2037) + _2000) * _2014))) * _2014;
    float _3927 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2059 = (((_2036 * cbLight._m0[_1988].x) * _2049) * _1858) + ((((cbLight._m0[_1907].x * _1833) * _1960) * _1974) * _1871);
    float _2060 = (((_2036 * cbLight._m0[_1988].y) * _2049) * _1858) + ((((cbLight._m0[_1907].y * _1834) * _1960) * _1974) * _1871);
    float _2061 = (((_2036 * cbLight._m0[_1988].z) * _2049) * _1858) + ((((cbLight._m0[_1907].z * _1835) * _1960) * _1974) * _1871);
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_1839.y == 0u)
    {
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2116;
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2116;
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2116;
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.x;
        uint _2143 = uint((float(_2131.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2132))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2132)));
        float _2153 = (log2(_2119 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2154 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        uint _2157 = uint(isnan(14.0) ? _2154 : (isnan(_2154) ? 14.0 : min(_2154, 14.0)));
        uvec4 _2162 = texelFetch(g_lightClusterGridBuffer, int(((_2157 << 2u) + (_2143 << 6u)) >> 2u));
        uint _2163 = _2162.x;
        uint _2164 = _2131.z;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((((1u << ((_2164 >> 4u) & 15u)) + 4294967295u) & _2163) == 0u) || ((_2164 & 240u) == 0u))
        {
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
        }
        else
        {
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            uint _2479 = 0u;
            uint _2488;
            bool _2489;
            for (;;)
            {
                _2488 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2479 << 2u)) >> 2u)).x;
                _2489 = _2488 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2489)
                {
                    frontier_phi_55_pred = _2477;
                    frontier_phi_55_pred_1 = _2478;
                    frontier_phi_55_pred_2 = _2476;
                    frontier_phi_55_pred_3 = _2475;
                    frontier_phi_55_pred_4 = _2474;
                    frontier_phi_55_pred_5 = _2473;
                }
                else
                {
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    uint _2675;
                    _2669 = _2473;
                    _2670 = _2474;
                    _2671 = _2475;
                    _2672 = _2476;
                    _2673 = _2477;
                    _2674 = _2478;
                    _2675 = _2488;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2679 = uint(findLSB(_2675)) + (_2479 << 5u);
                        uint _2676 = (_2675 + 4294967295u) & _2675;
                        uint _2681 = _2679 * 48u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2701 = (_2679 * 48u) + 4u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2720 = (_2679 * 48u) + 8u;
                        vec3 _2731 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x));
                        float _2735 = _2695.x - _2117;
                        float _2736 = _2695.y - _2118;
                        float _2737 = _2695.z - _2119;
                        float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                        float _2741 = inversesqrt(_2738);
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2745 = dot(vec3(_711, _714, _717), vec3(_2742, _2743, _2744));
                        float _2750 = 1.0 - (_2738 * _2695.w);
                        float _3948 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2752 = sqrt(_2738) * _2714.w;
                        float _2755 = 1.39999997615814208984375 / (_2752 + 1.39999997615814208984375);
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2745) + _2756;
                        float _2762 = _2752 * _2752;
                        float _2766 = ((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2751) / ((_2762 * 0.699999988079071044921875) + 1.0);
                        float _2770 = (-0.0) - _2117;
                        float _2771 = (-0.0) - _2118;
                        float _2772 = (-0.0) - _2119;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2787 = exp2(log2(1.0 / ((_2762 * 3.5) + 5.0)) * 0.25);
                        float _2788 = 1.0 - _771;
                        float _2795 = sqrt(1.0 - ((1.0 - (_2788 * _2788)) * (1.0 - (_2787 * _2787))));
                        float _2796 = _2795 * _2795;
                        float _2797 = _2796 * _2796;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2808 = dot(vec3(_711, _714, _717), vec3(_2777, _2778, _2779));
                        float _3964 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _2812 = dot(vec3(_711, _714, _717), vec3(_2804 * _2798, _2804 * _2799, _2804 * _2800));
                        float _3975 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2819 = ((_2815 * _2815) * (_2797 + (-1.0))) + 1.0;
                        float _2820 = _2755 * _2796;
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2745) + _2821;
                        float _3986 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2825 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2826 = 1.0 - _2796;
                        float _2836 = (0.5 / (((_2825 * ((_2811 * _2826) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2826) + _2796) * _2811))) * _2825;
                        float _3997 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2847 = (((_2797 * 3.1415927410125732421875) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) / ((_2819 * _2819) * ((_2762 * 2.1991131305694580078125) + 3.141590118408203125))) * _2751;
                        _2573 = (_2766 * _2714.x) + _2672;
                        _2574 = (_2766 * _2714.y) + _2673;
                        _2575 = (_2766 * _2714.z) + _2674;
                        _2570 = (_2847 * _2731.x) + _2669;
                        _2571 = (_2847 * _2731.y) + _2670;
                        _2572 = (_2847 * _2731.z) + _2671;
                        if (_2676 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2669 = _2570;
                            _2670 = _2571;
                            _2671 = _2572;
                            _2672 = _2573;
                            _2673 = _2574;
                            _2674 = _2575;
                            _2675 = _2676;
                        }
                    }
                    frontier_phi_55_pred = _2574;
                    frontier_phi_55_pred_1 = _2575;
                    frontier_phi_55_pred_2 = _2573;
                    frontier_phi_55_pred_3 = _2572;
                    frontier_phi_55_pred_4 = _2571;
                    frontier_phi_55_pred_5 = _2570;
                }
                _2289 = frontier_phi_55_pred;
                _2291 = frontier_phi_55_pred_1;
                _2287 = frontier_phi_55_pred_2;
                _2285 = frontier_phi_55_pred_3;
                _2283 = frontier_phi_55_pred_4;
                _2281 = frontier_phi_55_pred_5;
                uint _2480 = _2479 + 1u;
                if (_2480 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2473 = _2281;
                    _2474 = _2283;
                    _2475 = _2285;
                    _2476 = _2287;
                    _2477 = _2289;
                    _2478 = _2291;
                    _2479 = _2480;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
        }
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.z;
        uint _2297 = (_2295 >> 8u) & 15u;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        if (((4294967295u << _2297) & _2163) == 0u)
        {
            _2441 = _2280;
            _2443 = _2282;
            _2445 = _2284;
            _2447 = _2286;
            _2449 = _2288;
            _2451 = _2290;
        }
        else
        {
            float _2466 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
            float _2467 = _2466 * _2117;
            float _2468 = _2466 * _2118;
            float _2469 = _2466 * _2119;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            float frontier_phi_44_45_ladder_3;
            float frontier_phi_44_45_ladder_4;
            float frontier_phi_44_45_ladder_5;
            if (_2297 < ((_2295 >> 12u) & 15u))
            {
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2652 = _2280;
                float _2653 = _2282;
                float _2654 = _2284;
                float _2655 = _2286;
                float _2656 = _2288;
                float _2657 = _2290;
                uint _2658 = _2297;
                uint _2667;
                bool _2668;
                for (;;)
                {
                    _2667 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                    _2668 = _2667 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2668)
                    {
                        frontier_phi_69_pred = _2657;
                        frontier_phi_69_pred_1 = _2656;
                        frontier_phi_69_pred_2 = _2655;
                        frontier_phi_69_pred_3 = _2654;
                        frontier_phi_69_pred_4 = _2653;
                        frontier_phi_69_pred_5 = _2652;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _2895 = _2652;
                        float _2896 = _2653;
                        float _2897 = _2654;
                        float _2898 = _2655;
                        float _2899 = _2656;
                        float _2900 = _2657;
                        uint _2901 = _2667;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2970;
                        vec4 _2986;
                        float _3033;
                        bool _3034;
                        for (;;)
                        {
                            uint _2912 = ((_2658 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2957 = (_2912 * 40u) + 16u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2912 * 40u) + 20u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2989 = (_2912 * 40u) + 24u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3008 = (_2912 * 40u) + 28u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            _3033 = fma(_2119, _3021.z, fma(_2118, _3021.y, _3021.x * _2117)) + _3021.w;
                            _3034 = !((fma(_2119, _3002.z, fma(_2118, _3002.y, _3002.x * _2117)) + _3002.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3034)
                            {
                                float _3061 = _2927.x - _2117;
                                float _3062 = _2927.y - _2118;
                                float _3063 = _2927.z - _2119;
                                float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                                float _3067 = inversesqrt(_3064);
                                float _3068 = _3067 * _3061;
                                float _3069 = _3067 * _3062;
                                float _3070 = _3067 * _3063;
                                float _3074 = 1.0 - (_3064 / (_2928 * _2928));
                                float _4008 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _3079 = sqrt(_3064) * _2943.w;
                                float _3081 = 1.39999997615814208984375 / (_3079 + 1.39999997615814208984375);
                                float _3082 = _3081 * _3081;
                                float _3085 = ((1.0 - _3082) * dot(vec3(_3068, _3069, _3070), vec3(_711, _714, _717))) + _3082;
                                float _3088 = _3079 * _3079;
                                float _3092 = (fma(_2119, _2970.z, fma(_2118, _2970.y, _2970.x * _2117)) + _2970.w) / _3033;
                                float _3093 = (fma(_2119, _2986.z, fma(_2118, _2986.y, _2986.x * _2117)) + _2986.w) / _3033;
                                float _3097 = 1.0 - dot(vec2(_3092, _3093), vec2(_3092, _3093));
                                float _4024 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                                float _3099 = _3098 * (((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3075) / ((_3088 * 0.699999988079071044921875) + 1.0));
                                float _3111 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                                float _3112 = 1.0 - _771;
                                float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                                float _3120 = _3119 * _3119;
                                float _3121 = _3120 * _3120;
                                float _3122 = _3068 - _2467;
                                float _3123 = _3069 - _2468;
                                float _3124 = _3070 - _2469;
                                float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                                float _3132 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2467, (-0.0) - _2468, (-0.0) - _2469));
                                float _4035 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _3136 = dot(vec3(_711, _714, _717), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                                float _4046 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3139 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                                float _3144 = _3081 * _3120;
                                float _3145 = _3144 * _3144;
                                float _3151 = ((1.0 - _3145) * dot(vec3(_711, _714, _717), vec3(_3068, _3069, _3070))) + _3145;
                                float _4057 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3152 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3153 = 1.0 - _3120;
                                float _3163 = (0.5 / (((_3152 * ((_3135 * _3153) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3120) * _3135))) * _3152;
                                float _4068 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3173 = (_3098 * _3075) * (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) / ((_3143 * _3143) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3099 * _2943.x;
                                frontier_phi_75_pred_1 = _3099 * _2943.z;
                                frontier_phi_75_pred_2 = _3099 * _2943.y;
                                frontier_phi_75_pred_3 = _3173 * _2955.z;
                                frontier_phi_75_pred_4 = _3173 * _2955.y;
                                frontier_phi_75_pred_5 = _3173 * _2955.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_75_pred;
                            _3182 = frontier_phi_75_pred_1;
                            _3181 = frontier_phi_75_pred_2;
                            _3179 = frontier_phi_75_pred_3;
                            _3178 = frontier_phi_75_pred_4;
                            _3177 = frontier_phi_75_pred_5;
                            _2885 = _3180 + _2898;
                            _2886 = _3181 + _2899;
                            _2887 = _3182 + _2900;
                            _2882 = _3177 + _2895;
                            _2883 = _3178 + _2896;
                            _2884 = _3179 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2887;
                        frontier_phi_69_pred_1 = _2886;
                        frontier_phi_69_pred_2 = _2885;
                        frontier_phi_69_pred_3 = _2884;
                        frontier_phi_69_pred_4 = _2883;
                        frontier_phi_69_pred_5 = _2882;
                    }
                    _2452 = frontier_phi_69_pred;
                    _2450 = frontier_phi_69_pred_1;
                    _2448 = frontier_phi_69_pred_2;
                    _2446 = frontier_phi_69_pred_3;
                    _2444 = frontier_phi_69_pred_4;
                    _2442 = frontier_phi_69_pred_5;
                    uint _2659 = _2658 + 1u;
                    if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2652 = _2442;
                        _2653 = _2444;
                        _2654 = _2446;
                        _2655 = _2448;
                        _2656 = _2450;
                        _2657 = _2452;
                        _2658 = _2659;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2444;
                frontier_phi_44_45_ladder_1 = _2452;
                frontier_phi_44_45_ladder_2 = _2450;
                frontier_phi_44_45_ladder_3 = _2448;
                frontier_phi_44_45_ladder_4 = _2446;
                frontier_phi_44_45_ladder_5 = _2442;
            }
            else
            {
                frontier_phi_44_45_ladder = _2282;
                frontier_phi_44_45_ladder_1 = _2290;
                frontier_phi_44_45_ladder_2 = _2288;
                frontier_phi_44_45_ladder_3 = _2286;
                frontier_phi_44_45_ladder_4 = _2284;
                frontier_phi_44_45_ladder_5 = _2280;
            }
            _2441 = frontier_phi_44_45_ladder_5;
            _2443 = frontier_phi_44_45_ladder;
            _2445 = frontier_phi_44_45_ladder_4;
            _2447 = frontier_phi_44_45_ladder_3;
            _2449 = frontier_phi_44_45_ladder_2;
            _2451 = frontier_phi_44_45_ladder_1;
        }
        float _2456 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2176 = (_2456 * _2447) + _1903;
        _2178 = (_2456 * _2449) + _1904;
        _2180 = (_2456 * _2451) + _1905;
        _2182 = ((_2441 * 0.039999999105930328369140625) * _2456) + _2059;
        _2184 = ((_2443 * 0.039999999105930328369140625) * _2456) + _2060;
        _2186 = ((_2445 * 0.039999999105930328369140625) * _2456) + _2061;
    }
    else
    {
        _2176 = _1903;
        _2178 = _1904;
        _2180 = _1905;
        _2182 = _2059;
        _2184 = _2060;
        _2186 = _2061;
    }
    uint _2192 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _2198 = (((((_406 * cbMtdParam._m0[12u].x) - _550) * TEXCOORD_6.y) + _550) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2192].x;
    float _2199 = (((((_407 * cbMtdParam._m0[12u].y) - _551) * TEXCOORD_6.y) + _551) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2192].y;
    float _2200 = (((((_408 * cbMtdParam._m0[12u].z) - _552) * TEXCOORD_6.y) + _552) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2192].z;
    float _4084 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4095 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4106 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2217 = (((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_2176 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _755))) + ((_2182 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + _2198;
    float _2219 = (_2199 + ((_2184 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2178 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _755)));
    float _2221 = (_2200 + ((_2186 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1593)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2180 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _755)));
    float _2222 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2223 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2230 = cbMtdParam._m0[2u].x * _2198;
    float _2231 = cbMtdParam._m0[2u].y * _2199;
    float _2232 = cbMtdParam._m0[2u].z * _2200;
    float _4132 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2234 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    uint _2235 = _730 + 6u;
    float _2243 = _691 / cbSceneParam._m0[86u].x;
    float _2244 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2260 = _2258.x;
    float _2261 = _2258.y;
    float _2262 = _2258.z;
    float _2263 = _2258.w;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2305 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2306 = _2305 / _612;
        float _2317 = _2306 * _663;
        float _2318 = _664 * _2306;
        float _2319 = (-0.0) - _2318;
        float _2320 = _2306 * _665;
        float _2322 = (cbSceneParam._m0[77u].w * _2319) / _2305;
        float _2323 = _2322 + cbSceneParam._m0[79u].w;
        float _2324 = cbSceneParam._m0[79u].w - _2318;
        float _2330 = sqrt(((_2317 * _2317) + (_2318 * _2318)) + (_2320 * _2320));
        float _2333 = (1.0 - (cbSceneParam._m0[77u].w / _2305)) * _2330;
        float _2339 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2341 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2319 - _2322) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2323 > 0.0) ? exp2(_2339 * _2323) : (2.0 - exp2(_2341 * _2323))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2333;
        }
        else
        {
            float _2502 = 1.0 / cbSceneParam._m0[80u].x;
            float _2503 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : max(_2323, _2324));
            float _2504 = isnan(_2324) ? _2323 : (isnan(_2323) ? _2324 : min(_2323, _2324));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            _2583 = ((abs(_2330 / _2319) * cbSceneParam._m0[80u].y) * ((((_2513 - _2514) * 2.0) - ((exp2(_2339 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0)))) - exp2(_2339 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))))) * _2502)) - ((exp2(_2341 * _2513) - exp2(_2341 * _2514)) * _2502))) + (_2333 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2263);
        _2343 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2260;
        _2345 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2261;
        _2347 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2262;
        _2349 = _2594 * _2263;
    }
    else
    {
        _2343 = _2260;
        _2345 = _2261;
        _2347 = _2262;
        _2349 = _2263;
    }
    bool _2621;
    vec4 _2359;
    vec4 _2381;
    float _2383;
    float _2387;
    float _2388;
    float _2389;
    float _2392;
    float _2395;
    float _2398;
    float _2399;
    bool _2409;
    for (;;)
    {
        _2359 = cbMatDynParam._m0[0u];
        float _2361 = roundEven(_2359.y);
        bool _2362 = _2361 == 3.0;
        float _2363 = log2(_2349);
        float _2367 = exp2(_2363 * cbSceneParam._m0[78u].x);
        float _2368 = exp2(_2363 * cbSceneParam._m0[78u].y);
        float _2369 = exp2(_2363 * cbSceneParam._m0[78u].z);
        float _2370 = _2367 * _2222;
        float _2371 = _2368 * _2223;
        float _2372 = _2369 * _2224;
        float _2379 = _679 + (-0.5);
        _2381 = cbMtdParam._m0[1u];
        _2383 = _2381.y * _2379;
        float _2386 = (_2361 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2387 = _2386 * (_2362 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2343)));
        _2388 = _2386 * (_2362 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2345)));
        _2389 = _2386 * (_2362 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2347)));
        _2392 = ((_2230 * _2234) * _2367) * _2386;
        _2395 = ((_2231 * _2234) * _2368) * _2386;
        _2398 = ((_2232 * _2234) * _2369) * _2386;
        _2399 = _2379 * 0.999000012874603271484375;
        _2409 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2409)
        {
            if ((cbInstanceData._m0[_730 + 7u].x + _2399) < 0.5)
            {
                _2621 = true;
                break;
            }
        }
        uint _2537 = _731 + uint(_2359.w);
        if ((cbInstanceData._m0[_2537].w < 1.0) && ((cbInstanceData._m0[_2537].w + _2399) < 0.5))
        {
            _2621 = true;
            break;
        }
        if ((_2383 + 1.0) < _2381.x)
        {
            _2621 = true;
            break;
        }
        _2621 = false;
        break;
    }
    float _2852;
    if (_2621)
    {
        discard_state = true;
        _2852 = 0.0;
    }
    else
    {
        _2852 = cbInstanceData._m0[_2235].w;
    }
    SV_Target.x = _2387;
    SV_Target.y = _2388;
    SV_Target.z = _2389;
    SV_Target.w = _2852;
    SV_Target_1.x = _2392;
    SV_Target_1.y = _2395;
    SV_Target_1.z = _2398;
    SV_Target_1.w = cbInstanceData._m0[_2235].w;
    discard_exit();
}


