#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1112;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = (cbMtdParam._m0[18u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _239 = (cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    vec4 _252 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_238 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_239 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _258 = _252.x * cbMtdParam._m0[9u].x;
    float _259 = _252.y * cbMtdParam._m0[9u].y;
    float _260 = _252.z * cbMtdParam._m0[9u].z;
    float _264 = _258 - (_258 * TEXCOORD_6.x);
    float _265 = _259 - (_259 * TEXCOORD_6.x);
    float _266 = _260 - (_260 * TEXCOORD_6.x);
    float _270 = _264 - (_264 * TEXCOORD_6.y);
    float _271 = _265 - (_265 * TEXCOORD_6.y);
    float _272 = _266 - (_266 * TEXCOORD_6.y);
    vec4 _288 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _238) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _239) + cbTextureTilingScale._m0[1u].w));
    float _296 = (_288.x * 2.0) + (-1.0);
    float _298 = (_288.y * 2.0) + (-1.0);
    float _299 = dot(vec2(_296, _298), vec2(_296, _298));
    float _3478 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _305 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    float _306 = _288.z * cbMtdParam._m0[16u].w;
    float _308 = _306 - (_306 * TEXCOORD_6.x);
    float _310 = _308 - (_308 * TEXCOORD_6.y);
    vec4 _342 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD.y)) + cbTextureTilingScale._m0[3u].w));
    float _346 = cbPerFrame._m0[22u].x * 2.0;
    float _347 = _346 * cbMtdParam._m0[15u].w;
    float _350 = (_342.x * 0.5) + (-0.25);
    float _353 = (_342.y * 0.5) + (-0.25);
    float _354 = _353 * cbMtdParam._m0[15u].z;
    float _356 = (-0.0) - (cbMtdParam._m0[15u].z * _350);
    float _358 = fract(_347);
    float _360 = fract(_347 + 0.5);
    float _371 = abs((_358 * 2.0) + (-1.0));
    vec4 _388 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_358 * _356) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_354 * _358) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _390 = _388.x;
    float _391 = _388.y;
    float _392 = _388.z;
    vec4 _393 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((((_360 * _356) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_354 * _360) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _404 = ((_393.x - _390) * _371) + _390;
    float _405 = ((_393.y - _391) * _371) + _391;
    float _406 = ((_393.z - _392) * _371) + _392;
    vec4 _458 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * _238) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _239) + cbTextureTilingScale._m0[2u].w));
    float _479 = (cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x) + TEXCOORD.x;
    float _480 = (cbMtdParam._m0[18u].y * cbPerFrame._m0[22u].x) + TEXCOORD.y;
    float _483 = _346 * cbMtdParam._m0[16u].z;
    float _484 = _353 * cbMtdParam._m0[16u].y;
    float _486 = (-0.0) - (cbMtdParam._m0[16u].y * _350);
    float _487 = fract(_483);
    float _489 = fract(_483 + 0.5);
    float _500 = abs((_487 * 2.0) + (-1.0));
    vec4 _517 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_487 * _486) + _479) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_484 * _487) + _480) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    vec4 _522 = texture(sampler2D(P_ACParts_AMSN_Flow_Emissive_Glow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_489 * _486) + _479) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_484 * _489) + _480) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _539 = ((((_522.x - _519) * _500) + _519) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[10u].x * cbMtdParam._m0[15u].x) * _458.x);
    float _540 = ((((_522.y - _520) * _500) + _520) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[10u].y * cbMtdParam._m0[15u].x) * _458.y);
    float _541 = ((((_522.z - _521) * _500) + _521) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[10u].z * cbMtdParam._m0[15u].x) * _458.z);
    float _548 = ((((cbMtdParam._m0[16u].x * _404) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].x) + (cbMtdParam._m0[13u].x * cbMtdParam._m0[17u].x))) - _539) * TEXCOORD_6.x) + _539;
    float _549 = ((((cbMtdParam._m0[16u].x * _405) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].y) + (cbMtdParam._m0[13u].y * cbMtdParam._m0[17u].x))) - _540) * TEXCOORD_6.x) + _540;
    float _550 = ((((cbMtdParam._m0[16u].x * _406) * ((cbMtdParam._m0[17u].y * cbMtdParam._m0[14u].z) + (cbMtdParam._m0[13u].z * cbMtdParam._m0[17u].x))) - _541) * TEXCOORD_6.x) + _541;
    float _566 = _296 - (_296 * TEXCOORD_6.x);
    float _567 = _298 - (_298 * TEXCOORD_6.x);
    float _568 = _305 - (_305 * TEXCOORD_6.x);
    float _572 = _566 - (_566 * TEXCOORD_6.y);
    float _573 = _567 - (_567 * TEXCOORD_6.y);
    float _574 = _568 - (_568 * TEXCOORD_6.y);
    float _577 = fma(_574, _214 * NORMAL.x, fma(_573, _221 * TANGENT.x, (_207 * _200) * _572));
    float _580 = fma(_574, _214 * NORMAL.y, fma(_573, _221 * TANGENT.y, (_207 * _201) * _572));
    float _583 = fma(_574, _214 * NORMAL.z, fma(_573, _221 * TANGENT.z, (_207 * _202) * _572));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3489 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _591 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3511 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3522 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _610 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _700 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _703 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _716 = uint(roundEven(NORMAL.w)) * 13u;
    uint _717 = _716 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3533 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _741 = _738.x * TEXCOORD_6.z;
    float _742 = dot(vec3(_588, _589, _590), vec3(_668, _669, _670));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _588) - _668;
    float _750 = (_745 * _589) - _669;
    float _751 = (_745 * _590) - _670;
    float _755 = abs(dot(vec3(_668, _669, _670), vec3(_588, _589, _590)));
    float _3566 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_591);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_810, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802));
        float _841 = fma(_810, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802));
        float _845 = fma(_810, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802));
        float _869 = _802 + _588;
        float _870 = _806 + _589;
        float _871 = _810 + _590;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _837;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _841;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _845;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_588, _589, _590), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3614 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_588, _589, _590), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3647 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_588, _589, _590), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3680 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1113 = _941;
        _1114 = _940;
        _1115 = _952;
        _1116 = _951;
        _1117 = _950;
        _1118 = _962;
        _1119 = _961;
        _1120 = _960;
        _1121 = _975;
        _1122 = _974;
        _1123 = _973;
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _1112;
        _1113 = _1112;
        _1114 = _1112;
        _1115 = _1112;
        _1116 = _1112;
        _1117 = _1112;
        _1118 = _1112;
        _1119 = _1112;
        _1120 = _1112;
        _1121 = _1112;
        _1122 = _1112;
        _1123 = _1112;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_810, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802));
        float _1156 = fma(_810, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802));
        float _1160 = fma(_810, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802));
        float _1183 = _802 + _588;
        float _1184 = _806 + _589;
        float _1185 = _810 + _590;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_588, _589, _590), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3743 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_588, _589, _590), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3776 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_588, _589, _590), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3809 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1112;
        _1422 = _1112;
        _1423 = _1112;
        _1424 = _1112;
        _1425 = _1112;
        _1426 = _1112;
        _1427 = _1112;
        _1428 = _1112;
        _1429 = _1112;
        _1430 = _1112;
        _1431 = _1112;
        _1432 = _1112;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1124)) + _1124;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1125)) + _1125;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1126)) + _1126;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _749 * 0.5;
    float _1490 = _750 * 0.5;
    float _1491 = _751 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1111, _1115, _1118, _1121));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_810, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_810, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_810, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1619 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1622 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1650 = frontier_phi_14_12_ladder;
        }
        float _1820;
        if (_1619 > 0.0)
        {
            _1820 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1820 = frontier_phi_23_19_ladder;
        }
        float _2264;
        if (_1622 > 0.0)
        {
            _2264 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2264 = frontier_phi_35_30_ladder;
        }
        float _2266 = isnan(_1820) ? _1650 : (isnan(_1650) ? _1820 : min(_1650, _1820));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1616) + _1605;
        float _2272 = (_2267 * _1619) + _1609;
        float _2273 = (_2267 * _1622) + _1613;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_13_35_ladder_2;
        _1640 = frontier_phi_13_35_ladder_1;
        _1642 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1558);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1701 = fma(_810, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802)) + cbModelParam._m0[21u].w;
        float _1705 = fma(_810, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802)) + cbModelParam._m0[22u].w;
        float _1709 = fma(_810, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802)) + cbModelParam._m0[23u].w;
        float _1712 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1715 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1718 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1825;
        if (_1712 > 0.0)
        {
            _1825 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1825 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1715 > 0.0)
        {
            _2291 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2663;
        if (_1718 > 0.0)
        {
            _2663 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2663 = frontier_phi_49_44_ladder;
        }
        float _2665 = isnan(_2291) ? _1825 : (isnan(_1825) ? _2291 : min(_1825, _2291));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1712) + _1701;
        float _2671 = (_2666 * _1715) + _1705;
        float _2672 = (_2666 * _1718) + _1709;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_22_49_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1737 = frontier_phi_22_49_ladder_2;
        _1739 = frontier_phi_22_49_ladder_1;
        _1741 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1647);
        _1737 = _1721.x * cbModelParam._m0[1u].z;
        _1739 = _1721.y * cbModelParam._m0[1u].z;
        _1741 = _1721.z * cbModelParam._m0[1u].z;
    }
    float _1753 = ((((1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_770 * _757)) * _741;
    float _1754 = _1753 * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1755 = _1753 * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1756 = _1753 * ((cbModelParam._m0[1u].w * (_1741 - _1642)) + _1642);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, _1754 * cbSceneParam._m0[91u].x));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1812 = _1799 / _1811;
    float _1813 = _1803 / _1811;
    float _1814 = _1807 / _1811;
    float _1961;
    float _1962;
    float _1963;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1841 = ((uint(_1814 > cbSceneParam._m0[59u].y) + uint(_1814 > cbSceneParam._m0[59u].x)) + uint(_1814 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1842 = _1841 + 43u;
        uint _1850 = _1841 + 44u;
        uint _1858 = _1841 + 45u;
        uint _1866 = _1841 + 46u;
        float _1877 = fma(_1811, cbSceneParam._m0[_1842].w, fma(_1807, cbSceneParam._m0[_1842].z, fma(_1803, cbSceneParam._m0[_1842].y, _1799 * cbSceneParam._m0[_1842].x)));
        float _1881 = fma(_1811, cbSceneParam._m0[_1850].w, fma(_1807, cbSceneParam._m0[_1850].z, fma(_1803, cbSceneParam._m0[_1850].y, _1799 * cbSceneParam._m0[_1850].x)));
        float _1889 = fma(_1811, cbSceneParam._m0[_1866].w, fma(_1807, cbSceneParam._m0[_1866].z, fma(_1803, cbSceneParam._m0[_1866].y, _1799 * cbSceneParam._m0[_1866].x)));
        float _1894 = cbSceneParam._m0[33u].z * _1889;
        float _1896 = cbSceneParam._m0[33u].w * _1889;
        float _1899 = fma(_1811, cbSceneParam._m0[_1858].w, fma(_1807, cbSceneParam._m0[_1858].z, fma(_1803, cbSceneParam._m0[_1858].y, _1799 * cbSceneParam._m0[_1858].x))) / _1889;
        float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814))) * cbSceneParam._m0[33u].y;
        float _3935 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1954 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 + _1877) / _1889, (_1896 + _1881) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 + _1877) / _1889, (_1881 - _1894) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 - _1894) / _1889, (_1881 - _1896) / _1889), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 - _1896) / _1889, (_1894 + _1881) / _1889), _1899), 0.0)).x), vec4(0.25)));
        _1961 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
        _1962 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
        _1963 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1961 = 1.0;
        _1962 = 1.0;
        _1963 = 1.0;
    }
    float _2027;
    float _2029;
    float _2031;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2015 = fma(_1811, cbSceneParam._m0[63u].w, fma(_1807, cbSceneParam._m0[63u].z, fma(_1803, cbSceneParam._m0[63u].y, _1799 * cbSceneParam._m0[63u].x)));
        float _2016 = fma(_1811, cbSceneParam._m0[60u].w, fma(_1807, cbSceneParam._m0[60u].z, fma(_1803, cbSceneParam._m0[60u].y, _1799 * cbSceneParam._m0[60u].x))) / _2015;
        float _2017 = fma(_1811, cbSceneParam._m0[61u].w, fma(_1807, cbSceneParam._m0[61u].z, fma(_1803, cbSceneParam._m0[61u].y, _1799 * cbSceneParam._m0[61u].x))) / _2015;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2016 >= cbSceneParam._m0[64u].x) && (_2017 >= cbSceneParam._m0[64u].y)) && (_2016 <= cbSceneParam._m0[64u].z)) && (_2017 <= cbSceneParam._m0[64u].w))
        {
            float _2304 = fma(_1811, cbSceneParam._m0[62u].w, fma(_1807, cbSceneParam._m0[62u].z, fma(_1803, cbSceneParam._m0[62u].y, _1799 * cbSceneParam._m0[62u].x))) / _2015;
            float _2308 = isnan(cbSceneParam._m0[41u].w) ? _2304 : (isnan(_2304) ? cbSceneParam._m0[41u].w : max(_2304, cbSceneParam._m0[41u].w));
            float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814))) * cbSceneParam._m0[33u].y;
            float _3951 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
            float _2358 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2016, cbSceneParam._m0[33u].w + _2017), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2016, _2017 - cbSceneParam._m0[33u].z), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2016 - cbSceneParam._m0[33u].z, _2017 - cbSceneParam._m0[33u].w), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2016 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2017), _2308), 0.0)).x), vec4(0.25)));
            float _2362 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
            float _2363 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
            float _2364 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2364) ? _1963 : (isnan(_1963) ? _2364 : min(_1963, _2364));
            frontier_phi_34_33_ladder_1 = isnan(_2363) ? _1962 : (isnan(_1962) ? _2363 : min(_1962, _2363));
            frontier_phi_34_33_ladder_2 = isnan(_2362) ? _1961 : (isnan(_1961) ? _2362 : min(_1961, _2362));
        }
        else
        {
            frontier_phi_34_33_ladder = _1963;
            frontier_phi_34_33_ladder_1 = _1962;
            frontier_phi_34_33_ladder_2 = _1961;
        }
        _2027 = frontier_phi_34_33_ladder_2;
        _2029 = frontier_phi_34_33_ladder_1;
        _2031 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2027 = _1961;
        _2029 = _1962;
        _2031 = _1963;
    }
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_716 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2044 = _741 + (-1.0);
    float _2047 = (cbLight._m0[_2039].x * _2044) + 1.0;
    float _2048 = (cbLight._m0[_2039].y * _2044) + 1.0;
    uint _2049 = _2038 + 5u;
    float _2055 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2059 = _2038 + 4u;
    float _2068 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2072 = _2038 | 1u;
    float _2083 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_588, _589, _590));
    float _2086 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_588, _589, _590));
    float _3987 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _3998 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _2093 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _2100 = ((cbLight._m0[_2049].x * _2055) * _2093) + (((cbLight._m0[_2059].x * _2027) * _2068) * _2091);
    float _2101 = ((_2055 * cbLight._m0[_2049].y) * _2093) + (((cbLight._m0[_2059].y * _2029) * _2068) * _2091);
    float _2102 = ((_2055 * cbLight._m0[_2049].z) * _2093) + (((cbLight._m0[_2059].z * _2031) * _2068) * _2091);
    uint _2104 = _2038 + 8u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _591) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_2038].x + _668;
    float _2120 = cbLight._m0[_2038].y + _669;
    float _2121 = cbLight._m0[_2038].z + _670;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2038].xyz));
    float _4009 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _4020 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _2133 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _2134 = dot(vec3(_588, _589, _590), vec3(_2126, _2127, _2128));
    float _4031 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2126, _2127, _2128));
    float _4042 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2118 * _2118;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2158 = 1.0 - _2118;
    float _2169 = (0.5 / (((_2133 * ((_2132 * _2158) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2158) + _2118) * _2132))) * _2132;
    float _4053 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    uint _2185 = _2038 + 9u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _591) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2072].x + _668;
    float _2199 = cbLight._m0[_2072].y + _669;
    float _2200 = cbLight._m0[_2072].z + _670;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2072].xyz));
    float _4064 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2212 = dot(vec3(_588, _589, _590), vec3(_2205, _2206, _2207));
    float _4075 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2205, _2206, _2207));
    float _4086 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2197 * _2197;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2233 = (exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2234 = 1.0 - _2197;
    float _2244 = (0.5 / (((_2133 * ((_2211 * _2234) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2133 * _2234) + _2197) * _2211))) * _2211;
    float _4097 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    float _2256 = (((_2233 * cbLight._m0[_2185].x) * _2246) * _2055) + ((((cbLight._m0[_2104].x * _2027) * _2157) * _2171) * _2068);
    float _2257 = (((_2233 * cbLight._m0[_2185].y) * _2246) * _2055) + ((((cbLight._m0[_2104].y * _2029) * _2157) * _2171) * _2068);
    float _2258 = (((_2233 * cbLight._m0[_2185].z) * _2246) * _2055) + ((((cbLight._m0[_2104].z * _2031) * _2157) * _2171) * _2068);
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_2036.y == 0u)
    {
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2377)));
        float _2398 = (log2(_1814 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2737)
                {
                    frontier_phi_58_pred = _2724;
                    frontier_phi_58_pred_1 = _2723;
                    frontier_phi_58_pred_2 = _2722;
                    frontier_phi_58_pred_3 = _2721;
                    frontier_phi_58_pred_4 = _2725;
                    frontier_phi_58_pred_5 = _2726;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2736;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2727 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _1812;
                        float _2933 = _2892.y - _1813;
                        float _2934 = _2892.z - _1814;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_697, _700, _703), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4118 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _1812;
                        float _2968 = (-0.0) - _1813;
                        float _2969 = (-0.0) - _1814;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2983 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _757;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2996 = _2976 + _2941;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_697, _700, _703), vec3(_2974, _2975, _2976));
                        float _4134 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _3008 = dot(vec3(_697, _700, _703), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4145 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2952 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2942) + _3017;
                        float _4156 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4167 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) / ((_3015 * _3015) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2801 = (_2963 * _2911.x) + _2869;
                        _2802 = (_2963 * _2911.y) + _2870;
                        _2803 = (_2963 * _2911.z) + _2871;
                        _2798 = (_3043 * _2928.x) + _2866;
                        _2799 = (_3043 * _2928.y) + _2867;
                        _2800 = (_3043 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_58_pred = _2801;
                    frontier_phi_58_pred_1 = _2800;
                    frontier_phi_58_pred_2 = _2799;
                    frontier_phi_58_pred_3 = _2798;
                    frontier_phi_58_pred_4 = _2802;
                    frontier_phi_58_pred_5 = _2803;
                }
                _2549 = frontier_phi_58_pred;
                _2547 = frontier_phi_58_pred_1;
                _2545 = frontier_phi_58_pred_2;
                _2543 = frontier_phi_58_pred_3;
                _2551 = frontier_phi_58_pred_4;
                _2553 = frontier_phi_58_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2543;
                    _2722 = _2545;
                    _2723 = _2547;
                    _2724 = _2549;
                    _2725 = _2551;
                    _2726 = _2553;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2559) & _2408) == 0u)
        {
            _2689 = _2542;
            _2691 = _2544;
            _2693 = _2546;
            _2695 = _2548;
            _2697 = _2550;
            _2699 = _2552;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
            float _2715 = _2714 * _1812;
            float _2716 = _2714 * _1813;
            float _2717 = _2714 * _1814;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            float frontier_phi_51_52_ladder_3;
            float frontier_phi_51_52_ladder_4;
            float frontier_phi_51_52_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2849 = _2542;
                float _2850 = _2544;
                float _2851 = _2546;
                float _2852 = _2548;
                float _2853 = _2550;
                float _2854 = _2552;
                uint _2855 = _2559;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    float frontier_phi_64_pred_3;
                    float frontier_phi_64_pred_4;
                    float frontier_phi_64_pred_5;
                    if (_2865)
                    {
                        frontier_phi_64_pred = _2852;
                        frontier_phi_64_pred_1 = _2851;
                        frontier_phi_64_pred_2 = _2850;
                        frontier_phi_64_pred_3 = _2849;
                        frontier_phi_64_pred_4 = _2854;
                        frontier_phi_64_pred_5 = _2853;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        float _3063 = _2851;
                        float _3064 = _2852;
                        float _3065 = _2853;
                        float _3066 = _2854;
                        uint _3067 = _2864;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3136;
                        vec4 _3152;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3078 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3123 = (_3078 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3078 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3078 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3078 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_1814, _3187.z, fma(_1813, _3187.y, _3187.x * _1812)) + _3187.w;
                            _3200 = !((fma(_1814, _3168.z, fma(_1813, _3168.y, _3168.x * _1812)) + _3168.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            float frontier_phi_70_pred_3;
                            float frontier_phi_70_pred_4;
                            float frontier_phi_70_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3093.x - _1812;
                                float _3228 = _3093.y - _1813;
                                float _3229 = _3093.z - _1814;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3094 * _3094));
                                float _4178 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3245 = sqrt(_3230) * _3109.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_697, _700, _703))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_1814, _3136.z, fma(_1813, _3136.y, _3136.x * _1812)) + _3136.w) / _3199;
                                float _3259 = (fma(_1814, _3152.z, fma(_1813, _3152.y, _3152.x * _1812)) + _3152.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4194 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _757;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2715;
                                float _3289 = _3235 - _2716;
                                float _3290 = _3236 - _2717;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_697, _700, _703), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4205 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3302 = dot(vec3(_697, _700, _703), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4216 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_697, _700, _703), vec3(_3234, _3235, _3236))) + _3311;
                                float _4227 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4238 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3265 * _3109.x;
                                frontier_phi_70_pred_1 = _3339 * _3121.z;
                                frontier_phi_70_pred_2 = _3339 * _3121.y;
                                frontier_phi_70_pred_3 = _3339 * _3121.x;
                                frontier_phi_70_pred_4 = _3265 * _3109.z;
                                frontier_phi_70_pred_5 = _3265 * _3109.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                                frontier_phi_70_pred_3 = 0.0;
                                frontier_phi_70_pred_4 = 0.0;
                                frontier_phi_70_pred_5 = 0.0;
                            }
                            _3346 = frontier_phi_70_pred;
                            _3345 = frontier_phi_70_pred_1;
                            _3344 = frontier_phi_70_pred_2;
                            _3343 = frontier_phi_70_pred_3;
                            _3348 = frontier_phi_70_pred_4;
                            _3347 = frontier_phi_70_pred_5;
                            _3051 = _3346 + _3064;
                            _3052 = _3347 + _3065;
                            _3053 = _3348 + _3066;
                            _3048 = _3343 + _3061;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _3051;
                        frontier_phi_64_pred_1 = _3050;
                        frontier_phi_64_pred_2 = _3049;
                        frontier_phi_64_pred_3 = _3048;
                        frontier_phi_64_pred_4 = _3053;
                        frontier_phi_64_pred_5 = _3052;
                    }
                    _2696 = frontier_phi_64_pred;
                    _2694 = frontier_phi_64_pred_1;
                    _2692 = frontier_phi_64_pred_2;
                    _2690 = frontier_phi_64_pred_3;
                    _2700 = frontier_phi_64_pred_4;
                    _2698 = frontier_phi_64_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2690;
                        _2850 = _2692;
                        _2851 = _2694;
                        _2852 = _2696;
                        _2853 = _2698;
                        _2854 = _2700;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _2700;
                frontier_phi_51_52_ladder_1 = _2698;
                frontier_phi_51_52_ladder_2 = _2694;
                frontier_phi_51_52_ladder_3 = _2692;
                frontier_phi_51_52_ladder_4 = _2696;
                frontier_phi_51_52_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_51_52_ladder = _2552;
                frontier_phi_51_52_ladder_1 = _2550;
                frontier_phi_51_52_ladder_2 = _2546;
                frontier_phi_51_52_ladder_3 = _2544;
                frontier_phi_51_52_ladder_4 = _2548;
                frontier_phi_51_52_ladder_5 = _2542;
            }
            _2689 = frontier_phi_51_52_ladder_5;
            _2691 = frontier_phi_51_52_ladder_3;
            _2693 = frontier_phi_51_52_ladder_2;
            _2695 = frontier_phi_51_52_ladder_4;
            _2697 = frontier_phi_51_52_ladder_1;
            _2699 = frontier_phi_51_52_ladder;
        }
        float _2704 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2421 = (_2704 * _2695) + _2100;
        _2423 = (_2704 * _2697) + _2101;
        _2425 = (_2704 * _2699) + _2102;
        _2427 = ((_2689 * 0.039999999105930328369140625) * _2704) + _2256;
        _2429 = ((_2691 * 0.039999999105930328369140625) * _2704) + _2257;
        _2431 = ((_2693 * 0.039999999105930328369140625) * _2704) + _2258;
    }
    else
    {
        _2421 = _2100;
        _2423 = _2101;
        _2425 = _2102;
        _2427 = _2256;
        _2429 = _2257;
        _2431 = _2258;
    }
    uint _2437 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _2443 = (((((_404 * cbMtdParam._m0[12u].x) - _548) * TEXCOORD_6.y) + _548) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2437].x;
    float _2444 = (((((_405 * cbMtdParam._m0[12u].y) - _549) * TEXCOORD_6.y) + _549) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2437].y;
    float _2445 = (((((_406 * cbMtdParam._m0[12u].z) - _550) * TEXCOORD_6.y) + _550) * cbMtdParam._m0[15u].y) * cbInstanceData._m0[_2437].z;
    float _4254 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4265 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4276 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2462 = (((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2421 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _741))) + ((_2427 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + _2443;
    float _2464 = (_2444 + ((_2429 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2423 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _741)));
    float _2466 = (_2445 + ((_2431 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1547)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2425 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _741)));
    float _4302 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2479 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    uint _2480 = _716 + 6u;
    float _2488 = _676 / cbSceneParam._m0[86u].x;
    float _2489 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _610 : (isnan(_610) ? cbSceneParam._m0[77u].w : min(_610, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_610 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_610) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _610 : min(cbSceneParam._m0[80u].w, _610));
        float _2568 = _2567 / _610;
        float _2579 = _2568 * _661;
        float _2580 = _662 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2582 = _2568 * _663;
        float _2584 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2580;
        float _2592 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2581 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2752 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2811 = ((abs(_2592 / _2581) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2602 * _2761) - exp2(_2602 * _2762)) * _2750))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2508);
        _2604 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2606 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2608 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2610 = _2822 * _2508;
    }
    else
    {
        _2604 = _2505;
        _2606 = _2506;
        _2608 = _2507;
        _2610 = _2508;
    }
    float _2622 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2623 = _2622 == 3.0;
    float _2624 = log2(_2610);
    float _2628 = exp2(_2624 * cbSceneParam._m0[78u].x);
    float _2629 = exp2(_2624 * cbSceneParam._m0[78u].y);
    float _2630 = exp2(_2624 * cbSceneParam._m0[78u].z);
    float _2631 = _2628 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0)));
    float _2632 = _2629 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)));
    float _2633 = _2630 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)));
    float _2642 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2642 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.y = _2642 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.z = _2642 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.w = cbInstanceData._m0[_2480].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2443) * _2479) * _2628) * _2642;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2444) * _2479) * _2629) * _2642;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2445) * _2479) * _2630) * _2642;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
}


