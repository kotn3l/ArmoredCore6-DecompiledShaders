#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D _SketchUp_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2257;
float _2258;
float _2259;
float _2260;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    float _174;
    float _175;
    float _176;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
    }
    else
    {
        _174 = _167;
        _175 = _168;
        _176 = _169;
    }
    vec4 _190 = texture(sampler2D(_SketchUp_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = (sqrt(_190.x) * TEXCOORD.x) * sqrt(TEXCOORD.x);
    float _205 = (sqrt(_190.y) * TEXCOORD.y) * sqrt(TEXCOORD.y);
    float _207 = (sqrt(_190.z) * TEXCOORD.z) * sqrt(TEXCOORD.z);
    float _208 = _203 * _203;
    float _209 = _205 * _205;
    float _210 = _207 * _207;
    float _214 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _215 = _214 * _174;
    float _216 = _214 * _175;
    float _217 = _214 * _176;
    float _2269 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _2280 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _2291 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _237 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    float _296 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _297 = _290 * _296;
    float _298 = _291 * _296;
    float _299 = _292 * _296;
    vec4 _304 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _306 = _304.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _425 = sqrt(((_290 * _290) + (_291 * _291)) + (_292 * _292));
        float _431 = (cbMatDynParam._m0[5u].x * _425) + cbMatDynParam._m0[5u].y;
        float _2302 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
        float _432 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        float _436 = (cbMatDynParam._m0[5u].z * _425) + cbMatDynParam._m0[5u].w;
        float _2313 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0))) - _432)) + _432) < ((_306 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _318 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _319 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _339 = fma(_217, cbSceneParam._m0[5u].z, fma(_216, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _215));
    float _342 = fma(_217, cbSceneParam._m0[6u].z, fma(_216, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _215));
    float _345 = fma(_217, cbSceneParam._m0[7u].z, fma(_216, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _215));
    uint _358 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = _358 + 9u;
    uint _361 = _360 + uint(cbMatDynParam._m0[0u].w);
    float _367 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0)))) * cbInstanceData._m0[_361].x;
    float _368 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0)))) * cbInstanceData._m0[_361].y;
    float _369 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0)))) * cbInstanceData._m0[_361].z;
    float _2324 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    float _2335 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    float _2346 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
    vec4 _381 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _318, cbSceneParam._m0[86u].y * _319));
    float _384 = _381.x * TEXCOORD_4.z;
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _746;
    float _747;
    float _748;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _470 = fma(_414, cbModelParam._m0[26u].z, fma(_410, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _406));
        float _474 = fma(_414, cbModelParam._m0[27u].z, fma(_410, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _406));
        float _478 = fma(_414, cbModelParam._m0[28u].z, fma(_410, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _406));
        float _503 = _406 + _215;
        float _504 = _410 + _216;
        float _505 = _414 + _217;
        float _515 = fma(_505, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503)) - _470;
        float _516 = fma(_505, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503)) - _474;
        float _517 = fma(_505, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503)) - _478;
        float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
        float _534 = ((_521 * _515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_521 * _516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_521 * _517) / cbModelParam._m0[34u].z) + ((((((_478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        float _573 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _581 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _588 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _595 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_560.x + (-0.5));
        float _597 = _595 * (_560.y + (-0.5));
        float _598 = _595 * (_560.z + (-0.5));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _603 = ((_539.x + (-0.5)) * 0.5) * _573;
        float _605 = ((_546.x + (-0.5)) * 0.5) * _581;
        float _607 = ((_553.x + (-0.5)) * 0.5) * _588;
        float _608 = dot(vec3(_603, _605, _607), vec3(_603, _605, _607));
        float _613 = (_608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_608);
        float _622 = (dot(vec3(_215, _216, _217), vec3(_613 * _603, _613 * _605, _613 * _607)) + 1.0) * 0.5;
        float _2372 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _632 = sqrt(((_605 * _605) + (_603 * _603)) + (_607 * _607)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _2383 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
        float _634 = _633 * 2.0;
        float _638 = (1.0 - _633) / (_633 + 1.0);
        float _2394 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        float _648 = ((((1.0 - _639) * (_634 + 2.0)) * exp2(log2(isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0))) * (_634 + 1.0))) + _639) * _599;
        float _650 = ((_539.y + (-0.5)) * 0.5) * _573;
        float _652 = ((_546.y + (-0.5)) * 0.5) * _581;
        float _654 = ((_553.y + (-0.5)) * 0.5) * _588;
        float _655 = dot(vec3(_650, _652, _654), vec3(_650, _652, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_215, _216, _217), vec3(_660 * _650, _660 * _652, _660 * _654)) + 1.0) * 0.5;
        float _2405 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_652 * _652) + (_650 * _650)) + (_654 * _654)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _2416 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _2427 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0))) * (_679 + 1.0))) + _684) * _600;
        float _695 = ((_539.z + (-0.5)) * 0.5) * _573;
        float _697 = ((_546.z + (-0.5)) * 0.5) * _581;
        float _699 = ((_553.z + (-0.5)) * 0.5) * _588;
        float _700 = dot(vec3(_695, _697, _699), vec3(_695, _697, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _713 = (dot(vec3(_215, _216, _217), vec3(_705 * _695, _705 * _697, _705 * _699)) + 1.0) * 0.5;
        float _2438 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _722 = sqrt(((_697 * _697) + (_695 * _695)) + (_699 * _699)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _2449 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _2460 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _2460 : (isnan(_2460) ? 1.0 : min(_2460, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _2438 : (isnan(_2438) ? 1.0 : min(_2438, 1.0))) * (_724 + 1.0))) + _729) * _601;
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
    }
    else
    {
        _746 = 0.0;
        _747 = 0.0;
        _748 = 0.0;
    }
    float _1046;
    float _1047;
    float _1048;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _777 = fma(_414, cbModelParam._m0[30u].z, fma(_410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _406));
        float _781 = fma(_414, cbModelParam._m0[31u].z, fma(_410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _406));
        float _785 = fma(_414, cbModelParam._m0[32u].z, fma(_410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _406));
        float _808 = _406 + _215;
        float _809 = _410 + _216;
        float _810 = _414 + _217;
        float _820 = fma(_810, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _808)) - _777;
        float _821 = fma(_810, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _808)) - _781;
        float _822 = fma(_810, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _808)) - _785;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_777 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_781 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[35u].z) + ((((((_785 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _876 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _883 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _890 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _897 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_864.x + (-0.5));
        float _899 = _897 * (_864.y + (-0.5));
        float _900 = _897 * (_864.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _905 = ((_843.x + (-0.5)) * 0.5) * _876;
        float _907 = ((_850.x + (-0.5)) * 0.5) * _883;
        float _909 = ((_857.x + (-0.5)) * 0.5) * _890;
        float _910 = dot(vec3(_905, _907, _909), vec3(_905, _907, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_215, _216, _217), vec3(_915 * _905, _915 * _907, _915 * _909)) + 1.0) * 0.5;
        float _2501 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_907 * _907) + (_905 * _905)) + (_909 * _909)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _2512 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _2523 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0))) * (_934 + 1.0))) + _939) * _901;
        float _950 = ((_843.y + (-0.5)) * 0.5) * _876;
        float _952 = ((_850.y + (-0.5)) * 0.5) * _883;
        float _954 = ((_857.y + (-0.5)) * 0.5) * _890;
        float _955 = dot(vec3(_950, _952, _954), vec3(_950, _952, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_215, _216, _217), vec3(_960 * _950, _960 * _952, _960 * _954)) + 1.0) * 0.5;
        float _2534 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_952 * _952) + (_950 * _950)) + (_954 * _954)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _2545 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _2556 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0))) * (_979 + 1.0))) + _984) * _902;
        float _995 = ((_843.z + (-0.5)) * 0.5) * _876;
        float _997 = ((_850.z + (-0.5)) * 0.5) * _883;
        float _999 = ((_857.z + (-0.5)) * 0.5) * _890;
        float _1000 = dot(vec3(_995, _997, _999), vec3(_995, _997, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_215, _216, _217), vec3(_1005 * _995, _1005 * _997, _1005 * _999)) + 1.0) * 0.5;
        float _2567 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_997 * _997) + (_995 * _995)) + (_999 * _999)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _2578 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _2578 : (isnan(_2578) ? 1.0 : min(_2578, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _2589 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0))) * (_1024 + 1.0))) + _1029) * _903;
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = 0.0;
        _1047 = 0.0;
        _1048 = 0.0;
    }
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _746)) + _746;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _747)) + _747;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _748)) + _748;
    float _1081 = fma(_1060, cbSceneParam._m0[89u].z, fma(_1059, cbSceneParam._m0[89u].y, _1058 * cbSceneParam._m0[89u].x));
    float _1084 = fma(_1060, cbSceneParam._m0[90u].z, fma(_1059, cbSceneParam._m0[90u].y, _1058 * cbSceneParam._m0[90u].x));
    float _1087 = fma(_1060, cbSceneParam._m0[91u].z, fma(_1059, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1058));
    uvec4 _1097 = floatBitsToUint(cbInstanceData._m0[_358 + 5u]);
    uint _1099 = _1097.x * 14u;
    uint _1101 = _1099 + 13u;
    float _1108 = _384 + (-1.0);
    float _1114 = (cbLight._m0[_1101].x * _1108) + 1.0;
    float _1115 = (cbLight._m0[_1101].y * _1108) + 1.0;
    float _1116 = (cbLight._m0[_1101].z * _1108) + 1.0;
    float _1117 = (cbLight._m0[_1101].w * _1108) + 1.0;
    uint _1118 = _1099 + 5u;
    float _1124 = isnan(1.0) ? _1115 : (isnan(_1115) ? 1.0 : min(_1115, 1.0));
    uint _1128 = _1099 + 4u;
    float _1135 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
    uint _1139 = _1099 | 1u;
    float _1150 = dot(vec3(cbLight._m0[_1099].xyz), vec3(_215, _216, _217));
    float _1153 = dot(vec3(cbLight._m0[_1139].xyz), vec3(_215, _216, _217));
    float _2640 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2651 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1158 = (isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0))) * 0.3183098733425140380859375;
    float _1160 = (isnan(1.0) ? _2651 : (isnan(_2651) ? 1.0 : min(_2651, 1.0))) * 0.3183098733425140380859375;
    float _1167 = ((cbLight._m0[_1118].x * _1124) * _1160) + ((cbLight._m0[_1128].x * _1135) * _1158);
    float _1168 = ((_1124 * cbLight._m0[_1118].y) * _1160) + ((_1135 * cbLight._m0[_1128].y) * _1158);
    float _1169 = ((_1124 * cbLight._m0[_1118].z) * _1160) + ((_1135 * cbLight._m0[_1128].z) * _1158);
    uvec4 _1174 = floatBitsToUint(cbLight._m0[_1099 + 12u]);
    bool _1176 = _1174.x == 0u;
    float _1177;
    float _1179;
    float _1181;
    if (_1176)
    {
        _1177 = _1167;
        _1179 = _1168;
        _1181 = _1169;
    }
    else
    {
        uint _1185 = _1099 + 6u;
        float _1201 = (dot(vec3(cbLight._m0[_1099 + 2u].xyz), vec3(_215, _216, _217)) * 0.5) + 0.5;
        float _1202 = _1201 * _1201;
        float _2662 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0));
        float _1204 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _1177 = (((cbLight._m0[_1185].x * 0.3183098733425140380859375) * _1203) * _1204) + _1167;
        _1179 = (((cbLight._m0[_1185].y * 0.3183098733425140380859375) * _1203) * _1204) + _1168;
        _1181 = (((cbLight._m0[_1185].z * 0.3183098733425140380859375) * _1203) * _1204) + _1169;
    }
    bool _1184 = _1174.y == 0u;
    float _1214;
    float _1216;
    float _1218;
    if (_1184)
    {
        _1214 = _1177;
        _1216 = _1179;
        _1218 = _1181;
    }
    else
    {
        uint _1316 = _1099 + 7u;
        float _1332 = (dot(vec3(cbLight._m0[_1099 + 3u].xyz), vec3(_215, _216, _217)) * 0.5) + 0.5;
        float _1333 = _1332 * _1332;
        float _2678 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _2678 : (isnan(_2678) ? 1.0 : min(_2678, 1.0));
        float _1335 = isnan(1.0) ? _1117 : (isnan(_1117) ? 1.0 : min(_1117, 1.0));
        _1214 = (((cbLight._m0[_1316].x * 0.3183098733425140380859375) * _1334) * _1335) + _1177;
        _1216 = (((cbLight._m0[_1316].y * 0.3183098733425140380859375) * _1334) * _1335) + _1179;
        _1218 = (((cbLight._m0[_1316].z * 0.3183098733425140380859375) * _1334) * _1335) + _1181;
    }
    uint _1220 = _1099 + 8u;
    float _1226 = cbLight._m0[_1099].x + _297;
    float _1227 = cbLight._m0[_1099].y + _298;
    float _1228 = cbLight._m0[_1099].z + _299;
    float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
    float _1236 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1099].xyz));
    float _2694 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _1239 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
    float _1240 = dot(vec3(_215, _216, _217), vec3(_297, _298, _299));
    float _2705 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1243 = isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0));
    float _1244 = dot(vec3(cbLight._m0[_1099].xyz), vec3(_1226 * _1232, _1227 * _1232, _1228 * _1232));
    float _2716 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1252 = exp2(log2(1.0 - (isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0)))) * 5.0);
    float _1257 = (0.5 / ((_1239 + 9.9999999392252902907785028219223e-09) + _1243)) * _1239;
    float _2727 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _1259 = (isnan(1.0) ? _2727 : (isnan(_2727) ? 1.0 : min(_2727, 1.0))) * 0.31831014156341552734375;
    uint _1270 = _1099 + 9u;
    float _1276 = cbLight._m0[_1139].x + _297;
    float _1277 = cbLight._m0[_1139].y + _298;
    float _1278 = cbLight._m0[_1139].z + _299;
    float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
    float _1286 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1139].xyz));
    float _2738 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1289 = isnan(1.0) ? _2738 : (isnan(_2738) ? 1.0 : min(_2738, 1.0));
    float _1290 = dot(vec3(cbLight._m0[_1139].xyz), vec3(_1276 * _1282, _1277 * _1282, _1278 * _1282));
    float _2749 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1297 = exp2(log2(1.0 - (isnan(1.0) ? _2749 : (isnan(_2749) ? 1.0 : min(_2749, 1.0)))) * 5.0);
    float _1301 = (0.5 / ((_1289 + 9.9999999392252902907785028219223e-09) + _1243)) * _1289;
    float _2760 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1303 = (isnan(1.0) ? _2760 : (isnan(_2760) ? 1.0 : min(_2760, 1.0))) * 0.31831014156341552734375;
    float _1313 = (((_1297 * cbLight._m0[_1270].x) * _1303) * _1124) + (((_1252 * cbLight._m0[_1220].x) * _1259) * _1135);
    float _1314 = (((_1297 * cbLight._m0[_1270].y) * _1303) * _1124) + (((_1252 * cbLight._m0[_1220].y) * _1259) * _1135);
    float _1315 = (((_1297 * cbLight._m0[_1270].z) * _1303) * _1124) + (((_1252 * cbLight._m0[_1220].z) * _1259) * _1135);
    float _1345;
    float _1347;
    float _1349;
    if (_1176)
    {
        _1345 = _1313;
        _1347 = _1314;
        _1349 = _1315;
    }
    else
    {
        uint _1351 = _1099 + 10u;
        uint _1357 = _1099 + 2u;
        float _1363 = cbLight._m0[_1357].x + _297;
        float _1364 = cbLight._m0[_1357].y + _298;
        float _1365 = cbLight._m0[_1357].z + _299;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1373 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1357].xyz));
        float _2771 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1376 = isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0));
        float _1377 = dot(vec3(cbLight._m0[_1357].xyz), vec3(_1363 * _1369, _1364 * _1369, _1365 * _1369));
        float _2782 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1384 = exp2(log2(1.0 - (isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0)))) * 5.0);
        float _1388 = (0.5 / ((_1376 + 9.9999999392252902907785028219223e-09) + _1243)) * _1376;
        float _2793 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1390 = (isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0))) * 0.31831014156341552734375;
        float _1391 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _1345 = (((_1384 * cbLight._m0[_1351].x) * _1390) * _1391) + _1313;
        _1347 = (((_1384 * cbLight._m0[_1351].y) * _1390) * _1391) + _1314;
        _1349 = (((_1384 * cbLight._m0[_1351].z) * _1390) * _1391) + _1315;
    }
    float _1401;
    float _1403;
    float _1405;
    if (_1184)
    {
        _1401 = _1345;
        _1403 = _1347;
        _1405 = _1349;
    }
    else
    {
        uint _1412 = _1099 + 11u;
        uint _1418 = _1099 + 3u;
        float _1424 = cbLight._m0[_1418].x + _297;
        float _1425 = cbLight._m0[_1418].y + _298;
        float _1426 = cbLight._m0[_1418].z + _299;
        float _1430 = inversesqrt(dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426)));
        float _1434 = dot(vec3(_215, _216, _217), vec3(cbLight._m0[_1418].xyz));
        float _2809 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1437 = isnan(1.0) ? _2809 : (isnan(_2809) ? 1.0 : min(_2809, 1.0));
        float _1438 = dot(vec3(cbLight._m0[_1418].xyz), vec3(_1424 * _1430, _1425 * _1430, _1426 * _1430));
        float _2820 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1445 = exp2(log2(1.0 - (isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0)))) * 5.0);
        float _1449 = (0.5 / ((_1437 + 9.9999999392252902907785028219223e-09) + _1243)) * _1437;
        float _2831 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1451 = (isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0))) * 0.31831014156341552734375;
        float _1452 = isnan(1.0) ? _1117 : (isnan(_1117) ? 1.0 : min(_1117, 1.0));
        _1401 = (((_1445 * cbLight._m0[_1412].x) * _1451) * _1452) + _1345;
        _1403 = (((_1445 * cbLight._m0[_1412].y) * _1451) * _1452) + _1347;
        _1405 = (((_1445 * cbLight._m0[_1412].z) * _1451) * _1452) + _1349;
    }
    float _1561;
    float _1563;
    float _1565;
    if (_1097.y == 0u)
    {
        float _1502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1503 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1502;
        float _1504 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1502;
        float _1505 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1502;
        uvec4 _1517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1518 = _1517.x;
        uint _1529 = uint((float(_1517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _319) / _1518))) + floor(float(uint(cbSceneParam._m0[85u].x * _318) / _1518)));
        float _1539 = (log2(_1505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1540 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        uint _1543 = uint(isnan(14.0) ? _1540 : (isnan(_1540) ? 14.0 : min(_1540, 14.0)));
        uvec4 _1548 = texelFetch(g_lightClusterGridBuffer, int(((_1543 << 2u) + (_1529 << 6u)) >> 2u));
        uint _1549 = _1548.x;
        uint _1550 = _1517.z;
        float _1619;
        float _1621;
        float _1623;
        if (((((1u << ((_1550 >> 4u) & 15u)) + 4294967295u) & _1549) == 0u) || ((_1550 & 240u) == 0u))
        {
            _1619 = 0.0;
            _1621 = 0.0;
            _1623 = 0.0;
        }
        else
        {
            float _1620;
            float _1622;
            float _1624;
            float _1749 = 0.0;
            float _1750 = 0.0;
            float _1751 = 0.0;
            uint _1752 = 0u;
            uint _1761;
            bool _1762;
            for (;;)
            {
                _1761 = texelFetch(g_lightClassification, int((((_1543 << 5u) + (_1529 << 9u)) + (_1752 << 2u)) >> 2u)).x;
                _1762 = _1761 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                if (_1762)
                {
                    frontier_phi_32_pred = _1751;
                    frontier_phi_32_pred_1 = _1749;
                    frontier_phi_32_pred_2 = _1750;
                }
                else
                {
                    float _1885;
                    float _1886;
                    float _1887;
                    uint _1888;
                    _1885 = _1749;
                    _1886 = _1750;
                    _1887 = _1751;
                    _1888 = _1761;
                    float _1818;
                    float _1819;
                    float _1820;
                    for (;;)
                    {
                        uint _1892 = uint(findLSB(_1888)) + (_1752 << 5u);
                        uint _1889 = (_1888 + 4294967295u) & _1888;
                        uint _1894 = _1892 * 48u;
                        vec4 _1908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1894)).x, texelFetch(g_PointLightRenderingBuffer, int(_1894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1894 + 3u)).x));
                        uint _1914 = (_1892 * 48u) + 4u;
                        vec4 _1927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1914)).x, texelFetch(g_PointLightRenderingBuffer, int(_1914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1914 + 3u)).x));
                        float _1932 = _1908.x - _1503;
                        float _1933 = _1908.y - _1504;
                        float _1934 = _1908.z - _1505;
                        float _1935 = dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934));
                        float _1938 = inversesqrt(_1935);
                        float _1947 = 1.0 - (_1935 * _1908.w);
                        float _2857 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
                        float _1949 = sqrt(_1935) * _1927.w;
                        float _1952 = 1.39999997615814208984375 / (_1949 + 1.39999997615814208984375);
                        float _1953 = _1952 * _1952;
                        float _1956 = ((1.0 - _1953) * dot(vec3(_339, _342, _345), vec3(_1938 * _1932, _1938 * _1933, _1938 * _1934))) + _1953;
                        float _1963 = ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) / (((_1949 * _1949) * 0.699999988079071044921875) + 1.0);
                        _1818 = (_1963 * _1927.x) + _1885;
                        _1819 = (_1963 * _1927.y) + _1886;
                        _1820 = (_1963 * _1927.z) + _1887;
                        if (_1889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1885 = _1818;
                            _1886 = _1819;
                            _1887 = _1820;
                            _1888 = _1889;
                        }
                    }
                    frontier_phi_32_pred = _1820;
                    frontier_phi_32_pred_1 = _1818;
                    frontier_phi_32_pred_2 = _1819;
                }
                _1624 = frontier_phi_32_pred;
                _1620 = frontier_phi_32_pred_1;
                _1622 = frontier_phi_32_pred_2;
                uint _1753 = _1752 + 1u;
                if (_1753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1749 = _1620;
                    _1750 = _1622;
                    _1751 = _1624;
                    _1752 = _1753;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1619 = _1620;
            _1621 = _1622;
            _1623 = _1624;
        }
        uvec4 _1627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1628 = _1627.z;
        uint _1630 = (_1628 >> 8u) & 15u;
        float _1736;
        float _1738;
        float _1740;
        if (((4294967295u << _1630) & _1549) == 0u)
        {
            _1736 = _1619;
            _1738 = _1621;
            _1740 = _1623;
        }
        else
        {
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            if (_1630 < ((_1628 >> 12u) & 15u))
            {
                float _1737;
                float _1739;
                float _1741;
                float _1871 = _1619;
                float _1872 = _1621;
                float _1873 = _1623;
                uint _1874 = _1630;
                uint _1883;
                bool _1884;
                for (;;)
                {
                    _1883 = texelFetch(g_lightClassification, int((((_1543 << 5u) + (_1529 << 9u)) + (_1874 << 2u)) >> 2u)).x;
                    _1884 = _1883 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    if (_1884)
                    {
                        frontier_phi_43_pred = _1872;
                        frontier_phi_43_pred_1 = _1873;
                        frontier_phi_43_pred_2 = _1871;
                    }
                    else
                    {
                        float _1977;
                        float _1978;
                        float _1979;
                        float _2179;
                        float _2180;
                        float _2181;
                        float _1987 = _1871;
                        float _1988 = _1872;
                        float _1989 = _1873;
                        uint _1990 = _1883;
                        uint _1991;
                        vec4 _2017;
                        float _2018;
                        vec4 _2033;
                        vec4 _2049;
                        vec4 _2065;
                        float _2112;
                        bool _2113;
                        for (;;)
                        {
                            uint _2001 = ((_1874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1990));
                            _1991 = (_1990 + 4294967295u) & _1990;
                            uint _2003 = _2001 * 40u;
                            _2017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2003 + 3u)).x));
                            _2018 = _2017.w;
                            uint _2020 = (_2001 * 40u) + 4u;
                            _2033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2020 + 3u)).x));
                            uint _2036 = (_2001 * 40u) + 16u;
                            _2049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2036 + 3u)).x));
                            uint _2052 = (_2001 * 40u) + 20u;
                            _2065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 3u)).x));
                            uint _2068 = (_2001 * 40u) + 24u;
                            vec4 _2081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 3u)).x));
                            uint _2087 = (_2001 * 40u) + 28u;
                            vec4 _2100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 3u)).x));
                            _2112 = fma(_1505, _2100.z, fma(_1504, _2100.y, _2100.x * _1503)) + _2100.w;
                            _2113 = !((fma(_1505, _2081.z, fma(_1504, _2081.y, _2081.x * _1503)) + _2081.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            if (_2113)
                            {
                                float _2137 = _2017.x - _1503;
                                float _2138 = _2017.y - _1504;
                                float _2139 = _2017.z - _1505;
                                float _2140 = dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139));
                                float _2143 = inversesqrt(_2140);
                                float _2150 = 1.0 - (_2140 / (_2018 * _2018));
                                float _2873 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
                                float _2155 = sqrt(_2140) * _2033.w;
                                float _2157 = 1.39999997615814208984375 / (_2155 + 1.39999997615814208984375);
                                float _2158 = _2157 * _2157;
                                float _2161 = ((1.0 - _2158) * dot(vec3(_2143 * _2137, _2143 * _2138, _2143 * _2139), vec3(_339, _342, _345))) + _2158;
                                float _2168 = (fma(_1505, _2049.z, fma(_1504, _2049.y, _2049.x * _1503)) + _2049.w) / _2112;
                                float _2169 = (fma(_1505, _2065.z, fma(_1504, _2065.y, _2065.x * _1503)) + _2065.w) / _2112;
                                float _2173 = 1.0 - dot(vec2(_2168, _2169), vec2(_2168, _2169));
                                float _2889 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
                                float _2175 = (isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0))) * (((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * (isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0)))) / (((_2155 * _2155) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_49_pred = _2175 * _2033.z;
                                frontier_phi_49_pred_1 = _2175 * _2033.y;
                                frontier_phi_49_pred_2 = _2175 * _2033.x;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                            }
                            _2181 = frontier_phi_49_pred;
                            _2180 = frontier_phi_49_pred_1;
                            _2179 = frontier_phi_49_pred_2;
                            _1977 = _2179 + _1987;
                            _1978 = _2180 + _1988;
                            _1979 = _2181 + _1989;
                            if (_1991 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1987 = _1977;
                                _1988 = _1978;
                                _1989 = _1979;
                                _1990 = _1991;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _1978;
                        frontier_phi_43_pred_1 = _1979;
                        frontier_phi_43_pred_2 = _1977;
                    }
                    _1739 = frontier_phi_43_pred;
                    _1741 = frontier_phi_43_pred_1;
                    _1737 = frontier_phi_43_pred_2;
                    uint _1875 = _1874 + 1u;
                    if (_1875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1871 = _1737;
                        _1872 = _1739;
                        _1873 = _1741;
                        _1874 = _1875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _1741;
                frontier_phi_24_25_ladder_1 = _1739;
                frontier_phi_24_25_ladder_2 = _1737;
            }
            else
            {
                frontier_phi_24_25_ladder = _1623;
                frontier_phi_24_25_ladder_1 = _1621;
                frontier_phi_24_25_ladder_2 = _1619;
            }
            _1736 = frontier_phi_24_25_ladder_2;
            _1738 = frontier_phi_24_25_ladder_1;
            _1740 = frontier_phi_24_25_ladder;
        }
        float _1742 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
        _1561 = (_1742 * _1736) + _1214;
        _1563 = (_1742 * _1738) + _1216;
        _1565 = (_1742 * _1740) + _1218;
    }
    else
    {
        _1561 = _1214;
        _1563 = _1216;
        _1565 = _1218;
    }
    float _2905 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _2916 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _2927 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _1579 = ((isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0))) * (_1561 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _384))) + (cbPerFrame._m0[3u].x * _1401);
    float _1580 = ((isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0))) * (_1563 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _384))) + (cbPerFrame._m0[3u].x * _1403);
    float _1581 = ((isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * (_1565 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _384))) + (cbPerFrame._m0[3u].x * _1405);
    uint _1582 = _358 + 6u;
    float _1590 = _318 / cbSceneParam._m0[86u].x;
    float _1591 = _319 / cbSceneParam._m0[86u].y;
    vec4 _1605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1590, _1591, (log2((isnan(cbSceneParam._m0[77u].w) ? _237 : (isnan(_237) ? cbSceneParam._m0[77u].w : min(_237, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1607 = _1605.x;
    float _1608 = _1605.y;
    float _1609 = _1605.z;
    float _1610 = _1605.w;
    float _1676;
    float _1678;
    float _1680;
    float _1682;
    if (_237 > cbSceneParam._m0[78u].w)
    {
        float _1638 = isnan(_237) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _237 : min(cbSceneParam._m0[80u].w, _237));
        float _1639 = _1638 / _237;
        float _1650 = _1639 * _290;
        float _1651 = _291 * _1639;
        float _1652 = (-0.0) - _1651;
        float _1653 = _1639 * _292;
        float _1655 = (cbSceneParam._m0[77u].w * _1652) / _1638;
        float _1656 = _1655 + cbSceneParam._m0[79u].w;
        float _1657 = cbSceneParam._m0[79u].w - _1651;
        float _1663 = sqrt(((_1650 * _1650) + (_1651 * _1651)) + (_1653 * _1653));
        float _1666 = (1.0 - (cbSceneParam._m0[77u].w / _1638)) * _1663;
        float _1672 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1674 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1828;
        if (abs((_1652 - _1655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1828 = ((((_1656 > 0.0) ? exp2(_1672 * _1656) : (2.0 - exp2(_1674 * _1656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1666;
        }
        else
        {
            float _1775 = 1.0 / cbSceneParam._m0[80u].x;
            float _1776 = isnan(_1657) ? _1656 : (isnan(_1656) ? _1657 : max(_1656, _1657));
            float _1777 = isnan(_1657) ? _1656 : (isnan(_1656) ? _1657 : min(_1656, _1657));
            float _1786 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : min(_1776, 0.0));
            float _1787 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : min(_1777, 0.0));
            _1828 = ((abs(_1663 / _1652) * cbSceneParam._m0[80u].y) * ((((_1786 - _1787) * 2.0) - ((exp2(_1672 * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)))) - exp2(_1672 * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))))) * _1775)) - ((exp2(_1674 * _1786) - exp2(_1674 * _1787)) * _1775))) + (_1666 * cbSceneParam._m0[80u].z);
        }
        vec4 _1830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1590, _1591, 1.0), 0.0);
        float _1839 = exp2((_1828 * (-1.44269502162933349609375)) * (1.0 - _1830.w));
        float _1840 = log2(_1839);
        float _1856 = log2(_1610);
        _1676 = (exp2(_1856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1840 * cbSceneParam._m0[78u].x)) * _1830.x) / cbSceneParam._m0[78u].x)) + _1607;
        _1678 = (exp2(_1856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1840 * cbSceneParam._m0[78u].y)) * _1830.y) / cbSceneParam._m0[78u].y)) + _1608;
        _1680 = (exp2(_1856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1840 * cbSceneParam._m0[78u].z)) * _1830.z) / cbSceneParam._m0[78u].z)) + _1609;
        _1682 = _1839 * _1610;
    }
    else
    {
        _1676 = _1607;
        _1678 = _1608;
        _1680 = _1609;
        _1682 = _1610;
    }
    bool _1866;
    vec4 _1692;
    vec4 _1715;
    float _1717;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    bool _1735;
    for (;;)
    {
        _1692 = cbMatDynParam._m0[0u];
        float _1694 = roundEven(_1692.y);
        bool _1695 = _1694 == 3.0;
        float _1697 = log2(_1682);
        float _1704 = exp2(_1697 * cbSceneParam._m0[78u].x) * _1579;
        float _1705 = exp2(_1697 * cbSceneParam._m0[78u].y) * _1580;
        float _1706 = exp2(_1697 * cbSceneParam._m0[78u].z) * _1581;
        float _1713 = _306 + (-0.5);
        _1715 = cbMtdParam._m0[1u];
        _1717 = _1715.y * _1713;
        float _1720 = (_1694 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1721 = _1720 * (_1695 ? _1704 : (_1704 + (cbSceneParam._m0[72u].w * _1676)));
        _1722 = _1720 * (_1695 ? _1705 : (_1705 + (cbSceneParam._m0[72u].w * _1678)));
        _1723 = _1720 * (_1695 ? _1706 : (_1706 + (cbSceneParam._m0[72u].w * _1680)));
        _1724 = _1713 * 0.999000012874603271484375;
        _1735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1735)
        {
            if ((cbInstanceData._m0[_358 + 7u].x + _1724) < 0.5)
            {
                _1866 = true;
                break;
            }
        }
        uint _1810 = _360 + uint(_1692.w);
        if ((cbInstanceData._m0[_1810].w < 1.0) && ((cbInstanceData._m0[_1810].w + _1724) < 0.5))
        {
            _1866 = true;
            break;
        }
        if ((_1717 + 1.0) < _1715.x)
        {
            _1866 = true;
            break;
        }
        _1866 = false;
        break;
    }
    float _1968;
    if (_1866)
    {
        discard_state = true;
        _1968 = 0.0;
    }
    else
    {
        _1968 = cbInstanceData._m0[_1582].w;
    }
    SV_Target.x = _1721;
    SV_Target.y = _1722;
    SV_Target.z = _1723;
    SV_Target.w = _1968;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1582].w;
    discard_exit();
}


