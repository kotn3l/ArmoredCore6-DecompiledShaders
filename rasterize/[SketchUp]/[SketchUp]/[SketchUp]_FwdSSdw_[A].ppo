#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D _SketchUp_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2283;
float _2284;
float _2285;
float _2286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    float _176;
    float _177;
    float _178;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
    }
    else
    {
        _176 = _169;
        _177 = _170;
        _178 = _171;
    }
    vec4 _192 = texture(sampler2D(_SketchUp_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = (sqrt(_192.x) * TEXCOORD.x) * sqrt(TEXCOORD.x);
    float _207 = (sqrt(_192.y) * TEXCOORD.y) * sqrt(TEXCOORD.y);
    float _209 = (sqrt(_192.z) * TEXCOORD.z) * sqrt(TEXCOORD.z);
    float _210 = _205 * _205;
    float _211 = _207 * _207;
    float _212 = _209 * _209;
    float _216 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _217 = _216 * _176;
    float _218 = _216 * _177;
    float _219 = _216 * _178;
    float _2295 = isnan(0.0) ? _210 : (isnan(_210) ? 0.0 : max(_210, 0.0));
    float _2306 = isnan(0.0) ? _211 : (isnan(_211) ? 0.0 : max(_211, 0.0));
    float _2317 = isnan(0.0) ? _212 : (isnan(_212) ? 0.0 : max(_212, 0.0));
    float _239 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    float _298 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _299 = _292 * _298;
    float _300 = _293 * _298;
    float _301 = _294 * _298;
    vec4 _306 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _308 = _306.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _427 = sqrt(((_292 * _292) + (_293 * _293)) + (_294 * _294));
        float _433 = (cbMatDynParam._m0[5u].x * _427) + cbMatDynParam._m0[5u].y;
        float _2328 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
        float _434 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        float _438 = (cbMatDynParam._m0[5u].z * _427) + cbMatDynParam._m0[5u].w;
        float _2339 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0))) - _434)) + _434) < ((_308 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _320 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _321 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _341 = fma(_219, cbSceneParam._m0[5u].z, fma(_218, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _217));
    float _344 = fma(_219, cbSceneParam._m0[6u].z, fma(_218, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _217));
    float _347 = fma(_219, cbSceneParam._m0[7u].z, fma(_218, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _217));
    uint _360 = uint(roundEven(NORMAL.w)) * 13u;
    uint _362 = _360 + 9u;
    uint _363 = _362 + uint(cbMatDynParam._m0[0u].w);
    float _369 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0)))) * cbInstanceData._m0[_363].x;
    float _370 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0)))) * cbInstanceData._m0[_363].y;
    float _371 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0)))) * cbInstanceData._m0[_363].z;
    float _2350 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    float _2361 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    float _2372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    vec4 _383 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _320, cbSceneParam._m0[86u].y * _321));
    float _386 = _383.x * TEXCOORD_4.z;
    float _408 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _412 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _748;
    float _749;
    float _750;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _472 = fma(_416, cbModelParam._m0[26u].z, fma(_412, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _408));
        float _476 = fma(_416, cbModelParam._m0[27u].z, fma(_412, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _408));
        float _480 = fma(_416, cbModelParam._m0[28u].z, fma(_412, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _408));
        float _505 = _408 + _217;
        float _506 = _412 + _218;
        float _507 = _416 + _219;
        float _517 = fma(_507, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505)) - _472;
        float _518 = fma(_507, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505)) - _476;
        float _519 = fma(_507, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505)) - _480;
        float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
        float _536 = ((_523 * _517) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_472 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _537 = ((_523 * _518) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_476 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _538 = ((_523 * _519) / cbModelParam._m0[34u].z) + ((((((_480 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        float _575 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _583 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _590 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _597 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_562.x + (-0.5));
        float _599 = _597 * (_562.y + (-0.5));
        float _600 = _597 * (_562.z + (-0.5));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _605 = ((_541.x + (-0.5)) * 0.5) * _575;
        float _607 = ((_548.x + (-0.5)) * 0.5) * _583;
        float _609 = ((_555.x + (-0.5)) * 0.5) * _590;
        float _610 = dot(vec3(_605, _607, _609), vec3(_605, _607, _609));
        float _615 = (_610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_610);
        float _624 = (dot(vec3(_217, _218, _219), vec3(_615 * _605, _615 * _607, _615 * _609)) + 1.0) * 0.5;
        float _2398 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _634 = sqrt(((_607 * _607) + (_605 * _605)) + (_609 * _609)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _2409 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        float _636 = _635 * 2.0;
        float _640 = (1.0 - _635) / (_635 + 1.0);
        float _2420 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        float _650 = ((((1.0 - _641) * (_636 + 2.0)) * exp2(log2(isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0))) * (_636 + 1.0))) + _641) * _601;
        float _652 = ((_541.y + (-0.5)) * 0.5) * _575;
        float _654 = ((_548.y + (-0.5)) * 0.5) * _583;
        float _656 = ((_555.y + (-0.5)) * 0.5) * _590;
        float _657 = dot(vec3(_652, _654, _656), vec3(_652, _654, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_217, _218, _219), vec3(_662 * _652, _662 * _654, _662 * _656)) + 1.0) * 0.5;
        float _2431 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_654 * _654) + (_652 * _652)) + (_656 * _656)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _2442 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _2453 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0))) * (_681 + 1.0))) + _686) * _602;
        float _697 = ((_541.z + (-0.5)) * 0.5) * _575;
        float _699 = ((_548.z + (-0.5)) * 0.5) * _583;
        float _701 = ((_555.z + (-0.5)) * 0.5) * _590;
        float _702 = dot(vec3(_697, _699, _701), vec3(_697, _699, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_217, _218, _219), vec3(_707 * _697, _707 * _699, _707 * _701)) + 1.0) * 0.5;
        float _2464 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_699 * _699) + (_697 * _697)) + (_701 * _701)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _2475 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _2486 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _2486 : (isnan(_2486) ? 1.0 : min(_2486, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0))) * (_726 + 1.0))) + _731) * _603;
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0)));
        _749 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
    }
    else
    {
        _748 = 0.0;
        _749 = 0.0;
        _750 = 0.0;
    }
    float _1048;
    float _1049;
    float _1050;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _779 = fma(_416, cbModelParam._m0[30u].z, fma(_412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _408));
        float _783 = fma(_416, cbModelParam._m0[31u].z, fma(_412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _408));
        float _787 = fma(_416, cbModelParam._m0[32u].z, fma(_412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _408));
        float _810 = _408 + _217;
        float _811 = _412 + _218;
        float _812 = _416 + _219;
        float _822 = fma(_812, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _810)) - _779;
        float _823 = fma(_812, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _810)) - _783;
        float _824 = fma(_812, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _810)) - _787;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_779 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_783 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[35u].z) + ((((((_787 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _878 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _885 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _892 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _899 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_866.x + (-0.5));
        float _901 = _899 * (_866.y + (-0.5));
        float _902 = _899 * (_866.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _907 = ((_845.x + (-0.5)) * 0.5) * _878;
        float _909 = ((_852.x + (-0.5)) * 0.5) * _885;
        float _911 = ((_859.x + (-0.5)) * 0.5) * _892;
        float _912 = dot(vec3(_907, _909, _911), vec3(_907, _909, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_217, _218, _219), vec3(_917 * _907, _917 * _909, _917 * _911)) + 1.0) * 0.5;
        float _2527 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_909 * _909) + (_907 * _907)) + (_911 * _911)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _2538 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _2549 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0))) * (_936 + 1.0))) + _941) * _903;
        float _952 = ((_845.y + (-0.5)) * 0.5) * _878;
        float _954 = ((_852.y + (-0.5)) * 0.5) * _885;
        float _956 = ((_859.y + (-0.5)) * 0.5) * _892;
        float _957 = dot(vec3(_952, _954, _956), vec3(_952, _954, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_217, _218, _219), vec3(_962 * _952, _962 * _954, _962 * _956)) + 1.0) * 0.5;
        float _2560 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_954 * _954) + (_952 * _952)) + (_956 * _956)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _2571 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _2582 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _2582 : (isnan(_2582) ? 1.0 : min(_2582, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0))) * (_981 + 1.0))) + _986) * _904;
        float _997 = ((_845.z + (-0.5)) * 0.5) * _878;
        float _999 = ((_852.z + (-0.5)) * 0.5) * _885;
        float _1001 = ((_859.z + (-0.5)) * 0.5) * _892;
        float _1002 = dot(vec3(_997, _999, _1001), vec3(_997, _999, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_217, _218, _219), vec3(_1007 * _997, _1007 * _999, _1007 * _1001)) + 1.0) * 0.5;
        float _2593 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_999 * _999) + (_997 * _997)) + (_1001 * _1001)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _2604 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _2604 : (isnan(_2604) ? 1.0 : min(_2604, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _2615 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _2615 : (isnan(_2615) ? 1.0 : min(_2615, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0))) * (_1026 + 1.0))) + _1031) * _905;
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = 0.0;
        _1049 = 0.0;
        _1050 = 0.0;
    }
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _748)) + _748;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _749)) + _749;
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _750)) + _750;
    float _1083 = fma(_1062, cbSceneParam._m0[89u].z, fma(_1061, cbSceneParam._m0[89u].y, _1060 * cbSceneParam._m0[89u].x));
    float _1086 = fma(_1062, cbSceneParam._m0[90u].z, fma(_1061, cbSceneParam._m0[90u].y, _1060 * cbSceneParam._m0[90u].x));
    float _1089 = fma(_1062, cbSceneParam._m0[91u].z, fma(_1061, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1060));
    vec4 _1097 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_320, _321));
    float _1099 = _1097.w;
    float _1111 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1099);
    float _1112 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1099);
    float _1113 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1099);
    uvec4 _1117 = floatBitsToUint(cbInstanceData._m0[_360 + 5u]);
    uint _1119 = _1117.x * 14u;
    uint _1121 = _1119 + 13u;
    float _1128 = _386 + (-1.0);
    float _1134 = (cbLight._m0[_1121].x * _1128) + 1.0;
    float _1135 = (cbLight._m0[_1121].y * _1128) + 1.0;
    float _1136 = (cbLight._m0[_1121].z * _1128) + 1.0;
    float _1137 = (cbLight._m0[_1121].w * _1128) + 1.0;
    uint _1138 = _1119 + 5u;
    float _1144 = isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0));
    uint _1148 = _1119 + 4u;
    float _1158 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
    uint _1162 = _1119 | 1u;
    float _1173 = dot(vec3(cbLight._m0[_1119].xyz), vec3(_217, _218, _219));
    float _1176 = dot(vec3(cbLight._m0[_1162].xyz), vec3(_217, _218, _219));
    float _2666 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _2677 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1181 = (isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0))) * 0.3183098733425140380859375;
    float _1183 = (isnan(1.0) ? _2677 : (isnan(_2677) ? 1.0 : min(_2677, 1.0))) * 0.3183098733425140380859375;
    float _1190 = ((cbLight._m0[_1138].x * _1144) * _1183) + (((cbLight._m0[_1148].x * _1111) * _1158) * _1181);
    float _1191 = ((_1144 * cbLight._m0[_1138].y) * _1183) + (((cbLight._m0[_1148].y * _1112) * _1158) * _1181);
    float _1192 = ((_1144 * cbLight._m0[_1138].z) * _1183) + (((cbLight._m0[_1148].z * _1113) * _1158) * _1181);
    uvec4 _1197 = floatBitsToUint(cbLight._m0[_1119 + 12u]);
    bool _1199 = _1197.x == 0u;
    float _1200;
    float _1202;
    float _1204;
    if (_1199)
    {
        _1200 = _1190;
        _1202 = _1191;
        _1204 = _1192;
    }
    else
    {
        uint _1208 = _1119 + 6u;
        float _1224 = (dot(vec3(cbLight._m0[_1119 + 2u].xyz), vec3(_217, _218, _219)) * 0.5) + 0.5;
        float _1225 = _1224 * _1224;
        float _2688 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
        float _1227 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
        _1200 = (((cbLight._m0[_1208].x * 0.3183098733425140380859375) * _1226) * _1227) + _1190;
        _1202 = (((cbLight._m0[_1208].y * 0.3183098733425140380859375) * _1226) * _1227) + _1191;
        _1204 = (((cbLight._m0[_1208].z * 0.3183098733425140380859375) * _1226) * _1227) + _1192;
    }
    bool _1207 = _1197.y == 0u;
    float _1237;
    float _1239;
    float _1241;
    if (_1207)
    {
        _1237 = _1200;
        _1239 = _1202;
        _1241 = _1204;
    }
    else
    {
        uint _1342 = _1119 + 7u;
        float _1358 = (dot(vec3(cbLight._m0[_1119 + 3u].xyz), vec3(_217, _218, _219)) * 0.5) + 0.5;
        float _1359 = _1358 * _1358;
        float _2704 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0));
        float _1361 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _1237 = (((cbLight._m0[_1342].x * 0.3183098733425140380859375) * _1360) * _1361) + _1200;
        _1239 = (((cbLight._m0[_1342].y * 0.3183098733425140380859375) * _1360) * _1361) + _1202;
        _1241 = (((cbLight._m0[_1342].z * 0.3183098733425140380859375) * _1360) * _1361) + _1204;
    }
    uint _1243 = _1119 + 8u;
    float _1249 = cbLight._m0[_1119].x + _299;
    float _1250 = cbLight._m0[_1119].y + _300;
    float _1251 = cbLight._m0[_1119].z + _301;
    float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
    float _1259 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1119].xyz));
    float _2720 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1262 = isnan(1.0) ? _2720 : (isnan(_2720) ? 1.0 : min(_2720, 1.0));
    float _1263 = dot(vec3(_217, _218, _219), vec3(_299, _300, _301));
    float _2731 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1266 = isnan(1.0) ? _2731 : (isnan(_2731) ? 1.0 : min(_2731, 1.0));
    float _1267 = dot(vec3(cbLight._m0[_1119].xyz), vec3(_1249 * _1255, _1250 * _1255, _1251 * _1255));
    float _2742 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _1275 = exp2(log2(1.0 - (isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0)))) * 5.0);
    float _1280 = (0.5 / ((_1262 + 9.9999999392252902907785028219223e-09) + _1266)) * _1262;
    float _2753 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
    float _1282 = (isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0))) * 0.31831014156341552734375;
    uint _1296 = _1119 + 9u;
    float _1302 = cbLight._m0[_1162].x + _299;
    float _1303 = cbLight._m0[_1162].y + _300;
    float _1304 = cbLight._m0[_1162].z + _301;
    float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
    float _1312 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1162].xyz));
    float _2764 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _1315 = isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0));
    float _1316 = dot(vec3(cbLight._m0[_1162].xyz), vec3(_1302 * _1308, _1303 * _1308, _1304 * _1308));
    float _2775 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1323 = exp2(log2(1.0 - (isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0)))) * 5.0);
    float _1327 = (0.5 / ((_1315 + 9.9999999392252902907785028219223e-09) + _1266)) * _1315;
    float _2786 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _1329 = (isnan(1.0) ? _2786 : (isnan(_2786) ? 1.0 : min(_2786, 1.0))) * 0.31831014156341552734375;
    float _1339 = (((_1323 * cbLight._m0[_1296].x) * _1329) * _1144) + ((((cbLight._m0[_1243].x * _1111) * _1275) * _1282) * _1158);
    float _1340 = (((_1323 * cbLight._m0[_1296].y) * _1329) * _1144) + ((((cbLight._m0[_1243].y * _1112) * _1275) * _1282) * _1158);
    float _1341 = (((_1323 * cbLight._m0[_1296].z) * _1329) * _1144) + ((((cbLight._m0[_1243].z * _1113) * _1275) * _1282) * _1158);
    float _1371;
    float _1373;
    float _1375;
    if (_1199)
    {
        _1371 = _1339;
        _1373 = _1340;
        _1375 = _1341;
    }
    else
    {
        uint _1377 = _1119 + 10u;
        uint _1383 = _1119 + 2u;
        float _1389 = cbLight._m0[_1383].x + _299;
        float _1390 = cbLight._m0[_1383].y + _300;
        float _1391 = cbLight._m0[_1383].z + _301;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1399 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1383].xyz));
        float _2797 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1402 = isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0));
        float _1403 = dot(vec3(cbLight._m0[_1383].xyz), vec3(_1389 * _1395, _1390 * _1395, _1391 * _1395));
        float _2808 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1410 = exp2(log2(1.0 - (isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0)))) * 5.0);
        float _1414 = (0.5 / ((_1402 + 9.9999999392252902907785028219223e-09) + _1266)) * _1402;
        float _2819 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1416 = (isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0))) * 0.31831014156341552734375;
        float _1417 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
        _1371 = (((_1410 * cbLight._m0[_1377].x) * _1416) * _1417) + _1339;
        _1373 = (((_1410 * cbLight._m0[_1377].y) * _1416) * _1417) + _1340;
        _1375 = (((_1410 * cbLight._m0[_1377].z) * _1416) * _1417) + _1341;
    }
    float _1427;
    float _1429;
    float _1431;
    if (_1207)
    {
        _1427 = _1371;
        _1429 = _1373;
        _1431 = _1375;
    }
    else
    {
        uint _1438 = _1119 + 11u;
        uint _1444 = _1119 + 3u;
        float _1450 = cbLight._m0[_1444].x + _299;
        float _1451 = cbLight._m0[_1444].y + _300;
        float _1452 = cbLight._m0[_1444].z + _301;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1460 = dot(vec3(_217, _218, _219), vec3(cbLight._m0[_1444].xyz));
        float _2835 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1463 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
        float _1464 = dot(vec3(cbLight._m0[_1444].xyz), vec3(_1450 * _1456, _1451 * _1456, _1452 * _1456));
        float _2846 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1471 = exp2(log2(1.0 - (isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0)))) * 5.0);
        float _1475 = (0.5 / ((_1463 + 9.9999999392252902907785028219223e-09) + _1266)) * _1463;
        float _2857 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1477 = (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0))) * 0.31831014156341552734375;
        float _1478 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
        _1427 = (((_1471 * cbLight._m0[_1438].x) * _1477) * _1478) + _1371;
        _1429 = (((_1471 * cbLight._m0[_1438].y) * _1477) * _1478) + _1373;
        _1431 = (((_1471 * cbLight._m0[_1438].z) * _1477) * _1478) + _1375;
    }
    float _1587;
    float _1589;
    float _1591;
    if (_1117.y == 0u)
    {
        float _1528 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1529 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1528;
        float _1530 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1528;
        float _1531 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1528;
        uvec4 _1543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1544 = _1543.x;
        uint _1555 = uint((float(_1543.y) * floor(float(uint(cbSceneParam._m0[85u].y * _321) / _1544))) + floor(float(uint(cbSceneParam._m0[85u].x * _320) / _1544)));
        float _1565 = (log2(_1531 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1566 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        uint _1569 = uint(isnan(14.0) ? _1566 : (isnan(_1566) ? 14.0 : min(_1566, 14.0)));
        uvec4 _1574 = texelFetch(g_lightClusterGridBuffer, int(((_1569 << 2u) + (_1555 << 6u)) >> 2u));
        uint _1575 = _1574.x;
        uint _1576 = _1543.z;
        float _1645;
        float _1647;
        float _1649;
        if (((((1u << ((_1576 >> 4u) & 15u)) + 4294967295u) & _1575) == 0u) || ((_1576 & 240u) == 0u))
        {
            _1645 = 0.0;
            _1647 = 0.0;
            _1649 = 0.0;
        }
        else
        {
            float _1646;
            float _1648;
            float _1650;
            float _1775 = 0.0;
            float _1776 = 0.0;
            float _1777 = 0.0;
            uint _1778 = 0u;
            uint _1787;
            bool _1788;
            for (;;)
            {
                _1787 = texelFetch(g_lightClassification, int((((_1569 << 5u) + (_1555 << 9u)) + (_1778 << 2u)) >> 2u)).x;
                _1788 = _1787 == 0u;
                float frontier_phi_32_pred;
                float frontier_phi_32_pred_1;
                float frontier_phi_32_pred_2;
                if (_1788)
                {
                    frontier_phi_32_pred = _1777;
                    frontier_phi_32_pred_1 = _1775;
                    frontier_phi_32_pred_2 = _1776;
                }
                else
                {
                    float _1911;
                    float _1912;
                    float _1913;
                    uint _1914;
                    _1911 = _1775;
                    _1912 = _1776;
                    _1913 = _1777;
                    _1914 = _1787;
                    float _1844;
                    float _1845;
                    float _1846;
                    for (;;)
                    {
                        uint _1918 = uint(findLSB(_1914)) + (_1778 << 5u);
                        uint _1915 = (_1914 + 4294967295u) & _1914;
                        uint _1920 = _1918 * 48u;
                        vec4 _1934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1920)).x, texelFetch(g_PointLightRenderingBuffer, int(_1920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1920 + 3u)).x));
                        uint _1940 = (_1918 * 48u) + 4u;
                        vec4 _1953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1940)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1940 + 3u)).x));
                        float _1958 = _1934.x - _1529;
                        float _1959 = _1934.y - _1530;
                        float _1960 = _1934.z - _1531;
                        float _1961 = dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960));
                        float _1964 = inversesqrt(_1961);
                        float _1973 = 1.0 - (_1961 * _1934.w);
                        float _2883 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
                        float _1975 = sqrt(_1961) * _1953.w;
                        float _1978 = 1.39999997615814208984375 / (_1975 + 1.39999997615814208984375);
                        float _1979 = _1978 * _1978;
                        float _1982 = ((1.0 - _1979) * dot(vec3(_341, _344, _347), vec3(_1964 * _1958, _1964 * _1959, _1964 * _1960))) + _1979;
                        float _1989 = ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * (isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0)))) / (((_1975 * _1975) * 0.699999988079071044921875) + 1.0);
                        _1844 = (_1989 * _1953.x) + _1911;
                        _1845 = (_1989 * _1953.y) + _1912;
                        _1846 = (_1989 * _1953.z) + _1913;
                        if (_1915 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1911 = _1844;
                            _1912 = _1845;
                            _1913 = _1846;
                            _1914 = _1915;
                        }
                    }
                    frontier_phi_32_pred = _1846;
                    frontier_phi_32_pred_1 = _1844;
                    frontier_phi_32_pred_2 = _1845;
                }
                _1650 = frontier_phi_32_pred;
                _1646 = frontier_phi_32_pred_1;
                _1648 = frontier_phi_32_pred_2;
                uint _1779 = _1778 + 1u;
                if (_1779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1775 = _1646;
                    _1776 = _1648;
                    _1777 = _1650;
                    _1778 = _1779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1645 = _1646;
            _1647 = _1648;
            _1649 = _1650;
        }
        uvec4 _1653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1654 = _1653.z;
        uint _1656 = (_1654 >> 8u) & 15u;
        float _1762;
        float _1764;
        float _1766;
        if (((4294967295u << _1656) & _1575) == 0u)
        {
            _1762 = _1645;
            _1764 = _1647;
            _1766 = _1649;
        }
        else
        {
            float frontier_phi_24_25_ladder;
            float frontier_phi_24_25_ladder_1;
            float frontier_phi_24_25_ladder_2;
            if (_1656 < ((_1654 >> 12u) & 15u))
            {
                float _1763;
                float _1765;
                float _1767;
                float _1897 = _1645;
                float _1898 = _1647;
                float _1899 = _1649;
                uint _1900 = _1656;
                uint _1909;
                bool _1910;
                for (;;)
                {
                    _1909 = texelFetch(g_lightClassification, int((((_1569 << 5u) + (_1555 << 9u)) + (_1900 << 2u)) >> 2u)).x;
                    _1910 = _1909 == 0u;
                    float frontier_phi_43_pred;
                    float frontier_phi_43_pred_1;
                    float frontier_phi_43_pred_2;
                    if (_1910)
                    {
                        frontier_phi_43_pred = _1898;
                        frontier_phi_43_pred_1 = _1899;
                        frontier_phi_43_pred_2 = _1897;
                    }
                    else
                    {
                        float _2003;
                        float _2004;
                        float _2005;
                        float _2205;
                        float _2206;
                        float _2207;
                        float _2013 = _1897;
                        float _2014 = _1898;
                        float _2015 = _1899;
                        uint _2016 = _1909;
                        uint _2017;
                        vec4 _2043;
                        float _2044;
                        vec4 _2059;
                        vec4 _2075;
                        vec4 _2091;
                        float _2138;
                        bool _2139;
                        for (;;)
                        {
                            uint _2027 = ((_1900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2016));
                            _2017 = (_2016 + 4294967295u) & _2016;
                            uint _2029 = _2027 * 40u;
                            _2043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2029 + 3u)).x));
                            _2044 = _2043.w;
                            uint _2046 = (_2027 * 40u) + 4u;
                            _2059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 3u)).x));
                            uint _2062 = (_2027 * 40u) + 16u;
                            _2075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2062 + 3u)).x));
                            uint _2078 = (_2027 * 40u) + 20u;
                            _2091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2078 + 3u)).x));
                            uint _2094 = (_2027 * 40u) + 24u;
                            vec4 _2107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2094 + 3u)).x));
                            uint _2113 = (_2027 * 40u) + 28u;
                            vec4 _2126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2113 + 3u)).x));
                            _2138 = fma(_1531, _2126.z, fma(_1530, _2126.y, _2126.x * _1529)) + _2126.w;
                            _2139 = !((fma(_1531, _2107.z, fma(_1530, _2107.y, _2107.x * _1529)) + _2107.w) <= 0.0);
                            float frontier_phi_49_pred;
                            float frontier_phi_49_pred_1;
                            float frontier_phi_49_pred_2;
                            if (_2139)
                            {
                                float _2163 = _2043.x - _1529;
                                float _2164 = _2043.y - _1530;
                                float _2165 = _2043.z - _1531;
                                float _2166 = dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165));
                                float _2169 = inversesqrt(_2166);
                                float _2176 = 1.0 - (_2166 / (_2044 * _2044));
                                float _2899 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
                                float _2181 = sqrt(_2166) * _2059.w;
                                float _2183 = 1.39999997615814208984375 / (_2181 + 1.39999997615814208984375);
                                float _2184 = _2183 * _2183;
                                float _2187 = ((1.0 - _2184) * dot(vec3(_2169 * _2163, _2169 * _2164, _2169 * _2165), vec3(_341, _344, _347))) + _2184;
                                float _2194 = (fma(_1531, _2075.z, fma(_1530, _2075.y, _2075.x * _1529)) + _2075.w) / _2138;
                                float _2195 = (fma(_1531, _2091.z, fma(_1530, _2091.y, _2091.x * _1529)) + _2091.w) / _2138;
                                float _2199 = 1.0 - dot(vec2(_2194, _2195), vec2(_2194, _2195));
                                float _2915 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
                                float _2201 = (isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0))) * (((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * (isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0)))) / (((_2181 * _2181) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_49_pred = _2201 * _2059.z;
                                frontier_phi_49_pred_1 = _2201 * _2059.y;
                                frontier_phi_49_pred_2 = _2201 * _2059.x;
                            }
                            else
                            {
                                frontier_phi_49_pred = 0.0;
                                frontier_phi_49_pred_1 = 0.0;
                                frontier_phi_49_pred_2 = 0.0;
                            }
                            _2207 = frontier_phi_49_pred;
                            _2206 = frontier_phi_49_pred_1;
                            _2205 = frontier_phi_49_pred_2;
                            _2003 = _2205 + _2013;
                            _2004 = _2206 + _2014;
                            _2005 = _2207 + _2015;
                            if (_2017 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2013 = _2003;
                                _2014 = _2004;
                                _2015 = _2005;
                                _2016 = _2017;
                                continue;
                            }
                        }
                        frontier_phi_43_pred = _2004;
                        frontier_phi_43_pred_1 = _2005;
                        frontier_phi_43_pred_2 = _2003;
                    }
                    _1765 = frontier_phi_43_pred;
                    _1767 = frontier_phi_43_pred_1;
                    _1763 = frontier_phi_43_pred_2;
                    uint _1901 = _1900 + 1u;
                    if (_1901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1897 = _1763;
                        _1898 = _1765;
                        _1899 = _1767;
                        _1900 = _1901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_24_25_ladder = _1767;
                frontier_phi_24_25_ladder_1 = _1765;
                frontier_phi_24_25_ladder_2 = _1763;
            }
            else
            {
                frontier_phi_24_25_ladder = _1649;
                frontier_phi_24_25_ladder_1 = _1647;
                frontier_phi_24_25_ladder_2 = _1645;
            }
            _1762 = frontier_phi_24_25_ladder_2;
            _1764 = frontier_phi_24_25_ladder_1;
            _1766 = frontier_phi_24_25_ladder;
        }
        float _1768 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
        _1587 = (_1768 * _1762) + _1237;
        _1589 = (_1768 * _1764) + _1239;
        _1591 = (_1768 * _1766) + _1241;
    }
    else
    {
        _1587 = _1237;
        _1589 = _1239;
        _1591 = _1241;
    }
    float _2931 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _2942 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _2953 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _1605 = ((isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0))) * (_1587 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _386))) + (cbPerFrame._m0[3u].x * _1427);
    float _1606 = ((isnan(1.0) ? _2942 : (isnan(_2942) ? 1.0 : min(_2942, 1.0))) * (_1589 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _386))) + (cbPerFrame._m0[3u].x * _1429);
    float _1607 = ((isnan(1.0) ? _2953 : (isnan(_2953) ? 1.0 : min(_2953, 1.0))) * (_1591 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _386))) + (cbPerFrame._m0[3u].x * _1431);
    uint _1608 = _360 + 6u;
    float _1616 = _320 / cbSceneParam._m0[86u].x;
    float _1617 = _321 / cbSceneParam._m0[86u].y;
    vec4 _1631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1616, _1617, (log2((isnan(cbSceneParam._m0[77u].w) ? _239 : (isnan(_239) ? cbSceneParam._m0[77u].w : min(_239, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1633 = _1631.x;
    float _1634 = _1631.y;
    float _1635 = _1631.z;
    float _1636 = _1631.w;
    float _1702;
    float _1704;
    float _1706;
    float _1708;
    if (_239 > cbSceneParam._m0[78u].w)
    {
        float _1664 = isnan(_239) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _239 : min(cbSceneParam._m0[80u].w, _239));
        float _1665 = _1664 / _239;
        float _1676 = _1665 * _292;
        float _1677 = _293 * _1665;
        float _1678 = (-0.0) - _1677;
        float _1679 = _1665 * _294;
        float _1681 = (cbSceneParam._m0[77u].w * _1678) / _1664;
        float _1682 = _1681 + cbSceneParam._m0[79u].w;
        float _1683 = cbSceneParam._m0[79u].w - _1677;
        float _1689 = sqrt(((_1676 * _1676) + (_1677 * _1677)) + (_1679 * _1679));
        float _1692 = (1.0 - (cbSceneParam._m0[77u].w / _1664)) * _1689;
        float _1698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1854;
        if (abs((_1678 - _1681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1854 = ((((_1682 > 0.0) ? exp2(_1698 * _1682) : (2.0 - exp2(_1700 * _1682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1692;
        }
        else
        {
            float _1801 = 1.0 / cbSceneParam._m0[80u].x;
            float _1802 = isnan(_1683) ? _1682 : (isnan(_1682) ? _1683 : max(_1682, _1683));
            float _1803 = isnan(_1683) ? _1682 : (isnan(_1682) ? _1683 : min(_1682, _1683));
            float _1812 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : min(_1802, 0.0));
            float _1813 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : min(_1803, 0.0));
            _1854 = ((abs(_1689 / _1678) * cbSceneParam._m0[80u].y) * ((((_1812 - _1813) * 2.0) - ((exp2(_1698 * (isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)))) - exp2(_1698 * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))))) * _1801)) - ((exp2(_1700 * _1812) - exp2(_1700 * _1813)) * _1801))) + (_1692 * cbSceneParam._m0[80u].z);
        }
        vec4 _1856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1616, _1617, 1.0), 0.0);
        float _1865 = exp2((_1854 * (-1.44269502162933349609375)) * (1.0 - _1856.w));
        float _1866 = log2(_1865);
        float _1882 = log2(_1636);
        _1702 = (exp2(_1882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1866 * cbSceneParam._m0[78u].x)) * _1856.x) / cbSceneParam._m0[78u].x)) + _1633;
        _1704 = (exp2(_1882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1866 * cbSceneParam._m0[78u].y)) * _1856.y) / cbSceneParam._m0[78u].y)) + _1634;
        _1706 = (exp2(_1882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1866 * cbSceneParam._m0[78u].z)) * _1856.z) / cbSceneParam._m0[78u].z)) + _1635;
        _1708 = _1865 * _1636;
    }
    else
    {
        _1702 = _1633;
        _1704 = _1634;
        _1706 = _1635;
        _1708 = _1636;
    }
    bool _1892;
    vec4 _1718;
    vec4 _1741;
    float _1743;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    bool _1761;
    for (;;)
    {
        _1718 = cbMatDynParam._m0[0u];
        float _1720 = roundEven(_1718.y);
        bool _1721 = _1720 == 3.0;
        float _1723 = log2(_1708);
        float _1730 = exp2(_1723 * cbSceneParam._m0[78u].x) * _1605;
        float _1731 = exp2(_1723 * cbSceneParam._m0[78u].y) * _1606;
        float _1732 = exp2(_1723 * cbSceneParam._m0[78u].z) * _1607;
        float _1739 = _308 + (-0.5);
        _1741 = cbMtdParam._m0[1u];
        _1743 = _1741.y * _1739;
        float _1746 = (_1720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1747 = _1746 * (_1721 ? _1730 : (_1730 + (cbSceneParam._m0[72u].w * _1702)));
        _1748 = _1746 * (_1721 ? _1731 : (_1731 + (cbSceneParam._m0[72u].w * _1704)));
        _1749 = _1746 * (_1721 ? _1732 : (_1732 + (cbSceneParam._m0[72u].w * _1706)));
        _1750 = _1739 * 0.999000012874603271484375;
        _1761 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1761)
        {
            if ((cbInstanceData._m0[_360 + 7u].x + _1750) < 0.5)
            {
                _1892 = true;
                break;
            }
        }
        uint _1836 = _362 + uint(_1718.w);
        if ((cbInstanceData._m0[_1836].w < 1.0) && ((cbInstanceData._m0[_1836].w + _1750) < 0.5))
        {
            _1892 = true;
            break;
        }
        if ((_1743 + 1.0) < _1741.x)
        {
            _1892 = true;
            break;
        }
        _1892 = false;
        break;
    }
    float _1994;
    if (_1892)
    {
        discard_state = true;
        _1994 = 0.0;
    }
    else
    {
        _1994 = cbInstanceData._m0[_1608].w;
    }
    SV_Target.x = _1747;
    SV_Target.y = _1748;
    SV_Target.z = _1749;
    SV_Target.w = _1994;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1608].w;
    discard_exit();
}


