#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D _SketchUp_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _162 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _163 = _162 * NORMAL.x;
    float _164 = _162 * NORMAL.y;
    float _165 = _162 * NORMAL.z;
    float _170;
    float _171;
    float _172;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _170 = (-0.0) - _163;
        _171 = (-0.0) - _164;
        _172 = (-0.0) - _165;
    }
    else
    {
        _170 = _163;
        _171 = _164;
        _172 = _165;
    }
    vec4 _186 = texture(sampler2D(_SketchUp_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _199 = (sqrt(_186.x) * TEXCOORD.x) * sqrt(TEXCOORD.x);
    float _201 = (sqrt(_186.y) * TEXCOORD.y) * sqrt(TEXCOORD.y);
    float _203 = (sqrt(_186.z) * TEXCOORD.z) * sqrt(TEXCOORD.z);
    float _204 = _199 * _199;
    float _205 = _201 * _201;
    float _206 = _203 * _203;
    float _210 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _211 = _210 * _170;
    float _212 = _210 * _171;
    float _213 = _210 * _172;
    float _2157 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _2168 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _2179 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _233 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _276);
    float _287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _276);
    float _288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _276);
    float _292 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _293 = _286 * _292;
    float _294 = _287 * _292;
    float _295 = _288 * _292;
    float _301 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _302 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _323 = fma(_213, cbSceneParam._m0[5u].z, fma(_212, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _211));
    float _326 = fma(_213, cbSceneParam._m0[6u].z, fma(_212, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _211));
    float _329 = fma(_213, cbSceneParam._m0[7u].z, fma(_212, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _211));
    uint _342 = uint(roundEven(NORMAL.w)) * 13u;
    uint _345 = (_342 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _351 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0)))) * cbInstanceData._m0[_345].x;
    float _352 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0)))) * cbInstanceData._m0[_345].y;
    float _353 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0)))) * cbInstanceData._m0[_345].z;
    float _2190 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _354 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    float _2201 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _355 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    float _2212 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _356 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    vec4 _365 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _301, cbSceneParam._m0[86u].y * _302));
    float _368 = _365.x * TEXCOORD_4.z;
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _394 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _398 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _701;
    float _702;
    float _703;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _425 = fma(_398, cbModelParam._m0[26u].z, fma(_394, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _390));
        float _429 = fma(_398, cbModelParam._m0[27u].z, fma(_394, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _390));
        float _433 = fma(_398, cbModelParam._m0[28u].z, fma(_394, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _390));
        float _458 = _390 + _211;
        float _459 = _394 + _212;
        float _460 = _398 + _213;
        float _470 = fma(_460, cbModelParam._m0[26u].z, fma(_459, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _458)) - _425;
        float _471 = fma(_460, cbModelParam._m0[27u].z, fma(_459, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _458)) - _429;
        float _472 = fma(_460, cbModelParam._m0[28u].z, fma(_459, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _458)) - _433;
        float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
        float _489 = ((_476 * _470) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_425 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _490 = ((_476 * _471) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_429 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _491 = ((_476 * _472) / cbModelParam._m0[34u].z) + ((((((_433 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _494 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_489, _490, _491), 0.0);
        vec4 _501 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_489, _490, _491), 0.0);
        vec4 _508 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_489, _490, _491), 0.0);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_489, _490, _491), 0.0);
        float _528 = exp2((_494.w + (-0.5)) * 20.0) * 2.0;
        float _536 = exp2((_501.w + (-0.5)) * 20.0) * 2.0;
        float _543 = exp2((_508.w + (-0.5)) * 20.0) * 2.0;
        float _550 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _551 = _550 * (_515.x + (-0.5));
        float _552 = _550 * (_515.y + (-0.5));
        float _553 = _550 * (_515.z + (-0.5));
        float _554 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _555 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        float _556 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _558 = ((_494.x + (-0.5)) * 0.5) * _528;
        float _560 = ((_501.x + (-0.5)) * 0.5) * _536;
        float _562 = ((_508.x + (-0.5)) * 0.5) * _543;
        float _563 = dot(vec3(_558, _560, _562), vec3(_558, _560, _562));
        float _568 = (_563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_563);
        float _577 = (dot(vec3(_211, _212, _213), vec3(_568 * _558, _568 * _560, _568 * _562)) + 1.0) * 0.5;
        float _2238 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _587 = sqrt(((_560 * _560) + (_558 * _558)) + (_562 * _562)) / (_554 + 9.9999997473787516355514526367188e-06);
        float _2249 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _588 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        float _589 = _588 * 2.0;
        float _593 = (1.0 - _588) / (_588 + 1.0);
        float _2260 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        float _603 = ((((1.0 - _594) * (_589 + 2.0)) * exp2(log2(isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0))) * (_589 + 1.0))) + _594) * _554;
        float _605 = ((_494.y + (-0.5)) * 0.5) * _528;
        float _607 = ((_501.y + (-0.5)) * 0.5) * _536;
        float _609 = ((_508.y + (-0.5)) * 0.5) * _543;
        float _610 = dot(vec3(_605, _607, _609), vec3(_605, _607, _609));
        float _615 = (_610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_610);
        float _623 = (dot(vec3(_211, _212, _213), vec3(_615 * _605, _615 * _607, _615 * _609)) + 1.0) * 0.5;
        float _2271 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _632 = sqrt(((_607 * _607) + (_605 * _605)) + (_609 * _609)) / (_555 + 9.9999997473787516355514526367188e-06);
        float _2282 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _633 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        float _634 = _633 * 2.0;
        float _638 = (1.0 - _633) / (_633 + 1.0);
        float _2293 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _639 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        float _648 = ((((1.0 - _639) * (_634 + 2.0)) * exp2(log2(isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0))) * (_634 + 1.0))) + _639) * _555;
        float _650 = ((_494.z + (-0.5)) * 0.5) * _528;
        float _652 = ((_501.z + (-0.5)) * 0.5) * _536;
        float _654 = ((_508.z + (-0.5)) * 0.5) * _543;
        float _655 = dot(vec3(_650, _652, _654), vec3(_650, _652, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_211, _212, _213), vec3(_660 * _650, _660 * _652, _660 * _654)) + 1.0) * 0.5;
        float _2304 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_652 * _652) + (_650 * _650)) + (_654 * _654)) / (_556 + 9.9999997473787516355514526367188e-06);
        float _2315 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _2326 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0))) * (_679 + 1.0))) + _684) * _556;
        _701 = cbModelParam._m0[36u].z * (isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0)));
        _702 = cbModelParam._m0[36u].z * (isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0)));
        _703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
    }
    else
    {
        _701 = 0.0;
        _702 = 0.0;
        _703 = 0.0;
    }
    float _998;
    float _999;
    float _1000;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _729 = fma(_398, cbModelParam._m0[30u].z, fma(_394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _390));
        float _733 = fma(_398, cbModelParam._m0[31u].z, fma(_394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _390));
        float _737 = fma(_398, cbModelParam._m0[32u].z, fma(_394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _390));
        float _760 = _390 + _211;
        float _761 = _394 + _212;
        float _762 = _398 + _213;
        float _772 = fma(_762, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _760)) - _729;
        float _773 = fma(_762, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _760)) - _733;
        float _774 = fma(_762, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _760)) - _737;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_729 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_733 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[35u].z) + ((((((_737 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _828 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _835 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _842 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _849 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_816.x + (-0.5));
        float _851 = _849 * (_816.y + (-0.5));
        float _852 = _849 * (_816.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _857 = ((_795.x + (-0.5)) * 0.5) * _828;
        float _859 = ((_802.x + (-0.5)) * 0.5) * _835;
        float _861 = ((_809.x + (-0.5)) * 0.5) * _842;
        float _862 = dot(vec3(_857, _859, _861), vec3(_857, _859, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_211, _212, _213), vec3(_867 * _857, _867 * _859, _867 * _861)) + 1.0) * 0.5;
        float _2367 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_859 * _859) + (_857 * _857)) + (_861 * _861)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _2378 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _2389 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0))) * (_886 + 1.0))) + _891) * _853;
        float _902 = ((_795.y + (-0.5)) * 0.5) * _828;
        float _904 = ((_802.y + (-0.5)) * 0.5) * _835;
        float _906 = ((_809.y + (-0.5)) * 0.5) * _842;
        float _907 = dot(vec3(_902, _904, _906), vec3(_902, _904, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_211, _212, _213), vec3(_912 * _902, _912 * _904, _912 * _906)) + 1.0) * 0.5;
        float _2400 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_904 * _904) + (_902 * _902)) + (_906 * _906)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _2411 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _2422 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0))) * (_931 + 1.0))) + _936) * _854;
        float _947 = ((_795.z + (-0.5)) * 0.5) * _828;
        float _949 = ((_802.z + (-0.5)) * 0.5) * _835;
        float _951 = ((_809.z + (-0.5)) * 0.5) * _842;
        float _952 = dot(vec3(_947, _949, _951), vec3(_947, _949, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_211, _212, _213), vec3(_957 * _947, _957 * _949, _957 * _951)) + 1.0) * 0.5;
        float _2433 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_949 * _949) + (_947 * _947)) + (_951 * _951)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _2444 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _2455 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _2433 : (isnan(_2433) ? 1.0 : min(_2433, 1.0))) * (_976 + 1.0))) + _981) * _855;
        _998 = cbModelParam._m0[36u].w * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _999 = cbModelParam._m0[36u].w * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1000 = cbModelParam._m0[36u].w * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    float _1010 = (cbModelParam._m0[1u].x * (_998 - _701)) + _701;
    float _1011 = (cbModelParam._m0[1u].x * (_999 - _702)) + _702;
    float _1012 = (cbModelParam._m0[1u].x * (_1000 - _703)) + _703;
    float _1033 = fma(_1012, cbSceneParam._m0[89u].z, fma(_1011, cbSceneParam._m0[89u].y, _1010 * cbSceneParam._m0[89u].x));
    float _1036 = fma(_1012, cbSceneParam._m0[90u].z, fma(_1011, cbSceneParam._m0[90u].y, _1010 * cbSceneParam._m0[90u].x));
    float _1039 = fma(_1012, cbSceneParam._m0[91u].z, fma(_1011, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1010));
    uvec4 _1049 = floatBitsToUint(cbInstanceData._m0[_342 + 5u]);
    uint _1051 = _1049.x * 14u;
    uint _1053 = _1051 + 13u;
    float _1060 = _368 + (-1.0);
    float _1066 = (cbLight._m0[_1053].x * _1060) + 1.0;
    float _1067 = (cbLight._m0[_1053].y * _1060) + 1.0;
    float _1068 = (cbLight._m0[_1053].z * _1060) + 1.0;
    float _1069 = (cbLight._m0[_1053].w * _1060) + 1.0;
    uint _1070 = _1051 + 5u;
    float _1076 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
    uint _1080 = _1051 + 4u;
    float _1087 = isnan(1.0) ? _1066 : (isnan(_1066) ? 1.0 : min(_1066, 1.0));
    uint _1091 = _1051 | 1u;
    float _1102 = dot(vec3(cbLight._m0[_1051].xyz), vec3(_211, _212, _213));
    float _1105 = dot(vec3(cbLight._m0[_1091].xyz), vec3(_211, _212, _213));
    float _2506 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2517 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1110 = (isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0))) * 0.3183098733425140380859375;
    float _1112 = (isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0))) * 0.3183098733425140380859375;
    float _1119 = ((cbLight._m0[_1070].x * _1076) * _1112) + ((cbLight._m0[_1080].x * _1087) * _1110);
    float _1120 = ((_1076 * cbLight._m0[_1070].y) * _1112) + ((_1087 * cbLight._m0[_1080].y) * _1110);
    float _1121 = ((_1076 * cbLight._m0[_1070].z) * _1112) + ((_1087 * cbLight._m0[_1080].z) * _1110);
    uvec4 _1126 = floatBitsToUint(cbLight._m0[_1051 + 12u]);
    bool _1128 = _1126.x == 0u;
    float _1129;
    float _1131;
    float _1133;
    if (_1128)
    {
        _1129 = _1119;
        _1131 = _1120;
        _1133 = _1121;
    }
    else
    {
        uint _1137 = _1051 + 6u;
        float _1153 = (dot(vec3(cbLight._m0[_1051 + 2u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1154 = _1153 * _1153;
        float _2528 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        float _1156 = isnan(1.0) ? _1068 : (isnan(_1068) ? 1.0 : min(_1068, 1.0));
        _1129 = (((cbLight._m0[_1137].x * 0.3183098733425140380859375) * _1155) * _1156) + _1119;
        _1131 = (((cbLight._m0[_1137].y * 0.3183098733425140380859375) * _1155) * _1156) + _1120;
        _1133 = (((cbLight._m0[_1137].z * 0.3183098733425140380859375) * _1155) * _1156) + _1121;
    }
    bool _1136 = _1126.y == 0u;
    float _1166;
    float _1168;
    float _1170;
    if (_1136)
    {
        _1166 = _1129;
        _1168 = _1131;
        _1170 = _1133;
    }
    else
    {
        uint _1268 = _1051 + 7u;
        float _1284 = (dot(vec3(cbLight._m0[_1051 + 3u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1285 = _1284 * _1284;
        float _2544 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
        float _1287 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _1166 = (((cbLight._m0[_1268].x * 0.3183098733425140380859375) * _1286) * _1287) + _1129;
        _1168 = (((cbLight._m0[_1268].y * 0.3183098733425140380859375) * _1286) * _1287) + _1131;
        _1170 = (((cbLight._m0[_1268].z * 0.3183098733425140380859375) * _1286) * _1287) + _1133;
    }
    uint _1172 = _1051 + 8u;
    float _1178 = cbLight._m0[_1051].x + _293;
    float _1179 = cbLight._m0[_1051].y + _294;
    float _1180 = cbLight._m0[_1051].z + _295;
    float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
    float _1188 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1051].xyz));
    float _2560 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0));
    float _1192 = dot(vec3(_211, _212, _213), vec3(_293, _294, _295));
    float _2571 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
    float _1196 = dot(vec3(cbLight._m0[_1051].xyz), vec3(_1178 * _1184, _1179 * _1184, _1180 * _1184));
    float _2582 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1204 = exp2(log2(1.0 - (isnan(1.0) ? _2582 : (isnan(_2582) ? 1.0 : min(_2582, 1.0)))) * 5.0);
    float _1209 = (0.5 / ((_1191 + 9.9999999392252902907785028219223e-09) + _1195)) * _1191;
    float _2593 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1211 = (isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0))) * 0.31831014156341552734375;
    uint _1222 = _1051 + 9u;
    float _1228 = cbLight._m0[_1091].x + _293;
    float _1229 = cbLight._m0[_1091].y + _294;
    float _1230 = cbLight._m0[_1091].z + _295;
    float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
    float _1238 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1091].xyz));
    float _2604 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1241 = isnan(1.0) ? _2604 : (isnan(_2604) ? 1.0 : min(_2604, 1.0));
    float _1242 = dot(vec3(cbLight._m0[_1091].xyz), vec3(_1228 * _1234, _1229 * _1234, _1230 * _1234));
    float _2615 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1249 = exp2(log2(1.0 - (isnan(1.0) ? _2615 : (isnan(_2615) ? 1.0 : min(_2615, 1.0)))) * 5.0);
    float _1253 = (0.5 / ((_1241 + 9.9999999392252902907785028219223e-09) + _1195)) * _1241;
    float _2626 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    float _1255 = (isnan(1.0) ? _2626 : (isnan(_2626) ? 1.0 : min(_2626, 1.0))) * 0.31831014156341552734375;
    float _1265 = (((_1249 * cbLight._m0[_1222].x) * _1255) * _1076) + (((_1204 * cbLight._m0[_1172].x) * _1211) * _1087);
    float _1266 = (((_1249 * cbLight._m0[_1222].y) * _1255) * _1076) + (((_1204 * cbLight._m0[_1172].y) * _1211) * _1087);
    float _1267 = (((_1249 * cbLight._m0[_1222].z) * _1255) * _1076) + (((_1204 * cbLight._m0[_1172].z) * _1211) * _1087);
    float _1297;
    float _1299;
    float _1301;
    if (_1128)
    {
        _1297 = _1265;
        _1299 = _1266;
        _1301 = _1267;
    }
    else
    {
        uint _1303 = _1051 + 10u;
        uint _1309 = _1051 + 2u;
        float _1315 = cbLight._m0[_1309].x + _293;
        float _1316 = cbLight._m0[_1309].y + _294;
        float _1317 = cbLight._m0[_1309].z + _295;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1325 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1309].xyz));
        float _2637 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1328 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
        float _1329 = dot(vec3(cbLight._m0[_1309].xyz), vec3(_1315 * _1321, _1316 * _1321, _1317 * _1321));
        float _2648 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1336 = exp2(log2(1.0 - (isnan(1.0) ? _2648 : (isnan(_2648) ? 1.0 : min(_2648, 1.0)))) * 5.0);
        float _1340 = (0.5 / ((_1328 + 9.9999999392252902907785028219223e-09) + _1195)) * _1328;
        float _2659 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1342 = (isnan(1.0) ? _2659 : (isnan(_2659) ? 1.0 : min(_2659, 1.0))) * 0.31831014156341552734375;
        float _1343 = isnan(1.0) ? _1068 : (isnan(_1068) ? 1.0 : min(_1068, 1.0));
        _1297 = (((_1336 * cbLight._m0[_1303].x) * _1342) * _1343) + _1265;
        _1299 = (((_1336 * cbLight._m0[_1303].y) * _1342) * _1343) + _1266;
        _1301 = (((_1336 * cbLight._m0[_1303].z) * _1342) * _1343) + _1267;
    }
    float _1353;
    float _1355;
    float _1357;
    if (_1136)
    {
        _1353 = _1297;
        _1355 = _1299;
        _1357 = _1301;
    }
    else
    {
        uint _1364 = _1051 + 11u;
        uint _1370 = _1051 + 3u;
        float _1376 = cbLight._m0[_1370].x + _293;
        float _1377 = cbLight._m0[_1370].y + _294;
        float _1378 = cbLight._m0[_1370].z + _295;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1386 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1370].xyz));
        float _2675 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1389 = isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0));
        float _1390 = dot(vec3(cbLight._m0[_1370].xyz), vec3(_1376 * _1382, _1377 * _1382, _1378 * _1382));
        float _2686 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1397 = exp2(log2(1.0 - (isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0)))) * 5.0);
        float _1401 = (0.5 / ((_1389 + 9.9999999392252902907785028219223e-09) + _1195)) * _1389;
        float _2697 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1403 = (isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) * 0.31831014156341552734375;
        float _1404 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _1353 = (((_1397 * cbLight._m0[_1364].x) * _1403) * _1404) + _1297;
        _1355 = (((_1397 * cbLight._m0[_1364].y) * _1403) * _1404) + _1299;
        _1357 = (((_1397 * cbLight._m0[_1364].z) * _1403) * _1404) + _1301;
    }
    float _1513;
    float _1515;
    float _1517;
    if (_1049.y == 0u)
    {
        float _1454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1454;
        float _1456 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1454;
        float _1457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1454;
        uvec4 _1469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1470 = _1469.x;
        uint _1481 = uint((float(_1469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _302) / _1470))) + floor(float(uint(cbSceneParam._m0[85u].x * _301) / _1470)));
        float _1491 = (log2(_1457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1492 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        uint _1495 = uint(isnan(14.0) ? _1492 : (isnan(_1492) ? 14.0 : min(_1492, 14.0)));
        uvec4 _1500 = texelFetch(g_lightClusterGridBuffer, int(((_1495 << 2u) + (_1481 << 6u)) >> 2u));
        uint _1501 = _1500.x;
        uint _1502 = _1469.z;
        float _1571;
        float _1573;
        float _1575;
        if (((((1u << ((_1502 >> 4u) & 15u)) + 4294967295u) & _1501) == 0u) || ((_1502 & 240u) == 0u))
        {
            _1571 = 0.0;
            _1573 = 0.0;
            _1575 = 0.0;
        }
        else
        {
            float _1572;
            float _1574;
            float _1576;
            float _1692 = 0.0;
            float _1693 = 0.0;
            float _1694 = 0.0;
            uint _1695 = 0u;
            uint _1704;
            bool _1705;
            for (;;)
            {
                _1704 = texelFetch(g_lightClassification, int((((_1495 << 5u) + (_1481 << 9u)) + (_1695 << 2u)) >> 2u)).x;
                _1705 = _1704 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                if (_1705)
                {
                    frontier_phi_27_pred = _1693;
                    frontier_phi_27_pred_1 = _1694;
                    frontier_phi_27_pred_2 = _1692;
                }
                else
                {
                    float _1807;
                    float _1808;
                    float _1809;
                    uint _1810;
                    _1807 = _1692;
                    _1808 = _1693;
                    _1809 = _1694;
                    _1810 = _1704;
                    float _1745;
                    float _1746;
                    float _1747;
                    for (;;)
                    {
                        uint _1814 = uint(findLSB(_1810)) + (_1695 << 5u);
                        uint _1811 = (_1810 + 4294967295u) & _1810;
                        uint _1816 = _1814 * 48u;
                        vec4 _1830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1816)).x, texelFetch(g_PointLightRenderingBuffer, int(_1816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1816 + 3u)).x));
                        uint _1836 = (_1814 * 48u) + 4u;
                        vec4 _1849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1836)).x, texelFetch(g_PointLightRenderingBuffer, int(_1836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1836 + 3u)).x));
                        float _1854 = _1830.x - _1455;
                        float _1855 = _1830.y - _1456;
                        float _1856 = _1830.z - _1457;
                        float _1857 = dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856));
                        float _1860 = inversesqrt(_1857);
                        float _1869 = 1.0 - (_1857 * _1830.w);
                        float _2723 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
                        float _1871 = sqrt(_1857) * _1849.w;
                        float _1874 = 1.39999997615814208984375 / (_1871 + 1.39999997615814208984375);
                        float _1875 = _1874 * _1874;
                        float _1878 = ((1.0 - _1875) * dot(vec3(_323, _326, _329), vec3(_1860 * _1854, _1860 * _1855, _1860 * _1856))) + _1875;
                        float _1885 = ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * (isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0)))) / (((_1871 * _1871) * 0.699999988079071044921875) + 1.0);
                        _1745 = (_1885 * _1849.x) + _1807;
                        _1746 = (_1885 * _1849.y) + _1808;
                        _1747 = (_1885 * _1849.z) + _1809;
                        if (_1811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1807 = _1745;
                            _1808 = _1746;
                            _1809 = _1747;
                            _1810 = _1811;
                        }
                    }
                    frontier_phi_27_pred = _1746;
                    frontier_phi_27_pred_1 = _1747;
                    frontier_phi_27_pred_2 = _1745;
                }
                _1574 = frontier_phi_27_pred;
                _1576 = frontier_phi_27_pred_1;
                _1572 = frontier_phi_27_pred_2;
                uint _1696 = _1695 + 1u;
                if (_1696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1692 = _1572;
                    _1693 = _1574;
                    _1694 = _1576;
                    _1695 = _1696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1571 = _1572;
            _1573 = _1574;
            _1575 = _1576;
        }
        uvec4 _1579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1580 = _1579.z;
        uint _1582 = (_1580 >> 8u) & 15u;
        float _1679;
        float _1681;
        float _1683;
        if (((4294967295u << _1582) & _1501) == 0u)
        {
            _1679 = _1571;
            _1681 = _1573;
            _1683 = _1575;
        }
        else
        {
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            if (_1582 < ((_1580 >> 12u) & 15u))
            {
                float _1680;
                float _1682;
                float _1684;
                float _1793 = _1571;
                float _1794 = _1573;
                float _1795 = _1575;
                uint _1796 = _1582;
                uint _1805;
                bool _1806;
                for (;;)
                {
                    _1805 = texelFetch(g_lightClassification, int((((_1495 << 5u) + (_1481 << 9u)) + (_1796 << 2u)) >> 2u)).x;
                    _1806 = _1805 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    if (_1806)
                    {
                        frontier_phi_33_pred = _1795;
                        frontier_phi_33_pred_1 = _1794;
                        frontier_phi_33_pred_2 = _1793;
                    }
                    else
                    {
                        float _1890;
                        float _1891;
                        float _1892;
                        float _2092;
                        float _2093;
                        float _2094;
                        float _1900 = _1793;
                        float _1901 = _1794;
                        float _1902 = _1795;
                        uint _1903 = _1805;
                        uint _1904;
                        vec4 _1930;
                        float _1931;
                        vec4 _1946;
                        vec4 _1962;
                        vec4 _1978;
                        float _2025;
                        bool _2026;
                        for (;;)
                        {
                            uint _1914 = ((_1796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1903));
                            _1904 = (_1903 + 4294967295u) & _1903;
                            uint _1916 = _1914 * 40u;
                            _1930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1916 + 3u)).x));
                            _1931 = _1930.w;
                            uint _1933 = (_1914 * 40u) + 4u;
                            _1946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1933 + 3u)).x));
                            uint _1949 = (_1914 * 40u) + 16u;
                            _1962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1949 + 3u)).x));
                            uint _1965 = (_1914 * 40u) + 20u;
                            _1978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1965 + 3u)).x));
                            uint _1981 = (_1914 * 40u) + 24u;
                            vec4 _1994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 3u)).x));
                            uint _2000 = (_1914 * 40u) + 28u;
                            vec4 _2013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 3u)).x));
                            _2025 = fma(_1457, _2013.z, fma(_1456, _2013.y, _2013.x * _1455)) + _2013.w;
                            _2026 = !((fma(_1457, _1994.z, fma(_1456, _1994.y, _1994.x * _1455)) + _1994.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            if (_2026)
                            {
                                float _2050 = _1930.x - _1455;
                                float _2051 = _1930.y - _1456;
                                float _2052 = _1930.z - _1457;
                                float _2053 = dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052));
                                float _2056 = inversesqrt(_2053);
                                float _2063 = 1.0 - (_2053 / (_1931 * _1931));
                                float _2739 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
                                float _2068 = sqrt(_2053) * _1946.w;
                                float _2070 = 1.39999997615814208984375 / (_2068 + 1.39999997615814208984375);
                                float _2071 = _2070 * _2070;
                                float _2074 = ((1.0 - _2071) * dot(vec3(_2056 * _2050, _2056 * _2051, _2056 * _2052), vec3(_323, _326, _329))) + _2071;
                                float _2081 = (fma(_1457, _1962.z, fma(_1456, _1962.y, _1962.x * _1455)) + _1962.w) / _2025;
                                float _2082 = (fma(_1457, _1978.z, fma(_1456, _1978.y, _1978.x * _1455)) + _1978.w) / _2025;
                                float _2086 = 1.0 - dot(vec2(_2081, _2082), vec2(_2081, _2082));
                                float _2755 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
                                float _2088 = (isnan(1.0) ? _2755 : (isnan(_2755) ? 1.0 : min(_2755, 1.0))) * (((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * (isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0)))) / (((_2068 * _2068) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_39_pred = _2088 * _1946.z;
                                frontier_phi_39_pred_1 = _2088 * _1946.y;
                                frontier_phi_39_pred_2 = _2088 * _1946.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                            }
                            _2094 = frontier_phi_39_pred;
                            _2093 = frontier_phi_39_pred_1;
                            _2092 = frontier_phi_39_pred_2;
                            _1890 = _2092 + _1900;
                            _1891 = _2093 + _1901;
                            _1892 = _2094 + _1902;
                            if (_1904 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1900 = _1890;
                                _1901 = _1891;
                                _1902 = _1892;
                                _1903 = _1904;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1892;
                        frontier_phi_33_pred_1 = _1891;
                        frontier_phi_33_pred_2 = _1890;
                    }
                    _1684 = frontier_phi_33_pred;
                    _1682 = frontier_phi_33_pred_1;
                    _1680 = frontier_phi_33_pred_2;
                    uint _1797 = _1796 + 1u;
                    if (_1797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1793 = _1680;
                        _1794 = _1682;
                        _1795 = _1684;
                        _1796 = _1797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1684;
                frontier_phi_21_22_ladder_1 = _1682;
                frontier_phi_21_22_ladder_2 = _1680;
            }
            else
            {
                frontier_phi_21_22_ladder = _1575;
                frontier_phi_21_22_ladder_1 = _1573;
                frontier_phi_21_22_ladder_2 = _1571;
            }
            _1679 = frontier_phi_21_22_ladder_2;
            _1681 = frontier_phi_21_22_ladder_1;
            _1683 = frontier_phi_21_22_ladder;
        }
        float _1685 = isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0));
        _1513 = (_1685 * _1679) + _1166;
        _1515 = (_1685 * _1681) + _1168;
        _1517 = (_1685 * _1683) + _1170;
    }
    else
    {
        _1513 = _1166;
        _1515 = _1168;
        _1517 = _1170;
    }
    float _2771 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2782 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _2793 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    uint _1534 = _342 + 6u;
    float _1542 = _301 / cbSceneParam._m0[86u].x;
    float _1543 = _302 / cbSceneParam._m0[86u].y;
    vec4 _1557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1542, _1543, (log2((isnan(cbSceneParam._m0[77u].w) ? _233 : (isnan(_233) ? cbSceneParam._m0[77u].w : min(_233, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1559 = _1557.x;
    float _1560 = _1557.y;
    float _1561 = _1557.z;
    float _1562 = _1557.w;
    float _1628;
    float _1630;
    float _1632;
    float _1634;
    if (_233 > cbSceneParam._m0[78u].w)
    {
        float _1590 = isnan(_233) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _233 : min(cbSceneParam._m0[80u].w, _233));
        float _1591 = _1590 / _233;
        float _1602 = _1591 * _286;
        float _1603 = _287 * _1591;
        float _1604 = (-0.0) - _1603;
        float _1605 = _1591 * _288;
        float _1607 = (cbSceneParam._m0[77u].w * _1604) / _1590;
        float _1608 = _1607 + cbSceneParam._m0[79u].w;
        float _1609 = cbSceneParam._m0[79u].w - _1603;
        float _1615 = sqrt(((_1602 * _1602) + (_1603 * _1603)) + (_1605 * _1605));
        float _1618 = (1.0 - (cbSceneParam._m0[77u].w / _1590)) * _1615;
        float _1624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1755;
        if (abs((_1604 - _1607) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1755 = ((((_1608 > 0.0) ? exp2(_1624 * _1608) : (2.0 - exp2(_1626 * _1608))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1618;
        }
        else
        {
            float _1718 = 1.0 / cbSceneParam._m0[80u].x;
            float _1719 = isnan(_1609) ? _1608 : (isnan(_1608) ? _1609 : max(_1608, _1609));
            float _1720 = isnan(_1609) ? _1608 : (isnan(_1608) ? _1609 : min(_1608, _1609));
            float _1729 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : min(_1719, 0.0));
            float _1730 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : min(_1720, 0.0));
            _1755 = ((abs(_1615 / _1604) * cbSceneParam._m0[80u].y) * ((((_1729 - _1730) * 2.0) - ((exp2(_1624 * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)))) - exp2(_1624 * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))))) * _1718)) - ((exp2(_1626 * _1729) - exp2(_1626 * _1730)) * _1718))) + (_1618 * cbSceneParam._m0[80u].z);
        }
        vec4 _1757 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1542, _1543, 1.0), 0.0);
        float _1766 = exp2((_1755 * (-1.44269502162933349609375)) * (1.0 - _1757.w));
        float _1767 = log2(_1766);
        float _1783 = log2(_1562);
        _1628 = (exp2(_1783 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1767 * cbSceneParam._m0[78u].x)) * _1757.x) / cbSceneParam._m0[78u].x)) + _1559;
        _1630 = (exp2(_1783 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1767 * cbSceneParam._m0[78u].y)) * _1757.y) / cbSceneParam._m0[78u].y)) + _1560;
        _1632 = (exp2(_1783 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1767 * cbSceneParam._m0[78u].z)) * _1757.z) / cbSceneParam._m0[78u].z)) + _1561;
        _1634 = _1766 * _1562;
    }
    else
    {
        _1628 = _1559;
        _1630 = _1560;
        _1632 = _1561;
        _1634 = _1562;
    }
    float _1646 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1647 = _1646 == 3.0;
    float _1649 = log2(_1634);
    float _1656 = exp2(_1649 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0))) * (_1513 + ((isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0))) * _368))) + (cbPerFrame._m0[3u].x * _1353));
    float _1657 = exp2(_1649 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0))) * (_1515 + ((isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0))) * _368))) + (cbPerFrame._m0[3u].x * _1355));
    float _1658 = exp2(_1649 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0))) * (_1517 + ((isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0))) * _368))) + (cbPerFrame._m0[3u].x * _1357));
    float _1667 = (_1646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1667 * (_1647 ? _1656 : (_1656 + (cbSceneParam._m0[72u].w * _1628)));
    SV_Target.y = _1667 * (_1647 ? _1657 : (_1657 + (cbSceneParam._m0[72u].w * _1630)));
    SV_Target.z = _1667 * (_1647 ? _1658 : (_1658 + (cbSceneParam._m0[72u].w * _1632)));
    SV_Target.w = cbInstanceData._m0[_1534].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1534].w;
}


