#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D _SketchUp_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _2545;
float _2546;
float _2547;
float _2548;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    float _178;
    float _179;
    float _180;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
    }
    else
    {
        _178 = _171;
        _179 = _172;
        _180 = _173;
    }
    vec4 _194 = texture(sampler2D(_SketchUp_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = (sqrt(_194.x) * TEXCOORD.x) * sqrt(TEXCOORD.x);
    float _209 = (sqrt(_194.y) * TEXCOORD.y) * sqrt(TEXCOORD.y);
    float _211 = (sqrt(_194.z) * TEXCOORD.z) * sqrt(TEXCOORD.z);
    float _212 = _207 * _207;
    float _213 = _209 * _209;
    float _214 = _211 * _211;
    float _218 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _219 = _218 * _178;
    float _220 = _218 * _179;
    float _221 = _218 * _180;
    float _2557 = isnan(0.0) ? _212 : (isnan(_212) ? 0.0 : max(_212, 0.0));
    float _2568 = isnan(0.0) ? _213 : (isnan(_213) ? 0.0 : max(_213, 0.0));
    float _2579 = isnan(0.0) ? _214 : (isnan(_214) ? 0.0 : max(_214, 0.0));
    float _241 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _284 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _294 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _284);
    float _295 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _284);
    float _296 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _284);
    float _300 = inversesqrt(dot(vec3(_294, _295, _296), vec3(_294, _295, _296)));
    float _301 = _294 * _300;
    float _302 = _295 * _300;
    float _303 = _296 * _300;
    vec4 _308 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _310 = _308.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _429 = sqrt(((_294 * _294) + (_295 * _295)) + (_296 * _296));
        float _435 = (cbMatDynParam._m0[5u].x * _429) + cbMatDynParam._m0[5u].y;
        float _2590 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
        float _436 = isnan(1.0) ? _2590 : (isnan(_2590) ? 1.0 : min(_2590, 1.0));
        float _440 = (cbMatDynParam._m0[5u].z * _429) + cbMatDynParam._m0[5u].w;
        float _2601 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0))) - _436)) + _436) < ((_310 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _322 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _323 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _343 = fma(_221, cbSceneParam._m0[5u].z, fma(_220, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _219));
    float _346 = fma(_221, cbSceneParam._m0[6u].z, fma(_220, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _219));
    float _349 = fma(_221, cbSceneParam._m0[7u].z, fma(_220, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _219));
    uint _362 = uint(roundEven(NORMAL.w)) * 13u;
    uint _364 = _362 + 9u;
    uint _365 = _364 + uint(cbMatDynParam._m0[0u].w);
    float _371 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0)))) * cbInstanceData._m0[_365].x;
    float _372 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0)))) * cbInstanceData._m0[_365].y;
    float _373 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0)))) * cbInstanceData._m0[_365].z;
    float _2612 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _2612 : (isnan(_2612) ? 1.0 : min(_2612, 1.0));
    float _2623 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0));
    float _2634 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _2634 : (isnan(_2634) ? 1.0 : min(_2634, 1.0));
    vec4 _385 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _322, cbSceneParam._m0[86u].y * _323));
    float _388 = _385.x * TEXCOORD_4.z;
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _750;
    float _751;
    float _752;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _474 = fma(_418, cbModelParam._m0[26u].z, fma(_414, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _410));
        float _478 = fma(_418, cbModelParam._m0[27u].z, fma(_414, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _410));
        float _482 = fma(_418, cbModelParam._m0[28u].z, fma(_414, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _410));
        float _507 = _410 + _219;
        float _508 = _414 + _220;
        float _509 = _418 + _221;
        float _519 = fma(_509, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507)) - _474;
        float _520 = fma(_509, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507)) - _478;
        float _521 = fma(_509, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507)) - _482;
        float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
        float _538 = ((_525 * _519) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _539 = ((_525 * _520) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_525 * _521) / cbModelParam._m0[34u].z) + ((((((_482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_538, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _585 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _592 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _599 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _600 = _599 * (_564.x + (-0.5));
        float _601 = _599 * (_564.y + (-0.5));
        float _602 = _599 * (_564.z + (-0.5));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _607 = ((_543.x + (-0.5)) * 0.5) * _577;
        float _609 = ((_550.x + (-0.5)) * 0.5) * _585;
        float _611 = ((_557.x + (-0.5)) * 0.5) * _592;
        float _612 = dot(vec3(_607, _609, _611), vec3(_607, _609, _611));
        float _617 = (_612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_612);
        float _626 = (dot(vec3(_219, _220, _221), vec3(_617 * _607, _617 * _609, _617 * _611)) + 1.0) * 0.5;
        float _2660 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _636 = sqrt(((_609 * _609) + (_607 * _607)) + (_611 * _611)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _2671 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _637 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
        float _638 = _637 * 2.0;
        float _642 = (1.0 - _637) / (_637 + 1.0);
        float _2682 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
        float _652 = ((((1.0 - _643) * (_638 + 2.0)) * exp2(log2(isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0))) * (_638 + 1.0))) + _643) * _603;
        float _654 = ((_543.y + (-0.5)) * 0.5) * _577;
        float _656 = ((_550.y + (-0.5)) * 0.5) * _585;
        float _658 = ((_557.y + (-0.5)) * 0.5) * _592;
        float _659 = dot(vec3(_654, _656, _658), vec3(_654, _656, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _672 = (dot(vec3(_219, _220, _221), vec3(_664 * _654, _664 * _656, _664 * _658)) + 1.0) * 0.5;
        float _2693 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _681 = sqrt(((_656 * _656) + (_654 * _654)) + (_658 * _658)) / (_604 + 9.9999997473787516355514526367188e-06);
        float _2704 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0));
        float _683 = _682 * 2.0;
        float _687 = (1.0 - _682) / (_682 + 1.0);
        float _2715 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0));
        float _697 = ((((1.0 - _688) * (_683 + 2.0)) * exp2(log2(isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0))) * (_683 + 1.0))) + _688) * _604;
        float _699 = ((_543.z + (-0.5)) * 0.5) * _577;
        float _701 = ((_550.z + (-0.5)) * 0.5) * _585;
        float _703 = ((_557.z + (-0.5)) * 0.5) * _592;
        float _704 = dot(vec3(_699, _701, _703), vec3(_699, _701, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(_219, _220, _221), vec3(_709 * _699, _709 * _701, _709 * _703)) + 1.0) * 0.5;
        float _2726 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_701 * _701) + (_699 * _699)) + (_703 * _703)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _2737 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _2737 : (isnan(_2737) ? 1.0 : min(_2737, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _2748 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _2748 : (isnan(_2748) ? 1.0 : min(_2748, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _2726 : (isnan(_2726) ? 1.0 : min(_2726, 1.0))) * (_728 + 1.0))) + _733) * _605;
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
    }
    else
    {
        _750 = 0.0;
        _751 = 0.0;
        _752 = 0.0;
    }
    float _1050;
    float _1051;
    float _1052;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _781 = fma(_418, cbModelParam._m0[30u].z, fma(_414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _410));
        float _785 = fma(_418, cbModelParam._m0[31u].z, fma(_414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _410));
        float _789 = fma(_418, cbModelParam._m0[32u].z, fma(_414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _410));
        float _812 = _410 + _219;
        float _813 = _414 + _220;
        float _814 = _418 + _221;
        float _824 = fma(_814, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812)) - _781;
        float _825 = fma(_814, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812)) - _785;
        float _826 = fma(_814, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812)) - _789;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_781 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_785 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[35u].z) + ((((((_789 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _880 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _887 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _894 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _901 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_868.x + (-0.5));
        float _903 = _901 * (_868.y + (-0.5));
        float _904 = _901 * (_868.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _909 = ((_847.x + (-0.5)) * 0.5) * _880;
        float _911 = ((_854.x + (-0.5)) * 0.5) * _887;
        float _913 = ((_861.x + (-0.5)) * 0.5) * _894;
        float _914 = dot(vec3(_909, _911, _913), vec3(_909, _911, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_219, _220, _221), vec3(_919 * _909, _919 * _911, _919 * _913)) + 1.0) * 0.5;
        float _2789 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_911 * _911) + (_909 * _909)) + (_913 * _913)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _2800 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _2800 : (isnan(_2800) ? 1.0 : min(_2800, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _2811 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _2811 : (isnan(_2811) ? 1.0 : min(_2811, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _2789 : (isnan(_2789) ? 1.0 : min(_2789, 1.0))) * (_938 + 1.0))) + _943) * _905;
        float _954 = ((_847.y + (-0.5)) * 0.5) * _880;
        float _956 = ((_854.y + (-0.5)) * 0.5) * _887;
        float _958 = ((_861.y + (-0.5)) * 0.5) * _894;
        float _959 = dot(vec3(_954, _956, _958), vec3(_954, _956, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_219, _220, _221), vec3(_964 * _954, _964 * _956, _964 * _958)) + 1.0) * 0.5;
        float _2822 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_956 * _956) + (_954 * _954)) + (_958 * _958)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _2833 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _2844 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0))) * (_983 + 1.0))) + _988) * _906;
        float _999 = ((_847.z + (-0.5)) * 0.5) * _880;
        float _1001 = ((_854.z + (-0.5)) * 0.5) * _887;
        float _1003 = ((_861.z + (-0.5)) * 0.5) * _894;
        float _1004 = dot(vec3(_999, _1001, _1003), vec3(_999, _1001, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_219, _220, _221), vec3(_1009 * _999, _1009 * _1001, _1009 * _1003)) + 1.0) * 0.5;
        float _2855 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1001 * _1001) + (_999 * _999)) + (_1003 * _1003)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _2866 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _2877 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0))) * (_1028 + 1.0))) + _1033) * _907;
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = 0.0;
        _1051 = 0.0;
        _1052 = 0.0;
    }
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _750)) + _750;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _751)) + _751;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _752)) + _752;
    float _1085 = fma(_1064, cbSceneParam._m0[89u].z, fma(_1063, cbSceneParam._m0[89u].y, _1062 * cbSceneParam._m0[89u].x));
    float _1088 = fma(_1064, cbSceneParam._m0[90u].z, fma(_1063, cbSceneParam._m0[90u].y, _1062 * cbSceneParam._m0[90u].x));
    float _1091 = fma(_1064, cbSceneParam._m0[91u].z, fma(_1063, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1062));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1141 = _1128 / _1140;
    float _1142 = _1132 / _1140;
    float _1143 = _1136 / _1140;
    float _1280;
    float _1281;
    float _1282;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1160 = ((uint(_1143 > cbSceneParam._m0[59u].y) + uint(_1143 > cbSceneParam._m0[59u].x)) + uint(_1143 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1161 = _1160 + 43u;
        uint _1169 = _1160 + 44u;
        uint _1177 = _1160 + 45u;
        uint _1185 = _1160 + 46u;
        float _1196 = fma(_1140, cbSceneParam._m0[_1161].w, fma(_1136, cbSceneParam._m0[_1161].z, fma(_1132, cbSceneParam._m0[_1161].y, _1128 * cbSceneParam._m0[_1161].x)));
        float _1200 = fma(_1140, cbSceneParam._m0[_1169].w, fma(_1136, cbSceneParam._m0[_1169].z, fma(_1132, cbSceneParam._m0[_1169].y, _1128 * cbSceneParam._m0[_1169].x)));
        float _1208 = fma(_1140, cbSceneParam._m0[_1185].w, fma(_1136, cbSceneParam._m0[_1185].z, fma(_1132, cbSceneParam._m0[_1185].y, _1128 * cbSceneParam._m0[_1185].x)));
        float _1213 = cbSceneParam._m0[33u].z * _1208;
        float _1215 = cbSceneParam._m0[33u].w * _1208;
        float _1218 = fma(_1140, cbSceneParam._m0[_1177].w, fma(_1136, cbSceneParam._m0[_1177].z, fma(_1132, cbSceneParam._m0[_1177].y, _1128 * cbSceneParam._m0[_1177].x))) / _1208;
        float _1266 = (cbSceneParam._m0[33u].x - sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143))) * cbSceneParam._m0[33u].y;
        float _2918 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1273 = (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1213 + _1196) / _1208, (_1215 + _1200) / _1208), _1218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1215 + _1196) / _1208, (_1200 - _1213) / _1208), _1218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1196 - _1213) / _1208, (_1200 - _1215) / _1208), _1218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1196 - _1215) / _1208, (_1213 + _1200) / _1208), _1218), 0.0)).x), vec4(0.25)));
        _1280 = 1.0 - (_1273 * cbSceneParam._m0[34u].x);
        _1281 = 1.0 - (_1273 * cbSceneParam._m0[34u].y);
        _1282 = 1.0 - (_1273 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1280 = 1.0;
        _1281 = 1.0;
        _1282 = 1.0;
    }
    float _1338;
    float _1340;
    float _1342;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1326 = fma(_1140, cbSceneParam._m0[63u].w, fma(_1136, cbSceneParam._m0[63u].z, fma(_1132, cbSceneParam._m0[63u].y, _1128 * cbSceneParam._m0[63u].x)));
        float _1327 = fma(_1140, cbSceneParam._m0[60u].w, fma(_1136, cbSceneParam._m0[60u].z, fma(_1132, cbSceneParam._m0[60u].y, _1128 * cbSceneParam._m0[60u].x))) / _1326;
        float _1328 = fma(_1140, cbSceneParam._m0[61u].w, fma(_1136, cbSceneParam._m0[61u].z, fma(_1132, cbSceneParam._m0[61u].y, _1128 * cbSceneParam._m0[61u].x))) / _1326;
        float frontier_phi_13_12_ladder;
        float frontier_phi_13_12_ladder_1;
        float frontier_phi_13_12_ladder_2;
        if ((((_1327 >= cbSceneParam._m0[64u].x) && (_1328 >= cbSceneParam._m0[64u].y)) && (_1327 <= cbSceneParam._m0[64u].z)) && (_1328 <= cbSceneParam._m0[64u].w))
        {
            float _1436 = fma(_1140, cbSceneParam._m0[62u].w, fma(_1136, cbSceneParam._m0[62u].z, fma(_1132, cbSceneParam._m0[62u].y, _1128 * cbSceneParam._m0[62u].x))) / _1326;
            float _1440 = isnan(cbSceneParam._m0[41u].w) ? _1436 : (isnan(_1436) ? cbSceneParam._m0[41u].w : max(_1436, cbSceneParam._m0[41u].w));
            float _1483 = (cbSceneParam._m0[33u].x - sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143))) * cbSceneParam._m0[33u].y;
            float _2934 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
            float _1490 = (isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1327, cbSceneParam._m0[33u].w + _1328), _1440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1327, _1328 - cbSceneParam._m0[33u].z), _1440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1327 - cbSceneParam._m0[33u].z, _1328 - cbSceneParam._m0[33u].w), _1440), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1327 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1328), _1440), 0.0)).x), vec4(0.25)));
            float _1494 = 1.0 - (_1490 * cbSceneParam._m0[34u].x);
            float _1495 = 1.0 - (_1490 * cbSceneParam._m0[34u].y);
            float _1496 = 1.0 - (_1490 * cbSceneParam._m0[34u].z);
            frontier_phi_13_12_ladder = isnan(_1496) ? _1282 : (isnan(_1282) ? _1496 : min(_1282, _1496));
            frontier_phi_13_12_ladder_1 = isnan(_1495) ? _1281 : (isnan(_1281) ? _1495 : min(_1281, _1495));
            frontier_phi_13_12_ladder_2 = isnan(_1494) ? _1280 : (isnan(_1280) ? _1494 : min(_1280, _1494));
        }
        else
        {
            frontier_phi_13_12_ladder = _1282;
            frontier_phi_13_12_ladder_1 = _1281;
            frontier_phi_13_12_ladder_2 = _1280;
        }
        _1338 = frontier_phi_13_12_ladder_2;
        _1340 = frontier_phi_13_12_ladder_1;
        _1342 = frontier_phi_13_12_ladder;
    }
    else
    {
        _1338 = _1280;
        _1340 = _1281;
        _1342 = _1282;
    }
    uvec4 _1347 = floatBitsToUint(cbInstanceData._m0[_362 + 5u]);
    uint _1349 = _1347.x * 14u;
    uint _1350 = _1349 + 13u;
    float _1357 = _388 + (-1.0);
    float _1363 = (cbLight._m0[_1350].x * _1357) + 1.0;
    float _1364 = (cbLight._m0[_1350].y * _1357) + 1.0;
    float _1365 = (cbLight._m0[_1350].z * _1357) + 1.0;
    float _1366 = (cbLight._m0[_1350].w * _1357) + 1.0;
    uint _1367 = _1349 + 5u;
    float _1373 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
    uint _1377 = _1349 + 4u;
    float _1387 = isnan(1.0) ? _1363 : (isnan(_1363) ? 1.0 : min(_1363, 1.0));
    uint _1391 = _1349 | 1u;
    float _1402 = dot(vec3(cbLight._m0[_1349].xyz), vec3(_219, _220, _221));
    float _1405 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_219, _220, _221));
    float _2970 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
    float _2981 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1410 = (isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) * 0.3183098733425140380859375;
    float _1412 = (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0))) * 0.3183098733425140380859375;
    float _1419 = ((cbLight._m0[_1367].x * _1373) * _1412) + (((cbLight._m0[_1377].x * _1338) * _1387) * _1410);
    float _1420 = ((_1373 * cbLight._m0[_1367].y) * _1412) + (((cbLight._m0[_1377].y * _1340) * _1387) * _1410);
    float _1421 = ((_1373 * cbLight._m0[_1367].z) * _1412) + (((cbLight._m0[_1377].z * _1342) * _1387) * _1410);
    uvec4 _1425 = floatBitsToUint(cbLight._m0[_1349 + 12u]);
    bool _1427 = _1425.x == 0u;
    float _1497;
    float _1499;
    float _1501;
    if (_1427)
    {
        _1497 = _1419;
        _1499 = _1420;
        _1501 = _1421;
    }
    else
    {
        uint _1505 = _1349 + 6u;
        float _1521 = (dot(vec3(cbLight._m0[_1349 + 2u].xyz), vec3(_219, _220, _221)) * 0.5) + 0.5;
        float _1522 = _1521 * _1521;
        float _2992 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _1524 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
        _1497 = (((cbLight._m0[_1505].x * 0.3183098733425140380859375) * _1523) * _1524) + _1419;
        _1499 = (((cbLight._m0[_1505].y * 0.3183098733425140380859375) * _1523) * _1524) + _1420;
        _1501 = (((cbLight._m0[_1505].z * 0.3183098733425140380859375) * _1523) * _1524) + _1421;
    }
    bool _1504 = _1425.y == 0u;
    float _1534;
    float _1536;
    float _1538;
    if (_1504)
    {
        _1534 = _1497;
        _1536 = _1499;
        _1538 = _1501;
    }
    else
    {
        uint _1639 = _1349 + 7u;
        float _1655 = (dot(vec3(cbLight._m0[_1349 + 3u].xyz), vec3(_219, _220, _221)) * 0.5) + 0.5;
        float _1656 = _1655 * _1655;
        float _3008 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _1658 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
        _1534 = (((cbLight._m0[_1639].x * 0.3183098733425140380859375) * _1657) * _1658) + _1497;
        _1536 = (((cbLight._m0[_1639].y * 0.3183098733425140380859375) * _1657) * _1658) + _1499;
        _1538 = (((cbLight._m0[_1639].z * 0.3183098733425140380859375) * _1657) * _1658) + _1501;
    }
    uint _1540 = _1349 + 8u;
    float _1546 = cbLight._m0[_1349].x + _301;
    float _1547 = cbLight._m0[_1349].y + _302;
    float _1548 = cbLight._m0[_1349].z + _303;
    float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
    float _1556 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1349].xyz));
    float _3024 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1559 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    float _1560 = dot(vec3(_219, _220, _221), vec3(_301, _302, _303));
    float _3035 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1563 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    float _1564 = dot(vec3(cbLight._m0[_1349].xyz), vec3(_1546 * _1552, _1547 * _1552, _1548 * _1552));
    float _3046 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _1572 = exp2(log2(1.0 - (isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0)))) * 5.0);
    float _1577 = (0.5 / ((_1559 + 9.9999999392252902907785028219223e-09) + _1563)) * _1559;
    float _3057 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1579 = (isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * 0.31831014156341552734375;
    uint _1593 = _1349 + 9u;
    float _1599 = cbLight._m0[_1391].x + _301;
    float _1600 = cbLight._m0[_1391].y + _302;
    float _1601 = cbLight._m0[_1391].z + _303;
    float _1605 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
    float _1609 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1391].xyz));
    float _3068 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1612 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
    float _1613 = dot(vec3(cbLight._m0[_1391].xyz), vec3(_1599 * _1605, _1600 * _1605, _1601 * _1605));
    float _3079 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1620 = exp2(log2(1.0 - (isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0)))) * 5.0);
    float _1624 = (0.5 / ((_1612 + 9.9999999392252902907785028219223e-09) + _1563)) * _1612;
    float _3090 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1626 = (isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * 0.31831014156341552734375;
    float _1636 = (((_1620 * cbLight._m0[_1593].x) * _1626) * _1373) + ((((cbLight._m0[_1540].x * _1338) * _1572) * _1579) * _1387);
    float _1637 = (((_1620 * cbLight._m0[_1593].y) * _1626) * _1373) + ((((cbLight._m0[_1540].y * _1340) * _1572) * _1579) * _1387);
    float _1638 = (((_1620 * cbLight._m0[_1593].z) * _1626) * _1373) + ((((cbLight._m0[_1540].z * _1342) * _1572) * _1579) * _1387);
    float _1668;
    float _1670;
    float _1672;
    if (_1427)
    {
        _1668 = _1636;
        _1670 = _1637;
        _1672 = _1638;
    }
    else
    {
        uint _1674 = _1349 + 10u;
        uint _1680 = _1349 + 2u;
        float _1686 = cbLight._m0[_1680].x + _301;
        float _1687 = cbLight._m0[_1680].y + _302;
        float _1688 = cbLight._m0[_1680].z + _303;
        float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
        float _1696 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1680].xyz));
        float _3101 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1699 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _1700 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1686 * _1692, _1687 * _1692, _1688 * _1692));
        float _3112 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1707 = exp2(log2(1.0 - (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0)))) * 5.0);
        float _1711 = (0.5 / ((_1699 + 9.9999999392252902907785028219223e-09) + _1563)) * _1699;
        float _3123 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1713 = (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))) * 0.31831014156341552734375;
        float _1714 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
        _1668 = (((_1707 * cbLight._m0[_1674].x) * _1713) * _1714) + _1636;
        _1670 = (((_1707 * cbLight._m0[_1674].y) * _1713) * _1714) + _1637;
        _1672 = (((_1707 * cbLight._m0[_1674].z) * _1713) * _1714) + _1638;
    }
    float _1724;
    float _1726;
    float _1728;
    if (_1504)
    {
        _1724 = _1668;
        _1726 = _1670;
        _1728 = _1672;
    }
    else
    {
        uint _1735 = _1349 + 11u;
        uint _1741 = _1349 + 3u;
        float _1747 = cbLight._m0[_1741].x + _301;
        float _1748 = cbLight._m0[_1741].y + _302;
        float _1749 = cbLight._m0[_1741].z + _303;
        float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
        float _1757 = dot(vec3(_219, _220, _221), vec3(cbLight._m0[_1741].xyz));
        float _3139 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1760 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _1761 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1747 * _1753, _1748 * _1753, _1749 * _1753));
        float _3150 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) * 5.0);
        float _1772 = (0.5 / ((_1760 + 9.9999999392252902907785028219223e-09) + _1563)) * _1760;
        float _3161 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1774 = (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0))) * 0.31831014156341552734375;
        float _1775 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
        _1724 = (((_1768 * cbLight._m0[_1735].x) * _1774) * _1775) + _1668;
        _1726 = (((_1768 * cbLight._m0[_1735].y) * _1774) * _1775) + _1670;
        _1728 = (((_1768 * cbLight._m0[_1735].z) * _1774) * _1775) + _1672;
    }
    float _1840;
    float _1842;
    float _1844;
    if (_1347.y == 0u)
    {
        uvec4 _1796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1797 = _1796.x;
        uint _1808 = uint((float(_1796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _323) / _1797))) + floor(float(uint(cbSceneParam._m0[85u].x * _322) / _1797)));
        float _1818 = (log2(_1143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1819 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        uint _1822 = uint(isnan(14.0) ? _1819 : (isnan(_1819) ? 14.0 : min(_1819, 14.0)));
        uvec4 _1827 = texelFetch(g_lightClusterGridBuffer, int(((_1822 << 2u) + (_1808 << 6u)) >> 2u));
        uint _1828 = _1827.x;
        uint _1829 = _1796.z;
        float _1898;
        float _1900;
        float _1902;
        if (((((1u << ((_1829 >> 4u) & 15u)) + 4294967295u) & _1828) == 0u) || ((_1829 & 240u) == 0u))
        {
            _1898 = 0.0;
            _1900 = 0.0;
            _1902 = 0.0;
        }
        else
        {
            float _1899;
            float _1901;
            float _1903;
            float _2028 = 0.0;
            float _2029 = 0.0;
            float _2030 = 0.0;
            uint _2031 = 0u;
            uint _2040;
            bool _2041;
            for (;;)
            {
                _2040 = texelFetch(g_lightClassification, int((((_1822 << 5u) + (_1808 << 9u)) + (_2031 << 2u)) >> 2u)).x;
                _2041 = _2040 == 0u;
                float frontier_phi_37_pred;
                float frontier_phi_37_pred_1;
                float frontier_phi_37_pred_2;
                if (_2041)
                {
                    frontier_phi_37_pred = _2030;
                    frontier_phi_37_pred_1 = _2029;
                    frontier_phi_37_pred_2 = _2028;
                }
                else
                {
                    float _2164;
                    float _2165;
                    float _2166;
                    uint _2167;
                    _2164 = _2028;
                    _2165 = _2029;
                    _2166 = _2030;
                    _2167 = _2040;
                    float _2097;
                    float _2098;
                    float _2099;
                    for (;;)
                    {
                        uint _2171 = uint(findLSB(_2167)) + (_2031 << 5u);
                        uint _2168 = (_2167 + 4294967295u) & _2167;
                        uint _2173 = _2171 * 48u;
                        vec4 _2187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2173)).x, texelFetch(g_PointLightRenderingBuffer, int(_2173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2173 + 3u)).x));
                        uint _2193 = (_2171 * 48u) + 4u;
                        vec4 _2206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2193)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2193 + 3u)).x));
                        float _2211 = _2187.x - _1141;
                        float _2212 = _2187.y - _1142;
                        float _2213 = _2187.z - _1143;
                        float _2214 = dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213));
                        float _2217 = inversesqrt(_2214);
                        float _2226 = 1.0 - (_2214 * _2187.w);
                        float _3187 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
                        float _2228 = sqrt(_2214) * _2206.w;
                        float _2231 = 1.39999997615814208984375 / (_2228 + 1.39999997615814208984375);
                        float _2232 = _2231 * _2231;
                        float _2235 = ((1.0 - _2232) * dot(vec3(_343, _346, _349), vec3(_2217 * _2211, _2217 * _2212, _2217 * _2213))) + _2232;
                        float _2242 = ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) / (((_2228 * _2228) * 0.699999988079071044921875) + 1.0);
                        _2097 = (_2242 * _2206.x) + _2164;
                        _2098 = (_2242 * _2206.y) + _2165;
                        _2099 = (_2242 * _2206.z) + _2166;
                        if (_2168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2164 = _2097;
                            _2165 = _2098;
                            _2166 = _2099;
                            _2167 = _2168;
                        }
                    }
                    frontier_phi_37_pred = _2099;
                    frontier_phi_37_pred_1 = _2098;
                    frontier_phi_37_pred_2 = _2097;
                }
                _1903 = frontier_phi_37_pred;
                _1901 = frontier_phi_37_pred_1;
                _1899 = frontier_phi_37_pred_2;
                uint _2032 = _2031 + 1u;
                if (_2032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2028 = _1899;
                    _2029 = _1901;
                    _2030 = _1903;
                    _2031 = _2032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1898 = _1899;
            _1900 = _1901;
            _1902 = _1903;
        }
        uvec4 _1906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1907 = _1906.z;
        uint _1909 = (_1907 >> 8u) & 15u;
        float _2015;
        float _2017;
        float _2019;
        if (((4294967295u << _1909) & _1828) == 0u)
        {
            _2015 = _1898;
            _2017 = _1900;
            _2019 = _1902;
        }
        else
        {
            float frontier_phi_29_30_ladder;
            float frontier_phi_29_30_ladder_1;
            float frontier_phi_29_30_ladder_2;
            if (_1909 < ((_1907 >> 12u) & 15u))
            {
                float _2016;
                float _2018;
                float _2020;
                float _2150 = _1898;
                float _2151 = _1900;
                float _2152 = _1902;
                uint _2153 = _1909;
                uint _2162;
                bool _2163;
                for (;;)
                {
                    _2162 = texelFetch(g_lightClassification, int((((_1822 << 5u) + (_1808 << 9u)) + (_2153 << 2u)) >> 2u)).x;
                    _2163 = _2162 == 0u;
                    float frontier_phi_48_pred;
                    float frontier_phi_48_pred_1;
                    float frontier_phi_48_pred_2;
                    if (_2163)
                    {
                        frontier_phi_48_pred = _2152;
                        frontier_phi_48_pred_1 = _2151;
                        frontier_phi_48_pred_2 = _2150;
                    }
                    else
                    {
                        float _2256;
                        float _2257;
                        float _2258;
                        float _2458;
                        float _2459;
                        float _2460;
                        float _2266 = _2150;
                        float _2267 = _2151;
                        float _2268 = _2152;
                        uint _2269 = _2162;
                        uint _2270;
                        vec4 _2296;
                        float _2297;
                        vec4 _2312;
                        vec4 _2328;
                        vec4 _2344;
                        float _2391;
                        bool _2392;
                        for (;;)
                        {
                            uint _2280 = ((_2153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2269));
                            _2270 = (_2269 + 4294967295u) & _2269;
                            uint _2282 = _2280 * 40u;
                            _2296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 3u)).x));
                            _2297 = _2296.w;
                            uint _2299 = (_2280 * 40u) + 4u;
                            _2312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2299 + 3u)).x));
                            uint _2315 = (_2280 * 40u) + 16u;
                            _2328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2315 + 3u)).x));
                            uint _2331 = (_2280 * 40u) + 20u;
                            _2344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2331 + 3u)).x));
                            uint _2347 = (_2280 * 40u) + 24u;
                            vec4 _2360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2347 + 3u)).x));
                            uint _2366 = (_2280 * 40u) + 28u;
                            vec4 _2379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2366 + 3u)).x));
                            _2391 = fma(_1143, _2379.z, fma(_1142, _2379.y, _2379.x * _1141)) + _2379.w;
                            _2392 = !((fma(_1143, _2360.z, fma(_1142, _2360.y, _2360.x * _1141)) + _2360.w) <= 0.0);
                            float frontier_phi_54_pred;
                            float frontier_phi_54_pred_1;
                            float frontier_phi_54_pred_2;
                            if (_2392)
                            {
                                float _2416 = _2296.x - _1141;
                                float _2417 = _2296.y - _1142;
                                float _2418 = _2296.z - _1143;
                                float _2419 = dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418));
                                float _2422 = inversesqrt(_2419);
                                float _2429 = 1.0 - (_2419 / (_2297 * _2297));
                                float _3203 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
                                float _2434 = sqrt(_2419) * _2312.w;
                                float _2436 = 1.39999997615814208984375 / (_2434 + 1.39999997615814208984375);
                                float _2437 = _2436 * _2436;
                                float _2440 = ((1.0 - _2437) * dot(vec3(_2422 * _2416, _2422 * _2417, _2422 * _2418), vec3(_343, _346, _349))) + _2437;
                                float _2447 = (fma(_1143, _2328.z, fma(_1142, _2328.y, _2328.x * _1141)) + _2328.w) / _2391;
                                float _2448 = (fma(_1143, _2344.z, fma(_1142, _2344.y, _2344.x * _1141)) + _2344.w) / _2391;
                                float _2452 = 1.0 - dot(vec2(_2447, _2448), vec2(_2447, _2448));
                                float _3219 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                                float _2454 = (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))) * (((isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0))) * (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0)))) / (((_2434 * _2434) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_54_pred = _2454 * _2312.x;
                                frontier_phi_54_pred_1 = _2454 * _2312.y;
                                frontier_phi_54_pred_2 = _2454 * _2312.z;
                            }
                            else
                            {
                                frontier_phi_54_pred = 0.0;
                                frontier_phi_54_pred_1 = 0.0;
                                frontier_phi_54_pred_2 = 0.0;
                            }
                            _2458 = frontier_phi_54_pred;
                            _2459 = frontier_phi_54_pred_1;
                            _2460 = frontier_phi_54_pred_2;
                            _2256 = _2458 + _2266;
                            _2257 = _2459 + _2267;
                            _2258 = _2460 + _2268;
                            if (_2270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2266 = _2256;
                                _2267 = _2257;
                                _2268 = _2258;
                                _2269 = _2270;
                                continue;
                            }
                        }
                        frontier_phi_48_pred = _2258;
                        frontier_phi_48_pred_1 = _2257;
                        frontier_phi_48_pred_2 = _2256;
                    }
                    _2020 = frontier_phi_48_pred;
                    _2018 = frontier_phi_48_pred_1;
                    _2016 = frontier_phi_48_pred_2;
                    uint _2154 = _2153 + 1u;
                    if (_2154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2150 = _2016;
                        _2151 = _2018;
                        _2152 = _2020;
                        _2153 = _2154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_29_30_ladder = _2020;
                frontier_phi_29_30_ladder_1 = _2018;
                frontier_phi_29_30_ladder_2 = _2016;
            }
            else
            {
                frontier_phi_29_30_ladder = _1902;
                frontier_phi_29_30_ladder_1 = _1900;
                frontier_phi_29_30_ladder_2 = _1898;
            }
            _2015 = frontier_phi_29_30_ladder_2;
            _2017 = frontier_phi_29_30_ladder_1;
            _2019 = frontier_phi_29_30_ladder;
        }
        float _2021 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
        _1840 = (_2021 * _2015) + _1534;
        _1842 = (_2021 * _2017) + _1536;
        _1844 = (_2021 * _2019) + _1538;
    }
    else
    {
        _1840 = _1534;
        _1842 = _1536;
        _1844 = _1538;
    }
    float _3235 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3246 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3257 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _1858 = ((isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_1840 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _388))) + (cbPerFrame._m0[3u].x * _1724);
    float _1859 = ((isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_1842 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _388))) + (cbPerFrame._m0[3u].x * _1726);
    float _1860 = ((isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_1844 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _388))) + (cbPerFrame._m0[3u].x * _1728);
    uint _1861 = _362 + 6u;
    float _1869 = _322 / cbSceneParam._m0[86u].x;
    float _1870 = _323 / cbSceneParam._m0[86u].y;
    vec4 _1884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1869, _1870, (log2((isnan(cbSceneParam._m0[77u].w) ? _241 : (isnan(_241) ? cbSceneParam._m0[77u].w : min(_241, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1886 = _1884.x;
    float _1887 = _1884.y;
    float _1888 = _1884.z;
    float _1889 = _1884.w;
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    if (_241 > cbSceneParam._m0[78u].w)
    {
        float _1917 = isnan(_241) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _241 : min(cbSceneParam._m0[80u].w, _241));
        float _1918 = _1917 / _241;
        float _1929 = _1918 * _294;
        float _1930 = _295 * _1918;
        float _1931 = (-0.0) - _1930;
        float _1932 = _1918 * _296;
        float _1934 = (cbSceneParam._m0[77u].w * _1931) / _1917;
        float _1935 = _1934 + cbSceneParam._m0[79u].w;
        float _1936 = cbSceneParam._m0[79u].w - _1930;
        float _1942 = sqrt(((_1929 * _1929) + (_1930 * _1930)) + (_1932 * _1932));
        float _1945 = (1.0 - (cbSceneParam._m0[77u].w / _1917)) * _1942;
        float _1951 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1953 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2107;
        if (abs((_1931 - _1934) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2107 = ((((_1935 > 0.0) ? exp2(_1951 * _1935) : (2.0 - exp2(_1953 * _1935))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1945;
        }
        else
        {
            float _2054 = 1.0 / cbSceneParam._m0[80u].x;
            float _2055 = isnan(_1936) ? _1935 : (isnan(_1935) ? _1936 : max(_1935, _1936));
            float _2056 = isnan(_1936) ? _1935 : (isnan(_1935) ? _1936 : min(_1935, _1936));
            float _2065 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : min(_2055, 0.0));
            float _2066 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : min(_2056, 0.0));
            _2107 = ((abs(_1942 / _1931) * cbSceneParam._m0[80u].y) * ((((_2065 - _2066) * 2.0) - ((exp2(_1951 * (isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)))) - exp2(_1951 * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))))) * _2054)) - ((exp2(_1953 * _2065) - exp2(_1953 * _2066)) * _2054))) + (_1945 * cbSceneParam._m0[80u].z);
        }
        vec4 _2109 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1869, _1870, 1.0), 0.0);
        float _2118 = exp2((_2107 * (-1.44269502162933349609375)) * (1.0 - _2109.w));
        float _2119 = log2(_2118);
        float _2135 = log2(_1889);
        _1955 = (exp2(_2135 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2119 * cbSceneParam._m0[78u].x)) * _2109.x) / cbSceneParam._m0[78u].x)) + _1886;
        _1957 = (exp2(_2135 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2119 * cbSceneParam._m0[78u].y)) * _2109.y) / cbSceneParam._m0[78u].y)) + _1887;
        _1959 = (exp2(_2135 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2119 * cbSceneParam._m0[78u].z)) * _2109.z) / cbSceneParam._m0[78u].z)) + _1888;
        _1961 = _2118 * _1889;
    }
    else
    {
        _1955 = _1886;
        _1957 = _1887;
        _1959 = _1888;
        _1961 = _1889;
    }
    bool _2145;
    vec4 _1971;
    vec4 _1994;
    float _1996;
    float _2000;
    float _2001;
    float _2002;
    float _2003;
    bool _2014;
    for (;;)
    {
        _1971 = cbMatDynParam._m0[0u];
        float _1973 = roundEven(_1971.y);
        bool _1974 = _1973 == 3.0;
        float _1976 = log2(_1961);
        float _1983 = exp2(_1976 * cbSceneParam._m0[78u].x) * _1858;
        float _1984 = exp2(_1976 * cbSceneParam._m0[78u].y) * _1859;
        float _1985 = exp2(_1976 * cbSceneParam._m0[78u].z) * _1860;
        float _1992 = _310 + (-0.5);
        _1994 = cbMtdParam._m0[1u];
        _1996 = _1994.y * _1992;
        float _1999 = (_1973 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2000 = _1999 * (_1974 ? _1983 : (_1983 + (cbSceneParam._m0[72u].w * _1955)));
        _2001 = _1999 * (_1974 ? _1984 : (_1984 + (cbSceneParam._m0[72u].w * _1957)));
        _2002 = _1999 * (_1974 ? _1985 : (_1985 + (cbSceneParam._m0[72u].w * _1959)));
        _2003 = _1992 * 0.999000012874603271484375;
        _2014 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2014)
        {
            if ((cbInstanceData._m0[_362 + 7u].x + _2003) < 0.5)
            {
                _2145 = true;
                break;
            }
        }
        uint _2089 = _364 + uint(_1971.w);
        if ((cbInstanceData._m0[_2089].w < 1.0) && ((cbInstanceData._m0[_2089].w + _2003) < 0.5))
        {
            _2145 = true;
            break;
        }
        if ((_1996 + 1.0) < _1994.x)
        {
            _2145 = true;
            break;
        }
        _2145 = false;
        break;
    }
    float _2247;
    if (_2145)
    {
        discard_state = true;
        _2247 = 0.0;
    }
    else
    {
        _2247 = cbInstanceData._m0[_1861].w;
    }
    SV_Target.x = _2000;
    SV_Target.y = _2001;
    SV_Target.z = _2002;
    SV_Target.w = _2247;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1861].w;
    discard_exit();
}


