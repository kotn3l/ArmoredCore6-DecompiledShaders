#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D _SketchUp_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _165;
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
    }
    else
    {
        _172 = _165;
        _173 = _166;
        _174 = _167;
    }
    vec4 _188 = texture(sampler2D(_SketchUp_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = (sqrt(_188.x) * TEXCOORD.x) * sqrt(TEXCOORD.x);
    float _203 = (sqrt(_188.y) * TEXCOORD.y) * sqrt(TEXCOORD.y);
    float _205 = (sqrt(_188.z) * TEXCOORD.z) * sqrt(TEXCOORD.z);
    float _206 = _201 * _201;
    float _207 = _203 * _203;
    float _208 = _205 * _205;
    float _212 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _213 = _212 * _172;
    float _214 = _212 * _173;
    float _215 = _212 * _174;
    float _2183 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _2194 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _2205 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _235 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _278);
    float _289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _278);
    float _290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _278);
    float _294 = inversesqrt(dot(vec3(_288, _289, _290), vec3(_288, _289, _290)));
    float _295 = _288 * _294;
    float _296 = _289 * _294;
    float _297 = _290 * _294;
    float _303 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _304 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _325 = fma(_215, cbSceneParam._m0[5u].z, fma(_214, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _213));
    float _328 = fma(_215, cbSceneParam._m0[6u].z, fma(_214, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _213));
    float _331 = fma(_215, cbSceneParam._m0[7u].z, fma(_214, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _213));
    uint _344 = uint(roundEven(NORMAL.w)) * 13u;
    uint _347 = (_344 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _353 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0)))) * cbInstanceData._m0[_347].x;
    float _354 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0)))) * cbInstanceData._m0[_347].y;
    float _355 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0)))) * cbInstanceData._m0[_347].z;
    float _2216 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _356 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    float _2227 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _357 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    float _2238 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _358 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    vec4 _367 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _303, cbSceneParam._m0[86u].y * _304));
    float _370 = _367.x * TEXCOORD_4.z;
    float _392 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _396 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _400 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _703;
    float _704;
    float _705;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _427 = fma(_400, cbModelParam._m0[26u].z, fma(_396, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _392));
        float _431 = fma(_400, cbModelParam._m0[27u].z, fma(_396, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _392));
        float _435 = fma(_400, cbModelParam._m0[28u].z, fma(_396, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _392));
        float _460 = _392 + _213;
        float _461 = _396 + _214;
        float _462 = _400 + _215;
        float _472 = fma(_462, cbModelParam._m0[26u].z, fma(_461, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _460)) - _427;
        float _473 = fma(_462, cbModelParam._m0[27u].z, fma(_461, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _460)) - _431;
        float _474 = fma(_462, cbModelParam._m0[28u].z, fma(_461, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _460)) - _435;
        float _478 = inversesqrt(dot(vec3(_472, _473, _474), vec3(_472, _473, _474)));
        float _491 = ((_478 * _472) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_427 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _492 = ((_478 * _473) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_431 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _493 = ((_478 * _474) / cbModelParam._m0[34u].z) + ((((((_435 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _496 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_491, _492, _493), 0.0);
        vec4 _503 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_491, _492, _493), 0.0);
        vec4 _510 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_491, _492, _493), 0.0);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_491, _492, _493), 0.0);
        float _530 = exp2((_496.w + (-0.5)) * 20.0) * 2.0;
        float _538 = exp2((_503.w + (-0.5)) * 20.0) * 2.0;
        float _545 = exp2((_510.w + (-0.5)) * 20.0) * 2.0;
        float _552 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _553 = _552 * (_517.x + (-0.5));
        float _554 = _552 * (_517.y + (-0.5));
        float _555 = _552 * (_517.z + (-0.5));
        float _556 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _557 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        float _558 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
        float _560 = ((_496.x + (-0.5)) * 0.5) * _530;
        float _562 = ((_503.x + (-0.5)) * 0.5) * _538;
        float _564 = ((_510.x + (-0.5)) * 0.5) * _545;
        float _565 = dot(vec3(_560, _562, _564), vec3(_560, _562, _564));
        float _570 = (_565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_565);
        float _579 = (dot(vec3(_213, _214, _215), vec3(_570 * _560, _570 * _562, _570 * _564)) + 1.0) * 0.5;
        float _2264 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        float _589 = sqrt(((_562 * _562) + (_560 * _560)) + (_564 * _564)) / (_556 + 9.9999997473787516355514526367188e-06);
        float _2275 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _590 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        float _591 = _590 * 2.0;
        float _595 = (1.0 - _590) / (_590 + 1.0);
        float _2286 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        float _605 = ((((1.0 - _596) * (_591 + 2.0)) * exp2(log2(isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0))) * (_591 + 1.0))) + _596) * _556;
        float _607 = ((_496.y + (-0.5)) * 0.5) * _530;
        float _609 = ((_503.y + (-0.5)) * 0.5) * _538;
        float _611 = ((_510.y + (-0.5)) * 0.5) * _545;
        float _612 = dot(vec3(_607, _609, _611), vec3(_607, _609, _611));
        float _617 = (_612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_612);
        float _625 = (dot(vec3(_213, _214, _215), vec3(_617 * _607, _617 * _609, _617 * _611)) + 1.0) * 0.5;
        float _2297 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _634 = sqrt(((_609 * _609) + (_607 * _607)) + (_611 * _611)) / (_557 + 9.9999997473787516355514526367188e-06);
        float _2308 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _635 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        float _636 = _635 * 2.0;
        float _640 = (1.0 - _635) / (_635 + 1.0);
        float _2319 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _641 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        float _650 = ((((1.0 - _641) * (_636 + 2.0)) * exp2(log2(isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0))) * (_636 + 1.0))) + _641) * _557;
        float _652 = ((_496.z + (-0.5)) * 0.5) * _530;
        float _654 = ((_503.z + (-0.5)) * 0.5) * _538;
        float _656 = ((_510.z + (-0.5)) * 0.5) * _545;
        float _657 = dot(vec3(_652, _654, _656), vec3(_652, _654, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_213, _214, _215), vec3(_662 * _652, _662 * _654, _662 * _656)) + 1.0) * 0.5;
        float _2330 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_654 * _654) + (_652 * _652)) + (_656 * _656)) / (_558 + 9.9999997473787516355514526367188e-06);
        float _2341 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _2352 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0))) * (_681 + 1.0))) + _686) * _558;
        _703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0)));
        _704 = cbModelParam._m0[36u].z * (isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0)));
        _705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
    }
    else
    {
        _703 = 0.0;
        _704 = 0.0;
        _705 = 0.0;
    }
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _731 = fma(_400, cbModelParam._m0[30u].z, fma(_396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _392));
        float _735 = fma(_400, cbModelParam._m0[31u].z, fma(_396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _392));
        float _739 = fma(_400, cbModelParam._m0[32u].z, fma(_396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _392));
        float _762 = _392 + _213;
        float _763 = _396 + _214;
        float _764 = _400 + _215;
        float _774 = fma(_764, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _762)) - _731;
        float _775 = fma(_764, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _762)) - _735;
        float _776 = fma(_764, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _762)) - _739;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_731 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_735 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[35u].z) + ((((((_739 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _830 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _837 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _844 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _851 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_818.x + (-0.5));
        float _853 = _851 * (_818.y + (-0.5));
        float _854 = _851 * (_818.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _859 = ((_797.x + (-0.5)) * 0.5) * _830;
        float _861 = ((_804.x + (-0.5)) * 0.5) * _837;
        float _863 = ((_811.x + (-0.5)) * 0.5) * _844;
        float _864 = dot(vec3(_859, _861, _863), vec3(_859, _861, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_213, _214, _215), vec3(_869 * _859, _869 * _861, _869 * _863)) + 1.0) * 0.5;
        float _2393 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_861 * _861) + (_859 * _859)) + (_863 * _863)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _2404 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _2415 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0))) * (_888 + 1.0))) + _893) * _855;
        float _904 = ((_797.y + (-0.5)) * 0.5) * _830;
        float _906 = ((_804.y + (-0.5)) * 0.5) * _837;
        float _908 = ((_811.y + (-0.5)) * 0.5) * _844;
        float _909 = dot(vec3(_904, _906, _908), vec3(_904, _906, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_213, _214, _215), vec3(_914 * _904, _914 * _906, _914 * _908)) + 1.0) * 0.5;
        float _2426 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_906 * _906) + (_904 * _904)) + (_908 * _908)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _2437 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _2437 : (isnan(_2437) ? 1.0 : min(_2437, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _2448 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0))) * (_933 + 1.0))) + _938) * _856;
        float _949 = ((_797.z + (-0.5)) * 0.5) * _830;
        float _951 = ((_804.z + (-0.5)) * 0.5) * _837;
        float _953 = ((_811.z + (-0.5)) * 0.5) * _844;
        float _954 = dot(vec3(_949, _951, _953), vec3(_949, _951, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_213, _214, _215), vec3(_959 * _949, _959 * _951, _959 * _953)) + 1.0) * 0.5;
        float _2459 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_951 * _951) + (_949 * _949)) + (_953 * _953)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _2470 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _2481 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0))) * (_978 + 1.0))) + _983) * _857;
        _1000 = cbModelParam._m0[36u].w * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1001 = cbModelParam._m0[36u].w * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1002 = cbModelParam._m0[36u].w * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1012 = (cbModelParam._m0[1u].x * (_1000 - _703)) + _703;
    float _1013 = (cbModelParam._m0[1u].x * (_1001 - _704)) + _704;
    float _1014 = (cbModelParam._m0[1u].x * (_1002 - _705)) + _705;
    float _1035 = fma(_1014, cbSceneParam._m0[89u].z, fma(_1013, cbSceneParam._m0[89u].y, _1012 * cbSceneParam._m0[89u].x));
    float _1038 = fma(_1014, cbSceneParam._m0[90u].z, fma(_1013, cbSceneParam._m0[90u].y, _1012 * cbSceneParam._m0[90u].x));
    float _1041 = fma(_1014, cbSceneParam._m0[91u].z, fma(_1013, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1012));
    vec4 _1049 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_303, _304));
    float _1051 = _1049.w;
    float _1063 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1051);
    float _1064 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1051);
    float _1065 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1051);
    uvec4 _1069 = floatBitsToUint(cbInstanceData._m0[_344 + 5u]);
    uint _1071 = _1069.x * 14u;
    uint _1073 = _1071 + 13u;
    float _1080 = _370 + (-1.0);
    float _1086 = (cbLight._m0[_1073].x * _1080) + 1.0;
    float _1087 = (cbLight._m0[_1073].y * _1080) + 1.0;
    float _1088 = (cbLight._m0[_1073].z * _1080) + 1.0;
    float _1089 = (cbLight._m0[_1073].w * _1080) + 1.0;
    uint _1090 = _1071 + 5u;
    float _1096 = isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0));
    uint _1100 = _1071 + 4u;
    float _1110 = isnan(1.0) ? _1086 : (isnan(_1086) ? 1.0 : min(_1086, 1.0));
    uint _1114 = _1071 | 1u;
    float _1125 = dot(vec3(cbLight._m0[_1071].xyz), vec3(_213, _214, _215));
    float _1128 = dot(vec3(cbLight._m0[_1114].xyz), vec3(_213, _214, _215));
    float _2532 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _2543 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1133 = (isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0))) * 0.3183098733425140380859375;
    float _1135 = (isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0))) * 0.3183098733425140380859375;
    float _1142 = ((cbLight._m0[_1090].x * _1096) * _1135) + (((cbLight._m0[_1100].x * _1063) * _1110) * _1133);
    float _1143 = ((_1096 * cbLight._m0[_1090].y) * _1135) + (((cbLight._m0[_1100].y * _1064) * _1110) * _1133);
    float _1144 = ((_1096 * cbLight._m0[_1090].z) * _1135) + (((cbLight._m0[_1100].z * _1065) * _1110) * _1133);
    uvec4 _1149 = floatBitsToUint(cbLight._m0[_1071 + 12u]);
    bool _1151 = _1149.x == 0u;
    float _1152;
    float _1154;
    float _1156;
    if (_1151)
    {
        _1152 = _1142;
        _1154 = _1143;
        _1156 = _1144;
    }
    else
    {
        uint _1160 = _1071 + 6u;
        float _1176 = (dot(vec3(cbLight._m0[_1071 + 2u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _1177 = _1176 * _1176;
        float _2554 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _2554 : (isnan(_2554) ? 1.0 : min(_2554, 1.0));
        float _1179 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _1152 = (((cbLight._m0[_1160].x * 0.3183098733425140380859375) * _1178) * _1179) + _1142;
        _1154 = (((cbLight._m0[_1160].y * 0.3183098733425140380859375) * _1178) * _1179) + _1143;
        _1156 = (((cbLight._m0[_1160].z * 0.3183098733425140380859375) * _1178) * _1179) + _1144;
    }
    bool _1159 = _1149.y == 0u;
    float _1189;
    float _1191;
    float _1193;
    if (_1159)
    {
        _1189 = _1152;
        _1191 = _1154;
        _1193 = _1156;
    }
    else
    {
        uint _1294 = _1071 + 7u;
        float _1310 = (dot(vec3(cbLight._m0[_1071 + 3u].xyz), vec3(_213, _214, _215)) * 0.5) + 0.5;
        float _1311 = _1310 * _1310;
        float _2570 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
        float _1313 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
        _1189 = (((cbLight._m0[_1294].x * 0.3183098733425140380859375) * _1312) * _1313) + _1152;
        _1191 = (((cbLight._m0[_1294].y * 0.3183098733425140380859375) * _1312) * _1313) + _1154;
        _1193 = (((cbLight._m0[_1294].z * 0.3183098733425140380859375) * _1312) * _1313) + _1156;
    }
    uint _1195 = _1071 + 8u;
    float _1201 = cbLight._m0[_1071].x + _295;
    float _1202 = cbLight._m0[_1071].y + _296;
    float _1203 = cbLight._m0[_1071].z + _297;
    float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
    float _1211 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1071].xyz));
    float _2586 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _2586 : (isnan(_2586) ? 1.0 : min(_2586, 1.0));
    float _1215 = dot(vec3(_213, _214, _215), vec3(_295, _296, _297));
    float _2597 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1218 = isnan(1.0) ? _2597 : (isnan(_2597) ? 1.0 : min(_2597, 1.0));
    float _1219 = dot(vec3(cbLight._m0[_1071].xyz), vec3(_1201 * _1207, _1202 * _1207, _1203 * _1207));
    float _2608 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1227 = exp2(log2(1.0 - (isnan(1.0) ? _2608 : (isnan(_2608) ? 1.0 : min(_2608, 1.0)))) * 5.0);
    float _1232 = (0.5 / ((_1214 + 9.9999999392252902907785028219223e-09) + _1218)) * _1214;
    float _2619 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _1234 = (isnan(1.0) ? _2619 : (isnan(_2619) ? 1.0 : min(_2619, 1.0))) * 0.31831014156341552734375;
    uint _1248 = _1071 + 9u;
    float _1254 = cbLight._m0[_1114].x + _295;
    float _1255 = cbLight._m0[_1114].y + _296;
    float _1256 = cbLight._m0[_1114].z + _297;
    float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
    float _1264 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1114].xyz));
    float _2630 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _1267 = isnan(1.0) ? _2630 : (isnan(_2630) ? 1.0 : min(_2630, 1.0));
    float _1268 = dot(vec3(cbLight._m0[_1114].xyz), vec3(_1254 * _1260, _1255 * _1260, _1256 * _1260));
    float _2641 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _1275 = exp2(log2(1.0 - (isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0)))) * 5.0);
    float _1279 = (0.5 / ((_1267 + 9.9999999392252902907785028219223e-09) + _1218)) * _1267;
    float _2652 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1281 = (isnan(1.0) ? _2652 : (isnan(_2652) ? 1.0 : min(_2652, 1.0))) * 0.31831014156341552734375;
    float _1291 = (((_1275 * cbLight._m0[_1248].x) * _1281) * _1096) + ((((cbLight._m0[_1195].x * _1063) * _1227) * _1234) * _1110);
    float _1292 = (((_1275 * cbLight._m0[_1248].y) * _1281) * _1096) + ((((cbLight._m0[_1195].y * _1064) * _1227) * _1234) * _1110);
    float _1293 = (((_1275 * cbLight._m0[_1248].z) * _1281) * _1096) + ((((cbLight._m0[_1195].z * _1065) * _1227) * _1234) * _1110);
    float _1323;
    float _1325;
    float _1327;
    if (_1151)
    {
        _1323 = _1291;
        _1325 = _1292;
        _1327 = _1293;
    }
    else
    {
        uint _1329 = _1071 + 10u;
        uint _1335 = _1071 + 2u;
        float _1341 = cbLight._m0[_1335].x + _295;
        float _1342 = cbLight._m0[_1335].y + _296;
        float _1343 = cbLight._m0[_1335].z + _297;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1351 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1335].xyz));
        float _2663 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1354 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
        float _1355 = dot(vec3(cbLight._m0[_1335].xyz), vec3(_1341 * _1347, _1342 * _1347, _1343 * _1347));
        float _2674 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1362 = exp2(log2(1.0 - (isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0)))) * 5.0);
        float _1366 = (0.5 / ((_1354 + 9.9999999392252902907785028219223e-09) + _1218)) * _1354;
        float _2685 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1368 = (isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0))) * 0.31831014156341552734375;
        float _1369 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _1323 = (((_1362 * cbLight._m0[_1329].x) * _1368) * _1369) + _1291;
        _1325 = (((_1362 * cbLight._m0[_1329].y) * _1368) * _1369) + _1292;
        _1327 = (((_1362 * cbLight._m0[_1329].z) * _1368) * _1369) + _1293;
    }
    float _1379;
    float _1381;
    float _1383;
    if (_1159)
    {
        _1379 = _1323;
        _1381 = _1325;
        _1383 = _1327;
    }
    else
    {
        uint _1390 = _1071 + 11u;
        uint _1396 = _1071 + 3u;
        float _1402 = cbLight._m0[_1396].x + _295;
        float _1403 = cbLight._m0[_1396].y + _296;
        float _1404 = cbLight._m0[_1396].z + _297;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1412 = dot(vec3(_213, _214, _215), vec3(cbLight._m0[_1396].xyz));
        float _2701 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1415 = isnan(1.0) ? _2701 : (isnan(_2701) ? 1.0 : min(_2701, 1.0));
        float _1416 = dot(vec3(cbLight._m0[_1396].xyz), vec3(_1402 * _1408, _1403 * _1408, _1404 * _1408));
        float _2712 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1423 = exp2(log2(1.0 - (isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0)))) * 5.0);
        float _1427 = (0.5 / ((_1415 + 9.9999999392252902907785028219223e-09) + _1218)) * _1415;
        float _2723 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1429 = (isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0))) * 0.31831014156341552734375;
        float _1430 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
        _1379 = (((_1423 * cbLight._m0[_1390].x) * _1429) * _1430) + _1323;
        _1381 = (((_1423 * cbLight._m0[_1390].y) * _1429) * _1430) + _1325;
        _1383 = (((_1423 * cbLight._m0[_1390].z) * _1429) * _1430) + _1327;
    }
    float _1539;
    float _1541;
    float _1543;
    if (_1069.y == 0u)
    {
        float _1480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1481 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1480;
        float _1482 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1480;
        float _1483 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1480;
        uvec4 _1495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1496 = _1495.x;
        uint _1507 = uint((float(_1495.y) * floor(float(uint(cbSceneParam._m0[85u].y * _304) / _1496))) + floor(float(uint(cbSceneParam._m0[85u].x * _303) / _1496)));
        float _1517 = (log2(_1483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1518 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        uint _1521 = uint(isnan(14.0) ? _1518 : (isnan(_1518) ? 14.0 : min(_1518, 14.0)));
        uvec4 _1526 = texelFetch(g_lightClusterGridBuffer, int(((_1521 << 2u) + (_1507 << 6u)) >> 2u));
        uint _1527 = _1526.x;
        uint _1528 = _1495.z;
        float _1597;
        float _1599;
        float _1601;
        if (((((1u << ((_1528 >> 4u) & 15u)) + 4294967295u) & _1527) == 0u) || ((_1528 & 240u) == 0u))
        {
            _1597 = 0.0;
            _1599 = 0.0;
            _1601 = 0.0;
        }
        else
        {
            float _1598;
            float _1600;
            float _1602;
            float _1718 = 0.0;
            float _1719 = 0.0;
            float _1720 = 0.0;
            uint _1721 = 0u;
            uint _1730;
            bool _1731;
            for (;;)
            {
                _1730 = texelFetch(g_lightClassification, int((((_1521 << 5u) + (_1507 << 9u)) + (_1721 << 2u)) >> 2u)).x;
                _1731 = _1730 == 0u;
                float frontier_phi_27_pred;
                float frontier_phi_27_pred_1;
                float frontier_phi_27_pred_2;
                if (_1731)
                {
                    frontier_phi_27_pred = _1719;
                    frontier_phi_27_pred_1 = _1720;
                    frontier_phi_27_pred_2 = _1718;
                }
                else
                {
                    float _1833;
                    float _1834;
                    float _1835;
                    uint _1836;
                    _1833 = _1718;
                    _1834 = _1719;
                    _1835 = _1720;
                    _1836 = _1730;
                    float _1771;
                    float _1772;
                    float _1773;
                    for (;;)
                    {
                        uint _1840 = uint(findLSB(_1836)) + (_1721 << 5u);
                        uint _1837 = (_1836 + 4294967295u) & _1836;
                        uint _1842 = _1840 * 48u;
                        vec4 _1856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1842)).x, texelFetch(g_PointLightRenderingBuffer, int(_1842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1842 + 3u)).x));
                        uint _1862 = (_1840 * 48u) + 4u;
                        vec4 _1875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1862)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1862 + 3u)).x));
                        float _1880 = _1856.x - _1481;
                        float _1881 = _1856.y - _1482;
                        float _1882 = _1856.z - _1483;
                        float _1883 = dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882));
                        float _1886 = inversesqrt(_1883);
                        float _1895 = 1.0 - (_1883 * _1856.w);
                        float _2749 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
                        float _1897 = sqrt(_1883) * _1875.w;
                        float _1900 = 1.39999997615814208984375 / (_1897 + 1.39999997615814208984375);
                        float _1901 = _1900 * _1900;
                        float _1904 = ((1.0 - _1901) * dot(vec3(_325, _328, _331), vec3(_1886 * _1880, _1886 * _1881, _1886 * _1882))) + _1901;
                        float _1911 = ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * (isnan(1.0) ? _2749 : (isnan(_2749) ? 1.0 : min(_2749, 1.0)))) / (((_1897 * _1897) * 0.699999988079071044921875) + 1.0);
                        _1771 = (_1911 * _1875.x) + _1833;
                        _1772 = (_1911 * _1875.y) + _1834;
                        _1773 = (_1911 * _1875.z) + _1835;
                        if (_1837 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1833 = _1771;
                            _1834 = _1772;
                            _1835 = _1773;
                            _1836 = _1837;
                        }
                    }
                    frontier_phi_27_pred = _1772;
                    frontier_phi_27_pred_1 = _1773;
                    frontier_phi_27_pred_2 = _1771;
                }
                _1600 = frontier_phi_27_pred;
                _1602 = frontier_phi_27_pred_1;
                _1598 = frontier_phi_27_pred_2;
                uint _1722 = _1721 + 1u;
                if (_1722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1718 = _1598;
                    _1719 = _1600;
                    _1720 = _1602;
                    _1721 = _1722;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1597 = _1598;
            _1599 = _1600;
            _1601 = _1602;
        }
        uvec4 _1605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1606 = _1605.z;
        uint _1608 = (_1606 >> 8u) & 15u;
        float _1705;
        float _1707;
        float _1709;
        if (((4294967295u << _1608) & _1527) == 0u)
        {
            _1705 = _1597;
            _1707 = _1599;
            _1709 = _1601;
        }
        else
        {
            float frontier_phi_21_22_ladder;
            float frontier_phi_21_22_ladder_1;
            float frontier_phi_21_22_ladder_2;
            if (_1608 < ((_1606 >> 12u) & 15u))
            {
                float _1706;
                float _1708;
                float _1710;
                float _1819 = _1597;
                float _1820 = _1599;
                float _1821 = _1601;
                uint _1822 = _1608;
                uint _1831;
                bool _1832;
                for (;;)
                {
                    _1831 = texelFetch(g_lightClassification, int((((_1521 << 5u) + (_1507 << 9u)) + (_1822 << 2u)) >> 2u)).x;
                    _1832 = _1831 == 0u;
                    float frontier_phi_33_pred;
                    float frontier_phi_33_pred_1;
                    float frontier_phi_33_pred_2;
                    if (_1832)
                    {
                        frontier_phi_33_pred = _1821;
                        frontier_phi_33_pred_1 = _1820;
                        frontier_phi_33_pred_2 = _1819;
                    }
                    else
                    {
                        float _1916;
                        float _1917;
                        float _1918;
                        float _2118;
                        float _2119;
                        float _2120;
                        float _1926 = _1819;
                        float _1927 = _1820;
                        float _1928 = _1821;
                        uint _1929 = _1831;
                        uint _1930;
                        vec4 _1956;
                        float _1957;
                        vec4 _1972;
                        vec4 _1988;
                        vec4 _2004;
                        float _2051;
                        bool _2052;
                        for (;;)
                        {
                            uint _1940 = ((_1822 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1929));
                            _1930 = (_1929 + 4294967295u) & _1929;
                            uint _1942 = _1940 * 40u;
                            _1956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1942 + 3u)).x));
                            _1957 = _1956.w;
                            uint _1959 = (_1940 * 40u) + 4u;
                            _1972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1959 + 3u)).x));
                            uint _1975 = (_1940 * 40u) + 16u;
                            _1988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1975 + 3u)).x));
                            uint _1991 = (_1940 * 40u) + 20u;
                            _2004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1991 + 3u)).x));
                            uint _2007 = (_1940 * 40u) + 24u;
                            vec4 _2020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 3u)).x));
                            uint _2026 = (_1940 * 40u) + 28u;
                            vec4 _2039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 3u)).x));
                            _2051 = fma(_1483, _2039.z, fma(_1482, _2039.y, _2039.x * _1481)) + _2039.w;
                            _2052 = !((fma(_1483, _2020.z, fma(_1482, _2020.y, _2020.x * _1481)) + _2020.w) <= 0.0);
                            float frontier_phi_39_pred;
                            float frontier_phi_39_pred_1;
                            float frontier_phi_39_pred_2;
                            if (_2052)
                            {
                                float _2076 = _1956.x - _1481;
                                float _2077 = _1956.y - _1482;
                                float _2078 = _1956.z - _1483;
                                float _2079 = dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078));
                                float _2082 = inversesqrt(_2079);
                                float _2089 = 1.0 - (_2079 / (_1957 * _1957));
                                float _2765 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
                                float _2094 = sqrt(_2079) * _1972.w;
                                float _2096 = 1.39999997615814208984375 / (_2094 + 1.39999997615814208984375);
                                float _2097 = _2096 * _2096;
                                float _2100 = ((1.0 - _2097) * dot(vec3(_2082 * _2076, _2082 * _2077, _2082 * _2078), vec3(_325, _328, _331))) + _2097;
                                float _2107 = (fma(_1483, _1988.z, fma(_1482, _1988.y, _1988.x * _1481)) + _1988.w) / _2051;
                                float _2108 = (fma(_1483, _2004.z, fma(_1482, _2004.y, _2004.x * _1481)) + _2004.w) / _2051;
                                float _2112 = 1.0 - dot(vec2(_2107, _2108), vec2(_2107, _2108));
                                float _2781 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
                                float _2114 = (isnan(1.0) ? _2781 : (isnan(_2781) ? 1.0 : min(_2781, 1.0))) * (((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * (isnan(1.0) ? _2765 : (isnan(_2765) ? 1.0 : min(_2765, 1.0)))) / (((_2094 * _2094) * 0.699999988079071044921875) + 1.0));
                                frontier_phi_39_pred = _2114 * _1972.z;
                                frontier_phi_39_pred_1 = _2114 * _1972.y;
                                frontier_phi_39_pred_2 = _2114 * _1972.x;
                            }
                            else
                            {
                                frontier_phi_39_pred = 0.0;
                                frontier_phi_39_pred_1 = 0.0;
                                frontier_phi_39_pred_2 = 0.0;
                            }
                            _2120 = frontier_phi_39_pred;
                            _2119 = frontier_phi_39_pred_1;
                            _2118 = frontier_phi_39_pred_2;
                            _1916 = _2118 + _1926;
                            _1917 = _2119 + _1927;
                            _1918 = _2120 + _1928;
                            if (_1930 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1926 = _1916;
                                _1927 = _1917;
                                _1928 = _1918;
                                _1929 = _1930;
                                continue;
                            }
                        }
                        frontier_phi_33_pred = _1918;
                        frontier_phi_33_pred_1 = _1917;
                        frontier_phi_33_pred_2 = _1916;
                    }
                    _1710 = frontier_phi_33_pred;
                    _1708 = frontier_phi_33_pred_1;
                    _1706 = frontier_phi_33_pred_2;
                    uint _1823 = _1822 + 1u;
                    if (_1823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1819 = _1706;
                        _1820 = _1708;
                        _1821 = _1710;
                        _1822 = _1823;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_21_22_ladder = _1710;
                frontier_phi_21_22_ladder_1 = _1708;
                frontier_phi_21_22_ladder_2 = _1706;
            }
            else
            {
                frontier_phi_21_22_ladder = _1601;
                frontier_phi_21_22_ladder_1 = _1599;
                frontier_phi_21_22_ladder_2 = _1597;
            }
            _1705 = frontier_phi_21_22_ladder_2;
            _1707 = frontier_phi_21_22_ladder_1;
            _1709 = frontier_phi_21_22_ladder;
        }
        float _1711 = isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0));
        _1539 = (_1711 * _1705) + _1189;
        _1541 = (_1711 * _1707) + _1191;
        _1543 = (_1711 * _1709) + _1193;
    }
    else
    {
        _1539 = _1189;
        _1541 = _1191;
        _1543 = _1193;
    }
    float _2797 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2808 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _2819 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    uint _1560 = _344 + 6u;
    float _1568 = _303 / cbSceneParam._m0[86u].x;
    float _1569 = _304 / cbSceneParam._m0[86u].y;
    vec4 _1583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1568, _1569, (log2((isnan(cbSceneParam._m0[77u].w) ? _235 : (isnan(_235) ? cbSceneParam._m0[77u].w : min(_235, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1585 = _1583.x;
    float _1586 = _1583.y;
    float _1587 = _1583.z;
    float _1588 = _1583.w;
    float _1654;
    float _1656;
    float _1658;
    float _1660;
    if (_235 > cbSceneParam._m0[78u].w)
    {
        float _1616 = isnan(_235) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _235 : min(cbSceneParam._m0[80u].w, _235));
        float _1617 = _1616 / _235;
        float _1628 = _1617 * _288;
        float _1629 = _289 * _1617;
        float _1630 = (-0.0) - _1629;
        float _1631 = _1617 * _290;
        float _1633 = (cbSceneParam._m0[77u].w * _1630) / _1616;
        float _1634 = _1633 + cbSceneParam._m0[79u].w;
        float _1635 = cbSceneParam._m0[79u].w - _1629;
        float _1641 = sqrt(((_1628 * _1628) + (_1629 * _1629)) + (_1631 * _1631));
        float _1644 = (1.0 - (cbSceneParam._m0[77u].w / _1616)) * _1641;
        float _1650 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1652 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1781;
        if (abs((_1630 - _1633) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1781 = ((((_1634 > 0.0) ? exp2(_1650 * _1634) : (2.0 - exp2(_1652 * _1634))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1644;
        }
        else
        {
            float _1744 = 1.0 / cbSceneParam._m0[80u].x;
            float _1745 = isnan(_1635) ? _1634 : (isnan(_1634) ? _1635 : max(_1634, _1635));
            float _1746 = isnan(_1635) ? _1634 : (isnan(_1634) ? _1635 : min(_1634, _1635));
            float _1755 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : min(_1745, 0.0));
            float _1756 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : min(_1746, 0.0));
            _1781 = ((abs(_1641 / _1630) * cbSceneParam._m0[80u].y) * ((((_1755 - _1756) * 2.0) - ((exp2(_1650 * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)))) - exp2(_1650 * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))))) * _1744)) - ((exp2(_1652 * _1755) - exp2(_1652 * _1756)) * _1744))) + (_1644 * cbSceneParam._m0[80u].z);
        }
        vec4 _1783 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1568, _1569, 1.0), 0.0);
        float _1792 = exp2((_1781 * (-1.44269502162933349609375)) * (1.0 - _1783.w));
        float _1793 = log2(_1792);
        float _1809 = log2(_1588);
        _1654 = (exp2(_1809 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1793 * cbSceneParam._m0[78u].x)) * _1783.x) / cbSceneParam._m0[78u].x)) + _1585;
        _1656 = (exp2(_1809 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1793 * cbSceneParam._m0[78u].y)) * _1783.y) / cbSceneParam._m0[78u].y)) + _1586;
        _1658 = (exp2(_1809 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1793 * cbSceneParam._m0[78u].z)) * _1783.z) / cbSceneParam._m0[78u].z)) + _1587;
        _1660 = _1792 * _1588;
    }
    else
    {
        _1654 = _1585;
        _1656 = _1586;
        _1658 = _1587;
        _1660 = _1588;
    }
    float _1672 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1673 = _1672 == 3.0;
    float _1675 = log2(_1660);
    float _1682 = exp2(_1675 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0))) * (_1539 + ((isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0))) * _370))) + (cbPerFrame._m0[3u].x * _1379));
    float _1683 = exp2(_1675 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0))) * (_1541 + ((isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0))) * _370))) + (cbPerFrame._m0[3u].x * _1381));
    float _1684 = exp2(_1675 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0))) * (_1543 + ((isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0))) * _370))) + (cbPerFrame._m0[3u].x * _1383));
    float _1693 = (_1672 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1693 * (_1673 ? _1682 : (_1682 + (cbSceneParam._m0[72u].w * _1654)));
    SV_Target.y = _1693 * (_1673 ? _1683 : (_1683 + (cbSceneParam._m0[72u].w * _1656)));
    SV_Target.z = _1693 * (_1673 ? _1684 : (_1684 + (cbSceneParam._m0[72u].w * _1658)));
    SV_Target.w = cbInstanceData._m0[_1560].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1560].w;
}


