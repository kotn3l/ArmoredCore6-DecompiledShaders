#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _967;
float _3359;
float _3360;
float _3361;
float _3362;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _242.z;
    float _251 = (_242.x * 2.0) + (-1.0);
    float _253 = (_242.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3371 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))));
    float _263 = fma(_260, _217, fma(_253, _210, _251 * _196));
    float _266 = fma(_260, _218, fma(_253, _211, _251 * _197));
    float _269 = fma(_260, _219, fma(_253, _212, _251 * _198));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _281 = cbMtdParam._m0[10u].x + dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3382 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _289 = dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3393 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) + (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)));
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _309.x * cbMtdParam._m0[9u].x;
    float _315 = _309.y * cbMtdParam._m0[9u].y;
    float _316 = _309.z * cbMtdParam._m0[9u].z;
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _339 = ((_328.x - _314) * _291) + _314;
    float _340 = ((_328.y - _315) * _291) + _315;
    float _341 = ((_328.z - _316) * _291) + _316;
    vec4 _354 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _361 = (_354.x * 2.0) + (-1.0);
    float _362 = (_354.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3404 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _371 = ((_354.z - _247) * _291) + _247;
    float _380 = ((sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) - _260) * _291) + _260;
    float _384 = (((_361 - _251) * _291) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _385 = (((_362 - _253) * _291) + _253) + (cbMtdParam._m0[10u].y * _253);
    float _388 = fma(_380, _217, fma(_385, _210, _384 * _196));
    float _391 = fma(_380, _218, fma(_385, _211, _384 * _197));
    float _394 = fma(_380, _219, fma(_385, _212, _384 * _198));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    float _399 = _398 * _388;
    float _400 = _398 * _391;
    float _401 = _398 * _394;
    float _3415 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _402 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3437 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3448 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _421 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _472 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _462);
    float _473 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _462);
    float _474 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _462);
    float _478 = inversesqrt(dot(vec3(_472, _473, _474), vec3(_472, _473, _474)));
    float _479 = _472 * _478;
    float _480 = _473 * _478;
    float _481 = _474 * _478;
    vec4 _486 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _488 = _486.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _646 = sqrt(((_472 * _472) + (_473 * _473)) + (_474 * _474));
        float _652 = (cbMatDynParam._m0[5u].x * _646) + cbMatDynParam._m0[5u].y;
        float _3459 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _657 = (cbMatDynParam._m0[5u].z * _646) + cbMatDynParam._m0[5u].w;
        float _3470 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) - _653)) + _653) < ((_488 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_401, cbSceneParam._m0[5u].z, fma(_400, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _399));
    float _524 = fma(_401, cbSceneParam._m0[6u].z, fma(_400, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _399));
    float _527 = fma(_401, cbSceneParam._m0[7u].z, fma(_400, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _399));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _542 = _540 + 9u;
    uint _543 = _542 + uint(cbMatDynParam._m0[0u].w);
    float _549 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_543].x;
    float _550 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_543].y;
    float _551 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_543].z;
    float _3481 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _566 = _563.x * TEXCOORD.z;
    float _567 = dot(vec3(_399, _400, _401), vec3(_479, _480, _481));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _399) - _479;
    float _575 = (_570 * _400) - _480;
    float _576 = (_570 * _401) - _481;
    float _580 = abs(dot(vec3(_479, _480, _481), vec3(_399, _400, _401)));
    float _3514 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_402);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _966;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _691 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _695 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _699 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _724 = _627 + _399;
        float _725 = _631 + _400;
        float _726 = _635 + _401;
        float _736 = fma(_726, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) - _691;
        float _737 = fma(_726, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) - _695;
        float _738 = fma(_726, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) - _699;
        float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
        float _755 = ((_742 * _736) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_691 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_742 * _737) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_695 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_742 * _738) / cbModelParam._m0[34u].z) + ((((((_699 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        float _794 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_760.x + (-0.5));
        float _796 = _794 * (_760.y + (-0.5));
        float _797 = _794 * (_760.z + (-0.5));
        float _804 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_767.x + (-0.5));
        float _806 = _804 * (_767.y + (-0.5));
        float _807 = _804 * (_767.z + (-0.5));
        float _814 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_774.x + (-0.5));
        float _816 = _814 * (_774.y + (-0.5));
        float _817 = _814 * (_774.z + (-0.5));
        float _824 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_781.x + (-0.5));
        float _826 = _824 * (_781.y + (-0.5));
        float _827 = _824 * (_781.z + (-0.5));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = _795 * 0.5;
        float _832 = _805 * 0.5;
        float _833 = _815 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _848 = (dot(vec3(_399, _400, _401), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _858 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3562 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_860 + 1.0))) + _865) * _828;
        float _875 = _796 * 0.5;
        float _876 = _806 * 0.5;
        float _877 = _816 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_399, _400, _401), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3595 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_902 + 1.0))) + _907) * _829;
        float _917 = _797 * 0.5;
        float _918 = _807 * 0.5;
        float _919 = _817 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_399, _400, _401), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3628 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_944 + 1.0))) + _949) * _830;
        _966 = _797;
        _968 = _796;
        _969 = _795;
        _970 = _807;
        _971 = _806;
        _972 = _805;
        _973 = _817;
        _974 = _816;
        _975 = _815;
        _976 = _830;
        _977 = _829;
        _978 = _828;
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
    }
    else
    {
        _966 = _967;
        _968 = _967;
        _969 = _967;
        _970 = _967;
        _971 = _967;
        _972 = _967;
        _973 = _967;
        _974 = _967;
        _975 = _967;
        _976 = _967;
        _977 = _967;
        _978 = _967;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _1014 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _1018 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1041 = _627 + _399;
        float _1042 = _631 + _400;
        float _1043 = _635 + _401;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_399, _400, _401), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3691 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_399, _400, _401), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3724 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_399, _400, _401), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3757 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _967;
        _1280 = _967;
        _1281 = _967;
        _1282 = _967;
        _1283 = _967;
        _1284 = _967;
        _1285 = _967;
        _1286 = _967;
        _1287 = _967;
        _1288 = _967;
        _1289 = _967;
        _1290 = _967;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _574 * 0.5;
    float _1348 = _575 * 0.5;
    float _1349 = _576 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_966, _970, _973, _976));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_968, _971, _974, _977));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _972, _975, _978));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _402);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1479 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1482 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1510 = frontier_phi_19_17_ladder;
        }
        float _1735;
        if (_1479 > 0.0)
        {
            _1735 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1735 = frontier_phi_28_24_ladder;
        }
        float _1981;
        if (_1482 > 0.0)
        {
            _1981 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1981 = frontier_phi_40_35_ladder;
        }
        float _1983 = isnan(_1735) ? _1510 : (isnan(_1510) ? _1735 : min(_1510, _1735));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1476) + _1465;
        float _1989 = (_1984 * _1479) + _1469;
        float _1990 = (_1984 * _1482) + _1473;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_18_40_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_18_40_ladder_2;
        _1500 = frontier_phi_18_40_ladder_1;
        _1502 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1416);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _402);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1578 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1581 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1740;
        if (_1575 > 0.0)
        {
            _1740 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1740 = frontier_phi_30_26_ladder;
        }
        float _2008;
        if (_1578 > 0.0)
        {
            _2008 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2008 = frontier_phi_42_37_ladder;
        }
        float _2213;
        if (_1581 > 0.0)
        {
            _2213 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2213 = frontier_phi_51_48_ladder;
        }
        float _2215 = isnan(_2008) ? _1740 : (isnan(_1740) ? _2008 : min(_1740, _2008));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1575) + _1564;
        float _2221 = (_2216 * _1578) + _1568;
        float _2222 = (_2216 * _1581) + _1572;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2223;
        float _2226 = _2223 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2222 > _2226) || ((_2222 < _2224) || ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 < _2224) || (_2220 > _2226))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2222, cbModelParam._m0[17u].z, fma(_2221, cbModelParam._m0[17u].y, _2220 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2222, cbModelParam._m0[18u].z, fma(_2221, cbModelParam._m0[18u].y, _2220 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2222, cbModelParam._m0[19u].z, fma(_2221, cbModelParam._m0[19u].y, _2220 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_27_51_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_27_51_ladder_2;
        _1602 = frontier_phi_27_51_ladder_1;
        _1604 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1507);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1616 = ((((1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _582)) * _566;
    float _1617 = _1616 * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1618 = _1616 * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1619 = _1616 * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1622 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    vec4 _1636 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_500, _501));
    float _1638 = _1636.w;
    float _1650 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1638);
    float _1651 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1638);
    float _1652 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1638);
    uvec4 _1656 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1658 = _1656.x * 14u;
    uint _1659 = _1658 + 13u;
    float _1666 = _566 + (-1.0);
    float _1671 = (cbLight._m0[_1659].x * _1666) + 1.0;
    float _1672 = (cbLight._m0[_1659].y * _1666) + 1.0;
    float _1673 = (cbLight._m0[_1659].z * _1666) + 1.0;
    float _1674 = (cbLight._m0[_1659].w * _1666) + 1.0;
    uint _1675 = _1658 + 5u;
    float _1681 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1685 = _1658 + 4u;
    float _1694 = isnan(1.0) ? _1671 : (isnan(_1671) ? 1.0 : min(_1671, 1.0));
    uint _1698 = _1658 | 1u;
    float _1709 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_399, _400, _401));
    float _1712 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_399, _400, _401));
    float _3893 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _3904 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1717 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 0.3183098733425140380859375;
    float _1719 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1726 = ((cbLight._m0[_1675].x * _1681) * _1719) + (((cbLight._m0[_1685].x * _1650) * _1694) * _1717);
    float _1727 = ((_1681 * cbLight._m0[_1675].y) * _1719) + (((cbLight._m0[_1685].y * _1651) * _1694) * _1717);
    float _1728 = ((_1681 * cbLight._m0[_1675].z) * _1719) + (((cbLight._m0[_1685].z * _1652) * _1694) * _1717);
    uvec4 _1732 = floatBitsToUint(cbLight._m0[_1658 + 12u]);
    bool _1734 = _1732.x == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1734)
    {
        _1745 = _1726;
        _1747 = _1727;
        _1749 = _1728;
    }
    else
    {
        uint _1753 = _1658 + 6u;
        float _1769 = (dot(vec3(cbLight._m0[_1658 + 2u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _1770 = _1769 * _1769;
        float _3915 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1772 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _1745 = (((cbLight._m0[_1753].x * 0.3183098733425140380859375) * _1771) * _1772) + _1726;
        _1747 = (((cbLight._m0[_1753].y * 0.3183098733425140380859375) * _1771) * _1772) + _1727;
        _1749 = (((cbLight._m0[_1753].z * 0.3183098733425140380859375) * _1771) * _1772) + _1728;
    }
    bool _1752 = _1732.y == 0u;
    float _1790;
    float _1792;
    float _1794;
    if (_1752)
    {
        _1790 = _1745;
        _1792 = _1747;
        _1794 = _1749;
    }
    else
    {
        uint _1952 = _1658 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1658 + 3u].xyz), vec3(_399, _400, _401)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3931 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1971 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1790 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1745;
        _1792 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1747;
        _1794 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1749;
    }
    uint _1797 = _1658 + 8u;
    float _1810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1658].w)) * _402) * 0.949999988079071044921875);
    float _1811 = _1810 * _1810;
    float _1812 = cbLight._m0[_1658].x + _479;
    float _1813 = cbLight._m0[_1658].y + _480;
    float _1814 = cbLight._m0[_1658].z + _481;
    float _1818 = inversesqrt(dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814)));
    float _1819 = _1818 * _1812;
    float _1820 = _1818 * _1813;
    float _1821 = _1818 * _1814;
    float _1822 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1658].xyz));
    float _3947 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _1826 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1827 = dot(vec3(_399, _400, _401), vec3(_1819, _1820, _1821));
    float _3969 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1658].xyz), vec3(_1819, _1820, _1821));
    float _3980 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1811 * _1811;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1850 = (exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1851 = 1.0 - _1811;
    float _1862 = (0.5 / (((_1826 * ((_1825 * _1851) + _1811)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1851) + _1811) * _1825))) * _1825;
    float _3991 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    uint _1878 = _1658 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1698].w)) * _402) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1698].x + _479;
    float _1892 = cbLight._m0[_1698].y + _480;
    float _1893 = cbLight._m0[_1698].z + _481;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_1698].xyz));
    float _4002 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1905 = dot(vec3(_399, _400, _401), vec3(_1898, _1899, _1900));
    float _4013 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1898, _1899, _1900));
    float _4024 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1890;
    float _1937 = (0.5 / (((_1826 * ((_1904 * _1927) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _1927) + _1890) * _1904))) * _1904;
    float _4035 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1949 = (((_1926 * cbLight._m0[_1878].x) * _1939) * _1681) + ((((cbLight._m0[_1797].x * _1650) * _1850) * _1864) * _1694);
    float _1950 = (((_1926 * cbLight._m0[_1878].y) * _1939) * _1681) + ((((cbLight._m0[_1797].y * _1651) * _1850) * _1864) * _1694);
    float _1951 = (((_1926 * cbLight._m0[_1878].z) * _1939) * _1681) + ((((cbLight._m0[_1797].z * _1652) * _1850) * _1864) * _1694);
    float _2013;
    float _2015;
    float _2017;
    if (_1734)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1658 + 2u;
        uint _2023 = _1658 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _402) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _479;
        float _2040 = cbLight._m0[_2019].y + _480;
        float _2041 = cbLight._m0[_2019].z + _481;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_2019].xyz));
        float _4046 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2053 = dot(vec3(_399, _400, _401), vec3(_2046, _2047, _2048));
        float _4057 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _4068 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2075 = 1.0 - _2038;
        float _2085 = (0.5 / (((_1826 * ((_2052 * _2075) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2075) + _2038) * _2052))) * _2052;
        float _4079 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
        _2013 = (((_2074 * cbLight._m0[_2023].x) * _2087) * _2088) + _1949;
        _2015 = (((_2074 * cbLight._m0[_2023].y) * _2087) * _2088) + _1950;
        _2017 = (((_2074 * cbLight._m0[_2023].z) * _2087) * _2088) + _1951;
    }
    float _2123;
    float _2125;
    float _2127;
    if (_1752)
    {
        _2123 = _2013;
        _2125 = _2015;
        _2127 = _2017;
    }
    else
    {
        uint _2134 = _1658 + 3u;
        uint _2138 = _1658 + 11u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _402) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _479;
        float _2155 = cbLight._m0[_2134].y + _480;
        float _2156 = cbLight._m0[_2134].z + _481;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_399, _400, _401), vec3(cbLight._m0[_2134].xyz));
        float _4095 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2168 = dot(vec3(_399, _400, _401), vec3(_2161, _2162, _2163));
        float _4106 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4117 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = 1.0 - _2153;
        float _2200 = (0.5 / (((_1826 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1826 * _2190) + _2153) * _2167))) * _2167;
        float _4128 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2123 = (((_2189 * cbLight._m0[_2138].x) * _2202) * _2203) + _2013;
        _2125 = (((_2189 * cbLight._m0[_2138].y) * _2202) * _2203) + _2015;
        _2127 = (((_2189 * cbLight._m0[_2138].z) * _2202) * _2203) + _2017;
    }
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1656.y == 0u)
    {
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2278;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2278;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2278;
        uvec4 _2293 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2294 = _2293.x;
        uint _2305 = uint((float(_2293.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2294))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2294)));
        float _2315 = (log2(_2281 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2316 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        uint _2319 = uint(isnan(14.0) ? _2316 : (isnan(_2316) ? 14.0 : min(_2316, 14.0)));
        uvec4 _2324 = texelFetch(g_lightClusterGridBuffer, int(((_2319 << 2u) + (_2305 << 6u)) >> 2u));
        uint _2325 = _2324.x;
        uint _2326 = _2293.z;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        if (((((1u << ((_2326 >> 4u) & 15u)) + 4294967295u) & _2325) == 0u) || ((_2326 & 240u) == 0u))
        {
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
        }
        else
        {
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2593)
                {
                    frontier_phi_68_pred = _2579;
                    frontier_phi_68_pred_1 = _2582;
                    frontier_phi_68_pred_2 = _2581;
                    frontier_phi_68_pred_3 = _2580;
                    frontier_phi_68_pred_4 = _2578;
                    frontier_phi_68_pred_5 = _2577;
                }
                else
                {
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    uint _2728;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2592;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    for (;;)
                    {
                        uint _2732 = uint(findLSB(_2728)) + (_2583 << 5u);
                        uint _2729 = (_2728 + 4294967295u) & _2728;
                        uint _2734 = _2732 * 48u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2754 = (_2732 * 48u) + 4u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2773 = (_2732 * 48u) + 8u;
                        vec3 _2784 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x));
                        float _2788 = _2748.x - _2279;
                        float _2789 = _2748.y - _2280;
                        float _2790 = _2748.z - _2281;
                        float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                        float _2794 = inversesqrt(_2791);
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2798 = dot(vec3(_521, _524, _527), vec3(_2795, _2796, _2797));
                        float _2803 = 1.0 - (_2791 * _2748.w);
                        float _4154 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2805 = sqrt(_2791) * _2767.w;
                        float _2808 = 1.39999997615814208984375 / (_2805 + 1.39999997615814208984375);
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2798) + _2809;
                        float _2815 = _2805 * _2805;
                        float _2819 = ((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2804) / ((_2815 * 0.699999988079071044921875) + 1.0);
                        float _2823 = (-0.0) - _2279;
                        float _2824 = (-0.0) - _2280;
                        float _2825 = (-0.0) - _2281;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2840 = exp2(log2(1.0 / ((_2815 * 3.5) + 5.0)) * 0.25);
                        float _2841 = 1.0 - _582;
                        float _2848 = sqrt(1.0 - ((1.0 - (_2841 * _2841)) * (1.0 - (_2840 * _2840))));
                        float _2849 = _2848 * _2848;
                        float _2850 = _2849 * _2849;
                        float _2851 = _2830 + _2795;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
                        float _2861 = dot(vec3(_521, _524, _527), vec3(_2830, _2831, _2832));
                        float _4170 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2865 = dot(vec3(_521, _524, _527), vec3(_2857 * _2851, _2857 * _2852, _2857 * _2853));
                        float _4181 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2872 = ((_2868 * _2868) * (_2850 + (-1.0))) + 1.0;
                        float _2873 = _2808 * _2849;
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2798) + _2874;
                        float _4192 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2879 = 1.0 - _2849;
                        float _2889 = (0.5 / (((_2878 * ((_2864 * _2879) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2878 * _2879) + _2849) * _2864))) * _2878;
                        float _4203 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2900 = (((_2850 * 3.1415927410125732421875) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) / ((_2872 * _2872) * ((_2815 * 2.1991131305694580078125) + 3.141590118408203125))) * _2804;
                        _2652 = (_2819 * _2767.x) + _2725;
                        _2653 = (_2819 * _2767.y) + _2726;
                        _2654 = (_2819 * _2767.z) + _2727;
                        _2649 = (_2900 * _2784.x) + _2722;
                        _2650 = (_2900 * _2784.y) + _2723;
                        _2651 = (_2900 * _2784.z) + _2724;
                        if (_2729 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2729;
                        }
                    }
                    frontier_phi_68_pred = _2651;
                    frontier_phi_68_pred_1 = _2654;
                    frontier_phi_68_pred_2 = _2653;
                    frontier_phi_68_pred_3 = _2652;
                    frontier_phi_68_pred_4 = _2650;
                    frontier_phi_68_pred_5 = _2649;
                }
                _2430 = frontier_phi_68_pred;
                _2436 = frontier_phi_68_pred_1;
                _2434 = frontier_phi_68_pred_2;
                _2432 = frontier_phi_68_pred_3;
                _2428 = frontier_phi_68_pred_4;
                _2426 = frontier_phi_68_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2426;
                    _2578 = _2428;
                    _2579 = _2430;
                    _2580 = _2432;
                    _2581 = _2434;
                    _2582 = _2436;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
        }
        uvec4 _2439 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2440 = _2439.z;
        uint _2442 = (_2440 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2442) & _2325) == 0u)
        {
            _2545 = _2425;
            _2547 = _2427;
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
            float _2571 = _2570 * _2279;
            float _2572 = _2570 * _2280;
            float _2573 = _2570 * _2281;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2442 < ((_2440 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2705 = _2425;
                float _2706 = _2427;
                float _2707 = _2429;
                float _2708 = _2431;
                float _2709 = _2433;
                float _2710 = _2435;
                uint _2711 = _2442;
                uint _2720;
                bool _2721;
                for (;;)
                {
                    _2720 = texelFetch(g_lightClassification, int((((_2319 << 5u) + (_2305 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                    _2721 = _2720 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2721)
                    {
                        frontier_phi_79_pred = _2710;
                        frontier_phi_79_pred_1 = _2709;
                        frontier_phi_79_pred_2 = _2708;
                        frontier_phi_79_pred_3 = _2707;
                        frontier_phi_79_pred_4 = _2706;
                        frontier_phi_79_pred_5 = _2705;
                    }
                    else
                    {
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        uint _2933 = _2720;
                        uint _2934;
                        vec4 _2959;
                        float _2960;
                        vec4 _2975;
                        vec3 _2987;
                        vec4 _3003;
                        vec4 _3019;
                        float _3066;
                        bool _3067;
                        for (;;)
                        {
                            uint _2944 = ((_2711 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2933));
                            _2934 = (_2933 + 4294967295u) & _2933;
                            uint _2946 = _2944 * 40u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2960 = _2959.w;
                            uint _2962 = (_2944 * 40u) + 4u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2977 = (_2944 * 40u) + 8u;
                            _2987 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x));
                            uint _2990 = (_2944 * 40u) + 16u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3006 = (_2944 * 40u) + 20u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3022 = (_2944 * 40u) + 24u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3041 = (_2944 * 40u) + 28u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3066 = fma(_2281, _3054.z, fma(_2280, _3054.y, _3054.x * _2279)) + _3054.w;
                            _3067 = !((fma(_2281, _3035.z, fma(_2280, _3035.y, _3035.x * _2279)) + _3035.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3067)
                            {
                                float _3094 = _2959.x - _2279;
                                float _3095 = _2959.y - _2280;
                                float _3096 = _2959.z - _2281;
                                float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                                float _3100 = inversesqrt(_3097);
                                float _3101 = _3100 * _3094;
                                float _3102 = _3100 * _3095;
                                float _3103 = _3100 * _3096;
                                float _3107 = 1.0 - (_3097 / (_2960 * _2960));
                                float _4214 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3112 = sqrt(_3097) * _2975.w;
                                float _3114 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                                float _3115 = _3114 * _3114;
                                float _3118 = ((1.0 - _3115) * dot(vec3(_3101, _3102, _3103), vec3(_521, _524, _527))) + _3115;
                                float _3121 = _3112 * _3112;
                                float _3125 = (fma(_2281, _3003.z, fma(_2280, _3003.y, _3003.x * _2279)) + _3003.w) / _3066;
                                float _3126 = (fma(_2281, _3019.z, fma(_2280, _3019.y, _3019.x * _2279)) + _3019.w) / _3066;
                                float _3130 = 1.0 - dot(vec2(_3125, _3126), vec2(_3125, _3126));
                                float _4230 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3131 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3132 = _3131 * (((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3108) / ((_3121 * 0.699999988079071044921875) + 1.0));
                                float _3144 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                                float _3145 = 1.0 - _582;
                                float _3152 = sqrt(1.0 - ((1.0 - (_3145 * _3145)) * (1.0 - (_3144 * _3144))));
                                float _3153 = _3152 * _3152;
                                float _3154 = _3153 * _3153;
                                float _3155 = _3101 - _2571;
                                float _3156 = _3102 - _2572;
                                float _3157 = _3103 - _2573;
                                float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                                float _3165 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4241 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3169 = dot(vec3(_521, _524, _527), vec3(_3161 * _3155, _3161 * _3156, _3161 * _3157));
                                float _4252 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3176 = ((_3172 * _3172) * (_3154 + (-1.0))) + 1.0;
                                float _3177 = _3114 * _3153;
                                float _3178 = _3177 * _3177;
                                float _3184 = ((1.0 - _3178) * dot(vec3(_521, _524, _527), vec3(_3101, _3102, _3103))) + _3178;
                                float _4263 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3186 = 1.0 - _3153;
                                float _3196 = (0.5 / (((_3185 * ((_3168 * _3186) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3153) * _3168))) * _3185;
                                float _4274 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3206 = (_3131 * _3108) * (((_3154 * 3.1415927410125732421875) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) / ((_3176 * _3176) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3132 * _2975.z;
                                frontier_phi_85_pred_1 = _3132 * _2975.y;
                                frontier_phi_85_pred_2 = _3132 * _2975.x;
                                frontier_phi_85_pred_3 = _3206 * _2987.z;
                                frontier_phi_85_pred_4 = _3206 * _2987.y;
                                frontier_phi_85_pred_5 = _3206 * _2987.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3215 = frontier_phi_85_pred;
                            _3214 = frontier_phi_85_pred_1;
                            _3213 = frontier_phi_85_pred_2;
                            _3212 = frontier_phi_85_pred_3;
                            _3211 = frontier_phi_85_pred_4;
                            _3210 = frontier_phi_85_pred_5;
                            _2917 = _3213 + _2930;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            if (_2934 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2934;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2919;
                        frontier_phi_79_pred_1 = _2918;
                        frontier_phi_79_pred_2 = _2917;
                        frontier_phi_79_pred_3 = _2916;
                        frontier_phi_79_pred_4 = _2915;
                        frontier_phi_79_pred_5 = _2914;
                    }
                    _2556 = frontier_phi_79_pred;
                    _2554 = frontier_phi_79_pred_1;
                    _2552 = frontier_phi_79_pred_2;
                    _2550 = frontier_phi_79_pred_3;
                    _2548 = frontier_phi_79_pred_4;
                    _2546 = frontier_phi_79_pred_5;
                    uint _2712 = _2711 + 1u;
                    if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2705 = _2546;
                        _2706 = _2548;
                        _2707 = _2550;
                        _2708 = _2552;
                        _2709 = _2554;
                        _2710 = _2556;
                        _2711 = _2712;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2552;
                frontier_phi_60_61_ladder_1 = _2556;
                frontier_phi_60_61_ladder_2 = _2554;
                frontier_phi_60_61_ladder_3 = _2550;
                frontier_phi_60_61_ladder_4 = _2548;
                frontier_phi_60_61_ladder_5 = _2546;
            }
            else
            {
                frontier_phi_60_61_ladder = _2431;
                frontier_phi_60_61_ladder_1 = _2435;
                frontier_phi_60_61_ladder_2 = _2433;
                frontier_phi_60_61_ladder_3 = _2429;
                frontier_phi_60_61_ladder_4 = _2427;
                frontier_phi_60_61_ladder_5 = _2425;
            }
            _2545 = frontier_phi_60_61_ladder_5;
            _2547 = frontier_phi_60_61_ladder_4;
            _2549 = frontier_phi_60_61_ladder_3;
            _2551 = frontier_phi_60_61_ladder;
            _2553 = frontier_phi_60_61_ladder_2;
            _2555 = frontier_phi_60_61_ladder_1;
        }
        float _2560 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2337 = (_2560 * _2551) + _1790;
        _2339 = (_2560 * _2553) + _1792;
        _2341 = (_2560 * _2555) + _1794;
        _2343 = ((_2545 * 0.039999999105930328369140625) * _2560) + _2123;
        _2345 = ((_2547 * 0.039999999105930328369140625) * _2560) + _2125;
        _2347 = ((_2549 * 0.039999999105930328369140625) * _2560) + _2127;
    }
    else
    {
        _2337 = _1790;
        _2339 = _1792;
        _2341 = _1794;
        _2343 = _2123;
        _2345 = _2125;
        _2347 = _2127;
    }
    float _4290 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4301 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4312 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _2364 = ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2337 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _566))) + ((_2343 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2365 = ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2339 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _566))) + ((_2345 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2366 = ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2341 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _566))) + ((_2347 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    uint _2367 = _540 + 6u;
    float _2375 = _500 / cbSceneParam._m0[86u].x;
    float _2376 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _421 : (isnan(_421) ? cbSceneParam._m0[77u].w : min(_421, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_421 > cbSceneParam._m0[78u].w)
    {
        float _2450 = isnan(_421) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _421 : min(cbSceneParam._m0[80u].w, _421));
        float _2451 = _2450 / _421;
        float _2462 = _2451 * _472;
        float _2463 = _473 * _2451;
        float _2464 = (-0.0) - _2463;
        float _2465 = _2451 * _474;
        float _2467 = (cbSceneParam._m0[77u].w * _2464) / _2450;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2463;
        float _2475 = sqrt(((_2462 * _2462) + (_2463 * _2463)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2450)) * _2475;
        float _2483 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2485 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2662;
        if (abs((_2464 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2662 = ((((_2468 > 0.0) ? exp2(_2483 * _2468) : (2.0 - exp2(_2485 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2608 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2662 = ((abs(_2475 / _2464) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2483 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2483 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2485 * _2617) - exp2(_2485 * _2618)) * _2606))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2664 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2673 = exp2((_2662 * (-1.44269502162933349609375)) * (1.0 - _2664.w));
        float _2674 = log2(_2673);
        float _2690 = log2(_2395);
        _2487 = (exp2(_2690 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].x)) * _2664.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2489 = (exp2(_2690 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].y)) * _2664.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2491 = (exp2(_2690 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2674 * cbSceneParam._m0[78u].z)) * _2664.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2493 = _2673 * _2395;
    }
    else
    {
        _2487 = _2392;
        _2489 = _2393;
        _2491 = _2394;
        _2493 = _2395;
    }
    bool _2700;
    vec4 _2503;
    vec4 _2525;
    float _2527;
    float _2531;
    float _2532;
    float _2533;
    float _2534;
    bool _2544;
    for (;;)
    {
        _2503 = cbMatDynParam._m0[0u];
        float _2505 = roundEven(_2503.y);
        bool _2506 = _2505 == 3.0;
        float _2507 = log2(_2493);
        float _2514 = exp2(_2507 * cbSceneParam._m0[78u].x) * _2364;
        float _2515 = exp2(_2507 * cbSceneParam._m0[78u].y) * _2365;
        float _2516 = exp2(_2507 * cbSceneParam._m0[78u].z) * _2366;
        float _2523 = _488 + (-0.5);
        _2525 = cbMtdParam._m0[1u];
        _2527 = _2525.y * _2523;
        float _2530 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2531 = _2530 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2487)));
        _2532 = _2530 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2489)));
        _2533 = _2530 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2491)));
        _2534 = _2523 * 0.999000012874603271484375;
        _2544 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2544)
        {
            if ((cbInstanceData._m0[_540 + 7u].x + _2534) < 0.5)
            {
                _2700 = true;
                break;
            }
        }
        uint _2641 = _542 + uint(_2503.w);
        if ((cbInstanceData._m0[_2641].w < 1.0) && ((cbInstanceData._m0[_2641].w + _2534) < 0.5))
        {
            _2700 = true;
            break;
        }
        if ((_2527 + 1.0) < _2525.x)
        {
            _2700 = true;
            break;
        }
        _2700 = false;
        break;
    }
    float _2905;
    if (_2700)
    {
        discard_state = true;
        _2905 = 0.0;
    }
    else
    {
        _2905 = cbInstanceData._m0[_2367].w;
    }
    SV_Target.x = _2531;
    SV_Target.y = _2532;
    SV_Target.z = _2533;
    SV_Target.w = _2905;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
    discard_exit();
}


