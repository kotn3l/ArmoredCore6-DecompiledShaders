#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _959;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3318 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))));
    float _261 = fma(_258, _215, fma(_251, _208, _249 * _194));
    float _264 = fma(_258, _216, fma(_251, _209, _249 * _195));
    float _267 = fma(_258, _217, fma(_251, _210, _249 * _196));
    float _271 = inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267)));
    float _272 = _271 * _261;
    float _273 = _271 * _264;
    float _274 = _271 * _267;
    float _279 = cbMtdParam._m0[10u].x + dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3329 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _287 = dot(vec4(_272, _273, _274, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3340 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _289 = (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) + (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)));
    vec4 _307 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _307.x * cbMtdParam._m0[9u].x;
    float _313 = _307.y * cbMtdParam._m0[9u].y;
    float _314 = _307.z * cbMtdParam._m0[9u].z;
    vec4 _326 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _337 = ((_326.x - _312) * _289) + _312;
    float _338 = ((_326.y - _313) * _289) + _313;
    float _339 = ((_326.z - _314) * _289) + _314;
    vec4 _351 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _353 = _351.x;
    float _355 = _353 - (_353 * _289);
    vec4 _368 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _375 = (_368.x * 2.0) + (-1.0);
    float _376 = (_368.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3351 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _385 = ((_368.z - _245) * _289) + _245;
    float _394 = ((sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) - _258) * _289) + _258;
    float _398 = (((_375 - _249) * _289) + _249) + (cbMtdParam._m0[10u].y * _249);
    float _399 = (((_376 - _251) * _289) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _402 = fma(_394, _215, fma(_399, _208, _398 * _194));
    float _405 = fma(_394, _216, fma(_399, _209, _398 * _195));
    float _408 = fma(_394, _217, fma(_399, _210, _398 * _196));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3362 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _416 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3384 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _3395 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3406 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _420 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _487 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _489 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
    float _494 = _487 * _493;
    float _495 = _488 * _493;
    float _496 = _489 * _493;
    float _502 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _503 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _524 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _527 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _530 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _543 = uint(roundEven(NORMAL.w)) * 13u;
    uint _546 = (_543 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _552 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_546].x;
    float _553 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_546].y;
    float _554 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_546].z;
    float _3417 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _3439 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _558 = 1.0 - _420;
    float _559 = _555 * _558;
    float _560 = _556 * _558;
    float _561 = _557 * _558;
    float _566 = (_555 + (-0.039999999105930328369140625)) * _420;
    float _567 = (_556 + (-0.039999999105930328369140625)) * _420;
    float _568 = (_557 + (-0.039999999105930328369140625)) * _420;
    float _569 = _566 + 0.039999999105930328369140625;
    float _571 = _567 + 0.039999999105930328369140625;
    float _572 = _568 + 0.039999999105930328369140625;
    vec4 _581 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _502, cbSceneParam._m0[86u].y * _503));
    float _584 = _581.x * TEXCOORD.z;
    float _585 = dot(vec3(_413, _414, _415), vec3(_494, _495, _496));
    float _588 = _585 * 2.0;
    float _592 = (_588 * _413) - _494;
    float _593 = (_588 * _414) - _495;
    float _594 = (_588 * _415) - _496;
    float _598 = abs(dot(vec3(_494, _495, _496), vec3(_413, _414, _415)));
    float _3450 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _600 = sqrt(_416);
    float _613 = exp2((_600 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_600 * 3.0));
    float _619 = (1.0 - _613) * ((_600 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _620 = _613 * _600;
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _958;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _683 = fma(_656, cbModelParam._m0[26u].z, fma(_652, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648));
        float _687 = fma(_656, cbModelParam._m0[27u].z, fma(_652, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648));
        float _691 = fma(_656, cbModelParam._m0[28u].z, fma(_652, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648));
        float _716 = _648 + _413;
        float _717 = _652 + _414;
        float _718 = _656 + _415;
        float _728 = fma(_718, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716)) - _683;
        float _729 = fma(_718, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716)) - _687;
        float _730 = fma(_718, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716)) - _691;
        float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
        float _747 = ((_734 * _728) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_683 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_734 * _729) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_687 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_734 * _730) / cbModelParam._m0[34u].z) + ((((((_691 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_747, _748, _749), 0.0);
        float _786 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_752.x + (-0.5));
        float _788 = _786 * (_752.y + (-0.5));
        float _789 = _786 * (_752.z + (-0.5));
        float _796 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_759.x + (-0.5));
        float _798 = _796 * (_759.y + (-0.5));
        float _799 = _796 * (_759.z + (-0.5));
        float _806 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_766.x + (-0.5));
        float _808 = _806 * (_766.y + (-0.5));
        float _809 = _806 * (_766.z + (-0.5));
        float _816 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_773.x + (-0.5));
        float _818 = _816 * (_773.y + (-0.5));
        float _819 = _816 * (_773.z + (-0.5));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = _787 * 0.5;
        float _824 = _797 * 0.5;
        float _825 = _807 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _840 = (dot(vec3(_413, _414, _415), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _850 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3498 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_852 + 1.0))) + _857) * _820;
        float _867 = _788 * 0.5;
        float _868 = _798 * 0.5;
        float _869 = _808 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _883 = (dot(vec3(_413, _414, _415), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _892 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3531 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_894 + 1.0))) + _899) * _821;
        float _909 = _789 * 0.5;
        float _910 = _799 * 0.5;
        float _911 = _809 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_413, _414, _415), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3564 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_936 + 1.0))) + _941) * _822;
        _958 = _789;
        _960 = _788;
        _961 = _787;
        _962 = _799;
        _963 = _798;
        _964 = _797;
        _965 = _809;
        _966 = _808;
        _967 = _807;
        _968 = _822;
        _969 = _821;
        _970 = _820;
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
    }
    else
    {
        _958 = _959;
        _960 = _959;
        _961 = _959;
        _962 = _959;
        _963 = _959;
        _964 = _959;
        _965 = _959;
        _966 = _959;
        _967 = _959;
        _968 = _959;
        _969 = _959;
        _970 = _959;
        _971 = 0.0;
        _972 = 0.0;
        _973 = 0.0;
    }
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _999 = fma(_656, cbModelParam._m0[30u].z, fma(_652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _648));
        float _1003 = fma(_656, cbModelParam._m0[31u].z, fma(_652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _648));
        float _1007 = fma(_656, cbModelParam._m0[32u].z, fma(_652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _648));
        float _1030 = _648 + _413;
        float _1031 = _652 + _414;
        float _1032 = _656 + _415;
        float _1042 = fma(_1032, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030)) - _999;
        float _1043 = fma(_1032, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030)) - _1003;
        float _1044 = fma(_1032, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030)) - _1007;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_999 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1003 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[35u].z) + ((((((_1007 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1098 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1065.x + (-0.5));
        float _1100 = _1098 * (_1065.y + (-0.5));
        float _1101 = _1098 * (_1065.z + (-0.5));
        float _1108 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1072.x + (-0.5));
        float _1110 = _1108 * (_1072.y + (-0.5));
        float _1111 = _1108 * (_1072.z + (-0.5));
        float _1118 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1079.x + (-0.5));
        float _1120 = _1118 * (_1079.y + (-0.5));
        float _1121 = _1118 * (_1079.z + (-0.5));
        float _1128 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1086.x + (-0.5));
        float _1130 = _1128 * (_1086.y + (-0.5));
        float _1131 = _1128 * (_1086.z + (-0.5));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = _1099 * 0.5;
        float _1136 = _1109 * 0.5;
        float _1137 = _1119 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_413, _414, _415), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3627 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1162 + 1.0))) + _1167) * _1132;
        float _1177 = _1100 * 0.5;
        float _1178 = _1110 * 0.5;
        float _1179 = _1120 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_413, _414, _415), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3660 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1204 + 1.0))) + _1209) * _1133;
        float _1219 = _1101 * 0.5;
        float _1220 = _1111 * 0.5;
        float _1221 = _1121 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_413, _414, _415), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3693 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1246 + 1.0))) + _1251) * _1134;
        _1268 = _1101;
        _1269 = _1100;
        _1270 = _1099;
        _1271 = _1111;
        _1272 = _1110;
        _1273 = _1109;
        _1274 = _1121;
        _1275 = _1120;
        _1276 = _1119;
        _1277 = _1134;
        _1278 = _1133;
        _1279 = _1132;
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _959;
        _1269 = _959;
        _1270 = _959;
        _1271 = _959;
        _1272 = _959;
        _1273 = _959;
        _1274 = _959;
        _1275 = _959;
        _1276 = _959;
        _1277 = _959;
        _1278 = _959;
        _1279 = _959;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _971)) + _971;
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _972)) + _972;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _973)) + _973;
    float _1315 = fma(_1294, cbSceneParam._m0[89u].z, fma(_1293, cbSceneParam._m0[89u].y, _1292 * cbSceneParam._m0[89u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[90u].z, fma(_1293, cbSceneParam._m0[90u].y, _1292 * cbSceneParam._m0[90u].x));
    float _1321 = fma(_1294, cbSceneParam._m0[91u].z, fma(_1293, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1292));
    float _1336 = _592 * 0.5;
    float _1337 = _593 * 0.5;
    float _1338 = _594 * 0.5;
    float _1339 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1342 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1345 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1379;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1352 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_958, _962, _965, _968));
        float _1356 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_960, _963, _966, _969));
        float _1360 = dot(vec4(_1336, _1337, _1338, 1.0), vec4(_961, _964, _967, _970));
        float _1367 = dot(vec4(cbModelParam._m0[39u]), vec4(_1336, _1337, _1338, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1367) ? 0.0 : (isnan(0.0) ? _1367 : max(0.0, _1367))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1390;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1381 = dot(vec4(cbModelParam._m0[40u]), vec4(_1336, _1337, _1338, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)), isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1394 = (_1390 * cbModelParam._m0[1u].x) + (_1379 * (1.0 - cbModelParam._m0[1u].x));
    float _1404 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1404 : min(cbModelParam._m0[25u].z, _1404));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1454 = fma(_656, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648)) + cbModelParam._m0[13u].w;
        float _1458 = fma(_656, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648)) + cbModelParam._m0[14u].w;
        float _1462 = fma(_656, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648)) + cbModelParam._m0[15u].w;
        float _1465 = fma(_594, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _592));
        float _1468 = fma(_594, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _592));
        float _1471 = fma(_594, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _592));
        float _1499;
        if (_1465 > 0.0)
        {
            _1499 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1499 = frontier_phi_16_14_ladder;
        }
        float _1726;
        if (_1468 > 0.0)
        {
            _1726 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1726 = frontier_phi_25_21_ladder;
        }
        float _1983;
        if (_1471 > 0.0)
        {
            _1983 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1983 = frontier_phi_37_32_ladder;
        }
        float _1985 = isnan(_1726) ? _1499 : (isnan(_1499) ? _1726 : min(_1499, _1726));
        float _1986 = isnan(_1983) ? _1985 : (isnan(_1985) ? _1983 : min(_1985, _1983));
        float _1990 = (_1986 * _1465) + _1454;
        float _1991 = (_1986 * _1468) + _1458;
        float _1992 = (_1986 * _1471) + _1462;
        float _1993 = _1986 * 9.9999997473787516355514526367188e-05;
        float _1995 = (-1.0) - _1993;
        float _1997 = _1993 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1992 > _1997) || ((_1992 < _1995) || ((_1991 > _1997) || ((_1991 < _1995) || ((_1990 < _1995) || (_1990 > _1997))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1992, cbModelParam._m0[9u].z, fma(_1991, cbModelParam._m0[9u].y, _1990 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1992, cbModelParam._m0[10u].z, fma(_1991, cbModelParam._m0[10u].y, _1990 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1992, cbModelParam._m0[11u].z, fma(_1991, cbModelParam._m0[11u].y, _1990 * cbModelParam._m0[11u].x))), _1405);
            frontier_phi_15_37_ladder = _2120.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2120.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2120.x * cbModelParam._m0[1u].y;
        }
        _1487 = frontier_phi_15_37_ladder_2;
        _1489 = frontier_phi_15_37_ladder_1;
        _1491 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_592, _593, _594), _1405);
        _1487 = _1475.x * cbModelParam._m0[1u].y;
        _1489 = _1475.y * cbModelParam._m0[1u].y;
        _1491 = _1475.z * cbModelParam._m0[1u].y;
    }
    float _1495 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1495 : min(cbModelParam._m0[25u].w, _1495));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1553 = fma(_656, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648)) + cbModelParam._m0[21u].w;
        float _1557 = fma(_656, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648)) + cbModelParam._m0[22u].w;
        float _1561 = fma(_656, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648)) + cbModelParam._m0[23u].w;
        float _1564 = fma(_594, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _592));
        float _1567 = fma(_594, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _592));
        float _1570 = fma(_594, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _592));
        float _1731;
        if (_1564 > 0.0)
        {
            _1731 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1731 = frontier_phi_27_23_ladder;
        }
        float _2010;
        if (_1567 > 0.0)
        {
            _2010 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2010 = frontier_phi_39_34_ladder;
        }
        float _2223;
        if (_1570 > 0.0)
        {
            _2223 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2223 = frontier_phi_48_45_ladder;
        }
        float _2225 = isnan(_2010) ? _1731 : (isnan(_1731) ? _2010 : min(_1731, _2010));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1564) + _1553;
        float _2231 = (_2226 * _1567) + _1557;
        float _2232 = (_2226 * _1570) + _1561;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2233;
        float _2236 = _2233 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2232 > _2236) || ((_2232 < _2234) || ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 < _2234) || (_2230 > _2236))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2232, cbModelParam._m0[17u].z, fma(_2231, cbModelParam._m0[17u].y, _2230 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2232, cbModelParam._m0[18u].z, fma(_2231, cbModelParam._m0[18u].y, _2230 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2232, cbModelParam._m0[19u].z, fma(_2231, cbModelParam._m0[19u].y, _2230 * cbModelParam._m0[19u].x))), _1496);
            frontier_phi_24_48_ladder = _2430.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2430.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2430.x * cbModelParam._m0[1u].z;
        }
        _1589 = frontier_phi_24_48_ladder_2;
        _1591 = frontier_phi_24_48_ladder_1;
        _1593 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_592, _593, _594), _1496);
        _1589 = _1573.x * cbModelParam._m0[1u].z;
        _1591 = _1573.y * cbModelParam._m0[1u].z;
        _1593 = _1573.z * cbModelParam._m0[1u].z;
    }
    float _1606 = (((_619 * _569) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_619 * _571) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1610 = (((_619 * _572) + _620) * _584) * ((cbModelParam._m0[1u].w * (_1593 - _1491)) + _1491);
    float _1613 = fma(_1610, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1610, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1610, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    vec4 _1627 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_502, _503));
    float _1629 = _1627.w;
    float _1641 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1629);
    float _1642 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1629);
    float _1643 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1629);
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_543 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _584 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1685 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1689 = _1649 | 1u;
    float _1700 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_413, _414, _415));
    float _1703 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_413, _414, _415));
    float _3829 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _3840 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1708 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
    float _1710 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.3183098733425140380859375;
    float _1717 = ((cbLight._m0[_1666].x * _1672) * _1710) + (((cbLight._m0[_1676].x * _1641) * _1685) * _1708);
    float _1718 = ((_1672 * cbLight._m0[_1666].y) * _1710) + (((cbLight._m0[_1676].y * _1642) * _1685) * _1708);
    float _1719 = ((_1672 * cbLight._m0[_1666].z) * _1710) + (((cbLight._m0[_1676].z * _1643) * _1685) * _1708);
    uvec4 _1723 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1725 = _1723.x == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1725)
    {
        _1736 = _1717;
        _1738 = _1718;
        _1740 = _1719;
    }
    else
    {
        uint _1744 = _1649 + 6u;
        float _1760 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1761 = _1760 * _1760;
        float _3851 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1763 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1736 = (((cbLight._m0[_1744].x * 0.3183098733425140380859375) * _1762) * _1763) + _1717;
        _1738 = (((cbLight._m0[_1744].y * 0.3183098733425140380859375) * _1762) * _1763) + _1718;
        _1740 = (((cbLight._m0[_1744].z * 0.3183098733425140380859375) * _1762) * _1763) + _1719;
    }
    bool _1743 = _1723.y == 0u;
    float _1781;
    float _1783;
    float _1785;
    if (_1743)
    {
        _1781 = _1736;
        _1783 = _1738;
        _1785 = _1740;
    }
    else
    {
        uint _1954 = _1649 + 7u;
        float _1970 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1971 = _1970 * _1970;
        float _3867 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1972 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1973 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1781 = (((cbLight._m0[_1954].x * 0.3183098733425140380859375) * _1972) * _1973) + _1736;
        _1783 = (((cbLight._m0[_1954].y * 0.3183098733425140380859375) * _1972) * _1973) + _1738;
        _1785 = (((cbLight._m0[_1954].z * 0.3183098733425140380859375) * _1972) * _1973) + _1740;
    }
    uint _1788 = _1649 + 8u;
    float _1801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _416) * 0.949999988079071044921875);
    float _1802 = _1801 * _1801;
    float _1803 = cbLight._m0[_1649].x + _494;
    float _1804 = cbLight._m0[_1649].y + _495;
    float _1805 = cbLight._m0[_1649].z + _496;
    float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
    float _1810 = _1809 * _1803;
    float _1811 = _1809 * _1804;
    float _1812 = _1809 * _1805;
    float _1813 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1649].xyz));
    float _3883 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _1817 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1818 = dot(vec3(_413, _414, _415), vec3(_1810, _1811, _1812));
    float _3905 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1821 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1822 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1810, _1811, _1812));
    float _3916 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1826 = _1802 * _1802;
    float _1830 = ((_1821 * _1821) * (_1826 + (-1.0))) + 1.0;
    float _1838 = exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0);
    float _1839 = 0.959999978542327880859375 - _566;
    float _1841 = 0.959999978542327880859375 - _567;
    float _1842 = 0.959999978542327880859375 - _568;
    float _1849 = 1.0 - _1802;
    float _1860 = (0.5 / (((_1817 * ((_1816 * _1849) + _1802)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1849) + _1802) * _1816))) * _1816;
    float _3927 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1862 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1826 / ((_1830 * _1830) * 3.141590118408203125));
    uint _1876 = _1649 + 9u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _416) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1689].x + _494;
    float _1890 = cbLight._m0[_1689].y + _495;
    float _1891 = cbLight._m0[_1689].z + _496;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1689].xyz));
    float _3938 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1903 = dot(vec3(_413, _414, _415), vec3(_1896, _1897, _1898));
    float _3949 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1896, _1897, _1898));
    float _3960 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1888 * _1888;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1922 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _1929 = 1.0 - _1888;
    float _1939 = (0.5 / (((_1817 * ((_1902 * _1929) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _1929) + _1888) * _1902))) * _1902;
    float _3971 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    float _1951 = (((((_1922 * _1839) + _569) * cbLight._m0[_1876].x) * _1941) * _1672) + ((((cbLight._m0[_1788].x * _1641) * ((_1838 * _1839) + _569)) * _1862) * _1685);
    float _1952 = (((((_1922 * _1841) + _571) * cbLight._m0[_1876].y) * _1941) * _1672) + ((((cbLight._m0[_1788].y * _1642) * ((_1838 * _1841) + _571)) * _1862) * _1685);
    float _1953 = (((((_1922 * _1842) + _572) * cbLight._m0[_1876].z) * _1941) * _1672) + ((((cbLight._m0[_1788].z * _1643) * ((_1838 * _1842) + _572)) * _1862) * _1685);
    float _2015;
    float _2017;
    float _2019;
    if (_1725)
    {
        _2015 = _1951;
        _2017 = _1952;
        _2019 = _1953;
    }
    else
    {
        uint _2021 = _1649 + 2u;
        uint _2025 = _1649 + 10u;
        float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _416) * 0.949999988079071044921875);
        float _2040 = _2039 * _2039;
        float _2041 = cbLight._m0[_2021].x + _494;
        float _2042 = cbLight._m0[_2021].y + _495;
        float _2043 = cbLight._m0[_2021].z + _496;
        float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
        float _2048 = _2047 * _2041;
        float _2049 = _2047 * _2042;
        float _2050 = _2047 * _2043;
        float _2051 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2021].xyz));
        float _3982 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2055 = dot(vec3(_413, _414, _415), vec3(_2048, _2049, _2050));
        float _3993 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2058 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _2059 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2048, _2049, _2050));
        float _4004 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2063 = _2040 * _2040;
        float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
        float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
        float _2081 = 1.0 - _2040;
        float _2091 = (0.5 / (((_1817 * ((_2054 * _2081) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2081) + _2040) * _2054))) * _2054;
        float _4015 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2093 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
        float _2094 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2015 = (((((_2074 * _1839) + _569) * cbLight._m0[_2025].x) * _2093) * _2094) + _1951;
        _2017 = (((((_2074 * _1841) + _571) * cbLight._m0[_2025].y) * _2093) * _2094) + _1952;
        _2019 = (((((_2074 * _1842) + _572) * cbLight._m0[_2025].z) * _2093) * _2094) + _1953;
    }
    float _2129;
    float _2131;
    float _2133;
    if (_1743)
    {
        _2129 = _2015;
        _2131 = _2017;
        _2133 = _2019;
    }
    else
    {
        uint _2140 = _1649 + 3u;
        uint _2144 = _1649 + 11u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _416) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _494;
        float _2161 = cbLight._m0[_2140].y + _495;
        float _2162 = cbLight._m0[_2140].z + _496;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2140].xyz));
        float _4031 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2174 = dot(vec3(_413, _414, _415), vec3(_2167, _2168, _2169));
        float _4042 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4053 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2193 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
        float _2200 = 1.0 - _2159;
        float _2210 = (0.5 / (((_1817 * ((_2173 * _2200) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1817 * _2200) + _2159) * _2173))) * _2173;
        float _4064 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2212 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2213 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2129 = (((((_2193 * _1839) + _569) * cbLight._m0[_2144].x) * _2212) * _2213) + _2015;
        _2131 = (((((_2193 * _1841) + _571) * cbLight._m0[_2144].y) * _2212) * _2213) + _2017;
        _2133 = (((((_2193 * _1842) + _572) * cbLight._m0[_2144].z) * _2212) * _2213) + _2019;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1647.y == 0u)
    {
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2288;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2288;
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2288;
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.x;
        uint _2315 = uint((float(_2303.y) * floor(float(uint(cbSceneParam._m0[85u].y * _503) / _2304))) + floor(float(uint(cbSceneParam._m0[85u].x * _502) / _2304)));
        float _2325 = (log2(_2291 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2326 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        uint _2329 = uint(isnan(14.0) ? _2326 : (isnan(_2326) ? 14.0 : min(_2326, 14.0)));
        uvec4 _2334 = texelFetch(g_lightClusterGridBuffer, int(((_2329 << 2u) + (_2315 << 6u)) >> 2u));
        uint _2335 = _2334.x;
        uint _2336 = _2303.z;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((((1u << ((_2336 >> 4u) & 15u)) + 4294967295u) & _2335) == 0u) || ((_2336 & 240u) == 0u))
        {
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
        }
        else
        {
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            uint _2585 = 0u;
            uint _2594;
            bool _2595;
            for (;;)
            {
                _2594 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                _2595 = _2594 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2595)
                {
                    frontier_phi_63_pred = _2584;
                    frontier_phi_63_pred_1 = _2583;
                    frontier_phi_63_pred_2 = _2582;
                    frontier_phi_63_pred_3 = _2581;
                    frontier_phi_63_pred_4 = _2580;
                    frontier_phi_63_pred_5 = _2579;
                }
                else
                {
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    uint _2709;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2584;
                    _2709 = _2594;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    for (;;)
                    {
                        uint _2713 = uint(findLSB(_2709)) + (_2585 << 5u);
                        uint _2710 = (_2709 + 4294967295u) & _2709;
                        uint _2715 = _2713 * 48u;
                        vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2735 = (_2713 * 48u) + 4u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2754 = (_2713 * 48u) + 8u;
                        vec3 _2765 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x));
                        float _2769 = _2729.x - _2289;
                        float _2770 = _2729.y - _2290;
                        float _2771 = _2729.z - _2291;
                        float _2772 = dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771));
                        float _2775 = inversesqrt(_2772);
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2779 = dot(vec3(_524, _527, _530), vec3(_2776, _2777, _2778));
                        float _2784 = 1.0 - (_2772 * _2729.w);
                        float _4090 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2786 = sqrt(_2772) * _2748.w;
                        float _2789 = 1.39999997615814208984375 / (_2786 + 1.39999997615814208984375);
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2779) + _2790;
                        float _2796 = _2786 * _2786;
                        float _2800 = ((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2785) / ((_2796 * 0.699999988079071044921875) + 1.0);
                        float _2804 = (-0.0) - _2289;
                        float _2805 = (-0.0) - _2290;
                        float _2806 = (-0.0) - _2291;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2811 = _2810 * _2804;
                        float _2812 = _2810 * _2805;
                        float _2813 = _2810 * _2806;
                        float _2821 = exp2(log2(1.0 / ((_2796 * 3.5) + 5.0)) * 0.25);
                        float _2822 = 1.0 - _600;
                        float _2829 = sqrt(1.0 - ((1.0 - (_2822 * _2822)) * (1.0 - (_2821 * _2821))));
                        float _2830 = _2829 * _2829;
                        float _2831 = _2830 * _2830;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2842 = dot(vec3(_524, _527, _530), vec3(_2811, _2812, _2813));
                        float _4106 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2845 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2846 = dot(vec3(_524, _527, _530), vec3(_2838 * _2832, _2838 * _2833, _2838 * _2834));
                        float _4117 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2853 = ((_2849 * _2849) * (_2831 + (-1.0))) + 1.0;
                        float _2854 = _2789 * _2830;
                        float _2855 = _2854 * _2854;
                        float _2858 = ((1.0 - _2855) * _2779) + _2855;
                        float _4128 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
                        float _2860 = 1.0 - _2830;
                        float _2870 = (0.5 / (((_2859 * ((_2845 * _2860) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2859 * _2860) + _2830) * _2845))) * _2859;
                        float _4139 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2881 = (((_2831 * 3.1415927410125732421875) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) / ((_2853 * _2853) * ((_2796 * 2.1991131305694580078125) + 3.141590118408203125))) * _2785;
                        _2638 = (_2800 * _2748.x) + _2706;
                        _2639 = (_2800 * _2748.y) + _2707;
                        _2640 = (_2800 * _2748.z) + _2708;
                        _2635 = (_2881 * _2765.x) + _2703;
                        _2636 = (_2881 * _2765.y) + _2704;
                        _2637 = (_2881 * _2765.z) + _2705;
                        if (_2710 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2640;
                            _2709 = _2710;
                        }
                    }
                    frontier_phi_63_pred = _2640;
                    frontier_phi_63_pred_1 = _2639;
                    frontier_phi_63_pred_2 = _2638;
                    frontier_phi_63_pred_3 = _2637;
                    frontier_phi_63_pred_4 = _2636;
                    frontier_phi_63_pred_5 = _2635;
                }
                _2446 = frontier_phi_63_pred;
                _2444 = frontier_phi_63_pred_1;
                _2442 = frontier_phi_63_pred_2;
                _2440 = frontier_phi_63_pred_3;
                _2438 = frontier_phi_63_pred_4;
                _2436 = frontier_phi_63_pred_5;
                uint _2586 = _2585 + 1u;
                if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2579 = _2436;
                    _2580 = _2438;
                    _2581 = _2440;
                    _2582 = _2442;
                    _2583 = _2444;
                    _2584 = _2446;
                    _2585 = _2586;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
        }
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.z;
        uint _2452 = (_2450 >> 8u) & 15u;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((4294967295u << _2452) & _2335) == 0u)
        {
            _2547 = _2435;
            _2549 = _2437;
            _2551 = _2439;
            _2553 = _2441;
            _2555 = _2443;
            _2557 = _2445;
        }
        else
        {
            float _2572 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
            float _2573 = _2572 * _2289;
            float _2574 = _2572 * _2290;
            float _2575 = _2572 * _2291;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2452 < ((_2450 >> 12u) & 15u))
            {
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2686 = _2435;
                float _2687 = _2437;
                float _2688 = _2439;
                float _2689 = _2441;
                float _2690 = _2443;
                float _2691 = _2445;
                uint _2692 = _2452;
                uint _2701;
                bool _2702;
                for (;;)
                {
                    _2701 = texelFetch(g_lightClassification, int((((_2329 << 5u) + (_2315 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                    _2702 = _2701 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2702)
                    {
                        frontier_phi_69_pred = _2691;
                        frontier_phi_69_pred_1 = _2690;
                        frontier_phi_69_pred_2 = _2689;
                        frontier_phi_69_pred_3 = _2688;
                        frontier_phi_69_pred_4 = _2687;
                        frontier_phi_69_pred_5 = _2686;
                    }
                    else
                    {
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        float _2903 = _2690;
                        float _2904 = _2691;
                        uint _2905 = _2701;
                        uint _2906;
                        vec4 _2931;
                        float _2932;
                        vec4 _2947;
                        vec3 _2959;
                        vec4 _2975;
                        vec4 _2991;
                        float _3038;
                        bool _3039;
                        for (;;)
                        {
                            uint _2916 = ((_2692 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2905));
                            _2906 = (_2905 + 4294967295u) & _2905;
                            uint _2918 = _2916 * 40u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2932 = _2931.w;
                            uint _2934 = (_2916 * 40u) + 4u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2949 = (_2916 * 40u) + 8u;
                            _2959 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x));
                            uint _2962 = (_2916 * 40u) + 16u;
                            _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2978 = (_2916 * 40u) + 20u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            uint _2994 = (_2916 * 40u) + 24u;
                            vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3013 = (_2916 * 40u) + 28u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3038 = fma(_2291, _3026.z, fma(_2290, _3026.y, _3026.x * _2289)) + _3026.w;
                            _3039 = !((fma(_2291, _3007.z, fma(_2290, _3007.y, _3007.x * _2289)) + _3007.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3039)
                            {
                                float _3066 = _2931.x - _2289;
                                float _3067 = _2931.y - _2290;
                                float _3068 = _2931.z - _2291;
                                float _3069 = dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068));
                                float _3072 = inversesqrt(_3069);
                                float _3073 = _3072 * _3066;
                                float _3074 = _3072 * _3067;
                                float _3075 = _3072 * _3068;
                                float _3079 = 1.0 - (_3069 / (_2932 * _2932));
                                float _4150 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3084 = sqrt(_3069) * _2947.w;
                                float _3086 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                                float _3087 = _3086 * _3086;
                                float _3090 = ((1.0 - _3087) * dot(vec3(_3073, _3074, _3075), vec3(_524, _527, _530))) + _3087;
                                float _3093 = _3084 * _3084;
                                float _3097 = (fma(_2291, _2975.z, fma(_2290, _2975.y, _2975.x * _2289)) + _2975.w) / _3038;
                                float _3098 = (fma(_2291, _2991.z, fma(_2290, _2991.y, _2991.x * _2289)) + _2991.w) / _3038;
                                float _3102 = 1.0 - dot(vec2(_3097, _3098), vec2(_3097, _3098));
                                float _4166 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3104 = _3103 * (((isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))) * _3080) / ((_3093 * 0.699999988079071044921875) + 1.0));
                                float _3116 = exp2(log2(1.0 / ((_3093 * 3.5) + 5.0)) * 0.25);
                                float _3117 = 1.0 - _600;
                                float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                                float _3125 = _3124 * _3124;
                                float _3126 = _3125 * _3125;
                                float _3127 = _3073 - _2573;
                                float _3128 = _3074 - _2574;
                                float _3129 = _3075 - _2575;
                                float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                                float _3137 = dot(vec3(_524, _527, _530), vec3((-0.0) - _2573, (-0.0) - _2574, (-0.0) - _2575));
                                float _4177 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3141 = dot(vec3(_524, _527, _530), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                                float _4188 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                                float _3149 = _3086 * _3125;
                                float _3150 = _3149 * _3149;
                                float _3156 = ((1.0 - _3150) * dot(vec3(_524, _527, _530), vec3(_3073, _3074, _3075))) + _3150;
                                float _4199 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3158 = 1.0 - _3125;
                                float _3168 = (0.5 / (((_3157 * ((_3140 * _3158) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3125) * _3140))) * _3157;
                                float _4210 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3178 = (_3103 * _3080) * (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) / ((_3148 * _3148) * ((_3093 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3104 * _2947.z;
                                frontier_phi_75_pred_1 = _3104 * _2947.y;
                                frontier_phi_75_pred_2 = _3104 * _2947.x;
                                frontier_phi_75_pred_3 = _3178 * _2959.z;
                                frontier_phi_75_pred_4 = _3178 * _2959.y;
                                frontier_phi_75_pred_5 = _3178 * _2959.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3187 = frontier_phi_75_pred;
                            _3186 = frontier_phi_75_pred_1;
                            _3185 = frontier_phi_75_pred_2;
                            _3184 = frontier_phi_75_pred_3;
                            _3183 = frontier_phi_75_pred_4;
                            _3182 = frontier_phi_75_pred_5;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            if (_2906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2906;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2891;
                        frontier_phi_69_pred_1 = _2890;
                        frontier_phi_69_pred_2 = _2889;
                        frontier_phi_69_pred_3 = _2888;
                        frontier_phi_69_pred_4 = _2887;
                        frontier_phi_69_pred_5 = _2886;
                    }
                    _2558 = frontier_phi_69_pred;
                    _2556 = frontier_phi_69_pred_1;
                    _2554 = frontier_phi_69_pred_2;
                    _2552 = frontier_phi_69_pred_3;
                    _2550 = frontier_phi_69_pred_4;
                    _2548 = frontier_phi_69_pred_5;
                    uint _2693 = _2692 + 1u;
                    if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2686 = _2548;
                        _2687 = _2550;
                        _2688 = _2552;
                        _2689 = _2554;
                        _2690 = _2556;
                        _2691 = _2558;
                        _2692 = _2693;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2558;
                frontier_phi_57_58_ladder_1 = _2556;
                frontier_phi_57_58_ladder_2 = _2554;
                frontier_phi_57_58_ladder_3 = _2552;
                frontier_phi_57_58_ladder_4 = _2550;
                frontier_phi_57_58_ladder_5 = _2548;
            }
            else
            {
                frontier_phi_57_58_ladder = _2445;
                frontier_phi_57_58_ladder_1 = _2443;
                frontier_phi_57_58_ladder_2 = _2441;
                frontier_phi_57_58_ladder_3 = _2439;
                frontier_phi_57_58_ladder_4 = _2437;
                frontier_phi_57_58_ladder_5 = _2435;
            }
            _2547 = frontier_phi_57_58_ladder_5;
            _2549 = frontier_phi_57_58_ladder_4;
            _2551 = frontier_phi_57_58_ladder_3;
            _2553 = frontier_phi_57_58_ladder_2;
            _2555 = frontier_phi_57_58_ladder_1;
            _2557 = frontier_phi_57_58_ladder;
        }
        float _2562 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _2347 = (_2562 * _2553) + _1781;
        _2349 = (_2562 * _2555) + _1783;
        _2351 = (_2562 * _2557) + _1785;
        _2353 = ((_2547 * _569) * _2562) + _2129;
        _2355 = ((_2549 * _571) * _2562) + _2131;
        _2357 = ((_2551 * _572) * _2562) + _2133;
    }
    else
    {
        _2347 = _1781;
        _2349 = _1783;
        _2351 = _1785;
        _2353 = _2129;
        _2355 = _2131;
        _2357 = _2133;
    }
    float _4226 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4237 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4248 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    uint _2377 = _543 + 6u;
    float _2385 = _502 / cbSceneParam._m0[86u].x;
    float _2386 = _503 / cbSceneParam._m0[86u].y;
    vec4 _2400 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2402 = _2400.x;
    float _2403 = _2400.y;
    float _2404 = _2400.z;
    float _2405 = _2400.w;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2460 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2461 = _2460 / _436;
        float _2472 = _2461 * _487;
        float _2473 = _488 * _2461;
        float _2474 = (-0.0) - _2473;
        float _2475 = _2461 * _489;
        float _2477 = (cbSceneParam._m0[77u].w * _2474) / _2460;
        float _2478 = _2477 + cbSceneParam._m0[79u].w;
        float _2479 = cbSceneParam._m0[79u].w - _2473;
        float _2485 = sqrt(((_2472 * _2472) + (_2473 * _2473)) + (_2475 * _2475));
        float _2488 = (1.0 - (cbSceneParam._m0[77u].w / _2460)) * _2485;
        float _2493 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2495 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2648;
        if (abs((_2474 - _2477) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2648 = ((((_2478 > 0.0) ? exp2(_2493 * _2478) : (2.0 - exp2(_2495 * _2478))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2488;
        }
        else
        {
            float _2608 = 1.0 / cbSceneParam._m0[80u].x;
            float _2609 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : max(_2478, _2479));
            float _2610 = isnan(_2479) ? _2478 : (isnan(_2478) ? _2479 : min(_2478, _2479));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            _2648 = ((abs(_2485 / _2474) * cbSceneParam._m0[80u].y) * ((((_2619 - _2620) * 2.0) - ((exp2(_2493 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)))) - exp2(_2493 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0))))) * _2608)) - ((exp2(_2495 * _2619) - exp2(_2495 * _2620)) * _2608))) + (_2488 * cbSceneParam._m0[80u].z);
        }
        vec4 _2650 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, 1.0), 0.0);
        float _2659 = exp2((_2648 * (-1.44269502162933349609375)) * (1.0 - _2650.w));
        float _2660 = log2(_2659);
        float _2676 = log2(_2405);
        _2497 = (exp2(_2676 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].x)) * _2650.x) / cbSceneParam._m0[78u].x)) + _2402;
        _2499 = (exp2(_2676 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].y)) * _2650.y) / cbSceneParam._m0[78u].y)) + _2403;
        _2501 = (exp2(_2676 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2660 * cbSceneParam._m0[78u].z)) * _2650.z) / cbSceneParam._m0[78u].z)) + _2404;
        _2503 = _2659 * _2405;
    }
    else
    {
        _2497 = _2402;
        _2499 = _2403;
        _2501 = _2404;
        _2503 = _2405;
    }
    float _2515 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2516 = _2515 == 3.0;
    float _2517 = log2(_2503);
    float _2524 = exp2(_2517 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2347 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _584))) + ((_2353 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1394)) * cbPerFrame._m0[3u].x));
    float _2525 = exp2(_2517 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2349 + ((isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))) * _584))) + ((_2355 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1394)) * cbPerFrame._m0[3u].x));
    float _2526 = exp2(_2517 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2351 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _584))) + ((_2357 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1394)) * cbPerFrame._m0[3u].x));
    float _2535 = (_2515 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2535 * (_2516 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.y = _2535 * (_2516 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2499)));
    SV_Target.z = _2535 * (_2516 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2501)));
    SV_Target.w = cbInstanceData._m0[_2377].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2377].w;
}


