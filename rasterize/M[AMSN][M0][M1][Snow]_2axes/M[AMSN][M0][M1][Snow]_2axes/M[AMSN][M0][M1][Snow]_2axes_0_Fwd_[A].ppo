#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1002;
float _3391;
float _3392;
float _3393;
float _3394;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _242.z;
    float _251 = (_242.x * 2.0) + (-1.0);
    float _253 = (_242.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3403 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))));
    float _263 = fma(_260, _217, fma(_253, _210, _251 * _196));
    float _266 = fma(_260, _218, fma(_253, _211, _251 * _197));
    float _269 = fma(_260, _219, fma(_253, _212, _251 * _198));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _281 = cbMtdParam._m0[10u].x + dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[10u].zw, cbMtdParam._m0[11u].x, 0.0));
    float _3414 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _289 = dot(vec4(_274, _275, _276, 0.0), vec4(cbMtdParam._m0[11u].yzw, 0.0)) + cbMtdParam._m0[10u].x;
    float _3425 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) + (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)));
    vec4 _309 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _309.x * cbMtdParam._m0[9u].x;
    float _315 = _309.y * cbMtdParam._m0[9u].y;
    float _316 = _309.z * cbMtdParam._m0[9u].z;
    vec4 _328 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _339 = ((_328.x - _314) * _291) + _314;
    float _340 = ((_328.y - _315) * _291) + _315;
    float _341 = ((_328.z - _316) * _291) + _316;
    vec4 _353 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _355 = _353.x;
    float _357 = _355 - (_355 * _291);
    vec4 _370 = texture(sampler2D(M_AMSN_M0_M1_Snow_2axes_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3436 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _387 = ((_370.z - _247) * _291) + _247;
    float _396 = ((sqrt(1.0 - (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) - _260) * _291) + _260;
    float _400 = (((_377 - _251) * _291) + _251) + (cbMtdParam._m0[10u].y * _251);
    float _401 = (((_378 - _253) * _291) + _253) + (cbMtdParam._m0[10u].y * _253);
    float _404 = fma(_396, _217, fma(_401, _210, _400 * _196));
    float _407 = fma(_396, _218, fma(_401, _211, _400 * _197));
    float _410 = fma(_396, _219, fma(_401, _212, _400 * _198));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3447 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _418 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _3458 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3469 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _3480 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3491 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _422 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _489 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _479);
    float _490 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _479);
    float _491 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _479);
    float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
    float _496 = _489 * _495;
    float _497 = _490 * _495;
    float _498 = _491 * _495;
    vec4 _503 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _505 = _503.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _681 = sqrt(((_489 * _489) + (_490 * _490)) + (_491 * _491));
        float _687 = (cbMatDynParam._m0[5u].x * _681) + cbMatDynParam._m0[5u].y;
        float _3502 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _692 = (cbMatDynParam._m0[5u].z * _681) + cbMatDynParam._m0[5u].w;
        float _3513 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) - _688)) + _688) < ((_505 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _538 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _541 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _544 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _557 = uint(roundEven(NORMAL.w)) * 13u;
    uint _559 = _557 + 9u;
    uint _560 = _559 + uint(cbMatDynParam._m0[0u].w);
    float _566 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_560].x;
    float _567 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_560].y;
    float _568 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_560].z;
    float _3524 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _572 = 1.0 - _422;
    float _573 = _569 * _572;
    float _574 = _570 * _572;
    float _575 = _571 * _572;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _422;
    float _581 = (_570 + (-0.039999999105930328369140625)) * _422;
    float _582 = (_571 + (-0.039999999105930328369140625)) * _422;
    float _583 = _580 + 0.039999999105930328369140625;
    float _585 = _581 + 0.039999999105930328369140625;
    float _586 = _582 + 0.039999999105930328369140625;
    vec4 _595 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _598 = _595.x * TEXCOORD.z;
    float _599 = dot(vec3(_415, _416, _417), vec3(_496, _497, _498));
    float _602 = _599 * 2.0;
    float _606 = (_602 * _415) - _496;
    float _607 = (_602 * _416) - _497;
    float _608 = (_602 * _417) - _498;
    float _612 = abs(dot(vec3(_496, _497, _498), vec3(_415, _416, _417)));
    float _3557 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _614 = sqrt(_418);
    float _627 = exp2((_614 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_614 * 3.0));
    float _633 = (1.0 - _627) * ((_614 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _634 = _627 * _614;
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _730 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _734 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _759 = _662 + _415;
        float _760 = _666 + _416;
        float _761 = _670 + _417;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _726;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _730;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _734;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_415, _416, _417), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3605 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_415, _416, _417), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3638 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_415, _416, _417), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3671 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1049 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1053 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1076 = _662 + _415;
        float _1077 = _666 + _416;
        float _1078 = _670 + _417;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_415, _416, _417), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3734 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_415, _416, _417), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3767 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_415, _416, _417), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3800 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = _1002;
        _1324 = _1002;
        _1325 = _1002;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1014)) + _1014;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1015)) + _1015;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1016)) + _1016;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _606 * 0.5;
    float _1383 = _607 * 0.5;
    float _1384 = _608 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1500 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1504 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1508 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1511 = fma(_608, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _606));
        float _1514 = fma(_608, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _606));
        float _1517 = fma(_608, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _606));
        float _1545;
        if (_1511 > 0.0)
        {
            _1545 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1545 = frontier_phi_19_17_ladder;
        }
        float _1751;
        if (_1514 > 0.0)
        {
            _1751 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1751 = frontier_phi_28_24_ladder;
        }
        float _2005;
        if (_1517 > 0.0)
        {
            _2005 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2005 = frontier_phi_40_35_ladder;
        }
        float _2007 = isnan(_1751) ? _1545 : (isnan(_1545) ? _1751 : min(_1545, _1751));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1511) + _1500;
        float _2013 = (_2008 * _1514) + _1504;
        float _2014 = (_2008 * _1517) + _1508;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2017 = (-1.0) - _2015;
        float _2019 = _2015 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2014 > _2019) || ((_2014 < _2017) || ((_2013 > _2019) || ((_2013 < _2017) || ((_2012 < _2017) || (_2012 > _2019))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2014, cbModelParam._m0[9u].z, fma(_2013, cbModelParam._m0[9u].y, _2012 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2014, cbModelParam._m0[10u].z, fma(_2013, cbModelParam._m0[10u].y, _2012 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2014, cbModelParam._m0[11u].z, fma(_2013, cbModelParam._m0[11u].y, _2012 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_18_40_ladder = _2142.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2142.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2142.x * cbModelParam._m0[1u].y;
        }
        _1533 = frontier_phi_18_40_ladder_2;
        _1535 = frontier_phi_18_40_ladder_1;
        _1537 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_606, _607, _608), _1451);
        _1533 = _1521.x * cbModelParam._m0[1u].y;
        _1535 = _1521.y * cbModelParam._m0[1u].y;
        _1537 = _1521.z * cbModelParam._m0[1u].y;
    }
    float _1541 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1541 : min(cbModelParam._m0[25u].w, _1541));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1599 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1603 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1607 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1610 = fma(_608, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _606));
        float _1613 = fma(_608, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _606));
        float _1616 = fma(_608, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _606));
        float _1756;
        if (_1610 > 0.0)
        {
            _1756 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1756 = frontier_phi_30_26_ladder;
        }
        float _2032;
        if (_1613 > 0.0)
        {
            _2032 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2032 = frontier_phi_42_37_ladder;
        }
        float _2245;
        if (_1616 > 0.0)
        {
            _2245 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2245 = frontier_phi_51_48_ladder;
        }
        float _2247 = isnan(_2032) ? _1756 : (isnan(_1756) ? _2032 : min(_1756, _2032));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1610) + _1599;
        float _2253 = (_2248 * _1613) + _1603;
        float _2254 = (_2248 * _1616) + _1607;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2254, cbModelParam._m0[17u].z, fma(_2253, cbModelParam._m0[17u].y, _2252 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2254, cbModelParam._m0[18u].z, fma(_2253, cbModelParam._m0[18u].y, _2252 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2254, cbModelParam._m0[19u].z, fma(_2253, cbModelParam._m0[19u].y, _2252 * cbModelParam._m0[19u].x))), _1542);
            frontier_phi_27_51_ladder = _2452.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2452.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2452.x * cbModelParam._m0[1u].z;
        }
        _1635 = frontier_phi_27_51_ladder_2;
        _1637 = frontier_phi_27_51_ladder_1;
        _1639 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_606, _607, _608), _1542);
        _1635 = _1619.x * cbModelParam._m0[1u].z;
        _1637 = _1619.y * cbModelParam._m0[1u].z;
        _1639 = _1619.z * cbModelParam._m0[1u].z;
    }
    float _1652 = (((_633 * _583) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1635 - _1533)) + _1533);
    float _1654 = (((_633 * _585) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1637 - _1535)) + _1535);
    float _1656 = (((_633 * _586) + _634) * _598) * ((cbModelParam._m0[1u].w * (_1639 - _1537)) + _1537);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_557 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1685 = _598 + (-1.0);
    float _1690 = (cbLight._m0[_1678].x * _1685) + 1.0;
    float _1691 = (cbLight._m0[_1678].y * _1685) + 1.0;
    float _1692 = (cbLight._m0[_1678].z * _1685) + 1.0;
    float _1693 = (cbLight._m0[_1678].w * _1685) + 1.0;
    uint _1694 = _1677 + 5u;
    float _1700 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1704 = _1677 + 4u;
    float _1710 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
    uint _1714 = _1677 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_415, _416, _417));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_415, _416, _417));
    float _3936 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3947 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1694].x * _1700) * _1735) + ((cbLight._m0[_1704].x * _1710) * _1733);
    float _1743 = ((_1700 * cbLight._m0[_1694].y) * _1735) + ((_1710 * cbLight._m0[_1704].y) * _1733);
    float _1744 = ((_1700 * cbLight._m0[_1694].z) * _1735) + ((_1710 * cbLight._m0[_1704].z) * _1733);
    uvec4 _1748 = floatBitsToUint(cbLight._m0[_1677 + 12u]);
    bool _1750 = _1748.x == 0u;
    float _1761;
    float _1763;
    float _1765;
    if (_1750)
    {
        _1761 = _1742;
        _1763 = _1743;
        _1765 = _1744;
    }
    else
    {
        uint _1769 = _1677 + 6u;
        float _1785 = (dot(vec3(cbLight._m0[_1677 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1786 = _1785 * _1785;
        float _3958 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1788 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _1761 = (((cbLight._m0[_1769].x * 0.3183098733425140380859375) * _1787) * _1788) + _1742;
        _1763 = (((cbLight._m0[_1769].y * 0.3183098733425140380859375) * _1787) * _1788) + _1743;
        _1765 = (((cbLight._m0[_1769].z * 0.3183098733425140380859375) * _1787) * _1788) + _1744;
    }
    bool _1768 = _1748.y == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1768)
    {
        _1806 = _1761;
        _1808 = _1763;
        _1810 = _1765;
    }
    else
    {
        uint _1976 = _1677 + 7u;
        float _1992 = (dot(vec3(cbLight._m0[_1677 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _3974 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1995 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _1806 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1761;
        _1808 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1763;
        _1810 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1765;
    }
    uint _1813 = _1677 + 8u;
    float _1826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _418) * 0.949999988079071044921875);
    float _1827 = _1826 * _1826;
    float _1828 = cbLight._m0[_1677].x + _496;
    float _1829 = cbLight._m0[_1677].y + _497;
    float _1830 = cbLight._m0[_1677].z + _498;
    float _1834 = inversesqrt(dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830)));
    float _1835 = _1834 * _1828;
    float _1836 = _1834 * _1829;
    float _1837 = _1834 * _1830;
    float _1838 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1677].xyz));
    float _3990 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _1842 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1843 = dot(vec3(_415, _416, _417), vec3(_1835, _1836, _1837));
    float _4012 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1847 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1835, _1836, _1837));
    float _4023 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1851 = _1827 * _1827;
    float _1855 = ((_1846 * _1846) * (_1851 + (-1.0))) + 1.0;
    float _1863 = exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0);
    float _1864 = 0.959999978542327880859375 - _580;
    float _1866 = 0.959999978542327880859375 - _581;
    float _1867 = 0.959999978542327880859375 - _582;
    float _1874 = 1.0 - _1827;
    float _1885 = (0.5 / (((_1842 * ((_1841 * _1874) + _1827)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1874) + _1827) * _1841))) * _1841;
    float _4034 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1851 / ((_1855 * _1855) * 3.141590118408203125));
    uint _1898 = _1677 + 9u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _418) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1714].x + _496;
    float _1912 = cbLight._m0[_1714].y + _497;
    float _1913 = cbLight._m0[_1714].z + _498;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1714].xyz));
    float _4045 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1925 = dot(vec3(_415, _416, _417), vec3(_1918, _1919, _1920));
    float _4056 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1918, _1919, _1920));
    float _4067 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1910 * _1910;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1944 = exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0);
    float _1951 = 1.0 - _1910;
    float _1961 = (0.5 / (((_1842 * ((_1924 * _1951) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _1951) + _1910) * _1924))) * _1924;
    float _4078 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    float _1973 = (((((_1944 * _1864) + _583) * cbLight._m0[_1898].x) * _1963) * _1700) + (((((_1863 * _1864) + _583) * cbLight._m0[_1813].x) * _1887) * _1710);
    float _1974 = (((((_1944 * _1866) + _585) * cbLight._m0[_1898].y) * _1963) * _1700) + (((((_1863 * _1866) + _585) * cbLight._m0[_1813].y) * _1887) * _1710);
    float _1975 = (((((_1944 * _1867) + _586) * cbLight._m0[_1898].z) * _1963) * _1700) + (((((_1863 * _1867) + _586) * cbLight._m0[_1813].z) * _1887) * _1710);
    float _2037;
    float _2039;
    float _2041;
    if (_1750)
    {
        _2037 = _1973;
        _2039 = _1974;
        _2041 = _1975;
    }
    else
    {
        uint _2043 = _1677 + 2u;
        uint _2047 = _1677 + 10u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _418) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _496;
        float _2064 = cbLight._m0[_2043].y + _497;
        float _2065 = cbLight._m0[_2043].z + _498;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2043].xyz));
        float _4089 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2077 = dot(vec3(_415, _416, _417), vec3(_2070, _2071, _2072));
        float _4100 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _4111 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
        float _2103 = 1.0 - _2062;
        float _2113 = (0.5 / (((_1842 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2103) + _2062) * _2076))) * _2076;
        float _4122 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
        _2037 = (((((_2096 * _1864) + _583) * cbLight._m0[_2047].x) * _2115) * _2116) + _1973;
        _2039 = (((((_2096 * _1866) + _585) * cbLight._m0[_2047].y) * _2115) * _2116) + _1974;
        _2041 = (((((_2096 * _1867) + _586) * cbLight._m0[_2047].z) * _2115) * _2116) + _1975;
    }
    float _2151;
    float _2153;
    float _2155;
    if (_1768)
    {
        _2151 = _2037;
        _2153 = _2039;
        _2155 = _2041;
    }
    else
    {
        uint _2162 = _1677 + 3u;
        uint _2166 = _1677 + 11u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _418) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _496;
        float _2183 = cbLight._m0[_2162].y + _497;
        float _2184 = cbLight._m0[_2162].z + _498;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2162].xyz));
        float _4138 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2196 = dot(vec3(_415, _416, _417), vec3(_2189, _2190, _2191));
        float _4149 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4160 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
        float _2222 = 1.0 - _2181;
        float _2232 = (0.5 / (((_1842 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1842 * _2222) + _2181) * _2195))) * _2195;
        float _4171 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
        _2151 = (((((_2215 * _1864) + _583) * cbLight._m0[_2166].x) * _2234) * _2235) + _2037;
        _2153 = (((((_2215 * _1866) + _585) * cbLight._m0[_2166].y) * _2234) * _2235) + _2039;
        _2155 = (((((_2215 * _1867) + _586) * cbLight._m0[_2166].z) * _2234) * _2235) + _2041;
    }
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    if (_1675.y == 0u)
    {
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2310;
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2310;
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2310;
        uvec4 _2325 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2326 = _2325.x;
        uint _2337 = uint((float(_2325.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2326))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2326)));
        float _2347 = (log2(_2313 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2348 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        uint _2351 = uint(isnan(14.0) ? _2348 : (isnan(_2348) ? 14.0 : min(_2348, 14.0)));
        uvec4 _2356 = texelFetch(g_lightClusterGridBuffer, int(((_2351 << 2u) + (_2337 << 6u)) >> 2u));
        uint _2357 = _2356.x;
        uint _2358 = _2325.z;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        if (((((1u << ((_2358 >> 4u) & 15u)) + 4294967295u) & _2357) == 0u) || ((_2358 & 240u) == 0u))
        {
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
        }
        else
        {
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            uint _2615 = 0u;
            uint _2624;
            bool _2625;
            for (;;)
            {
                _2624 = texelFetch(g_lightClassification, int((((_2351 << 5u) + (_2337 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                _2625 = _2624 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2625)
                {
                    frontier_phi_68_pred = _2611;
                    frontier_phi_68_pred_1 = _2614;
                    frontier_phi_68_pred_2 = _2613;
                    frontier_phi_68_pred_3 = _2612;
                    frontier_phi_68_pred_4 = _2610;
                    frontier_phi_68_pred_5 = _2609;
                }
                else
                {
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    uint _2760;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2624;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    for (;;)
                    {
                        uint _2764 = uint(findLSB(_2760)) + (_2615 << 5u);
                        uint _2761 = (_2760 + 4294967295u) & _2760;
                        uint _2766 = _2764 * 48u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2786 = (_2764 * 48u) + 4u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2805 = (_2764 * 48u) + 8u;
                        vec3 _2816 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x));
                        float _2820 = _2780.x - _2311;
                        float _2821 = _2780.y - _2312;
                        float _2822 = _2780.z - _2313;
                        float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                        float _2826 = inversesqrt(_2823);
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2830 = dot(vec3(_538, _541, _544), vec3(_2827, _2828, _2829));
                        float _2835 = 1.0 - (_2823 * _2780.w);
                        float _4197 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2837 = sqrt(_2823) * _2799.w;
                        float _2840 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2830) + _2841;
                        float _2847 = _2837 * _2837;
                        float _2851 = ((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2836) / ((_2847 * 0.699999988079071044921875) + 1.0);
                        float _2855 = (-0.0) - _2311;
                        float _2856 = (-0.0) - _2312;
                        float _2857 = (-0.0) - _2313;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2872 = exp2(log2(1.0 / ((_2847 * 3.5) + 5.0)) * 0.25);
                        float _2873 = 1.0 - _614;
                        float _2880 = sqrt(1.0 - ((1.0 - (_2873 * _2873)) * (1.0 - (_2872 * _2872))));
                        float _2881 = _2880 * _2880;
                        float _2882 = _2881 * _2881;
                        float _2883 = _2862 + _2827;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2893 = dot(vec3(_538, _541, _544), vec3(_2862, _2863, _2864));
                        float _4213 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2896 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2897 = dot(vec3(_538, _541, _544), vec3(_2889 * _2883, _2889 * _2884, _2889 * _2885));
                        float _4224 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2904 = ((_2900 * _2900) * (_2882 + (-1.0))) + 1.0;
                        float _2905 = _2840 * _2881;
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2830) + _2906;
                        float _4235 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2911 = 1.0 - _2881;
                        float _2921 = (0.5 / (((_2910 * ((_2896 * _2911) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2910 * _2911) + _2881) * _2896))) * _2910;
                        float _4246 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2932 = (((_2882 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_2904 * _2904) * ((_2847 * 2.1991131305694580078125) + 3.141590118408203125))) * _2836;
                        _2684 = (_2851 * _2799.x) + _2757;
                        _2685 = (_2851 * _2799.y) + _2758;
                        _2686 = (_2851 * _2799.z) + _2759;
                        _2681 = (_2932 * _2816.x) + _2754;
                        _2682 = (_2932 * _2816.y) + _2755;
                        _2683 = (_2932 * _2816.z) + _2756;
                        if (_2761 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2761;
                        }
                    }
                    frontier_phi_68_pred = _2683;
                    frontier_phi_68_pred_1 = _2686;
                    frontier_phi_68_pred_2 = _2685;
                    frontier_phi_68_pred_3 = _2684;
                    frontier_phi_68_pred_4 = _2682;
                    frontier_phi_68_pred_5 = _2681;
                }
                _2462 = frontier_phi_68_pred;
                _2468 = frontier_phi_68_pred_1;
                _2466 = frontier_phi_68_pred_2;
                _2464 = frontier_phi_68_pred_3;
                _2460 = frontier_phi_68_pred_4;
                _2458 = frontier_phi_68_pred_5;
                uint _2616 = _2615 + 1u;
                if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2609 = _2458;
                    _2610 = _2460;
                    _2611 = _2462;
                    _2612 = _2464;
                    _2613 = _2466;
                    _2614 = _2468;
                    _2615 = _2616;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
        }
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.z;
        uint _2474 = (_2472 >> 8u) & 15u;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((4294967295u << _2474) & _2357) == 0u)
        {
            _2577 = _2457;
            _2579 = _2459;
            _2581 = _2461;
            _2583 = _2463;
            _2585 = _2465;
            _2587 = _2467;
        }
        else
        {
            float _2602 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
            float _2603 = _2602 * _2311;
            float _2604 = _2602 * _2312;
            float _2605 = _2602 * _2313;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2474 < ((_2472 >> 12u) & 15u))
            {
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2737 = _2457;
                float _2738 = _2459;
                float _2739 = _2461;
                float _2740 = _2463;
                float _2741 = _2465;
                float _2742 = _2467;
                uint _2743 = _2474;
                uint _2752;
                bool _2753;
                for (;;)
                {
                    _2752 = texelFetch(g_lightClassification, int((((_2351 << 5u) + (_2337 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                    _2753 = _2752 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2753)
                    {
                        frontier_phi_79_pred = _2742;
                        frontier_phi_79_pred_1 = _2741;
                        frontier_phi_79_pred_2 = _2740;
                        frontier_phi_79_pred_3 = _2739;
                        frontier_phi_79_pred_4 = _2738;
                        frontier_phi_79_pred_5 = _2737;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        float _2963 = _2741;
                        float _2964 = _2742;
                        uint _2965 = _2752;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        vec3 _3019;
                        vec4 _3035;
                        vec4 _3051;
                        float _3098;
                        bool _3099;
                        for (;;)
                        {
                            uint _2976 = ((_2743 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2976 * 40u) + 8u;
                            _3019 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x));
                            uint _3022 = (_2976 * 40u) + 16u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3038 = (_2976 * 40u) + 20u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3054 = (_2976 * 40u) + 24u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3073 = (_2976 * 40u) + 28u;
                            vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3098 = fma(_2313, _3086.z, fma(_2312, _3086.y, _3086.x * _2311)) + _3086.w;
                            _3099 = !((fma(_2313, _3067.z, fma(_2312, _3067.y, _3067.x * _2311)) + _3067.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3099)
                            {
                                float _3126 = _2991.x - _2311;
                                float _3127 = _2991.y - _2312;
                                float _3128 = _2991.z - _2313;
                                float _3129 = dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128));
                                float _3132 = inversesqrt(_3129);
                                float _3133 = _3132 * _3126;
                                float _3134 = _3132 * _3127;
                                float _3135 = _3132 * _3128;
                                float _3139 = 1.0 - (_3129 / (_2992 * _2992));
                                float _4257 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3144 = sqrt(_3129) * _3007.w;
                                float _3146 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                                float _3147 = _3146 * _3146;
                                float _3150 = ((1.0 - _3147) * dot(vec3(_3133, _3134, _3135), vec3(_538, _541, _544))) + _3147;
                                float _3153 = _3144 * _3144;
                                float _3157 = (fma(_2313, _3035.z, fma(_2312, _3035.y, _3035.x * _2311)) + _3035.w) / _3098;
                                float _3158 = (fma(_2313, _3051.z, fma(_2312, _3051.y, _3051.x * _2311)) + _3051.w) / _3098;
                                float _3162 = 1.0 - dot(vec2(_3157, _3158), vec2(_3157, _3158));
                                float _4273 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3164 = _3163 * (((isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0))) * _3140) / ((_3153 * 0.699999988079071044921875) + 1.0));
                                float _3176 = exp2(log2(1.0 / ((_3153 * 3.5) + 5.0)) * 0.25);
                                float _3177 = 1.0 - _614;
                                float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                                float _3185 = _3184 * _3184;
                                float _3186 = _3185 * _3185;
                                float _3187 = _3133 - _2603;
                                float _3188 = _3134 - _2604;
                                float _3189 = _3135 - _2605;
                                float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                                float _3197 = dot(vec3(_538, _541, _544), vec3((-0.0) - _2603, (-0.0) - _2604, (-0.0) - _2605));
                                float _4284 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3201 = dot(vec3(_538, _541, _544), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                                float _4295 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                                float _3209 = _3146 * _3185;
                                float _3210 = _3209 * _3209;
                                float _3216 = ((1.0 - _3210) * dot(vec3(_538, _541, _544), vec3(_3133, _3134, _3135))) + _3210;
                                float _4306 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3218 = 1.0 - _3185;
                                float _3228 = (0.5 / (((_3217 * ((_3200 * _3218) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3217 * _3218) + _3185) * _3200))) * _3217;
                                float _4317 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3238 = (_3163 * _3140) * (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_3208 * _3208) * ((_3153 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3164 * _3007.z;
                                frontier_phi_85_pred_1 = _3164 * _3007.y;
                                frontier_phi_85_pred_2 = _3164 * _3007.x;
                                frontier_phi_85_pred_3 = _3238 * _3019.z;
                                frontier_phi_85_pred_4 = _3238 * _3019.y;
                                frontier_phi_85_pred_5 = _3238 * _3019.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_85_pred;
                            _3246 = frontier_phi_85_pred_1;
                            _3245 = frontier_phi_85_pred_2;
                            _3244 = frontier_phi_85_pred_3;
                            _3243 = frontier_phi_85_pred_4;
                            _3242 = frontier_phi_85_pred_5;
                            _2949 = _3245 + _2962;
                            _2950 = _3246 + _2963;
                            _2951 = _3247 + _2964;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2951;
                        frontier_phi_79_pred_1 = _2950;
                        frontier_phi_79_pred_2 = _2949;
                        frontier_phi_79_pred_3 = _2948;
                        frontier_phi_79_pred_4 = _2947;
                        frontier_phi_79_pred_5 = _2946;
                    }
                    _2588 = frontier_phi_79_pred;
                    _2586 = frontier_phi_79_pred_1;
                    _2584 = frontier_phi_79_pred_2;
                    _2582 = frontier_phi_79_pred_3;
                    _2580 = frontier_phi_79_pred_4;
                    _2578 = frontier_phi_79_pred_5;
                    uint _2744 = _2743 + 1u;
                    if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2737 = _2578;
                        _2738 = _2580;
                        _2739 = _2582;
                        _2740 = _2584;
                        _2741 = _2586;
                        _2742 = _2588;
                        _2743 = _2744;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2584;
                frontier_phi_60_61_ladder_1 = _2588;
                frontier_phi_60_61_ladder_2 = _2586;
                frontier_phi_60_61_ladder_3 = _2582;
                frontier_phi_60_61_ladder_4 = _2580;
                frontier_phi_60_61_ladder_5 = _2578;
            }
            else
            {
                frontier_phi_60_61_ladder = _2463;
                frontier_phi_60_61_ladder_1 = _2467;
                frontier_phi_60_61_ladder_2 = _2465;
                frontier_phi_60_61_ladder_3 = _2461;
                frontier_phi_60_61_ladder_4 = _2459;
                frontier_phi_60_61_ladder_5 = _2457;
            }
            _2577 = frontier_phi_60_61_ladder_5;
            _2579 = frontier_phi_60_61_ladder_4;
            _2581 = frontier_phi_60_61_ladder_3;
            _2583 = frontier_phi_60_61_ladder;
            _2585 = frontier_phi_60_61_ladder_2;
            _2587 = frontier_phi_60_61_ladder_1;
        }
        float _2592 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
        _2369 = (_2592 * _2583) + _1806;
        _2371 = (_2592 * _2585) + _1808;
        _2373 = (_2592 * _2587) + _1810;
        _2375 = ((_2577 * _583) * _2592) + _2151;
        _2377 = ((_2579 * _585) * _2592) + _2153;
        _2379 = ((_2581 * _586) * _2592) + _2155;
    }
    else
    {
        _2369 = _1806;
        _2371 = _1808;
        _2373 = _1810;
        _2375 = _2151;
        _2377 = _2153;
        _2379 = _2155;
    }
    float _4333 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4344 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4355 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _2396 = ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2369 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _598))) + ((_2375 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2397 = ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2371 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _598))) + ((_2377 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2398 = ((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2373 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _598))) + ((_2379 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    uint _2399 = _557 + 6u;
    float _2407 = _517 / cbSceneParam._m0[86u].x;
    float _2408 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2422 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2407, _2408, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2424 = _2422.x;
    float _2425 = _2422.y;
    float _2426 = _2422.z;
    float _2427 = _2422.w;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2482 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2483 = _2482 / _438;
        float _2494 = _2483 * _489;
        float _2495 = _490 * _2483;
        float _2496 = (-0.0) - _2495;
        float _2497 = _2483 * _491;
        float _2499 = (cbSceneParam._m0[77u].w * _2496) / _2482;
        float _2500 = _2499 + cbSceneParam._m0[79u].w;
        float _2501 = cbSceneParam._m0[79u].w - _2495;
        float _2507 = sqrt(((_2494 * _2494) + (_2495 * _2495)) + (_2497 * _2497));
        float _2510 = (1.0 - (cbSceneParam._m0[77u].w / _2482)) * _2507;
        float _2515 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2517 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2694;
        if (abs((_2496 - _2499) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2694 = ((((_2500 > 0.0) ? exp2(_2515 * _2500) : (2.0 - exp2(_2517 * _2500))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2510;
        }
        else
        {
            float _2638 = 1.0 / cbSceneParam._m0[80u].x;
            float _2639 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : max(_2500, _2501));
            float _2640 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : min(_2500, _2501));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            _2694 = ((abs(_2507 / _2496) * cbSceneParam._m0[80u].y) * ((((_2649 - _2650) * 2.0) - ((exp2(_2515 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)))) - exp2(_2515 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))))) * _2638)) - ((exp2(_2517 * _2649) - exp2(_2517 * _2650)) * _2638))) + (_2510 * cbSceneParam._m0[80u].z);
        }
        vec4 _2696 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2407, _2408, 1.0), 0.0);
        float _2705 = exp2((_2694 * (-1.44269502162933349609375)) * (1.0 - _2696.w));
        float _2706 = log2(_2705);
        float _2722 = log2(_2427);
        _2519 = (exp2(_2722 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].x)) * _2696.x) / cbSceneParam._m0[78u].x)) + _2424;
        _2521 = (exp2(_2722 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].y)) * _2696.y) / cbSceneParam._m0[78u].y)) + _2425;
        _2523 = (exp2(_2722 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].z)) * _2696.z) / cbSceneParam._m0[78u].z)) + _2426;
        _2525 = _2705 * _2427;
    }
    else
    {
        _2519 = _2424;
        _2521 = _2425;
        _2523 = _2426;
        _2525 = _2427;
    }
    bool _2732;
    vec4 _2535;
    vec4 _2557;
    float _2559;
    float _2563;
    float _2564;
    float _2565;
    float _2566;
    bool _2576;
    for (;;)
    {
        _2535 = cbMatDynParam._m0[0u];
        float _2537 = roundEven(_2535.y);
        bool _2538 = _2537 == 3.0;
        float _2539 = log2(_2525);
        float _2546 = exp2(_2539 * cbSceneParam._m0[78u].x) * _2396;
        float _2547 = exp2(_2539 * cbSceneParam._m0[78u].y) * _2397;
        float _2548 = exp2(_2539 * cbSceneParam._m0[78u].z) * _2398;
        float _2555 = _505 + (-0.5);
        _2557 = cbMtdParam._m0[1u];
        _2559 = _2557.y * _2555;
        float _2562 = (_2537 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2563 = _2562 * (_2538 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2519)));
        _2564 = _2562 * (_2538 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2521)));
        _2565 = _2562 * (_2538 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2523)));
        _2566 = _2555 * 0.999000012874603271484375;
        _2576 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2576)
        {
            if ((cbInstanceData._m0[_557 + 7u].x + _2566) < 0.5)
            {
                _2732 = true;
                break;
            }
        }
        uint _2673 = _559 + uint(_2535.w);
        if ((cbInstanceData._m0[_2673].w < 1.0) && ((cbInstanceData._m0[_2673].w + _2566) < 0.5))
        {
            _2732 = true;
            break;
        }
        if ((_2559 + 1.0) < _2557.x)
        {
            _2732 = true;
            break;
        }
        _2732 = false;
        break;
    }
    float _2937;
    if (_2732)
    {
        discard_state = true;
        _2937 = 0.0;
    }
    else
    {
        _2937 = cbInstanceData._m0[_2399].w;
    }
    SV_Target.x = _2563;
    SV_Target.y = _2564;
    SV_Target.z = _2565;
    SV_Target.w = _2937;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2399].w;
    discard_exit();
}


